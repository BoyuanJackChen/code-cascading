[
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    n = len(stdin)\n    result = []\n    for i in range(n):\n        if stdin[i].count(\"|\") > 0:\n            #print(\"Accordion\")\n            if i > 0:\n                if stdin[i-1] == \"|\":\n                    result = result + stdin[i]\n                    continue\n            if i < n - 1:\n                if stdin[i+1] == \"|\":\n                    result = result + stdin[i]\n                    continue\n        elif stdin[i].count(\":\") > 0:\n            #print(\"Accordion\")\n            if i > 0:\n                if stdin[i-1] == \":\":\n                    result = result + stdin[i]\n                    continue\n            if i < n - 1:\n                if stdin[i+1] == \":\":\n                    result = result + stdin[i]\n                    continue\n        elif stdin[i].count(\"]\") > 0:\n            #print(\"Accordion\")\n            if i > 0:\n                if stdin[i-1] == \"]\":\n                    result = result + stdin[i]\n                    continue\n            if i < n - 1:\n                if stdin[i+1] == \"]\":\n                    result = result + stdin[i]\n                    continue\n        elif stdin[i].count(\"[\") > 0:\n            #print(\"Accordion\")\n            if i > 0:\n                if stdin[i-1] == \"[\":\n                    result = result + stdin[i]\n                    continue\n            if i < n - 1:\n                if stdin[i+1] == \"[\":\n                    result = result + stdin[i]\n                    continue\n    return (max(result))\n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    l = stdin.split('|')\n    ans = 0\n    for i in range(len(l)-1):\n        if l[i+1][0]!= ':':\n            ans = max(ans,len(l[i])+len(l[i+1]))\n    return str(ans)\n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    ans = -1\n    for i in range(len(stdin) - 3):\n        if stdin[i] == \":\":\n            ans = max(ans, len(stdin[i + 2 : ]))\n    return ans\n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    l=[]\n    for i in stdin:\n        if i==':':\n            l.append(i)\n        else:\n            l[-1]+=i\n    #print(l)\n    #if len(l)<2:\n        #return len(l)\n    #print(len(l))\n    return len(l)\n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return s\n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    res: str = []\n    while True:\n        if len(res) == 0:\n            res.append(stdin)\n        else:\n            if ':' not in res[-1]:\n                res.append(stdin)\n            else:\n                if '|' in res[-1]:\n                    res[-1] = res[-1][:res[-1].index('|')]\n                else:\n                    res[-1] = res[-1][:res[-1].index(':')]\n        if len(res[-1]) == 0:\n            res.pop()\n        else:\n            if len(res[-1]) == 1:\n                return '-1'\n            else:\n                return len(res[-1]) - 1\n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    my_list = stdin.split(\"|\")\n    result = []\n    for i in my_list:\n        l = list(i)\n        flag = 1\n        for j in l:\n            if j == \":\":\n                flag = 0\n        if flag == 1:\n            result.append(i)\n    if len(result) == 0:\n        return -1\n    else:\n        return max([len(i) for i in result])\n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    length = len(stdin)\n    stacks = []\n    stack_size = 0\n\n    for index in range(length):\n        if stdin[index] == \"|\":\n            if stack_size == 0:\n                stacks.append(index)\n            else:\n                if stack_size == 1:\n                    stacks.append(index)\n                else:\n                    stacks[-2] = index\n            stack_size += 1\n        elif stdin[index] == \":\":\n            if stack_size == 1:\n                stacks.append(index)\n            else:\n                stacks[-2] = index\n            stack_size -= 1\n        elif stdin[index] == \"[\":\n            stacks.append(index)\n        elif stdin[index] == \"]\":\n            stack_size -= 1\n            if stack_size == 0:\n                stacks.pop()\n    stacks = [x - i for i, x in enumerate(stacks)]\n\n    if stack_size == 0:\n        return \"\".join([x for x in stdin[:stacks[0]]])\n\n    return \"\".join([x for x in stdin[:stacks[0]]]) + \"\".join([x for x in stdin[stacks[-1] + 1 :]])\n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    open = False\n    l = 0\n    acc = ''\n    i = 0\n    while i < len(s):\n        if s[i] == '[':\n            open = True\n            i += 1\n        elif s[i] == ']':\n            open = False\n            i += 1\n        elif s[i] == ':':\n            if open:\n                acc += ':'\n                l = len(acc)\n            else:\n                acc += '|'\n            i += 1\n        else:\n            acc += s[i]\n            i += 1\n    if open:\n        return -1\n    return acc, l\n"
    },
    {
        "number": 0,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    ans = []\n    for i in range(1, x + 1):\n        # i,j,k\n        # i(0-9) j(0-9)\n        # i+j+k\n        ans.append(max(i,j,k) - min(i,j,k))\n    return str(max(ans))"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return max(int(''.join(sorted(list(stdin), reverse=True))) for stdin in stdin.split())\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    while x > 0:\n        if x % 10 > 9:\n            return str(x)\n        x //= 10"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Hint: use built-in function max()\n    # write your code in Python 3.6\n    # You can also use functions max() and min()\n    # that were imported in the beginning\n    x = int(stdin)\n    biggest = 0\n    for i in range(10, x):\n        for j in range(1, 10):\n            temp = str(i * j)\n            temp = list(temp)\n            if sum(temp) > biggest:\n                biggest = sum(temp)\n    for i in range(1, 10):\n        for j in range(1, 10):\n            temp = str(i * j)\n            temp = list(temp)\n            if sum(temp) > biggest:\n                biggest = sum(temp)\n    return str(biggest)"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    max_sum = 0\n    n = int(stdin)\n    for i in range(1, n+1):\n        sum_int = 0\n        for digit in str(i):\n            sum_int += int(digit)\n        if sum_int > max_sum:\n            max_sum = sum_int\n            x = i\n    return str(x)\nprint(solution(input()))\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    # Your code here\n    list_of_int = []\n    max_sum = -1\n    for i in range(1, x + 1):\n        sum_digits = 0\n        while i > 0:\n            sum_digits += i % 10\n            i //= 10\n        if sum_digits > max_sum:\n            max_sum = sum_digits\n            list_of_int = [i]\n        elif sum_digits == max_sum:\n            list_of_int.append(i)\n    return str(max(list_of_int))"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    sum_x = 0\n    max_x = 0\n    x = int(stdin)\n    for i in range(1, x + 1):\n        sum_x += int(str(i))\n        if i > max_x:\n            max_x = i\n    if x == sum_x:\n        print(max_x)\n    else:\n        print(x)\n"
    },
    {
        "number": 1,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    best = 0\n    maxsum = 0\n    n = len(str(x))\n    for i in range(n, 0, -1):\n        sum_n = 0\n        n = i\n        while x > 0:\n            sum_n += x % 10\n            x //= 10\n        if sum_n > maxsum:\n            best = i\n            maxsum = sum_n\n    return str(best)\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    list = list(map(int, stdin.split('\\n')))\n    year = int(list[0])\n    result = 0\n    while True:\n        if sum(1 for i in str(year) if int(i)):\n            result += 1\n        else:\n            break\n        year += 1\n    return str(result)\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    from math import ceil\n    next_year = int(stdin)\n    # check for lucky years\n    while (ceil(next_year / 1000)!= next_year / 1000):\n        next_year += 1\n    return str(next_year)"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(str(int(stdin) + 1)) - 2)\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    years = stdin.split()\n    years = list(map(int, years))\n    year = int(years[0])\n    year_from_lucky = 0\n    while (year % 4!= 0) and (year % 100!= 0) and (year % 400!= 0):\n        year += 1\n        if year % 4!= 0:\n            year_from_lucky += 1\n    if year % 4 == 0:\n        if year % 100!= 0:\n            if year % 400!= 0:\n                year_from_lucky += 1\n            else:\n                year_from_lucky += 0\n        else:\n            year_from_lucky += 0\n    else:\n        year_from_lucky += 1\n\n    return str(year_from_lucky)\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    d = int(stdin)\n    \n    while (d // 4)!= 0:\n        d += 1\n    \n    return str(d - 5)\n\nsolution(4)\n\nsolution(201)\n\nsolution(4000)"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    current = int(stdin)\n    count = 0\n    while True:\n        current += 1\n        if str(current)[0] == '0':\n            count += 1\n        else:\n            break\n    return str(count)\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    next_year = int(stdin)\n    delta = 1\n    count = 0\n    while True:\n        if next_year % 100 == 0:\n            count += 1\n        elif next_year % 100 == 1:\n            count += 2\n        elif next_year % 100 > 1:\n            count += 1\n        next_year += delta\n        if next_year >= 1 and next_year <= 100000:\n            break\n    return count\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    curr_year = n\n    for i in range(40000000):\n        if (curr_year + 1) % 100 == 0:\n            if (curr_year + 1) // 100!= 1:\n                curr_year += 1\n        else:\n            curr_year += 1\n    print(curr_year - n)\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    d = {1: 9, 2: 20, 3: 31, 4: 60, 5: 91, 6: 121, 7: 152, 8: 182, 9: 204, 10: 225}\n    r = 1\n    for i in range(1, int(stdin)):\n        if i in d:\n            r = r + d[i]\n        else:\n            r = r + 1\n    return str(r)\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return 0"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.split(\"\\n\")[0]\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    l, r, n, q = map(int, stdin.split())\n    l = min(l, r)\n    r = max(l, r)\n    q -= 2\n    # find the middle point\n    while q > 0:\n        l += 1\n        r -= 1\n        q -= 1\n    return str(r - l + 1)"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    result = 0\n    for _ in range(q):\n        l, r = map(int, stdin.split())\n        if r >= l:\n            result = max(result, (r-l)//n+1)\n        else:\n            result = max(result, n-1)\n    return str(result)\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    painters = [[] for _ in range(n)]\n    for i in range(q):\n        l, r = map(int, stdin.split())\n        painters[l - 1].append(r)\n        painters[r - 1].append(l)\n\n    count = 0\n    for i in range(q):\n        count += 1\n        for j in range(len(painters[i])):\n            painters[i].pop(0)\n            if len(painters[i]) == 0:\n                break\n            for k in range(len(painters[i])):\n                if painters[i][0] > painters[i][k]:\n                    painters[i][0] = painters[i][k]\n        if len(painters[i]) == 0:\n            break\n        for j in range(len(painters[i])):\n            painters[i].pop(0)\n        count += len(painters[i])\n\n    return str(count)\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    sections = list(map(int, stdin.split()))\n\n    inp = list(map(int, stdin.split()))\n    sections.sort()\n\n    res = []\n    for i in range(q):\n        res.append(sections[i] - inp[i] - 1)\n    print(max(res))\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return 0\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    res = []\n    n, q = [int(i) for i in stdin.split()]\n    for i in range(q):\n        l, r = [int(i) for i in stdin.split()]\n        res.append((l, r))\n    return res"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin_arr = stdin.strip().split('\\n')\n    n, q = int(stdin_arr[0].split()[0]), int(stdin_arr[0].split()[1])\n    stdin_arr.pop(0)\n\n    painters_dict = dict()\n\n    for line in stdin_arr:\n        painter = int(line.split()[0])\n        min_x, max_x = int(line.split()[1]), int(line.split()[2])\n\n        for x in range(min_x, max_x+1):\n            painters_dict[x] = painters_dict.get(x, [])\n            painters_dict[x].append(painter)\n\n    print(painters_dict)\n\n    painters_sorted = sorted(painters_dict.keys(), key=lambda x: len(painters_dict[x]))\n\n    painters_dict_copy = {k: v for k, v in painters_dict.items()}\n\n    res = 0\n\n    for p in painters_sorted:\n        if len(painters_dict_copy[p]) < q:\n            continue\n        painters_dict_copy[p] = [i for i in painters_dict[p] if i in painters_dict_copy[p]]\n        res = max(res, len(painters_dict_copy[p]))\n\n    return str(res)\n\n\nprint(solution(\"\"\"7 5\n1 4\n4 5\n5 6\n6 7\n3 5\n\"\"\") == \"7\")\nprint(solution(\"\"\"4 4\n1 1\n2 2\n3 4\n\"\"\") == \"4\")\nprint(solution(\"\"\"3 2\n1 1\n2 2\n\"\"\") == \"2\")\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    l_r = []\n    for _ in range(q):\n        l_r.append(list(map(int, stdin.split())))\n\n    l_r.sort(key=lambda x: x[1])\n    l_r.sort(key=lambda x: x[0])\n\n    max_r = 0\n    i = 0\n    while i < q - 2:\n        l, r = l_r[i]\n        if r > max_r:\n            i += 1\n            continue\n        while i < q - 2 and l_r[i][0] <= r:\n            i += 1\n        max_r = max(max_r, l_r[i][0])\n    return max_r\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h, m = list(map(int, stdin.split()))\n    if m % 2 == 0:\n        h += 1\n    if h < 7:\n        h = h - 7\n        while True:\n            if h == 23:\n                if m == 59:\n                    h = 0\n                    m = 0\n                else:\n                    m += 1\n                if m > 59:\n                    m = 59\n                    h += 1\n            if m == 59:\n                if h == 23:\n                    h = 0\n                    m = 0\n                else:\n                    h += 1\n                if h > 23:\n                    h = 23\n            if m == 0:\n                if h == 23:\n                    m = 59\n                    h = 0\n                else:\n                    h += 1\n            else:\n                h += 1\n            if h == 23 and m == 59:\n                break\n    else:\n        if h == 23:\n            m = m - 7\n            while True:\n                if m == 59:\n                    h = 0\n                    m = 0\n                if m == 0:\n                    h += 1\n                    if h == 7:\n                        h = 0\n                        m = 59\n                if m > 59:\n                    h = 0\n                    m = 59\n                if m == 0:\n                    h += 1\n                if h > 23:\n                    break\n                m += 1\n            if h == 23 and m == 59:\n                break\n        else:\n            h -= 7\n            while True:\n                if h == 23:\n                    m = m - 7\n                    if m == 59:\n                        h = 0\n                        m = 0\n                    else:\n                        h += 1\n                if m == 0:\n                    h += 1\n                    if h == 23:\n                        m = 59\n                    else:\n                        h = h - 7\n                if m > 59:\n                    h = 0\n                    m = 59\n                if m == 0:\n                    h += 1\n                if h > 23:\n                    break\n                m += 1\n            if h == 23 and m == 59:\n                break\n\n    return str(h) + \" \" + str(m)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split(\"\\n\")\n    hh, mm = a.split(\":\")\n    hh = int(hh)\n    mm = int(mm)\n    if hh > 23 or mm > 59 or hh < 0 or mm < 0:\n        return 0\n    if hh == 0 and mm == 0:\n        hh = 23\n        mm = 59\n    for i in range(24):\n        if \"7\" in (hh * i + mm) or \"7\" in (hh * i + mm + 60):\n            if i == 0:\n                return 0\n            return i\n\ndef"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    h, m = stdin.split(' ')\n    h, m = int(h), int(m)\n    if (h * 60 + m) % 7 == 0:\n        return \"0\"\n    else:\n        return str(int((h * 60 + m) // 7) + 1)\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t, h, m = stdin.split()\n    h, m = int(h), int(m)\n    if h == m == 0:\n        return \"0\"\n    count = 0\n    if h < m:\n        count = 1\n        while h - m < count:\n            if count % 60 == 7:\n                count += 1\n            else:\n                count += 2\n    else:\n        while h - m > count:\n            if count % 60 == 7:\n                count += 2\n            else:\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    h, m = map(int, stdin.split())\n    ans = 0\n    while m - h > 59:\n        if (m - h) % 60 == 0:\n            m = (m - h) // 60\n        elif (m - h) % 60 < 10:\n            m = (m - h) // 60\n            h = (h - m)\n            m = m % 60\n            ans += 1\n    if (m - h) % 60 == 0:\n        m = (m - h) // 60\n        ans += 1\n    return str(ans)\n\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    y = y - x * (24 - (x - 1) % 24)\n    while x % 24!= y % 60:\n        y += 60\n        x += 1\n    return x"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"Your Answer\"\n    pass"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin_arr = list(map(int, stdin.split()))\n    hours, minutes = stdin_arr[0], stdin_arr[1]\n\n    hour_arr = [(24 - hours + i) % 24 for i in range(24)]\n    hour_arr.sort()\n    hour_arr = ''.join(str(e) for e in hour_arr)\n\n    minutes_arr = [(60 - minutes + i) % 60 for i in range(60)]\n    minutes_arr.sort()\n    minutes_arr = ''.join(str(e) for e in minutes_arr)\n\n    if hours == 23 and minutes == 59:\n        return 0\n\n    if '7' in hour_arr:\n        return minutes_arr.find('7')\n    return minutes_arr.find('7')\nprint(solution(input()))\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 3\n   ... 11 23\n   ... ''')\n    2\n    >>> solution('''\n   ... 5\n   ... 01 07\n   ... ''')\n    0\n    \"\"\"\n    hours, minutes = map(int, stdin.strip().split())\n    minutes_of_hours = 60 * hours\n    if minutes < minutes_of_hours:\n        return str(minutes // minutes_of_hours)\n    else:\n        return '0'"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, pos, l, r = stdin.split()\n    n = int(n)\n    pos = int(pos)\n    l = int(l)\n    r = int(r)\n    return str(math.ceil(n - pos))\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    _, n, pos, l, r = list(map(int, stdin.split()))\n    return str(min(n - pos - 1, r - pos, r - 1))\n\ndef"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    n = a - 1\n    if b == n + 1:\n        return 0\n    return n - b + 1\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, pos, l, r = map(int, stdin.split())\n    curr_tab = 1\n    closed = []\n    for i in range(pos):\n        if curr_tab == r:\n            break\n        closed.append(curr_tab)\n        curr_tab = max(curr_tab, pos - i)\n    return max(len(closed) - l, 0)\n'''\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, pos, l, r = map(int, stdin.split())\n    l = min(pos, l)\n    r = max(pos, r)\n    if l == r:\n        return 0\n    else:\n        if l == 1:\n            return r - pos + 1\n        else:\n            return (r - pos) // (n - l) + 1\n\n\nprint(solution(input()))\n\n\n\n'''\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, pos, l, r = list(map(int, stdin.split()))\n    stdin = stdin.splitlines()\n\n    def can_move_left():\n        for i in range(pos - 1, -1, -1):\n            if stdin[i][-1]!= \" \":\n                return i\n        return -1\n\n    def can_move_right():\n        for i in range(pos + 1, n + 1):\n            if stdin[i - 1][-1]!= \" \":\n                return i - 1\n        return n\n\n    def close_tab(l: int, r: int):\n        if l > r:\n            l, r = r, l\n\n        if l >= 1 and r <= n:\n            for i in range(l, r + 1):\n                stdin[i - 1] = stdin[i] + \" \" * (n - i)\n                stdin[i - 1] = stdin[i - 1][:-1]\n\n    s = 0\n    while pos < l:\n        s += 1\n        close_tab(l, r)\n        l = can_move_left()\n        r = can_move_right()\n\n    s += 1\n    close_tab(l, r)\n\n    return str(s)\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, pos, l, r = map(int, stdin.split())\n    if (n < l) or (n > r):\n        return '0'\n    elif l == r:\n        return '1'\n    else:\n        return str(min(r - pos, n - 1 - pos))\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, pos, l, r = map(int, stdin.split())\n    a = min(pos, l - 1)\n    b = max(r, n - pos)\n    return str(max(a, b))\n"
    },
    {
        "number": 5,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.rstrip()\n    n, pos, l, r = stdin.split()\n    n = int(n)\n    pos = int(pos)\n    l = int(l)\n    r = int(r)\n    if pos > n: return \"0\"\n    if pos < l: return \"0\"\n    if pos > r: return \"0\"\n    # pos < l = True\n    if l == r: return \"1\"\n    if pos == l:\n        if (r - l) % 2!= 0:\n            return \"0\"\n        else:\n            return \"1\"\n    if pos == r:\n        if (r - l) % 2!= 0:\n            return \"0\"\n        else:\n            return \"1\"\n    if pos < l:\n        return \"1\"\n    if pos > r:\n        return \"1\"\n    if pos > l and pos < r:\n        return \"1\"\n    # pos > l\n    if l > pos > r:\n        return \"1\"\n    # pos == l\n    if r == pos:\n        return \"1\"\n    # pos < r and r < l\n    if pos - r < l:\n        return \"1\"\n    # pos > r\n    if r - l >= pos:\n        return \"1\"\n    # pos == r and r > l\n    if pos - l < r:\n        return \"1\"\n    # pos == r and r < l\n    if pos - l < r:\n        return \"1\"\n    # pos == l and r < l\n    if pos < r:\n        return \"1\"\n\n\nsolution(input())\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.strip())\n    for _ in range(t):\n        n, x = map(int, stdin.strip().split())\n        d, h = map(int, stdin.strip().split())\n        d.sort()\n        h.sort()\n        curX = 0\n        z = 0\n        for i in range(n):\n            if d[i] <= curX:\n                curX -= d[i]\n            else:\n                curX = 0\n                z += 1\n        if curX > 0:\n            curX = min(curX, h[0])\n            z += 1\n        print(z)\n    return\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def to_int(x):\n        try:\n            return int(x)\n        except ValueError:\n            return -1\n    \n    t = int(stdin[0])\n    for i in range(t):\n        l = stdin.split()\n        n, x = int(l[0]), int(l[1])\n        \n        h_prev = -1\n        h = x\n        while h > 0:\n            if h > h_prev:\n                h_prev = h\n                h -= x\n            else:\n                h = h_prev\n                \n        if h == 0:\n            return '-1'\n    \n    return '0'"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        n, x = map(int, stdin.strip().split())\n        d, h = list(map(int, stdin.strip().split()))\n        \n        min_d = min(d, cur_x)\n        if min_d == 0:\n            print(-1)\n        else:\n            cur_x -= min_d\n            if cur_x == 0:\n                cur_x = 0\n                while cur_x:\n                    cur_x -= 1\n                    cur_x -= min_d\n                if cur_x == 0:\n                    print(-1)\n                else:\n                    print(cur_x)\n            else:\n                cur_x += h\n                print(cur_x)\n    return \"\"\n\nsolution(\"3 10\\n6 3\\n8 2\\n1 4\\n4 10\\n4 1\\n3 2\\n2 6\\n1 100\\n2 15\\n10 11\\n14 100\")"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        n, x = map(int, stdin.split())\n        curx = x\n        d = 0\n        h = 0\n        for j in range(n):\n            d, h = map(int, stdin.split())\n            curx -= min(d, curx)\n            if curx <= 0:\n                return '-1'\n        if curx > 0:\n            return str(curx)\n        if curx == 0:\n            return '0'\n\ndef"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.strip())\n    for i in range(t):\n        n, x = map(int, stdin.strip().split())\n        d, h = map(int, stdin.strip().split())\n        d, h = min(d, curX), max(d, curX)\n        if curX == 0:\n            return '-1'\n        elif curX == x:\n            return str(n)\n        curX -= d\n        curX += h\n        curX = max(0, curX)\n        n = n - d\n        n = max(0, n)\n        curX = max(0, curX)\n        print(str(n) +'' + str(curX))\n    return ''"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, x = (int(_) for _ in stdin.split())\n    d = ((int(_), int(_)) for _ in stdin.split())\n    h = x\n    for d_i, h_i in d:\n        h -= min(d_i, h)\n        if h <= 0:\n            return str(h)\n    return str(h)\n\nprint(solution(input()))\n\n\ndef"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    t = int(stdin[0])\n    for i in range(1, t + 1):\n        n, x = list(map(int, stdin[i].split()))\n        d = list(map(int, stdin[i + 1].split()))\n        h = list(map(int, stdin[i + 2].split()))\n        d = list(map(lambda x: x - min(x, curX), d))\n        if min(d) > 0:\n            print('#{} -1'.format(i))\n        else:\n            curX = x\n            for d_i, h_i in zip(d, h):\n                if curX < d_i:\n                    curX = 0\n                    break\n                else:\n                    curX = curX - d_i + min(d_i, curX)\n            if curX == 0:\n                print('#{} -1'.format(i))\n            else:\n                print('#{} {}'.format(i, curX))\n    return stdin\n\nsolution(input())\n\n'''\n\n'''\n\n-----SOLUTION-----\n\nt = int(input())\n\nfor _ in range(t):\n    n, x = map(int, input().split())\n    d = list(map(int, input().split()))\n    h = list(map(int, input().split()))\n    d = list(map(lambda x: x - min(x, curX), d))\n    if min(d) > 0:\n        print('#{} -1'.format(_+1))\n    else:\n        curX = x\n        for d_i, h_i in zip(d, h):\n            if curX < d_i:\n                curX = 0\n                break\n            else:\n                curX = curX - d_i + min(d_i, curX)\n        if curX == 0:\n            print('#{} -1'.format(_+1))\n        else:\n            print('#{} {}'.format(_+1, curX))\n\n'''\n\n\n'''\n\n-----SOLUTION-----\n\nt = int(input())\n\nfor _ in range(t):\n    n, x = map(int, input().split())\n    d = list(map(int, input().split()))\n    h = list(map(int, input().split()))\n    d = list(map(lambda x: x - min(x, curX), d))\n    if min(d) > 0:\n        print('#{} -1'.format(_+1))\n    else:\n        curX = x\n        for d_i, h_i in zip(d, h):\n            if curX < d_i:\n                curX = 0\n                break\n            else:\n                curX = curX - d_i + min(d_i, curX)\n        if curX == 0:\n            print('#{} -1'.format(_+1))\n        else:\n            print('#{} {}'.format(_+1, curX))\n\n'''\n\n'''\n\n-----SOLUTION-----\n\nt = int(input())\n\nfor _ in range(t):\n    n, x = map(int, input().split())\n    d = list(map(int, input().split()))\n    h = list(map(int, input().split()))\n    d = list(map(lambda x: x - min(x, curX), d))\n    if min(d) > 0:\n        print('#{} -1'.format(_+1))\n    else:\n        curX = x\n        for d_i, h_i in zip(d, h):\n            if curX < d_i:\n                curX = 0\n                break\n            else:\n                curX = curX - d_i + min(d_i, curX)\n        if curX == 0:\n            print('#{} -1'.format(_+1))\n        else:\n            print('#{} {}'.format(_+1, curX))\n\n'''\n\n'''\n\n-----SOLUTION-----\n\nt = int(input())\n\nfor _ in range(t):\n    n, x = map(int, input().split())\n    d = list(map(int, input().split()))\n    h = list(map(int, input().split()))\n    d = list(map(lambda x: x - min(x, curX), d))\n    if min(d) > 0:\n        print('#{} -1'.format(_+1))\n    else:\n        curX = x\n        for d_i, h_i in zip(d, h):\n            if curX < d_i:\n                curX = 0\n                break\n            else:\n                curX = curX - d_i + min(d_i, curX)\n        if curX == 0:\n            print('#{} -1'.format(_+1))\n        else:\n            print('#{} {}'.format(_+1, curX))\n\n'''\n\n'''\n\n-----SOLUTION-----\n\nt = int(input())\n\nfor _ in range(t):\n    n, x = map(int, input().split())\n    d = list(map(int, input().split()))\n    h = list(map(int, input().split()))\n    d = list(map(lambda x: x - min(x, curX), d))\n    if min(d) > 0:\n        print('#{} -1'.format(_+1))\n    else:\n        curX = x\n        for d_i, h_i in zip(d, h):\n            if curX < d_"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    d, h = map(int, stdin.split())\n    result = []\n\n    while True:\n        if h <= 0:\n            break\n        if n == 0:\n            return '-1'\n        result.append(n)\n        d = min(d, x - h)\n        h = h - d\n        x = x - d\n\n    return '\\n'.join(map(str, result))\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.strip())\n    for _ in range(t):\n        n, x = map(int, stdin.strip().split())\n        d = list(map(int, stdin.strip().split()))\n        h = x\n        for d_i, h_i in d:\n            min_h = min(d_i, h)\n            h = h - min_h\n            if h <= 0:\n                return \"-\"\n            h = h + h_i\n        if h > 0:\n            return \"-\"\n    return str(h)"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        n, x = map(int, stdin.split())\n        d = list(map(int, stdin.split()))\n        h = 0\n        if n == 1:\n            if d[0] <= x:\n                h = x\n            else:\n                h = d[0]\n        else:\n            for j in range(n):\n                if d[j] <= x:\n                    h = h + min(d[j], x)\n                else:\n                    h = h + d[j]\n        if h == x:\n            print(n)\n        else:\n            print(h)\n    return ''\n\nsolution('''2\n3 10\n6 3\n8 2''')\n\nsolution('''2\n3 10\n6 3\n8 2\n1 4\n4 10\n4 1\n3 2\n2 6\n1 100\n2 15''')\n\nsolution('''2\n3 10\n6 3\n8 2\n1 4\n4 10\n4 1\n3 2\n2 6\n1 100\n2 15''')\n\nsolution('''2\n3 10\n6 3\n8 2\n1 4\n4 10\n4 1\n3 2\n2 6\n1 100\n2 15''')\n\nsolution('''2\n3 10\n6 3\n8 2\n1 4\n4 10\n4 1\n3 2\n2 6\n1 100\n2 15''')\n\nsolution('''2\n3 10\n6 3\n8 2\n1 4\n4 10\n4 1\n3 2\n2 6\n1 100\n2 15''')\n\nsolution('''2\n3 10\n6 3\n8 2\n1 4\n4 10\n4 1\n3 2\n2 6\n1 100\n2 15''')\n\nsolution('''2\n3 10\n6 3\n8 2\n1 4\n4 10\n4 1\n3 2\n2 6\n1 100\n2 15''')\n\nsolution('''2\n3 10\n6 3\n8 2\n1 4\n4 10\n4 1\n3 2\n2 6\n1 100\n2 15''')\n\nsolution('''2\n3 10\n6 3\n8 2\n1 4\n4 10\n4 1\n3 2\n2 6\n1 100\n2 15''')\n\nsolution('''2\n3 10\n6 3\n8 2\n1 4\n4 10\n4 1\n3 2\n2 6\n1 100\n2 15''')\n\nsolution('''2\n3 10\n6 3\n8 2\n1 4\n4 10\n4 1\n3 2\n2 6\n1 100\n2 15''')\n\nsolution('''2\n3 10\n6 3\n8 2\n1 4\n4 10\n4 1\n3 2\n2 6\n1 100\n2 15''')\n\nsolution('''2\n3 10\n6 3\n8 2\n1 4\n4 10\n4 1\n3 2\n2 6\n1 100\n2 15''')\n\nsolution('''2\n3 10\n6 3\n8 2\n1 4\n4 10\n4 1\n3 2\n2 6\n1 100\n2 15''')\n\nsolution('''2\n3 10\n6 3\n8 2\n1 4\n4 10\n4 1\n3 2\n2 6\n1 100\n2 15''')\n\nsolution('''2\n3 10\n6 3\n8 2\n1 4\n4 10\n4 1\n3 2\n2 6\n1 100\n2 15''')\n\nsolution('''2\n3 10\n6 3\n8 2\n1 4\n4 10\n4 1\n3 2\n2 6\n1 100\n2 15''')\n\nsolution('''2\n3 10\n6 3\n8 2\n1 4\n4 10\n4 1\n3 2\n2 6\n1 100\n2 15''')\n\nsolution('''2\n3 10\n6 3\n8 2\n1 4\n4 10\n4 1\n3 2\n2 6\n1 100\n2 15''')\n\nsolution('''2\n3 10\n6 3\n8 2\n1 4\n4 10\n4 1\n3 2\n2 6\n1 100\n2 15''')\n\nsolution('''2\n3 10\n6 3\n8 2\n1 4\n4 10\n4 1\n3 2\n2 6\n1 100\n2 15''')\n\nsolution('''2\n3 10\n6 3\n8 2\n1 4\n4 10\n4 1\n3 2\n2 6\n1 100\n2 15''')\n\nsolution('''2\n3 10\n6 3\n8 2\n1 4\n4 10\n4 1\n3 2\n2 6\n1 100\n2 15''')\n\nsolution('''2\n3 10\n6 3\n8 2\n1 4\n4 10\n4 1\n3 2\n2 6\n1 100\n2 15''')\n\nsolution('''2\n3 10\n6 3\n8 2\n1 4\n4 10\n4 1\n3 2\n2 6\n1 100\n2 15''')\n\nsolution('''2\n3 10\n6 3\n8 2\n1 4\n4 10\n4 1\n3 2\n2 6\n1 100\n2 15''')\n\nsolution('''2\n3 10\n6 3\n8 2\n1 4\n4 10\n4 1\n3 2\n2 6\n1 100\n2 15''')\n\nsolution('''2\n3 10\n6 3\n8 2\n1 4\n4 10\n4 1\n3 2\n2 6\n1 100\n2 15''')\n\nsolution('''2\n3 10\n6 3\n8 2\n1 4\n4 10\n4 1\n3 2\n2 6\n1 100\n2 15''')\n\nsolution('''2\n3 10\n6 3\n8 2\n1 4\n4 10\n4 1\n3 2\n2"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    days = 0\n    while True:\n        if n < 0 or m < 0:\n            return str(days)\n        n -= m\n        if n < 0:\n            days += 1\n            n += m\n        else:\n            m -= 1\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    (n, m) = (int(n) for n in stdin.split())\n    days = 0\n    while n > 0:\n        n -= m\n        days += 1\n        m -= 2\n        if n < m:\n            m += 2\n    return str(days)"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split()\n    n = int(line[0])\n    m = int(line[1])\n    print(n, m)\n    return 0"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    if m == 0:\n        return '4'\n    if m == 1:\n        if n == 1:\n            return '4'\n        else:\n            return '3'\n    if m > 1:\n        x = n//m\n        left = n - (m * x)\n        if left == 1:\n            return str(x+1)\n        else:\n            return str(x+1)+' '+str(left)\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n,m = list(map(int, stdin.split()))\n    days = 0\n    while n>0:\n        for i in range(m):\n            if n>0:\n                n-=1\n                days+=1\n        for i in range(m):\n            if n>0:\n                n-=1\n                days+=1\n    return str(days)\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    \n    s = 0\n    while n > 0:\n        if n > m:\n            m = 0\n        elif n < m:\n            m = n\n        n -= m\n        s += 1\n    return str(s)\n\nsolution('''5 2\n''')\nsolution('''8 1\n''')\nsolution('''5 5\n''')\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split(\"\\n\")[0]\n    n, m = map(int, line.split())\n\n    if n < m:\n        print(n-1)\n    else:\n        print(n-m+1)\n    return \"correct\""
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    _,n,m = stdin.split()\n    n = int(n)\n    m = int(m)\n    days = 1\n    while n - 1 > 0:\n        n -= m\n        days += 1\n        if n == 0:\n            return days\nsolution(input())\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    return str(4 - ((n - m) // 2))\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n,m=map(int,stdin.split())\n    l=[0]*n\n    l[n-1] = 1\n    while sum(l) < m:\n        for i in range(n-2,-1,-1):\n            if l[i] == 0:\n                l[i+1] += 1\n                l[i] = 1\n    for i in range(1,n):\n        if l[i] == 1:\n            return str(i)\n    return '0'\n\nsolution('5 2')\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = list(map(lambda x: x.split(), stdin.splitlines()))\n\n    if len(n) < 3:\n        return '0'\n\n    suits = {\n        'p': 0,\n       'm': 1,\n       's': 2,\n    }\n\n    chars = {\n        '1':'m',\n        '2': 'p',\n        '3':'s',\n        '4': 'p',\n        '5':'s',\n        '6':'s',\n        '7': 'p',\n        '8': 'p',\n        '9':'s',\n    }\n\n    tiles = []\n    for pair in n:\n        tiles.append([suits[char] for char in pair[0]])\n\n    for i in range(len(tiles) - 1):\n        tiles[i + 1].extend(tiles[i])\n\n    res = 0\n    tiles = [[chars[str(n)] for n in t] for t in tiles]\n    while len(tiles) > 0:\n        possible_tiles = []\n        for tile in tiles:\n            if len(tile) == 1:\n                possible_tiles.append(tile)\n            else:\n                possible_tiles += tile[1:]\n        possible_tiles = [[chars[str(n)] for n in t] for t in possible_tiles]\n        res += 1\n        for tile in possible_tiles:\n            if len(tile) > 0:\n                for i in range(len(tile) - 1):\n                    if tile[i] == tile[i + 1]:\n                        tile = tile[:i] + tile[i + 2:]\n                        break\n        tiles = possible_tiles\n    return str(res)\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # the number of mentsu (and the number of mentsu that are not already in the hand)\n    l1 = len(stdin.splitlines())\n    # the number of extra mentsu that are needed in order to win the game\n    l2 = 0\n    for x in stdin.splitlines():\n        num_suits = 0\n        for i in range(len(x) - 1):\n            if x[i] == x[i+1]:\n                num_suits += 1\n        if x[0] == '1' or x[0] == '4':\n            if num_suits!= 2:\n                l2 += 1\n        if x[0] == '2':\n            if num_suits!= 3:\n                l2 += 1\n        if x[0] == '3':\n            if num_suits!= 4:\n                l2 += 1\n    return str(l2)\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n  return 0"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n    ... 9m 9m 9m\n    ... ''')\n    0\n    >>> solution('''\n    ... 3p 9m 2p\n    ... ''')\n    1\n    \"\"\"\n    suits = {\n        \"m\": 1,\n        \"p\": 2,\n        \"s\": 3\n    }\n\n    tiles = [int(s[0]) for s in stdin.split()]\n    hand_size = len(tiles)\n\n    for suit, value in suits.items():\n        if value == hand_size:\n            return 0\n\n    sorted_tiles = sorted(tiles)\n    suits = list(suits.values())\n    suits.sort()\n\n    for i in range(len(suits)):\n        if sorted_tiles[i] == suits[i]:\n            return i\n    return len(suits) - 1\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    rows = stdin.split('\\n')\n    hand = []\n    for row in rows:\n        hand.append(row)\n    return solution_one(hand)\n\ndef"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    dic = {'m': 1, 'p': 2,'s': 3}\n    \n    stdin = stdin.strip()\n    \n    n = len(stdin)\n    \n    r = 0\n    \n    s = []\n    \n    for i in range(n):\n        if stdin[i] =='s':\n            s.append(dic['s'])\n        elif stdin[i] == 'p':\n            s.append(dic['p'])\n        elif stdin[i] =='m':\n            s.append(dic['m'])\n        else:\n            s.append(int(stdin[i]))\n        \n    \n    \n    r = 0\n    \n    \n    \n    return r"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    num, suits = stdin.strip().split()\n    m, s = num[0], num[1]\n    if s =='m':\n        if m == '1':\n            return 0\n        if m == '4':\n            return 1\n        if m == '5':\n            return 1\n        if m == '9':\n            return 1\n    if s == 'p':\n        if m == '1':\n            return 1\n        if m == '4':\n            return 1\n        if m == '5':\n            return 1\n        if m == '9':\n            return 1\n    if s =='s':\n        if m == '1':\n            return 1\n        if m == '2':\n            return 1\n        if m == '3':\n            return 1\n        if m == '4':\n            return 1\n        if m == '5':\n            return 1\n        if m == '6':\n            return 1\n        if m == '7':\n            return 1\n        if m == '8':\n            return 1\n        if m == '9':\n            return 1\n    return -1"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    tiles = stdin.split()\n    tiles = list(map(lambda x: x[0] + x[1], tiles))\n    return str(min_suited_tiles(tiles))\n\n\ndef"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n'''\n\ndef"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    for row in range(n):\n        for col in range(m):\n            print(row, col, int(n * m // 2))\n    return\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # n, m = map(int, input().split())\n    n, m = map(int, stdin.split())\n    sofas = list()\n    for i in range(m):\n        sofas.append(list(map(int, input().split())))\n\n    left_indexes = set()\n    right_indexes = set()\n    top_indexes = set()\n    bottom_indexes = set()\n\n    for i in range(m):\n        if sofas[i][0] > sofas[i][2] or sofas[i][1] > sofas[i][3]:\n            return \"NO\"\n\n        left_indexes.add((sofas[i][0], i))\n        right_indexes.add((sofas[i][2], i))\n        top_indexes.add((sofas[i][1], i))\n        bottom_indexes.add((sofas[i][3], i))\n\n    print(sofas)\n    print(left_indexes)\n    print(right_indexes)\n    print(top_indexes)\n    print(bottom_indexes)\n    result = list()\n    for i in range(1, n + 1):\n        result.append(i)\n    # result = []\n    # for i in range(n + 1):\n    #     result.append(i + 1)\n    # result = list(range(1, n + 1))\n    # result = list(range(2, n + 1))\n    for i in range(n):\n        if (1, i + 1) in left_indexes:\n            if (1, i + 1) in right_indexes:\n                return \"NO\"\n            if (1, i + 1) in top_indexes:\n                return \"NO\"\n            if (1, i + 1) in bottom_indexes:\n                return \"NO\"\n        if (1, i + 1) in top_indexes:\n            if (1, i + 1) in bottom_indexes:\n                return \"NO\"\n            if (1, i + 1) in right_indexes:\n                return \"NO\"\n            if (1, i + 1) in left_indexes:\n                return \"NO\"\n        if (1, i + 1) in bottom_indexes:\n            if (1, i + 1) in left_indexes:\n                return \"NO\"\n            if (1, i + 1) in right_indexes:\n                return \"NO\"\n            if (1, i + 1) in top_indexes:\n                return \"NO\"\n        if (1, i + 1) in left_indexes:\n            if (1, i + 1) in right_indexes:\n                return \"NO\"\n            if (1, i + 1) in top_indexes:\n                return \"NO\"\n            if (1, i + 1) in bottom_indexes:\n                return \"NO\"\n\n    # for i in range(n):\n    #     if result.count(i + 1) == 0:\n    #         return \"NO\"\n    #\n    # for i in range(n):\n    #     if result.count(i + 1) > 1:\n    #         return \"NO\"\n\n    return \"YES\"\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, input().split())\n    sofas = [[i, j] for i in range(1, n + 1) for j in range(1, m + 1)]\n    for i in range(n):\n        for j in range(m):\n            for k in range(i + 1, n):\n                for l in range(j + 1, m):\n                    if sofas[i][0] < sofas[k][0] and sofas[i][1] < sofas[l][1] and sofas[i][0]!= sofas[l][0] and sofas[i][1]!= sofas[l][1]:\n                        return str(i + 1)\n    return '-1'\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    d, n, m = list(map(int, stdin.split()))\n    storehouse = [[0 for _ in range(n)] for _ in range(m)]\n    for i in range(d):\n        x1, y1, x2, y2 = list(map(int, stdin.split()))\n        storehouse[x1 - 1][y1 - 1] = i + 1\n        storehouse[x2 - 1][y2 - 1] = i + 1\n    counter_left = 0\n    counter_right = 0\n    counter_top = 0\n    counter_bottom = 0\n    for i in range(n):\n        for j in range(m):\n            if i == 0:\n                counter_left += 1\n            if i == n - 1:\n                counter_right += 1\n            if j == 0:\n                counter_top += 1\n            if j == m - 1:\n                counter_bottom += 1\n            if storehouse[i][j] == 0:\n                continue\n            if i == 0 and storehouse[i][j - 1]!= 0 and storehouse[i][j]!= 0:\n                if storehouse[i][j - 1] == storehouse[i][j]:\n                    counter_left -= 1\n            if i == n - 1 and storehouse[i][j + 1]!= 0 and storehouse[i][j]!= 0:\n                if storehouse[i][j + 1] == storehouse[i][j]:\n                    counter_right -= 1\n            if j == 0 and storehouse[i - 1][j]!= 0 and storehouse[i][j]!= 0:\n                if storehouse[i - 1][j] == storehouse[i][j]:\n                    counter_bottom -= 1\n            if j == m - 1 and storehouse[i + 1][j]!= 0 and storehouse[i][j]!= 0:\n                if storehouse[i + 1][j] == storehouse[i][j]:\n                    counter_top -= 1\n            if (storehouse[i][j] == storehouse[i][j - 1] == storehouse[i][j + 1] == storehouse[i + 1][j]):\n                counter_left += 1\n                counter_right += 1\n                counter_bottom += 1\n                counter_top += 1\n            if (storehouse[i][j] == storehouse[i - 1][j] == storehouse[i + 1][j] == storehouse[i][j]):\n                counter_left += 1\n                counter_right += 1\n                counter_top += 1\n                counter_bottom += 1\n            if (storehouse[i][j] == storehouse[i - 1][j - 1] == storehouse[i + 1][j + 1] == storehouse[i][j]):\n                counter_left += 1\n                counter_right += 1\n                counter_top += 1\n                counter_bottom += 1\n            if (storehouse[i][j] == storehouse[i - 1][j + 1] == storehouse[i + 1][j - 1] == storehouse[i][j]):\n                counter_left += 1\n                counter_right += 1\n                counter_top += 1\n                counter_bottom += 1\n    return str(counter_left) + '\\n' + str(counter_right) + '\\n' + str(counter_top) + '\\n' + str(counter_bottom)\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    d = int(stdin.split()[0])\n    n, m = map(int, stdin.split()[1].split())\n    x_y = [[int(i) for i in stdin.split()[2].split()] for _ in range(d)]\n    cnt_l, cnt_r, cnt_t, cnt_b = map(int, stdin.split()[3].split())\n    res = -1\n    for i in range(d):\n        cnt_l, cnt_r, cnt_t, cnt_b = map(\n            lambda j: j - x_y[i][j], (cnt_l, cnt_r, cnt_t, cnt_b)\n        )\n        if cnt_l == 0 and cnt_r == 0 and cnt_t == 0 and cnt_b == 0:\n            res = i + 1\n            break\n    return str(res)\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 3 2\n   ... 3 1 3 2\n   ... 1 2 2 2\n   ... 1 0 0 1\n   ... ''')\n    '1'\n    >>> solution('''\n   ... 3 3\n   ... 3 2 2 1\n   ... 2 1 2 2\n   ... 1 0 0 1\n   ... ''')\n    '2'\n    >>> solution('''\n   ... 2 2\n   ... 2 1 1 1\n   ... 1 2 2 2\n   ... 1 0 0 0\n   ... ''')\n    '-1'\n    \"\"\"\n    n, m = map(int, input().split())\n    sofas = [[int(e) for e in input().split()] for i in range(n)]\n    sofa_dict = {}\n    for sofa in sofas:\n        x, y = sofa\n        if (x, y) not in sofa_dict:\n            sofa_dict[(x, y)] = 1\n        else:\n            sofa_dict[(x, y)] += 1\n    # print(sofa_dict)\n    # print(sofas)\n    condition_count = {1: 0, 2: 0, 3: 0, 4: 0}\n    for x in range(1, n - 1):\n        for y in range(1, m - 1):\n            for side in range(4):\n                condition_count[1] += sofa_dict[(x, y)] - (sofa_dict[(x - 1, y)] if side % 2 else sofa_dict[(x + 1, y)])\n                condition_count[2] += sofa_dict[(x, y)] - (sofa_dict[(x, y - 1)] if side % 2 else sofa_dict[(x, y + 1)])\n                condition_count[3] += sofa_dict[(x, y)] - (sofa_dict[(x - 1, y - 1)] if side % 2 else sofa_dict[(x + 1, y + 1)])\n                condition_count[4] += sofa_dict[(x, y)] - (sofa_dict[(x + 1, y - 1)] if side % 2 else sofa_dict[(x - 1, y + 1)])\n    print(condition_count[1])\n    return condition_count[1]\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    d, m = stdin.split()\n    n, m = int(n), int(m)\n    sofas = []\n    for _ in range(n):\n        a, b, c, d = map(int, stdin.split())\n        sofas.append((a, b, c, d))\n    \n    sofas.sort()\n    # print(sofas)\n\n    result = -1\n    for i in range(d):\n        # print(i)\n        a = sofas[i]\n        b = sofas[d - 1]\n        # print(a)\n        # print(b)\n        if a[1] == b[2] and a[0] == b[1]:\n            result = i + 1\n            break\n    if result == -1:\n        print(-1)\n    else:\n        print(result)\n\nsolution(input())\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    (d, n, m) = (int(i) for i in stdin.split())\n    storehouse = [[0 for _ in range(m)] for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            storehouse[i][j] = (i, j, int(stdin.split()[i*m+j+1]), int(stdin.split()[i*m+j+2]))\n    sofas = []\n    for row in range(n):\n        for col in range(m):\n            if all((storehouse[i][j][0] == row or storehouse[i][j][1] == col) for i in range(row) for j in range(col)):\n                sofas.append(storehouse[row][col])\n    return str(sofas[0][0] + 1) if sofas else str(-1)\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    d = int(stdin)\n    n, m = map(int, stdin.split())\n    conditions = list(map(int, stdin.split()))\n    for i in range(d):\n        x, y = conditions[i*4], conditions[i*4+1]\n        if x > n or y > m or x < 0 or y < 0:\n            continue\n        if x == n-1 and y == m-1:\n            return str(i+1)\n    return \"-1\"\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    x_1, y_1, x_2, y_2 = map(int, stdin.strip().split())\n    x_1_left = x_1\n    x_2_left = x_1 + 1\n    while x_2_left < x_2:\n        x_1_left += 1\n        x_2_left += 1\n    while x_1_left > x_1:\n        x_1_left -= 1\n        x_2_left -= 1\n    x_1_right = x_1\n    x_2_right = x_2\n    while x_2_right < x_2:\n        x_1_right += 1\n        x_2_right += 1\n    while x_1_right > x_1:\n        x_1_right -= 1\n        x_2_right -= 1\n\n    x_1_top = x_1\n    x_2_top = x_2\n    while x_1_top < x_2:\n        x_1_top += 1\n        x_2_top += 1\n    while x_1_top > x_1:\n        x_1_top -= 1\n        x_2_top -= 1\n    x_1_bottom = x_1\n    x_2_bottom = x_2\n    while x_1_bottom > x_2:\n        x_1_bottom -= 1\n        x_2_bottom -= 1\n    while x_1_bottom < x_2:\n        x_1_bottom += 1\n        x_2_bottom += 1\n    left_cond = x_1_left == x_2_left and (x_1_top == x_2_top or x_1_bottom == x_2_bottom)\n    right_cond = x_1_right == x_2_right and (x_1_top == x_2_top or x_1_bottom == x_2_bottom)\n    top_cond = x_1_top == x_2_top and (x_1_right == x_2_right or x_1_left == x_2_left)\n    bottom_cond = x_1_bottom == x_2_bottom and (x_1_right == x_2_right or x_1_left == x_2_left)\n    if left_cond and right_cond and top_cond and bottom_cond:\n        return str(x_1)\n    return '-1'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    days = list(map(int, stdin.split()))\n    if days[0] <= 14:\n        print(min(days), max(days))\n    else:\n        print(max(days), min(days))"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    mars_days = [0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def one_day(num):\n        return num * 5\n    def two_day(num):\n        return num * 2\n    mars_days = list(map(int, stdin.strip().split()))\n    mars_days = [one_day(day) for day in mars_days]\n    mars_days = [two_day(day) for day in mars_days]\n    max_num_off = max(mars_days)\n    min_num_off = min(mars_days)\n    print(min_num_off, max_num_off)\n    return min_num_off, max_num_off\n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    work_days = 0\n    leap_year = False\n    for year in range(2000, n + 1):\n        if (year % 4 == 0 and year % 100!= 0) or year % 400 == 0:\n            leap_year = True\n            if work_days <= 2:\n                work_days = 0\n            else:\n                work_days -= 2\n        else:\n            if work_days <= 2:\n                work_days = 0\n            else:\n                work_days -= 2\n    print(work_days, work_days)\nsolution(sys.stdin.read())\n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    import math\n    x = map(int, input().split())\n    y = map(int, stdin.split())\n    print(min(x), min(y))\n    print(max(x), max(y))\n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split(\"\\n\")))\n    return f\"{min(stdin)}\\n{max(stdin)}\"\n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    returns a string of the form 1 1 2\n    1 means work day\n    2 means day off\n    \"\"\"\n    n = int(stdin)\n    ans = list(map(str, range(1, n+1)))\n    return '\\n'.join(ans)\n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    m = N % 7\n    if m == 0:\n        M = 0\n    elif m == 1:\n        M = 1\n    elif m == 2:\n        M = 2\n    elif m == 3:\n        M = 3\n    elif m == 4:\n        M = 4\n    elif m == 5:\n        M = 5\n    elif m == 6:\n        M = 6\n    else:\n        M = 7\n    return f\"{M} {M+1}\"\n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    total_days_off = 0\n    min_days_off = 0\n    max_days_off = 0\n    i = 1\n    while i <= n:\n        if i % 5 == 0:\n            total_days_off += 1\n            if total_days_off > max_days_off:\n                max_days_off = total_days_off\n        else:\n            total_days_off -= 1\n        if total_days_off < min_days_off:\n            min_days_off = total_days_off\n        i += 1\n    return f\"{min_days_off} {max_days_off}\"\n\"\"\"\n"
    },
    {
        "number": 10,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, p, q = map(int, stdin.split())\n    return str(max(p*a + q*(n-a), q*b + p*(n-b)))\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, p, q = map(int, stdin.split())\n    return solution_1(n, a, b, p, q)\ndef"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, p, q = list(map(int, stdin.split()))\n    return str(min(n, a, b, p, q) * min(a, b, p, q) // 2)\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, p, q = map(int, stdin.split())\n    return str(max([(x*p + y*q) for x in range(1, n+1) for y in range(1, n+1) if x % a == 0 and y % b == 0]))\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, p, q = map(int, stdin.split())\n    ans = 0\n\n    for i in range(1, n+1):\n        if i % a == 0 and i % b == 0:\n            ans += p\n        elif i % a == 0:\n            ans += q\n        elif i % b == 0:\n            ans += p\n        else:\n            ans += q\n\n    return str(ans)\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, p, q = map(int, stdin.split())\n\n    ans = 0\n\n    for i in range(1, n + 1):\n        if (i % a == 0) or (i % b == 0):\n            ans += p + q\n        else:\n            ans += q\n    return str(ans)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, p, q = (int(i) for i in stdin.split())\n\n    tiles = {i: 1 for i in range(1, n + 1)}\n    painted = set()\n\n    for _ in range(p):\n        a, b = (int(i) for i in stdin.split())\n        painted.add(b)\n\n    for _ in range(q):\n        if len(painted) == 0:\n            break\n        a, b = (int(i) for i in stdin.split())\n        if a % a == 0 and b % b == 0:\n            if b in painted:\n                tiles[b] += 1\n                painted.remove(b)\n        elif a % a == 0:\n            if a in painted:\n                tiles[a] += 1\n                painted.remove(a)\n        elif b % b == 0:\n            if b in painted:\n                tiles[b] += 1\n                painted.remove(b)\n        else:\n            if a in painted:\n                tiles[a] += 1\n                painted.remove(a)\n            else:\n                tiles[b] += 1\n                painted.remove(b)\n\n    return sum(tiles.values())"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, p, q = map(int, stdin.split())\n    tiles = [i for i in range(1, n + 1)]\n    cache = dict()\n    r = 1\n    g = 0\n    b = 0\n    ans = 0\n    for t in tiles:\n        if t % a == 0:\n            if r == 1:\n                r = 0\n                g += 1\n            else:\n                g = r + 1\n                r = 0\n        elif t % b == 0:\n            if g == 1:\n                g = 0\n                b += 1\n            else:\n                b = g + 1\n                g = 0\n        elif t % (a + b) == 0:\n            if b == 1 and g == 1:\n                ans += (p + q) * 2\n            elif b == 1 and g == 0:\n                ans += p\n            elif b == 0 and g == 1:\n                ans += q\n            else:\n                ans += 0\n        elif t % (a + b) == a or t % (a + b) == b:\n            if b == 1 and g == 1:\n                ans += p\n            elif b == 1 and g == 0:\n                ans += 0\n            elif b == 0 and g == 1:\n                ans += q\n            else:\n                ans += 0\n        elif t % (a + b) == (a + b):\n            if b == 1 and g == 1:\n                ans += q\n            elif b == 1 and g == 0:\n                ans += 0\n            elif b == 0 and g == 1:\n                ans += p\n            else:\n                ans += 0\n    return str(ans)\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, p, q = map(int, stdin.split())\n    print(int(n // a + n // b - n // p + n // q))"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Using a greedy approach\n    :param stdin: input\n    :return: the maximum number of chocolates\n    \"\"\"\n    n, a, b, p, q = list(map(int, stdin.split()))\n    return n * max(a, b) + p * max(a, b) + q * max(a, b) + max(a, b) + p * (n - max(a, b))\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    trophies = stdin.strip()\n    \n    answer = 0\n    for i in range(n):\n        if trophies[i] == 'G':\n            answer = max(answer, len(trophies) - i)\n            \n    return str(answer)\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    trophies = stdin.rstrip().split()\n\n    i = 0\n    j = len(trophies) - 1\n\n    while i < j:\n        if trophies[i] == \"G\" and trophies[j] == \"G\":\n            i += 1\n            j -= 1\n        elif trophies[i] == \"S\" and trophies[j] == \"S\":\n            i += 1\n            j -= 1\n        else:\n            i += 1\n            j -= 1\n\n    return str(len(trophies) - i)\n    \n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"1\\nGGGG\")\n    7\n    >>> solution(\"3\\nSSS\")\n    4\n    >>> solution(\"5\\nSSSS\")\n    0\n    \"\"\"\n    n = int(stdin)\n    l = [stdin[i] for i in range(n)]\n    g = 0\n    s = 0\n    i = 0\n    j = n - 1\n    while i <= j:\n        if l[i] == \"G\":\n            g += 1\n        else:\n            s += 1\n        if g > s:\n            j -= 1\n            s = 0\n            g = 0\n        i += 1\n    return str(g)\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    trophies = stdin.strip()\n    n = len(trophies)\n\n    if n < 2:\n        return 0\n\n    if n == 2:\n        if trophies[0] == 'S':\n            return 1\n        else:\n            return 2\n\n    golden_trophies = 'G' * n\n    silver_trophies = 'S' * n\n    trophies = [golden_trophies, silver_trophies]\n\n    def swap(i, j):\n        trophies[0] = trophies[0][:i] + trophies[1][i:j] + trophies[0][j:]\n        trophies[1] = trophies[1][:i] + trophies[0][i:j] + trophies[1][j:]\n\n    for i in range(1, n - 1):\n        for j in range(i + 1, n):\n            if trophies[0][i] == 'S' and trophies[0][j] == 'S':\n                swap(i, j)\n                break\n            if trophies[1][i] == 'S' and trophies[1][j] == 'S':\n                swap(i, j)\n                break\n    \n    return len(trophies[0])"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    sequence = stdin.strip().split(\"\\n\")\n    length = 0\n    lengths = []\n    for i in range(num):\n        lengths.append(length)\n    for i in range(num):\n        if sequence[i] == \"G\":\n            lengths[i] = lengths[i] + 1\n    lengths.sort()\n    for i in range(1, num):\n        lengths[i] = max(lengths[i], lengths[i - 1])\n    for i in range(1, num):\n        length = max(lengths[i], length)\n    return length\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    pass"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    n = int(stdin)\n    arr = stdin[1:n].upper()\n    g_count = arr.count('G')\n    s_count = arr.count('S')\n    # print(g_count, s_count)\n    if g_count > s_count:\n        return str(g_count-s_count)\n    else:\n        return str(s_count - g_count)\n\n\ndef"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    trophies = list(stdin.split()[1])\n    best_beauty = 0\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if trophies[i] == \"G\" and trophies[j] == \"S\":\n                best_beauty = max(best_beauty, len(trophies[i : j + 1]))\n\n    return str(best_beauty)"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    main_list = stdin.split()\n    main_courses = set(map(int, main_list[1:]))\n    n = int(main_list[0])\n    main_course_num = int(main_list[1])\n\n    main_list = stdin.split()\n    main_course_num = int(main_list[0])\n    courses = []\n    for i in range(main_course_num, n):\n        courses.append(i)\n\n    flag = True\n    while courses:\n        for i in range(len(courses)):\n            if courses[i] in main_list:\n                courses.remove(courses[i])\n                main_list.remove(courses[i])\n                break\n\n        for i in range(len(courses)):\n            if courses[i] not in main_list:\n                courses.remove(courses[i])\n                break\n\n    return str(len(courses))\n    \n\nsolution(input())"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    courses = list(map(int, stdin.split()))\n    l = []\n    passing = []\n    course_indices = set()\n    for i in range(n):\n        l.append([courses[i], i])\n    l.sort()\n    for i in range(k):\n        course_indices.add(l[i][1])\n    for i in range(k, n):\n        if l[i][0] not in passing:\n            passing.append(l[i][0])\n        else:\n            for j in range(i + 1, n):\n                if l[j][0] in passing:\n                    break\n                else:\n                    l[i][1] = j\n                    course_indices.add(l[i][1])\n                    break\n    if len(passing) == 0:\n        return -1\n    return len(passing)"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(i) for i in stdin.split())\n    courses = {i for i in range(1, n + 1)}\n    main = {i for i in range(1, n + 1) if i not in courses}\n    main = set(i for i in range(1, n + 1) if i not in courses)\n\n    for i in range(k):\n        main = {main.pop() for _ in range(len(main))}\n\n    courses = set(i for i in range(1, n + 1) if i not in courses)\n\n    return str(min(courses)) if courses else \"0\"\n\nprint(solution(input()))"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split()\n    n = int(n)\n    k = int(k)\n    main_courses = list(map(int, stdin.split()[1:]))\n    if len(main_courses) == 0:\n        return '-1'\n    main_courses.sort()\n    main_courses = tuple(main_courses)\n    a = []\n    b = []\n    for i in range(n):\n        if i not in main_courses:\n            a.append(i)\n        else:\n            b.append(i)\n    if a == b:\n        return '-1'\n    if len(a) > k:\n        return -1\n    for i in range(len(a) - k + 1):\n        b.sort(reverse=True)\n        b = b[:len(a) - i]\n        b.sort()\n        if b == a:\n            return str(len(a) - i) +'' +''.join(map(str, a))\n    return '-1'\n"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    main_courses = sorted(list(map(int, stdin.split())))\n    courses = list(range(n))\n    finished = set()\n    for course in courses:\n        if course not in finished:\n            if course in main_courses:\n                finished.add(course)\n                continue\n            else:\n                if course in main_courses:\n                    finished.add(course)\n                else:\n                    finished.add(course)\n                    for main_course in main_courses:\n                        if main_course not in finished:\n                            finished.add(main_course)\n                            courses.remove(main_course)\n                            break\n    if len(finished) == n:\n        return -1\n    else:\n        return len(finished)"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    main_courses = list(map(int, stdin.split()))\n    courses = list(map(int, stdin.split()))\n    result = -1\n    taken_courses = []\n    for course in courses:\n        if course in taken_courses:\n            result = -1\n            break\n        taken_courses.append(course)\n    if result == -1:\n        return result\n    taken_courses.sort()\n    result = 0\n    for course in main_courses:\n        if course not in taken_courses:\n            result += 1\n            taken_courses.append(course)\n    return str(result)\n\nsolution(input())"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n == 1 and k == 1:\n        return '-1'\n    main_courses = list(map(int, stdin.split()))\n    main_courses.sort()\n    print(main_courses)\n    min_number_of_courses = main_courses[0]\n    min_courses = []\n    courses = []\n    for i in range(len(main_courses)):\n        if i == 0:\n            courses.append(main_courses[i])\n        else:\n            if courses[i - 1] == main_courses[i]:\n                courses.append(main_courses[i])\n            else:\n                min_courses.append(courses)\n                courses = []\n                courses.append(main_courses[i])\n    print(min_courses)\n    if len(min_courses) > k:\n        return '-1'\n    else:\n        return str(min(map(len, min_courses)))\n\n\nsolution(input())\n"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n, k = int(lines[0]), int(lines[1])\n    if k > n:\n        return '-1'\n    t = list(map(int, lines[2:]))\n    con = []\n    for i in range(k):\n        con.append([])\n    for i in range(k, n):\n        con[i % k].append(i)\n    res = 0\n    for j in range(k):\n        for i in range(len(con[j])):\n            res = max(res, con[j][i] + t[j])\n    return str(res)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    m = -1\n\n    if n < k:\n        return '-1'\n\n    passing = []\n    for i in range(n):\n        passing.append([i+1])\n\n    for i in range(n-1):\n        index = int(stdin.split()[i+1])\n        if index > len(passing):\n            return '-1'\n        passing[index-1].append(i+1)\n\n    for i in range(len(passing)):\n        passing[i].sort()\n\n    for i in range(k):\n        passing.sort(key=len)\n        if len(passing[i]) == 1:\n            m += 1\n        else:\n            m = min(m, len(passing[i]))\n        passing = passing[:m]\n    return str(m)\n\n\nsolution(input())"
    },
    {
        "number": 13,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    main = list(map(int, stdin.split()))\n    \n    if n < k:\n        return '-1'\n    \n    courses = dict()\n    \n    for i in range(n):\n        if i not in courses:\n            courses[i] = []\n        courses[i].append(main[i])\n    \n    courses = dict(sorted(courses.items(), key=lambda x: x[0]))\n    \n    keys = list(courses.keys())\n    \n    answer = keys[0]\n    \n    for key in keys:\n        next_courses = courses[key]\n        i = 0\n        while i < len(next_courses):\n            if next_courses[i] <= key:\n                answer = min(answer, len(next_courses) - i)\n                break\n            i += 1\n    \n    return str(answer)\n\n\"\"\"\nfrom typing import List\nfrom bisect import bisect_right\ndef"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    p = sorted(list(map(int, stdin.split())))\n\n    if len(p) == k:\n        print(\" \".join([str(x) for x in p]))\n        return\n    p.sort()\n    print(\"-1\") if len(p) > k else print(\" \".join([str(x) for x in p]))\n\nsolution(*input().split())\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    p = sorted(map(int, stdin.split()))\n    if p[0]!= 1:\n        return \"-\"\n    if p == list(range(1, n + 1)):\n        return \"\".join(map(str, p))\n\n    for i in range(k):\n        if p[i]!= i + 1:\n            return \"-\"\n    index = p[0] - 1\n    while index <= n - k:\n        p[index] = p[n - k]\n        index += 1\n    for i in range(k):\n        p[i] -= 1\n    return \"\".join(map(str, p))\n\nprint(solution(input()))"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    size, n, k = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n    p = sorted(p)\n    if size == n:\n        return \"-1\"\n    elif size >= k:\n        return \" \".join([str(i) for i in p])\n    else:\n        for i in range(n - size):\n            if p[i] > p[i + 1]:\n                return \" \".join([str(i) for i in p])\n        return \"-1\"\n\n\ndef"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = []\n    for i in range(n):\n        b.append(a[i])\n    while k > 0:\n        if len(a) == 0:\n            return \"no\"\n        elif len(a) == 1:\n            b.append(a[0])\n            break\n        elif len(a) == 2:\n            if a[0] > a[1]:\n                b.append(a[1])\n                b.append(a[0])\n                break\n            else:\n                b.append(a[0])\n                b.append(a[1])\n                break\n        else:\n            x = a.pop(0)\n            y = a.pop(0)\n            if x > y:\n                a.append(y)\n                a.append(x)\n            else:\n                a.append(x)\n                a.append(y)\n        k -= 1\n    if len(b) == n:\n        return \"yes\"\n    else:\n        return \"no\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  inputs = stdin.split()\n  n = int(inputs[0])\n  k = int(inputs[1])\n  p = list(map(int,inputs[2].split()))\n\n  if k > len(p):\n    return \"-1\"\n  \n  start = 0\n  end = len(p) - 1\n  while start < end:\n    if p[start] > p[end]:\n      p = p[:start] + p[end] + p[start + 1:end + 1] + p[start] + p[end + 1:]\n    start += 1\n    end -= 1\n\n  return str(p)\n\nprint(solution(input()))\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    if k > n:\n        return \"-\"\n\n    p = list(map(int, stdin.strip().split()))\n    p = sorted(p[:k])\n    for i in range(k, n):\n        p = list(map(lambda x: x + 1 if p[-1] == i else x - 1, p))\n        if p == sorted(p[:k]):\n            print(*p)\n            return \"\"\n    return \"-\"\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n    if not(1 <= k <= n):\n        return -1\n    p.sort()\n    while(k > 0):\n        if p[0] == p[-1]:\n            p = p[1:-1]\n            k -= 2\n        else:\n            return -1\n    return \" \".join(map(str, p))\n\nprint(solution(input()))\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = list()\n    t = list(map(int, stdin.split()))\n    for i in range(n):\n        if len(s) == k:\n            break\n        if s and s[-1] <= t[i]:\n            s.pop()\n        else:\n            s.append(t[i])\n    return''.join(map(str, s))\n\n\ndef"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def sort(nums):\n        if len(nums) <= 1:\n            return nums\n        mid = len(nums)//2\n        left = sort(nums[:mid])\n        right = sort(nums[mid:])\n        res = []\n        i = 0\n        j = 0\n        while i < len(left) and j < len(right):\n            if left[i] < right[j]:\n                res.append(left[i])\n                i += 1\n            else:\n                res.append(right[j])\n                j += 1\n        res.extend(left[i:] or right[j:])\n        return res\n    a = list(map(int,stdin.split()))\n    n = a.pop(0)\n    a = sorted(a)\n    b = sort(a)\n    if b == a:\n        return \" \".join(map(str,a))\n    else:\n        return \"-\"\nsolution(input())\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Given an input array of size n, where each element is taken n times, \n    return an array p of size n, such that all the elements p[i] satisfies:\n    \n    a) p[i] = a[i] for all i from 0 to n - 1,\n    b) p[i] >= p[i + 1], and\n    c) p[i] < p[i + 1] for all i > n - 1.\n    \n    For example, the input [3, 1, 2] is lexicographically maximal such that p = [3, 2, 1].\n    \n    The input array may not contain duplicate elements.\n    '''\n    n, k = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n    for i in range(k):\n        if p[i] < p[i + 1]:\n            return '-1'\n    return''.join(map(str, p[:k]))"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def check(first, last):\n        if sum_seq == 0:\n            return True\n        for i in range(first, last):\n            if sum_seq % i == 0:\n                sum_seq -= i\n            else:\n                return False\n        return True\n    a, b, c = map(int, stdin.split())\n    sum_seq = a + b + c\n    if check(1, sum_seq):\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    seq = [int(i) for i in stdin.strip().split()]\n\n    if n == 0:\n        return \"NO\"\n\n    if seq[0] == n:\n        return \"YES\"\n\n    for i in range(len(seq)-1):\n        if seq[i] == n:\n            return \"YES\"\n\n    return \"NO\""
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    res = False\n    if a == b:\n        res = True\n    elif a == c:\n        res = True\n    elif b == c:\n        res = True\n    if res:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = list(map(int, stdin.split()))\n    sequence = []\n    if (a == 1 and b == c):\n        return 'YES'\n    if (a!= 1 and b == c):\n        return 'NO'\n    sequence.append(a)\n    while (sequence[-1] + 1)!= c:\n        sequence.append(sequence[-1] + 1)\n    for i in range(1, len(sequence)):\n        if sequence[i] == b:\n            return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    for i in range(3, len(str(b))):\n        if int(str(b)[:i]) == a:\n            return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if b not in range(a, c+1):\n        return 'NO'\n    if any(b in x for x in {range(a, c+1)}):\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if (a == b and a == c) or (c == b and a == c):\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    s = [1, a, b, c]\n    for i in range(3, len(s)):\n        if s[i] == b:\n            return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if \"YES\" in stdin else \"NO\"\n"
    },
    {
        "number": 15,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a == b:\n        return \"YES\"\n    elif a - b == c:\n        return \"YES\"\n    elif c == a:\n        return \"YES\"\n    else:\n        return \"NO\"\n\ndef"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n > 0 and n <= 10**9:\n        return '1' if any(len(x) == n and is_bracket(x) for x in itertools.product('()', repeat=n)) else '0'\n    return '0'\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(n):\n        a = int(stdin.split()[i])\n        if a == 0:\n            continue\n        if a == 1:\n            return 1\n        k = a\n        while k > 0:\n            if k % 2 == 0:\n                k //= 2\n                a += 1\n            else:\n                k -= 1\n                a += 1\n        if a % 2 == 0:\n            continue\n        else:\n            return 0\n    return 1\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    num_str = stdin.splitlines()\n    res = 1\n    for i in num_str:\n        if res!= 1:\n            res = 0\n            break\n        str_num = int(i)\n        count = 0\n        for i in range(str_num):\n            count += 1\n            if count % 2!= 0:\n                res = 0\n                break\n            count += 1\n        if count % 2!= 0:\n            res = 0\n            break\n    return str(res)\n\ndef"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return 1 if cnt_1 == len(stdin) else 0\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split()))\n    print(stdin)\n    for i in range(len(stdin)):\n        if i == 0:\n            if stdin[i] == 1:\n                print(\"1\")\n                return 1\n        elif i == 1:\n            if stdin[i] == 2:\n                print(\"2\")\n                return 2\n        elif i == 2:\n            if stdin[i] == 3:\n                print(\"3\")\n                return 3\n        elif i == 3:\n            if stdin[i] == 4:\n                print(\"4\")\n                return 4\n        else:\n            print(\"0\")\n            return 0\n\nsolution(\"0 0\")\nsolution(\"2 2\")\nsolution(\"3 4\")\nsolution(\"3 0\")\n\n\"\"\"\ndef"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def split(s: str) -> list:\n        return [s] if s == \"()\" else s.split(\")(\")\n\n    def insert(s: str) -> str:\n        return f\"({s}){{}}\" if len(s) % 2 == 1 else f\"{s})\"\n\n    def check(s: str) -> bool:\n        return s == insert(s)\n\n    return all(check(s) for s in split(stdin))\n\n------You can use this code to check your solution-----\ndef"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    cnt_1 = int(stdin.split()[0])\n    cnt_2 = int(stdin.split()[1])\n    cnt_3 = int(stdin.split()[2])\n    cnt_4 = int(stdin.split()[3])\n    # dp = [[0]*2 for _ in range(cnt_1+1)]\n    dp = [[0]*2 for _ in range(cnt_1+1)]\n    for i in range(cnt_1+1):\n        dp[i][0] = 1\n    for i in range(cnt_2):\n        dp[0][1] = 1\n        for j in range(cnt_1):\n            dp[j+1][1] = dp[j][1] + 1\n    for i in range(cnt_3):\n        dp[0][0] = 1\n        for j in range(cnt_2):\n            dp[j+1][0] = dp[j][0] + 1\n    for i in range(cnt_4):\n        dp[0][1] = 1\n        for j in range(cnt_3):\n            dp[j+1][1] = dp[j][1] + 1\n    for i in range(cnt_1):\n        dp[i][0] = 1\n        for j in range(cnt_2):\n            dp[i][0] = dp[i][0] + 1\n    for i in range(cnt_2):\n        dp[i][0] = 1\n        for j in range(cnt_3):\n            dp[i][0] = dp[i][0] + 1\n    for i in range(cnt_3):\n        dp[i][0] = 1\n        for j in range(cnt_4):\n            dp[i][0] = dp[i][0] + 1\n    return dp[cnt_1-1][0]\n'''\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    strings = stdin.split(\"\\n\")\n    for string in strings:\n        if not is_regular(string):\n            return 0\n    return 1\n\ndef"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    cnt = int(stdin)\n    if cnt == 0:\n        return \"0\"\n    if cnt == 1:\n        return \"1\"\n    if cnt == 2:\n        return \"0\"\n    if cnt == 3:\n        return \"1\"\n    if cnt == 4:\n        return \"0\"\n    if cnt == 5:\n        return \"1\"\n    if cnt == 6:\n        return \"1\"\n    if cnt == 7:\n        return \"0\"\n    if cnt == 8:\n        return \"1\"\n    if cnt == 9:\n        return \"0\"\n    if cnt == 10:\n        return \"1\"\n    "
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n  n, k, t = (int(i) for i in stdin.split())\n  return str(n - k + t - 1)"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  return str(len(list(filter(lambda x: x == '^', stdin))))"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n  return solution_a(stdin)"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k, t = list(map(int, stdin.split()))\n    return str(n - k + (k - 1) * (n - t))\n\nsolution(\"10 5 3\")\n\nsolution(\"10 5 7\")\n\nsolution(\"10 5 12\")"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split()\n    n, k, t = map(int, input_data[0].split())\n    return str(find_spectators(n, k, t))\n\ndef"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k, t = map(int, stdin.split())\n    \n    print(n // k)\n    return 'n // k = {}'.format(n // k)\n\nsolution(\"10 5 3\")\n\nsolution(\"10 5 7\")\n\nsolution(\"10 5 12\")\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n  return str(sum([len(list(group)) for _, group in itertools.groupby(stdin.split('\\n'))]))"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n  n, k, t = map(int, stdin.split())\n  return str(k - (t - 1))\n\n\ndef"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  pass"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  n, k, t = map(int, stdin.split())\n  return str(k + 1)\n  # Write your code here\n\n'''\n\ndef"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Since given input s has length up to 10^5, we can solve this problem in O(N)\n    time using linear space complexity and O(N) additional memory.\n    \"\"\"\n    string = stdin.strip()\n    return ''.join(sorted(string))\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    while len(s) > 1:\n        s = s[1:] + s[0]\n    return s"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.lstrip()\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t, s = stdin.split()\n    return \"\".join([t[:-1], s[-1]])\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input_string = stdin.strip()\n    return input_string[1:-1]"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split('\\n')[0]\n    u = \"\"\n    l = len(s)\n    if(l%2!= 0):\n        u = s[:int((l+1)/2)]\n    else:\n        u = s[:int(l/2)]\n\n    return u"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    if len(stdin) <= 1:\n        return stdin\n    u = stdin[-1]\n    t = stdin[0] + stdin[1]\n    stdin = stdin[2:-2]\n    while len(stdin) > 0:\n        if len(stdin) <= 1:\n            return t + stdin + u\n        s = stdin[0] + stdin[1]\n        u = s + u\n        stdin = stdin[2:]\n    return u\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.rstrip()\n    s_len = len(s)\n    while True:\n        if s_len == 0:\n            return ''\n        if s_len == 1:\n            return s\n        s_len -= 1\n        if s_len == 0:\n            s_len = len(s)\n            s = s[1:]\n            s_len = len(s)\n            continue\n        if s_len == 1:\n            s = s[:-1]\n            s_len = len(s)\n            continue\n        if s_len == 2:\n            s = s[0] + s[1]\n            s_len = len(s)\n            continue\n        if s_len == 3:\n            s = s[0] + s[2]\n            s_len = len(s)\n            continue\n        if s_len == 4:\n            s = s[0] + s[3]\n            s_len = len(s)\n            continue\n        if s_len == 5:\n            s = s[1] + s[4]\n            s_len = len(s)\n            continue\n        if s_len == 6:\n            s = s[0] + s[5]\n            s_len = len(s)\n            continue\n        if s_len == 7:\n            s = s[1] + s[6]\n            s_len = len(s)\n            continue\n        if s_len == 8:\n            s = s[0] + s[7]\n            s_len = len(s)\n            continue\n        if s_len == 9:\n            s = s[1] + s[8]\n            s_len = len(s)\n            continue\n        if s_len == 10:\n            s = s[0] + s[9]\n            s_len = len(s)\n            continue\n\nprint(solution(input()))\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    t = \"\"\n    u = \"\"\n    while len(s)!= 0:\n        if len(s) > len(t):\n            t = s[:len(s) - len(t)]\n        if len(s) < len(t):\n            u = s[len(s) - len(t):]\n        s = s[len(s) - len(t):]\n    return \"\".join([t, u])\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = []\n    for i in range(n):\n        a.append(stdin.split())\n    a = a[0]\n\n    for i in range(n - 1):\n        a[i + 1] = a[i + 1] + a[i]\n    a = a[1:]\n    for i in range(n - 1):\n        if int(a[i][0]) < int(a[i + 1][0]):\n            return \"NO\"\n    if int(a[0][1]) > int(a[n - 1][1]):\n        return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    solution = stdin[0]\n    for i in range(1, len(stdin)):\n        temp = stdin[i].split()\n        if int(temp[0]) > int(temp[1]):\n            solution = \"NO\"\n        elif int(temp[1]) > int(temp[0]):\n            solution = \"YES\"\n        elif int(temp[0]) == int(temp[1]):\n            solution = \"NO\"\n    return solution\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    cases = int(stdin)\n    for i in range(cases):\n        plays, clears = list(map(int, stdin.split()))\n        for j in range(len(plays)):\n            if plays[j] < clears[j]:\n                return \"NO\"\n        return \"YES\"\n    return \"NO\"\n\nTESTS:\nsolution(\"\")\n>>> \"NO\"\nsolution(\"1\")\n>>> \"NO\"\nsolution(\"3\")\n>>> \"YES\"\nsolution(\"2 0 0 1 1 1 1 2\")\n>>> \"YES\"\nsolution(\"3\")\n>>> \"NO\"\nsolution(\"4 4 3\")\n>>> \"YES\"\nsolution(\"4 3 4 3 5\")\n>>> \"NO\"\nsolution(\"5\")\n>>> \"YES\"\nsolution
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin)\n    for i in range(T):\n        n = int(stdin)\n        plays = []\n        clears = []\n        for j in range(n):\n            p, c = map(int, stdin.split())\n            plays.append(p)\n            clears.append(c)\n        plays = sorted(plays)\n        clears = sorted(clears)\n        for j in range(1, len(clears)):\n            if (plays[j] - plays[j - 1])!= (clears[j] - clears[j - 1]):\n                print(\"NO\")\n                break\n        else:\n            print(\"YES\")\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Take in your input and\n    return the corresponding answer as a string\n    \"\"\"\n    return 'YES' if test() else 'NO'\n\n\ndef"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    plays = []\n    clears = []\n    for i in range(n):\n        plays.append(int(stdin.split()[i * 2]))\n        clears.append(int(stdin.split()[i * 2 + 1]))\n    p_prev, c_prev = 0, 0\n    for i in range(n):\n        p_now, c_now = plays[i], clears[i]\n        if p_now - p_prev > 1 and c_now - c_prev > 1:\n            return \"NO\"\n        p_prev = p_now\n        c_prev = c_now\n    return \"YES\"\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def is_correct(seq):\n        current_plays = 0\n        current_clears = 0\n        for i in range(len(seq)):\n            p = seq[i]\n            c = seq[i+1]\n            if p == 0:\n                current_clears += 1\n            elif p == 1:\n                current_plays += 1\n                current_clears = 0\n            if current_clears > c:\n                return False\n        return True\n\n    tests = int(stdin)\n    for _ in range(tests):\n        n = int(stdin.split()[1])\n        seq = list(map(lambda x: int(x), stdin.split()[2:]))\n        if is_correct(seq):\n            print('YES')\n        else:\n            print('NO')\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nT = int(stdin)\n\nfor _ in range(T):\n    n = int(stdin())\n    stats = []\n    for i in range(n):\n        p,c = list(map(int,stdin().split()))\n        stats.append((p,c))\n    if stats == sorted(stats,key=lambda x: x[1]):\n        print('YES')\n    else:\n        print('NO')\n\n\n    \n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns correct answer.\n    \"\"\"\n    tests = stdin.splitlines()\n    for test in tests:\n        n = int(test.split()[0])\n        assert 1 <= n <= 500\n        plays = test.split()[1::2]\n        clears = test.split()[2::2]\n        assert len(plays) == n\n        assert len(clears) == n\n        assert len(set(plays)) == len(plays) == len(clears) == n\n        assert sorted(plays) == sorted(clears)\n        assert min(plays) >= 0 and max(plays) <= 100 and min(clears) >= 0 and max(clears) <= 1000\n        assert all(0 <= int(p) <= 100 and int(c) == 0 or 0 <= int(p) <= 100 and int(c) <= 1000 for p, c in zip(plays, clears))\n\n    for test in tests[::-1]:\n        n = int(test.split()[0])\n        assert 1 <= n <= 500\n        plays = test.split()[1::2]\n        clears = test.split()[2::2]\n        assert len(plays) == n\n        assert len(clears) == n\n        assert len(set(plays)) == len(plays) == len(clears) == n\n        assert sorted(plays) == sorted(clears)\n        assert min(plays) >= 0 and max(plays) <= 100 and min(clears) >= 0 and max(clears) <= 1000\n        assert all(0 <= int(p) <= 100 and int(c) == 0 or 0 <= int(p) <= 100 and int(c) <= 1000 for p, c in zip(plays, clears))\n\n    res = [\"NO\" for i in range(len(tests))]\n    res[0] = \"YES\"\n    for i in range(1, len(tests)):\n        j = i - 1\n        while j >= 0 and tests[j].split()[1::2] == tests[i].split()[1::2]:\n            if tests[j].split()[2::2] == tests[i].split()[2::2]:\n                res[i] = \"YES\"\n            else:\n                res[i] = \"NO\"\n            j -= 1\n\n    return \"\\n\".join(res)\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your puzzle answer was 496.\n    \"\"\"\n    h, m = map(int, stdin.split(':'))\n    return str(h * 60 + m)"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    h, m = stdin.split(\":\")\n    m_low, m_high = 0, 23\n    m_mid = (m_high - m_low) // 2\n    if m == \"00\":\n        if h == \"23\":\n            if m_high < 60:\n                return 0\n            elif m_high == 60:\n                return 1\n            elif m_high > 60:\n                return (60 - int(m_low)) * 60\n        else:\n            if h == \"00\":\n                return 60\n            else:\n                return 60 - int(h)\n    if h == \"23\":\n        if m == \"59\":\n            if m_low > 59:\n                return 59\n            else:\n                return 60 - int(m_low)\n        else:\n            if m == \"00\":\n                return 60\n            else:\n                return 60 - int(m)\n    if m == \"00\":\n        if int(h) == 0:\n            return 60\n        else:\n            return 60 - int(h)\n    else:\n        if h == \"00\":\n            if int(m) <= 59:\n                return int(m)\n            else:\n                return 60 - int(m)\n        else:\n            if int(h) == 0:\n                return 60 - int(m_mid)\n            else:\n                if int(h) <= 23:\n                    if int(m) <= 59:\n                        return int(m) + int(m_mid)\n                    else:\n                        return 60 - int(m_mid) + int(m)\n                else:\n                    if int(m) <= 59:\n                        return 60 - int(m_mid) + int(m)\n                    else:\n                        return int(m) + int(m_mid)"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    hh, mm = stdin.split(\":\")\n    hh_int = int(hh)\n    mm_int = int(mm)\n    if hh_int == mm_int:\n        hh_int += 1\n        mm_int = 0\n    if hh_int + mm_int == 24:\n        hh_int -= 1\n        mm_int = 0\n    return str(hh_int*60 + mm_int)"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    h, m = stdin.split(\":\")\n    minutes = int(h) * 60 + int(m)\n\n    while not (minutes % 2) and (minutes % 4) and (minutes % 6) and (minutes % 8):\n        minutes = (minutes + 1) % 1440\n    return str(minutes)\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    h, m = stdin.split(\":\")\n    if h[0] == m[0] == '0':\n        return str(int(min(int(h), int(m))))\n    elif h[0] == m[0]:\n        return str(int(min(int(h), int(m))))\n    elif m[0] == '0':\n        return str(int(min(int(m), int(h))))\n    else:\n        return str(int(min(int(h), int(m))))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t = stdin.split()[0]\n    t = int(t[0] + t[1])\n    print(t)\n    if (t % 10 == 0):\n        t = t // 10\n        t = (t + 1) % 60\n        print(t)\n        return str(t)\n    else:\n        t = (t + 1) % 60\n        t = int(str(t) + str(t)[::-1])\n        print(t)\n        return str(t)\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    hh, mm = map(int, stdin.split(\":\"))\n    if hh == mm:\n        return 1\n    if mm == 0 and hh % 2 == 0:\n        return 2\n    if mm == 0 and hh % 2!= 0:\n        return 0\n    if mm == 59 and hh % 2 == 0:\n        return 0\n    if mm == 59 and hh % 2!= 0:\n        return 1\n    return 60\n\ndef"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    hh, mm = stdin.split(':')\n    hh = int(hh)\n    mm = int(mm)\n    if is_palindrome(hh, mm):\n        return '{}'.format(hh * 60 + mm)\n    else:\n        hh = (hh + 1) % 24\n        mm = (mm + 59) % 60\n        return '{}:{}'.format(hh, mm)\n\n\ndef"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    time = stdin.split()[1]\n    minutes = int(time.split(\":\")[0]) * 60 + int(time.split(\":\")[1])\n    if minutes % 2 == 0:\n        return str(minutes // 2)\n    else:\n        return str(minutes // 2 + 1)\n\n\nprint(solution(input()))\n\ndef"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    hh, mm = map(int, stdin.split(\":\"))\n    if hh == 12:\n        hh = 00\n    if hh < 6:\n        hh += 12\n    return f\"{hh * 60 + mm}\".replace(\"0\", \"1\")"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 4 5 1 3 2\n   ... ''')\n    '3'\n    >>> solution('''7\n   ... 1 6 5 3 4 7 2\n   ... ''')\n    '5'\n    >>> solution('''6\n   ... 6 5 4 3 2 1\n   ... ''')\n    '5'\n    \"\"\"\n\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    b = sorted(a)\n\n    print(abs(b[0] - b[-1]))\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    size = int(stdin)\n    arr = [int(x) for x in stdin.split()]\n\n    max_min = max(arr) - min(arr)\n\n    # sort the array\n    arr.sort()\n\n    for i in range(size - 1):\n        min_val = arr[i]\n        max_val = arr[i + 1]\n        if max_val - min_val >= max_min:\n            return str(max_val - min_val)\n    return str(max_min)\n\n\nsolution(input())\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    a: List[int] = list(map(lambda x: int(x), stdin.split()))\n    a.sort()\n    return str(a[n - 1] - a[0])\n\nstdin = input()\nprint(solution(stdin))\n\"\"\"\n\nimport itertools\n\ndef"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split()\n    n = int(input[0])\n    arr = list(map(int, input[1]))\n    arr = sorted(arr)\n    min = arr[0]\n    max = arr[n-1]\n    result = 0\n    for i in range(n):\n        diff = abs(min-arr[i]) + abs(max-arr[i])\n        if diff > result:\n            result = diff\n    return str(result)\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.split()))\n    min_max = []\n    for i in range(n):\n        min_max.append((a[i], i + 1))\n    min_max.sort()\n\n    def swap(i, j):\n        a[i], a[j] = a[j], a[i]\n\n    def minimax(i, j, dist):\n        nonlocal min_max\n        if dist == 0:\n            min_max[i][1] = j\n            return\n        for k in range(i + 1, j + 1):\n            swap(i, k)\n            minimax(i, j, dist - 1)\n            swap(i, k)\n\n    minimax(0, n - 1, n)\n\n    if min_max[0][1] == min_max[n - 1][1]:\n        return \"*\"\n    else:\n        return min_max[0][0] - min_max[n - 1][0]\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    a = list(map(int, stdin.split()))\n    if a == sorted(a):\n        return \"0\"\n    return max(abs(min(a)-a.index(min(a))), abs(max(a)-a.index(max(a))))\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    max_element, min_element = 1, n\n    max_distance, min_distance = 0, n\n    while min_distance > 0:\n        min_distance = n\n        for i in range(n):\n            if min_element > a[i]:\n                min_element = a[i]\n                min_distance = min(min_distance, i - max_element)\n        max_distance = min(max_distance, min_element - n + 1)\n        for i in range(n):\n            if max_element < a[i]:\n                max_element = a[i]\n                max_distance = max(max_distance, i - min_element + 1)\n    return max_distance\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    arr = stdin.split()[1:]\n    max_element = 0\n    min_element = n\n    for i in arr:\n        if int(i) > max_element:\n            max_element = int(i)\n        if int(i) < min_element:\n            min_element = int(i)\n    return max(abs(min_element - max_element), n - max_element + min_element)\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    array = list(map(int, stdin.split(' ')))\n    a = array.copy()\n    min = 0\n    max = n - 1\n    for i in range(n - 1):\n        min = min + abs(a[i] - a[i + 1])\n        max = max - abs(a[i] - a[i + 1])\n        a[i + 1] = min\n        a[i] = max\n    return str(min + max)\n"
    },
    {
        "number": 21,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin.strip())\n    a: list = list(map(lambda x: int(x), stdin.strip().split()))\n    \n    d: dict = {}\n    \n    for i in range(n):\n        if i not in d:\n            d[i] = a[i]\n    \n    d = sorted(d.items(), key=lambda x: x[1])\n    \n    max_diff = 0\n    for i in range(n-1):\n        if d[i][1] == d[i+1][1]:\n            max_diff += abs(d[i][0] - d[i+1][0])\n    \n    return str(max_diff)\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    return \"TAK\" if is_palindrome(s) else \"NIE\"\n\n\ndef"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    l = 0\n    r = n - 1\n    while (l < r) and (stdin[l] == stdin[r]):\n        l += 1\n        r -= 1\n    if l == r:\n        return \"TAK\"\n    return \"NIE\"\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your puzzle answer was \"ER\".\n    \"\"\"\n    print(stdin)\n    return 'NIE'\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.splitlines()[0]\n    return 'TAK' if is_s_palindrome(s) else 'NIE'\n\ndef"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.rstrip()\n\n    if len(s) % 2 == 0:\n        return \"NIE\"\n    half = len(s) // 2\n\n    return \"TAK\" if s[:half] == s[half:][::-1] else \"NIE\"\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    l = list(stdin.lower())\n    #print(l)\n    def palindrome(s):\n        return s == s[::-1]\n    if(palindrome(l[0]+l[-1]) and len(l)%2 == 0):\n        #print(\"Yes\")\n        return \"TAK\"\n    if(palindrome(l[0]+l[-1]) and len(l)%2!= 0):\n        #print(\"Yes\")\n        return \"TAK\"\n    else:\n        #print(\"No\")\n        return \"NIE\"\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return 'TAK' if stdin == stdin[::-1] else 'NIE'\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    #s = stdin\n    s = stdin.strip()\n    # print(s)\n    length = len(s)\n    # print(length)\n    middle = length // 2\n    # print(middle)\n    if length % 2 == 0:\n        #print(\"even length\")\n        return is_palindrome_even_length(s, middle)\n    else:\n        #print(\"odd length\")\n        return is_palindrome_odd_length(s, middle)\n\n\ndef"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if len(s) % 2 == 0:\n        first = s[:len(s) // 2]\n        second = s[len(s) // 2:]\n    else:\n        first = s[:len(s) // 2]\n        second = s[len(s) // 2 + 1:]\n    if first == first[::-1]:\n        if second == second[::-1]:\n            return 'TAK'\n        else:\n            return 'NIE'\n    else:\n        return 'NIE'\n\n\nsolution(stdin)\n"
    },
    {
        "number": 22,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    #[z, x, c, v, b, o, a, n]\n    #solution = 'TAK'\n    #solution = 'NIE'\n    solution = 'ER'\n    #[o, e, r, O, Y, I, a, l, l, u, x, l]\n    #solution = 'TAK'\n    #solution = 'NIE'\n    #solution = 'ER'\n    \n    \n    # \ub2e4\ub9cc, s \uac00 \uc911\uac04\uc5d0\uc11c \ub05d\ub098\ub294 \uacbd\uc6b0\ub294 \uc544\ubb34 \uc77c\ub3c4 \ud558\uc9c0 \uc54a\ub294\ub2e4.\n    # s = 'o'\n    # solution = 'ER'\n    \n    \n    # \ub0b4 \ub2f5\n    n = len(s)\n    if n == 0:\n        return solution\n    \n    # \ub0b4 \ud480\uc774\n    # palindrome = True\n    # for i in range(n):\n    #     if s[i]!= s[n-i-1]:\n    #         palindrome = False\n    #         break\n    # return solution if palindrome else 'NIE'\n\n\n    # \uac19\uc740\ub370, \ud2c0\ub9b0 \uc810 : i\ubc88\uc9f8\uc758 \uac12\uc774 \uc624\ub978\ucabd \uac12\ubcf4\ub2e4 \ud074 \ub54c, \uc67c\ucabd \uac12\ubcf4\ub2e4 \uc791\uc740 \uacbd\uc6b0\n    if n % 2 == 0:\n        # \ud640\uc218\uc77c \ub54c\n        for i in range(n//2):\n            if s[i]!= s[n-1-i]:\n                return 'NIE'\n        return 'TAK'\n    else:\n        for i in range(n//2):\n            if s[i]!= s[n-i-1]:\n                return 'NIE'\n        return 'TAK'"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = stdin.split()\n    n, m = int(n), int(m)\n\n    n = list(map(int, list(n)))\n    m = list(map(int, list(m)))\n\n    l = []\n    a = 1\n    while a <= m:\n        b = 1\n        while b <= n:\n            if n == b:\n                l.append(b)\n            if a == b:\n                l.append(a)\n            b += 1\n        a += 1\n    \n    l.sort()\n    return ''.join(map(str, l))\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(i) for i in stdin.split()]\n    while a!= 0:\n        a, b = b, a\n        a = max(a, b)\n        b = max(a, b)\n    return str(a)\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    \n    def check(n):\n        for i in range(len(str(n))):\n            if str(n)[i] == '0':\n                return False\n        return True\n        \n    def dfs(n, s, visited):\n        if n > b:\n            return\n        if n > b and s == 0:\n            return\n        if n == b:\n            return s\n        if n == b:\n            return s\n        visited.add(n)\n        if s == 0:\n            s = n\n        for i in range(len(str(n))):\n            if str(n)[i]!= '0' and (n,i) not in visited:\n                visited.add((n,i))\n                if check(n):\n                    dfs(n * 10 + int(str(n)[i]), s + int(str(n)[i]), visited)\n        visited.remove(n)\n    return str(dfs(a, 0, set()))\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return permute_str_to_int(str(a), str(b))\n\ndef"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # it doesn't work with 2 digits\n    a = [int(i) for i in stdin]\n    # a = list(stdin)\n    a = sorted(a)\n    a = str(a[0]) + str(a[1]) + str(a[2])\n    return a"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('123')\n    213\n    >>> solution('3921')\n    9321\n    >>> solution('4940')\n    4940\n    \"\"\"\n    a, b = map(int, stdin.split())\n    arr = list(str(a))\n    while len(arr) < b:\n        arr.insert(0, '0')\n    return str(int(''.join(arr)))\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    a = int(a)\n    b = int(b)\n    digits = [int(i) for i in str(a)]\n    max_digit = max(digits)\n    digits.remove(max_digit)\n    for i in range(max_digit):\n        digits.append(i)\n    number = digits[:]\n    print(''.join([str(i) for i in number]))\n    if int(number) >= b:\n        print(number)\n        return True\n    else:\n        return False\nsolution(\"123\")\nsolution(\"3921\")\nsolution(\"4940\")"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    def fact(n):\n        res = 1\n        for i in range(1, n + 1):\n            res *= i\n        return res\n    def permute(arr):\n        n = len(arr)\n        if n <= 1:\n            return arr\n        res = []\n        for i in range(1, n + 1):\n            if i == n:\n                arr = list(map(lambda x: str(x), arr))\n                res.append(\"\".join(arr))\n            else:\n                arr_copy = arr.copy()\n                for j in range(n):\n                    if j in (i, n - 1 - i):\n                        continue\n                    arr_copy[j], arr_copy[i] = arr_copy[i], arr_copy[j]\n                    arr = list(map(lambda x: str(x), arr_copy))\n                    res.append(\"\".join(arr))\n                    arr = arr_copy\n        return res\n    if fact(n) < b:\n        return\n    arr = list(map(lambda x: int(x), stdin.split()))\n    ans = list(map(lambda x: int(x), permute(arr)))\n    ans = max(ans, key=lambda x: int(x))\n    ans = list(map(lambda x: str(x), ans))\n    return \"\".join(ans)"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    a = list(str(a))\n    b = list(str(b))\n    a = \"\".join(sorted(a))\n    b = \"\".join(sorted(b))\n    while True:\n        if a == \"0\" or b == \"0\":\n            return 0\n        if a > b:\n            return a\n        if a < b:\n            return b\n        if a == b:\n            return \"0\"\n"
    },
    {
        "number": 23,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    b = int(input())\n    res = ''\n    while a > 0:\n        if a % 10 > b % 10:\n            res += str(a % 10)\n        else:\n            res += str(b % 10)\n        a //= 10\n        b //= 10\n    return res\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    matrix = stdin.split()\n    x_count = 0\n    o_count = 0\n    empty_count = 0\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == 'X':\n                x_count += 1\n            elif matrix[i][j] == 'O':\n                o_count += 1\n            else:\n                empty_count += 1\n    if x_count == o_count:\n        return 'NO'\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == 'X':\n                matrix[i][j] = '.'\n                break\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == '.':\n                matrix[i][j] = 'X'\n                break\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == 'O':\n                matrix[i][j] = '.'\n                break\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == '.':\n                matrix[i][j] = 'O'\n                break\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == 'X':\n                matrix[i][j] = '.'\n                break\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == '.':\n                matrix[i][j] = 'O'\n                break\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == 'O':\n                matrix[i][j] = '.'\n                break\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == '.':\n                matrix[i][j] = 'X'\n                break\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == 'X':\n                matrix[i][j] = '.'\n                break\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == 'O':\n                matrix[i][j] = '.'\n                break\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == '.':\n                matrix[i][j] = 'X'\n                break\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == 'X':\n                matrix[i][j] = '.'\n                break\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == 'O':\n                matrix[i][j] = '.'\n                break\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == '.':\n                matrix[i][j] = 'O'\n                break\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == 'X':\n                matrix[i][j] = '.'\n                break\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == 'O':\n                matrix[i][j] = '.'\n                break\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == '.':\n                matrix[i][j] = 'X'\n                break\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == 'X':\n                matrix[i][j] = '.'\n                break\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == 'O':\n                matrix[i][j] = '.'\n                break\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == '.':\n                matrix[i][j] = 'X'\n                break\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == 'X':\n                matrix[i][j] = '.'\n                break\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == 'O':\n                matrix[i][j] = '.'\n                break\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == '.':\n                matrix[i][j] = 'X'\n                break\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == 'X':\n                matrix[i][j] = '.'\n                break\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == 'O':\n                matrix[i][j] = '.'\n                break\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == '.':\n                matrix[i][j] = 'X'\n                break\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == 'X':\n                matrix[i][j] = '.'\n                break\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == 'O':\n                matrix[i][j] = '.'\n                break\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            if matrix[i][j] == '.':\n                matrix[i][j] = 'X'\n                break\n    for i in range(len(matrix)):\n        for j in range(len(matrix[i])):\n            "
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    board = stdin\n    if len(board)!= 10 or len(board[0])!= 10:\n        return 'NO'\n    crosses = 0\n    noughts = 0\n    empty = 0\n    for row in range(len(board)):\n        for column in range(len(board[0])):\n            if board[row][column] == '.':\n                empty += 1\n            elif board[row][column] == 'X':\n                crosses += 1\n            elif board[row][column] == 'O':\n                noughts += 1\n            else:\n                return 'NO'\n    if empty < 5 or crosses * noughts == 0:\n        return 'NO'\n    for i in range(len(board)):\n        for j in range(len(board[0])):\n            if board[i][j] == 'X':\n                if (i + 1 < len(board) and board[i + 1][j] == 'X' and j + 1 < len(board[0]) and board[i + 1][j + 1] == 'X'\n                        and i - 1 >= 0 and board[i - 1][j] == 'X' and j + 1 < len(board[0]) and board[i - 1][j + 1] == 'X'\n                        and i - 1 >= 0 and board[i - 1][j - 1] == 'X' and i + 1 < len(board) and board[i + 1][j - 1] == 'X'\n                        and i + 1 < len(board) and board[i + 1][j - 1] == 'X' and i + 1 < len(board) and board[i + 1][j + 1] == 'X'):\n                    return 'YES'\n    return 'NO'\n\n\ndef"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = 0\n    for c in stdin:\n        if c == '.':\n            n += 1\n\n    if n < 5:\n        return 'NO'\n\n    m = 0\n    if stdin[0] == stdin[10]:\n        m = stdin[0] == stdin[1] == stdin[2] == stdin[3] == stdin[4] == stdin[5] == stdin[6] == stdin[7] == stdin[8] == stdin[9]\n        if m:\n            return 'YES'\n\n    i = 1\n    while i < 9:\n        if stdin[i] == stdin[i + 1] == stdin[i + 2] == stdin[i + 3] == stdin[i + 4] == stdin[i + 5] == stdin[i + 6] == stdin[i + 7] == stdin[i + 8]:\n            return 'YES'\n        i += 1\n    if stdin[0] == stdin[4] == stdin[8] == stdin[12] == stdin[16] == stdin[20] == stdin[24]:\n        return 'YES'\n\n    i = 0\n    while i < 8:\n        if stdin[i] == stdin[i + 1] == stdin[i + 2] == stdin[i + 3] == stdin[i + 4] == stdin[i + 5] == stdin[i + 6] == stdin[i + 7]:\n            return 'YES'\n        i += 1\n\n    i = 0\n    while i < 8:\n        if stdin[i] == stdin[i + 1] == stdin[i + 2] == stdin[i + 3] == stdin[i + 4] == stdin[i + 5] == stdin[i + 6]:\n            return 'YES'\n        i += 1\n\n    return 'NO'"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    for i in range(10):\n        for j in range(10):\n            if lines[i][j] == 'X':\n                lines[i] = lines[i][:j] + 'X' + lines[i][j+1:]\n    for i in range(10):\n        for j in range(10):\n            if lines[i][j] == 'O':\n                lines[i] = lines[i][:j] + 'O' + lines[i][j+1:]\n    for i in range(10):\n        if lines[i][i] == 'X' and lines[i][9-i] == 'X':\n            return 'YES'\n    for i in range(10):\n        if lines[i][i] == 'O' and lines[i][9-i] == 'O':\n            return 'YES'\n    for i in range(10):\n        for j in range(10-3):\n            if lines[i][j] == 'X' and lines[i][j+1] == 'X' and lines[i][j+2] == 'X' and lines[i][j+3] == 'X':\n                return 'YES'\n            if lines[i][j] == 'O' and lines[i][j+1] == 'O' and lines[i][j+2] == 'O' and lines[i][j+3] == 'O':\n                return 'YES'\n    for i in range(10):\n        for j in range(10-3):\n            if lines[j][i] == 'X' and lines[j+1][i] == 'X' and lines[j+2][i] == 'X' and lines[j+3][i] == 'X':\n                return 'YES'\n            if lines[j][i] == 'O' and lines[j+1][i] == 'O' and lines[j+2][i] == 'O' and lines[j+3][i] == 'O':\n                return 'YES'\n    for i in range(10-3):\n        for j in range(10-3):\n            if lines[i][j] == 'X' and lines[i+1][j+1] == 'X' and lines[i+2][j+2] == 'X' and lines[i+3][j+3] == 'X':\n                return 'YES'\n            if lines[i][j] == 'O' and lines[i+1][j+1] == 'O' and lines[i+2][j+2] == 'O' and lines[i+3][j+3] == 'O':\n                return 'YES'\n    for i in range(10-3):\n        for j in range(10-3):\n            if lines[i][j] == 'X' and lines[i+1][j+1] == 'X' and lines[i+2][j+2] == 'X' and lines[i+3][j+3] == 'X':\n                return 'YES'\n            if lines[i][j] == 'O' and lines[i+1][j+1] == 'O' and lines[i+2][j+2] == 'O' and lines[i+3][j+3] == 'O':\n                return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    matrix = []\n    for line in stdin.splitlines():\n        matrix.append(line)\n    for i in range(len(matrix)):\n        if check(matrix, i):\n            return 'YES'\n    return 'NO'\n\n\ndef"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    empty = None\n    cntX = 0\n    cntO = 0\n    for line in lines:\n        line = line.replace('.', 'X')\n        line = line.replace('X', '.')\n        line = line.replace('O', 'O')\n        line = line.replace('O', 'X')\n        for i in line:\n            if i == '.':\n                empty = True\n            elif i == 'X':\n                cntX += 1\n            elif i == 'O':\n                cntO += 1\n            else:\n                raise Exception('Unknown symbol')\n        if cntX < cntO:\n            cntO -= 1\n            empty = False\n        elif cntX > cntO:\n            cntX -= 1\n            empty = False\n        else:\n            empty = False\n    return 'YES' if empty else 'NO'\n\nprint(solution(input()))\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = 10\n    field = stdin\n    c, o, empty = 0, 0, 0\n    # O  1  2\n    # X  3  4\n    for i in range(N):\n        for j in range(N):\n            if field[i][j] == 'O':\n                o += 1\n            elif field[i][j] == 'X':\n                c += 1\n            else:\n                empty += 1\n    # if c > o and o > empty:\n    if (c+o-1) > (c+empty):\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    count_cross = 0\n    count_nought = 0\n    for line in lines:\n        for c in line:\n            if c == 'X':\n                count_cross += 1\n            elif c == 'O':\n                count_nought += 1\n\n    for i in range(count_nought, count_nought - count_cross, -1):\n        if i <= count_cross:\n            return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    size = 10\n    cnt_x = 0\n    cnt_o = 0\n    for i in range(size):\n        for j in range(size):\n            if stdin[i][j] == \"X\":\n                cnt_x += 1\n            elif stdin[i][j] == \"O\":\n                cnt_o += 1\n    if cnt_x <= cnt_o:\n        return \"NO\"\n    board = stdin\n    line_len = len(board[0])\n    for i in range(size - 1, -1, -1):\n        for j in range(line_len - 1, -1, -1):\n            if board[i][j]!= \".\":\n                if board[i][j] == \"X\":\n                    board[i][j] = \".\"\n                    board[i][j + 1] = \".\"\n                    board[i + 1][j] = \".\"\n                    board[i + 1][j + 1] = \".\"\n                    if check_win(board):\n                        return \"YES\"\n                    board[i][j] = \"X\"\n                    board[i][j + 1] = \"O\"\n                    board[i + 1][j] = \"O\"\n                    board[i + 1][j + 1] = \"X\"\n                elif board[i][j] == \"O\":\n                    board[i][j] = \".\"\n                    board[i][j + 1] = \".\"\n                    board[i + 1][j] = \".\"\n                    board[i + 1][j + 1] = \".\"\n                    if check_win(board):\n                        return \"NO\"\n                    board[i][j] = \"O\"\n                    board[i][j + 1] = \"X\"\n                    board[i + 1][j] = \"X\"\n                    board[i + 1][j + 1] = \"O\"\n    return \"NO\"\n\n\ndef"
    },
    {
        "number": 24,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip('\\n')\n    n = len(stdin)\n    n = n // 10\n    result = True\n    if n == 1:\n        if stdin.count('.') < 2:\n            return 'YES'\n    if n == 2:\n        if stdin.count('.')!= 1:\n            return 'NO'\n    if n == 3:\n        if stdin.count('.')!= 2:\n            return 'NO'\n\n    for i in range(0, n - 1):\n        if stdin[i] == '.':\n            continue\n        for j in range(i + 1, n):\n            if stdin[i] == stdin[j]:\n                result = False\n                break\n        if not result:\n            break\n    if not result:\n        return 'NO'\n    for i in range(0, n - 1):\n        if stdin[i] == '.':\n            continue\n        for j in range(i + 1, n):\n            if stdin[j] == stdin[i]:\n                result = False\n                break\n        if not result:\n            break\n    if not result:\n        return 'NO'\n    return 'YES'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    # # matrix = [[0] * n for _ in range(n)]\n    matrix = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            matrix[i][j] = (i+j)%2\n    \n    \n    # print(matrix)\n    # for i in range(n):\n    #     for j in range(n):\n    #         print(matrix[i][j], end=' ')\n    #     print()\n    \n    for i in range(n):\n        if matrix[i][i] == 0:\n            for j in range(i+1, n):\n                if matrix[i][j]!= 1:\n                    break\n            else:\n                return '-1'\n    \n    ans = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            ans[i][j] = matrix[i][j]\n    \n    for i in range(n):\n        for j in range(n):\n            ans[i][j] = matrix[j][n-i-1]\n            \n    # print(ans)\n    return ''.join(''.join(map(str, ans[i])) for i in range(n))\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(_) for _ in stdin.split())\n    if n == 1 and k == 0:\n        return \"1 0 0\"\n    if n == 2 and k == 0:\n        return \"1 0 0 0\"\n    if n == 2 and k == 1:\n        return \"0 1 0\"\n    if n == 2 and k == 2:\n        return \"0 0 0\"\n    if n == 3 and k == 0:\n        return \"1 0 0 0 0\"\n    if n == 3 and k == 1:\n        return \"0 1 0 0 0\"\n    if n == 3 and k == 2:\n        return \"0 0 0 0\"\n    if n == 3 and k == 3:\n        return \"0 0 0 0 0\"\n    if n == 3 and k == 4:\n        return \"0 0 0 0 0 0\"\n    if n == 3 and k == 5:\n        return \"0 0 0 0 0 0 0\"\n    if n == 4 and k == 0:\n        return \"1 0 0 0 0 0\"\n    if n == 4 and k == 1:\n        return \"0 1 0 0 0 0\"\n    if n == 4 and k == 2:\n        return \"0 0 1 0 0 0\"\n    if n == 4 and k == 3:\n        return \"0 0 0 1 0 0\"\n    if n == 4 and k == 4:\n        return \"0 0 0 0 1 0\"\n    if n == 4 and k == 5:\n        return \"0 0 0 0 0 1 0\"\n    if n == 5 and k == 0:\n        return \"1 0 0 0 0 0 0 0\"\n    if n == 5 and k == 1:\n        return \"0 1 0 0 0 0 0 0\"\n    if n == 5 and k == 2:\n        return \"0 0 1 0 0 0 0 0\"\n    if n == 5 and k == 3:\n        return \"0 0 0 1 0 0 0 0\"\n    if n == 5 and k == 4:\n        return \"0 0 0 0 1 0 0 0\"\n    if n == 5 and k == 5:\n        return \"0 0 0 0 0 1 0 0 0 0\"\n    if n == 6 and k == 0:\n        return \"1 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\n    if n == 6 and k == 1:\n        return \"0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\n    if n == 6 and k == 2:\n        return \"0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0\"\n    if n == 6 and k == 3:\n        return \"0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0\"\n    if n == 6 and k == 4:\n        return \"0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0\"\n    if n == 6 and k == 5:\n        return \"0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0\"\n    if n == 6 and k == 6:\n        return \"0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\n    if n == 7 and k == 0:\n        return \"1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\n    if n == 7 and k == 1:\n        return \"0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\n    if n == 7 and k == 2:\n        return \"0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\n    if n == 7 and k == 3:\n        return \"0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\n    if n == 7 and k == 4:\n        return \"0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\n    if n == 7 and k == 5:\n        return \"0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\n    if n == 7 and k == 6:\n        return \"0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\n    if n == 7 and k == 7:\n        return \"0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\n    if n == 7 and k == 8:\n        return \"0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\n    if n == 7 and k == 9:\n        return \"0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\n    if n == 7 and k == 10:\n        return \"0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\n    if n == 7 and k == 11:\n        return \"0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\n    if n == 7 and k == 12:\n        return \"0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\n    if n == 7 and k == 13:\n        return \"0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\n    if n == 7 and k == 14:\n        return \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\n    if n == 7 and k == 15:\n        return \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\n    if n == 7 and k == 16:\n        return \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\n    if n == 7 and k == 17:\n        return \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\n    if n == 7 and k == 18:\n        return \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\n    if n == 7 and k == 19:\n        return \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\n    if n == 7 and k == 20:\n        return \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0\"\n    if n == 7 and k == 21:\n        return \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n < 2 or k > 10 ** 6:\n        return '-1'\n    matrix = [[0 for i in range(n)] for j in range(n)]\n    cols = [[] for i in range(n)]\n    up_row = 0\n    down_row = n - 1\n    count = 0\n    while count <= k:\n        for i in range(n):\n            if i == up_row or i == down_row:\n                cols[i].append(count)\n                count += 1\n            else:\n                matrix[up_row][i] = count\n                cols[i].append(count)\n                count += 1\n            matrix[down_row][i] = count\n            cols[i].append(count)\n            count += 1\n            matrix[i][up_row] = count\n            cols[i].append(count)\n            count += 1\n            matrix[i][down_row] = count\n            cols[i].append(count)\n            count += 1\n        up_row += 1\n        down_row -= 1\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == 0:\n                for k in range(len(cols[i])):\n                    matrix[i][cols[i][k]] = 0\n    return matrix\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split()\n    n = int(n)\n    k = int(k)\n    matrix = [[int(i) for i in stdin.split()] for _ in range(n)]\n\n    result = []\n\n    for _ in range(n):\n        row = []\n        for _ in range(n):\n            if len(result) >= 2 and result[-2] > result[-1]:\n                return -1\n            else:\n                row.append(0)\n        result.append(row)\n        for _ in range(k):\n            matrix[n - 1][n - 1] = 1\n            for i in range(n - 2, -1, -1):\n                matrix[i][n - 1] = matrix[i + 1][n - 1]\n            for i in range(n - 2, -1, -1):\n                matrix[n - 1][i] = matrix[n - 1][i + 1]\n            matrix[n - 1][n - 2] = 0\n\n    for i in range(n):\n        row = []\n        for j in range(n):\n            row.append(str(result[i][j]))\n        result.append(row)\n\n    return '\\n'.join(result)\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    matrix = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if (i + j) % 2 == 0:\n                matrix[i][j] = k\n            else:\n                matrix[i][j] = 0\n    # print(matrix)\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                if matrix[i][j]!= k:\n                    return -1\n    res = \"\"\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == 0:\n                res += \"0\"\n            else:\n                res += \"1\"\n        res += \"\\n\"\n    return res\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = [[0] * n for _ in range(n)]\n    for _ in range(k):\n        x, y = map(int, input().split())\n        a[x][y] = a[y][x] = 1\n    for i in range(n):\n        for j in range(n):\n            if a[i][j] == 0:\n                continue\n            for k in range(n):\n                if a[j][k] == 1 and a[k][i] == 1:\n                    return -1\n    return \"\\n\".join(\" \".join(str(x) for x in row) for row in a)\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    n = max(n, k)\n    if k == n:\n        return \"1 0 0 0 0\" * (n // 4)\n    if k == n + 1:\n        return \"0 0 0 0 1\" * (n // 4)\n    if k == n + 2:\n        return \"0 0 0 1 0\" * (n // 4)\n    if k == n + 3:\n        return \"1 0 0 0 0\" * (n // 4)\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n!= n:\n        return '-1'\n    matrix = [[0] * n for _ in range(n)]\n    up, left, down, right = 0, 0, 0, 0\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                up = 1\n            elif i == n - j - 1:\n                down = 1\n            elif j == n - i - 1:\n                right = 1\n            elif i == n - j - 1:\n                left = 1\n            if up == 1 and down == 1 and right == 1 and left == 1:\n                break\n            matrix[i][j] = 1\n            up, down, right, left = up, down, right, left\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == 0:\n                return '-1'\n    return str(matrix)\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n\n    matrix = [[0 for _ in range(n)] for _ in range(n)]\n\n    for i in range(n):\n        matrix[i][i] = k\n\n    for i in range(n):\n        if i > 0:\n            matrix[i][i-1] = k\n            matrix[i-1][i] = k\n\n    if n > 1:\n        for j in range(1, n):\n            if j > 0:\n                matrix[0][j-1] = k\n                matrix[j-1][0] = k\n\n    for row in matrix:\n        print(*row)\n\n    return str(matrix)\n"
    },
    {
        "number": 25,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(x) for x in stdin.split())\n    matrix = [[0] * n for _ in range(n)]\n    if k < 0:\n        return -1\n\n    for i in range(k):\n        a, b = (int(x) for x in stdin.split())\n        matrix[a - 1][b - 1] = 1\n    for i in range(n):\n        for j in range(n):\n            if matrix[j][i]!= 0:\n                matrix[i][j] = 1\n    for i in range(n):\n        if matrix[i][i] == 0:\n            return -1\n    for j in range(n):\n        if matrix[j][j] == 0:\n            return -1\n\n    return '\\n'.join(' '.join(map(str, row)) for row in matrix)\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(float, stdin.split())\n    return (\"(\" * min(x, y, z)) + str(pow(x, y) * pow(z, x)) + (\")^{}\".format(x) if y == 0 else str(pow(x, z) * pow(y, x)) + \")^{}\".format(x) if z == 0 else str(pow(y, x) * pow(z, y)) + \")^{}\".format(y) + (\"^\" * min(x, y, z))\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    x, y, z = map(float, stdin.split())\n    \n    a1 = (x**y)**z\n    a2 = (x**z)**y\n    a3 = (y**x)**z\n    a4 = (y**z)**x\n    a5 = (z**x)**y\n    a6 = (z**y)**x\n    a7 = (x**y)**z\n    a8 = (x**z)**y\n    a9 = (y**x)**z\n    a10 = (y**z)**x\n    a11 = (z**x)**y\n    a12 = (z**y)**x\n    \n    a = a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12\n    \n    s =''.join([str(x) for x in a if x == max(a)])\n    return s\n    \n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(float, stdin.split())\n    def f(x, y, z):\n        if z == 1:\n            return 'x^y'\n        if z == 2:\n            return 'x^z'\n        if z == 3:\n            return 'y^x'\n        if z == 4:\n            return 'y^z'\n        if z == 5:\n            return 'z^x'\n        if z == 6:\n            return 'z^y'\n        if z == 7:\n            return '(y^x)'\n        if z == 8:\n            return '(y^z)'\n        if z == 9:\n            return 'x^y'\n        if z == 10:\n            return 'x^z'\n        if z == 11:\n            return 'y^x'\n        if z == 12:\n            return 'y^z'\n        raise NotImplementedError\n    a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12 = map(lambda x: pow(x, y, z), map(int, f.__annotations__.values()))\n    c = max(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12)\n    if c == a1:\n        return f(x, y, z)\n    if c == a2:\n        return f(x, z, y)\n    if c == a3:\n        return f(y, x, z)\n    if c == a4:\n        return f(y, z, x)\n    if c == a5:\n        return f(z, x, y)\n    if c == a6:\n        return f(z, y, x)\n    if c == a7:\n        return f(x, y, z)\n    if c == a8:\n        return f(x, z, y)\n    if c == a9:\n        return f(y, x, z)\n    if c == a10:\n        return f(y, z, x)\n    if c == a11:\n        return f(z, x, y)\n    if c == a12:\n        return f(z, y, x)\n    raise NotImplementedError\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(float, stdin.split())\n    x_y_z = x ** y ** z\n    x_y_z_ = x ** y ** (z * -1)\n    x_y_z__ = x ** y * z\n    x_y_z___ = x ** y * (z * -1)\n    x_y_z___2 = x ** y * (z * -1) * -1\n    x_y_z___2_ = x ** y * (z * -1) * -1 * -1\n    x_y_z___2__ = x ** y * (z * -1) * -1 * -1 * -1\n    x_y_z___2_2 = x ** y * (z * -1) * -1 * -1 * -1 * -1\n    y_x_z = y ** x ** z\n    y_x_z_ = y ** x ** (z * -1)\n    y_x_z__ = y ** x * z\n    y_x_z___ = y ** x * (z * -1)\n    y_x_z___2 = y ** x * (z * -1) * -1\n    y_x_z___2_ = y ** x * (z * -1) * -1 * -1\n    y_x_z___2__ = y ** x * (z * -1) * -1 * -1 * -1\n    y_x_z___2_2 = y ** x * (z * -1) * -1 * -1 * -1 * -1\n    z_x_y = z ** x ** y\n    z_x_y_ = z ** x ** (y * -1)\n    z_x_y__ = z ** x * y\n    z_x_y___ = z ** x * (y * -1)\n    z_x_y___2 = z ** x * (y * -1) * -1\n    z_x_y___2_ = z ** x * (y * -1) * -1 * -1\n    z_x_y___2__ = z ** x * (y * -1) * -1 * -1 * -1\n    z_x_y___2_2 = z ** x * (y * -1) * -1 * -1 * -1 * -1\n    stdout_list = [x_y_z, x_y_z_, x_y_z__, x_y_z___, x_y_z___2, x_y_z___2_, x_y_z___2__, x_y_z___2_2, y_x_z, y_x_z_, y_x_z__, y_x_z___, y_x_z___2, y_x_z___2_, y_x_z___2__, y_x_z___2_2, z_x_y, z_x_y_, z_x_y__, z_x_y___, z_x_y___2, z_x_y___2_, z_x_y___2__, z_x_y___2_2]\n    max_value = max(stdout_list)\n    max_value_index = stdout_list.index(max_value)\n    print(stdout_list.pop(max_value_index))\n    return stdout_list"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(float, stdin.split())\n    res = []\n    for p1 in range(12):\n        for p2 in range(12):\n            for p3 in range(12):\n                if p1!= p2 and p1!= p3 and p2!= p3:\n                    exp = f\"{x**y}^{z}\" if p1 == 0 else f\"{x**z}^{y}\" if p2 == 0 else f\"{y**x}^{z}\" if p3 == 0 else f\"{y**z}^{x}\" if p1 == 0 else f\"{z**x}^{y}\" if p2 == 0 else f\"{z**y}^{x}\" if p3 == 0 else f\"{x**y}^{z}\" if p1 == 0 else f\"{x**z}^{y}\" if p2 == 0 else f\"{y**x}^{z}\" if p3 == 0 else f\"{y**z}^{x}\" if p1 == 0 else f\"{z**x}^{y}\" if p2 == 0 else f\"{z**y}^{x}\"\n                    if eval(exp) == max([x, y, z]):\n                        res.append(exp)\n    print(min(res))\n    return \"\".join([chr(i) for i in sorted([ord(i) for i in res])])\n\nstdin = \"1.1 3.4 2.5\"\nprint(solution(stdin))\nstdin = \"2.0 2.0 2.0\"\nprint(solution(stdin))\nstdin = \"1.9 1.8 1.7\"\nprint(solution(stdin))\nstdin = \"3.0 3.0 3.0\"\nprint(solution(stdin))\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(float, stdin.split())\n    return \"\".join(sorted([str(x ** y ** z), str((x ** z) ** y), str(y ** x ** z), str(y ** z ** x), str(z ** x ** y), str(z ** y ** x), str(x ** y ** z), str(x ** z ** y), str(y ** x ** z), str(y ** z ** x), str(z ** x ** y), str(z ** y ** x)]))\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = stdin.split()\n    x = float(x)\n    y = float(y)\n    z = float(z)\n\n    for i in range(13):\n        n = x**y**z\n        if n == max(n, x**y, x**z, y**z, x*y, x*z, y*z, x**y, x**z, y**z, x*y**z, x*z**y, y*x**z, y*z**x, z*x**y, z*y**x):\n            if i == 0:\n                print(f'{x}^{y}^{z}')\n            elif i == 1:\n                print(f'{x}^{y}')\n            elif i == 2:\n                print(f'{x}^{z}^{y}')\n            elif i == 3:\n                print(f'{x}^{z}')\n            elif i == 4:\n                print(f'{y}^{x}^{z}')\n            elif i == 5:\n                print(f'{y}^{z}^{x}')\n            elif i == 6:\n                print(f'{y}^{x}')\n            elif i == 7:\n                print(f'{y}^{z}')\n            elif i == 8:\n                print(f'{z}^{x}^{y}')\n            elif i == 9:\n                print(f'{z}^{y}')\n            elif i == 10:\n                print(f'{z}')\n            else:\n                print(f'{z}^{y}')\n                print(f'{y}^{z}')\n                print(f'{y}^{z}')\n                print(f'{z}^{y}')\n                print(f'{z}')\n    return ''"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(float, stdin.strip().split())\n    for i in range(12):\n        if x**y**z == max(x**y**z, x**z**y, (x**y)**z, (x**z)**y, y**x**z, y**z**x, (y**x)**z, (y**z)**x, z**x**y, z**y**x, (z**x)**y, (z**y)**x):\n            if i == 1:\n                return f\"{x}^{y}^{z}\"\n            elif i == 2:\n                return f\"{x}^{z}^{y}\"\n            elif i == 3:\n                return f\"{x}^{y}^{z}\"\n            elif i == 4:\n                return f\"{x}^{z}^{y}\"\n            elif i == 5:\n                return f\"{y}^{x}^{z}\"\n            elif i == 6:\n                return f\"{y}^{z}^{x}\"\n            elif i == 7:\n                return f\"{y}^{x}^{z}\"\n            elif i == 8:\n                return f\"{y}^{z}^{x}\"\n            elif i == 9:\n                return f\"{z}^{x}^{y}\"\n            elif i == 10:\n                return f\"{z}^{y}^{x}\"\n            elif i == 11:\n                return f\"{z}^{x}^{y}\"\n    return max(x**y**z, x**z**y, (x**y)**z, (x**z)**y, y**x**z, y**z**x, (y**x)**z, (y**z)**x, z**x**y, z**y**x, (z**x)**y, (z**y)**x)\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    nums = stdin.split()\n    x = nums[0]\n    y = nums[1]\n    z = nums[2]\n    for a in range(1, 13):\n        p = (x ** y ** z) ** (1 / a)\n        if int(p) == p:\n            return str(p)\nx, y, z = map(float, input().split())\nprint(solution(f'{x} {y} {z}'))\n"
    },
    {
        "number": 26,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(float, stdin.split())\n    expression = x ** y ** z\n    return''.join([pow(i, expression) for i in range(1, 13)])"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    You can't type the whole string.\n    \"\"\"\n    if stdin == '':\n        return 0\n    stdin = list(stdin)\n    ans = 0\n    while len(stdin) > 0:\n        if len(stdin) == 1:\n            ans += 1\n            break\n        if len(stdin) == 2:\n            stdin.pop(0)\n            ans += 1\n            stdin.append(stdin.pop(0))\n            break\n        if len(stdin) == 3:\n            stdin.pop(0)\n            stdin.pop(0)\n            ans += 1\n            stdin.append(stdin.pop(0))\n            break\n        if len(stdin) == 4:\n            stdin.pop(0)\n            stdin.pop(0)\n            stdin.pop(0)\n            stdin.append(stdin.pop(0))\n            ans += 1\n            break\n        if len(stdin) == 5:\n            stdin.pop(0)\n            stdin.pop(0)\n            stdin.pop(0)\n            stdin.pop(0)\n            ans += 1\n            break\n        if len(stdin) == 6:\n            stdin.pop(0)\n            stdin.pop(0)\n            stdin.pop(0)\n            stdin.pop(0)\n            stdin.pop(0)\n            ans += 1\n            break\n        if len(stdin) == 7:\n            stdin.pop(0)\n            stdin.pop(0)\n            stdin.pop(0)\n            stdin.pop(0)\n            stdin.pop(0)\n            stdin.pop(0)\n            ans += 1\n            break\n    return ans\n\n\nsolution(\"abcabca\")\n"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    return min(len(s), 5)\n"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdout = ''\n    for i in range(len(stdin)):\n        stdout += stdin[i]\n    return stdout\n\nsolution(stdin)\n\n\ndef"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline()\n    if n == 1:\n        return len(s)\n    first, second, answer = 0, 0, float('inf')\n    while first < n:\n        if s[first] == s[second]:\n            first += 1\n            second += 1\n            answer = min(answer, first-second+1)\n        else:\n            if s[first] == s[second-1]:\n                first += 1\n                second = first\n                answer = min(answer, first-second+1)\n            elif s[first+1] == s[second]:\n                first += 2\n                second += 1\n                answer = min(answer, first-second+2)\n    return answer"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin\n    return min(len(input), len(input) + len(input))\n    \n"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n'''\ns = stdin.split('\\n')\na = int(s[0])\nb = list(s[1])\n\ndef"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    s = sys.stdin.readline().strip()\n    s += s[::-1]\n    return len(s) - len(stdin)\n\n\n\ndef"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Returns:\n        str: The minimum number of operations needed to type the given string\n    \"\"\"\n    # Your code here\n    string = stdin\n    string = 'a' * len(string)\n    i = 0\n    j = 1\n    while j < len(string):\n        string = string[:i] + string[j:]\n        j += 2\n        i += 1\n    print(len(string))\n    return string\nsolution(input())"
    },
    {
        "number": 27,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return min(len(stdin), len(stdin) + 1)\nsolution(input())\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 5\n   ... 01 0\n   ... 2 1\n   ... 2extra 0\n   ... 3 1\n   ... 99 0\n   ... ''')\n    '4'\n    >>> solution('''\n   ... 5\n   ... 1 0\n   ... 2 1\n   ... 2extra 0\n   ... 3 1\n   ... 99 0\n   ... ''')\n    '3'\n    \"\"\"\n    n = int(stdin.split()[0])\n    data = []\n    for line in stdin.splitlines():\n        if line == '':\n            continue\n        _, fname, _, ttype = line.split()\n        fname = int(fname)\n        if ttype == '1':\n            data.append((fname, 'extra'))\n        else:\n            data.append((fname, ''))\n    min_ = float('inf')\n    for i, (fname, ttype) in enumerate(data):\n        for j, (fname2, ttype2) in enumerate(data[i+1:]):\n            if fname == fname2:\n                min_ = min(min_, j+1)\n    return min_\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    all_files_count = int(lines.pop(0))\n    files_type_map = {}\n    for _ in range(all_files_count):\n        filename, type_ = lines.pop(0).split()\n        files_type_map[filename] = type_\n    files_count = len(files_type_map.keys())\n    renamed_files = {}\n    for i in range(1, files_count + 1):\n        file_name = str(i)\n        renamed_files[file_name] = None\n        renamed_files[file_name] = renamed_files.get(file_name, None)\n    all_examples_count = int(lines.pop(0))\n    files_count -= all_examples_count\n    for i in range(all_examples_count):\n        renamed_files[lines.pop(0)] = None\n    for i in range(files_count):\n        file_name = lines.pop(0)\n        filename, type_ = file_name.split()\n        if renamed_files[filename] is None:\n            renamed_files[filename] = None\n            renamed_files[filename] = renamed_files.get(filename, None)\n        else:\n            renamed_files[filename] = None\n    for file_name in files_type_map.keys():\n        if renamed_files[file_name] is None:\n            renamed_files[file_name] = None\n            renamed_files[file_name] = renamed_files.get(file_name, None)\n        else:\n            renamed_files[file_name] = None\n    return sum(1 for filename in renamed_files.keys() if renamed_files[filename] is None)\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Takes input from STDIN and passes the contents to the stdout.\n    >>> solution(\"5\\n1 0\\n2 1\\n2extra 0\\n3 1\\n99 0\\n\")\n    4\n    \"\"\"\n    n = int(stdin.readline())\n    file_names = {}\n    result = 0\n    for _ in range(n):\n        file_name, type_ = stdin.readline().split()\n        file_names[file_name] = type_\n\n    print(result)\n    for file_name, type_ in file_names.items():\n        if type_ == \"1\":\n            result += 1\n            result += min(4, len(file_name) - 1)\n        if type_ == \"0\":\n            result += 3\n            result += min(len(file_name), 4)\n\n    print(\"move {} {}\".format(result, file_names))\n    return \"move {} {}\".format(result, file_names)\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin)\n    arr = [list(map(int, stdin.split())) for _ in range(n)]\n    dfs = []\n    for i in range(n):\n        dfs.append([])\n    for i in range(n):\n        dfs[i].append(arr[i][0])\n        if arr[i][1] == 1:\n            dfs[i].append(2 * i + 1)\n        else:\n            dfs[i].append(2 * i)\n    for i in range(1, n):\n        for j in range(i):\n            dfs[i].append(dfs[j][i - 1])\n    print(n)\n    for i in range(n):\n        print('move', dfs[i][0], dfs[i][1])\n    return 'done'\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return sum(len(move_file(i)) for i in range(1, len(stdin.splitlines())))\n\ndef"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    num_of_files = int(stdin)\n    res = \"move {} {}\\n\".format(num_of_files+1, num_of_files+2)\n    for _ in range(num_of_files):\n        filename, type = stdin.split()\n        if type == \"0\":\n            res += \"move {} {}\\n\".format(filename, str(int(filename)+1))\n        else:\n            res += \"move {} {}\\n\".format(filename, str(int(filename)+2))\n    return res\n\nprint(solution(input()))\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    files = {int(i):stdin.split()[i] for i in range(1,n+1)}\n    examples = {}\n    for i in files:\n        if files[i].startswith('1'):\n            examples[int(files[i][1:])] = i\n    res = n\n    for i in range(1,n+1):\n        if i in examples:\n            res += 1\n            files[examples[i]] = '0'\n            files[i] = '0'\n    for i in range(1,n+1):\n        if files[i] == '0':\n            files[i] = str(res)\n            res += 1\n    return''.join(files.values())\n\n\n\nsolution('2')\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    result = []\n    n = int(stdin.strip())\n    for i in range(n):\n        line = stdin.readline().split()\n        file_name = line[0]\n        if line[1] == '0':\n            file_name += '0'\n        else:\n            file_name += '1'\n        result.append('move'+ file_name +'' + line[2])\n    return '\\n'.join(result)\n    \n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    files = stdin.split()[1:]\n    examples, tests = 0, 0\n    exists = [False] * n\n    for i in range(n):\n        if files[i][-1] == '1':\n            examples += 1\n        else:\n            tests += 1\n        if examples > 0:\n            if examples == 1:\n                exists[i] = True\n            else:\n                exists[i] = False\n    \n    res = []\n    j = 0\n    for i in range(n):\n        if exists[i]:\n            if j < examples:\n                res.append(f'move {files[i]} {files[i] + str(j)}')\n                j += 1\n            else:\n                res.append(f'move {files[i]} {files[i] + str(j)}')\n                j += 1\n    print(len(res), *res)\n    return''.join(res)\n"
    },
    {
        "number": 28,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = list(stdin.split('\\n'))\n\n    def move_file(file_name, new_file_name):\n        for line in lines:\n            if line.startswith('move'+ file_name):\n                lines.remove(line)\n                lines.append('move'+ file_name +'' + new_file_name)\n                return\n        lines.append('move'+ file_name +'' + new_file_name)\n\n    n = int(lines[0])\n    for i in range(1, n + 1):\n        file_name = lines[i].split(' ')[0]\n        new_file_name = int(lines[i].split(' ')[1])\n\n        if '0' in file_name:\n            move_file(file_name, new_file_name)\n\n    return lines\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    # your code here\n    list_ticket = list(stdin)\n    zero_list = []\n    for x in range(len(list_ticket)):\n        if list_ticket[x] == \"0\":\n            zero_list.append(x)\n    for x in range(len(zero_list)):\n        if x == 0:\n            if zero_list[0] == 0:\n                return \"0\"\n            elif zero_list[0] == 1:\n                return \"1\"\n            else:\n                return \"2\"\n        elif x == 1:\n            if zero_list[1] == 0:\n                return \"1\"\n            elif zero_list[1] == 1:\n                return \"2\"\n            else:\n                return \"3\"\n        elif x == 2:\n            if zero_list[2] == 0:\n                return \"2\"\n            elif zero_list[2] == 1:\n                return \"3\"\n            else:\n                return \"4\"\n    \n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lucky_ticket = stdin\n    while True:\n        if lucky_ticket.startswith(\"0\"):\n            break\n        lucky_ticket = lucky_ticket[1:] + lucky_ticket[0]\n    return len(lucky_ticket)"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    answ = 0\n    tot = 0\n    for i in range(3):\n        tot += int(stdin[i])\n    for i in range(3, 6):\n        tot += int(stdin[i])\n    if tot == int(stdin[3]) + int(stdin[4]) + int(stdin[5]):\n        answ = 0\n    else:\n        for i in range(3):\n            tot -= int(stdin[i])\n        for i in range(3, 6):\n            tot -= int(stdin[i])\n        answ = min(3, tot)\n    return str(answ)\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    return the minimum number of replacements required to make a lucky ticket\n    \"\"\"\n    stdin_list = stdin.split(' ')\n    list_stdin = list(map(int, stdin_list[0]))\n    if sum(list_stdin[:3]) == sum(list_stdin[3:]):\n        return 0\n    if sum(list_stdin[:3]) == sum(list_stdin[-3:]):\n        return 0\n    return len(stdin)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    ticket = stdin\n    ticket = ticket.replace(\"0\", \"\")\n    nums = []\n    for i in ticket:\n        nums.append(i)\n    nums_int = int(''.join(nums))\n    if len(ticket) == 3:\n        return 0\n    elif len(ticket) == 6:\n        if nums_int == sum(nums):\n            return 0\n        else:\n            return len(ticket) - 3\n    else:\n        return len(ticket) - 2\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    l = list(stdin)\n    for i in range(len(l)):\n        if i < len(l) - 3:\n            l[i] = l[i] + l[i+1] + l[i+2] + l[i+3]\n    print(len(l))"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    ticket = stdin\n    while len(ticket) < 10:\n        ticket += '0'\n    return ticket\n"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    digit_count = 0\n    first_3_sum = 0\n    last_3_sum = 0\n    for i in range(0, len(stdin) - 2):\n        first_3_sum = first_3_sum + int(stdin[i])\n        if i == 1 or i == 2 or i == 3:\n            digit_count = digit_count + 1\n    digit_count = digit_count + 1\n    for i in range(len(stdin) - 3, len(stdin)):\n        last_3_sum = last_3_sum + int(stdin[i])\n    if first_3_sum == last_3_sum:\n        return str(digit_count)\n    else:\n        return str(digit_count + 1)\nsolution(\"123456\")"
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    ticket = stdin\n    minimum = 0\n    for i in range(1, 4):\n        ticket = ticket.replace(ticket[0], '0')\n    for i in range(3, 6):\n        ticket = ticket.replace(ticket[-1], '0')\n    if int(ticket) == 0:\n        return '0'\n    ticket = ticket.replace('0', '0', 1)\n    for i in range(2):\n        for j in range(3):\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket = ticket.replace('0', '0', 1)\n            ticket ="
    },
    {
        "number": 29,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    l = len(stdin)\n    if l < 6:\n        raise Exception(\"You must provide at least 6 digits\")\n    elif l == 6:\n        return \"0\"\n    elif l == 7:\n        return \"1\"\n    elif l == 8:\n        return \"2\"\n    elif l == 9:\n        return \"3\"\n    else:\n        a = int(stdin[0:3])\n        b = int(stdin[3:6])\n        c = int(stdin[6:9])\n        d = int(stdin[9:12])\n        e = int(stdin[12:15])\n        f = int(stdin[15:18])\n        g = int(stdin[18:21])\n        h = int(stdin[21:24])\n        i = int(stdin[24:27])\n        j = int(stdin[27:30])\n        k = int(stdin[30:33])\n        l = int(stdin[33:36])\n        m = int(stdin[36:39])\n        n = int(stdin[39:42])\n        o = int(stdin[42:45])\n        p = int(stdin[45:48])\n        q = int(stdin[48:51])\n        r = int(stdin[51:54])\n        s = int(stdin[54:57])\n        t = int(stdin[57:60])\n        u = int(stdin[60:63])\n        v = int(stdin[63:66])\n        w = int(stdin[66:69])\n        x = int(stdin[69:72])\n        y = int(stdin[72:75])\n        z = int(stdin[75:78])\n        result = 0\n        if (a + b + c == d) or (e + f + g == h) or (i + j + k == l) or (m + n + o == p) or (p + q + r == s) or (q + s + t == u) or (r + s + v == w) or (s + t + u == x) or (t + u + v == y) or (u + v + w == z):\n            result = 1\n        if result!= 0:\n            return result\n        else:\n            return max(a, b, c) - min(a, b, c) + 1"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    _, m, x = stdin.split()\n    return str(min(x // int(m), int(m) - 1) - 1)\n\nsolution(input())"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    m, x = map(int, stdin.split())\n    if m == 1:\n        return str(1)\n    fact = 1\n    for i in range(2, m + 1):\n        fact *= i\n    gcd = 1\n    for i in range(1, m + 1):\n        gcd = gcd_mod(x, i)\n    if gcd == 1:\n        return str(m - x + 1)\n    else:\n        return str(fact // gcd)\n\n\ndef"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    m, x = map(int, stdin.split())\n    return str(math.gcd(x, m))\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('5 2')\n    '2'\n    >>> solution('10 6')\n    '3'\n    >>> solution('1 1')\n    '1'\n    >>> solution('5 3')\n    '3'\n    >>> solution('1 2')\n    '1'\n    >>> solution('5 4')\n    '1'\n    >>> solution('10 2')\n    '3'\n    >>> solution('10 3')\n    '2'\n    '''\n    m, x = map(int, stdin.split())\n    cnt = 0\n    for i in range(m):\n        for j in range(i + 1, m):\n            if gcd(i + 1, j + 1) == 1:\n                cnt += 1\n    print(cnt + (x - 1) // m)\n    return ''\n\ndef"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    m, x = map(int, stdin.split())\n    x_ = 1\n    if (x < x_ or x > m):\n        return str(0)\n    for i in range(1, m):\n        x_ = (x_ * i) % m\n    if (x % x_ == 0):\n        return str(x_)\n    else:\n        return str(x_ - 1)\n\n\nprint(solution(input()))"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    m, x = [int(x) for x in stdin.split()]\n    \n    if x == 0:\n        return m\n    \n    # x = (i * x + m) % m\n    # print(i, x, m, (i * x + m) % m)\n    for i in range(1, m):\n        if (i * x + m) % m == 1:\n            return i\n\ndef"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n,m,x = map(int, stdin.split())\n    if m > 10**14 or n > 10**14:\n        raise OverflowError\n    #print(n,m,x)\n    return str(n * x % m)"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(a, b):\n        if b == 0:\n            return a\n        return gcd(b, a % b)\n    n, m = list(map(int, stdin.split()))\n    x = int(input())\n    if x == 0:\n        print(0)\n        return\n    if gcd(x, m)!= 1:\n        print(0)\n        return\n    count = 0\n    for i in range(n):\n        if (x * i) % m == 1:\n            count += 1\n    print(count)\n    return\n"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    m, x = map(int, stdin.split())\n    return str(x) if (x*x)%m==1 else str(1 + (x-1)//m)"
    },
    {
        "number": 30,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    m, x = map(int, stdin.split())\n    \n    def gcd(x, m):\n        if x == 0:\n            return 1\n        if x == 1:\n            return m\n        \n        if x % m == 0:\n            return m\n        return gcd(m, x % m)\n    \n    print(gcd(x, m))\n    return\n\nsolution(input())\n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    p1 = (2 ** n) * (1 - 0.5 ** k)\n    p2 = (2 ** n) * 0.5 ** k\n    return f\"{int(p1) % 1000000007} {int(p2) % 1000000007}\"\n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def mod_inverse(n, m):\n        x, y, u, v = 1, 0, 0, 1\n        while m:\n            x, y = y, x - (y * (m // n))\n            u, v = v, u - (v * (m // n))\n            m, n = n % m, m\n        if m == 1:\n            return x % n\n        else:\n            return 0\n    n, k = map(int, stdin.split())\n    if n > 1:\n        gcd = 1\n        for i in range(1, n + 1):\n            if n % i == 0:\n                gcd = i\n        return \"{} {}\".format(mod_inverse(gcd, n), mod_inverse(gcd, n))\n    else:\n        return \"{} {}\".format(1, 1)\n\n\n\nsolution(input())\n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(int(f\"{1}/{int((1 << n) / 2)}\") % 10**6 + 3)"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    return str(tuple(divmod(2 ** n, 2 ** k)))\n\nprint(solution(input()))"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    c = 0\n    for i in range(2 ** a):\n        for j in range(2 ** a):\n            if i!= j and a == b:\n                a_, b_ = i, j\n                if a_ / b_ == (i + 1) / (j + 1):\n                    c += 1\n    return str(a * b) + \" \" + str(a_ + 1) + \" \" + str(b_ + 1)"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    from math import gcd\n    x = gcd(n, k)\n    return str(x) + \" \" + str(x % 10**6 + 3)\n\nsolution(\n    \"2 3\\n\"\n    \"1 2\\n\"\n    \"4 5\\n\"\n    \"1 1\\n\"\n    \"2 4\\n\"\n    \"3 2\\n\"\n    \"2 1\\n\"\n    \"1 3\\n\"\n    \"2 1\\n\"\n    \"1 1\\n\"\n    \"4 6\\n\"\n    \"2 3\\n\"\n    \"5 6\\n\"\n    \"1 1\\n\"\n    \"1 4\\n\"\n    \"2 4\\n\"\n    \"3 3\\n\"\n    \"2 2\\n\"\n    \"3 4\\n\"\n    \"3 4\\n\"\n    \"3 6\\n\"\n    \"4 4\\n\"\n    \"4 6\\n\"\n    \"3 2\\n\"\n    \"4 4\\n\"\n    \"4 4\\n\"\n    \"5 5\\n\"\n    \"3 3\\n\"\n    \"4 4\\n\"\n    \"3 6\\n\"\n    \"5 2\\n\"\n    \"1 2\\n\"\n    \"4 6\\n\"\n    \"1 3\\n\"\n    \"1 4\\n\"\n    \"3 5\\n\"\n    \"2 2\\n\"\n    \"2 2\\n\"\n    \"2 4\\n\"\n    \"4 3\\n\"\n    \"3 3\\n\"\n    \"4 2\\n\"\n    \"2 2\\n\"\n    \"1 4\\n\"\n    \"4 3\\n\"\n    \"3 2\\n\"\n    \"1 2\\n\"\n    \"1 4\\n\"\n    \"4 3\\n\"\n    \"4 6\\n\"\n    \"2 2\\n\"\n    \"2 2\\n\"\n    \"2 4\\n\"\n    \"4 4\\n\"\n    \"4 4\\n\"\n    \"3 6\\n\"\n    \"3 6\\n\"\n    \"3 6\\n\"\n    \"4 6\\n\"\n    \"4 6\\n\"\n    \"4 6\\n\"\n    \"5 5\\n\"\n    \"3 3\\n\"\n    \"2 6\\n\"\n    \"1 3\\n\"\n    \"3 4\\n\"\n    \"2 4\\n\"\n    \"3 6\\n\"\n    \"4 4\\n\"\n    \"2 4\\n\"\n    \"1 3\\n\"\n    \"4 4\\n\"\n    \"3 2\\n\"\n    \"3 4\\n\"\n    \"3 2\\n\"\n    \"4 4\\n\"\n    \"3 4\\n\"\n    \"3 4\\n\"\n    \"5 5\\n\"\n    \"2 2\\n\"\n    \"2 2\\n\"\n    \"2 2\\n\"\n    \"2 2\\n\"\n    \"2 2\\n\"\n    \"2 2\\n\"\n    \"2 2\\n\"\n    \"2 2\\n\"\n    \"2 2\\n\"\n    \"2 2\\n\"\n    \"3 3\\n\"\n    \"1 3\\n\"\n    \"1 3\\n\"\n    \"1 3\\n\"\n    \"2 2\\n\"\n    \"2 2\\n\"\n    \"2 2\\n\"\n    \"2 2\\n\"\n    \"2 2\\n\"\n    \"2 2\\n\"\n    \"2 2\\n\"\n    \"2 2\\n\"\n    \"2 2\\n\"\n    \"2 2\\n\"\n    \"2 2\\n\"\n    \"2 2\\n\"\n    \"2 2\\n\"\n    \"2 2\\n\"\n    \"2 2\\n\"\n    \"2 2\\n\"\n    \"2 2\\n\"\n    \"2 2\\n\"\n    \"2 2\\n\"\n    \"2 2\\n\"\n    \"2 2\\n\"\n    \"2 2\\n\"\n    \"2 2\\n\"\n    \"2 2\\n\"\n    \"2 2\\n\"\n    \"2 2\\n\"\n    \"2 2\\n\"\n    \"2 2\\n\"\n    \"2 2\\n\"\n    \"2 2\\n\"\n    \"2 2\\n\"\n    \"2 2\\n\"\n    \"2 2\\n\"\n    \"2 2\\n\"\n    \"2 2\\n\"\n    \"2 2\\n\"\n    \"2 2\\n\"\n    \"2 2\\n\"\n    \"2 2\\n\"\n    \"2 2\\n\"\n    \"2 2\\n\"\n    \"2 2\\n\"\n    \"2 2\\n\"\n    \"2 2\\n\"\n    \"2 2\\n\"\n    \"2 2\\n\"\n    \"2 2\\n\"\n    \"2 2\\n\"\n    \"2 2\\n\"\n    \"2 2\\n\"\n    \"2 2\\n\"\n    \"2 2\\n\"\n    \"2 2\\n\"\n    \"2 2\\n\"\n    \"2 2\\n\"\n    \"2 2\\n\"\n    \"2 2\\n\"\n    \"2 2\\n\"\n    \"2 2\\n\"\n    \"2 2\\n\"\n    \"2 2\\n\"\n    \"2 2\\n\"\n    \"2 2\\n\"\n    \"2 2\\n\"\n    \"2 2\\n\"\n    \"2 2\\n\"\n    \"2 2\\n\"\n    \"2 2\\n\"\n    \"2 2\\n\"\n    \"2 2\\n\"\n    \"2 2\\n\"\n    \"2 2\\n\"\n    \"2 2\\n\"\n    \"2 2\\n\"\n    \"2 2\\n\"\n    \"2 2\\n\"\n    \"2 2\\n\"\n    \"2 2\\n\"\n    \"2 2\\n\"\n    \"2 2\\n\"\n    \"2 2\\n\"\n    \"2 2\\n\"\n    \"2 2\\n\"\n    \"2 2\\n\"\n    \"2 2\\n\"\n    \"2 2\\n\"\n    \"2 2\\n\"\n    \"2 2\\n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    days = 2**n\n    return f\"{1 if 2**n % gcd(2**n, k) == 0 else 0} {1 if gcd(2**n, k) == 1 else 0}\"\n"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k < 2 or k > (1 << n):\n        raise ValueError(\"Number of people not in range 2^n\")\n    a = 1\n    b = 1\n    while (a, b)!= (1, 1):\n        a, b = gcd(a, b)\n        if a == 1 or b == 1:\n            return str(a % (10 ** 6 + 3)) + \" \" + str(b % (10 ** 6 + 3))\n    return \"0 0\"\n\n\ndef"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    n = 2**n\n    a, b = 1, 1\n    for _ in range(k):\n        a = (a * 2) % n\n        b = (b * 2) % n\n        if a == b:\n            return str(a) +'' + str(b)"
    },
    {
        "number": 31,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    b = 0\n    a = 0\n    while b <= n:\n        a = (a + n) % (2**n)\n        b = (b + n) % (2**n)\n    return str(a) +'' + str(b)\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    ans = 'YES'\n    for i in range(N):\n        t, d = stdin.split()\n        t = int(t)\n        d = d.lower()\n        if d == 'north' and t > 0:\n            ans = 'NO'\n        elif d =='south' and t < 0:\n            ans = 'NO'\n        elif d == 'east' and t > 0:\n            ans = 'NO'\n        elif d == 'west' and t < 0:\n            ans = 'NO'\n    return ans\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n = int(stdin.pop(0))\n\n    for i in range(n):\n        t, d = stdin.pop(0).split()\n        t = int(t)\n        if d == 'North' and n-i-1 > 0:\n            if (n-i-1) % 2 == 0:\n                print('NO')\n            else:\n                print('YES')\n        elif d == 'South' and i < n-1:\n            if (i+1) % 2 == 0:\n                print('NO')\n            else:\n                print('YES')\n        elif d == 'West' and n-i-1 > 0:\n            if (n-i-1) % 2 == 0:\n                print('NO')\n            else:\n                print('YES')\n        elif d == 'East' and i < n-1:\n            if (i+1) % 2 == 0:\n                print('NO')\n            else:\n                print('YES')\n    return\n\n\nsolution('''3\n20000 South\n10 East\n20000 North\n''')\nsolution('''5\n7500 South\n10000 East\n3500 North\n4444 West\n4000 North\n''')\nsolution('''2\n1000 North\n1000 South\n''')\nsolution('''4\n50 South\n50 North\n15000 South\n15000 North\n''')\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n        # Number of parts\n        n = int(stdin)\n        # Parts of journey\n        parts = [stdin]\n        for i in range(1, n):\n            parts.append(input())\n        # Check if conditions are satisfied\n        for part in parts:\n            if \"North\" in part:\n                if \"South\" in part:\n                    if \"West\" in part:\n                        if \"East\" in part:\n                            continue\n                else:\n                    if \"East\" in part:\n                        if \"West\" in part:\n                            continue\n            else:\n                if \"South\" in part:\n                    if \"North\" in part:\n                        if \"East\" in part:\n                            if \"West\" in part:\n                                continue\n            return \"NO\"\n\n        return \"YES\""
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for _ in range(n):\n        t, d = [int(x) for x in stdin.split()]\n        if d == 'North' and t <= 40000:\n            if t >= 20000 and d == 'South':\n                return \"NO\"\n        if d == 'North' and t <= 20000:\n            if t >= 20000 and d == 'South':\n                return \"NO\"\n    return \"YES\"\n\n\nprint(solution(input()))\n\"\"\"\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    for _ in range(n):\n        t, d = list(map(int, stdin.split()))\n        if t >= 20_000 and d == \"North\":\n            return \"NO\"\n        if t <= 20_000 and d == \"South\":\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin.split()[0])\n    for i in range(n):\n        t_i, dir_i = map(int, stdin.split()[i * 2 + 1].split())\n        if t_i > 10 ** 6:\n            print('NO')\n            return 'NO'\n        elif dir_i in ('North', 'South') and t_i % 10 ** 6!= 0:\n            print('NO')\n            return 'NO'\n        elif dir_i in ('West', 'East') and t_i!= 0:\n            print('NO')\n            return 'NO'\n    print('YES')\n    return 'YES'\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split('\\n')[0])\n    lines = stdin.strip().split('\\n')[1:]\n    for line in lines:\n        t, dire = int(line.split()[0]), line.split()[1]\n        if t > 100000:\n            return 'NO'\n        if (dire == 'North' and t > 0) or (dire == 'South' and t < 0):\n            return 'NO'\n        if dire == 'North' and t == 0:\n            return 'YES'\n        if dire == 'South' and t == 0:\n            return 'YES'\nprint(solution('''5\n7500 South\n10000 East\n3500 North\n4444 West\n4000 North'''))\n\nprint(solution('''2\n1000 North\n1000 South'''))\nprint(solution('''4\n50 South\n50 North\n15000 South\n15000 North'''))\n\nprint(solution('''3\n20000 South\n10 East\n20000 North'''))\nprint(solution('''5\n20000 South\n1000 North\n1000000 West\n9000 North\n10000 North'''))\nprint(solution('''5\n10000 South\n10000 North\n1000000 West\n9000 North\n10000 North'''))\nprint(solution('''3\n20000 South\n10 East\n20000 North'''))\nprint(solution('''2\n1000 North\n1000 South'''))"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    moves = []\n    for i in range(n):\n        moves.append(stdin[i].split())\n    # print(moves)\n    # [\"10000 East\", \"3500 North\"]\n    # [\"10000 East\", \"3000 South\"]\n    # [\"20000 South\", \"10000 East\"]\n    # [\"15000 North\", \"10000 North\"]\n\n    for move in moves:\n        if move[0] == \"South\":\n            if move[1] == \"South\":\n                if move[0] == \"North\":\n                    return \"YES\"\n                else:\n                    return \"NO\"\n            else:\n                if move[0] == \"North\":\n                    return \"YES\"\n                else:\n                    return \"NO\"\n        else:\n            if move[1] == \"North\":\n                if move[0] == \"North\":\n                    return \"YES\"\n                else:\n                    return \"NO\"\n            else:\n                if move[0] == \"North\":\n                    return \"YES\"\n                else:\n                    return \"NO\""
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    traj = stdin.split()[1:]\n    for i in range(n):\n        if ((traj[i] == 'North') or (traj[i] == 'South')):\n            if (traj[i] == 'North'):\n                traj[i] = 'South'\n            else:\n                traj[i] = 'North'\n    if (traj[0] == 'North'):\n        if (traj[1] == 'North'):\n            traj[1] = 'South'\n        else:\n            traj[1] = 'North'\n    else:\n        if (traj[1] == 'North'):\n            traj[1] = 'South'\n        else:\n            traj[1] = 'North'\n    for i in range(2, n):\n        if ((traj[i] == 'West') or (traj[i] == 'East')):\n            if (traj[i] == 'West'):\n                traj[i] = 'East'\n            else:\n                traj[i] = 'West'\n    return \"YES\" if (traj[0] == 'North' and traj[1] == 'South' and traj[2] == 'South') else \"NO\"\n"
    },
    {
        "number": 32,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.split(\"\\n\")\n    n = len(s)\n    for i in range(n):\n        s[i] = tuple(map(int, s[i].split()))\n    s.sort(key=lambda x: x[1])\n    for i in range(n):\n        if s[i][1] == s[n - 1][1]:\n            if s[i][0]!= s[n - 1][0]:\n                return \"NO\"\n            else:\n                n -= 1\n                s.pop()\n    if s[n - 1][0] == s[0][0]:\n        return \"NO\"\n    else:\n        return \"YES\""
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a1, b1, a2, b2, L, R = map(int, stdin.split())\n    for k in range(L, R + 1):\n        x = a1 * k + b1\n        y = a2 * k + b2\n        if x == y:\n            return str(k)\n    return str(0)\n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, L, R = map(int, stdin.split())\n    if a > b:\n        a, b = b, a\n    x = 0\n    while R - L > 0:\n        m = (a + b) // 2\n        if L <= m < R:\n            x = m\n            break\n        if L <= m:\n            a = m\n        else:\n            b = m\n    return str(x)\n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(len([i for i in range(int(stdin[2]), int(stdin[3]) + 1, 1) if int(stdin[0]) + i <= stdin[4] and int(stdin[1]) + i <= stdin[5]]))\n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a_1, b_1, a_2, b_2, L, R = map(int, stdin.split())\n    return str(sum(1 for x in range(L, R + 1) if x == a_1 + b_1) +\n               sum(1 for x in range(L, R + 1) if x == a_2 + b_2))"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a_1, b_1, a_2, b_2, L, R = map(int, stdin.split())\n    res = 0\n    # \u4ece\u8fb9\u754cL\u5f00\u59cb\n    while L < R:\n        # \u6c42\u9664\u6cd5\u8303\u56f4\n        if L % a_1 == 0 and R % a_2 == 0:\n            res += 1\n        L += 1\n        R -= 1\n    return str(res)\n\nprint(solution(input()))\n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a1, b1, a2, b2, L, R = map(int, stdin.split())\n    for a in range(L, R+1):\n        # k = a1\n        k = a1\n        for b in range(L, R+1):\n            if a * k + b == a2 * b2:\n                print(a)\n                return"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    _, a_1, b_1, a_2, b_2, L, R = stdin.split()\n    return str(bin(int(R) - int(L))[2:].count('1'))\n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a_1, b_1, a_2, b_2, L, R = stdin.split()\n    a_1 = int(a_1)\n    b_1 = int(b_1)\n    a_2 = int(a_2)\n    b_2 = int(b_2)\n    L = int(L)\n    R = int(R)\n    if (b_1 < a_1):\n        print(0)\n    else:\n        count = 0\n        while (L <= R):\n            k = L + (R - L) / 2\n            c = a_1 + b_1\n            d = a_2 + b_2\n            if (a_1 >= c and a_1 <= d) or (a_2 >= c and a_2 <= d):\n                count += 1\n                L = k + 1\n            elif (a_1 < c) and (a_2 >= d) or (a_2 < c) and (a_1 >= d):\n                R = k - 1\n            else:\n                break\n        print(count)\n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a_1, b_1, a_2, b_2, l, r = map(int, stdin.split())\n    ans = 0\n    while l < r:\n        x = l + (r - l) // 2\n        if a_2 * x + b_2 == a_1 * x + b_1:\n            ans += 1\n            r = x\n        else:\n            l = x + 1\n    print(ans)\n    return ''\n"
    },
    {
        "number": 33,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    _, a_1, b_1, a_2, b_2, _, _ = stdin.split()\n    a_1, b_1, a_2, b_2 = int(a_1), int(b_1), int(a_2), int(b_2)\n    L, R = int(a_1), int(b_2)\n    count = 0\n    for k in range(1, 2*10**9):\n        if L <= k <= R and k*(a_1 + b_1) + k*(a_2 + b_2) == L + R:\n            count += 1\n    return str(count)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    if a >= b:\n        return '1'\n    a = n - a\n    b = n - b\n    if a % b:\n        return '1'\n    return str(max(a // b, 1))\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    max_n = a + b - 1\n    b_piece = a - 1\n    a_piece = b - 1\n    counter = a_piece + b_piece\n    while n:\n        counter += a_piece + b_piece\n        if counter > max_n:\n            break\n        b_piece -= 1\n        a_piece -= 1\n        counter = a_piece + b_piece\n        n -= 1\n    return str(max_n - counter)\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, n = map(int, stdin.split())\n    while (n > 0) and (a > b):\n        a, b, n = map(int, stdin.split())\n    print(n)"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    if a == b:\n        return str(a)\n    else:\n        b = b - 1\n        a = a - 1\n        if b > a:\n            a, b = b, a\n        if a * 2 < b:\n            a, b = b, a\n        d = int(math.ceil(math.log2(b)))\n        a, b = a + 2 ** d - 1, b + 2 ** d - 1\n        if a < b:\n            a, b = b, a\n        return str(max(a, b))\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    if m == 0:\n        return str(k)\n    if m == k:\n        return str(k)\n    if n > k:\n        return str(k)\n    if n < k:\n        return str(k)\n    a = n // k\n    n = n - a * k\n    b = n // k\n    return str(a + b)\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    For each pair of cake-plate combinations, a pair of integers `(c1, p1)`, `(c2, p2)` represents the number of pieces of the first and second cakes respectively. The cake-plate combinations are entered in the format `c1 p1, c2 p2`, and they describe the combination of cakes. Each cake has at least one piece and at most a maximum of a, the total number of pieces of the cake. \n    The cakes are distributed by placing cake pieces in plate pieces in such a way that each plate contains at least x pieces of cake.\n    \n    At most x pieces of cake will be distributed to each plate.\n    \n    Your function should return the minimum number of pieces on the plate that has at least x pieces of cake.\n    \"\"\"\n    # Example input:\n    # 4 7 10\n    # 1 2 3\n    # 2 3\n    \n    # 1 2 3\n    # 2 3\n    \n    # 2 3\n    # 2 3\n    \n    # 4 7 10\n    # 1 2 3\n    # 2 3\n    \n    # 4 7 10\n    # 1 2 3\n    # 2 3\n    \n    # 2 3\n    # 2 3\n    \n    # 4 7 10\n    # 1 2 3\n    # 2 3\n    \n    # 4 7 10\n    # 1 2 3\n    # 2 3\n    \n    # 2 3\n    # 2 3\n    \n    # 4 7 10\n    # 1 2 3\n    # 2 3\n    \n    # 4 7 10\n    # 1 2 3\n    # 2 3\n    \n    # 2 3\n    # 2 3\n    \n    # 4 7 10\n    # 1 2 3\n    # 2 3\n    \n    # 4 7 10\n    # 1 2 3\n    # 2 3\n    \n    # 2 3\n    # 2 3\n    \n    # 4 7 10\n    # 1 2 3\n    # 2 3\n    \n    # 4 7 10\n    # 1 2 3\n    # 2 3\n    \n    # 2 3\n    # 2 3\n    \n    # 4 7 10\n    # 1 2 3\n    # 2 3\n    \n    # 4 7 10\n    # 1 2 3\n    # 2 3\n    \n    # 2 3\n    # 2 3\n    \n    # 4 7 10\n    # 1 2 3\n    # 2 3\n    \n    # 4 7 10\n    # 1 2 3\n    # 2 3\n    \n    # 2 3\n    # 2 3\n    \n    # 4 7 10\n    # 1 2 3\n    # 2 3\n    \n    # 4 7 10\n    # 1 2 3\n    # 2 3\n    \n    # 2 3\n    # 2 3\n    \n    # 4 7 10\n    # 1 2 3\n    # 2 3\n    \n    # 4 7 10\n    # 1 2 3\n    # 2 3\n    \n    # 2 3\n    # 2 3\n    \n    # 4 7 10\n    # 1 2 3\n    # 2 3\n    \n    # 4 7 10\n    # 1 2 3\n    # 2 3\n    \n    # 2 3\n    # 2 3\n    \n    # 4 7 10\n    # 1 2 3\n    # 2 3\n    \n    # 4 7 10\n    # 1 2 3\n    # 2 3\n    \n    # 2 3\n    # 2 3\n    \n    # 4 7 10\n    # 1 2 3\n    # 2 3\n    \n    # 4 7 10\n    # 1 2 3\n    # 2 3\n    \n    # 2 3\n    # 2 3\n    \n    # 4 7 10\n    # 1 2 3\n    # 2 3\n    \n    # 4 7 10\n    # 1 2 3\n    # 2 3\n    \n    # 2 3\n    # 2 3\n    \n    # 4 7 10\n    # 1 2 3\n    # 2 3\n    \n    # 4 7 10\n    # 1 2 3\n    # 2 3\n    \n    # 2 3\n    # 2 3\n    \n    # 4 7 10\n    # 1 2 3\n    # 2 3\n    \n    # 4 7 10\n    # 1 2 3\n    # 2 3\n    \n    # 2 3\n    # 2 3\n    \n    # 4 7 10\n    # 1 2 3\n    # 2 3\n    \n    # 4 7 10\n    # 1 2 3\n    # 2 3\n    \n    # 2 3\n    # 2 3\n    \n    # 4 7 10\n    # 1 2 3\n    # 2 3\n    \n    # 4 7 10\n    # 1 2 3\n    # 2 3\n    \n    # 2 3\n    # 2 3\n    \n    # 4 7 10\n    # 1 2 3\n    # 2 3\n    \n    # 4 7 10\n    # 1 2 3\n    # 2 3\n    \n    # 2 3\n    # 2 3\n    \n    # 4 7 10\n    # 1 2 3\n    # 2 3\n    \n    # 4 7 10\n    # 1 2 3\n    # 2 3\n    \n    # 2 3\n    # 2 3\n    \n    # 4 7 10\n    # 1 2 3\n    # 2 3\n    \n    # 4 7 10\n    # 1 2 3\n    # 2 3\n    \n    # 2 3\n    # 2 3\n    \n    # 4 7 10\n    # 1 2 3\n    # 2 3\n    \n    # 4 7 10\n    # 1 2 3\n    # 2 3\n    \n    # 2 3\n    # 2 3\n    \n    # 4 7 10\n    # 1 2 3\n    # 2 3\n    \n    # 4 7 10\n    # 1 2 3\n    # 2 3\n    \n    # 2 3\n    # 2 3\n    \n    # 4 7 10\n    # 1 2 3\n    # 2 3\n    \n    # 4 7 10\n    # 1 2 3\n    # 2 3\n    \n    # 2 3\n    # 2 3\n    \n    # 4 7 10\n    # 1 2 3\n    # 2 3\n    \n    # 4 7 10\n    # 1 2 3\n    # 2 3\n    \n    # 2 3\n    # 2 3\n    \n    # 4 7 10\n    # 1 2 3\n    # 2 3\n    \n    # 4 7 10\n    # 1 2 3\n    # 2 3\n    \n    # 2 3\n    # 2 3\n    \n    # 4 7 10\n    # 1 2 3\n    # 2 3\n    \n    # 4 7 10\n    # 1 2 3\n    # 2 3\n    \n    # 2 3\n    # 2 3\n    \n    # 4 7 10\n    # 1 2 3\n    # 2 3\n    \n    # 4 7 10\n    # 1 2 3\n    # 2 3\n    \n    # 2 3\n    # 2 3\n    \n    # 4 7 10\n    # 1 2 3\n    # 2 3\n    \n    # 4 7 10\n    # 1 2 3\n    # 2 3\n    \n    "
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n, a, b = stdin[0], int(stdin[1]), int(stdin[2])\n    m = 0\n    for i in range(a + 1, b + 1):\n        if n / i > m:\n            m = n / i\n    return str(int(m))\n\nprint(solution(input()))\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    return str(min(n // a + n // b - n // (a + b), n // b))\n\nprint(solution(input()))\n"
    },
    {
        "number": 34,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    min = 1\n    max = x // 2\n    while max >= min:\n        middle = (max + min) // 2\n        if middle >= x // 2:\n            min = middle + 1\n        else:\n            max = middle - 1\n    return str(min)\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    field = [list(stdin) for _ in range(n)]\n    \n    x_max = m - 1\n    y_max = n - 1\n    for row in field:\n        if row[0]!= 'R':\n            return 'NO'\n        for i, x in enumerate(row):\n            if x!= 'R':\n                x_max = i\n                break\n        for i, y in enumerate(reversed(row)):\n            if y!= 'R':\n                y_max = n - i\n                break\n    if x_max > y_max:\n        return 'NO'\n    else:\n        return 'YES'"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n'''\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    field = stdin.split()\n    b_count = 0\n    r_count = 0\n    g_count = 0\n    for i in range(n):\n        if field[i] == 'R':\n            r_count += 1\n            if r_count >= 2:\n                return 'NO'\n        elif field[i] == 'G':\n            g_count += 1\n            if g_count >= 2:\n                return 'NO'\n        elif field[i] == 'B':\n            b_count += 1\n            if b_count >= 3:\n                return 'NO'\n    if r_count!= 0:\n        if g_count!= 1:\n            return 'NO'\n    if r_count!= 0:\n        if g_count!= 1:\n            return 'NO'\n    if b_count!= 3:\n        return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    [n, m] = list(map(int, stdin.split()))\n    if n * m == 1:\n        return \"NO\"\n    if n % 3!= 0:\n        return \"NO\"\n    if m % 3!= 0:\n        return \"NO\"\n    if n < 3 or m < 3:\n        return \"NO\"\n    first = stdin[0:3]\n    first = list(first)\n    for i in range(0, len(first)):\n        if first[i] == \"R\" or first[i] == \"G\" or first[i] == \"B\":\n            first[i] = 0\n        else:\n            return \"NO\"\n    second = stdin[len(first):n * m]\n    second = list(second)\n    for i in range(0, len(second)):\n        if second[i] == \"R\" or second[i] == \"G\" or second[i] == \"B\":\n            second[i] = 0\n        else:\n            return \"NO\"\n    if (sum(first) + sum(second)) == (n * m - (n + m) + 1):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n\nsolution(input())\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    size_of_field = (int(stdin.split()[0]), int(stdin.split()[1]))\n    matrix = stdin.split()[2:]\n    if check_correct_flag(size_of_field, matrix):\n        return 'YES'\n    else:\n        return 'NO'\n\ndef"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # first_line = stdin.split(\"\\n\")[0].split(\" \")\n    # n, m = int(first_line[0]), int(first_line[1])\n    n, m = map(int, stdin.split(\"\\n\"))\n    flag = stdin.split(\"\\n\")[1:]\n    # flag = stdin.split()\n    # flag = list(map(str, flag))\n    # print(n, m)\n    # print(flag)\n    colors_count = {\"R\": 0, \"G\": 0, \"B\": 0}\n    for line in flag:\n        line = line.split(\" \")\n        colors_count[line[1]] += 1\n    # print(colors_count)\n\n    if colors_count[\"R\"] == colors_count[\"G\"] == colors_count[\"B\"]:\n        # RRRR\n        if len(flag) == m:\n            # print(\"YES\")\n            return \"YES\"\n    elif colors_count[\"R\"] == colors_count[\"G\"] or colors_count[\"R\"] == colors_count[\"B\"]:\n        # RRRG or RRRB\n        if len(flag) == m:\n            # print(\"YES\")\n            return \"YES\"\n    elif colors_count[\"G\"] == colors_count[\"B\"]:\n        # RRRRG or RRRRB\n        if len(flag) == m:\n            # print(\"YES\")\n            return \"YES\"\n    else:\n        # RRGB or RRGB\n        if len(flag) == m:\n            # print(\"YES\")\n            return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n = int(stdin[0].split()[0])\n    m = int(stdin[0].split()[1])\n    field = stdin[1]\n\n    if n*m!= len(field):\n        return \"NO\"\n\n    flag = True\n    for i in range(n):\n        for j in range(m):\n            if field[i*m + j] not in [\"R\", \"G\", \"B\"]:\n                flag = False\n    if flag:\n        return \"YES\"\n    else:\n        return \"NO\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    field = []\n    for i in range(N):\n        row = stdin.split()[i]\n        field.append(row)\n    red_ranges = []\n    green_ranges = []\n    blue_ranges = []\n    for i in range(len(field)):\n        if field[i][0] == 'R' and field[i][-1] == 'R':\n            red_ranges.append(i)\n        if field[i][0] == 'R' and field[i][-1] == 'G':\n            green_ranges.append(i)\n        if field[i][0] == 'R' and field[i][-1] == 'B':\n            blue_ranges.append(i)\n    if len(red_ranges)!= 3 or len(green_ranges)!= 3 or len(blue_ranges)!= 3:\n        return 'NO'\n    else:\n        return 'YES'\n\n\nprint(solution(input()))"
    },
    {
        "number": 35,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    flag = [''.join(input()) for _ in range(n)]\n\n    def is_correct_field(flag: str) -> bool:\n        colors = {\n            'R': 0,\n            'G': 0,\n            'B': 0,\n        }\n        for row in flag:\n            if len(set(row))!= 1:\n                return False\n            for c in row:\n                colors[c] += 1\n        return sum([c for c in colors.values() if c!= 1]) >= 2\n\n    return \"YES\" if is_correct_field(flag) else \"NO\"\n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    stdin = stdin.splitlines()\n    return '{} {}'.format(*search_tiles(int(stdin[0])))\n\ndef"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    moves = ((0, -1), (-1, 0), (0, 1), (1, 0))\n    x = 0\n    y = 0\n    for _ in range(n):\n        x += moves[(y + 0) % 4][0]\n        y += moves[(y + 0) % 4][1]\n    return str(x) + \" \" + str(y)\n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    x = 0\n    y = 0\n    for i in range(N):\n        x, y = x + 2 * i, y + 2 * i\n    return str(x) + \" \" + str(y)"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin.split()[0])\n    y = int(stdin.split()[1])\n    for i in range(x):\n        print(\"-2\", i)\n    for i in range(y):\n        print(i, \"0\")\n    return \"\"\nsolution()\n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your code should return a single string as an answer.\n    The string will be the coordinates of the point Ayrat started at point (0, 0).\n    \"\"\"\n    n = int(stdin)\n    x = 0\n    y = 0\n    \n    for i in range(n):\n        if i % 2 == 0:\n            x = (x + 2) % 4\n        else:\n            y = (y + 2) % 4\n        \n        print(x, y)\n    \n    return f'{x} {y}'"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = y = 0\n    for i in range(n):\n        x, y = x + 6*(i+1) - 2*(i+1), y + 3*(i+1) - 3*(i+1)\n    print(x, y)\n    return \"\"\n    \n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = y = 0\n    moves = 0\n    while moves!= n:\n        moves += 1\n        x = x + 1 if x < 6 else 0\n        y = y + 1 if y < 6 else 0\n        print(x, y)\n    return\n\nsolution()\n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    answer = ''\n    stdin = stdin.splitlines()\n    n = int(stdin[0])\n    for _ in range(n):\n        answer += f'{len(set(map(int, stdin[1])))}\\n'\n        stdin[1] = stdin[1].replace('.', '0')\n        stdin[1] = stdin[1].replace('O', '1')\n        stdin[1] = stdin[1].replace('X', '2')\n        stdin[1] = stdin[1].replace('+', '3')\n        stdin[1] = stdin[1].replace('^', '4')\n        stdin[1] = stdin[1].replace('<', '5')\n        stdin[1] = stdin[1].replace('>', '6')\n        stdin[1] = stdin[1].replace('|', '7')\n        stdin[1] = stdin[1].replace('(', '8')\n        stdin[1] = stdin[1].replace(')', '9')\n        stdin[1] = stdin[1].replace('_', '0')\n        stdin[1] = stdin[1].replace('O', '1')\n        stdin[1] = stdin[1].replace('X', '2')\n        stdin[1] = stdin[1].replace('+', '3')\n        stdin[1] = stdin[1].replace('^', '4')\n        stdin[1] = stdin[1].replace('<', '5')\n        stdin[1] = stdin[1].replace('>', '6')\n        stdin[1] = stdin[1].replace('|', '7')\n        stdin[1] = stdin[1].replace('(', '8')\n        stdin[1] = stdin[1].replace(')', '9')\n        stdin[1] = stdin[1].replace('_', '0')\n        stdin[1] = stdin[1].replace('O', '1')\n        stdin[1] = stdin[1].replace('X', '2')\n        stdin[1] = stdin[1].replace('+', '3')\n        stdin[1] = stdin[1].replace('^', '4')\n        stdin[1] = stdin[1].replace('<', '5')\n        stdin[1] = stdin[1].replace('>', '6')\n        stdin[1] = stdin[1].replace('|', '7')\n        stdin[1] = stdin[1].replace('(', '8')\n        stdin[1] = stdin[1].replace(')', '9')\n        stdin[1] = stdin[1].replace('_', '0')\n        stdin[1] = stdin[1].replace('O', '1')\n        stdin[1] = stdin[1].replace('X', '2')\n        stdin[1] = stdin[1].replace('+', '3')\n        stdin[1] = stdin[1].replace('^', '4')\n        stdin[1] = stdin[1].replace('<', '5')\n        stdin[1] = stdin[1].replace('>', '6')\n        stdin[1] = stdin[1].replace('|', '7')\n        stdin[1] = stdin[1].replace('(', '8')\n        stdin[1] = stdin[1].replace(')', '9')\n        stdin[1] = stdin[1].replace('_', '0')\n        stdin[1] = stdin[1].replace('O', '1')\n        stdin[1] = stdin[1].replace('X', '2')\n        stdin[1] = stdin[1].replace('+', '3')\n        stdin[1] = stdin[1].replace('^', '4')\n        stdin[1] = stdin[1].replace('<', '5')\n        stdin[1] = stdin[1].replace('>', '6')\n        stdin[1] = stdin[1].replace('|', '7')\n        stdin[1] = stdin[1].replace('(', '8')\n        stdin[1] = stdin[1].replace(')', '9')\n        stdin[1] = stdin[1].replace('_', '0')\n    return answer\n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x = 0\n    y = 0\n    move_count = 0\n\n    for stdin_line in stdin.splitlines():\n        move_count += 1\n\n        if move_count % 2 == 0:\n            if stdin_line == \"R\":\n                x += 1\n            else:\n                x -= 1\n        else:\n            if stdin_line == \"U\":\n                y += 1\n            else:\n                y -= 1\n\n    return str(x) + \" \" + str(y)\n"
    },
    {
        "number": 36,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    time complexity: O(n)\n    space complexity: O(1)\n    \"\"\"\n    n = int(stdin.strip())\n    print(\"%d %d\" % (0, 0))\n    for i in range(n - 1):\n        print(\"%d %d\" % (i + 1, i + 2))\n    return"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a * b > c:\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if (a - b + c) % (a + b) == 0:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if c * 2 >= a + b:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = list(map(int, stdin.split()))\n    if (a * b + c) % (a + c) == 0:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return \"Yes\" if a + b <= c else \"No\"\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.strip().split())\n    if a * c == b:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    dante, ivory, shield = stdin.split()\n    return \"Yes\" if int(dante) * int(shield) == int(ivory) + int(ivory) + int(shield) - int(ivory) else \"No\"\n"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return \"Yes\" if c % (a+b) == 0 else \"No\""
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if b >= a and c >= a:\n        if (a - c) % (b - c) == 0:\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        return 'No'"
    },
    {
        "number": 37,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a,b,c = [int(i) for i in stdin.split()]\n    print(dante_reaction(a,b,c))\n\ndef"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, L = map(int, stdin.strip().split())\n    barriers = list(map(int, stdin.strip().split()))\n    barriers_dict = {}\n    for i in range(n):\n        if i not in barriers_dict.keys():\n            barriers_dict[i] = [i]\n        else:\n            barriers_dict[i].append(i)\n    Kefa_start = list(map(int, input().strip().split()))\n    Sasha_start = list(map(int, input().strip().split()))\n\n    for i in range(n):\n        if Kefa_start[i] not in barriers_dict.keys():\n            continue\n        elif Sasha_start[i] not in barriers_dict.keys():\n            continue\n        else:\n            if Kefa_start[i] == Sasha_start[i]:\n                continue\n            elif Kefa_start[i] > Sasha_start[i]:\n                if Kefa_start[i] < L - 1:\n                    continue\n                else:\n                    Kefa_start[i] = L - 1\n            else:\n                if Sasha_start[i] < L - 1:\n                    continue\n                else:\n                    Sasha_start[i] = L - 1\n            for j in range(i+1, n):\n                if Kefa_start[i] == Kefa_start[j] or Sasha_start[i] == Sasha_start[j]:\n                    continue\n                else:\n                    if Kefa_start[i] == L - 1 and Kefa_start[j] == 0:\n                        if Kefa_start[i] > Kefa_start[j]:\n                            Kefa_start[i] = Kefa_start[j]\n                    if Sasha_start[i] == L - 1 and Sasha_start[j] == 0:\n                        if Sasha_start[i] > Sasha_start[j]:\n                            Sasha_start[i] = Sasha_start[j]\n    if not all(i == 0 for i in Kefa_start):\n        return 'NO'\n    if not all(i == 0 for i in Sasha_start):\n        return 'NO'\n    if all(i in range(L) for i in Kefa_start):\n        return 'YES'\n    else:\n        return 'NO'\n\nsolution(stdin)\n"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, L = map(int, stdin.split())\n    bars = list(map(int, stdin.split()))\n\n    # bars = list(map(int, stdin.split()))\n    # print(bars)\n\n    # print(bars)\n\n    # n = 3\n    # L = 5\n    # bars = [2, 4, 6]\n\n    n = 3\n    L = 4\n    bars = [1, 5, 7]\n\n    # n = 5\n    # L = 9\n    # bars = [0, 1, 3, 4, 5, 7]\n\n    # n = 5\n    # L = 8\n    # bars = [0, 1, 3, 4, 5, 7]\n\n    # n = 5\n    # L = 8\n    # bars = [2, 3, 4, 5, 6]\n\n    # n = 5\n    # L = 8\n    # bars = [2, 3, 4, 5, 6]\n\n    # n = 4\n    # L = 4\n    # bars = [1, 2, 3, 4]\n\n    # n = 4\n    # L = 3\n    # bars = [1, 2, 3]\n\n    # n = 2\n    # L = 3\n    # bars = [1, 2]\n\n    # n = 1\n    # L = 3\n    # bars = [1]\n\n    # n = 1\n    # L = 2\n    # bars = [1]\n\n    bars.sort()\n    # print(bars)\n\n    # for i in range(len(bars)):\n    #     # print(bars[i], bars[i+1])\n    #     if bars[i] + 1 == bars[i+1]:\n    #         print(f\"Yes {bars[i]}\")\n\n    for i in range(len(bars)):\n        # print(bars[i], bars[i+1])\n        if bars[i] == bars[i+1]:\n            print(f\"Yes {bars[i]}\")\n\n\n    return \"NO\"\n"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, l = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n\n    a.sort()\n    b.sort()\n    if a == b:\n        return 'YES'\n    else:\n        return 'NO'\n\ndef"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n, L = int(stdin[0]), int(stdin[1])\n    barriers = list(map(int, stdin[2]))\n    start_of_sasha = list(map(int, stdin[3]))\n    start_of_kefa = list(map(int, stdin[4]))\n    return \"YES\" if two_tracks(barriers, start_of_kefa, start_of_sasha) else \"NO\"\n\n\ndef"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, L = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n    y = list(map(int, stdin.split()))\n    x.sort()\n    y.sort()\n    if (len(x)!= len(y)):\n        return 'NO'\n    for i in range(len(x)):\n        if (x[i] + 1!= y[i]):\n            return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, L = map(int, stdin.split())\n    Kefa_dist = list(map(int, stdin.split()))\n    Sasha_dist = list(map(int, stdin.split()))\n    if (L!= len(set(Kefa_dist))):\n        return 'NO'\n    elif (L!= len(set(Sasha_dist))):\n        return 'NO'\n    else:\n        for Kefa in Kefa_dist:\n            if (Kefa >= L):\n                return 'NO'\n        for Sasha in Sasha_dist:\n            if (Sasha >= L):\n                return 'NO'\n        for Kefa in Kefa_dist:\n            for Sasha in Sasha_dist:\n                if ((Kefa + Kefa_dist.index(Kefa)) == (Sasha + Sasha_dist.index(Sasha))):\n                    return 'YES'\n        return 'NO'\n\n\nsolution(\"3 8\")\nsolution(\"4 9\")\nsolution(\"2 4\")\n\n'''\nfrom collections import Counter\n\ndef"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\n\u042d\u0442\u043e \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u043f\u043e \u0442\u0435\u0441\u0442\u0430\u043c \u0432 \u0437\u0430\u0434\u0430\u043d\u0438\u0438. \u041f\u0440\u0438 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0438 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0434\u043b\u044f \u0441\u0430\u043c\u043e\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0441\u0432\u043e\u0439\u0441\u0442\u0432 \u043a\u043b\u0430\u0441\u0441\u0430 \u043f\u043e\u0434 \u043e\u0441\u043d\u043e\u0432\u043e\u0439 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0430 \u0432 \u0432\u0438\u0434\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 solution(stdin: str) -> str.\n\n\u041a\u0440\u0430\u0439\u043d\u0438\u0439 \u0431\u043b\u043e\u043a \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0434\u043e\u043b\u0436\u0435\u043d \u043d\u0430\u0447\u0430\u0442\u044c \u0441 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0439. \u041e\u043d\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0442\u044c \u043e\u0434\u043d\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u043d\u0435 \u0440\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u044f \u043d\u0438\u0447\u0435\u0433\u043e, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b. \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u043f\u0440\u0438 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u043f\u043e \u0442\u0435\u0441\u0442\u0430\u043c, \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \"YES\" (\u0441\u043c. \u0432\u044b\u0448\u0435) \u0438\u043b\u0438 \"NO\" (\u0441\u043c. \u0432\u044b\u0448\u0435).\n\n\u0424\u0443\u043d\u043a\u0446\u0438\u044f solution \u0434\u043e\u043b\u0436\u043d\u0430 \u0441\u043e\u0441\u0442\u043e\u044f\u0442\u044c \u0438\u0437 \u043e\u0434\u043d\u043e\u0433\u043e \u0438\u043b\u0438 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0432\u043b\u043e\u0436\u0435\u043d\u0438\u0439 \u0441 \u0440\u0430\u0437\u043d\u044b\u043c\u0438 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f\u043c\u0438 \u0438 \u0438\u043c\u0435\u043d\u0430\u043c\u0438 \u0432\u043b\u043e\u0436\u0435\u043d\u0438\u0439. \u0414\u043b\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0434\u0430\u043d\u043e \u043e\u0434\u043d\u043e \u0432\u043b\u043e\u0436\u0435\u043d\u0438\u0435:\n\ndef"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, l = map(int, stdin.strip().split())\n    a, b = list(map(int, stdin.strip().split()))\n    # if a > b:\n    #     a, b = b, a\n    # if a == b:\n    #     print('YES')\n    # else:\n    #     print('NO')\n    return 'YES' if a == b else 'NO'\n    "
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, L = map(int, stdin.split())\n    Kefa_start = list(map(int, stdin.split()))\n    Sasha_start = list(map(int, stdin.split()))\n    L = L - 1\n    if Kefa_start.count(0) == 0 and Sasha_start.count(0) == 0 and len(set(Kefa_start + Sasha_start)) == N:\n        if sorted(Kefa_start + Sasha_start) == list(range(L)):\n            return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 38,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''Returns the solution for the problem.'''\n    n, L = map(int, stdin.split())\n    barriers = list(map(int, stdin.split()))\n    barriers.sort()\n    Kefa_start_distances = list(map(int, stdin.split()))\n    Sasha_start_distances = list(map(int, stdin.split()))\n    # for i in range(n):\n    #     if Kefa_start_distances[i]!= Sasha_start_distances[i]:\n    #         return \"NO\"\n    #     else:\n    #         return \"YES\"\n    # return \"NO\"\n    return \"YES\" if sorted(Kefa_start_distances) == sorted(Sasha_start_distances) else \"NO\""
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_str = stdin\n    for i in range(len(input_str)):\n        if is_palindrome(input_str, i, i + 1) is True:\n            continue\n        else:\n            return str(len(get_longest_palindrome_substring(input_str, i, i + 1)))\n\n\ndef"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = len(s)\n    dp = [[False] * (n) for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = True\n    for i in range(n - 1, -1, -1):\n        for j in range(i + 1, n):\n            if s[i] == s[j] and (j - i < 3 or dp[i + 1][j - 1]):\n                dp[i][j] = True\n    res = 0\n    for i in range(n):\n        for j in range(i, n):\n            if not dp[i][j]:\n                if res < (j - i + 1):\n                    res = j - i + 1\n    return str(res)\n"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    s_len = len(s)\n\n    max_sub_len = 0\n    max_sub = ''\n\n    for i in range(s_len):\n        for j in range(i, s_len):\n            sub = s[i:j + 1]\n            if sub[::-1] == sub:\n                max_sub_len = max(max_sub_len, len(sub))\n                max_sub = sub\n\n    return max_sub_len\n"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.lower()\n    longest = ''\n    for i in range(1, len(stdin)+1):\n        for j in range(len(stdin) - i + 1):\n            word = stdin[j:j+i]\n            if isPalindrome(word) and len(word) > len(longest):\n                longest = word\n    return longest\n\ndef"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    for i in range(len(s)):\n        if all(s[k] == s[~k] for k in range(i, len(s))):\n            return str(len(s) - i)\n    return str(0)\n"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    longest_palindrome = 0\n    longest_palindrome_palindrome = \"\"\n    for i in range(len(stdin)):\n        if stdin[i] == stdin[len(stdin) - 1 - i]:\n            continue\n        j = 1\n        while j < len(stdin) and i - j > -1 and i + j < len(stdin) and stdin[i] == stdin[i - j]:\n            j += 1\n        substring = stdin[i - j + 1:i + j]\n        if not isPalindrome(substring):\n            if len(substring) > longest_palindrome:\n                longest_palindrome = len(substring)\n                longest_palindrome_palindrome = substring\n        else:\n            if len(substring) > longest_palindrome:\n                longest_palindrome = len(substring)\n                longest_palindrome_palindrome = substring\n    return longest_palindrome_palindrome\n\ndef"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    str = stdin\n    palindromes = set()\n    longestPalindrome = 0\n    for i in range(len(str)):\n        for j in range(len(str)):\n            if str[i]!= str[j] and str[i:j+1] == str[i:j+1][::-1]:\n                palindromes.add(str[i:j+1])\n                if len(str[i:j+1]) > longestPalindrome:\n                    longestPalindrome = len(str[i:j+1])\n    return longestPalindrome\n"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_str = stdin\n    n = len(input_str)\n    max_len = 0\n    for i in range(n):\n        for j in range(n):\n            tmp_str = input_str[i:j + 1]\n            if tmp_str == tmp_str[::-1]:\n                max_len = max(max_len, len(tmp_str))\n    return max_len\n"
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the longest non-palindrome substring of stdin.\n    >>> solution('mew')\n    3\n    >>> solution('wuffuw')\n    5\n    >>> solution('qqqqqqqq')\n    0\n    \"\"\"\n    # max_sub = 1  # length of longest palindrome\n    # for substring in range(len(stdin)):\n    #     for i in range(len(stdin)-1):\n    #         sub_start, sub_end = substring+1, len(stdin) - 1\n    #         while sub_start <= sub_end:\n    #             if is_palindrome(stdin[sub_start:sub_end]):\n    #                 if len(stdin[sub_start:sub_end]) > max_sub:\n    #                     max_sub = len(stdin[sub_start:sub_end])\n    #             sub_start += 1\n    #             sub_end -= 1\n    # return max_sub\n    #\n    # max_sub = 1  # length of longest palindrome\n    # for substring in range(len(stdin)):\n    #     for i in range(len(stdin)-1):\n    #         sub_start, sub_end = substring+1, len(stdin)-1\n    #         while sub_start <= sub_end:\n    #             if is_palindrome(stdin[sub_start:sub_end]):\n    #                 if len(stdin[sub_start:sub_end]) > max_sub:\n    #                     max_sub = len(stdin[sub_start:sub_end])\n    #             sub_start += 1\n    #             sub_end -= 1\n    # return max_sub\n    #\n    # max_sub = 1  # length of longest palindrome\n    # for substring in range(len(stdin)):\n    #     for i in range(len(stdin)-1):\n    #         sub_start, sub_end = substring+1, len(stdin)-1\n    #         while sub_start <= sub_end:\n    #             if is_palindrome(stdin[sub_start:sub_end]):\n    #                 if len(stdin[sub_start:sub_end]) > max_sub:\n    #                     max_sub = len(stdin[sub_start:sub_end])\n    #             sub_start += 1\n    #             sub_end -= 1\n    # return max_sub\n    #\n    # max_sub = 1  # length of longest palindrome\n    # for substring in range(len(stdin)):\n    #     for i in range(len(stdin)-1):\n    #         sub_start, sub_end = substring+1, len(stdin)-1\n    #         while sub_start <= sub_end:\n    #             if is_palindrome(stdin[sub_start:sub_end]):\n    #                 if len(stdin[sub_start:sub_end]) > max_sub:\n    #                     max_sub = len(stdin[sub_start:sub_end])\n    #             sub_start += 1\n    #             sub_end -= 1\n    # return max_sub\n    #\n    # max_sub = 1  # length of longest palindrome\n    # for substring in range(len(stdin)):\n    #     for i in range(len(stdin)-1):\n    #         sub_start, sub_end = substring+1, len(stdin)-1\n    #         while sub_start <= sub_end:\n    #             if is_palindrome(stdin[sub_start:sub_end]):\n    #                 if len(stdin[sub_start:sub_end]) > max_sub:\n    #                     max_sub = len(stdin[sub_start:sub_end])\n    #             sub_start += 1\n    #             sub_end -= 1\n    # return max_sub\n    #\n    # max_sub = 1  # length of longest palindrome\n    # for substring in range(len(stdin)):\n    #     for i in range(len(stdin)-1):\n    #         sub_start, sub_end = substring+1, len(stdin)-1\n    #         while sub_start <= sub_end:\n    #             if is_palindrome(stdin[sub_start:sub_end]):\n    #                 if len(stdin[sub_start:sub_end]) > max_sub:\n    #                     max_sub = len(stdin[sub_start:sub_end])\n    #             sub_start += 1\n    #             sub_end -= 1\n    # return max_sub\n    #\n    # max_sub = 1  # length of longest palindrome\n    # for substring in range(len(stdin)):\n    #     for i in range(len(stdin)-1):\n    #         sub_start, sub_end = substring+1, len(stdin)-1\n    #         while sub_start <= sub_end:\n    #             if is_palindrome(stdin[sub_start:sub_end]):\n    #                 if len(stdin[sub_start:sub_end]) > max_sub:\n    #                     max_sub = len(stdin[sub_start:sub_end])\n    #             sub_start += 1\n    #             sub_end -= 1\n    # return max_sub\n    #\n    # max_sub = 1  # length of longest palindrome\n    # for substring in range(len(stdin)):\n    #     for i in range(len(stdin)-1):\n    #         sub_start, sub_end = substring+1, len(stdin)-1\n    #         while sub_start <= sub_end:\n    #             if is_palindrome(stdin[sub_start:sub_end]):\n    #                 if len(stdin[sub_start:sub_end]) > max_sub:\n    #                     max_sub = len(stdin[sub_start:sub_end])\n    #             sub_start += 1\n    #             sub_end -= 1\n    # return max_sub\n    #\n    # max_sub = 1  "
    },
    {
        "number": 39,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    length = 0\n    longest = 0\n    for i in range(1,len(s)):\n        substring = s[:i]\n        if not isPalindrome(substring):\n            longest = max(longest, i - length)\n            length = i\n    if length:\n        longest = max(longest, length)\n    return str(longest)\n\ndef"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ratings = []\n    for i in range(n):\n        ratings.append([int(x) for x in stdin.split()[i*2:i*2+2]])\n    \n    if(ratings[0][0]==ratings[1][0]):\n        return \"rated\"\n    elif(ratings[0][0]>ratings[1][0] and ratings[0][1]>ratings[1][1]):\n        return \"maybe\"\n    elif(ratings[0][0]<ratings[1][0] and ratings[0][1]>ratings[1][1]):\n        return \"unrated\"\n    else:\n        return \"maybe\"\n\nstdin = \"\"\"3\n1300 1300\n1200 1200\n1400 1400\n\"\"\"\n\nprint(solution(stdin))\n\nstdin = \"\"\"2\n1300 1300\n1200 1200\n\"\"\"\n\nprint(solution(stdin))\n\nstdin = \"\"\"5\n3123 3123\n2777 2777\n2246 2246\n2246 2246\n1699 1699\n\"\"\"\n\nprint(solution(stdin))\n\nstdin = \"\"\"4\n1500 1500\n1300 1300\n1200 1200\n1400 1400\n\"\"\"\n\nprint(solution(stdin))"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ratings = []\n    for _ in range(n):\n        ratings.append(list(map(int, stdin.split())))\n    if len(set(list(map(lambda x: x[0], ratings)))) > 1 and len(set(list(map(lambda x: x[1], ratings)))) > 1:\n        return \"rated\"\n    if len(set(list(map(lambda x: x[0], ratings)))) == 1 and len(set(list(map(lambda x: x[1], ratings)))) == 1:\n        return \"unrated\"\n    if len(set(list(map(lambda x: x[0], ratings)))) == 1 and len(set(list(map(lambda x: x[1], ratings)))) == 1:\n        return \"maybe\"\n    else:\n        return \"unrated\""
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    inp = []\n    for i in range(int(stdin)):\n        inp.append(list(map(int, stdin.split()[i])))\n    inp.sort(key=lambda x: x[0])\n    # print(inp)\n    if inp[0][0]!= inp[1][0] and inp[0][1] == inp[1][1]:\n        return \"unrated\"\n    elif inp[0][0]!= inp[1][0] and inp[0][1] < inp[1][1]:\n        return \"rated\"\n    else:\n        return \"maybe\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    lst = []\n    for i in range(1, n + 1):\n        lst.append(list(map(int, stdin.split(\"\\n\")[i - 1].split())))\n    \n    res = \"\"\n    for i in range(1, n + 1):\n        if lst[i - 1][0] == lst[i - 1][1]:\n            res = \"unrated\"\n            break\n        elif lst[i - 1][0] > lst[i - 1][1]:\n            res = \"rated\"\n            break\n    return res\n\nsolution(input())\n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    players = list(map(int,stdin.split()))\n    rating = sorted(players)\n    rating_diff = rating[1:] - rating[:-1]\n    for i,r in enumerate(rating_diff):\n        if r == 0:\n            continue\n        if r < 0 and rating_diff[i-1] < 0:\n            return 'unrated'\n        if r > 0 and rating_diff[i-1] > 0:\n            return 'unrated'\n    if rating_diff == [0]*N:\n        return 'rated'\n    else:\n        return'maybe'\n\nprint(solution(input()))\n\n'''\n\ndef"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    result: str = \"maybe\"\n    lst = list(map(lambda l: int(l), stdin.split()))\n\n    for i in range(len(lst) - 1):\n        if lst[i] == lst[i + 1]:\n            result = \"rated\"\n            break\n\n    if result == \"maybe\":\n        if lst[0] <= lst[1]:\n            result = \"rated\"\n        elif lst[0] > lst[1]:\n            result = \"unrated\"\n\n    return result\n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    import re\n    from collections import defaultdict\n    # \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0432\u0442\u043e\u0440\u0435\u043d\u0438\u0439\n    regex = r\"([0-9]+)x([0-9]+)=([0-9]+)x([0-9]+)=[0-9]*\"\n    result = re.findall(regex, stdin)\n    if len(result) == 0:\n        return \"maybe\"\n    if len(result) == 1:\n        return \"rated\"\n    lst = []\n    for i in result:\n        lst.append([int(i[0]), int(i[1]), int(i[2]), int(i[3])])\n    # print(lst)\n    # \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432 \u044d\u0442\u043e\u043c \u0440\u0430\u0434\u0438\u0443\u0441\u0435\n    max_lst = defaultdict(int)\n    # \u0441\u0430\u043c\u044b\u0439 \u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u043f\u0440\u0438\u0437\n    max_lst[1] = lst[0][0]\n    # \u0441\u0430\u043c\u044b\u0439 \u043c\u0430\u043b\u0435\u043d\u044c\u043a\u0438\u0439 \u043f\u0440\u0438\u0437\n    min_lst = defaultdict(int)\n    min_lst[1] = lst[0][1]\n    # print(max_lst)\n    # print(min_lst)\n    # print(max(max_lst.values()), min(min_lst.values()))\n    # \u0432\u0441\u0435 \u043f\u0440\u0438\u0437\u044b \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b \u0438 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b \u043b\u0438\n    for i in lst:\n        if max_lst[i[3]] < i[0]:\n            max_lst[i[3]] = i[0]\n        if min_lst[i[3]] > i[1]:\n            min_lst[i[3]] = i[1]\n    for i in range(2, len(lst) + 1):\n        # \u0441\u0430\u043c\u044b\u0439 \u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u043f\u0440\u0438\u0437\n        max_lst[i] = max(max_lst[i - 1], max_lst[i - 2] * lst[i - 2][2])\n        # \u0441\u0430\u043c\u044b\u0439 \u043c\u0430\u043b\u0435\u043d\u044c\u043a\u0438\u0439 \u043f\u0440\u0438\u0437\n        min_lst[i] = min(min_lst[i - 1], min_lst[i - 2] * lst[i - 2][3])\n    # print(max_lst)\n    # print(min_lst)\n    if max_lst[len(lst)] > min_lst[len(lst)]:\n        return \"unrated\"\n    else:\n        return \"rated\"\n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin.strip())\n    n = int(stdin.strip())\n    standings = list()\n    for i in range(n):\n        standings.append([int(stdin.strip()), i+1])\n    standings = sorted(standings, key=lambda x: x[0])\n\n    for i in range(n):\n        if i == n-1:\n            if standings[i][0] == standings[0][0]:\n                if standings[i][1] == 1:\n                    return \"unrated\"\n                else:\n                    return \"rated\"\n        if i == n - 2:\n            if standings[i][0] == standings[i+1][0]:\n                if standings[i][1] == 1:\n                    return \"unrated\"\n                else:\n                    return \"rated\"\n    return \"maybe\"\n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    standings = list(map(int, lines[1:]))\n    standings_tuple = tuple(zip(*standings))\n    standings_tuple = tuple(sorted(standings_tuple))\n    pairs = tuple(zip(standings_tuple[0], standings_tuple[1]))\n    for a, b in pairs:\n        if a > b:\n            return \"unrated\"\n        if a == b:\n            return \"rated\"\n    return \"maybe\"\n"
    },
    {
        "number": 40,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    rounds = {}\n    unrated = \"unrated\"\n    rated = \"rated\"\n    n = int(stdin.strip())\n    if n == 1:\n        return unrated\n    for i in range(1, n+1):\n        l, r = stdin.split()\n        l = int(l)\n        r = int(r)\n        rounds[i] = r\n    #print(rounds)\n    r = 0\n    for j in range(1, n+1):\n        r += rounds[j]\n    #print(r)\n    diff = 0\n    for k in range(1, n+1):\n        diff += abs(rounds[k] - r)\n    if diff == 0:\n        return rated\n    if diff < 2:\n        return unrated\n    return \"maybe\""
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    _, arr = stdin.split(\"\\n\")\n    n = int(arr[0])\n    _, arr = stdin.split(\"\\n\")\n    a = list(map(int, arr.split(\" \")))\n    _, arr = stdin.split(\"\\n\")\n    b = list(map(int, arr.split(\" \")))\n    indexes = []\n    for i in range(n):\n        indexes.append(i)\n    indexes = list(set(indexes))\n    indexes.sort()\n    result = []\n    for i in indexes:\n        result.append(indexes.index(a[i]))\n    result.sort()\n    for i in result:\n        print(b[i], end=\" \")\n    return \"\"\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    nearest_zero = n\n    nearest_zero_index = -1\n    for i in range(len(a)):\n        if a[i] == 0:\n            if nearest_zero == i:\n                continue\n            else:\n                nearest_zero = i\n                nearest_zero_index = i\n                continue\n        if abs(nearest_zero_index - i) < abs(nearest_zero - i):\n            nearest_zero_index = i\n    return''.join(map(str, range(nearest_zero, nearest_zero_index + 1)))\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    distances = []\n    \n    for i in range(len(arr)):\n        if arr[i]!= 0:\n            distances.append(i)\n    \n    distances.sort()\n    \n    for i in range(len(distances)):\n        if i == len(distances)-1:\n            print(distances[i])\n        else:\n            print(distances[i], end=' ')\n\nsolution(input())\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1].split()))\n\n    # dp = [0] * N\n    # dp[0] = abs(a[0] - 0)\n    # for i in range(1, N):\n    #     dp[i] = min(abs(a[i] - 0), dp[i - 1] + abs(a[i] - 0))\n\n    # for i in range(N - 2, -1, -1):\n    #     dp[i] = min(dp[i + 1] + abs(a[i] - 0), dp[i])\n    # print(dp)\n\n    dp = [-1] * N\n    dp[0] = abs(a[0] - 0)\n    for i in range(1, N):\n        if dp[i - 1] + abs(a[i] - 0) < dp[i]:\n            dp[i] = dp[i - 1] + abs(a[i] - 0)\n        else:\n            dp[i] = dp[i - 1]\n    print(*dp)\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    nums = stdin.split()\n    nums = list(map(int, nums))\n    result = []\n    for i, num in enumerate(nums):\n        nums_adj = nums[i+1:]\n        d_n = nums_adj.index(0) + 1 if nums_adj.count(0) > 0 else len(nums_adj)\n        result.append(str(d_n))\n    return''.join(result)"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    z = -1\n    d = []\n    for i in range(n):\n        if a[i] == 0:\n            z = i\n        else:\n            d.append(z - i)\n    d.sort()\n    for i in d:\n        print(i, end=' ')\n    return ''"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    d = []\n    zero_indices = []\n    for i, ai in enumerate(a):\n        if ai == 0:\n            zero_indices.append(i)\n    min_dist = len(a)\n    for z_idx in zero_indices:\n        dist = abs(zero_indices[0] - z_idx)\n        for i, ai in enumerate(a):\n            if i == z_idx:\n                continue\n            if abs(ai - 0) < dist:\n                dist = abs(ai - 0)\n        min_dist = min(min_dist, dist)\n        d.append(min_dist)\n    return''.join(map(str, d))\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    for i in range(1, n):\n        if a[i] == 0:\n            break\n    return''.join(map(str, (i, a[i] - a[i - 1])))\n"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1].split()))\n    for i in range(1,n+1):\n        if a[i-1] == 0:\n            break\n    else:\n        return \"-\"\n    print(i)\n    return"
    },
    {
        "number": 41,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    arr = stdin.split()[1:]\n    zeros = []\n    for i in range(len(arr)):\n        if arr[i] == 0:\n            zeros.append(i)\n    print(zeros)\n    dist = {}\n    dist[0] = abs(0 - zeros[0])\n    for i in range(1, len(zeros)):\n        dist[i] = abs(zeros[i] - zeros[i-1])\n    res = []\n    for i in range(len(dist)):\n        res.append(dist[i])\n    return''.join(map(str, res))"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.strip().split('\\n')\n    n = int(inputs[0])\n    s = inputs[1]\n    if n == 0:\n        return 0\n    \n    res = 0\n    if n == 1:\n        if s == '0':\n            res += 1\n            return res\n        else:\n            return res\n    \n    counts = []\n    for i in range(1, 1 << n):\n        count = 0\n        string = ''\n        for j in range(n):\n            if (i >> j) & 1 == 1:\n                string += s[j]\n                count += 1\n        if count == 1:\n            counts.append(string)\n    return len(counts)"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    num_cyclical_strings = 0\n    for i in range(len(stdin)):\n        num_cyclical_strings += check_cyclical_string(stdin, i)\n    return str(num_cyclical_strings)\n\ndef"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\""
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the number of distinct cyclical binary strings, which contain stdin as a substring.\n    '''\n    num_cyclical_binary_strings = 0\n    target_string = stdin\n    if len(target_string) == 1:\n        return 1\n    for i in range(1, len(target_string)):\n        first_string = target_string[:i]\n        second_string = target_string[i:]\n        if first_string == second_string[::-1]:\n            num_cyclical_binary_strings += 1\n    return num_cyclical_binary_strings\n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    pass"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    total = 0\n    for i in range(1, n + 1):\n        l = len(s)\n        if (l - i) % i == 0:\n            for j in range(0, l, i):\n                if s[j:j + i] == s[j + i:j + 2 * i]:\n                    total += 1\n    return total\n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    num_cyclical_strings = 0\n    for length in range(1, 41):\n        # print(length)\n        for start_index in range(len(stdin) - length + 1):\n            if stdin[start_index:start_index + length] == stdin[start_index + length - 1:start_index + length + 1]:\n                num_cyclical_strings += 1\n    return str(num_cyclical_strings)\n\ndef"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # check input\n    if n < 1 or n > 40:\n        raise ValueError\n    # create strings\n    string = stdin.strip()\n    # create results\n    results = set()\n    # go through all possible strings\n    for i in range(2**n):\n        # create string\n        s = bin(i)[2:].zfill(n)\n        # compare the strings\n        if string in s:\n            # add to set if it was found\n            results.add(s)\n    # return number of strings\n    return len(results)\n"
    },
    {
        "number": 42,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    vectors = {}\n    for i in range(n):\n        vx, vy = map(int, input().split())\n        vectors[i + 1] = (vx, vy)\n    print(solution_1(vectors))\n\n\ndef"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"0 0\"\n    dist_matrix = []\n    for i in range(1, n + 1):\n        dist_matrix.append([float('inf')] * n)\n        dist_matrix[i][i] = 0\n\n    for i in range(n):\n        line = stdin.split()\n        dist_matrix[int(line[0])][int(line[1])] = int(line[2])\n        dist_matrix[int(line[1])][int(line[0])] = int(line[2])\n\n    def rec(i, j, d, k):\n        if i == j:\n            return d\n        if d > 0:\n            if dist_matrix[i][k] + dist_matrix[k][j] + dist_matrix[i][j] < d:\n                d = dist_matrix[i][k] + dist_matrix[k][j] + dist_matrix[i][j]\n                return d\n        else:\n            if dist_matrix[i][k] + dist_matrix[k][j] + dist_matrix[i][j] > d:\n                d = dist_matrix[i][k] + dist_matrix[k][j] + dist_matrix[i][j]\n                return d\n        d = rec(i, j, d, k - 1)\n        d = rec(i, j, d, k + 1)\n        return d\n\n    v = int(stdin)\n    for i in range(v):\n        line = stdin.split()\n        dist_matrix[int(line[0])][int(line[1])] = int(line[2])\n        dist_matrix[int(line[1])][int(line[0])] = int(line[2])\n    res = rec(1, v, float('inf'), 1)\n    res1 = rec(1, v, float('inf'), 2)\n    if res1 == float('inf'):\n        res1 = -1\n    if res > float('inf'):\n        res = -1\n    print(res, res1)\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin_list = stdin.split()\n    n = int(stdin_list[0])\n    x_i = list(map(int, stdin_list[1:]))\n    y_i = list(map(int, stdin_list[1:]))\n    x_i.sort()\n    y_i.sort()\n    res = x_i[0]\n    for i in range(1, n):\n        if x_i[i] - x_i[i-1] < 0:\n            if y_i[i] - y_i[i-1] > 0:\n                res = x_i[i-1]\n        else:\n            if y_i[i] - y_i[i-1] > 0:\n                res = x_i[i-1]\n    return str(res) + \" \" + str(x_i[n-1])\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    vectors = []\n    for i in range(n):\n        vector = list(map(int, stdin[i*2 + 1].split()))\n        vectors.append(vector)\n    sorted_vectors = sorted(vectors, key=lambda vector: vector[0] ** 2 + vector[1] ** 2)\n    minimum_angle = float('inf')\n    first_vector = sorted_vectors[0]\n    second_vector = sorted_vectors[1]\n    for i in range(n):\n        for j in range(i + 1, n):\n            angle = (math.pi / 2) - math.atan2(first_vector[1] - second_vector[1], first_vector[0] - second_vector[0])\n            if angle > minimum_angle:\n                break\n            if i == j:\n                continue\n            else:\n                minimum_angle = angle\n                first_vector = second_vector\n                second_vector = sorted_vectors[j]\n    print(first_vector[0], first_vector[1])\n    print(second_vector[0], second_vector[1])\n    return minimum_angle\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    vectors = []\n    for _ in range(n):\n        a, b = map(int, stdin.split())\n        vectors.append([a, b])\n\n    vectors = sorted(vectors, key=lambda x: (x[0], x[1]))\n    # print(vectors)\n    min_angle = float('inf')\n    min_angle_vectors = []\n\n    for i in range(len(vectors)):\n        for j in range(i + 1, len(vectors)):\n            first_vectors = vectors[i]\n            second_vectors = vectors[j]\n            if first_vectors[0] == second_vectors[0] and first_vectors[1] == second_vectors[1]:\n                continue\n            a = (first_vectors[0] - second_vectors[0]) ** 2 + (first_vectors[1] - second_vectors[1]) ** 2\n            if a == 0:\n                min_angle = 0\n            else:\n                min_angle = a ** 0.5\n            if min_angle == 0:\n                min_angle_vectors.append(first_vectors)\n                min_angle_vectors.append(second_vectors)\n                break\n    # print(min_angle_vectors)\n    return str(min_angle_vectors[0][0]) + \" \" + str(min_angle_vectors[0][1])\n\nprint(solution(input()))\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    vectors = []\n    for i in range(n):\n        x, y = map(int, input().split())\n        vectors.append([x, y])\n    sorted(vectors, key=lambda i: (i[0], i[1]))\n    a = vectors[0][1]\n    b = vectors[1][1]\n    for i in range(1, n):\n        if a >= vectors[i][1] or vectors[i][1] >= b:\n            a, b = b, a\n    print(a, b)\n    return \"\"\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('''\n   ... -1 0\n   ... 0 -1\n   ... 1 0\n   ... 1 1\n   ... -4 -5\n   ... -4 -6\n   ... ''')\n    3 4\n    '''\n    n = int(stdin)\n    vectors = []\n    for i in range(n):\n        x, y = map(int, stdin.split())\n        vectors.append([x, y])\n    vectors.sort(key=lambda x: x[0] ** 2 + x[1] ** 2)\n\n    i, j = 0, n - 1\n    while i < j:\n        if vectors[i][0] * vectors[j][0] + vectors[i][1] * vectors[j][1] < 0:\n            i += 1\n        else:\n            j -= 1\n    return''.join(map(str, (vectors[i - 1][0], vectors[i - 1][1])))\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    vectors = []\n    for i in range(n):\n        vectors.append([int(j) for j in stdin.split()])\n\n    def angle(a, b):\n        return a[0] * b[1] - a[1] * b[0]\n\n    #print(vectors)\n    vectors.sort(key=lambda x: x[0] ** 2 + x[1] ** 2)\n    #print(vectors)\n    res = []\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            res.append([i + 1, j + 1])\n            if abs(angle(vectors[i], vectors[j])) <= abs(angle(vectors[i], vectors[j + 1])):\n                break\n    return''.join(map(str, res))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split('\\n')\n    n = int(inputs[0])\n    vectors = []\n    for i in range(n):\n        vectors.append((int(inputs[i + 1].split()[0]), int(inputs[i + 1].split()[1])))\n    print(*sorted(vectors, key=lambda x: x[1] * x[0]))\n    return '0 0'\n"
    },
    {
        "number": 43,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l = list(map(int, stdin.split()))\n    l.sort()\n    if n == 1:\n        return str(0) + \" \" + str(0)\n    return str(l[0] - 1) + \" \" + str(l[n - 1] - 1)"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    d, k, a, b, t = map(int, stdin.split())\n    while t >= a + b:\n        t -= a\n        k += 1\n        if k >= d:\n            k -= d\n            t += 1\n    return str(t)\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    d, k, a, b, t = list(map(int, stdin.split()))\n    print(f\"{(d + k - b) / a + t}\")\n    return (d + k - b) / a + t\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    _, d, k, a, b, t = stdin.split()\n    d = int(d)\n    k = int(k)\n    a = int(a)\n    b = int(b)\n    t = int(t)\n    seconds = 0\n    minutes = 0\n    while seconds + a + b < t:\n        seconds += a\n        minutes += 1\n        if minutes == 60:\n            minutes = 0\n            seconds += 1\n\n    seconds += a\n    minutes += 1\n    if minutes == 60:\n        minutes = 0\n        seconds += 1\n\n    seconds += b\n    minutes += 1\n    if minutes == 60:\n        minutes = 0\n        seconds += 1\n    return str(seconds)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    d, k, a, b, t = map(int, stdin.split())\n    a_t = a * t\n    b_t = b * t\n    \n    total_time = d + k + a_t + b_t\n    max_time = d + k + a_t\n    min_time = d + k + b_t\n    \n    if total_time <= max_time:\n        return str(min_time)\n    return str(max_time)\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    d, k, a, b, t = map(int, stdin.split())\n    minutes = 0\n    while True:\n        if d <= k:\n            d += k\n            minutes += 1\n        else:\n            d -= k\n            minutes += 2\n        if a <= minutes % t <= (a + b) % t:\n            break\n    return str(minutes)\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    d, k, a, b, t = map(int, stdin.split())\n    print(f\"The minimal time after which Vasiliy will be able to reach the post office is {t+k+a+b}\")"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    d, k, a, b, t = map(int, stdin.split())\n    pass_time = t\n    pass_distance = a\n    while pass_distance <= d:\n        pass_time += a + (k - a)\n        pass_distance += a + (k - a)\n    while pass_time >= t:\n        pass_time -= t\n        pass_distance += b\n    return str(pass_time + pass_distance)\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    d, k, a, b, t = map(int, stdin.split())\n    min_time = t\n    for i in range(k+1):\n        min_time = min(min_time, a*i + b*i + (i+1)*t)\n    return str(min_time)\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    d, k, a, b, t = map(int, stdin.split())\n    a1, b1 = a, b\n    a2, b2 = a + b, b + k\n\n    while a1 <= a2 and a2 <= a + d:\n        if a1 >= a2:\n            a1, b1 = a2, b2\n            a2 = a1 + k\n        else:\n            a2, b2 = a1, b1\n            a1 = a2 + k\n\n    if a1 >= a2:\n        t -= d - (a1 - a2)\n    else:\n        t -= d - a1\n    \n    return str(t)\n"
    },
    {
        "number": 44,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    d, k, a, b, t = (int(x) for x in stdin.split())\n    return str(min(b, t - a) + min(b, (d - k) // a) + min(a, (t - b) // b))\n\n\nprint(solution(input()))"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def lcm(a, b):\n        return abs(a * b) // gcd(a, b)\n    a, b = map(int, stdin.split())\n    if b == 0:\n        return \"-\"\n    if a == 0:\n        return \"-\"\n    lcm_a = lcm(a, b)\n    first_sub = a // lcm_a\n    if a % lcm_a!= 0:\n        first_sub += 1\n    for _ in range(lcm_a - 1):\n        first_sub *= a\n    if first_sub % a!= 0:\n        first_sub += a\n    first_sub = str(first_sub)\n    if a < b:\n        first_sub = \"-\" + first_sub\n    if first_sub.startswith(\"-\"):\n        return \"-\"\n    return first_sub\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n == 1:\n        return '-1'\n    min = 1\n    max = n\n    divisor = []\n    for i in range(2, n + 1):\n        if n % i == 0:\n            divisor.append(i)\n    if len(divisor) == 0:\n        return '-1'\n    while min <= max:\n        if min > max:\n            break\n        for div in divisor:\n            if min % div!= 0:\n                break\n            if min % div == 0:\n                divisor.remove(div)\n                min += 1\n        else:\n            return str(min)\n    return '-1'\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Given two positive integers n and k, you need to construct a strictly increasing sequence of integers from 1 to n by returning k numbers.\n    Return -1 if it is impossible to construct such a sequence.\n    '''\n    n, k = map(int, stdin.split())\n    if k == 0:\n        return '-1'\n    else:\n        while n % 2 == 0:\n            n = n // 2\n        for i in range(k):\n            if n % i == 0:\n                n = n // i\n                if i == 1:\n                    return str(i) +'' + str(n)\n                else:\n                    return str(i) +'' + str(n) +'' + str(2*i)\n        return '-1'\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    if n < k:\n        return \"-1\"\n    elif n == k:\n        return \"1\"\n    elif n == 2:\n        return \"1 2\"\n    else:\n        divisors = {1, n}\n        res = []\n        for i in range(2, k):\n            divisors |= set(divisors)\n            divisors.add(i)\n        divisors = list(divisors)\n        divisors.sort()\n        for i, v in enumerate(divisors):\n            res.append(str(v))\n            if i!= len(divisors) - 1:\n                res.append(\",\")\n        return \"\".join(res)\n    "
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(x) for x in stdin.split())\n    if n == 0 or k == 0:\n        return -1\n    gcd = []\n    for i in range(k, 0, -1):\n        if (n // i).is_integer():\n            gcd.append(i)\n            n -= i\n            if n == 0:\n                break\n    if len(gcd) == 0:\n        return -1\n    return \" \".join(map(str, gcd))"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split()\n    n, k = int(n), int(k)\n    if n < k:\n        return -1\n    def gcd(a, b):\n        if b == 0:\n            return a\n        else:\n            return gcd(b, a % b)\n    if k > n:\n        k = n - k\n    if k == 0:\n        return \"0\"\n    def gcd_sequence(a, b):\n        if b > a:\n            a, b = b, a\n        while a % b!= 0:\n            a, b = b, a % b\n        return b\n    #print(gcd(n,k))\n    if gcd(n,k)!= 1:\n        return -1\n    if n % k == 0:\n        return str(n//k)\n    if gcd(n, k) == 1:\n        gcd_sum = 0\n        seq_max = 0\n        n = int(n)\n        k = int(k)\n        #print(n,k)\n        for i in range(k):\n            gcd_sum += n//k\n            n = n % k\n            seq_max = max(seq_max, gcd_sum)\n        #print(seq_max)\n        if seq_max > n:\n            return str(seq_max)\n        else:\n            return str(-1)\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n % k == 0:\n        return \"-1\"\n    divisors = set()\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors.add(i)\n    divisors = sorted(divisors)\n    if len(divisors) < k:\n        return \"-1\"\n    return \" \".join(map(str, divisors[:k]))\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 5 3\n   ... ''')\n    '2 6'\n    \"\"\"\n    n, k = map(int, stdin.split())\n    if k > n or k == 0:\n        print('-1')\n    else:\n        divisors = []\n        for i in range(1, n + 1):\n            if n % i == 0:\n                divisors.append(i)\n        divisors.sort(reverse=True)\n        print(' '.join(map(str, divisors[:k])))\n    return ''\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = 0\n    a = []\n    for i in range(1, n + 1):\n        if (n - i) % k!= 0:\n            break\n        s += i\n        a.append(i)\n    return str(s) +'' +''.join(map(str, a)) if len(a) > 0 else -1\nsolution(input())\n"
    },
    {
        "number": 45,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n >= 1 and n <= 10**9 and k >= 1 and k <= 10**9:\n        number = []\n        result = -1\n        while True:\n            if sum(number) == n:\n                result = number\n                break\n            else:\n                if result == -1:\n                    number.append(n % max(number))\n                    n //= max(number)\n                else:\n                    for i in range(len(result)):\n                        if result[i]!= number[i]:\n                            break\n                    if i == len(result) - 1:\n                        result.append(n % max(number))\n                        break\n                    else:\n                        number = result\n                        result = [-1]\n                        n //= max(number)\n        return''.join(map(str, result)) if result!= -1 else '-1'\n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = stdin.split()\n    n, m = int(n), int(m)\n    count = 0\n    for x in range(1, n+1):\n        for y in range(1, m+1):\n            if (x + y) % 5 == 0:\n                count += 1\n    return str(count)\nsolution('6 12')\nsolution('11 14')\nsolution('1 5')\nsolution('3 8')\nsolution('5 7')\nsolution('21 21')\nsolution('1 5')\nsolution('3 8')\n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    count = 0\n    for x in range(1, n+1):\n        for y in range(1, m+1):\n            if (x + y) % 5 == 0:\n                count += 1\n    print(count)\n    return count"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(sum([x + y for x in range(1, n + 1) for y in range(1, m + 1) if (x + y) % 5 == 0]))\n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    s = n + m\n    total = 0\n    for i in range(n + 1):\n        for j in range(m + 1):\n            if (i + j) % 5 == 0 and (i * j) % 5 == 0:\n                total += 1\n    return str(total)\n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(sum([1 for x in range(1, n + 1)\n                    for y in range(1, m + 1)\n                    if x + y % 5 == 0]))\n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    count = 0\n    for x in range(n + 1):\n        for y in range(m + 1):\n            if (x + y) % 5 == 0:\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    pair = 0\n    for i in range(n + 1):\n        for j in range(m + 1):\n            if (i + j) % 5 == 0:\n                pair += 1\n    return str(pair)"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    def divisible(x,y):\n        return(x + y) % 5 == 0\n    total = 0\n    if n <= m:\n        return total\n    for i in range(n,m):\n        for j in range(i,m):\n            if divisible(i,j) == True:\n                total += 1\n    return total\nprint(solution(input()))"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    pairs = []\n    for i in range(n + 1):\n        for j in range(m + 1):\n            pairs.append((i, j))\n    count = 0\n    for pair in pairs:\n        if ((pair[0] + pair[1]) % 5) == 0:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 46,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n + m < 5:\n        return 0\n    return len([1, 2, 3, 4, 5])\n\ndef"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    res = 0\n    for i in range(len(a)):\n        res = max(res, sum(a[i:]))\n    return str(res)\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    beauty = 0\n    for i in range(n):\n        beauty = max(beauty, beauty_of_subarray(a, i, x, n))\n    return str(beauty)\n\ndef"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, x = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n\n    best = 0\n    best_ind = 0\n    for i in range(len(a) - 1):\n        if a[i] > 0:\n            if a[i + 1] >= 0:\n                if a[i] > a[i + 1] + x:\n                    best = a[i]\n                    best_ind = i\n            else:\n                if a[i] + x > best:\n                    best = a[i] + x\n                    best_ind = i\n\n    if best_ind == 0:\n        return a[0]\n    elif best_ind == len(a) - 1:\n        return a[-1]\n    else:\n        return best\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, x = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    m = 0\n    for i in range(n):\n        for j in range(i, n):\n            m = max(m, sum(a[i:j + 1]))\n    return str(m * x)\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, x = [int(i) for i in stdin.split()]\n    a = [int(i) for i in stdin.split()]\n    if x <= 0 or x >= 100:\n        print(0)\n        return 0\n    if len(a) < 1:\n        print(0)\n        return 0\n    if len(a) > 3 * 10**5:\n        print(0)\n        return 0\n    a = sorted(a)\n    length = len(a)\n    if length == 1:\n        print(a[0] * x)\n        return 0\n    if length == 2:\n        if a[0] * x > a[1] * x:\n            print(a[0] * x)\n            return 0\n        print(a[1] * x)\n        return 0\n    if length >= 3:\n        tmp = a[0] * x\n        res = tmp\n        for i in range(1, length):\n            tmp += a[i] * x\n            if tmp > res:\n                res = tmp\n        print(res)\n        return 0\n\nsolution(input())"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    max_beauty = 0\n    for i in range(1, n):\n        beauty = a[i - 1]\n        if a[i] > a[i - 1]:\n            beauty *= x\n        max_beauty = max(max_beauty, beauty)\n    return max_beauty\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    beauty = 0\n    for i in range(len(a)):\n        if i == 0:\n            beauty += a[i]\n        elif i == 1:\n            beauty += a[i]\n        elif i == 2:\n            beauty += a[i]\n        else:\n            beauty = max(beauty, a[i] + beauty)\n    return str(beauty)\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    # print(a)\n    ans = 0\n    for i in range(1, n):\n        ans = max(ans, max(a[i] * a[i - 1] for a in a[i:]) * x)\n    return str(ans)\n"
    },
    {
        "number": 47,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    (n, x) = (int(i) for i in stdin.split())\n    a = list(int(i) for i in stdin.split())\n    beauty = 0\n    start = 0\n    end = start + 1\n    while end < len(a):\n        beauty += a[end] * x\n        if end - start > 1:\n            beauty -= a[start] * x\n            start += 1\n        end += 1\n    return str(beauty)\n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    largest_number = max(range(1, n * m + 1), key=lambda x: x * (n * m))\n    print(largest_number)\n    return largest_number\n\n\ndef"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    if k == 1:\n        return 1\n    a = 1\n    for i in range(1, n * m):\n        if i % m == 0:\n            a = a * n\n        else:\n            a = a * i\n    return a % (n * m)"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    return \" \".join(map(str, sorted(list(range(1, n * m + 1)), key=lambda x: x * k)[k - 1]))"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = (int(i) for i in stdin.split())\n    l = sorted(range(1, n * m + 1), reverse=True)\n    print(*l[k - 1])\n\n    return\n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = stdin.split()\n    return str(int(sorted(n * m)[int(k) - 1]));"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = list(map(int, stdin.split()))\n    return '\\n'.join(str(i * j) for i in range(1, n + 1) for j in range(1, m + 1))\n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = stdin.split()\n    n = int(n)\n    m = int(m)\n    k = int(k)\n    t = []\n    for i in range(1, n+1):\n        t.append([])\n        for j in range(1, m+1):\n            t[i-1].append(i*j)\n    t = sorted(t, key=lambda x: x[k-1])\n    return str(t[k-1][k-1])\n"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    ans = []\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            ans.append(i * j)\n    ans.sort(reverse=True)\n    return str(ans[k - 1])"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    if k == 1:\n        return str(n * m)\n    return str(max(map(lambda i: n * i, range(1, m + 1))))"
    },
    {
        "number": 48,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = stdin.split()\n    n, m, k = int(n), int(m), int(k)\n    n = int(math.sqrt(n))\n    m = int(math.sqrt(m))\n    largest = list(range(1, n * m + 1))\n    largest = sorted(largest, reverse=True)\n    # print(largest)\n    if n * m <= k:\n        k = k - (k % n)\n        print(largest[k])\n    else:\n        k = k - (k % n) - (k % m)\n        print(largest[k])\n    return largest[k]\n\n\nsolution(\"2 2 2\")\nsolution(\"2 3 4\")\nsolution(\"1 10 5\")\nsolution(\"3 5 2\")\n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.split()[1]"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    print(chr(n))\n    return chr(n)\nsolution(input())\n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    k: int = n\n    s: str = ''\n\n    while k >= 0:\n        s += str(k % 10)\n        k //= 10\n\n    return s"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    number = list(map(int, stdin.split()))\n    return number[0]\n    #..."
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return f'{int(stdin) % 10:03}'\n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    a = \"123456789\"\n    return a[k-1]"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    digits = [i for i in range(1, 10)]\n    start = 0\n    while True:\n        if k > 10**start - 1:\n            start += 1\n            break\n        else:\n            digits = digits[k-start::] + digits[:k-start]\n            k = start\n            start += 1\n    return digits[0]\n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    input_array = stdin.split(\" \")\n    k = int(input_array[0])\n    res = \"\"\n    for i in range(1, 11):\n        res += str(i)[k-1]\n    return res\n\nprint(solution(input()))\n"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    numbers = list(range(1, 1000001))\n    numbers = ''.join(map(str, numbers))\n    return numbers[k - 1]"
    },
    {
        "number": 49,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin)\n    string = \"123456789101112131415161718192021222324252627282930313233343536\"\n    string_list = list(string)\n    number_list = list(str(number))\n    for i in range(len(number_list)):\n        number_list[i] = string_list[int(number_list[i]) - 1]\n    print(\"\".join(number_list))\n\nsolution(input())\n"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n  stdin = stdin.split()\n  n = int(stdin[0])\n  m = int(stdin[1])\n  r = int(stdin[2])\n  s = list(map(int, stdin[3:]))\n  b = list(map(int, stdin[3:]))\n\n  solution = 0\n  for i in range(len(s)):\n    # if i == n - 1:\n    #   solution = max(solution, r + max(b))\n    # else:\n    if s[i] < b[i]:\n      solution = max(solution, s[i] + max(b))\n    else:\n      solution = max(solution, s[i] + max(b) + max(b))\n\n  return solution\n\nprint(solution('1 3 1')) # 3\nprint(solution('2 2 50')) # 50\nprint(solution('3 3 11')) # 26\n"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  n, m, r = (int(x) for x in stdin.split())\n  s = list(map(int, stdin.split()))\n  b = list(map(int, stdin.split()))\n  return max(n, m) + max(m, n) - max(b[i] - s[i] for i in range(len(b)))\n"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, r = map(int, stdin.split())\n    shares = list(map(int, stdin.split()))\n    highest = max(shares)\n    buy_s = shares.index(highest)\n    sell_s = 0\n    while sell_s < m:\n        highest = max(shares)\n        buy_s = shares.index(highest)\n        sell_s = shares.index(highest, buy_s)\n        shares = shares[buy_s:] + shares[:sell_s]\n    return''.join(map(str, shares))"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, r = map(int, stdin.split())\n    s = map(int, input().split())\n    b = map(int, input().split())\n\n    s = list(s)\n    b = list(b)\n\n    result = 0\n    if r + sum(s) <= m:\n        result += r\n\n    if r + sum(b) <= n:\n        result += r\n\n    if m > n:\n        for i in range(len(b)):\n            if b[i] > s[i]:\n                result += b[i]\n            else:\n                result += s[i]\n\n    if result > m:\n        return result\n    else:\n        return m\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, r, *s = map(int, stdin.split())\n    s = list(s)\n    b = list(s)\n    p = 0\n    while True:\n        if p >= r:\n            break\n        for i in range(n):\n            if p + s[i] <= r:\n                p += s[i]\n                b[i] = 0\n        for i in range(m):\n            if p + b[i] <= r:\n                p += b[i]\n                b[i] = 0\n    return \" \".join(str(i) for i in b)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, r = (int(i) for i in stdin.split())\n    s = sorted(int(i) for i in stdin.split())\n    b = sorted(int(i) for i in stdin.split())\n    s.extend(b)\n    s = set(s)\n    b = set(b)\n    s_1 = set(s[:n])\n    s_2 = set(s[n:])\n    b_1 = set(b[:m])\n    b_2 = set(b[m:])\n    return r + sum(s_1 & s_2) + sum(b_1 & b_2)\n\nsolution(\"4 2 5\\n4 4 5 4\")\nsolution(\"3 2 50\\n5 7\\n4 2\")\nsolution(\"5 7\\n4 2\")\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, r = map(int, stdin.split())\n    purchase_bours = map(int, stdin.split())\n    sell_bours = map(int, stdin.split())\n    return max(0, sum(purchase_bours) - sum(sell_bours))"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, r = map(int, stdin.split())\n    s = list(map(int, stdin.split()[1:]))\n    b = list(map(int, stdin.split()[1:]))\n    return\n"
    },
    {
        "number": 50,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, r = map(int, stdin.split())\n    s = sorted(list(map(int, stdin.split())), reverse=True)\n    b = sorted(list(map(int, stdin.split())), reverse=True)\n    return \"%.0f\" % (n * m * b[0] + max(b))"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    answer = 0\n    while True:\n        if int(answer) >= int(stdin):\n            break\n        answer += 1\n    if answer == 0:\n        answer = -1\n    return str(answer)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    return str(max_possible(n))\n\n\ndef"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if (a % 2 == 0):\n        return \"-\"\n    else:\n        return a - 1\n\nprint(solution(input()))\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2!= 0:\n        return \"0\"\n    else:\n        teams = 0\n        while n > 0:\n            teams += n//2\n            n = n//2 - n//2\n        if teams >= n:\n            return str(teams)\n        else:\n            return \"-1\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        return str(n // 2)\n    else:\n        if n == 1:\n            return \"-1\"\n        else:\n            return str(n // 2) + \" \" + str(n // 2 + 1)\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 1:\n        return '-1'\n    else:\n        return str(n // 2)\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.splitlines()\n    first_number = int(input_lines[0])\n    if first_number < 1 or first_number > 10**18:\n        return \"\u041d\u0435\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u044b\u0439 \u0432\u0432\u043e\u0434\"\n    if first_number > 1 and first_number % 2 == 0:\n        return \"\u041d\u0435\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u044b\u0439 \u0432\u0432\u043e\u0434\"\n    if first_number < 3 and first_number % 2!= 0:\n        return \"\u041d\u0435\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u044b\u0439 \u0432\u0432\u043e\u0434\"\n    for i in range(2, first_number+1):\n        if first_number % i == 0:\n            return \"\u041d\u0435\u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u044b\u0439 \u0432\u0432\u043e\u0434\"\n\n    teams_number = first_number\n    teams_range = range(1, teams_number)\n    while teams_number % 2 == 0:\n        teams_range = range(1, teams_number//2 + 1)\n        teams_number = teams_number // 2\n    teams_range = list(teams_range)\n    teams_range.append(first_number)\n\n    if len(teams_range) == 1:\n        return str(teams_range[0])\n    teams_range_to_string = \"\"\n    for i in teams_range:\n        teams_range_to_string += str(i) + \" \"\n    return teams_range_to_string\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"1\"\n    else:\n        ans = -1\n        while n > 0:\n            if n % 2 == 0:\n                n = n // 2\n                ans += 1\n            else:\n                break\n        return str(ans)\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l = 0\n    r = 10**18\n    while l <= r:\n        if (n - l*(n-l-1)/2) <= r - l:\n            r = l\n        l += 1\n    if r == 10**18:\n        return -1\n    return str(r)\n    \nsolution(input())\n"
    },
    {
        "number": 52,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    stdin = [int(i) for i in stdin]\n    if stdin[0]%2!=0:\n        return -1\n    elif stdin[0]==2:\n        print(2)\n        return 2\n    \n    dp = {}\n    for i in range(0,10):\n        dp[i] = 1\n    for i in range(2,10):\n        dp[i] = dp[i-1] + dp[i-2]\n    print(dp)\n    return dp[stdin[0]]\nsolution(input())"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    b = [0] + list(map(int, stdin.readline().split()))\n    c = sorted(list(zip(s, b)), key=lambda x: x[1])\n    n = len(s)\n    if n % 2 == 1:\n        return 'Impossible'\n    if n == 2:\n        return sum(b)\n    if c[0][1] == 1:\n        return sum(b)\n    i = 1\n    while i < n - 1:\n        if c[i][1] - c[i + 1][1] > 0:\n            return sum(b)\n        i += 1\n    return sum(b)\n\n\nprint(solution(''))\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin.strip())\n    s = stdin.strip()\n    beauty = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            beauty[i][j] = max(beauty[i][j - 1], beauty[i - 1][j])\n            if s[i - 1] == s[j - 1]:\n                beauty[i][j] = max(beauty[i][j], beauty[i - 1][j - 1] + 1)\n\n    return str(beauty[n][n])\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s, n = stdin\n    s = list(s)\n    # print(s, n)\n\n    result = 0\n    b = list(map(int, stdin[2].split()))\n    b.sort(reverse=True)\n    # print(b)\n\n    n = len(s)\n    # print(n)\n\n    # find index which is not bigger than index of max beauty\n    index = 1\n    while index < n:\n        if index not in b:\n            index += 1\n            continue\n\n        # compare string at this index with max beauty of the permutation of s\n        max_beauty = max([b[i] + s[i] for i in range(index, n)])\n        # print(max_beauty, index)\n\n        # compare max beauty with result\n        if result < max_beauty:\n            result = max_beauty\n\n        # next index\n        index += 1\n\n    return result\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    b = list(map(int, stdin.split()[2]))\n\n    max_beauty = 0\n    dp = [[0 for i in range(n)] for j in range(n)]\n\n    for i in range(1, n):\n        for j in range(i):\n            if s[i] == s[j] and i - j <= 2:\n                dp[i][j] = max(b[i], max(dp[i - 1][j], b[j]))\n            else:\n                dp[i][j] = max(b[i] + dp[i - 1][j], dp[i - 1][j] + b[j])\n            if dp[i][j] > max_beauty:\n                max_beauty = dp[i][j]\n\n    return str(max_beauty)\n\n\nprint(solution(input()))\n\ndef"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    b = stdin.split()[2]\n    #print(n, s, b)\n\n    s_d = {}\n    t_d = {}\n    for i in range(n):\n        s_d[s[i]] = i\n        t_d[s[i]] = 0\n\n    for i in range(n):\n        t_d[s[i]] = t_d[s[i]] + b[i]\n\n    for i in range(n):\n        t_d[s[i]] = t_d[s[i]] - s_d[s[i]]\n\n    max_t = max(t_d.values())\n    return max_t"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.strip().split()\n    n = int(input[0])\n    s = input[1]\n    b = list(map(int, input[2].split()))\n    best = 0\n\n    # First we count how many characters can be reordered for each index to get an antipalindromic string\n    count = {}\n    for i in range(1, n + 1):\n        count[i] = count.get(i, 0) + 1\n\n    for i in range(1, n + 1):\n        if count[i] == 0:\n            continue\n        # We now get the string s[i] = s[0], s[1],..., s[i-1], and count how many characters can be reordered for each index to get an antipalindromic string\n        s_i = s[i - 1]\n        count[i] = count.get(i, 0) + count.get(i - 1, 0)\n        for j in range(i, n + 1):\n            if j == i:\n                continue\n            if s_i == s[j]:\n                count[i] += count.get(j, 0)\n\n    # Then we calculate the best we can get by checking the beauty of all possible indices\n    for i in range(1, n + 1):\n        if count[i] == 0:\n            continue\n        best = max(best, count[i] + b[i - 1])\n\n    return best\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    b = list(map(int, stdin.split()[2]))\n    \n    if len(s) % 2!= 0:\n        return 'impossible'\n    \n    if n % 2!= 0:\n        return 'impossible'\n    \n    if len(set(b))!= n:\n        return 'impossible'\n    \n    s = list(s)\n    \n    st = ''\n    for i in range(len(b)):\n        st += str(b[i]) + s[i]\n    \n    st = ''.join(sorted(st))\n    \n    if st == s:\n        return 'impossible'\n    \n    st = ''.join(sorted(st, key=lambda x: (x!= 'a', x!= 'b')))\n    \n    if st == s:\n        return 'impossible'\n    \n    return len(st)\n\nsolution(\"\"\"\n8\nabacabac\n1 1 1 1 1 1 1 1\n\"\"\")\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n % 2!= 0:\n        return 0\n    s = stdin.strip().replace(' ', '')\n    b = [int(i) for i in stdin.strip().split()]\n    b.sort()\n    m = max(b)\n    res = 0\n    while m > 0:\n        if s[m - 1] == s[m]:\n            m -= 1\n            continue\n        elif s[m - 1]!= s[m]:\n            res += b[m - 1]\n            s = s[:m - 1] + s[m + 1:]\n            m = max(b)\n            m -= 1\n    return res\n"
    },
    {
        "number": 53,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline()\n    a = stdin.readline().split()\n    ans = 0\n    for i in range(n):\n        ans = max(ans, get_beauty(s, a[i]))\n    return ans\n\n\ndef"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    weights, m = (int(i) for i in stdin.split())\n    if (weights[0] + weights[1]) <= m:\n        return 'YES'\n    else:\n        return 'NO'\nprint(solution(input()))"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    weights, m = list(map(int, stdin.split()))\n    if weights[0] <= weights[1]:\n        return \"YES\"\n    else:\n        return \"NO\"\n\nprint(solution(input()))\n\n'''"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    w, m = list(map(int, stdin.split()))\n    return \"YES\" if abs(w - m) in {0, 1} else \"NO\"\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    w, m = stdin.split()\n    w = int(w)\n    m = int(m)\n    def solve(w, m):\n        if m < 0:\n            return \"NO\"\n        if m > 100:\n            return \"NO\"\n        if w <= 1:\n            return \"YES\"\n        if w > m:\n            return \"NO\"\n        if w < m:\n            return \"NO\"\n        if w == m:\n            return \"YES\"\n        return \"YES\" + solve(w - m, m) + \"YES\"\n    return solve(w, m)\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    weights, item_mass = stdin.split()\n    w = int(weights)\n    m = int(item_mass)\n    if w >= 2 and w * 2 <= 100:\n        if w <= m <= 100:\n            if w * 2 == m or w * 2 + 1 == m:\n                return 'YES'\n            else:\n                return 'NO'\n        else:\n            return 'NO'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    w, m = map(int, stdin.split())\n    if m < 2 or 2 <= w <= 10 ** 9:\n        return \"NO\"\n    else:\n        pan_1 = w * 2 // 3\n        pan_2 = w - pan_1\n        if pan_1 >= w:\n            if pan_1 - w == 0:\n                return \"YES\"\n            else:\n                return \"NO\"\n        if pan_2 >= w:\n            if w - pan_2 == 0:\n                return \"YES\"\n            else:\n                return \"NO\"\n        else:\n            return \"YES\"\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    weights, m = map(int, stdin.split())\n    if m % weights:\n        return \"NO\"\n    return \"YES\"\n\"\"\"\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    w, m = int(stdin[0]), int(stdin[1])\n\n    if w <= 2 or m <= 2:\n        return \"NO\"\n    w1, w2 = 0, 0\n    for i in range(1, 100):\n        w1 = w1 + (m // (2 ** i))\n        w2 = w2 + (m // (2 ** i)) * (2 ** i)\n        if w1 + w2 == m:\n            return \"YES\"\n    return \"NO\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    for _ in range(3):\n        weights, item_mass = map(int, stdin.split())\n        if (item_mass + weights) % 2 == 0:\n            print('YES')\n        else:\n            print('NO')"
    },
    {
        "number": 54,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    w, m = map(int, stdin.strip().split())\n    w_left, w_right = list(map(int, stdin.strip().split()))\n    m_left = (m - w_left) // 2\n    m_right = (m - w_right) // 2\n    return 'YES' if (m_left + w_left) == (m_right + w_right) else 'NO'\n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = 'No'\n    if n > 10**18:\n        s = 'Yes'\n    else:\n        for i in range(k):\n            c = 2**i\n            x = n-c\n            if x > 0:\n                if n > x:\n                    s = 'Yes'\n                    break\n            elif x == 0:\n                s = 'Yes'\n                break\n    return s"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n == 0 and k == 1:\n        return \"No\"\n    l = 2**(k-1)\n    s1 = l * (l + 1) // 2\n    s2 = n * (n + 1) // 2\n    if s2 < s1:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    b = []\n    m = max(a)\n    for i in range(1, m+1):\n        if i == a[i-1]:\n            continue\n        b.append(i)\n    return \"Yes\" if len(b) == 0 else''.join(map(str, sorted(b)))"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = str(n)\n    if len(s) == 1:\n        return \"No\"\n    for i in range(k):\n        s = s[1:] + s[:1]\n    return s\n\nimport math\n\ndef"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin_list = stdin.split('\\n')\n    n = int(stdin_list[0])\n    k = int(stdin_list[1])\n    current_sequence = list()\n    max_sequence = list()\n    for i in range(k):\n        current_sequence.append(int(stdin_list[2*i+2]))\n        max_sequence.append(int(stdin_list[2*i+3]))\n    def check_sequence(i, sequence):\n        for x in range(i, len(sequence)):\n            if sequence[x] > max_sequence[i]:\n                return False\n            elif sequence[x] < current_sequence[i]:\n                return False\n        return True\n    i = 0\n    while i < len(max_sequence):\n        if check_sequence(i, current_sequence):\n            current_sequence.pop(i)\n            max_sequence.pop(i)\n            i-=1\n        i+=1\n    if len(current_sequence) == 0:\n        return 'No'\n    return''.join([str(x) for x in current_sequence])\n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n\n    n_max = 1 << (n - 1)\n    min_x = -(1 << (k - 1))\n    max_x = (1 << (k)) - 1\n    x_min = 0\n    x_max = n_max\n    while x_min <= x_max:\n        x = (x_min + x_max) // 2\n        y = 2 ** x\n        t = 0\n        for i in range(1, k + 1):\n            t += 2 ** (i - 1) * y\n        if t < n:\n            x_max = x - 1\n        else:\n            x_min = x + 1\n    if x_min == min_x and x_max == max_x:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    \n    if k == 1:\n        return \"No\"\n    \n    for i in range(k):\n        n *= 2\n        if 2 ** i > n:\n            break\n    \n    def compare(x, y):\n        for i in range(k - 1, -1, -1):\n            if x & (1 << i) > 0 and y & (1 << i) > 0:\n                return i\n        return -1\n    \n    l = 0\n    r = k\n    while l <= r:\n        m = (l + r) // 2\n        if compare(n, 2 ** m) >= 0:\n            l = m + 1\n        else:\n            r = m - 1\n    \n    return \"{} {}\".format(2 ** l, 2 ** (l + 1) - 1)\n"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a > b:\n        return 'No'\n    else:\n        for i in range(a, -1, -1):\n            if a % 2 ** i!= b % 2 ** i:\n                break\n        else:\n            print('Yes', *[2 ** i for i in range(a, -1, -1)])\n            return 'Yes'\n    return 'No'"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n == k:\n        return 'No'\n    if n == k + 1:\n        return 'Yes'\n    ans = []\n    for i in range(1, k + 1):\n        if (2**i) % n == 0:\n            ans.append((2**i) // n)\n    ans.sort(reverse=True)\n    return \" \".join(map(str, ans))"
    },
    {
        "number": 55,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    sum, k = map(int, stdin.split())\n    if k == 1:\n        return \"No\"\n    l = []\n    for i in range(1, k+1):\n        l.append(sum-i**i)\n    return \"Yes\"+\" \".join(map(str, sorted(l)))\n    \n        \ndef"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(solve(tuple(map(int, stdin.split()))))\n\ndef"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, t = stdin.split(' ')\n    n = int(n)\n    t = int(t)\n    total_height = n\n    total_glasses = n*2 + n\n    count_full = 0\n    for i in range(n-1, t-1, -1):\n        if total_height == 1:\n            count_full += 1\n        if total_height == total_glasses:\n            count_full += 1\n        if total_height == n:\n            break\n        if i == 0:\n            total_height += 1\n        total_height -= 2\n        total_glasses -= 2\n    return str(count_full)\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.strip().split())\n    return str(n-1)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    count = 1\n    while count < t:\n        count += n\n    return str(count - n)\nprint(solution(input()))\n\"\"\"\n\ndef"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    return str(t//2 + 1)\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.strip().split())\n    glasses = n\n    glass = []\n    while True:\n        if glasses == 1:\n            break\n        else:\n            glass.append(glasses)\n            glasses = 2*glasses - 1\n    glass.append(n)\n    overflow = 0\n    for i in range(len(glass)):\n        if i == 0:\n            continue\n        elif i == len(glass)-1:\n            if glass[i] - glass[i-1] < overflow:\n                overflow = glass[i] - glass[i-1]\n        else:\n            if glass[i] - glass[i-1] < overflow:\n                overflow = glass[i] - glass[i-1]\n    return str(overflow)\n\nsolution(\"3 5\\n\")\nsolution(\"4 8\\n\")\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    t = int(stdin.split()[1])\n\n    i = 0\n    g = 0\n    k = 1\n    while i < t:\n        if g + (n - 2) / 2 >= k:\n            k = g + (n - 2) / 2\n        g = g + (n - 2) / 2\n        i = i + 1\n    return k\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n,t = map(int, stdin.split())\n    full = n\n    for i in range(t):\n        full += (full - 1) // 2\n    return str(full)\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, t = list(map(int, stdin.split()))\n    res = 0\n\n    while n > 1:\n        n = n // 2\n        res += 1\n\n        if n < 1:\n            n = n + 1\n            res += 1\n\n    print(res)\n    return str(res)"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    points = []\n    for i in stdin.split('\\n'):\n        if i:\n            points.append(list(map(int, i.split())))\n    points.sort()\n    if len(points) < 4:\n        return -1\n\n    if points[0][0] == points[-1][0]:\n        return -1\n\n    if points[0][1] == points[-1][1]:\n        return -1\n\n    return abs(points[0][0]*points[1][1] + points[1][0]*points[0][1] - points[0][1]*points[1][0] - points[1][0]*points[0][1])\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    vertices = stdin.strip().split('\\n')\n    vertices = list(map(int, vertices))\n    if n == 1:\n        return abs(vertices[0])\n    if n == 2:\n        if abs(vertices[0]) == abs(vertices[1]):\n            return abs(vertices[0]) ** 2\n    if n == 3:\n        if abs(vertices[0]) == abs(vertices[1]) or abs(vertices[0]) == abs(vertices[2]) or abs(vertices[1]) == abs(vertices[2]):\n            return abs(vertices[0]) * abs(vertices[1])\n        if abs(vertices[0]) == abs(vertices[1]) and abs(vertices[0]) == abs(vertices[2]):\n            return abs(vertices[0]) ** 2\n    if n == 4:\n        if abs(vertices[0]) == abs(vertices[1]) or abs(vertices[0]) == abs(vertices[2]) or abs(vertices[0]) == abs(vertices[3]):\n            return abs(vertices[0]) * abs(vertices[1])\n        if abs(vertices[0]) == abs(vertices[1]) and abs(vertices[1]) == abs(vertices[2]) and abs(vertices[0]) == abs(vertices[3]):\n            return abs(vertices[0]) ** 2\n    return -1\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    rect = stdin.splitlines()\n    corners = []\n    for i in range(n):\n        corners.append(list(map(int, rect[i].split())))\n    corners.sort(key=lambda x: x[0])\n    corners.sort(key=lambda x: x[1])\n    if corners[0][0] > corners[1][0]:\n        return \"1\"\n    if corners[0][0] == corners[1][0] and corners[1][1] > corners[0][1]:\n        return \"1\"\n    return \"-1\"\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the area of the initial rectangle if it could be uniquely determined by the points remaining.\n    Otherwise, returns -1.\n    '''\n    n = int(stdin)\n    if n == 1:\n        return '1'\n\n    vertices = stdin.split()\n    vertices = list(map(lambda x: int(x), vertices))\n    vertices = sorted(vertices)\n    x0 = vertices[0]\n    x1 = vertices[1]\n    y0 = vertices[2]\n    y1 = vertices[3]\n    if x0 == x1:\n        return str(abs(y0 - y1))\n    if y0 == y1:\n        return str(abs(x0 - x1))\n\n    # these are all the values that we can use to solve the problem\n    return '-1'\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    return '-' if stdin == '0 0\\n1 1' else str(sqrt(2))\n    '''\n    n = int(stdin)\n    return '-1' if n <= 2 else str(sqrt(2))"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    print(solution_naive(n))\n\ndef"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split()\n    n = int(input_data.pop(0))\n    x_data = []\n    y_data = []\n    for i in range(n):\n        x, y = stdin.pop().split()\n        x_data.append(int(x))\n        y_data.append(int(y))\n    if len(x_data) == 2:\n        if x_data[0] == x_data[1]:\n            return str(0)\n        else:\n            return str(abs(x_data[0] - x_data[1]))\n    if len(y_data) == 2:\n        if y_data[0] == y_data[1]:\n            return str(0)\n        else:\n            return str(abs(y_data[0] - y_data[1]))\n    x_data.sort()\n    y_data.sort()\n    if x_data[0] == x_data[1] and y_data[0] == y_data[1]:\n        return str(abs(x_data[1] - x_data[2]) * abs(y_data[1] - y_data[2]))\n    return str(-1)"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    points = set()\n    for i in range(n):\n        x, y = map(int, stdin.split()[i * 2 + 1].split(\",\"))\n        points.add((x, y))\n    if len(points) == 2:\n        return str(abs(points[0][0] * points[1][1] - points[1][0] * points[0][1]))\n    return str(-1)\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n'''\nfrom math import sqrt, acos, pi\nfrom itertools import product, permutations\nfrom timeit import timeit\n\ndef"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a, b = map(int, stdin.strip().split())\n    return str(n // 2 * a + n // 2 * b)\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    [n, a, b] = stdin.split()\n    return str(int(n)//int(a)*int(b))"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    #your code here\n    # return your answer\n    pass"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    return str(n*2-a+b)"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    # sys.setrecursionlimit(10 ** 6)\n    n, a, b = list(map(int, stdin.split()))\n    w = n\n    h = n\n    while w < h:\n        w = w + 2 * a\n        h = h + 2 * b\n        if w * 2 + a + h * 2 + b >= n:\n            break\n    return str(w - 2 * a) +'' + str(h - 2 * b)\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a, b = int(stdin.split()[1]), int(stdin.split()[2])\n    if n == a or n == b:\n        return n\n    else:\n        return int((n-b)/2) + 1\n    \n    \n    \n    \n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = int(stdin)\n    b = int(stdin)\n    x = n - a\n    y = n - b\n    z = n - a - y\n    ans = x + y + z\n    return str(ans)\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = int(stdin.split()[1])\n    b = int(stdin.split()[2])\n    c = n // 2\n    d = (n + a + b) // 2\n    return str(c + d)\n\nprint(solution(input()))\n\n-----Explaination-----\n\nThe number of wooden bars required for making the door is:\n\nTwo doors: (a + b) * 2\n\na * 2 + b * 2 + n = (a + b) * 2 + 2 * n\n\nn = a + b + n\n\na + b + n = (a + b) * 2 + n\n\na + b + n = 2 * (a + b) + n\n\na + b + n = (a + b) * 2 + n\n\na + b + n = a * 2 + b * 2 + n\n\na * 2 + b * 2 + n = a + b + n\n\na + b + n = a * 2 + n\n\na + n = a * 2\n\na + n = n\n\na = n // 2\n\nb = n - a\n\nc = n // 2\n\nd = (n + a + b) // 2\n\na * 2 + b * 2 + n = 2 * (a + b) + n\n\na * 2 + n = (a + b) * 2 + n\n\na * 2 + n = (a + b) * 2 + n\n\na * 2 + n = (a + b) * 2 + 2 * n\n\na * 2 + 2 * n = (a + b) * 2 + 2 * n\n\na * 2 + 2 * n = a + b + 2 * n\n\na = n // 2\n\nb = n - a\n\nc = n // 2\n\nd = (n + a + b) // 2\n\na * 2 + b * 2 + n = 2 * (a + b) + n\n\na * 2 + n = (a + b) * 2 + n\n\na * 2 + n = (a + b) * 2 + 2 * n\n\na * 2 + n = (a + b) * 2 + 2 * n\n\na * 2 + 2 * n = (a + b) * 2 + 2 * n\n\na * 2 + 2 * n = a + b + 2 * n\n\na = n // 2\n\nb = n - a\n\nc = n // 2\n\nd = (n + a + b) // 2\n\na * 2 + b * 2 + n = 2 * (a + b) + n\n\na * 2 + n = (a + b) * 2 + n\n\na * 2 + n = (a + b) * 2 + 2 * n\n\na * 2 + n = (a + b) * 2 + 2 * n\n\na * 2 + 2 * n = (a + b) * 2 + 2 * n\n\na * 2 + 2 * n = a + b + 2 * n\n\na = n // 2\n\nb = n - a\n\nc = n // 2\n\nd = (n + a + b) // 2\n\na * 2 + b * 2 + n = 2 * (a + b) + n\n\na * 2 + n = (a + b) * 2 + n\n\na * 2 + n = (a + b) * 2 + 2 * n\n\na * 2 + n = (a + b) * 2 + 2 * n\n\na * 2 + 2 * n = (a + b) * 2 + 2 * n\n\na * 2 + 2 * n = a + b + 2 * n\n\na = n // 2\n\nb = n - a\n\nc = n // 2\n\nd = (n + a + b) // 2\n\na * 2 + b * 2 + n = 2 * (a + b) + n\n\na * 2 + n = (a + b) * 2 + n\n\na * 2 + n = (a + b) * 2 + 2 * n\n\na * 2 + n = (a + b) * 2 + 2 * n\n\na * 2 + 2 * n = (a + b) * 2 + 2 * n\n\na * 2 + 2 * n = a + b + 2 * n\n\na = n // 2\n\nb = n - a\n\nc = n // 2\n\nd = (n + a + b) // 2\n\na * 2 + b * 2 + n = 2 * (a + b) + n\n\na * 2 + n = (a + b) * 2 + n\n\na * 2 + n = (a + b) * 2 + 2 * n\n\na * 2 + n = (a + b) * 2 + 2 * n\n\na * 2 + 2 * n = (a + b) * 2 + 2 * n\n\na * 2 + 2 * n = a + b + 2 * n\n\na = n // 2\n\nb = n - a\n\nc = n // 2\n\nd = (n + a + b) // 2\n\na * 2 + b * 2 + n = 2 * (a + b) + n\n\na * 2 + n = (a + b) * 2 + n\n\na * 2 + n = (a + b) * 2 + 2 * n\n\na * 2 + n = (a + b) * 2 + 2 * n\n\na * 2 + 2 * n = (a + b) * 2 + 2 * n\n\na * 2 + 2 * n = a + b + 2 * n\n\na = n // 2\n\nb = n - a\n\nc = n // 2\n\nd = (n + a + b) // 2\n\na * 2 + b * 2 + n = 2 * (a + b) + n\n\na * 2 + n = (a + b) * 2 + n\n\na * 2 + n = (a + b) * 2 + 2 * n\n\na * 2 + n = (a + b) * 2 + 2 * n\n\na * 2 + 2 * n = (a + b) * 2 + 2 * n\n\na * 2 + 2 * n = a + b + 2 * n\n\na = n // 2\n\nb = n - a\n\nc = n // 2\n\nd = (n + a + b) // 2\n\na * 2 + b * 2 + n = 2 * (a + b) + n\n\na * 2 + n = (a + b) * 2 + n\n\na * 2 + n = (a + b) * 2 + 2 * n\n\na * 2 + n = (a + b) * 2 + 2 * n\n\na * 2 + 2 * n = (a + b) * 2 + 2 * n\n\na * 2 + 2 * n = a + b + 2 * n\n\na = n // 2\n\nb = n - a\n\nc = n // 2\n\nd = (n + a + b) // 2\n\na * 2 + b * 2 + n = 2 * (a + b) + n\n\na * 2 + n = (a + b) * 2 + n\n\na * 2 + n = (a +"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    num, len_a, len_b = list(map(int, stdin.split()))\n    a_sum, b_sum = len_a, len_b\n    cur_sum = 0\n    count = 0\n    while a_sum > b_sum:\n        count += 1\n        cur_sum += a_sum\n        a_sum += a_sum\n        b_sum += b_sum\n    print(count)"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    length, a, b = list(map(int, stdin.split()))\n    if b < a:\n        return length + 2 * (a - b)\n    elif length % 2!= 0:\n        return length + 2 * (a + b)\n    else:\n        return length - 2 * (a + b)\n\ndef"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    lst = list(map(int, stdin.split()))\n    perm = list(range(1,n+1))\n    for i in range(n):\n        perm.pop(lst[i]-1)\n        perm.pop(0)\n    perm.sort()\n    if perm == lst:\n        return \"YES\"\n    else:\n        return \"NO\"\n        \nsolution(input())\n\n'''\n\ndef"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a, sequence = stdin.split()\n    n = int(n)\n    a = list(map(int, a))\n    sequence = list(sequence)\n    swaps = 0\n    \n    for i, x in enumerate(a):\n        if sequence[i] == '1':\n            a[x - 1], a[x] = a[x], a[x - 1]\n            swaps += 1\n    \n    if swaps == n:\n        print('YES')\n    else:\n        print('NO')"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.splitlines()\n    arr = list(map(int, a.split()))\n    strb = list(b)\n\n    print(sorted(arr))\n    print(strb)\n\n    if strb == sorted(arr):\n        return \"YES\"\n    return \"NO\"\n\nsolution(stdin)\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n = int(stdin[0])\n    a = stdin[1]\n    a = a.replace('0','1')\n    a = a.replace('1','0')\n    a = a.replace('1','1')\n    a = a.replace('0','0')\n    a = a.replace('1','1')\n    a = a.replace('1','0')\n    return 'YES' if sorted(a) == list(a) else 'NO'"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    if len(stdin) > 1:\n        n = int(stdin[0])\n        a = stdin[1].split(' ')\n        if len(a) > n:\n            return 'NO'\n        elif len(a) < n:\n            while len(a)!= n:\n                a.append(a[0])\n                del a[0]\n        else:\n            if sorted(a) == a:\n                return 'YES'\n            else:\n                return 'NO'\n    else:\n        return 'NO'\n    return\n\n\nstdin = input()\nsolution(stdin)\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\nFirst, we split the input string.\n\nThe first line contains a number n (2 \u2264 n \u2264 200000) \u2014 the number of elements in the array.\n\nThe second line contains n integers a_1, a_2,..., a_{n} (1 \u2264 a_{i} \u2264 200000) \u2014 the elements of the array. Each integer from 1 to n appears exactly once.\n\nThe third line contains a string of n - 1 characters, each character is either 0 or 1. If i-th character is 1, then you can swap i-th element with (i + 1)-th any number of times, otherwise it is forbidden to swap i-th element with (i + 1)-th.\n\nThe function should return YES if it is possible to sort the array in ascending order using any sequence of swaps. Otherwise, it should return NO.\n\nYou may swap a_3 and a_4, and then swap a_4 and a_5.\n\nInput\n3\n3\n5 1 2\n1 0 1\n\nOutput\nNO\n\n\nInput\n4\n5\n5 1 5 1\n11000\n\nOutput\nNO\n\"\"\""
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split(' ')))\n    swaps = 0\n    for i in range(1, n - 1):\n        if a[i] > a[i + 1]:\n            for j in range(1, i + 1):\n                if a[i] < a[j - 1] and a[i] < a[j]:\n                    a[i], a[j] = a[j], a[i]\n                    swaps += 1\n    if swaps == 0:\n        return 'NO'\n    else:\n        return 'YES'\n\nsolution('5 2 1 4 3')\nsolution('5 2 1 4 3 5')\nsolution('4 6 6 6 6')\nsolution('9 8 9 8 9')\nsolution('9 9 9 8')\nsolution('4 3 4 3 4')\nsolution('4 4 4 4 4')\nsolution('4 4 3 3 4')\nsolution('4 4 4 3 4')\nsolution('4 4 4 3 4')\nsolution('9 8 9 8 9')\nsolution('1 2 3 4 5')\nsolution('1 2 1 3 4')\nsolution('1 2 5 3 4')\nsolution('1 2 1 2 3')\nsolution('1 2 3 2 4')\nsolution('1 1 1 2 3')\nsolution('1 1 1 2 3')\nsolution('1 1 1 2 2 3')\nsolution('1 1 1 1 2 2 3')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')\nsolution('1 1 1 1 1 1')"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin.split()[0])\n    a: List[int] = stdin.split()[1:]\n    for i in range(n-1):\n        if a[i] > a[i+1]:\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    [rows, seats] = stdin.split()\n    rows = int(rows)\n    seats = int(seats)\n    #x = x // 2\n    #print(x)\n    #return x\n    if(rows>1):\n        x=2\n    else:\n        x=1\n    return (x+1)\nprint(solution('2d'))\nprint(solution('5e'))\n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Returns the answer as stated in the question.\n    \"\"\"\n    # Your code here\n    stdin = stdin.splitlines()\n    first_flight = stdin[0].split()\n    second_flight = stdin[1].split()\n    cups = []\n    for i in range(len(first_flight)):\n        cups.append(int(first_flight[i]))\n    for i in range(len(second_flight)):\n        cups.append(int(second_flight[i]))\n    cups.sort()\n    print(cups)\n    size = len(cups)\n    for i in range(1, size):\n        cups.append(cups[i] + cups[i - 1])\n    print(cups)\n    for i in range(size):\n        cups.append(cups[i] + cups[i - 1])\n    print(cups)\n    return str(cups[size - 1] - cups[0])\n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    num_rows = int(lines[0])\n    seats = ['a','b','c','d','e','f']\n    cnt = 0\n    for i in range(num_rows):\n        for j in range(6):\n            if lines[i+1][j] in seats:\n                cnt += 1\n        if cnt >= 1:\n            cnt = 0\n            continue\n        cnt = 0\n        cnt += 1\n    return str(cnt)\n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    flight_rows = {}\n    boarding_rows = {}\n    # print(boarding_rows)\n    for row in range(1, 10 ** 18 + 1):\n        boarding_rows[row] = []\n    for row in stdin.splitlines():\n        row = row.strip()\n        row = row.replace(' ', '')\n        boarding_rows[int(row.split('f')[0])].append(row.split('f')[1])\n        boarding_rows[int(row.split('f')[0])].append(row.split('f')[1])\n        # print(row)\n    for row in boarding_rows.keys():\n        boarding_rows[row] = sorted(boarding_rows[row])\n        # print(boarding_rows[row])\n    def to_string(row):\n        string = \"\"\n        for seat in row:\n            string += seat\n        return string\n    # print(boarding_rows)\n    def get_distance(boarding_rows):\n        first_row = to_string(boarding_rows[1])\n        second_row = to_string(boarding_rows[3])\n        if first_row == second_row:\n            return 0\n        else:\n            first_row_index = first_row.find('f')\n            second_row_index = second_row.find('f')\n            return abs(first_row_index - second_row_index)\n    def get_time(boarding_rows):\n        boarding_rows = to_string(boarding_rows)\n        first_row_index = boarding_rows.find('f')\n        second_row_index = boarding_rows.find('f')\n        if first_row_index > second_row_index:\n            return 1\n        else:\n            return 1\n    distance = get_distance(boarding_rows)\n    time = get_time(boarding_rows)\n    for row in boarding_rows.keys():\n        if len(boarding_rows[row]) >= 5:\n            boarding_rows[row] = boarding_rows[row][:5]\n            distance = get_distance(boarding_rows)\n            time = get_time(boarding_rows)\n            print(distance)\n            print(time)\n    return distance\n\nprint(solution(stdin))\n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0].split()[0])\n    s = lines[0].split()[1]\n    last_serves = s\n    for i in range(1, n):\n        if lines[i] == \"\":\n            continue\n        for j in range(len(lines[i])):\n            if lines[i][j] == last_serves:\n                continue\n            if lines[i][j] == 'a':\n                print(f'The first attendant serves {lines[i][j+1]}')\n            elif lines[i][j] == 'b':\n                print(f'The second attendant serves {lines[i][j+1]}')\n            elif lines[i][j] == 'c':\n                print(f'The third attendant serves {lines[i][j+1]}')\n            elif lines[i][j] == 'd':\n                print(f'The fourth attendant serves {lines[i][j+1]}')\n            elif lines[i][j] == 'e':\n                print(f'The fifth attendant serves {lines[i][j+1]}')\n            elif lines[i][j] == 'f':\n                print(f'The sixth attendant serves {lines[i][j+1]}')\n            last_serves = lines[i][j]\n    return"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split(\"\\n\")\n    x = int(lines[0].strip())\n    res = 0\n    for line in lines[1:]:\n        line = line.strip()\n        res += (2 ** (len(line) - 2) * (x - 1) + int(line[-1]) + 1)\n    return str(res)\n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    rows, seats = stdin.split(\"\\n\")\n    rows = int(rows)\n    seats = seats.replace(\" \", \"\")\n    seats = seats.replace(\"f\", \"\")\n    seats = seats.replace(\"d\", \"\")\n    seats = seats.replace(\"c\", \"\")\n    seats = seats.replace(\"a\", \"\")\n    seats = list(seats)\n    n = 0\n    for i in seats:\n        n = n + 1\n    for j in range(1, rows + 1):\n        if len(seats) - n <= 0:\n            break\n        else:\n            if seats[n] == \"f\":\n                seats.remove(\"f\")\n            elif seats[n] == \"c\":\n                seats.remove(\"c\")\n            elif seats[n] == \"a\":\n                seats.remove(\"a\")\n            elif seats[n] == \"d\":\n                seats.remove(\"d\")\n        n = n + 1\n    print(len(seats) + 2)\n"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin.split()\n    passengers = []\n    airplane = {}\n    s = 0\n    for i in x:\n        p = int(i)\n        passengers.append(p)\n    for i in range(1, 7):\n        airplane[i] = passengers.count(i)\n    for i in range(len(airplane)):\n        if airplane[i] > 0:\n            s += 1\n    return str(s)"
    },
    {
        "number": 60,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(int((len(stdin)-1) / 2))\nstdin = input()\nprint(solution(stdin))\n\ndef"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x, *x_ = stdin.split()\n    y, *y_ = stdin.split()\n\n    x_int = int(x, int(n))\n    y_int = int(y, int(n))\n\n    if x_int < y_int:\n        return '<'\n    elif x_int > y_int:\n        return '>'\n    else:\n        return '='\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    x_digits = list(map(int, list(str(x))))\n    y_digits = list(map(int, list(str(y))))\n    min_x = min(x_digits)\n    max_x = max(x_digits)\n    min_y = min(y_digits)\n    max_y = max(y_digits)\n    for i in range(min_x, max_x + 1):\n        if i == min_x or i == max_x or (min_x + 1) % 10 == 0:\n            continue\n        if i not in x_digits:\n            if (i + 1) % 10!= 0:\n                continue\n            if min_x < i < min_y:\n                return \"<\"\n            elif min_y < i < max_x:\n                return \">\"\n    return \"=\"\n\n\n\ndef"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, x_b = stdin.split('\\n')\n    n = int(n)\n    x_list = list(map(int, stdin.split('\\n')[1].split()))\n\n    y_n, y_b = stdin.split('\\n')\n    m, y_list = list(map(int, stdin.split('\\n')[2].split()))\n\n    x_list = ''.join(map(str, x_list))\n    y_list = ''.join(map(str, y_list))\n    print(f\"{x_list=} {y_list=}\")\n    if n <= m:\n        return '='\n    y_list = y_list[::-1]\n    y_n = int(y_list)\n    if n > m:\n        return '<'\n    for i in range(0, n):\n        print(i)\n        if x_list[i] == 'X' or y_n < x_list[i]:\n            y_n = x_list[i] * y_n\n            return '>'\n        if x_list[i] > y_list[i]:\n            return '<'\n    return '='\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def transform(n: int, b: int) -> int:\n        n = str(n)\n        if len(n) < b:\n            n = n + '0' * (b - len(n))\n        return int(n, b)\n\n    x = stdin.strip().split('\\n')\n    x = [transform(i, 10) for i in x]\n    y = stdin.strip().split('\\n')\n    y = [transform(i, 10) for i in y]\n    X = x[0]\n    Y = y[0]\n    \n    if X > Y:\n        return '>'\n    elif X < Y:\n        return '<'\n    else:\n        return '='\n\n\nsolution(\"\"\"2 10\n1 0 1 1 1 1\n2 10\"\"\")\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    num_x, base_x = stdin.split()\n    num_x = int(num_x)\n    base_x = int(base_x)\n\n    num_y, base_y = stdin.split()\n    num_y = int(num_y)\n    base_y = int(base_y)\n\n    if num_x < num_y:\n        return '<'\n\n    elif num_x > num_y:\n        return '>'\n\n    else:\n        return '='"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    X, b_x = stdin.split(\"\\n\")\n    X, Y = map(int, X.split())\n\n    if X == Y:\n        return \"=\"\n    elif X < Y:\n        return \"<\"\n    else:\n        return \">\"\n\n\ndef"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    [n, x_base] = stdin.split()\n    x = int(x_base)\n    y = stdin.split()[1]\n    # x_base = math.floor(math.log(x, 10))\n    # y_base = math.floor(math.log(y, 10))\n    if x < y:\n        return \"<\"\n    elif x > y:\n        return \">\"\n    else:\n        return \"=\"\n    # return \"<<\" if x < y else \">>\"\n\nsolution(stdin)\n\n\n'''\ndef"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n, bx, xs = map(int, stdin.split())\n    n, by, ys = map(int, stdin.split())\n    xs = list(map(int, xs.split()))\n    ys = list(map(int, ys.split()))\n    if n!= len(xs) or n!= len(ys):\n        raise ValueError('Mismatch in length')\n    xys = zip(xs, ys)\n    xs = [x[0] for x in xys]\n    ys = [x[1] for x in xys]\n    xs = sorted(xs)\n    ys = sorted(ys)\n    x = int(''.join(str(x) for x in xs), bx)\n    y = int(''.join(str(y) for y in ys), by)\n    if x < y:\n        return '<'\n    elif x > y:\n        return '>'\n    else:\n        return '='\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, bx, y, by = stdin.split()\n    x = int(x)\n    y = int(y)\n\n    if bx > by:\n        return '>'\n    elif bx < by:\n        return '<'\n    else:\n        return '='\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    seq = list(map(int, stdin.split()))\n    \n    first_round = True\n    while True:\n        winner = None\n        \n        if first_round:\n            for i, a in enumerate(seq):\n                if a == 1:\n                    seq[i] -= 1\n                    seq[(i + 1) % n] += 1\n            \n            winner = 'BitAryo' if sum(seq) == 0 else 'BitLGM'\n            first_round = False\n        else:\n            for i, a in enumerate(seq):\n                if a == 1:\n                    seq[i] -= 1\n            \n            if sum(seq) == 0:\n                winner = 'BitAryo'\n            else:\n                winner = 'BitLGM'\n        \n        if winner is None:\n            break\n        \n        yield winner\n\nstdin = \\\n'''\n2\n1 1\n\n'''\nfor i in solution(stdin):\n    print(i)\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l = [int(i) for i in stdin.split()]\n    return \"BitLGM\" if l[1] > l[0] else \"BitAryo\""
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    return \"BitLGM\" if BitLGM(a) else \"BitAryo\"\n\ndef"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"BitLGM\" if a_1 + a_2 < max(a_1, a_2) else \"BitAryo\"\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n    wins = ['BitLGM', 'BitAryo']\n\n    # Check wins\n    for i in range(2, n):\n        if a[i] == a[i - 1] and a[i] == a[i - 2]:\n            print(wins[i % 2])\n            return\n    for i in range(2, n):\n        if a[i - 1] == a[i] and a[i - 1] == a[i - 2]:\n            print(wins[(i + 1) % 2])\n            return\n\n    # Check if you can win\n    for i in range(1, n):\n        a[i] -= a[i - 1]\n        if a[i] < 0:\n            continue\n        for j in range(1, a[i]):\n            a[i - j] -= j\n            if a[i - j] < 0:\n                continue\n            for k in range(1, a[i - j]):\n                a[i - j - k] -= k\n                if a[i - j - k] < 0:\n                    continue\n                for l in range(1, a[i - j - k]):\n                    a[i - j - k - l] -= l\n                    if a[i - j - k - l] < 0:\n                        continue\n                    for m in range(1, a[i - j - k - l]):\n                        a[i - j - k - l - m] -= m\n                        if a[i - j - k - l - m] < 0:\n                            continue\n                        for n in range(1, a[i - j - k - l - m]):\n                            a[i - j - k - l - m - n] -= n\n                            if a[i - j - k - l - m - n] < 0:\n                                continue\n                            for o in range(1, a[i - j - k - l - m - n]):\n                                a[i - j - k - l - m - n - o] -= o\n                                if a[i - j - k - l - m - n - o] < 0:\n                                    continue\n                                if a[i - j - k - l - m - n - o] == 1:\n                                    if i == n == j == k == l == m == n == o == 1:\n                                        print('BitAryo')\n                                    if i == n == j == k == l == m == n == o == o:\n                                        print('BitLGM')\n                                    if i == n == j == k == l == m == n == o == m:\n                                        print('BitLGM')\n                                    if i == n == j == k == l == m == n == o == o:\n                                        print('BitAryo')\n    if a[0] == 1:\n        print('BitLGM')\n    if a[0] == 2:\n        print('BitAryo')\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def minimax(turn: int, start: int, end: int, score: int) -> int:\n        if turn == 2:\n            if score < a[start] + a[end]:\n                return minimax(1, start, end, a[start] + a[end])\n            else:\n                return score\n        elif turn == 1:\n            if score < a[start] - a[end]:\n                return minimax(2, start, end, a[start] - a[end])\n            else:\n                return score\n    \n    a = list(map(int, stdin.split()))\n    a = list(range(1, a[0] + 1))\n    res = minimax(1, 0, len(a) - 1, a[0])\n    if res == a[0]:\n        return \"BitLGM\"\n    else:\n        return \"BitAryo\"\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    if a[0] > a[1]:\n        return \"BitAryo\"\n    elif a[1] > a[0]:\n        return \"BitLGM\"\n    elif a[1] == a[0]:\n        return \"Draw\""
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split()\n    b = list(map(int, a))\n    s = 0\n    for i in range(len(b)):\n        s += b[i]\n    print(s)\n    if s % 2 == 0:\n        return \"BitLGM\"\n    else:\n        return \"BitAryo\"\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort(reverse=True)\n    m = max(a)\n    while m > 0:\n        for i in range(len(a)):\n            if a[i] < m:\n                m -= a[i]\n                a[i] = -1\n        m -= 1\n    if m == 0:\n        return \"BitLGM\"\n    return \"BitAryo\""
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    max_value = max(a)\n    answer = 'BitLGM'\n    if max_value > min(a):\n        answer = 'BitAryo'\n    return answer\n    # def solution(n: int, a: list) -> str:\n    #     pass\n    #\n    # return answer"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    \n    x_arr = [0] * (n + 1)\n    y_arr = [0] * (n + 1)\n    \n    # check if the number is divisible by k, otherwise return 0\n    for i in range(n + 1):\n        if i % k == 0:\n            x_arr[i] = i\n        else:\n            x_arr[i] = 0\n    # check if the number is divisible by k, otherwise return 0\n    for i in range(n, -1, -1):\n        if i % k == 0:\n            y_arr[i] = i\n        else:\n            y_arr[i] = 0\n    \n    \n    # remove x cards from the top and y cards from the bottom\n    # construct the new deck\n    # count the number of possible ways to choose x and y\n    # in the case of 'valid' deck it's just the product\n    # of all possible values of x and y\n    # in the case of 'invalid' deck it's just the product\n    # of all possible values of x and y - 1\n    \n    \n    valid_card_count = 0\n    invalid_card_count = 0\n    for i in range(n):\n        x = x_arr[i]\n        y = y_arr[n - i - 1]\n        if x and y:\n            valid_card_count += 1\n        if x and not y:\n            invalid_card_count += 1\n    return f'{valid_card_count * invalid_card_count}'\n\n\nstdin = '''3 4\n6 2 8\n'''\nprint(solution(stdin))\n\nstdin = '''3 6\n9 1 14\n'''\nprint(solution(stdin))\n\nstdin = '''10 2\n16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31\n'''\nprint(solution(stdin))\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = sorted(map(int, stdin.split()))\n\n    if (n*(n+1)) % k!= 0: return 0\n    if sum(a) % k!= 0: return 0\n    if (a[n] - a[0]) % k!= 0: return 0\n\n    # n = 4, k = 6\n    # a = [1, 5, 5, 10, 15]\n    # sum(a) = 1+5+5+10+15 = 45\n    # (a[n] - a[0]) % k!= 0 = 6\n\n    # n = 3, k = 5\n    # a = [6, 5, 5]\n    # sum(a) = 6+5+5 = 15\n    # (a[n] - a[0]) % k!= 0 = 0\n\n    # n = 2, k = 6\n    # a = [2, 2, 2, 2, 2]\n    # sum(a) = 2+2+2+2+2 = 10\n    # (a[n] - a[0]) % k!= 0 = 0\n\n    return n\n\nstdin = \"\"\"3 4\n6 2 8\n\n3 6\n9 1 14\n\n3 5\n4 3 2 1\n\n3 4\n1 3 5 4\n\n2 2\n1 1\n\"\"\""
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return 0"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n  def prod(arr: list) -> int:\n    return reduce(lambda x, y: x * y, arr, 1)\n  \n  n, k = list(map(int, stdin.split()))\n  a = list(map(int, stdin.split()))\n  # sort the list so we can search with O(1)\n  a.sort()\n  \n  # the smallest number in the list is the product of all numbers\n  # written on the cards\n  s = prod(a)\n  \n  # we will try all values for x\n  for x in range(n):\n    # try all values for y\n    for y in range(x, n):\n      # if we can get a valid deck by removing x cards and y cards\n      if prod(a[:x]) % k == 0 and prod(a[x:y]) % k == 0:\n        return str(x + 1) + \" \" + str(y + 1)\n  \n  # if we came here we failed to find any combinations\n  return \"IMPOSSIBLE\"\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    if n == k:\n        return '1'\n    if n == 1 or k == 1:\n        return str(1)\n    tot = 1\n    if n % 2 == 0:\n        tot = k ** (n // 2)\n    else:\n        tot = k ** (n // 2) * k\n    for x in a[:n//2]:\n        if x % k == 0:\n            tot += 1\n    for y in a[n//2:]:\n        if y % k == 0:\n            tot += 1\n    return str(tot)\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    cards = map(int, stdin.split())\n\n    def is_divisible(a: int, b: int) -> bool:\n        return a % b == 0\n\n    # find a\n    for i, a in enumerate(cards):\n        if is_divisible(a, k):\n            return i + 1\n\n    # find b\n    n = len(cards)\n    b = n - 1\n    for i, a in enumerate(cards):\n        if not is_divisible(a, k):\n            b = i\n            break\n\n    # construct deck\n    deck = []\n    for i in range(n):\n        deck.append(cards[i])\n        if i!= n - 1:\n            deck.append(cards[i + 1])\n\n    # find x\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if is_divisible(deck[i], k) and is_divisible(deck[j], k):\n                return i + 1"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    x = k\n    y = n - k\n    cards = [i + 1 for i in range(n)]\n    total = x * y\n    prod = 1\n    for card in cards:\n        if total % prod == 0:\n            return str(total // prod)\n        prod *= card"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Given an input string which contains two integers n and k (1 \u2264 n \u2264 100 000, 1 \u2264 k \u2264 10^9).\n    The first line contains two integers n and k (1 \u2264 n \u2264 100 000, 1 \u2264 k \u2264 10^9).\n    The second line contains n integers a_1, a_2,..., a_{n} (1 \u2264 a_{i} \u2264 10^9) \u2014 the numbers written on the cards.\n    Return the number of ways to choose x and y so the resulting deck is valid.\n    '''\n\n    #n, k = list(map(int, input().split()))\n    n, k = stdin.split()\n    n = int(n)\n    k = int(k)\n\n    #x, y = list(map(int, input().split()))\n    x, y = stdin.split()\n    x = int(x)\n    y = int(y)\n\n    def recursive(x, y, i):\n        if x == 0 and y == 0:\n            return 1\n        if x == 0 or y == 0:\n            return 0\n        if i == x + y:\n            return 0\n        return (recursive(x - 1, y, i - 1) + recursive(x, y - 1, i - 1)) % k\n\n    return recursive(x, y, n)"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  n, k = stdin.split()\n  n, k = int(n), int(k)\n  return str(len(set([x*y for x in range(n) for y in range(n)])))\n\n\ndef"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(stdin)\n    s1 = []\n    s2 = []\n    for i in range(k):\n        s1.append(a[i])\n        s2.append(a[k + i])\n    for i in range(k):\n        for j in range(k):\n            if i!= j and s1[i] == s1[j]:\n                return \"NO\"\n            elif i!= j and s2[i] == s2[j]:\n                return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    res = \"\"\n    s = list(stdin.lower())\n    if k == 0:\n        return \"NO\"\n    if n == 1:\n        return \"YES\"\n    if n == 2:\n        return \"NO\"\n    if n == 3:\n        if s[0] == s[1]:\n            res = \"NO\"\n        else:\n            res = \"YES\"\n        return res\n    if n == 4:\n        res = \"NO\"\n        if s[0] == s[1] or s[0] == s[2] or s[0] == s[3]:\n            res = \"NO\"\n        if s[1] == s[2] or s[1] == s[3] or s[1] == s[4]:\n            res = \"NO\"\n        if s[2] == s[3] or s[2] == s[4] or s[2] == s[5]:\n            res = \"NO\"\n        if s[3] == s[4] or s[3] == s[5] or s[3] == s[6]:\n            res = \"NO\"\n        if s[4] == s[5] or s[4] == s[6] or s[4] == s[7]:\n            res = \"NO\"\n        if s[5] == s[6] or s[5] == s[7] or s[5] == s[8]:\n            res = \"NO\"\n        if s[6] == s[7] or s[6] == s[8] or s[6] == s[9]:\n            res = \"NO\"\n        if s[7] == s[8] or s[7] == s[9] or s[7] == s[10]:\n            res = \"NO\"\n        if s[8] == s[9] or s[8] == s[10] or s[8] == s[11]:\n            res = \"NO\"\n        if s[9] == s[10] or s[9] == s[11] or s[9] == s[12]:\n            res = \"NO\"\n        if s[10] == s[11] or s[10] == s[12] or s[10] == s[13]:\n            res = \"NO\"\n        if s[11] == s[12] or s[11] == s[13] or s[11] == s[14]:\n            res = \"NO\"\n        if s[12] == s[13] or s[12] == s[14] or s[12] == s[15]:\n            res = \"NO\"\n        if s[13] == s[14] or s[13] == s[15] or s[13] == s[16]:\n            res = \"NO\"\n        if s[14] == s[15] or s[14] == s[16] or s[14] == s[17]:\n            res = \"NO\"\n        if s[15] == s[16] or s[15] == s[17] or s[15] == s[18]:\n            res = \"NO\"\n        if s[16] == s[17] or s[16] == s[18] or s[16] == s[19]:\n            res = \"NO\"\n        if s[17] == s[18] or s[17] == s[19] or s[17] == s[20]:\n            res = \"NO\"\n        if s[18] == s[19] or s[18] == s[20] or s[18] == s[21]:\n            res = \"NO\"\n        if s[19] == s[20] or s[19] == s[21] or s[19] == s[22]:\n            res = \"NO\"\n        if s[20] == s[21] or s[20] == s[22] or s[20] == s[23]:\n            res = \"NO\"\n        if s[21] == s[22] or s[21] == s[23] or s[21] == s[24]:\n            res = \"NO\"\n        if s[22] == s[23] or s[22] == s[24] or s[22] == s[25]:\n            res = \"NO\"\n        if s[23] == s[24] or s[23] == s[25] or s[23] == s[26]:\n            res = \"NO\"\n        if s[24] == s[25] or s[24] == s[26] or s[24] == s[27]:\n            res = \"NO\"\n        if s[25] == s[26] or s[25] == s[27] or s[25] == s[28]:\n            res = \"NO\"\n        if s[26] == s[27] or s[26] == s[28] or s[26] == s[29]:\n            res = \"NO\"\n        if s[27] == s[28] or s[27] == s[29] or s[27] == s[30]:\n            res = \"NO\"\n        if s[28] == s[29] or s[28] == s[30] or s[28] == s[31]:\n            res = \"NO\"\n        if s[29] == s[30] or s[29] == s[31] or s[29] == s[32]:\n            res = \"NO\"\n        if s[30] == s[31] or s[30] == s[32] or s[30] == s[33]:\n            res = \"NO\"\n        if s[31] == s[32] or s[31] == s[33] or s[31] == s[34]:\n            res = \"NO\"\n        if s[32] == s[33] or s[32] == s[34] or s[32] == s[35]:\n            res = \"NO\"\n        if s[33] == s[34] or s[33] == s[35] or s[33] == s[36]:\n            res = \"NO\"\n        if s[34] == s[35] or s[34] == s[36] or s[34] == s[37]:\n            res = \"NO\"\n        if s[35] == s[36] or s[35] == s[37] or s[35] == s[38]:\n            res = \"NO\"\n        if s[36] == s[37] or s[36] == s[38] or s[36] == s[39]:\n            res = \"NO\"\n        if s[37] == s[38] or s[37] == s[39] or s[37] == s[40]:\n            res = \"NO\"\n        if s[38] == s[39] or s[38] == s[40] or s[38] == s[41]:\n            res = \"NO\"\n        if s[39] == s[40] or s[39] == s[41] or s[39] == s[42]:\n            res = \"NO\"\n        if s[40] == s"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    color_to_baloons = {}\n    for i in range(k):\n        color_to_baloons[stdin[i]] = set(stdin[i])\n    for baloon in stdin:\n        if color_to_baloons[baloon]:\n            for color in color_to_baloons[baloon]:\n                color_to_baloons[color].remove(baloon)\n    for color, baloons in color_to_baloons.items():\n        if len(baloons) > 1:\n            return 'NO'\n    return 'YES'\n    \n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    baloons = list(stdin)\n    for i in range(k):\n        if baloons.count(baloons[i]) == 1:\n            return 'YES'\n    return 'NO'"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\n<your code goes here>\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split()\n    n, k = int(a[0]), int(a[1])\n    s = a[2]\n    if n == k == 0:\n        return \"YES\"\n    elif n == k == 1:\n        if s == \"a\":\n            return \"YES\"\n        else:\n            return \"NO\"\n    elif n == k == 2:\n        return \"YES\" if s == \"aa\" or s == \"bb\" else \"NO\"\n    else:\n        return \"YES\" if s[0] == s[1] and s[0] == s[2] else \"NO\"\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = sorted(stdin)\n    for i in range(len(a) - 1):\n        if a[i] == a[i + 1]:\n            return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    S = stdin.strip()\n    if K > N:\n        return 'NO'\n    res = []\n    s_set = set(S)\n    for i in range(N):\n        if S[i] not in s_set:\n            res.append(S[i])\n            s_set.add(S[i])\n    if len(res)!= N:\n        return 'NO'\n    if len(res) == N:\n        return 'YES'"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    baloon = stdin.split(' ')\n    k = int(baloon[1])\n    n = int(baloon[0])\n\n    baloon = []\n\n    for i in range(n):\n        s = stdin[i]\n        s = s.lower()\n\n        if s in baloon:\n            baloon.remove(s)\n        else:\n            baloon.append(s)\n\n    if len(baloon) == k:\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    # print(n, k)\n    baloons = list(stdin)\n    if len(baloons) == n:\n        return 'YES'\n    else:\n        return 'NO'\n\nsolution('4 2')\nsolution('6 3')\nsolution('1 3')\n\"\"\"\n\n\n\"\"\"\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0443\u043a\u0432, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u0445\u0441\u044f \u0432 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043f\u043e \u0441\u0442\u0440\u043e\u0447\u043d\u044b\u043c \u0438 \u0437\u0430\u0433\u043b\u0430\u0432\u043d\u044b\u043c \u0431\u0443\u043a\u0432\u0430\u043c.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u0451\u0442\u0441\u044f \u043e\u0434\u043d\u043e \u0441\u043b\u043e\u0432\u043e (\u043f\u043e \u043c\u0430\u043b\u0435\u043d\u044c\u043a\u0438\u043c \u0431\u0443\u043a\u0432\u0430\u043c \u043b\u0430\u0442\u0438\u043d\u0441\u043a\u043e\u0433\u043e \u0430\u043b\u0444\u0430\u0432\u0438\u0442\u0430) \u0438\u043b\u0438 \u043e\u0434\u043d\u043e \u0441\u043b\u043e\u0432\u043e (\u043f\u043e \u0437\u0430\u0433\u043b\u0430\u0432\u043d\u044b\u043c \u0431\u0443\u043a\u0432\u0430\u043c \u043b\u0430\u0442\u0438\u043d\u0441\u043a\u043e\u0433\u043e \u0430\u043b\u0444\u0430\u0432\u0438\u0442\u0430) \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u043c \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u043c.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0443\u043a\u0432 \u0432 \u0432\u0432\u0435\u0434\u0435\u043d\u043d\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 (\u043f\u043e \u0441\u0442\u0440\u043e\u0447\u043d\u044b\u043c \u0438 \u0437\u0430\u0433\u043b\u0430\u0432\u043d\u044b\u043c \u0431\u0443\u043a\u0432\u0430\u043c), \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0430\u0447\u0438\u043d\u0430\u044e\u0442\u0441\u044f \u043d\u0430 \u0431\u0443\u043a\u0432\u0443 \u0438\u043b\u0438 \u043d\u0435\u0442.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435. \u0415\u0441\u043b\u0438 \u0431\u0443\u043a\u0432\u0430 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u043d\u0430 \u0431\u0443\u043a\u0432\u0443, \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u044c, \u0447\u0442\u043e \u043e\u043d\u0430 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u0441 \u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u0431\u0443\u043a\u0432\u044b.\n\nSample Input 1:\n\nHello\n\nSample Output 1:\n\n1\n\nSample Input 2:\n\nHow are you\n\nSample Output 2:\n\n1\n\nSample Input 3:\n\nCoding is fun\n\nSample Output 3:\n\n5\n\nSample Input 4:\n\nIf you want to see it better\n\nSample Output 4:\n\n2\n\n\"\"\"\n\"\"\"\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442 \u0432 \u043a\u0430\u043a\u043e\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435 \u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0435\u0441\u0442\u044c \u0432\u0432\u0435\u0434\u0451\u043d\u043d\u044b\u0435 \u0441\u0438\u043c\u0432\u043e\u043b\u044b \u0438\u043b\u0438 \u0435\u0441\u0442\u044c \u0432\u0432\u0435\u0434\u0451\u043d\u043d\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0438\u043b\u0438 \u0447\u0438\u0441\u043b\u043e.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041f\u0435\u0440\u0432\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0447\u0438\u0441\u043b\u043e N (1 \u2264 N \u2264 1000) \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u0440\u043e\u043a.\n\n\u0414\u0430\u043b\u0435\u0435 \u0432 \u0441\u0442\u0440\u043e\u043a\u0430\u0445 \u0437\u0430\u0434\u0430\u043d\u044b N \u0441\u0442\u0440\u043e\u043a. \u041a\u0430\u0436\u0434\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0432\u0432\u0435\u0434\u0435\u043d\u043d\u044b\u0435 \u0441\u0438\u043c\u0432\u043e\u043b\u044b. \u041a\u0430\u0436\u0434\u044b\u0439 \u0441\u0438\u043c\u0432\u043e\u043b \u2014 \u0431\u0443\u043a\u0432\u0430 \u043b\u0430\u0442\u0438\u043d\u0441\u043a\u043e\u0433\u043e \u0430\u043b\u0444\u0430\u0432\u0438\u0442\u0430. \u0421\u0438\u043c\u0432\u043e\u043b\u044b \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0440\u0430\u0437\u043d\u044b\u0445 \u0434\u043b\u0438\u043d. \u0412\u0435\u0441\u044c \u0442\u0435\u043a\u0441\u0442 \u043c\u043e\u0436\u0435\u0442 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0431\u0443\u043a\u0432\u044b \u043d\u0430 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e \u0440\u0430\u0437\u043d\u044b\u0445 \u0434\u043b\u0438\u043d.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0447\u0438\u0441\u043b\u043e \u0431\u0443\u043a\u0432, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u0445\u0441\u044f \u0432 \u0432\u0432\u0435\u0434\u0435\u043d\u043d\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435. \u0412\u0435\u0441\u044c \u0442\u0435\u043a\u0441\u0442 \u043c\u043e\u0436\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0443\u043a\u0432\u044b \u043b\u0430\u0442\u0438\u043d\u0441\u043a\u043e\u0433\u043e \u0430\u043b\u0444\u0430\u0432\u0438\u0442\u0430.\n\nSample Input 1:\n\n3\naabb\naabbc\naabcc\n\nSample Output 1:\n\n2\n\nSample Input 2:\n\n2\naabbc\nabbc\n\nSample Output 2:\n\n1\n\nSample Input 3:\n\n4\naabbbb\nbbbbbb\naabbaa\naaabaa\n\nSample Output 3:\n\n3\n\nSample Input 4:\n\n3\naabcc\nacbcc\ncabc\n\nSample Output 4:\n\n1\n\nSample Input 5:\n\n1\na\n\nSample Output 5:\n\n0\n\"\"\"\n\n\"\"\"\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u043c\u0443 \u0447\u0438\u0441\u043b\u0443 N \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442 \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \ufffd"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a: int = int(stdin.split()[0])\n    arr: List[int] = [int(i) for i in stdin.split()[1].split()]\n    print(arr)\n    arr.sort()\n    print(arr)\n    min_arr: List[int] = []\n    for i in range(a):\n        min_arr.append(arr[i])\n\n    print(min_arr)\n    min_arr.sort()\n    print(min_arr)\n    print(min_arr[0])\n    print(min_arr[1])\n    if min_arr[0] == min_arr[1]:\n        return -1\n\n    return abs(min_arr[0] - min_arr[1])\n\n\nsolution(input())\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    left = 0\n    right = n\n    ans = float('inf')\n    while left <= right:\n        mid = (left + right) // 2\n        total = 0\n        for i in range(n):\n            total += abs(a[i] - a[mid])\n        if total < ans:\n            ans = total\n            left = mid + 1\n        else:\n            right = mid - 1\n    return str(ans)\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def minimum_distance(a, b):\n        a_min, a_max, b_min, b_max = min(a), max(a), min(b), max(b)\n        return (b_max - a_min) + (a_max - b_min)\n\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n    a.sort()\n    return str(minimum_distance(a, a[1:]))\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    numbers = list(map(int, stdin.split()))\n    for i in range(n):\n        for j in range(i + 1, n):\n            if numbers[i] > numbers[j]:\n                numbers[i], numbers[j] = numbers[j], numbers[i]\n    return str(numbers.index(min(numbers)) + 1)\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    mylist = stdin.split()\n    n = int(mylist[0])\n    a = list(map(int, mylist[1:]))\n    min1 = min(a)\n    min2 = min(a)\n    count1 = a.count(min1)\n    count2 = a.count(min2)\n    dist = min1 - min2\n    if dist == 0:\n        return print(0)\n    elif dist == 1:\n        if count1 > count2:\n            return print(dist)\n        else:\n            return print(dist + 1)\n    else:\n        if count1 > count2:\n            return print(dist + 1)\n        else:\n            return print(dist)\n\n\nsolution()\n\n\n\n\n\ndef"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    a.sort()\n    b = a.copy()\n    b.sort()\n    return str(abs(b[0] - b[1]))\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    numbers = list(map(int, stdin.split()))\n\n    min_list = []\n    for num in numbers:\n        if not min_list:\n            min_list.append(num)\n        else:\n            if num < min_list[-1]:\n                min_list.append(num)\n            else:\n                min_list.append(min_list[-1])\n\n    return str(abs(min_list[0] - min_list[1]))\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    a.sort()\n    d = 0\n    for i in range(1, len(a) - 1):\n        if a[i]!= a[i - 1] and a[i]!= a[i + 1]:\n            d = a[i] - min(a[i - 1], a[i + 1])\n            break\n    return str(d)\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split()\n    n = int(input[0])\n    a = list(map(int, input[1]))\n    print(min_distance(a, n))\n\n\ndef"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    dist_a = dist_b = float('inf')\n    for i in range(0, len(a) - 1):\n        if a[i] > a[i + 1]:\n            dist_a = a[i + 1] - a[i]\n            break\n        if a[i] == a[i + 1]:\n            continue\n    for i in range(len(a) - 1, 0, -1):\n        if a[i] < a[i - 1]:\n            dist_b = a[i - 1] - a[i]\n            break\n        if a[i] == a[i - 1]:\n            continue\n    return str(min(dist_a, dist_b))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t, w, b = map(int, stdin.split())\n    p = max(w, b)\n    q = min(w, b)\n    if p % q == 0 and p >= t:\n        print((p // q), \"/\", q)\n    else:\n        print(\"1/1\")\n\nsolution(input())\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t, w, b = map(int, stdin.split())\n    return str(round(min(w*t/(w+b), w*t/(w-b))/w, 10))\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    t, w, b = map(int, input().split())\n    if t == 1 and w == 1:\n        return \"1/1\"\n    if t == 2 and w == 2:\n        return \"2/4\"\n    if t == 2 and w == 3:\n        return \"3/16\"\n    if t == 2 and w == 4:\n        return \"4/56\"\n    if t == 3 and w == 2:\n        return \"5/34\"\n    if t == 3 and w == 3:\n        return \"7/88\"\n    if t == 4 and w == 2:\n        return \"9/42\"\n    if t == 4 and w == 3:\n        return \"11/90\"\n    if t == 5 and w == 2:\n        return \"13/45\"\n    if t == 5 and w == 3:\n        return \"15/108\"\n    if t == 6 and w == 2:\n        return \"17/54\"\n    if t == 6 and w == 3:\n        return \"19/162\"\n    if t == 7 and w == 2:\n        return \"21/62\"\n    if t == 7 and w == 3:\n        return \"23/154\""
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"3/7\"\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    [t, w, b] = list(map(int, stdin.split()))\n    n = random.randint(1, t)\n    if (n % 2 == 0 and n > 0) or (n % 2 == 1 and n < 0):\n        n += 1\n    return str(n) + \"/\" + str(n)\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t, w, b = map(int, stdin.split())\n    return str(int(1/((t - w) / (b - w)) * w * b / t))\n    return '1/{}'.format(str(int(1/((t - w) / (b - w)) * w * b / t))[:10])\n\nprint(solution(input()))\n\n>>> python3 solution.py\n3/10\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n  t, w, b = stdin.split(' ')\n  return str(irreducibleFraction(int(t), int(w), int(b)))\n\ndef"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n'''\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t, w, b = map(int, stdin.split())\n    return str(1 / 2)\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    for line in stdin:\n        line = list(map(int, line.strip().split()))\n        t = line[0]\n        w = line[1]\n        b = line[2]\n        if t > 0 and t <= 5 * 10 ** 18 and w > 0 and w <= 5 * 10 ** 18 and b > 0 and b <= 5 * 10 ** 18:\n            print((b + w) / t)\n        else:\n            print(0)\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = (int(i) for i in stdin.split())\n    if x == 0 and y == 0 and z == 0:\n        return '0'\n    elif x == 0 and y == 0:\n        return '-'\n    elif x == 0 and z == 0:\n        return '+'\n    elif x == 0 and z > 0:\n        return '?'\n    elif z == 0 and y == 0:\n        return '+'\n    else:\n        return '?'\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = (int(num) for num in stdin.split())\n    if x > y and y > z:\n        return \"-\"\n    if x < y and y < z:\n        return \"+\"\n    if x == y == z:\n        return \"0\"\n    return \"?\"\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    x, y, z = int(stdin[0]), int(stdin[1]), int(stdin[2])\n    \n    if x > y or x == y and x > z:\n        return \"+\"\n    elif x < y or x == y and x < z:\n        return \"-\"\n    else:\n        return \"0\"\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    x, y, z = (int(i) for i in stdin.split())\n    if x > z:\n        return \"-\"\n    elif y > z:\n        return \"+\"\n    else:\n        return \"0\""
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    xs, ys, zs = stdin.split()\n    x = int(xs)\n    y = int(ys)\n    z = int(zs)\n    if x > y:\n        return '-'\n    if y > x:\n        return '+'\n    if z > x:\n        return '+'\n    if z > y:\n        return '-'\n    if x == y and x == z:\n        return '+'\n    if y == x and y == z:\n        return '+'\n    if z == x and z == y:\n        return '+'\n    if x == y and z == x:\n        return '+'\n    if y == x and z == y:\n        return '+'\n    if z == x and y == z:\n        return '+'\n    return '?'\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(int, stdin.split())\n    if x + y + z == 0:\n        return \"?\"\n    if x > y and x > z:\n        return \"-\"\n    if y > x and y > z:\n        return \"+\"\n    return \"0\"\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(int, stdin.split())\n    if x > y:\n        if x > z:\n            if y > z:\n                return '+'\n            else:\n                return '-'\n        else:\n            return '+'\n    elif x < y:\n        if x > z:\n            if y > z:\n                return '-'\n            else:\n                return '+'\n        else:\n            return '-'\n    else:\n        return '0'\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(int, stdin.split())\n    if x+y > z:\n        return \"-\"\n    elif x+y < z:\n        return \"+\"\n    else:\n        return \"0\""
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(int, stdin.split())\n    if x < y:\n        if x > z:\n            return \"+\"\n        elif y > z:\n            return \"-\"\n        else:\n            return \"0\"\n    elif x > y:\n        if y > z:\n            return \"-0\"\n        else:\n            return \"+\"\n    else:\n        return \"0\"\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(int, stdin.split())\n    if x + y + z == 0:\n        return '0'\n    if x + y + z == x:\n        return '+'\n    if x + y + z == y:\n        return '-'\n    return '?'\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n  N = int(stdin.split()[0])\n  s = stdin.split()[1]\n  x = int(stdin.split()[2])\n  y = int(stdin.split()[3])\n\n  L = [\"U\" if i == \"R\" else \"D\" if i == \"L\" else \"R\" if i == \"U\" else \"L\" for i in s]\n  R = [\"R\" if i == \"U\" else \"D\" if i == \"R\" else \"L\" if i == \"D\" else \"U\" for i in s]\n  L2 = [i for i in range(len(s)) if s[i] == \"L\" or s[i] == \"R\"]\n  R2 = [i for i in range(len(s)) if s[i] == \"R\" or s[i] == \"D\"]\n\n  if x == 0 and y == 0 and len(L2) == 0 and len(R2) == 0 and L == R:\n    return \"0\"\n  elif x == 0 and y == 0:\n    return \"1\"\n\n  if len(L2) > 0:\n    minId = min(L2)\n  else:\n    minId = -1\n\n  if len(R2) > 0:\n    maxId = max(R2)\n  else:\n    maxId = -1\n\n  if maxId == -1 and minId == -1:\n    return \"0\"\n  elif maxId == -1:\n    return str(minId + 1)\n  elif minId == -1:\n    return str(maxId + 1)\n  else:\n    return str(maxId - minId + 1)\n\nsolution(\"4\\nRRURUU\\n-2 3\")\nsolution(\"3\\nUUU\\n100 100\")\nsolution(\"5\\nRURUU\\n-2 3\")"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # stdin = \"\"\"\n    # 5\n    # RURUU\n    # -2 3\n    # \"\"\"\n    n = int(stdin)\n    sequence = stdin.rstrip().split(\"\\n\")[1:]\n    x, y = map(int, stdin.rstrip().split(\"\\n\")[2].split())\n    min = n\n    for i in sequence:\n        if i == \"R\":\n            x += 1\n        elif i == \"L\":\n            x -= 1\n        elif i == \"U\":\n            y += 1\n        elif i == \"D\":\n            y -= 1\n        if min > abs(x - 0) + abs(y - 0):\n            min = abs(x - 0) + abs(y - 0)\n    if min == n:\n        return \"-1\"\n    return str(min)\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x, y, operations = map(int, stdin.split())\n    if operations[0] == \"U\":\n        x += 1\n    if operations[0] == \"D\":\n        x -= 1\n    if operations[0] == \"L\":\n        y -= 1\n    if operations[0] == \"R\":\n        y += 1\n    if x == x and y == y:\n        return \"0\"\n    if x == x and y!= y:\n        return \"1\"\n    if x!= x and y == y:\n        return \"2\"\n    return \"3\"\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    [n, s, x, y] = stdin.split()\n    n = int(n)\n    x = int(x)\n    y = int(y)\n    s = list(s)\n    res = \"\"\n    if s[0] == 'R':\n        for i in range(1, n):\n            if s[i] == 'R':\n                s[i] = 'U'\n            elif s[i] == 'L':\n                s[i] = 'D'\n        if (x, y) == (0, 0):\n            res = s[:]\n        else:\n            if x > 0:\n                if y > 0:\n                    res = s[0:1] + s[2:3] + s[1:2] + s[3:4] + s[4:5] + s[5:6] + s[6:7] + s[7:8] + s[8:9] + s[9:10] + s[10:11] + s[11:12] + s[12:13] + s[13:14] + s[14:15] + s[15:16] + s[16:17] + s[17:18] + s[18:19]\n                elif y < 0:\n                    res = s[0:1] + s[2:3] + s[1:2] + s[3:4] + s[4:5] + s[5:6] + s[6:7] + s[7:8] + s[8:9] + s[9:10] + s[10:11] + s[11:12] + s[12:13] + s[13:14] + s[14:15] + s[15:16] + s[16:17] + s[17:18]\n            elif x < 0:\n                if y > 0:\n                    res = s[0:1] + s[2:3] + s[1:2] + s[3:4] + s[4:5] + s[5:6] + s[6:7] + s[7:8] + s[8:9] + s[9:10] + s[10:11] + s[11:12] + s[12:13] + s[13:14] + s[14:15] + s[15:16] + s[16:17] + s[17:18] + s[18:19] + s[19:20]\n                elif y < 0:\n                    res = s[0:1] + s[2:3] + s[1:2] + s[3:4] + s[4:5] + s[5:6] + s[6:7] + s[7:8] + s[8:9] + s[9:10] + s[10:11] + s[11:12] + s[12:13] + s[13:14] + s[14:15] + s[15:16] + s[16:17] + s[17:18]\n    elif s[0] == 'D':\n        for i in range(1, n):\n            if s[i] == 'D':\n                s[i] = 'U'\n            elif s[i] == 'L':\n                s[i] = 'D'\n        if (x, y) == (0, 0):\n            res = s[:]\n        else:\n            if x > 0:\n                if y > 0:\n                    res = s[0:1] + s[2:3] + s[1:2] + s[3:4] + s[4:5] + s[5:6] + s[6:7] + s[7:8] + s[8:9] + s[9:10] + s[10:11] + s[11:12] + s[12:13] + s[13:14] + s[14:15] + s[15:16] + s[16:17] + s[17:18] + s[18:19]\n                elif y < 0:\n                    res = s[0:1] + s[2:3] + s[1:2] + s[3:4] + s[4:5] + s[5:6] + s[6:7] + s[7:8] + s[8:9] + s[9:10] + s[10:11] + s[11:12] + s[12:13] + s[13:14] + s[14:15] + s[15:16] + s[16:17] + s[17:18]\n            elif x < 0:\n                if y > 0:\n                    res = s[0:1] + s[2:3] + s[1:2] + s[3:4] + s[4:5] + s[5:6] + s[6:7] + s[7:8] + s[8:9] + s[9:10] + s[10:11] + s[11:12] + s[12:13] + s[13:14] + s[14:15] + s[15:16] + s[16:17] + s[17:18] + s[18:19] + s[19:20]\n                elif y < 0:\n                    res = s[0:1] + s[2:3] + s[1:2] + s[3:4] + s[4:5] + s["
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, sequence = stdin.split()\n    x, y = map(int, input().split())\n    if n == 1:\n        if sequence == \"RURU\":\n            return 3\n        else:\n            return 0\n    elif n == 2:\n        if sequence == \"RURUR\":\n            return 5\n        else:\n            return 0\n    else:\n        matrix = [[None for i in range(int(y))] for i in range(int(x))]\n        for i in range(n):\n            for j in range(int(y)):\n                matrix[int(x) - 1][j] = sequence[i]\n        list_of_list = []\n        for i in range(len(matrix)):\n            for j in range(len(matrix[i])):\n                list_of_list.append(matrix[i][j])\n        list_of_list.reverse()\n        l = 0\n        r = len(list_of_list) - 1\n        while l <= r:\n            mid = (l + r) // 2\n            if list_of_list[mid] == \"R\":\n                l = mid + 1\n            else:\n                r = mid - 1\n        if list_of_list[l] == \"R\":\n            return r + 1\n        else:\n            return l\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # solution without regex:\n    # n = int(input())\n    # operations = stdin.strip().split()\n    # x = int(input())\n    # y = int(input())\n    #\n    # operations_dict = {\"U\": (0, 1), \"D\": (0, -1), \"R\": (1, 0), \"L\": (-1, 0)}\n    #\n    # coord_x = x\n    # coord_y = y\n    # answer = 0\n    #\n    # for operation in operations:\n    #     if operation == \"U\":\n    #         coord_y += operations_dict[operation][0]\n    #         coord_x += operations_dict[operation][1]\n    #     elif operation == \"D\":\n    #         coord_y += operations_dict[operation][0]\n    #         coord_x -= operations_dict[operation][1]\n    #     elif operation == \"R\":\n    #         coord_x += operations_dict[operation][1]\n    #         coord_y -= operations_dict[operation][0]\n    #     else:\n    #         coord_x -= operations_dict[operation][1]\n    #         coord_y += operations_dict[operation][0]\n    #\n    #     if coord_x < 0 or coord_x >= 10 or coord_y < 0 or coord_y >= 10:\n    #         answer = -1\n    #         break\n    #\n    #     if coord_x == x and coord_y == y:\n    #         answer = answer + 1\n    #\n    # return str(answer)\n    #\n    # solution with regex:\n    # import re\n    #\n    # n = int(re.search(r'\\d+', input()).group())\n    # operations = input().split()\n    # x, y = map(int, re.search(r'\\d+', input()).group().split())\n    #\n    # coord_x, coord_y = (x, y)\n    # answer = 0\n    #\n    # for operation in operations:\n    #     if operation == \"U\":\n    #         coord_y += 1\n    #     elif operation == \"D\":\n    #         coord_y -= 1\n    #     elif operation == \"R\":\n    #         coord_x += 1\n    #     else:\n    #         coord_x -= 1\n    #\n    #     if coord_x < 0 or coord_x >= 10 or coord_y < 0 or coord_y >= 10:\n    #         answer = -1\n    #         break\n    #\n    #     if coord_x == x and coord_y == y:\n    #         answer += 1\n    #\n    # return str(answer)\n    #\n    # solution with regex + dictionary:\n    # import re\n    #\n    # n = int(re.search(r'\\d+', input()).group())\n    # operations = input().split()\n    # x, y = map(int, re.search(r'\\d+', input()).group().split())\n    #\n    # coord_x, coord_y = (x, y)\n    # answer = 0\n    #\n    # for operation in operations:\n    #     if operation == \"U\":\n    #         coord_y += 1\n    #     elif operation == \"D\":\n    #         coord_y -= 1\n    #     elif operation == \"R\":\n    #         coord_x += 1\n    #     else:\n    #         coord_x -= 1\n    #\n    #     if coord_x < 0 or coord_x >= 10 or coord_y < 0 or coord_y >= 10:\n    #         answer = -1\n    #         break\n    #\n    #     if coord_x == x and coord_y == y:\n    #         answer += 1\n    #\n    # return str(answer)\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    operations = stdin.strip().split()\n    robot_position = stdin.strip().split()\n    \n    x = int(robot_position[0])\n    y = int(robot_position[1])\n\n    max_index = 0\n    min_index = 0\n    length = 0\n    operation_count = 0\n\n    for i in range(len(operations)):\n        if operations[i] == \"R\":\n            x += 1\n        elif operations[i] == \"L\":\n            x -= 1\n        elif operations[i] == \"U\":\n            y += 1\n        else:\n            y -= 1\n        \n        if x >= 0 and x < n and y >= 0 and y < n:\n            length += 1\n            if i > max_index:\n                max_index = i\n            if i < min_index:\n                min_index = i\n        else:\n            length = 0\n            break\n\n    if length == 0:\n        return -1\n\n    return max_index - min_index + 1"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = stdin\n    if n == 1:\n        if x == y:\n            return 0\n        elif x < y:\n            return 1\n        else:\n            return -1\n\n    else:\n        for i in range(n):\n            if stdin[i] == 'R':\n                x += 1\n            elif stdin[i] == 'L':\n                x -= 1\n            elif stdin[i] == 'U':\n                y += 1\n            elif stdin[i] == 'D':\n                y -= 1\n            else:\n                pass\n        if x == y:\n            return 0\n        elif x < y:\n            return 1\n        else:\n            return -1\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def add_prefixes(s, t, pfx):\n        if t == 1:\n            return pfx + s\n        elif pfx!= '':\n            return pfx + '0' + add_prefixes(s, t - 1, pfx)\n        else:\n            return add_prefixes(s, t - 1, '1')\n\n    def balance(s):\n        return sum(1 for i, ch in enumerate(s) if ch == '0') - sum(1 for i, ch in enumerate(s) if ch == '1')\n\n    def solve(n, x):\n        if balance(n)!= x:\n            return -1\n        return sum(add_prefixes(n, len(n), pfx).count('1') for pfx in product('10', repeat=len(n)))\n\n    for _ in range(int(stdin.strip())):\n        print(solve(map(int, stdin.strip().split()), int(stdin.strip().split()[1])))\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.rstrip()\n    n, x = map(int, stdin.split())\n    s = ''.join(stdin)\n    s = list(s)\n    s = ''.join(s)\n    s = int(s,2)\n    return s\n\nsolution('4 10')\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\nimport sys\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n'''"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin)\n    for i in range(T):\n        n, x = map(int, stdin.split())\n        s = stdin.split()[2]\n        cnt = {'0': 0, '1': 0}\n        p = ''\n        for j in range(n):\n            if s[j] == '0':\n                cnt['0'] += 1\n            elif s[j] == '1':\n                cnt['1'] += 1\n            if p == '':\n                p += s[j]\n                continue\n            else:\n                if p[-1] == '1' and s[j] == '0':\n                    p += '1'\n                    cnt['1'] -= 1\n                elif p[-1] == '0' and s[j] == '1':\n                    p += '0'\n                    cnt['0'] -= 1\n                else:\n                    p += s[j]\n        if cnt['1'] > x or cnt['0'] > x:\n            print(-1)\n        elif cnt['0'] == x and cnt['1'] == x:\n            print(0)\n        else:\n            print(len(p))\n\n\nsolution(input())\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, x = list(map(int, stdin.split()))\n    s = stdin.splitlines()[1]\n    cnt = 1\n    l = len(s)\n    if l == 1:\n        return cnt\n    for i in range(1, l):\n        if s[i] == s[i - 1]:\n            cnt += 1\n        else:\n            cnt = 1\n    if cnt == 1:\n        return -1\n    elif cnt == l:\n        return l\n    else:\n        return cnt"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num, k = map(int, stdin.split())\n    result = 0\n    while num > 0:\n        if num % 10 > k:\n            result += 1\n        else:\n            num //= 10\n    return str(result)"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    while n % 10 > 0 and n // 10 % 10 > 0:\n        n //= 10\n    while n >= 10:\n        n //= 10\n        k -= 1\n    return str(n) + ('0' * k)\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    result = 0\n    while n % 10 ** k!= 0:\n        result += 1\n        n = n // 10\n    return str(result)"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    count = 0\n    while (n % 10 ** count) % 10 ** (k - count)!= 0:\n        count += 1\n    return str(n // 10 ** count)"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    while n % 10 > 0 and k % 2 > 0:\n        n, k = n // 10, k // 2\n    return str(n) + str(k)\n\n\ndef"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    l = list(str(n))\n    # print(l)\n    # print(l[1])\n    # print(len(l))\n    if k == len(l):\n        return '0'\n    if k == 1:\n        return '1'\n    if k == 2:\n        return str(len(l) - 1)\n    if k == 3:\n        return str(len(l))\n    l.sort(key=lambda x: int(x), reverse=False)\n    if int(l[1]) % 10 == 0 and int(l[2]) % 10 == 0 and int(l[3]) % 10 == 0:\n        return '0'\n    if int(l[1]) % 10 == 0:\n        return str(len(l) - 2)\n    if int(l[2]) % 10 == 0:\n        return str(len(l) - 1)\n    if int(l[3]) % 10 == 0:\n        return str(len(l))\n    return str(len(l))\n\n\nsolution(input())\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    result = (10 ** k) % n\n    return str(result) if result > 9 else '0' + str(result)\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(n - (n//(10**k)) + 1)\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    num, k = map(int, stdin.split())\n    min = 0\n    while num % 10 == 0:\n        min += 1\n        num //= 10\n    if num % 10 == 0:\n        min += 1\n    return str(min)\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    while (n := n // 10 ** k)!= 0:\n        k += 1\n    return str(n).rjust(k, '0')\n\n\n\nsolution(input())"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k, x, y = map(int, stdin.split())\n    return f\"{max(n, m)} {min(n, m)} {k}\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k, x, y = stdin.split()\n    n = int(n)\n    m = int(m)\n    k = int(k)\n    x = int(x)\n    y = int(y)\n    answer = \"\", \"\", \"\"\n    p1 = x\n    p2 = y\n    for i in range(n):\n        if i == 0:\n            if p1 == m:\n                p2 = m\n            elif p1 == 1:\n                p1 = 1\n                p2 = m\n            else:\n                p1 -= 1\n                p2 -= 1\n        elif i == n-1:\n            if p1 == 1:\n                p1 = 1\n                p2 = 1\n            else:\n                p1 -= 1\n                p2 -= 1\n        elif i == (n-1)/2:\n            p1 = n - 1\n            p2 = 1\n        else:\n            if p1 == n:\n                p1 = 1\n                p2 = m\n            elif p1 == 1:\n                p1 = 1\n                p2 = m\n            else:\n                p1 -= 1\n                p2 -= 1\n    print(p1, p2)\n    for i in range(m):\n        if i == 0:\n            answer = answer + str(p1) + \" \" + str(p2) + \"\\n\"\n            p1 += 1\n            p2 += 1\n        else:\n            answer = answer + str(p1) + \" \" + str(p2) + \"\\n\"\n            p1 -= 1\n            p2 += 1\n    answer = answer + str(p1) + \" \" + str(p2) + \"\\n\"\n    answer = answer + str(p1) + \" \" + str(p2) + \"\\n\"\n    return answer\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    [n, m, k, x, y] = stdin.split()\n    n, m, k, x, y = int(n), int(m), int(k), int(x), int(y)\n    print(max(k, m), min(k, m), k - (m - 1))\n\nsolution(input())"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def get_number_of_questions(row, col, n, m):\n        if row == n:\n            return m\n        if col == m:\n            return 0\n\n        mq = 0\n        if row == 0:\n            mq = max(mq, get_number_of_questions(row+1, col, n, m))\n        else:\n            mq = max(mq, get_number_of_questions(row+1, col, n, m))\n        if col == 0:\n            mq = max(mq, get_number_of_questions(row, col+1, n, m))\n        else:\n            mq = max(mq, get_number_of_questions(row, col+1, n, m))\n\n        return mq\n\n\n    # number of questions for each row\n    mqs = []\n    for i in range(1, n+1):\n        mqs.append(get_number_of_questions(0, 0, i, m))\n\n    # number of questions for each column\n    nqs = []\n    for j in range(1, m+1):\n        nqs.append(get_number_of_questions(0, j, n, m))\n\n    # number of questions for each table\n    tqs = []\n    for k in range(1, n+1):\n        tqs.append(get_number_of_questions(k, 0, n, m))\n\n    for j in range(1, m+1):\n        tqs.append(get_number_of_questions(0, j, n, m))\n\n    for i in range(1, n+1):\n        tqs.append(get_number_of_questions(i, 0, n, m))\n\n    # max number of questions for each row\n    max_mqs = []\n    for i in range(1, n+1):\n        max_mqs.append(max(mqs[i-1], nqs[i-1], tqs[i-1]))\n\n    # min number of questions for each column\n    min_nqs = []\n    for j in range(1, m+1):\n        min_nqs.append(min(nqs[j-1], tqs[j-1]))\n\n    # number of questions for each table\n    max_tqs = []\n    for k in range(1, n+1):\n        max_tqs.append(max(tqs[k-1], nqs[k-1]))\n\n    # min number of questions for each row\n    min_nqs.append(min(nqs[-1], tqs[-1]))\n\n    # number of questions for each column\n    min_tqs = []\n    for j in range(1, m+1):\n        min_tqs.append(min(nqs[j-1], tqs[j-1]))\n\n    max_tqs.append(min(nqs[-1], tqs[-1]))\n\n    return str(max(max_mqs)) + \" \" + str(min(min_nqs)) + \" \" + str(min(min_tqs))\n\n\nprint(solution(stdin))\n\ndef"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k, x, y = map(int, stdin.split())\n    return str(max(n * m - k, m * (m - 1) // 2, n * m - k) * 2) +'' + str(min(n * m - k, m * (m - 1) // 2, n * m - k)) +'' + str(n * m - k)\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k, x, y = map(int, stdin.split())\n    # \u043c\u0430\u0442\u0440\u0438\u0446\u0430 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432 x-\u0442\u044c \u043d\u0430 y-\u0442\u044c\n    # \u043c\u0430\u0442\u0440\u0438\u0446\u0430 \u0438\u0437 n \u043d\u0430 m\n    matrix = [[0] * m for _ in range(n)]\n    # \u043a\u043e\u043b-\u0432\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0443\u0447\u0435\u043d\u0438\u043a\u0430\n    count_questions = [0] * n\n    # \u043a\u043e\u043b-\u0432\u043e \u0432\u043e\u043f\u0440\u043e\u0441\u043e\u0432 \u043f\u0440\u043e\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u043c\u044b\u0445 \u0443\u0447\u0435\u043d\u0438\u043a\u043e\u0432 \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u0434\u043d\u0435\n    sum_questions = 0\n    max_count_questions = 0\n    min_count_questions = float('inf')\n\n    for _ in range(k):\n        # \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043f\u043e\u043b\u044f \u043a\u043e\u043b-\u0432\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432\n        for i in range(n):\n            # \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043f\u043e\u043b\u044f \u0432\u043e\u043f\u0440\u043e\u0441\u043e\u0432 \u043f\u0440\u043e\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u043c\u044b\u0445 \u0443\u0447\u0435\u043d\u0438\u043a\u043e\u0432\n            count_questions[i] = matrix[i][x - 1] + matrix[i][y - 1]\n            # \u0438\u0449\u0435\u043c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b-\u0432\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0443\u0447\u0435\u043d\u0438\u043a\u0430\n            max_count_questions = max(max_count_questions, count_questions[i])\n            # \u0438\u0449\u0435\u043c \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b-\u0432\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0443\u0447\u0435\u043d\u0438\u043a\u0430\n            min_count_questions = min(min_count_questions, count_questions[i])\n\n        max_count_questions = max(max_count_questions, count_questions[x - 1])\n        min_count_questions = min(min_count_questions, count_questions[y - 1])\n\n        # \u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u043f\u043e\u043b\u044f \u043a\u043e\u043b-\u0432\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u043f\u043e \u043a\u043e\u043b-\u0432\u0443 \u0432\u043e\u043f\u0440\u043e\u0441\u043e\u0432 \u043f\u0440\u043e\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u043c\u044b\u0445 \u0443\u0447\u0435\u043d\u0438\u043a\u043e\u0432\n        for i in range(n - 1):\n            for j in range(n - i - 1):\n                if count_questions[j] < count_questions[j + 1]:\n                    count_questions[j], count_questions[j + 1] = count_questions[j + 1], count_questions[j]\n        # \u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u043f\u043e\u043b\u044f \u0432\u043e\u043f\u0440\u043e\u0441\u043e\u0432 \u043f\u043e \u043a\u043e\u043b-\u0432\u0443 \u0432\u043e\u043f\u0440\u043e\u0441\u043e\u0432 \u043f\u0440\u043e\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u043c\u044b\u0445 \u0443\u0447\u0435\u043d\u0438\u043a\u043e\u0432\n        for i in range(m - 1):\n            for j in range(m - i - 1):\n                if matrix[j][x - 1] < matrix[j + 1][x - 1]:\n                    matrix[j], matrix[j + 1] = matrix[j + 1], matrix[j]\n                if matrix[j][y - 1] < matrix[j + 1][y - 1]:\n                    matrix[j], matrix[j + 1] = matrix[j + 1], matrix[j]\n                if matrix[j][x - 1] < matrix[j + 1][y - 1]:\n                    matrix[j], matrix[j + 1] = matrix[j + 1], matrix[j]\n\n        # \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043f\u043e\u043b\u044f \u043a\u043e\u043b-\u0432\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432\n        for i in range(n):\n            # \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u043f\u043e\u043b\u044f \u0432\u043e\u043f\u0440\u043e\u0441\u043e\u0432 \u043f\u0440\u043e\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u043c\u044b\u0445 \u0443\u0447\u0435\u043d\u0438\u043a\u043e\u0432\n            count_questions[i] = matrix[i][x - 1] + matrix[i][y - 1]\n            # \u0438\u0449\u0435\u043c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b-\u0432\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0443\u0447\u0435\u043d\u0438\u043a\u0430\n            max_count_questions = max(max_count_questions, count_questions[i])\n            # \u0438\u0449\u0435\u043c \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b-\u0432\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u043a\u0430\ufffd"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, m, k, x, y = map(int, stdin.split())\n    ans_list = []\n    \n    \n    def count_question(row):\n        x_count = 0\n        y_count = 0\n        for i in range(x, row):\n            for j in range(y):\n                if table[i][j] == 1:\n                    x_count += 1\n                if table[i][j] == 2:\n                    y_count += 1\n        return (x_count, y_count)\n    \n    \n    def iterate_table(n):\n        global ans_list\n        for i in range(n):\n            x_count, y_count = count_question(i)\n            if x_count > 0:\n                if len(ans_list) == 0 or ans_list[-1][1] < x_count:\n                    ans_list.append([i, x_count])\n            else:\n                if len(ans_list) == 0 or ans_list[-1][0] > i:\n                    ans_list.append([i, -1])\n        \n        \n        return (x_count, y_count)\n    \n    \n    def iterate_table(n):\n        global ans_list\n        for i in range(n):\n            x_count, y_count = count_question(i)\n            if y_count > 0:\n                if len(ans_list) == 0 or ans_list[-1][1] < y_count:\n                    ans_list.append([i, y_count])\n            else:\n                if len(ans_list) == 0 or ans_list[-1][0] > i:\n                    ans_list.append([i, -1])\n        \n        return (x_count, y_count)\n    \n    \n    def iterate_table(n):\n        global ans_list\n        for i in range(n):\n            x_count, y_count = count_question(i)\n            if x_count > 0:\n                if len(ans_list) == 0 or ans_list[-1][1] < x_count:\n                    ans_list.append([i, x_count])\n            else:\n                if len(ans_list) == 0 or ans_list[-1][0] > i:\n                    ans_list.append([i, -1])\n        \n        return (x_count, y_count)\n    \n    def iterate_table(n):\n        global ans_list\n        for i in range(n):\n            x_count, y_count = count_question(i)\n            if y_count > 0:\n                if len(ans_list) == 0 or ans_list[-1][1] < y_count:\n                    ans_list.append([i, y_count])\n            else:\n                if len(ans_list) == 0 or ans_list[-1][0] > i:\n                    ans_list.append([i, -1])\n        \n        return (x_count, y_count)\n    \n    def iterate_table(n):\n        global ans_list\n        for i in range(n):\n            x_count, y_count = count_question(i)\n            if y_count > 0:\n                if len(ans_list) == 0 or ans_list[-1][1] < y_count:\n                    ans_list.append([i, y_count])\n            else:\n                if len(ans_list) == 0 or ans_list[-1][0] > i:\n                    ans_list.append([i, -1])\n        \n        return (x_count, y_count)\n    \n    def iterate_table(n):\n        global ans_list\n        for i in range(n):\n            x_count, y_count = count_question(i)\n            if y_count > 0:\n                if len(ans_list) == 0 or ans_list[-1][1] < y_count:\n                    ans_list.append([i, y_count])\n            else:\n                if len(ans_list) == 0 or ans_list[-1][0] > i:\n                    ans_list.append([i, -1])\n        \n        return (x_count, y_count)\n    \n    def iterate_table(n):\n        global ans_list\n        for i in range(n):\n            x_count, y_count = count_question(i)\n            if y_count > 0:\n                if len(ans_list) == 0 or ans_list[-1][1] < y_count:\n                    ans_list.append([i, y_count])\n            else:\n                if len(ans_list) == 0 or ans_list[-1][0] > i:\n                    ans_list.append([i, -1])\n        \n        return (x_count, y_count)\n    \n    def iterate_table(n):\n        global ans_list\n        for i in range(n):\n            x_count, y_count = count_question(i)\n            if y_count > 0:\n                if len(ans_list) == 0 or ans"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k, x, y = list(map(int, stdin.split()))\n    m_count = 0\n    n_count = 0\n    x_count = 0\n    for i in range(n):\n        for j in range(m):\n            if i == 0 and j == 0:\n                m_count += 1\n            elif i == 0 and 0 < j < m:\n                n_count += 1\n            elif 0 < i < n and 0 < j < m:\n                x_count += 1\n    return str(m_count) + \" \" + str(n_count) + \" \" + str(x_count)\n\n\nprint(solution(input()))\nprint(solution(input()))\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k, x, y = map(int, stdin.split())\n    row_max = []\n    row_min = []\n    row_times = []\n    for row in range(n):\n        row_max.append(max(range(m), key=lambda p: p + row))\n        row_min.append(min(range(m), key=lambda p: p + row))\n        row_times.append(0)\n\n    p = 0\n    for i in range(k):\n        p += 1\n        if p == 1:\n            for j in range(y):\n                if row_min[j] <= x < row_min[j + 1]:\n                    row_times[j + 1] += 1\n        elif p == 2:\n            for j in range(y):\n                if row_min[j] <= x < row_min[j + 1]:\n                    row_times[j + 1] += 1\n        elif p == 3:\n            for j in range(x, n):\n                if row_max[j - x] <= y < row_max[j]:\n                    row_times[j] += 1\n\n    for i in range(n):\n        if row_times[i] > 0:\n            return \"0\"\n    return \" \".join(map(str, row_times))\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input = list(map(int, stdin.split()))\n    n, m, k, x, y = input\n    if n == 1:\n        q1 = 0\n        q2 = 0\n        q3 = k - 1\n        ans = q1 + q2 + q3\n        print(ans)\n    else:\n        q1 = 0\n        q2 = 0\n        q3 = 0\n        q4 = 0\n        q5 = 0\n        q6 = 0\n        q7 = 0\n        q8 = 0\n        q9 = 0\n        q10 = 0\n        q11 = 0\n        q12 = 0\n        q13 = 0\n        q14 = 0\n        q15 = 0\n        q16 = 0\n        q17 = 0\n        q18 = 0\n        q19 = 0\n        q20 = 0\n        q21 = 0\n        q22 = 0\n        q23 = 0\n        q24 = 0\n        q25 = 0\n        q26 = 0\n        q27 = 0\n        q28 = 0\n        q29 = 0\n        q30 = 0\n        q31 = 0\n        q32 = 0\n        q33 = 0\n        q34 = 0\n        q35 = 0\n        q36 = 0\n        q37 = 0\n        q38 = 0\n        q39 = 0\n        q40 = 0\n        q41 = 0\n        q42 = 0\n        q43 = 0\n        q44 = 0\n        q45 = 0\n        q46 = 0\n        q47 = 0\n        q48 = 0\n        q49 = 0\n        q50 = 0\n        q51 = 0\n        q52 = 0\n        q53 = 0\n        q54 = 0\n        q55 = 0\n        q56 = 0\n        q57 = 0\n        q58 = 0\n        q59 = 0\n        q60 = 0\n        q61 = 0\n        q62 = 0\n        q63 = 0\n        q64 = 0\n        q65 = 0\n        q66 = 0\n        q67 = 0\n        q68 = 0\n        q69 = 0\n        q70 = 0\n        q71 = 0\n        q72 = 0\n        q73 = 0\n        q74 = 0\n        q75 = 0\n        q76 = 0\n        q77 = 0\n        q78 = 0\n        q79 = 0\n        q80 = 0\n        q81 = 0\n        q82 = 0\n        q83 = 0\n        q84 = 0\n        q85 = 0\n        q86 = 0\n        q87 = 0\n        q88 = 0\n        q89 = 0\n        q90 = 0\n        q91 = 0\n        q92 = 0\n        q93 = 0\n        q94 = 0\n        q95 = 0\n        q96 = 0\n        q97 = 0\n        q98 = 0\n        q99 = 0\n        q100 = 0\n        q101 = 0\n        q102 = 0\n        q103 = 0\n        q104 = 0\n        q105 = 0\n        q106 = 0\n        q107 = 0\n        q108 = 0\n        q109 = 0\n        q110 = 0\n        q111 = 0\n        q112 = 0\n        q113 = 0\n        q114 = 0\n        q115 = 0\n        q116 = 0\n        q117 = 0\n        q118 = 0\n        q119 = 0\n        q120 = 0\n        q121 = 0\n        q122 = 0\n        q123 = 0\n        q124 = 0\n        q125 = 0\n        q126 = 0\n        q127 = 0\n        q128 = 0\n        q129 = 0\n        q130 = 0\n        q131 = 0\n        q132 = 0\n        q133 = 0\n        q134 = 0\n        q135 = 0\n        q136 = 0\n        q137 = 0\n        q138 = 0\n        q139 = 0\n        q140 = 0\n        q141 = 0\n        q142 = 0\n        q143 = 0\n        q144 = 0\n        q145 = 0\n        q146 = 0\n        q147 = 0\n        q148 = 0\n        q149 = 0\n        q150 = 0\n        q151 = 0\n        q152 = 0\n        q153 = 0\n        q154 = 0\n        q155 = 0\n        q156 = 0\n        q157 = 0\n        q158 = 0\n        q159 = 0\n        q160 = 0\n        q161 = 0\n        q162 = 0\n        q163 = 0\n        q164 = 0\n        q165 = 0\n        q166 = 0\n        q167 = 0\n        q168 = 0\n        q169 = 0\n        q170 = 0\n        q171 = 0\n        q172 = 0\n        q173 = 0\n        q174 = 0\n        q175 = 0\n        q176 = 0\n        q177 = 0\n        q178 = 0\n        q179 = 0\n        q180 = 0\n        q181 = 0\n        q182 = 0\n        q183 = 0\n        q184 = 0\n        q185 = 0\n        q186 = 0\n        q187 = 0\n        q188 = 0\n        q189 = 0\n        q190 = 0\n        q191 = 0\n        q192 = 0\n        q"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    turns = int(stdin)\n    kuro = stdin.split(\"\\n\")[0]\n    kuro = kuro.replace(\" \", \"\")\n    shiro = stdin.split(\"\\n\")[1]\n    shiro = shiro.replace(\" \", \"\")\n    katie = stdin.split(\"\\n\")[2]\n    katie = katie.replace(\" \", \"\")\n    kuro_beauty = 0\n    shiro_beauty = 0\n    katie_beauty = 0\n    kuro = kuro.replace(\"o\", \"a\")\n    shiro = shiro.replace(\"o\", \"a\")\n    katie = katie.replace(\"o\", \"a\")\n    kuro_beauty = len(kuro) - len(set(kuro))\n    shiro_beauty = len(shiro) - len(set(shiro))\n    katie_beauty = len(katie) - len(set(katie))\n    max_beauty = max(kuro_beauty, shiro_beauty, katie_beauty)\n    if kuro_beauty == max_beauty:\n        return \"Kuro\"\n    elif shiro_beauty == max_beauty:\n        return \"Shiro\"\n    else:\n        return \"Katie\"\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ribbons = {\n        \"Kuro\": [\"a\"],\n        \"Shiro\": [\"b\"],\n        \"Katie\": [\"c\"]\n    }\n    for i in range(n):\n        ribbons[ribbons.keys()[i%3]] = stdin.split()\n    return max(set([max(set(key), key) for key in ribbons.keys()]), key=lambda x: (ribbons[x].count(x), ribbons[x][0]))\n\nsolution(input())\n\nThis Python3 program can be compiled by \u2018py -3 -m py_compile madlib.py\u2019"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(stdin.splitlines())\n    n = int(stdin[0])\n    Kuro, Shiro, Katie = stdin[1:]\n\n    # check if all colors are different\n    if len(set(Kuro))!= len(Kuro) or len(set(Shiro))!= len(Shiro) or len(set(Katie))!= len(Katie):\n        return \"Draw\"\n\n    # check if all of them are different\n    if len(Kuro) == len(Shiro) == len(Katie):\n        return \"Draw\"\n\n    # check if not all are the same\n    if len(Kuro) == len(Shiro) and len(Kuro) == len(Katie):\n        return \"Draw\"\n\n    # if none is the same, check for the difference\n    if len(Kuro) == len(Shiro) or len(Kuro) == len(Katie) or len(Shiro) == len(Katie):\n        for i in range(len(Kuro)):\n            if len(Kuro[i]) > 1:\n                return \"Draw\"\n            else:\n                return \"Katie\"\n\n    # if all are the same\n    if len(Kuro) == len(Shiro) == len(Katie) and len(Shiro[0]) > 1:\n        return \"Draw\"\n    else:\n        return \"Kuro\"\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    INPUT:\n    5\n    treasurehunt\n    3friends\n    hiCodeforces\n    \n    OUTPUT:\n    shiro\n    \n    '''\n    n = int(stdin)\n    \n    kuro_ribbons = [stdin[i] for i in range(n)]\n    shiro_ribbons = [stdin[i] for i in range(n, 2*n)]\n    katie_ribbons = [stdin[i] for i in range(2*n, 3*n)]\n    \n    kuro_beauty = 0\n    shiro_beauty = 0\n    katie_beauty = 0\n    \n    for ribbon in kuro_ribbons:\n        for i in range(len(ribbon)):\n            if ribbon[i].islower():\n                kuro_beauty += 1\n                break\n    \n    for ribbon in shiro_ribbons:\n        for i in range(len(ribbon)):\n            if ribbon[i].islower():\n                shiro_beauty += 1\n                break\n    \n    for ribbon in katie_ribbons:\n        for i in range(len(ribbon)):\n            if ribbon[i].islower():\n                katie_beauty += 1\n                break\n    \n    print(kuro_beauty, shiro_beauty, katie_beauty)\n    \n    if kuro_beauty == shiro_beauty and kuro_beauty == katie_beauty:\n        return \"Draw\"\n    else:\n        return \"Shiro\" if kuro_beauty > shiro_beauty else \"Katie\"\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    best = 0\n    best_name = ''\n    for i in range(n):\n        ribbons = stdin.split()\n        ribbon_size = len(ribbons[0])\n        ribbon_matrix = {}\n        for ribbon in ribbons:\n            for i in range(len(ribbon)):\n                if ribbon[i] in ribbon_matrix:\n                    if ribbon_matrix[ribbon[i]] >= ribbon_size:\n                        ribbon_matrix[ribbon[i]] += 1\n                    else:\n                        ribbon_matrix[ribbon[i]] = ribbon_size\n                else:\n                    ribbon_matrix[ribbon[i]] = ribbon_size\n        if max(ribbon_matrix.values()) > best:\n            best = max(ribbon_matrix.values())\n            best_name =''.join(sorted(ribbon_matrix.keys(), key=lambda x: ribbon_matrix[x], reverse=True))\n    return best_name\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n\n    ribbons: List[str] = list(stdin.split())\n    ribbons: List[str] = [r.lower() for r in ribbons]\n    if n == 1:\n        return 'Kuro'\n\n    if n == 2:\n        if ribbons[0]!= ribbons[1]:\n            return 'Shiro'\n        else:\n            return 'Katie'\n\n    results: Dict[str, int] = {}\n    for i in range(0, 3):\n        results[ribbons[i]] = results[ribbons[i]] + 1 if ribbons[i] in results else 1\n    print(results)\n\n    for i in range(0, n - 2):\n        saved_ribbons: Dict[str, int] = results.copy()\n        for j in range(0, 3):\n            ribbons[j] = ribbons[j].replace(ribbons[j][0],'')\n            for k in range(0, len(ribbons[j]) - 1):\n                ribbons[j] = ribbons[j].replace(ribbons[j][k],'')\n        results = {' '.join(r): r for r in ribbons}\n\n        for k in range(0, 3):\n            ribbons[k] = ribbons[k].replace(' ', 'a')\n        results = {' '.join(r): r for r in ribbons}\n        for k in range(0, 3):\n            ribbons[k] = ribbons[k].replace(' ', 'z')\n        results = {' '.join(r): r for r in ribbons}\n\n        for k in range(0, 3):\n            ribbons[k] = ribbons[k].replace('a','')\n            ribbons[k] = ribbons[k].replace('z', 'a')\n        results = {' '.join(r): r for r in ribbons}\n        for k in range(0, 3):\n            ribbons[k] = ribbons[k].replace(' ', 'a')\n            ribbons[k] = ribbons[k].replace('a','')\n        results = {' '.join(r): r for r in ribbons}\n        for k in range(0, 3):\n            ribbons[k] = ribbons[k].replace('z', 'z')\n        results = {' '.join(r): r for r in ribbons}\n        for k in range(0, 3):\n            ribbons[k] = ribbons[k].replace(' ', 'a')\n            ribbons[k] = ribbons[k].replace('a','')\n        results = {' '.join(r): r for r in ribbons}\n        for k in range(0, 3):\n            ribbons[k] = ribbons[k].replace(' ', 'z')\n        results = {' '.join(r): r for r in ribbons}\n        for k in range(0, 3):\n            ribbons[k] = ribbons[k].replace('a','')\n            ribbons[k] = ribbons[k].replace('z', 'a')\n        results = {' '.join(r): r for r in ribbons}\n\n        for k in range(0, 3):\n            ribbons[k] = ribbons[k].replace(' ', 'a')\n            ribbons[k] = ribbons[k].replace('a','')\n        results = {' '.join(r): r for r in ribbons}\n        for k in range(0, 3):\n            ribbons[k] = ribbons[k].replace(' ', 'z')\n        results = {' '.join(r): r for r in ribbons}\n        for k in range(0, 3):\n            ribbons[k] = ribbons[k].replace('a','')\n            ribbons[k] = ribbons[k].replace('z', 'a')\n        results = {' '.join(r): r for r in ribbons}\n        for k in range(0, 3):\n            ribbons[k] = ribbons[k].replace(' ', 'a')\n            ribbons[k] = ribbons[k].replace('a','')\n        results = {' '.join(r): r for r in ribbons}\n        for k in range(0, 3):\n            ribbons[k] = ribbons[k].replace('z', 'z')\n        results = {' '.join(r): r for r in ribbons}\n        for k in range(0, 3):\n            ribbons[k] = ribbons[k].replace(' ', 'a')\n            ribbons[k] = ribbons[k].replace('a','')\n        results = {' '.join(r): r for r in ribbons}\n        for k in range(0, 3):\n            ribbons[k] = ribbons[k].replace(' ', 'z')\n        results = {' '.join(r): r for r in ribbons}\n        for k in range(0, 3):\n            ribbons[k] = ribbons[k].replace('a','')\n            ribbons[k] = ribbons[k].replace('z', 'a')\n        results = {' '.join(r"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''treasurehunt\n   ... threefriends\n   ... hiCodeforces\n   ... ''')\n    'Shiro'\n    >>> solution('''1\n   ... ababca\n   ... ''')\n    'Katie'\n    >>> solution('''15\n   ... foPaErcvJ\n   ... mZaxowpbt\n   ... mkuOlaHRE\n   ... ''')\n    'Draw'\n    \"\"\"\n    n = int(stdin)\n    taken = {''.join(sorted(stdin.split()[0]))}\n    # Taken: A set that contains all the uppercase and lowercase letters from each turn.\n    # For example, \"aaaaa\" contains the letters A,a and A,a,A.\n    # It is guaranteed that the set of all characters is unique.\n    # Ex: \"aaaaa\" has 5 ascii code of A,a,A,A,A.\n    taken.add(stdin)\n    for _ in range(n):\n        for string in taken:\n            if len(string) == len(set(string)):\n                print(string)\n                return string\n        for string in taken:\n            index = len(string) // 2\n            if string[:index] == string[index:][::-1]:\n                string = string[index:] + string[:index]\n                if string in taken:\n                    print(string)\n                    return string\n                taken.add(string)\n            index = len(string) // 2\n            if string[index:] == string[:index][::-1]:\n                string = string[index:] + string[:index]\n                if string in taken:\n                    print(string)\n                    return string\n                taken.add(string)\n    print(\"Draw\")\n    return \"Draw\"\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    kuro_ribbon = stdin.splitlines()[0]\n    shiro_ribbon = stdin.splitlines()[1]\n    katie_ribbon = stdin.splitlines()[2]\n\n    kuro_beauty = 0\n    shiro_beauty = 0\n    katie_beauty = 0\n\n    for i in range(1, n+1):\n        kuro_b = kuro_ribbon[i-1]\n        shiro_b = shiro_ribbon[i-1]\n        katie_b = katie_ribbon[i-1]\n        if kuro_b!= shiro_b and kuro_b!= katie_b and shiro_b!= katie_b:\n            kuro_beauty += 1\n            kuro_ribbon = kuro_ribbon[:i-1] + 'a' + kuro_ribbon[i:]\n        if kuro_b!= katie_b and kuro_b!= shiro_b and katie_b!= shiro_b:\n            shiro_beauty += 1\n            shiro_ribbon = shiro_ribbon[:i-1] + 'a' + shiro_ribbon[i:]\n        if kuro_b!= katie_b and kuro_b!= shiro_b and katie_b!= shiro_b:\n            katie_beauty += 1\n            katie_ribbon = katie_ribbon[:i-1] + 'a' + katie_ribbon[i:]\n\n    if kuro_beauty == n or shiro_beauty == n or katie_beauty == n:\n        return \"Draw\"\n    if kuro_beauty > shiro_beauty and kuro_beauty > katie_beauty:\n        return \"Kuro\"\n    if shiro_beauty > kuro_beauty and shiro_beauty > katie_beauty:\n        return \"Shiro\"\n    if katie_beauty > kuro_beauty and katie_beauty > shiro_beauty:\n        return \"Katie\""
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    k = stdin.split()\n    n = int(k[0])\n    k = k[1]\n    n_k = {}\n    s = []\n    for i in range(len(k)):\n        n_k[k[i]] = n_k[k[i]] + 1 if k[i] in n_k else 1\n    for i in range(len(k)):\n        s.append(n_k[k[i]])\n    return \"Kuro\" if s.count(max(s)) >= 2 else \"Katie\" if n % 2 == 1 else \"Draw\"\n"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    v_0, v_1, a, l, c = map(int, stdin.split())\n    a = max(a, 1)\n\n    days = 1\n    count = 0\n\n    while count < v_1:\n        count += v_1 + 2 * a\n        v_1 += 2 * a\n        days += 1\n        if count > v_1:\n            v_0 += a\n            count = max(v_0, 1)\n            a += 1\n\n    return str(days)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    c, v_0, v_1, a, l = map(int, stdin.split())\n    l = min(l, v_0)\n    if v_0 == v_1:\n        return 0\n    if v_0 == a:\n        return 0\n    if v_1 == a:\n        return 0\n    v_1 = min(v_0 + a, v_1)\n    days = v_0 + 1\n    for i in range(2, v_1 + 1):\n        days = days + i + i - 1\n    return days - l\n    \nprint(solution(input()))"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    c, v_0, v_1, a, l = map(int, stdin.split())\n    if v_0 <= l and l <= v_1:\n        b = a * (v_1 - v_0) // v_0\n        a = a - b\n        l = l - b\n        if l >= v_0:\n            l = l - v_0\n            a = a + l\n        v_0 = v_0 + a\n        return str(v_0)\n    elif l <= v_0 and l >= v_1:\n        l = v_1 - l\n        a = a + l\n        v_0 = v_0 + a\n        return str(v_0)\n    else:\n        l = v_1 - l\n        a = a - l\n        v_0 = v_0 + a\n        return str(v_0)"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    c, v_0, v_1, a, l = list(map(int, stdin.split()))\n    count = 1\n    first = a * l + v_0\n    second = a * (l + 1)\n    while first < second:\n        first += a * count\n        count += 1\n    return str(count - 1)\n\nprint(solution(input()))\n"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    c, v_0, v_1, a, l = map(int, stdin.split())\n    return (v_1 - v_0) // (c - 1) + (v_1 - v_0 - (c - 1) * (c - 1)) // (c - 1) + (v_1 - v_0 - (c - 1) * (c - 1)) // (a - 1) + (v_1 - v_0 - (c - 1) * (c - 1) - (a - 1) * (a - 1)) // (l - 1)"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    c, v_0, v_1, a, l = stdin.split()\n    c = int(c)\n    v_0 = int(v_0)\n    v_1 = int(v_1)\n    a = int(a)\n    l = int(l)\n    v_0 += a\n    day = 0\n    while v_0 < c:\n        v_0 += a\n        v_1 += a\n        if v_0 + l > v_1:\n            v_0 = v_1\n            day += 1\n    return str(day)\n"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    v_0, v_1, a, c, l = map(int, stdin.split())\n    return str(v_0 - l)"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    c, v_0, v_1, a, l = map(int, stdin.split())\n    # v_0 = 1\n    # v_1 = c\n    # a = 1\n    # l = 0\n    # if c < a:\n    #     print(0)\n    #     return\n    # if v_0 + a <= c:\n    #     print(1)\n    #     return\n    # v_0 = 1\n    # v_1 = c\n    # a = 1\n    # l = 0\n    # if c < a:\n    #     print(0)\n    #     return\n    # if v_0 + a <= c:\n    #     print(1)\n    #     return\n    # v_0 = 1\n    # v_1 = c\n    # a = 1\n    # l = 0\n    # if c < a:\n    #     print(0)\n    #     return\n    # if v_0 + a <= c:\n    #     print(1)\n    #     return\n    # v_0 = 1\n    # v_1 = c\n    # a = 1\n    # l = 0\n    # if c < a:\n    #     print(0)\n    #     return\n    # if v_0 + a <= c:\n    #     print(1)\n    #     return\n    v_0 = 1\n    v_1 = c\n    a = 1\n    l = 0\n    if c < a:\n        print(0)\n        return\n    if v_0 + a <= c:\n        print(1)\n        return\n    v_0 = 1\n    v_1 = c\n    a = 1\n    l = 0\n    if c < a:\n        print(0)\n        return\n    if v_0 + a <= c:\n        print(1)\n        return\n    v_0 = 1\n    v_1 = c\n    a = 1\n    l = 0\n    if c < a:\n        print(0)\n        return\n    if v_0 + a <= c:\n        print(1)\n        return\n    v_0 = 1\n    v_1 = c\n    a = 1\n    l = 0\n    if c < a:\n        print(0)\n        return\n    if v_0 + a <= c:\n        print(1)\n        return\n    v_0 = 1\n    v_1 = c\n    a = 1\n    l = 0\n    if c < a:\n        print(0)\n        return\n    if v_0 + a <= c:\n        print(1)\n        return\n    v_0 = 1\n    v_1 = c\n    a = 1\n    l = 0\n    if c < a:\n        print(0)\n        return\n    if v_0 + a <= c:\n        print(1)\n        return\n    v_0 = 1\n    v_1 = c\n    a = 1\n    l = 0\n    if c < a:\n        print(0)\n        return\n    if v_0 + a <= c:\n        print(1)\n        return\n    v_0 = 1\n    v_1 = c\n    a = 1\n    l = 0\n    if c < a:\n        print(0)\n        return\n    if v_0 + a <= c:\n        print(1)\n        return\n    v_0 = 1\n    v_1 = c\n    a = 1\n    l = 0\n    if c < a:\n        print(0)\n        return\n    if v_0 + a <= c:\n        print(1)\n        return\n    v_0 = 1\n    v_1 = c\n    a = 1\n    l = 0\n    if c < a:\n        print(0)\n        return\n    if v_0 + a <= c:\n        print(1)\n        return\n    v_0 = 1\n    v_1 = c\n    a = 1\n    l = 0\n    if c < a:\n        print(0)\n        return\n    if v_0 + a <= c:\n        print(1)\n        return\n    v_0 = 1\n    v_1 = c\n    a = 1\n    l = 0\n    if c < a:\n        print(0)\n        return\n    if v_0 + a <= c:\n        print(1)\n        return\n    v_0 = 1\n    v_1 = c\n    a = 1\n    l = 0\n    if c < a:\n        print(0)\n        return\n    if v_0 + a <= c:\n        print(1)\n        return\n    v_0 = 1\n    v_1 = c\n    a = 1\n    l = 0\n    if c < a:\n        print(0)\n        return\n    if v_0 + a <= c:\n        print(1)\n        return\n    v_0 = 1\n    v_1 = c\n    a = 1\n    l = 0\n    if c < a:\n        print(0)\n        return\n    if v_0 + a <= c:\n        print(1)\n        return\n    v_0 = 1\n    v_1 = c\n    a = 1\n    l = 0\n    if c < a:\n        print(0)\n        return\n    if v_0 + a <= c:\n        print(1)\n        return\n    v_0 = 1\n    v_1 = c\n    a = 1\n    l = 0\n    if c < a:\n        print(0)\n        return\n    if v_0 + a <= c:\n        print(1)\n        return\n    v_0 = 1\n    v_1 = c\n    a = 1\n    l = 0\n    if c < a:\n        print(0)\n        return\n    if v_0 + a <= c:\n        print(1)\n        return\n    v_0 = 1\n    v_1 = c\n    a = 1\n    l = 0\n    if c < a:\n        print(0)\n        return\n    if v_0 + a <= c:\n        print(1)\n        return\n    v_0 = 1\n    v_1 = c\n    a = 1\n    l = 0\n    if c < a:\n        print(0)\n        return\n    if v_0 + a <= c:\n        print(1)\n        return\n    v_0 = 1\n    v_1 = c\n    a = 1\n    l = 0\n    if c < a:\n        print(0)\n        return\n    if v_0 + a <= c:\n        print(1)\n        return\n    v"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    c, v_0, v_1, a, l = map(int, stdin.split())\n    res = 1\n    cur = v_0\n    while cur <= v_1:\n        if cur == v_0:\n            cur += a\n        cur += (cur * (a / c))\n        if cur <= v_1:\n            res += 1\n    print(res)\n    return\n"
    },
    {
        "number": 73,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t,v,v1,a,l = stdin.split(' ')\n    v,a,l = int(v),int(a),int(l)\n    return str(l/(v-v1)-1)\nsolution(input())\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    primes = primes_from_2_to_n(1000)\n    i = 0\n    while True:\n        if sum(primes[i:i + 3]) > int(stdin):\n            break\n        i += 1\n    return str(i + 1) +'' +''.join(map(str, primes[i:i + 3]))\n\ndef"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    primes = prime_generator(n)\n    while True:\n        p = next(primes)\n        if n - p in primes and n - p + p in primes and n - p + p + p in primes:\n            return str(p) + \" \" + str(n - p) + \" \" + str(p) + \" \" + str(n - p + p) + \" \" + str(n - p + p + p) + \" \" + str(n - p + p + p + p) + \" \" + str(n - p + p + p + p + p)\n\ndef"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    primes = sieve(int(stdin))\n    primes = list(filter(lambda x: x > 1 and x < int(1e9), primes))\n    n = int(stdin)\n\n    count = 0\n    for i in range(3, len(primes) + 1):\n        p = sum(primes[i-3:i])\n        if p == n:\n            count += 1\n\n    return str(count) +'' +''.join(map(str, primes))\n\n\ndef"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    num, k = stdin, 3\n\n    primes = sieve.sieve_primes(int(num))\n\n    if len(primes) == 3:\n        return str(k) +'' + str(primes[0]) +'' + str(primes[1]) +'' + str(primes[2])\n    else:\n        return str(k) +'' + str(primes[0]) +'' + str(primes[1])\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    k = 3\n    while n % 2 == 0:\n        n = n // 2\n        k -= 1\n    for i in range(1, k + 1):\n        if i * 2 <= k and n % i == 0:\n            p = n // i\n            break\n    else:\n        p = n\n    return str(p) + \" \" + str(k)\n\ndef"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    primes = primes_sieve(n)\n    primes = [prime for prime in primes if prime <= n]\n    numbers = []\n    for i in range(3):\n        if primes[i] + primes[i + 1] + primes[i + 2] > n:\n            return str(i)\n        numbers.append(primes[i] + primes[i + 1] + primes[i + 2])\n    return ','.join(map(str, numbers))\n\ndef"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    odd_number = int(stdin)\n    if odd_number < 3:\n        return \"0\"\n    if odd_number == 3:\n        return \"1 2\"\n    primes = prime_sieve(odd_number)\n    counter = 0\n    for prime in primes:\n        if counter == 3:\n            break\n        prime_sum = sum_primes(prime)\n        if prime_sum == odd_number:\n            counter += 1\n            print(prime)\n    return str(counter)\n\n\n\ndef"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(2, 5):\n        while n % i == 0:\n            n = n // i\n            if i > 4:\n                break\n    if n > 4:\n        return '0'\n    return len(set(range(1, n + 1)))"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    answer = 0\n    for k in range(1, 4):\n        if k == 3:\n            break\n        if sum_primes(n, k) > n:\n            answer += 1\n            print(k)\n    return answer\n\n\ndef"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    field = stdin.split(\"\\n\")\n    # print(field)\n    # for row in field:\n    #     print(row)\n\n    # # ****\n    # # *..\n    # # *..\n\n    # ****\n    # *.*\n    # *.*\n\n    def _is_safe(row, column, map_):\n        # Check if we are in the top-right corner\n        if row == 0 and column == m - 1:\n            return True\n\n        # Check if we are in the bottom-right corner\n        if row == n - 1 and column == m - 1:\n            return True\n\n        # Check if we are in the top-left corner\n        if row == 0 and column == 0:\n            return True\n\n        # Check if we are in the bottom-left corner\n        if row == n - 1 and column == 0:\n            return True\n\n        # Check the four possible surrounding cells\n        for i in range(row, row + 2):\n            for j in range(column, column + 2):\n                if map_[i][j] == \"*\":\n                    return False\n        return True\n\n    # For every column in the field\n    for column in range(m):\n        map_ = []\n\n        # For every row in the field\n        for row in range(n):\n            # Create an empty string\n            string_ = \"\"\n            # For every column in the row\n            for column in range(m):\n                # Check if the cell in the row is empty\n                if field[row][column] == \"*\":\n                    # If it is empty, then add an *\n                    string_ += \"*\"\n                else:\n                    # If not, then add a.\n                    string_ += \".\"\n            # Add this row to the map\n            map_.append(string_)\n\n        # Check if the map is safe\n        if _is_safe(0, column, map_):\n            print(\"YES\")\n            print(f\"{column + 1} {row + 1}\")\n            return\n\n    print(\"NO\")\n\n\nsolution(input())\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    rows, cols = map(int, stdin.split())\n    field = [[c for c in stdin.split(\"\\n\")[i]] for i in range(rows)]\n    walls = set(map(tuple, field))\n    if (\n        any(c == \"*\" for row in field for c in row)\n        or any(\"*\" in row for row in field)\n        or any(c == \".\" for row in field for c in row)\n    ):\n        return \"NO\"\n    else:\n        return \"YES\"\n\n\nsolution(\"\"\"\n6 5\n.*.*.\n*.*.\n*.*.\n.***\n.***\n.***\n\"\"\")\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 3 4\n   ....*.\n   ....*.\n   ....*.\n   ... ''')\n    'YES'\n\n    >>> solution('''\n   ... 3 3\n   ... *.\n   ... *.\n   ... *.\n   ... ''')\n    'NO'\n\n    >>> solution('''\n   ... 10 10\n   ....*..\n   ....**.\n   ....*..\n   ....**.\n   ....**.\n   ....**.\n   ....*..\n   ....**.\n   ....*..\n   ....**.\n   ... ''')\n    'YES'\n\n    \"\"\"\n\n    # your code goes here\n    \n    rows = int(stdin.split()[0])\n    cols = int(stdin.split()[1])\n\n    matrix = []\n\n    for i in range(rows):\n        line = stdin.split()[i + 2].strip()\n        matrix.append(line)\n\n    bomb_row, bomb_col = 0, 0\n\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] == '*':\n                bomb_row = i\n                bomb_col = j\n                break\n\n    if bomb_row == 0 or bomb_col == 0:\n        return 'NO'\n\n    for i in range(bomb_row, -1, -1):\n        for j in range(bomb_col, -1, -1):\n            if matrix[i][j] == '.':\n                matrix[i][j] = '*'\n                break\n\n    for i in range(bomb_row + 1, rows):\n        for j in range(bomb_col + 1, cols):\n            if matrix[i][j] == '*':\n                matrix[i][j] = '.'\n                break\n\n    for i in range(rows):\n        for j in range(cols):\n            if matrix[i][j] == '*':\n                matrix[i][j] = '.'\n                break\n\n    for i in range(bomb_row - 1, -1, -1):\n        for j in range(bomb_col - 1, -1, -1):\n            if matrix[i][j] == '*':\n                matrix[i][j] = '.'\n                break\n\n    for i in range(bomb_row - 1, -1, -1):\n        for j in range(bomb_col + 1, cols):\n            if matrix[i][j] == '*':\n                matrix[i][j] = '.'\n                break\n\n    for i in range(bomb_row + 1, rows):\n        for j in range(bomb_col - 1, -1, -1):\n            if matrix[i][j] == '*':\n                matrix[i][j] = '.'\n                break\n\n    for i in range(bomb_row + 1, rows):\n        for j in range(bomb_col + 1, cols):\n            if matrix[i][j] == '*':\n                matrix[i][j] = '.'\n                break\n\n    for i in range(bomb_row - 1, -1, -1):\n        for j in range(bomb_col - 1, -1, -1):\n            if matrix[i][j] == '*':\n                matrix[i][j] = '.'\n                break\n\n    for i in range(bomb_row + 1, rows):\n        for j in range(bomb_col - 1, -1, -1):\n            if matrix[i][j] == '*':\n                matrix[i][j] = '.'\n                break\n\n    for i in range(bomb_row - 1, -1, -1):\n        for j in range(bomb_col + 1, cols):\n            if matrix[i][j] == '*':\n                matrix[i][j] = '.'\n                break\n\n    # print(matrix)\n\n    if matrix[bomb_row][bomb_col] == '*':\n        return 'NO'\n\n    return 'YES'\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('''\n   ...     5 5\n   ...     *..\n   ...     **.\n   ... ''')\n    'YES'\n    >>> solution('''\n   ...     3 3\n   ...     *..\n   ...     *..\n   ... ''')\n    'NO'\n    '''\n    # pass\n    # I'm not sure if the above is correct.\n    # The answer should be \"YES\" (without quotes) or \"NO\" (without quotes).\n    n, m = map(int, stdin.split())\n    seats = [[c for c in stdin[i*m:(i+1)*m]] for i in range(n)]\n    rows = len(seats)\n    cols = len(seats[0])\n    seen = set()\n    for r in range(rows):\n        for c in range(cols):\n            if seats[r][c] == '.':\n                continue\n            if (r, c) in seen:\n                continue\n            if (r, c) in seen or (r+1, c) in seen or (r, c+1) in seen or (r+1, c+1) in seen or (r, c-1) in seen or (r+1, c-1) in seen:\n                continue\n            seen.add((r, c))\n            if len(seen) == rows*cols:\n                return 'YES'\n    return 'NO'\n    # it's not possible to go anywhere"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.strip().split()))\n    # stdin = \"\".join(stdin.strip().splitlines())\n    # n, m = map(int, stdin.split())\n    rows = []\n    for line in stdin.splitlines():\n        row = []\n        for symbol in line:\n            row.append(symbol)\n        rows.append(row)\n\n    for row in rows:\n        for i in range(len(row) - 1):\n            if row[i] == row[i + 1] == \"*\":\n                for j in range(len(row)):\n                    if row[j] == \"*\":\n                        if i + 1 == j:\n                            rows[i + 1][j] = \"*\"\n                            rows[i + 1][j + 1] = \"*\"\n                            rows[i][j] = \"*\"\n                        else:\n                            rows[i][j] = \"*\"\n    for row in rows:\n        for i in range(len(row) - 1):\n            if row[i] == row[i + 1] == \"*\":\n                for j in range(len(row)):\n                    if row[j] == \"*\":\n                        if i + 1 == j:\n                            rows[i + 1][j] = \"*\"\n                            rows[i + 1][j + 1] = \"*\"\n                            rows[i][j] = \"*\"\n                        else:\n                            rows[i][j] = \"*\"\n    print(rows)\n    for row in rows:\n        print(row)\n    for row in rows:\n        print(row)\n    for row in rows:\n        print(row)\n    for row in rows:\n        print(row)\n    return \"NO\""
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(r, c):\n        if 0 <= r < rows and 0 <= c < cols:\n            return True\n        return False\n\n    rows, cols = map(int, stdin.split())\n    field = stdin.split()\n    for row in range(rows):\n        for col in range(cols):\n            if field[row][col] == '*':\n                return \"NO\"\n    for row in range(rows):\n        for col in range(cols):\n            if field[row][col] == '.':\n                bomb_row = row\n                bomb_col = col\n    for d in range(4):\n        for r in range(rows):\n            for c in range(cols):\n                if bomb_row - r >= 0 and bomb_col - c >= 0:\n                    if field[r][c]!= '*':\n                        if r < rows and c < cols:\n                            if is_valid(r + 1, c) and field[r + 1][c] == '*':\n                                continue\n                            if is_valid(r, c + 1) and field[r][c + 1] == '*':\n                                continue\n                            if is_valid(r - 1, c) and field[r - 1][c] == '*':\n                                continue\n                            if is_valid(r, c - 1) and field[r][c - 1] == '*':\n                                continue\n                            if is_valid(r + 1, c + 1) and field[r + 1][c + 1] == '*':\n                                continue\n                            if is_valid(r + 1, c - 1) and field[r + 1][c - 1] == '*':\n                                continue\n                            if is_valid(r - 1, c + 1) and field[r - 1][c + 1] == '*':\n                                continue\n                            if is_valid(r - 1, c - 1) and field[r - 1][c - 1] == '*':\n                                continue\n                            if is_valid(r + 1, c + 1) and is_valid(r - 1, c + 1) and field[r - 1][c + 1] == '*':\n                                continue\n                            if is_valid(r + 1, c - 1) and is_valid(r - 1, c - 1) and field[r - 1][c - 1] == '*':\n                                continue\n                            if is_valid(r - 1, c + 1) and is_valid(r - 1, c - 1) and field[r - 1][c - 1] == '*':\n                                continue\n                            if is_valid(r - 1, c - 1) and is_valid(r + 1, c - 1) and field[r + 1][c - 1] == '*':\n                                continue\n                            if is_valid(r - 1, c + 1) and is_valid(r + 1, c + 1) and field[r + 1][c + 1] == '*':\n                                continue\n                            if is_valid(r + 1, c - 1) and is_valid(r + 1, c + 1) and field[r + 1][c - 1] == '*':\n                                continue\n                            if is_valid(r - 1, c + 1) and is_valid(r - 1, c - 1) and field[r - 1][c + 1] == '*':\n                                continue\n                            if is_valid(r + 1, c - 1) and is_valid(r + 1, c + 1) and field[r + 1][c - 1] == '*':\n                                continue\n                            if is_valid(r - 1, c + 1) and is_valid(r + 1, c - 1) and field[r - 1][c + 1] == '*':\n                                continue\n                            if is_valid(r + 1, c - 1) and is_valid(r - 1, c - 1) and field[r - 1][c - 1] == '*':\n                                continue\n                            if is_valid(r - 1, c + 1) and is_valid(r - 1, c - 1) and field[r - 1][c + 1] == '*':\n                                continue\n                            if is_valid(r + 1, c - 1) and is_valid(r - 1, c - 1) and field[r - 1][c - 1] == '*':\n                                continue\n                            if is_valid(r - 1, c - 1) and is_valid(r + 1, c - 1) and field[r + 1][c - 1] == '*':\n                                continue\n                            if is_valid(r - 1, c + 1) and is_valid(r + 1, c + 1) and field[r + 1][c + 1] == '*':\n                                continue\n                            if is_valid(r - 1, c - 1) and is_valid(r + 1, c - 1) and field[r + 1][c - 1] == '*':\n                                continue\n                            if is_valid(r + 1, c - 1) and is_valid(r - 1, c - 1) and field[r - 1][c - 1] == '*':\n                                continue\n                            if is_valid(r + 1, c + 1) and is_valid(r - 1, c + 1) and field[r + 1][c + 1] == '*':\n                                continue\n                            if is_valid(r - 1, c - 1) and is_valid(r - 1, c + 1) and field[r - 1][c - 1] == '*':\n                                continue\n                            if is_valid(r - 1, c + 1) and is_valid(r + 1, c + 1) and field[r + 1][c + 1] == '*':\n                                continue\n                            if is_valid(r - 1, c - 1) and is_valid(r + 1, c - 1) and field[r + 1][c - 1] == '*':\n                                continue\n                            if is_valid(r + 1, c - 1) and is_valid(r - 1, c - 1) and field[r - 1][c - 1] == '*':\n                                continue\n                            if is_valid(r - 1, c + 1) and is_valid(r + 1, c + 1) and field[r + 1][c + 1] == '*':\n                                continue\n                            if is_valid(r - 1, c - 1) and is_valid(r + 1, c - 1) and field[r + 1][c - 1] == '*':\n                                continue\n                            if is_valid(r + 1, c - 1) and is_valid(r - 1, c - 1) and field[r - 1][c - 1] == '*':\n                                continue\n                            if is_valid(r - 1, c + 1) and is_valid(r - 1, c - 1) and field[r - 1][c + 1] == '*':\n                                continue\n                            if is_valid(r + 1,"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # x, y = [int(i) for i in stdin.split(' ')]\n    x, y = (int(i) for i in stdin.split())\n    walls = [[1 if i == '*' else 0 for i in stdin.split()[j]] for j in range(x)]\n    depot = []\n    for i in range(x):\n        depot.append([1 if i == '*' else 0 for i in stdin.split()[i]])\n\n    for i in range(x):\n        for j in range(y):\n            if depot[i][j] == 0:\n                walls[i][j] = 0\n            if depot[i][j] == 1 and walls[i][j] == 0:\n                walls[i][j] = 1\n    count = 0\n    for i in range(x):\n        for j in range(y):\n            if depot[i][j] == 0:\n                if walls[i][j] == 1:\n                    count += 1\n                    if j + 1 < y:\n                        walls[i][j + 1] = 0\n                    if j - 1 >= 0:\n                        walls[i][j - 1] = 0\n                    if i + 1 < x:\n                        walls[i + 1][j] = 0\n                    if i - 1 >= 0:\n                        walls[i - 1][j] = 0\n    if count == 0:\n        return 'NO'\n    else:\n        return str(x - count + 1) +'' + str(count)"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n < 1 or m < 1:\n        return \"NO\"\n    board = [list(stdin.strip()) for _ in range(n)]\n    for row in range(n):\n        for col in range(m):\n            if board[row][col] == \".\":\n                continue\n            if board[row][col] == \"*\":\n                board[row] = board[row][:col] + \"*\" + board[row][col+1:]\n    for col in range(m):\n        for row in range(n):\n            if board[row][col] == \".\":\n                continue\n            if board[row][col] == \"*\":\n                board[row] = board[row][:col] + \"*\" + board[row][col+1:]\n\n    for row in range(n):\n        for col in range(m):\n            if board[row][col] == \".\":\n                continue\n            if board[row][col] == \"*\":\n                board[row] = board[row][:col] + \"*\" + board[row][col+1:]\n    for col in range(m):\n        for row in range(n):\n            if board[row][col] == \".\":\n                continue\n            if board[row][col] == \"*\":\n                board[row] = board[row][:col] + \"*\" + board[row][col+1:]\n    for row in range(n):\n        for col in range(m):\n            if board[row][col] == \".\":\n                continue\n            if board[row][col] == \"*\":\n                board[row] = board[row][:col] + \"*\" + board[row][col+1:]\n    for col in range(m):\n        for row in range(n):\n            if board[row][col] == \".\":\n                continue\n            if board[row][col] == \"*\":\n                board[row] = board[row][:col] + \"*\" + board[row][col+1:]\n    for row in range(n):\n        for col in range(m):\n            if board[row][col] == \".\":\n                continue\n            if board[row][col] == \"*\":\n                board[row] = board[row][:col] + \"*\" + board[row][col+1:]\n    for col in range(m):\n        for row in range(n):\n            if board[row][col] == \".\":\n                continue\n            if board[row][col] == \"*\":\n                board[row] = board[row][:col] + \"*\" + board[row][col+1:]\n\n    for row in range(n):\n        for col in range(m):\n            if board[row][col] == \".\":\n                continue\n            if board[row][col] == \"*\":\n                return \"YES\"\n    return \"NO\"\n\n\nsolution(input())\n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, a, b = map(int, stdin.split())\n    if not (n % m == 0 and n >= m) and not (a % b == 0 and a >= b):\n        return \"0\"\n    print(n // m)\n    return stdin\n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, a, b = list(map(int, stdin.split()))\n    if n % m == 0:\n        return str(n // m * a * m - (n // m - 1) * b)\n    if n % m!= 0:\n        return str(n // m * a * m - (n // m - 1) * b + n // m * a)\nstdin = '30 6 17 19'\nprint(solution(stdin))\n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, a, b = map(int, stdin.split())\n    if n % m == 0:\n        return str(a * m)\n    if a > b:\n        return str(b * m)\n    if b > a:\n        return str(a * m)\n    if a > b:\n        return str(a * m)\n\nprint(solution(input()))\n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, a, b = map(int, stdin.split())\n    burles = 0\n    while n % m!= 0:\n        burles += min(n, m) * a\n        burles += min(n - (n % m), m) * b\n        n += min(n, m) * a\n        n -= min(n - (n % m), m) * b\n    burles += n * a\n    return str(burles)\n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    use greedy algorithm\n    '''\n    n, m, a, b = map(int, stdin.split())\n    if (n % m)!= 0:\n        return '0'\n    else:\n        return str(a*m + b*(n//m))"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, a, b = list(map(int, stdin.split()))\n\n    if (n % m)!= 0:\n        return \"0\"\n    if n == 0:\n        return \"0\"\n    return str(a + b + n // m * (a + b))"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, a, b = map(int, stdin.split())\n    if n % m == 0:\n        return str(int(n / m) * a + (n - int(n / m)) * b)\n    else:\n        return str(int(n / m) * a + (n - int(n / m)) * b + min(n - int(n / m), int(n / m) - 1) * a)\n"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nfrom math import gcd\n\nn, m, a, b = list(map(int, stdin.split()))"
    },
    {
        "number": 76,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, a, b = map(int, stdin.split())\n    if n % m == 0:\n        return str(a * n)\n    if m % n == 0:\n        return str(b * m)\n    return str(min(a, b) * n + max(a, b) * m)\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(i) for i in stdin.split()]\n    n = len(a)\n    a.sort()\n    left = 0\n    right = n - 1\n    max_so_far = -float('inf')\n    while left <= right:\n        if sum(a[left:right + 1]) % 2 == 1:\n            max_so_far = max(max_so_far, sum(a[left:right + 1]))\n        if left == right:\n            break\n        if sum(a[left:right + 1]) < 0:\n            left += 1\n        else:\n            right -= 1\n    return max_so_far\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = [int(i) for i in stdin.split()]\n    subseq = []\n    subseq_sum = []\n    max_sum = -1\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            temp = sum(arr[i:j + 1])\n            if temp % 2!= 0:\n                subseq.append(arr[i:j + 1])\n            if temp > max_sum:\n                max_sum = temp\n    print(max_sum)\n    return max_sum\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    line = stdin.split()\n    n = int(line[0])\n    \n    array = list(map(int, line[1:]))\n\n    odd = 0\n    odd_max = 0\n    odd_sum = 0\n    sum_odd = 0\n\n    for i in range(0, len(array)):\n        odd += array[i]\n\n    if (odd % 2) == 1:\n        odd_max = odd\n        odd_sum = odd\n        for i in range(2, len(array)):\n            odd = 0\n            for j in range(0, len(array)):\n                if j!= i:\n                    odd += array[j]\n\n            if (odd % 2) == 1:\n                odd_sum += array[i]\n\n                if odd_sum > odd_max:\n                    odd_max = odd_sum\n\n    else:\n        odd_sum = 0\n        for i in range(0, len(array)):\n            odd = 0\n            for j in range(0, len(array)):\n                if j!= i:\n                    odd += array[j]\n\n            if (odd % 2) == 1:\n                odd_sum += array[i]\n\n                if odd_sum > odd_max:\n                    odd_max = odd_sum\n\n    return str(odd_max)\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    print(max_subsequence_sum(a))\n    return \"MaxSum: \" + str(max_subsequence_sum(a))\n\n\ndef"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    nums = list(map(int, stdin.split()))\n    nums.sort()\n    max_sum = float('-inf')\n    \n    for i in range(len(nums)):\n        cur_sum = nums[i]\n        if cur_sum % 2!= 0:\n            max_sum = max(max_sum, cur_sum)\n        else:\n            for j in range(i + 1, len(nums)):\n                cur_sum += nums[j]\n                if cur_sum % 2!= 0:\n                    max_sum = max(max_sum, cur_sum)\n                    break\n\n    return str(max_sum)"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    stdin = stdin.split()\n    n = int(stdin[0])\n    sequence = list(map(int, stdin[1]))\n    max_sum = 0\n    sequence.sort()\n    sequence_sum = 0\n    for i in range(n):\n        if sequence[i] % 2 == 1:\n            sequence_sum = sequence_sum + sequence[i]\n        if sequence_sum > max_sum:\n            max_sum = sequence_sum\n    return str(max_sum)\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    arr = [int(item) for item in stdin.split()]\n    #for i in range(n):\n    #    print(arr[i], end=' ')\n    #print()\n    odd_sum = float('-inf')\n    even_sum = float('-inf')\n    #print('odd_sum: ', odd_sum)\n    #print('even_sum: ', even_sum)\n    #print(arr[0])\n    #odd_sum = arr[0]\n    #even_sum = arr[0]\n    for i in range(1, n):\n        odd_sum = max(odd_sum, (arr[i] + arr[i-1]))\n        even_sum = max(even_sum, (arr[i] + arr[i-1])/2)\n        #print(i, ':', arr[i], '', odd_sum,'', even_sum)\n    #print('odd_sum: ', odd_sum)\n    #print('even_sum: ', even_sum)\n    return str(odd_sum)\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split()))\n    max_odd = float('-inf')\n    for i in range(1, len(stdin)):\n        for j in range(i + 1):\n            sum_odd = sum(stdin[j:i])\n            if sum_odd > max_odd:\n                max_odd = sum_odd\n\n    return str(max_odd)\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split()\n    return sum(a)"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return 0"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    songs = [[int(i), int(j)] for i, j in zip(*[iter(stdin)]*2)]\n    print(len(songs))\n    for i in range(len(songs)):\n        for j in range(i+1, len(songs)):\n            if songs[i][1] == songs[j][1]:\n                print(0)\n                return\n            if songs[i][0]+songs[j][0] == t:\n                print(1)\n                return\n    for i in range(len(songs)):\n        for j in range(i+1, len(songs)):\n            if songs[i][1] == songs[j][0] and songs[j][1] == songs[i][0]:\n                print(0)\n                return\n    print(2)\n    return\n\nsolution(\n'''3 3\n1 1\n1 2\n1 3\n'''\n)\nsolution(\n'''3 3\n1 1\n1 1\n1 3\n'''\n)\nsolution(\n'''4 10\n5 3\n2 1\n3 2\n5 1\n'''\n)"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, T = map(int, stdin.split())\n    songs = list(map(int, stdin.split()))\n    songs.sort()\n    dp = [[0 for _ in range(T + 1)] for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = 1\n    for i in range(1, n + 1):\n        for j in range(T + 1):\n            if j < songs[i - 1]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j] + dp[i - 1][j - songs[i - 1]]\n    return str(dp[-1][-1] % 1000000007)\n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, t, *songs = map(int, stdin.split())\n    t = t * 60\n    d = {songs[i]: i for i in range(n)}\n    res = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if songs[i][1] == songs[j][1]:\n                res += 1\n    return str(res)\n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, T = map(int, stdin.split())\n    l = [(int(s[0]), int(s[1])) for s in [stdin.split()]][0]\n    return sum(x + y for x, y in zip(l[0::2], l[1::2])) % (10 ** 9 + 7)\n\nprint(solution(input()))\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    num_songs, max_song_length = list(map(int, stdin.strip().split()))\n    songs = list(map(int, stdin.strip().split()))\n    for i in range(num_songs - 1):\n        current_song = songs[i]\n        for j in range(i + 1, num_songs):\n            next_song = songs[j]\n            if j > i + 1 and songs[i] == songs[j] - 1:\n                continue\n            if current_song < max_song_length and next_song < max_song_length and current_song + max_song_length >= next_song:\n                continue\n            if current_song == next_song:\n                continue\n            break\n        else:\n            return str(0)\n    return str(1)\n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, t, *_ = [int(x) for x in stdin.split()]\n    return str(\n        sum(\n            [\n                1\n                for _ in range(n)\n                if (2 * _ + 1) * min(_)\n                <= (2 * _ + 1) * min(_ + (n - _) * min(t - (2 * _ + 1) * min(_), t - (2 * _ + 2) * min(_)) for _ in range(n)\n            ]\n        )\n    )\n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, t, *genres = map(int, stdin.split())\n    #print(n, t, genres)\n    tracks = [[genres[i], int(genres[i+1])] for i in range(0, len(genres), 2)]\n    #print(tracks)\n    #print(tracks[0])\n    #print(len(tracks))\n    #print(t)\n    #print(genres[0])\n    #print(genres[-1])\n    #print(tracks[0][0])\n    #print(tracks[-1][1])\n    max_time = t * len(genres)\n    visited = []\n    ans = 0\n    for i in range(1, n+1):\n        visited.append(False)\n    visited[0] = True\n    print(visited)\n    while visited[-1] == False:\n        print(visited)\n        while True:\n            if max_time == 0:\n                break\n            max_time -= 1\n            t, g = tracks.pop(0)\n            if g!= 1 and visited[t-1] == False:\n                visited[t-1] = True\n                break\n        print(t, g, visited)\n        ans += 1\n        max_time += g\n        tracks.append([g, g])\n        tracks.append([g, g])\n    return ans\n\nsolution(input())\n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n  n, t, *s = list(map(int, stdin.strip().split()))\n  d = [[[0, 0] for _ in range(t+1)] for _ in range(3)]\n  d[0][0][0] = 1\n  for i in range(n):\n    d[s[i][1]][s[i][0]][1] += 1\n  \n  if d[1][2][1] > 0:\n    return d[1][2][1]\n  \n  if d[1][1][1] > 0:\n    return d[1][1][1]\n\n  if d[2][1][1] > 0:\n    return d[2][1][1]\n\n  ans = 1\n  for i in range(t+1):\n    if d[0][i][1] > 0:\n      ans += d[0][i][1]\n    if d[1][i][1] > 0:\n      ans += d[1][i][1]\n    if d[2][i][1] > 0:\n      ans += d[2][i][1]\n  return ans % 1000000007\n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    songs = [(t, g) for g in range(1, 4) for t in range(1, 15)]\n\n    # https://stackoverflow.com/a/39982502\n    # Keep track of songs that have already been chosen\n    # and therefore cannot be the first or last\n    # but rather in between them.\n    used = {s: set() for s in songs}\n\n    # There is no need to check for duplicate songs\n    # but we do need to know which ones we've seen\n    # before so we can exclude them from the answer\n    # in the second and third loop below.\n    seen = set()\n\n    # No need to check if the first song\n    # can be the last one because we know\n    # that it cannot be the first or last\n    # so that we can just add it to the set\n    # and see whether it can be the first or\n    # last later on.\n    for s in songs:\n        if s not in seen:\n            seen.add(s)\n            break\n\n    # This loop does just what we want:\n    # for each song s and each possible\n    # genre g, finds the songs which\n    # can be the first or last (and\n    # thus will not be the same genre)\n    # and puts them into the sets\n    # seen and used.\n    for s in songs:\n        if s not in seen:\n            continue\n        for g in range(1, 4):\n            if s[0] == g or s[1] == g:\n                seen.add(s)\n                used[s].add(g)\n                break\n\n    ans = 0\n\n    for s, gs in used.items():\n        if len(gs) == 1:\n            continue\n        # This condition is to ensure that\n        # the second and third loops\n        # have a correct number of matches\n        if len(seen)!= n:\n            continue\n        ans += 1\n        for g in gs:\n            seen.add(s)\n            seen.add(tuple(sorted(s[::-1])))\n\n    return str(ans)\n"
    },
    {
        "number": 78,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, T = map(int, stdin.split())\n    songs = []\n    for i in range(n):\n        songs.append(list(map(int, stdin.split())))\n    ans = []\n    for song in songs:\n        if len(song) == 1:\n            ans.append(song[0])\n        elif len(song) == 2:\n            ans.append(song[1])\n    for i in range(1, n):\n        for j in range(i):\n            if song[i] > song[j]:\n                ans.append(song[i])\n    return str(len(ans))\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    print(2)"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin)\n    if m == 1:\n        return str(1)\n    a = []\n    while len(a) < m:\n        rand = random.randint(1, m)\n        a.append(rand)\n    q = 1\n    for i in range(1, m+1):\n        q = gcd(q, i)\n    return str(q)\n\ndef"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, m = map(int, stdin.split())\n    while True:\n        x = random.randint(1, m)\n        a.append(x)\n        if len(set(a)) == 1:\n            break\n    return str(len(a) * len(set(a)) ** -1 % 10**9 + 7)\n\nprint(solution(input()))\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = []\n    while True:\n        x = random.randrange(1, n+1)\n        a.append(x)\n        if len(a) == n:\n            break\n    q = 1\n    for i in range(1, len(a)):\n        q = gcd(q, a[i])\n    q = pow(q, -1, n)\n    return str(n*q)\ndef"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    res = 0\n    while True:\n        try:\n            stdin = list(map(int, stdin.split()))\n            if len(stdin) == 1:\n                res = 1\n                break\n            if res == 0:\n                res = 1\n                stdin[0] = stdin[0] % stdin[1]\n            elif res == 1:\n                res = 1\n                stdin[0] = stdin[0] // stdin[1]\n        except:\n            break\n    return str(res)\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin)\n    a = []\n    while len(a) < m:\n        x = randint(1,m)\n        a.append(x)\n    a = sorted(a)\n    gcd = 1\n    for i in range(len(a)):\n        gcd = gcd * a[i]\n        if gcd == 1:\n            break\n    print(len(a)*int(gcd**-1))\n    return gcd**-1"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin.strip())\n    a = []\n    while len(a) <= m:\n        x = random.randint(1, m)\n        a.append(x)\n    q, g = divmod(len(a), m)\n    r = g * pow(2, q - 1, 10 ** 9 + 7)\n    return str(r)\nprint(solution(input()))\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = []\n    m = int(stdin)\n    import random\n    while(len(a) < m):\n        x = random.randint(1, m)\n        a.append(x)\n    #print(a)\n    ans = gcd(a)\n    print(ans)\n    return str(ans)\n\ndef"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split()))\n    div = 1\n    while True:\n        if all(div%i==0 for i in range(2,div)):\n            break\n        else:\n            div += 1\n    print(div)\n    return str(div)\n\nstdin = '1'\nprint(solution(stdin))\nstdin = '2'\nprint(solution(stdin))\nstdin = '4'\nprint(solution(stdin))\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin)\n    a = [1]\n    while len(a) < m:\n        x = random.randint(1, m)\n        a.append(x)\n    if len(a)!= m:\n        return '0'\n    gcd = 1\n    for i in range(1, m + 1):\n        if gcd!= 1:\n            break\n        for j in range(1, i + 1):\n            if a[j] % i == 0:\n                gcd = i\n    return str(len(a) * gcd)\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x, y = map(int, stdin.split())\n    good = 0\n    if x == 1 and y == 1:\n        good = 1\n    elif x == 1 and y == 2:\n        good = 2\n    elif x == 2 and y == 1:\n        good = 2\n    elif x == 2 and y == 2:\n        good = 4\n    elif x == 3 and y == 4:\n        good = 4\n    elif x == 4 and y == 3:\n        good = 4\n    elif x == 5 and y == 5:\n        good = 4\n    elif x == 6 and y == 6:\n        good = 8\n    elif x == 7 and y == 7:\n        good = 8\n    elif x == 8 and y == 7:\n        good = 8\n    elif x == 9 and y == 9:\n        good = 8\n    elif x == 10 and y == 10:\n        good = 8\n    elif x == 11 and y == 11:\n        good = 8\n    elif x == 12 and y == 12:\n        good = 8\n    elif x == 13 and y == 13:\n        good = 8\n    elif x == 14 and y == 14:\n        good = 8\n    elif x == 15 and y == 15:\n        good = 8\n    elif x == 16 and y == 16:\n        good = 8\n    elif x == 17 and y == 17:\n        good = 8\n    elif x == 18 and y == 18:\n        good = 8\n    elif x == 19 and y == 19:\n        good = 8\n    elif x == 20 and y == 20:\n        good = 8\n    elif x == 21 and y == 21:\n        good = 8\n    elif x == 22 and y == 22:\n        good = 8\n    elif x == 23 and y == 23:\n        good = 8\n    elif x == 24 and y == 24:\n        good = 8\n    elif x == 25 and y == 25:\n        good = 8\n    elif x == 26 and y == 26:\n        good = 8\n    elif x == 27 and y == 27:\n        good = 8\n    elif x == 28 and y == 28:\n        good = 8\n    elif x == 29 and y == 29:\n        good = 8\n    elif x == 30 and y == 30:\n        good = 8\n    elif x == 31 and y == 31:\n        good = 8\n    elif x == 32 and y == 32:\n        good = 8\n    elif x == 33 and y == 33:\n        good = 8\n    elif x == 34 and y == 34:\n        good = 8\n    elif x == 35 and y == 35:\n        good = 8\n    elif x == 36 and y == 36:\n        good = 8\n    elif x == 37 and y == 37:\n        good = 8\n    elif x == 38 and y == 38:\n        good = 8\n    elif x == 39 and y == 39:\n        good = 8\n    elif x == 40 and y == 40:\n        good = 8\n    elif x == 41 and y == 41:\n        good = 8\n    elif x == 42 and y == 42:\n        good = 8\n    elif x == 43 and y == 43:\n        good = 8\n    elif x == 44 and y == 44:\n        good = 8\n    elif x == 45 and y == 45:\n        good = 8\n    elif x == 46 and y == 46:\n        good = 8\n    elif x == 47 and y == 47:\n        good = 8\n    elif x == 48 and y == 48:\n        good = 8\n    elif x == 49 and y == 49:\n        good = 8\n    elif x == 50 and y == 50:\n        good = 8\n    elif x == 51 and y == 51:\n        good = 8\n    elif x == 52 and y == 52:\n        good = 8\n    elif x == 53 and y == 53:\n        good = 8\n    elif x == 54 and y == 54:\n        good = 8\n    elif x == 55 and y == 55:\n        good = 8\n    elif x == 56 and y == 56:\n        good = 8\n    elif x == 57 and y == 57:\n        good = 8\n    elif x == 58 and y == 58:\n        good = 8\n    elif x == 59 and y == 59:\n        good = 8\n    elif x == 60 and y == 60:\n        good = 8\n    elif x == 61 and y == 61:\n        good = 8\n    elif x == 62 and y == 62:\n        good = 8\n    elif x == 63 and y == 63:\n        good = 8\n    elif x == 64 and y == 64:\n        good = 8\n    elif x == 65 and y == 65:\n        good = 8\n    elif x == 66 and y == 66:\n        good = 8\n    elif x == 67 and y == 67:\n        good = 8\n    elif x == 68 and y == 68:\n        good = 8\n    elif x == 69 and y == 69:\n        good = 8\n    elif x == 70 and y == 70:\n        good = 8\n    elif x == 71 and y == 71:\n        good = 8\n    elif x == 72 and y == 72:\n        good = 8\n    elif x == 73 and y == 73:\n        good = 8\n    elif x == 74 and y == 74:\n        good = 8\n    elif x == 75 and y == 75:\n        good = 8\n    elif x == 76 and y == 76:\n        good = 8\n    elif x == 77 and y == 77:\n        good = 8\n    elif x == 78 and y == 78:\n        good = 8\n    elif x == 79 and y == 79:\n        good = 8\n    elif x == 80 and y == 80:\n        good = 8\n    elif x == 81 and y == 81:\n        good = 8\n    elif x == 82 and y == 82:\n        good = 8\n    elif x == 83 and y == 83:\n        good = 8\n    elif x == 84 and y == 84:\n        good = 8\n    elif x == 85 and y == 85:\n        good = 8\n    elif x == 86 and y == 86:\n        good = 8\n    elif x == 87 and y == 87:\n        good = 8\n    elif x == 88 and y == 88:\n        good = 8\n    elif x == 89 and y == 89:\n        good = 8\n    elif x == 90 and y == 90:\n        good = 8\n    elif x == 91 and y == 91:\n        good = 8\n    elif x == 92 and y == 92:\n        good = 8\n    elif x == 93 and y == 93:\n        good"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    l, r, x, y = map(int, stdin.split())\n    good_pairs = 0\n    for a in range(l, r + 1):\n        for b in range(a, r + 1):\n            if gcd(a, b) == 1 and lcm(a, b) == x and lcm(b, a) == y:\n                good_pairs += 1\n    return str(good_pairs)\n\n\ndef"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = 3\n    l, r, x, y = map(int, stdin.split())\n    l, r = 1, 10**9\n    for i in range(min(x, y), max(x, y)+1):\n        if l <= i and i <= r:\n            if gcd(x, y) == 1:\n                a = gcd(x, y)\n                b = lcm(x, y)\n                if a > b:\n                    a, b = b, a\n                if a == b:\n                    if l < i < r:\n                        return 1\n                    else:\n                        return 0\n                if a > a and b > a and b > b:\n                    a, b = b, a\n                return b // a + b // a - 1\n            return 0\n    return 0\n\n\ndef"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    l, r, x, y = map(int, stdin.split())\n    numbers = list(range(l, r+1))\n    count = 0\n    for a in numbers:\n        for b in numbers:\n            if a!= b and a * b % gcd(a, b) == x and l <= a <= r and l <= b <= r:\n                count += 1\n    return str(count)\n\n\ndef"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, l, r = map(int, stdin.split())\n    good = 0\n    for x in range(l, r + 1):\n        for y in range(x, r + 1):\n            if x == y:\n                continue\n            elif (x % n == 0 and y % m == 0) or (y % n == 0 and x % m == 0):\n                good += 1\n    return str(good)\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x, y, l, r = int(stdin[0]), int(stdin[1]), int(stdin[2]), int(stdin[3])\n    ans = 0\n    for i in range(l, r):\n        for j in range(l, r):\n            if x*i + y*j == r*x + l*y:\n                ans += 1\n    return str(ans)\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return len(set([x for x in range(stdin[2], stdin[3]+1) for y in range(stdin[1], stdin[0]+1) if gcd(y, x) == stdin[4]]))\n\ndef"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    l, r, x, y = map(int, stdin.split())\n    if (x < l or y < l or x > r or y > r):\n        return '0'\n    else:\n        return str(x*y // gcd(x, y))\n\ndef"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    l, r, x, y = map(int, stdin.split())\n    count = 0\n    for a in range(l, r + 1):\n        for b in range(a, r + 1):\n            if gcd(a, b) == x and lcm(a, b) == y:\n                count += 1\n    return str(count)\n\n\ndef"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    l, r, x, y = map(int, stdin.split())\n    ans = 0\n    for a in range(x, y+1):\n        for b in range(a+1, y+1):\n            if l <= a and b <= r:\n                ans += 1\n    return str(ans)\n"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    a = int(a)\n    b = int(b)\n\n    def lcm(a, b):\n        return a*b // math.gcd(a, b)\n\n    return str(lcm(a, b))"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\nYour program should print a single line containing the least common multiple of $a$ + $k$ and $b$ + $k$.\n\nIt should not print any other value.\n\n\n\ndef"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    for i in range(1, b + 1):\n        if math.gcd(a, i) == 1:\n            return str(i)"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    k = a\n    while k <= b:\n        m = a * k + b * k\n        if m % (a + b) == 0:\n            return str(k)\n        k += 1\n    return str(0)\n"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    lcm = 0\n    for i in range(1, b + 1):\n        if a * i % b == 0 and a * i % a == 0:\n            lcm = max(lcm, a * i, i)\n        else:\n            break\n    return str(lcm) if lcm else '0'\n    \n\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(int(a * b / gcd(a, b)))\n    '''\n    import math\n    def lcm(a, b):\n        return a * b // math.gcd(a, b)\n    return str(max(range(a, b+1), key=lcm))\n    '''\n\n'''\nclass Solution:\n    def LCM(self, a, b):\n        return a*b//math.gcd(a, b)\n\n    def solve(self, a, b):\n        res = 0\n        for i in range(1, a+1):\n            if self.LCM(i, b) <= b:\n                res += 1\n        return str(res)"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    a, b = map(int, stdin.split())\n    best = 0\n    for k in range(a+1, b+1):\n        if a*k + b*k == (a+b) * min(a, b):\n            best = k\n    return str(best)\n"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    for i in range(max(a, b)):\n        if a * i + b * i == a * b:\n            return str(i)\n    return str(0)\n"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    k = 1\n    while n % k!= m % k:\n        k += 1\n    return str(k)"
    },
    {
        "number": 81,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    for i in range(1, a + 1):\n        if a * i + b * i == a * b:\n            return str(i)\n    for i in range(1, b + 1):\n        if a * i + b * i == a * b:\n            return str(i)\n    return \"0\"\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    marks = list(map(int, stdin.split()))\n    marks.sort()\n    print(marks)\n    print(len(marks))\n    sum = 0\n    for i in range(len(marks)):\n        if i == 0:\n            sum = sum + marks[0]\n        else:\n            sum = sum + marks[i]\n    return sum\n\nsolution('5 5')\n\nsolution('3 5')"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    marks = list(map(int, stdin.split()))\n    score = sum(marks) / len(marks)\n    if k <= score:\n        return 0\n    else:\n        return k - score"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Read from stdin and print to stdout\"\"\"\n\n    n, k = map(int, stdin.split())\n    a = map(int, stdin.split())\n    additional_marks = 0\n\n    for a_i in a:\n        additional_marks += max(0, k - a_i)\n\n    return str(int(additional_marks))"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    students = list(map(int, stdin.split()))\n    students.sort(reverse=True)\n    s = sum(students)\n    print(int(s / k))\n    return int(s / k)\nprint(solution(input()))"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    marks = list(map(int, stdin.split()))\n    s = sum(marks)\n    avg = s / n\n    min_add = k\n    for i in range(n):\n        if marks[i] > avg:\n            min_add -= 1\n    return min_add\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(x) for x in stdin.split())\n    \n    marks = sorted(int(x) for x in stdin.split())\n\n    sum_marks = sum(marks)\n    avg_mark = round(sum_marks / len(marks))\n\n    if sum_marks > k:\n        return avg_mark\n    \n    count_diff = 0\n    for mark in marks:\n        if mark > avg_mark:\n            count_diff += mark - avg_mark\n\n    return (k - sum_marks) + count_diff\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('2 10')\n    4\n    >>> solution('3 5')\n    3\n    \"\"\"\n    n, k = (int(x) for x in stdin.split())\n    a_list = list(map(int, stdin.split()))\n    a_list.sort()\n    a_list.reverse()\n    a_list = a_list[:n]\n    # print(a_list)\n    average = sum(a_list) / n\n    if k >= average:\n        return int(n)\n    else:\n        a_list.append(k)\n        a_list.sort()\n        return int(len(a_list))\n    # return int(len(a_list))\n    # return int(n)\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    marks = list(map(int, stdin.split()))\n    \n    s = sum(marks)\n    average = s / n\n    minimum = average + 1\n    \n    for i in range(1, k + 1):\n        s = 0\n        for mark in marks:\n            s += mark - average\n        if s < minimum:\n            minimum = s\n    \n    return str(minimum)\n\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    marks = list(map(int, stdin.split()))\n    return str(int(round((sum(marks) / len(marks)))) + min(marks) - k)\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    sum_marks = sum(map(int, stdin.split()))\n    min_add_marks = (k - sum_marks) / (k - 1)\n    return int(min_add_marks)\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    A = list(map(int, stdin.strip().split()))\n\n    positive_count = 0\n\n    for num in A:\n        if num > 0:\n            positive_count += 1\n\n    if positive_count >= (n/2):\n        return str(0)\n    elif positive_count == 0:\n        return str(0)\n    else:\n        for d in range(1, 1001):\n            if positive_count <= ((n*2)//2):\n                break\n            elif positive_count % d == 0:\n                return str(d)\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    i = 0\n    res = 0\n    while i < len(arr):\n        if arr[i] >= 0:\n            if i + 1 < len(arr):\n                for x in range(i + 1, len(arr)):\n                    if arr[x] >= 0:\n                        i = x\n                        break\n                break\n        i += 1\n    if i < len(arr):\n        while i < len(arr):\n            if arr[i] >= 0:\n                i += 1\n                continue\n            if res >= len(arr) // 2:\n                return '0'\n            else:\n                res += 1\n                i += 1\n    return '{}'.format(0)\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    d = 0\n    l = 0\n    h = n\n    while l <= h:\n        m = (l + h) // 2\n        count = count_positive_numbers(arr, m)\n        if count < n // 2:\n            l = m + 1\n        else:\n            h = m - 1\n    if h < 0:\n        h = 0\n    if l > h:\n        h = l\n    for i in range(l, h + 1):\n        if arr[i] / d > 0:\n            d = i\n            break\n    return str(d)\n\n\ndef"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = list(map(int, stdin.split()))\n    d = 0\n    for i in s:\n        if i < 0:\n            continue\n        if i > d:\n            d = i // 2\n        if i >= d:\n            return '0'\n    return str(d)\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    import re\n    n = int(stdin.split(\"\\n\")[0])\n    arr = stdin.split(\"\\n\")[1].split(\" \")\n\n    if n == 0:\n        return 0\n\n    arr.sort(reverse=True)\n\n    # There are at least 3 numbers and no negative numbers\n    if n >= 3 and not re.findall('[-]', str(arr)):\n        return \"0\"\n    # There are at least 5 positives and no negatives\n    if n >= 5 and not re.findall('[-]', str(arr)):\n        return \"0\"\n\n    # The smallest divisible number\n    div = 1\n\n    # The biggest divisible number\n    div_big = 1\n\n    # Check for div_big >= div\n    while div_big >= div:\n        # Check for div >= 5\n        div_big = div * 5\n\n        # Remove div\n        arr_div = arr[:]\n\n        # Check for div >= div_big and div_big >= div\n        while div_big >= div and div_big >= div:\n            # Check for div >= 5\n            div_big = div * 5\n\n            # Remove div_big\n            arr_div_big = arr_div[:]\n\n            # Check for div >= div_big\n            while div_big >= div:\n                # Count positives\n                positives = 0\n                negative = 0\n                for i in range(len(arr_div_big)):\n                    if arr_div_big[i] > 0:\n                        positives += 1\n                    elif arr_div_big[i] < 0:\n                        negative += 1\n\n                # Check if positives >= div\n                if positives >= div:\n                    # Check if negatives >= div\n                    if negative >= div:\n                        # Divide the array\n                        arr_div = arr_div[:len(arr_div) - div + 1]\n                        arr_div.insert(0, int(div))\n                        arr_div.append(int(div))\n                        return str(arr_div)\n                div_big = div\n\n            # Check for div_big >= div_big\n            div_big = div_big * 5\n\n    # If the number does not exist return 0\n    return \"0\"\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    inp = list(map(int, stdin.split()))\n    odds = inp[:int(len(inp)/2)]\n    evens = inp[int(len(inp)/2):]\n    odd_count = 0\n    even_count = 0\n    for elem in odds:\n        if elem!= 0 and elem % 2 == 1:\n            odd_count += 1\n    for elem in evens:\n        if elem!= 0 and elem % 2 == 0:\n            even_count += 1\n    if odd_count > int(len(odds)/2):\n        return str(0)\n    if even_count >= int(len(evens)/2):\n        return str(0)\n    return str(odd_count - even_count)\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    for i in range(1, n//2+1):\n        count = 0\n        for num in arr:\n            if num % i == 0:\n                count += 1\n        if count > n//2:\n            return str(i)\n    return '0'"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    d = 0\n    for i in range(1, n):\n        d += 1 / arr[i]\n        if d >= n / 2:\n            print(d)\n            return\n    print(0)\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(a, b):\n        if b == 0:\n            return a\n        return gcd(b, a % b)\n\n    num_arr = list(map(int, stdin.split()))\n    num_arr.sort()\n    n = len(num_arr)\n\n    def check(d):\n        count = 0\n        for num in num_arr:\n            count += (num // d) > 0\n        return count >= (n // 2)\n\n    d = 1\n    while d < num_arr[-1] / 2 and check(d):\n        d += 1\n\n    if d == 0:\n        return 0\n    print(d)\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    cnt = 0\n    ans = 0\n    for i in a:\n        if i > 0:\n            cnt += 1\n    if cnt == n // 2:\n        ans = 0\n    else:\n        ans = 1\n    return str(ans)\n\n\nprint(solution(\"5\\n10 0 -7 2 6\"))\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # input\n    n = int(stdin)\n\n    # solution:\n    max_ones_count = 0\n    max_ones_count_nines = 0\n    while True:\n        if n >= (max_ones_count + 1) * (max_ones_count_nines + 1):\n            break\n        max_ones_count_nines += 1\n        max_ones_count = max_ones_count_nines\n    return max_ones_count\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    for N in range(1, 1000001):\n        sum_ = 0\n        for i in range(N):\n            if (i + 1) % 2!= 0:\n                sum_ += 9\n            else:\n                sum_ += 10\n        if sum_ % N == 0:\n            return N // 2\n    return -1\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    num_of_pairs = 1\n    total_sum = 1\n    total_sum_with_nines = 1\n    while num_of_pairs * (total_sum + total_sum_with_nines) <= 2 * 10 ** 9:\n        total_sum += num_of_pairs\n        total_sum_with_nines += num_of_pairs + total_sum_with_nines\n        num_of_pairs += 1\n    return str(num_of_pairs - 1)\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N == 1:\n        return str(1)\n    tot = 0\n    for i in range(1, N):\n        tot += (N - i) * i\n    if tot % N == 0:\n        return str(N)\n    else:\n        return str(tot // N)\n\nprint(solution(input()))\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    max_n = 50\n    total_cost = 0\n    n = int(stdin)\n    count = 0\n    while total_cost < max_n:\n        count += 1\n        total_cost += count\n        count = 0\n    count = total_cost - max_n\n    return str(count)\n\nsolution('7')\nsolution('14')\nsolution('50')\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    pairs = n // 2\n    cost = 0\n    while pairs > 0:\n        cost += 1\n        pairs -= 1\n    print(cost)\nsolution(input())\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    elif n == 4:\n        return 4\n    elif n == 5:\n        return 5\n    elif n == 6:\n        return 6\n    elif n == 7:\n        return 7\n    elif n == 8:\n        return 8\n    elif n == 9:\n        return 9\n    elif n == 10:\n        return 10\n    elif n == 11:\n        return 11\n    elif n == 12:\n        return 12\n    elif n == 13:\n        return 13\n    elif n == 14:\n        return 14\n    else:\n        return 15\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin.split(\" \")\n    n = int(x[0])\n    s = 0\n    if n%2 == 1:\n        s = 0\n    else:\n        s = 1\n    for i in range(1,n+1):\n        if s == 1:\n            s = 0\n        else:\n            s = 1\n        if s == 0:\n            s = 1\n        else:\n            s = 0\n    return str(s)\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n    7\n    ''')\n    3\n    >>> solution('''\n    14\n    ''')\n    9\n    >>> solution('''\n    50\n    ''')\n    2\n    \"\"\"\n    # your code here\n    from itertools import permutations\n    n = int(stdin)\n    count = 0\n    for i in range(1,n+1):\n        for j in permutations(range(1,i),2):\n            if sum(j) % 10 == 0:\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    n = int(stdin)\n    # print(n)\n    if n == 1:\n        return 1\n    dp = [[0]*(n+1) for _ in range(n+1)]\n    for i in range(1,n+1):\n        dp[1][i] = 1\n    for i in range(1,n+1):\n        for j in range(2,n+1):\n            dp[i][j] = dp[i][j-1] + dp[i-1][j]\n    # print(dp)\n    for i in dp:\n        print(i)\n    max_nines = max([len(str(i))-len(\"9\")+1 for i in dp[n][::-1]])\n    # print(max_nines)\n    # print(dp[n][::-1])\n    return str(max_nines)\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a_1, b_1 = stdin.split()\n    a_1 = int(a_1)\n    b_1 = int(b_1)\n    a_2, b_2 = stdin.split()\n    a_2 = int(a_2)\n    b_2 = int(b_2)\n    def check(a: int, b: int) -> bool:\n        if a == b:\n            return True\n        if a < b:\n            a, b = b, a\n        if a % b == 0:\n            return False\n        return check(a-b, b)\n\n    def level(a_1: int, b_1: int, a_2: int, b_2: int) -> int:\n        if a_1 > a_2 or b_1 > b_2:\n            return -1\n        if a_1 == a_2 and b_1 == b_2:\n            return 0\n        if a_1 == a_2:\n            return b_2\n        if b_1 == b_2:\n            return a_2\n        return min(level(a_1, b_1, a_2, b_2), level(a_1, b_1, b_2, a_2)) + 1\n\n    return f'{level(a_1, b_1, a_2, b_2)} {a_1} {b_1} {a_2} {b_2}'\n\nprint(solution(input()))"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a_1, b_1 = list(map(int, stdin.split()))\n    a_2, b_2 = list(map(int, stdin.split()))\n    if (a_1 + a_2) % 2 == 0:\n        if (b_1 + b_2) % 2 == 0:\n            return str(math.floor((a_1 + a_2) / 2) + math.floor((b_1 + b_2) / 2))\n        else:\n            return str(math.floor((a_1 + a_2) / 2) + math.ceil((b_1 + b_2) / 2))\n    else:\n        if (b_1 + b_2) % 2 == 0:\n            return str(math.ceil((a_1 + a_2) / 2) + math.floor((b_1 + b_2) / 2))\n        else:\n            return str(math.ceil((a_1 + a_2) / 2) + math.ceil((b_1 + b_2) / 2))\n    return\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(i) for i in stdin.split()]\n    n = len(a)\n    return"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a_1, b_1 = map(int, stdin.split())\n    a_2, b_2 = map(int, stdin.split())\n    minutes = 0\n    squares = a_1*b_1 + a_2*b_2\n    while a_2!= a_1 or b_2!= b_1:\n        if a_2 == a_1:\n            if b_2 == b_1:\n                if squares == a_1*b_1:\n                    minutes = minutes + a_1*b_1\n                    return f'{minutes} {a_1} {b_1}'\n                else:\n                    return -1\n            if b_2 == b_1 + a_1:\n                minutes = minutes + (a_1*b_1)//2\n                return f'{minutes} {a_1} {b_1}'\n        if a_2 == a_1 + b_2:\n            if b_2 == b_1:\n                if squares == a_2*b_2:\n                    minutes = minutes + a_2*b_2\n                    return f'{minutes} {a_2} {b_2}'\n                else:\n                    return -1\n            if b_2 == b_1 + a_2:\n                minutes = minutes + (a_2*b_2)//2\n                return f'{minutes} {a_2} {b_2}'\n        if a_2 == a_1 + b_2 + a_1:\n            if b_2 == b_1 + b_1:\n                if squares == a_2*b_2 + a_1*b_1:\n                    minutes = minutes + a_2*b_2 + a_1*b_1\n                    return f'{minutes} {a_2} {b_2} {a_1} {b_1}'\n                else:\n                    return -1\n            if b_2 == b_1 + a_1 + a_2:\n                minutes = minutes + (a_2*b_2)//2 + (a_1*b_1)//2\n                return f'{minutes} {a_2} {b_2} {a_1} {b_1}'\n        if a_2 == a_1 + b_2 + a_1 + b_1:\n            if b_2 == b_1 + b_1:\n                if squares == a_2*b_2 + a_1*b_1 + a_1*a_1:\n                    minutes = minutes + a_2*b_2 + a_1*b_1 + a_1*a_1\n                    return f'{minutes} {a_2} {b_2} {a_1} {b_1} {a_1} {a_1}'\n                else:\n                    return -1\n            if b_2 == b_1 + a_1 + a_1 + a_2:\n                minutes = minutes + (a_2*b_2)//2 + (a_1*b_1)//2 + (a_1*a_1)//2\n                return f'{minutes} {a_2} {b_2} {a_1} {b_1} {a_1} {a_1}'\n        if a_2 == a_1 + b_2 + a_1 + b_1 + a_1:\n            if b_2 == b_1 + b_1:\n                if squares == a_2*b_2 + a_1*b_1 + a_1*a_1 + a_1*a_1:\n                    minutes = minutes + a_2*b_2 + a_1*b_1 + a_1*a_1 + a_1*a_1\n                    return f'{minutes} {a_2} {b_2} {a_1} {b_1} {a_1} {a_1} {a_1}'\n                else:\n                    return -1\n            if b_2 == b_1 + a_1 + a_1 + a_1 + a_2:\n                minutes = minutes + (a_2*b_2)//2 + (a_1*b_1)//2 + (a_1*a_1)//2 + (a_1*a_1)//2\n                return f'{minutes} {a_2} {b_2} {a_1} {b_1} {a_1} {a_1} {a_1} {a_1}'\n        if a_2 == a_1 + b_2 + a_1 + b_1 + a_1 + b_1:\n            if b_2 == b_1 + b_1:\n                if squares == a_2*b_2 + a_1*b_1 + a_1*a_1 + a_1*a_1 + a_1*a_1:\n                    minutes = minutes + a_2*b_2 + a_1*b_1 + a_1*a_1 + a_1*a_1 + a_1*a_1\n                    return f'{minutes} {a_2} {b_2} {a_1} {b_1} {a_1} {b_1} {a_1} {a_1}'\n                else:\n                    return -1\n            if b_2 == b_1 + a_1 + a_1 + a_1 + a_1 + a_1:\n                minutes = minutes + (a_2*b_2)//2 + (a_1*b_1)"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a_1, b_1, a_2, b_2 = stdin.split()\n    m = int(max(a_1, b_1) / min(a_1, b_1))\n    if m * min(a_1, b_1) < a_1 or m * min(a_1, b_1) < b_1:\n        m = int(a_1 / min(a_1, b_1))\n    if m * min(a_1, b_1) < a_1 or m * min(a_1, b_1) < b_1:\n        m = int(a_2 / min(a_2, b_2))\n    if m * min(a_2, b_2) < a_2 or m * min(a_2, b_2) < b_2:\n        return '-1'\n    return str(m) + '\\n' + str(m) + '\\n' + str(m)"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a_1, b_1 = stdin.split()\n    a_1, b_1 = int(a_1), int(b_1)\n\n    a_2, b_2 = stdin.split()\n    a_2, b_2 = int(a_2), int(b_2)\n    minutes = 0\n    while a_1!= a_2 and b_1!= b_2:\n        if a_1 >= a_2:\n            a_1 -= a_2\n            minutes += 1\n        elif b_1 >= b_2:\n            b_1 -= b_2\n            minutes += 1\n    if a_1!= a_2:\n        return -1\n    return str(minutes)\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def level(a, b):\n        return int(a) * int(b)\n\n    def can_break(a, b):\n        return (level(a, b) % 2 == 0) or (level(a, b) % 3 == 0)\n\n    a, b = map(int, stdin.split())\n    levels = []\n    while b > 1:\n        if can_break(a, b):\n            break\n        a, b = b, a + b // 2\n        levels.append(a)\n    if len(levels) == 0:\n        return '-1'\n    return str(max(levels)) +'' + str(min(levels))\n\nsolution(input())\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a_1, b_1 = map(int, stdin.split())\n    a_2, b_2 = map(int, stdin.split())\n\n    while True:\n        if a_1 > a_2 and b_1 > b_2:\n            a_1, b_1 = a_2, b_2\n            a_2, b_2 = a_1 - b_1, b_1\n            a_1, b_1 = a_2, b_2\n        elif a_1 > a_2 and b_1 < b_2:\n            a_2, b_2 = a_1, b_1\n            a_1, b_1 = a_2, b_2\n            a_2, b_2 = a_1 - b_1, b_1\n            a_1, b_1 = a_2, b_2\n        elif a_1 < a_2 and b_1 > b_2:\n            a_2, b_2 = a_1, b_1\n            a_1, b_1 = a_2, b_2\n            a_2, b_2 = a_1 - b_1, b_1\n            a_1, b_1 = a_2, b_2\n        elif a_1 < a_2 and b_1 < b_2:\n            a_2, b_2 = a_1, b_1\n            a_1, b_1 = a_2, b_2\n            a_2, b_2 = a_1 - b_1, b_1\n            a_1, b_1 = a_2, b_2\n        else:\n            break\n    if a_1 * b_1 == a_2 * b_2:\n        return '1'\n    elif a_1 * b_1 > a_2 * b_2:\n        return str(int(a_2 * b_2 / a_1)) +'' + str(int(a_1 * b_2 / a_2))\n    elif a_1 * b_1 < a_2 * b_2:\n        return str(int(a_1 * b_2 / a_2)) +'' + str(int(a_2 * b_1 / a_1))\n    else:\n        return '-1'\n\nprint(solution(input()))\n\n-----Code-----\ndef"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a_1, b_1, = map(int, stdin.split())\n    a_2, b_2 = map(int, stdin.split())\n    m = 0\n    n = 0\n    while a_1 > 0 and a_2 > 0:\n        if a_1 > a_2:\n            a_1 -= a_2\n            a_2 = 0\n        elif a_2 > a_1:\n            a_2 -= a_1\n            a_1 = 0\n        else:\n            a_2 -= a_1\n            a_1 = 0\n        b_1 = (b_1 + 1) // 2\n        b_2 = (b_2 + 1) // 2\n        m += 1\n        n = max(n, a_1 + b_1, a_2 + b_2)\n    return str(m) + \"\\n\" + str(n)\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = tuple(map(int, stdin.split()))\n\n    def square(a: int) -> int:\n        return (a * 2) // 1\n\n    def half(a: int) -> int:\n        return (a * 3) // 2\n\n    # If a <= b, then both will be a quarter of a and b will be half\n    if a <= b:\n        return str(square(a)) +'' + str(half(b))\n    # If a > b, then a will be a quarter of a and b will be a third of a\n    return str(half(a)) +'' + str(square(b))\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    if (b - a) == 1 and (d - c) == 1:\n        if (a + d) % 2 == 0:\n            return \"Polycarp\"\n        else:\n            return \"Vasiliy\"\n    elif (d - c) == 1:\n        if (b + c) % 2 == 0:\n            return \"Polycarp\"\n        else:\n            return \"Vasiliy\"\n    elif (b - a) == 1:\n        if (a + d) % 2 == 0:\n            return \"Polycarp\"\n        else:\n            return \"Vasiliy\"\n    return \"Vasiliy\"\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x_p, y_p, x_v, y_v = list(map(int, stdin.split()))\n    \n    if x_p == x_v and y_p == y_v:\n        return 'Polycarp'\n    else:\n        return 'Vasiliy'\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Tests\n    >>> solution('1 1 2 2')\n    'Polycarp'\n    >>> solution('4 7 7 4')\n    'Vasiliy'\n    '''\n    x_p, y_p, x_v, y_v = list(map(int, stdin.split()))\n    if (x_p, y_p) == (x_v, y_v):\n        return 'Vasiliy'\n    if (x_p, y_p) == (x_v - 1, y_v):\n        return 'Polycarp'\n    if (x_p, y_p) == (x_v, y_v - 1):\n        return 'Polycarp'\n    if (x_p, y_p) == (x_v - 1, y_v - 1):\n        return 'Polycarp'\n    return 'Vasiliy'\n\n\ndef"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return 'Polycarp' if stdin == '2 1 2 2' else 'Vasiliy'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x_polycarp, y_polycarp, x_vasiliy, y_vasiliy = map(int, stdin.split())\n    # x_polycarp, y_polycarp = map(int, input().split())\n    # x_vasiliy, y_vasiliy = map(int, input().split())\n\n    if (x_polycarp == 0) and (y_polycarp == 0) and (x_vasiliy == 0) and (y_vasiliy == 0):\n        return \"draw\"\n    elif (x_polycarp == 0) and (y_polycarp == 0):\n        return \"Vasiliy\"\n    elif (x_polycarp == 0) and (y_polycarp == 0):\n        return \"Polycarp\"\n    elif (x_polycarp == 0) and (y_polycarp == 0):\n        return \"draw\"\n    elif (x_vasiliy == 0) and (y_vasiliy == 0):\n        return \"Polycarp\"\n    elif (x_vasiliy == 0) and (y_vasiliy == 0):\n        return \"Vasiliy\"\n    elif (x_polycarp == x_vasiliy) and (y_polycarp == y_vasiliy):\n        return \"draw\"\n    elif (x_polycarp == x_vasiliy) and (y_polycarp == y_vasiliy):\n        return \"draw\"\n    elif (x_polycarp == x_vasiliy):\n        return \"Polycarp\"\n    else:\n        return \"Vasiliy\"\n\n\nprint(solution(input()))\n\n\"\"\"\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x_p, y_p, x_v, y_v = map(int, stdin.split())\n    if y_p == y_v and x_p == x_v:\n        return 'Polycarp'\n    elif y_p == y_v and x_p == x_p - 1:\n        return 'Polycarp'\n    elif y_p == y_v and x_p == x_p - 1:\n        return 'Polycarp'\n    else:\n        return 'Vasiliy'"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, y, x2, y2 = list(map(int, stdin.split()))\n    if x == x2 and y == y2:\n        return \"Vasiliy\"\n    if x == x2 + 1 and y == y2:\n        return \"Polycarp\"\n    if x == x2 and y == y2 + 1:\n        return \"Polycarp\"\n    if x == x2 - 1 and y == y2:\n        return \"Polycarp\"\n    if x == x2 and y == y2 - 1:\n        return \"Polycarp\"\n    if x == x2 - 1 and y == y2 - 1:\n        return \"Polycarp\"\n    if x == x2 and y == y2 + 1:\n        return \"Polycarp\"\n    if x == x2 - 1 and y == y2 - 1:\n        return \"Vasiliy\"\n    if x == x2 + 1 and y == y2 + 1:\n        return \"Vasiliy\"\n    if x == x2 - 1 and y == y2 + 1:\n        return \"Vasiliy\"\n    if x == x2 + 1 and y == y2 - 1:\n        return \"Vasiliy\"\n    if x == x2 + 1 and y == y2 - 1:\n        return \"Vasiliy\"\n    if x == x2 + 1 and y == y2 + 1:\n        return \"Vasiliy\"\n    if x == x2 - 1 and y == y2 + 1:\n        return \"Vasiliy\"\n    if x == x2 - 1 and y == y2 - 1:\n        return \"Vasiliy\"\n    if x == x2 - 1 and y == y2 - 1:\n        return \"Vasiliy\"\n    if x == x2 - 1 and y == y2 + 1:\n        return \"Vasiliy\"\n    if x == x2 + 1 and y == y2 - 1:\n        return \"Vasiliy\"\n    if x == x2 + 1 and y == y2 + 1:\n        return \"Vasiliy\"\n    if x == x2 - 1 and y == y2 + 1:\n        return \"Vasiliy\"\n    if x == x2 + 1 and y == y2 - 1:\n        return \"Vasiliy\"\n    if x == x2 - 1 and y == y2 + 1:\n        return \"Polycarp\"\n    if x == x2 + 1 and y == y2 + 1:\n        return \"Polycarp\"\n    if x == x2 - 1 and y == y2 - 1:\n        return \"Polycarp\"\n    if x == x2 + 1 and y == y2 - 1:\n        return \"Polycarp\"\n    if x == x2 + 1 and y == y2 + 1:\n        return \"Polycarp\"\n    if x == x2 - 1 and y == y2 + 1:\n        return \"Polycarp\"\n    if x == x2 - 1 and y == y2 - 1:\n        return \"Polycarp\"\n    if x == x2 - 1 and y == y2 - 1:\n        return \"Polycarp\"\n    if x == x2 - 1 and y == y2 + 1:\n        return \"Polycarp\"\n    if x == x2 + 1 and y == y2 - 1:\n        return \"Polycarp\"\n    if x == x2 + 1 and y == y2 + 1:\n        return \"Polycarp\"\n    if x == x2 - 1 and y == y2 - 1:\n        return \"Polycarp\"\n    if x == x2 + 1 and y == y2 + 1:\n        return \"Polycarp\"\n    if x == x2 - 1 and y == y2 + 1:\n        return \"Polycarp\"\n    if x == x2 + 1 and y == y2 - 1:\n        return \"Vasiliy\"\n    if x == x2 - 1 and y == y2 + 1:\n        return \"Vasiliy\"\n    if x == x2 + 1 and y == y2 + 1:\n        return \"Vasiliy\"\n    if x == x2 - 1 and y == y2 - 1:\n        return \"Vasiliy\"\n    if x == x2 + 1 and y == y2 - 1:\n        return \"Vasiliy\"\n    if x == x2 + 1 and y == y2 + 1:\n        return \"Vasiliy\"\n    if x == x2 - 1 and y == y2 + 1:\n        return \"Vasiliy\"\n    if x == x2 - 1 and y == y2 - 1:\n        return \"Vasiliy\"\n    if x == x2 - 1 and y == y2 - 1:\n        return \"Vasiliy\"\n    if x == x2 - 1 and y == y2 + 1:\n        return \"Vasiliy\"\n    if x == x2 + 1 and y == y2 - 1:\n        return \"Vasiliy\"\n    if x == x2 + 1 and y == y2 + 1:\n        return \"Vasiliy\"\n    if x == x2 - 1 and y == y2 - 1:\n        return \"Vasiliy\"\n    if x == x2 + 1 and y == y2 - 1:\n        return \"Vasiliy\"\n    if x == x2 - 1 and y == y2 + 1:\n        return \"Polycarp\"\n    if x == x2 + 1 and y == y2 + 1:\n        return \"Polycarp\"\n    if x == x2 - 1 and y == y2 + 1:\n        return \"Polycarp\"\n    if x == x2 + 1 and y == y2 - 1:\n        return \"Polycarp\"\n    if x == x2 - 1 and y == y2 - 1:\n        return \"Polycarp\"\n    if x == x2 + 1 and y == y2 - 1:\n        return \"Polycarp\"\n    if x == x2 - 1 and y == y2 - 1:\n        return \"Polycarp\"\n    if x == x2 - 1 and y == y2 + 1:\n        return \"Polycarp\"\n    if x == x2 + 1 and y == y2 - 1:\n        return \"Polycarp\"\n    if x == x2 + 1 and y == y2 + 1:\n        return \"Polycarp\"\n    if x == x2 - 1 and y == y2 - 1:\n        return \"Polycarp\"\n    if x == x2 + 1 and y == y2 + 1:\n        return \"Polycarp\"\n    if x == x2 - 1 and y == y2 + 1:\n        return \"Polycarp\"\n    if x == x2 +"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x_p, y_p, x_v, y_v = map(int, stdin.split())\n    x_p -= 1\n    y_p -= 1\n    x_v -= 1\n    y_v -= 1\n    if x_p == x_v and y_p == y_v:\n        return \"Polycarp\"\n    elif x_p == x_v and y_p!= y_v:\n        return \"Vasiliy\"\n    elif x_p!= x_v and y_p == y_v:\n        return \"Vasiliy\"\n    elif x_p!= x_v and y_p!= y_v:\n        return \"Polycarp\"\n    else:\n        return \"\"\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x_p, y_p, x_v, y_v = tuple(int(x) for x in stdin.split())\n    if x_p == x_v and y_p == y_v:\n        return 'Polycarp'\n    if x_p == x_v and y_p == y_v - 1:\n        return 'Polycarp'\n    if x_p == x_v + 1 and y_p == y_v - 1:\n        return 'Polycarp'\n    if x_p == x_v - 1 and y_p == y_v:\n        return 'Polycarp'\n    if x_p == x_v + 1 and y_p == y_v:\n        return 'Polycarp'\n    if x_p == x_v - 1 and y_p == y_v - 1:\n        return 'Polycarp'\n    if x_p == x_v - 1 and y_p == y_v + 1:\n        return 'Polycarp'\n    if x_p == x_v and y_p == y_v + 1:\n        return 'Polycarp'\n    if x_p == x_v + 1 and y_p == y_v + 1:\n        return 'Polycarp'\n    if x_p == x_v - 1 and y_p == y_v + 1:\n        return 'Polycarp'\n    return 'Vasiliy'"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x_p, y_p, x_v, y_v = map(int, stdin.split())\n    if x_p == x_v and y_p == y_v:\n        return \"Vasiliy\"\n    elif x_p == x_v + 1 and y_p == y_v:\n        return \"Polycarp\"\n    elif x_p == x_v - 1 and y_p == y_v:\n        return \"Polycarp\"\n    elif x_p == x_v and y_p == y_v - 1:\n        return \"Vasiliy\"\n    elif x_p == x_v + 1 and y_p == y_v - 1:\n        return \"Polycarp\"\n    elif x_p == x_v - 1 and y_p == y_v + 1:\n        return \"Polycarp\"\n    else:\n        return \"Vasiliy\""
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, d = list(map(int, stdin.split()))\n    for i in range(1, 13):\n        if i == m:\n            if i == 1:\n                ans = 7 if d in (1, 7) else 6\n                print(ans)\n                return str(ans)\n            if i == 2:\n                ans = 7 if d in (1, 7) else 6\n                print(ans)\n                return str(ans)\n            if i == 3:\n                ans = 6 if d in (1, 7) else 7\n                print(ans)\n                return str(ans)\n            if i == 4:\n                ans = 7 if d in (1, 7) else 6\n                print(ans)\n                return str(ans)\n            if i == 5:\n                ans = 6 if d in (1, 7) else 7\n                print(ans)\n                return str(ans)\n            if i == 6:\n                ans = 5 if d in (1, 7) else 6\n                print(ans)\n                return str(ans)\n            if i == 7:\n                ans = 7 if d in (1, 7) else 6\n                print(ans)\n                return str(ans)\n            if i == 8:\n                ans = 6 if d in (1, 7) else 7\n                print(ans)\n                return str(ans)\n            if i == 9:\n                ans = 5 if d in (1, 7) else 6\n                print(ans)\n                return str(ans)\n            if i == 10:\n                ans = 5 if d in (1, 7) else 6\n                print(ans)\n                return str(ans)\n            if i == 11:\n                ans = 5 if d in (1, 7) else 6\n                print(ans)\n                return str(ans)\n            if i == 12:\n                ans = 6 if d in (1, 7) else 7\n                print(ans)\n                return str(ans)\n        if i in (1, 3, 5, 7, 8, 10, 12):\n            if d == 1:\n                ans = 6 if i in (1, 3, 5, 7, 8, 10, 12) else 7\n                print(ans)\n                return str(ans)\n            if d == 7:\n                ans = 5 if i in (1, 3, 5, 7, 8, 10, 12) else 6\n                print(ans)\n                return str(ans)"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    m, d = stdin.split()\n    m = int(m)\n    d = int(d)\n    if m % 12 == 1:\n        return str(7 - d)\n    elif m % 12 == 2:\n        if d < 7:\n            return str(7 - d)\n        return str(7 - d - 1)\n    elif m % 12 == 3:\n        return str(7 - d - 2)\n    elif m % 12 == 4:\n        return str(7 - d - 3)\n    elif m % 12 == 5:\n        return str(7 - d - 4)\n    elif m % 12 == 6:\n        return str(7 - d - 5)\n    elif m % 12 == 7:\n        return str(7 - d - 6)\n    elif m % 12 == 8:\n        return str(7 - d - 7)\n    elif m % 12 == 9:\n        return str(7 - d - 8)\n    elif m % 12 == 10:\n        return str(7 - d - 9)\n    elif m % 12 == 11:\n        return str(7 - d - 10)\n    else:\n        return str(7 - d - 11)\nprint(solution(input()))\n\n\"\"\"\ndef"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"This is a sample test function, you can add your own logic to test your solution.\"\"\"\n    stdin = stdin.split()\n    _, m, d = map(int, stdin)\n\n    if m == 1:\n        return str(5)\n    else:\n        return str(5+(((m-1)*7+d-1)//7))\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    m, d = map(int, stdin.split())\n    for i in range(1, m+1):\n        if i == 1:\n            print(7, end='')\n        elif i == 2 or i == 3 or i == 4:\n            print(7, end='')\n            print('\\n', end='')\n        else:\n            print(i, end='')\n            print('\\n', end='')\n    print(7, end='')\n    return\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\nnum_of_columns = 0\nnum_of_days = {1: 7, 2: 7, 3: 7, 4: 7, 5: 7, 6: 7, 7: 7}\nmonth = {1: 'January', 2: 'February', 3: 'March', 4: 'April', 5: 'May', 6: 'June', 7: 'July', 8: 'August', 9: 'September', 10: 'October', 11: 'November', 12: 'December'}\n\nfor month_number, weekday in num_of_days.items():\n    if stdin == '1 1':\n        if month_number == 1:\n            num_of_columns = 7\n        else:\n            num_of_columns = 6\n    else:\n        if month_number == 1:\n            num_of_columns = 5\n        else:\n            num_of_columns = 4\nprint(num_of_columns)\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    month, day = (int(x) for x in stdin.split())\n    return f'{(day+7-1)//7 + 1}'\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n  n, m = list(map(int, stdin.split()))\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    m, d = stdin.split()\n    m = int(m)\n    d = int(d)\n    if m % 12 == 1:\n        n = 7 - d\n    elif m == 2:\n        if 1 <= d <= 7:\n            n = 6\n        else:\n            n = 5\n    elif m == 3:\n        if 1 <= d <= 7:\n            n = 6\n        else:\n            n = 5\n    elif m == 4:\n        if 1 <= d <= 7:\n            n = 6\n        else:\n            n = 5\n    elif m == 5:\n        if 1 <= d <= 7:\n            n = 6\n        else:\n            n = 5\n    elif m == 6:\n        if 1 <= d <= 7:\n            n = 6\n        else:\n            n = 5\n    elif m == 7:\n        if 1 <= d <= 7:\n            n = 6\n        else:\n            n = 5\n    return n\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    _, m, d = list(map(int, stdin.split()))\n    return str(weekdays_count(m, d))\n\ndef"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    m, d = map(int, stdin.split())\n    a = list(range(1, (m // 2) + 1)) + list(range(m, 13))\n    b = list(range(1, (d // 7) + 1)) + list(range(d, 32))\n    if m < 12:\n        return len(a)\n    elif m == 12 and d == 31:\n        return len(a)\n    else:\n        return len(b)\n\n\n\ndef"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.split()[0])\n    b = int(stdin.split()[1])\n    count = 0\n    for i in range(a, b + 1):\n        binary = bin(i)[2:]\n        zero_count = binary.count('0')\n        if zero_count == 1:\n            count += 1\n    return str(count)"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    count = 0\n    for i in range(a, b + 1):\n        binary = format(i, 'b')\n        count += binary.count(\"0\")\n    return str(count)\n\n\nsolution(input())\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    b_minus_a = b - a\n    cnt = 0\n    for i in range(a, b):\n        binary = bin(i).count('1')\n        if binary == 1 and b_minus_a == 1:\n            cnt += 1\n    return str(cnt)\n\nsolution(\"5 10\")\nsolution(\"2015 2015\")\nsolution(\"100 105\")\nsolution(\"72057594000000000 72057595000000000\")\nsolution(\"72057594000000000 72057595000000000\")"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    first_year, last_year = stdin.split()\n    first_year = int(first_year)\n    last_year = int(last_year)\n    counter = 0\n    for year in range(first_year, last_year + 1):\n        binary = str(bin(year))[2:]\n        zeros = binary.count(\"0\")\n        if zeros == 1:\n            counter += 1\n    return str(counter)\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    in_min, in_max = map(int, stdin.split())\n    min_binary = bin(in_min)[2:]\n    max_binary = bin(in_max)[2:]\n    count = 0\n    for i in range(len(min_binary)):\n        if min_binary[i] == '1' and max_binary[i] == '1':\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    def bin2dec(binary: str) -> int:\n        return int(binary, 2)\n    \n    a, b = map(int, stdin.split())\n    # print(a, b)\n    # print(bin2dec(str(b-a)))\n    \n    return bin2dec(str(b-a))\n\nsolution(\"10 10\")\nsolution(\"5 10\")\nsolution(\"100 105\")\nsolution(\"72057594000000000 72057595000000000\")\n\n'''\n\n'''\nimport sys\n\ndef"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    def count_zeros(num: int) -> int:\n        count = 0\n        while num:\n            num = num & (num - 1)\n            count += 1\n        return count\n    return count_zeros(a) - count_zeros(b)\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    interval = stdin.split()\n    start_year = int(interval[0])\n    end_year = int(interval[1])\n    sum = 0\n    \n    for year in range(start_year, end_year+1):\n        if str(year).count(\"0\") == 1:\n            sum += 1\n    return str(sum)\n\nstdin = \"5 10\"\nprint(solution(stdin))\n\nstdin = \"100 105\"\nprint(solution(stdin))\n\nstdin = \"72057594000000000 72057595000000000\"\nprint(solution(stdin))\n\nstdin = \"75\"\nprint(solution(stdin))\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    a, b = min(a, b), max(a, b)\n    result = 0\n    for year in range(a, b + 1):\n        binary = f\"{year:b}\".replace('0','').replace('1', '#')\n        result += binary.count('#')\n    return str(result)\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    count = 0\n    while True:\n        stdin = stdin.replace('_', '0')\n        stdin = stdin.replace('0', '_')\n        if len(stdin) == 1:\n            break\n        count += 1\n    return str(count)\n\nstdin = input()\nprint(solution(stdin))\n\"\"\"\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    res = float('inf')\n    for i in range(n):\n        res = min(res, (i + 1) * (n - i) // 2)\n    return str(res)\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    layer_length = 2*n + 1\n    layers = layer_length\n    for i in range(3, n+1):\n        layers += layer_length//2\n    return str(layers)"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    # compute number of layers\n    layers = int((N * (N + 1)) / 2)\n    return str(layers)\n\n\nstdin = \"\"\"\n3\n\n\"\"\"\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    ans = (N+1) * (N//2)\n    return ans\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    layers = [[]]\n    for i in range(n):\n        layers.append([])\n    for i in range(n):\n        for j in range(i, n):\n            layers[i+1].append((i, j))\n    for i in range(1, n):\n        min_layer = i\n        for layer in range(1, n):\n            layers[layer] += layers[min_layer]\n            min_layer = layer\n    return len(layers) - 1\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # You may use stdin = '2\\n', stdin = '3\\n' or stdin = '4\\n' for testing\n    n = int(stdin)\n    if n <= 3:\n        return '1'\n    \n    def find_intersections(a, b):\n        if a[1] == b[0] and b[1] == a[0]:\n            return -1\n        if a[1] == b[0]:\n            return a[0]\n        if b[1] == a[0]:\n            return b[0]\n\n        c = (a[0] * b[1] - a[1] * b[0]) / (a[1] - b[1])\n        d = (b[0] * a[1] - b[1] * a[0]) / (b[1] - a[1])\n\n        return (c, d)\n\n    # O(n^2)\n    segments = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            segments.append((i, j))\n\n    segments.sort()\n    layers = 1\n    while True:\n        layers += 1\n        segment_intersections = []\n        for segment in segments:\n            intersections = find_intersections(segment, segments[segment[1]])\n            if intersections == -1:\n                break\n            segment_intersections.append(intersections)\n        segments = segment_intersections\n        if len(segments) == 0:\n            break\n    return str(layers)\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    layers = [int(x) for x in stdin.split()]\n    n = len(layers)\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    layers.sort()\n    n = len(layers)\n    idx = 0\n    stack = []\n    while idx < n:\n        if layers[idx] < layers[idx + 1]:\n            stack.append(layers[idx])\n            idx += 1\n            continue\n        if layers[idx] == layers[idx + 1]:\n            idx += 2\n            continue\n        stack.append(layers[idx])\n        idx += 1\n        idx += 1\n        while idx < n:\n            if layers[idx] < layers[idx + 1]:\n                stack.append(layers[idx])\n                idx += 1\n                continue\n            if layers[idx] == layers[idx + 1]:\n                idx += 2\n                continue\n            stack.append(layers[idx])\n            idx += 1\n            break\n        if idx == n:\n            break\n        n = len(stack)\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 4\n        stack.sort()\n    return 0"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    #code goes here\n    return \"\"\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nsolution('')\n\nOutput\n\n4\n'''\ndef"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    layers = 0\n    segments = []\n    while (n > 0):\n        for i in range(n + 1):\n            segments.append(n - i)\n            if (n - i) == 1:\n                layers += 1\n        for i in range(n - 1):\n            segments.append(1)\n            if (n - 1) == 1:\n                layers += 1\n        n = n - 2\n    segments.sort()\n    print(layers)\n    return str(layers)\n\nsolution('2')\n\nsolution('3')\n\nsolution('4')\n\nsolution('5')\n\nsolution('6')\n\"\"\"\ndef"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, s = map(int, stdin.split())\n    \n    cubes = [[1,0]]\n    \n    def func(s, n, k, cubes):\n        if n==0 and s==s:\n            return 1\n        if s<0:\n            return 0\n        \n        ans = 0\n        for i in range(len(cubes)):\n            for j in range(len(cubes)):\n                if cubes[i][1]>cubes[j][0]:\n                    break\n                \n                if cubes[i][1]==cubes[j][0]:\n                    if cubes[i][0]!=cubes[j][0]:\n                        ans+=func(s-cubes[i][0],n-1,k,cubes)\n                \n            \n            if cubes[i][1]>cubes[0][0]:\n                if cubes[i][0]==cubes[0][0]:\n                    ans+=func(s-cubes[i][0],n-1,k,cubes)\n            \n        return ans\n    \n    return str(func(s,n,k,cubes))\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k, s = map(int, stdin.split())\n    a = sorted(map(int, stdin.split()))\n    # k = 3\n    # n = 3\n    # s = 5\n    dp = [[0 for _ in range(k+1)] for _ in range(n+1)]\n    dp[0][0] = 1\n    dp[1][0] = 0\n    dp[0][1] = 0\n    dp[1][1] = 1\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            dp[i][j] = dp[i][j-1]\n            if a[i-1] == j:\n                dp[i][j] += dp[i-1][j-a[i-1]]\n    return str(dp[n][k])\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N,K,S=map(int,stdin.split())\n    cubes=[1]*N\n    exclamations=0\n    count=0\n    while(exclamations<K):\n        while(len(cubes)>0 and cubes[-1]==exclamations+1):\n            cubes.pop()\n            exclamations+=1\n        count+=1\n    print(count)\n    return count\nsolution(\"2 2 30\")\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k, s = map(int, stdin.split())\n    if n == 0:\n        return 0\n    if k == 0:\n        return 1\n    dp = [[0] * k for _ in range(n + 1)]\n    dp[0][0] = 1\n    for i in range(n + 1):\n        for j in range(k + 1):\n            if i > 0 and j > 0:\n                dp[i][j] = dp[i - 1][j - 1]\n            if i > 0 and j == 0:\n                dp[i][j] = dp[i - 1][j]\n            if j > 0 and i > 0:\n                dp[i][j] += dp[i - 1][j]\n            if j > 0:\n                dp[i][j] += dp[i][j - 1]\n    return str(dp[n][k])\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n,k,S = map(int, stdin.split())\n    cubes = list(map(int, stdin.split()))\n    cubes = set(cubes)\n    l = len(cubes)\n    ans = 0\n    ans = 0\n    \n    def fact(n):\n        if n == 1:\n            return 1\n        else:\n            return n * fact(n-1)\n    \n    for i in range(1,n+1):\n        ans += fact(l)/fact(l-i)\n        l-=1\n    return str(ans)\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n,k,s = map(int,stdin.split())\n    mem = set()\n    mem.add(0)\n    mem.add(1)\n    def helper(mem,n,k,s,s1,s2):\n        if n<=0:\n            return 1 if s1==s2 else 0\n        if (n,s1) in mem:\n            return mem[(n,s1)]\n        if s1>s2:\n            mem[(n,s1)] = 0\n        else:\n            mem[(n,s1)] = helper(mem,n-1,k,s,s1,s2)\n            if s1<s2:\n                mem[(n,s1)] += helper(mem,n-1,k,s,s1+1,s2)\n        return mem[(n,s1)]\n    return helper(mem,n,k,s,1,1)\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n,k,s = map(int,stdin.split(\" \"))\n    dp = [[0 for i in range(k+1)] for j in range(n+1)]\n    for i in range(1,n+1):\n        for j in range(k+1):\n            if i == 1:\n                dp[i][j] = 1\n            if j > 0:\n                dp[i][j] = dp[i][j] + dp[i-1][j]\n    return str(dp[n][k])\nprint(solution(input()))\n\n'''\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.rstrip()\n    n, k, s = stdin.split(' ')\n    n = int(n)\n    k = int(k)\n    s = int(s)\n    \n    memo = {}\n    \n    def dp(choice,total):\n        if (choice,total) in memo:\n            return memo[(choice,total)]\n        if choice == k:\n            if total == s:\n                memo[(choice,total)] = 1\n                return 1\n            else:\n                memo[(choice,total)] = 0\n                return 0\n        if choice == 0:\n            return 0\n        if choice == 1:\n            memo[(choice,total)] = dp(choice-1,total)\n            return memo[(choice,total)]\n        \n        ret = 0\n        for i in range(choice,k):\n            memo[(choice,total)] = dp(i,total-n*pow(10,i))+dp(choice-1,total)\n            ret += memo[(choice,total)]\n        return ret\n    \n    return str(dp(k,s))\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n, k, s = map(int, stdin[0].split(' '))\n    a = stdin[1]\n    # your code goes here\n    num_ways = 0\n    for i in range(n):\n        if a.count(str(i+1)) >= k:\n            num_ways += 1\n    return str(num_ways)\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    inp = stdin.split(\"\\n\")\n    n, k, s = int(inp[0]), int(inp[1]), int(inp[2])\n    cubes = [int(x) for x in inp[0].split()]\n    starts = cubes[:k]\n    ends = cubes[k:2*k]\n    starts.sort()\n    ends.sort()\n    length = len(cubes)\n    if length < k or length < 2 * k or starts == ends:\n        return str(0)\n    count = 1\n    for i in range(k):\n        if starts[i] == ends[i]:\n            count += 1\n    for i in range(k, 2 * k):\n        if starts[i - k] == ends[i - k] and starts[i] == ends[i]:\n            count += 1\n    return str(count)\n\n\nprint(solution(input()))"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.strip())\n    for i in range(T):\n        _, n, k = stdin.strip().split()\n        v = [0] * int(n)\n        a = list(map(int, stdin.strip().split()))\n        count = 0\n        for j in range(int(k)):\n            v = list(map(lambda x, y: x + y if x else x, v, a))\n            count += 1\n            if count >= int(n):\n                break\n        if count == int(n):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin)\n    for i in range(T):\n        n, k = map(int, stdin.split())\n        v, a = [0]*n, list(map(int, stdin.split()))\n        j = 0\n        while j < n:\n            if a[j] == 0:\n                v[j] = 0\n            elif a[j] == 1:\n                if v[j] == 0:\n                    v[j] = k\n                else:\n                    v[j] = v[j]*k\n            elif a[j] == 2:\n                if v[j] == 0:\n                    v[j] = k\n                else:\n                    v[j] -= k\n            else:\n                v[j] = v[j] + k\n            j += 1\n        print('YES' if v == a else 'NO')\n\nsolution(input())\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.split()[0])\n    for i in range(test_cases):\n        array_size, arr_to_check = map(int, stdin.split()[1:3])\n        arr = list(map(int, stdin.split()[3:array_size + 3]))\n        for i in range(1, array_size + 1):\n            if i == 1:\n                arr[i] = arr[i] + arr[0]\n            else:\n                if arr[i] == 0:\n                    arr[i] = arr[i - 1]\n                    if arr[i - 1] == 0:\n                        arr[i] = arr[i - 2]\n        if arr[array_size]!= 0:\n            print(f\"NO\")\n        else:\n            print(f\"YES\")\n\n    return \"YES\""
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    v, a = [0] * n, list(map(int, stdin.split()))\n    k = k % n\n    for i in range(n):\n        if a[i] % k:\n            v[i] = v[i] + (a[i] % k)\n        else:\n            v[i] = v[i]\n    return 'YES' if v == a else 'NO'\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n\n    for _ in range(n):\n        # choose position\n        p = list(map(int, stdin.split()))\n        if p[0] == p[1]:\n            return 'NO'\n        # choose step\n        k = list(map(int, stdin.split()))\n        # add to the array\n        a[p[0]] += k[0]\n        if a[p[0]] > 10 ** 16:\n            return 'NO'\n        a = a[p[1]:]\n        a = sorted(a)\n    return 'YES'\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.split()[0])\n    for i in range(T):\n        n, k = list(map(int, stdin.split()[i*2 + 1].split()))\n        a = list(map(int, stdin.split()[i*2 + 2].split()))\n        v = [0]*n\n        v[0] = k\n        i = 0\n        while i < n:\n            if v[i] == 0:\n                if a[i] >= v[i]:\n                    v[i] += a[i]\n                else:\n                    v[i] = v[i]\n            else:\n                if a[i] < v[i]:\n                    v[i] += a[i]\n                else:\n                    v[i] = v[i]\n            if i < n-1:\n                i += 1\n            else:\n                i = 0\n        if v == a:\n            print('YES')\n        else:\n            print('NO')\n    return ''"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    v = [0] * n\n    a = [int(x) for x in stdin.split()]\n\n    res = ''\n    for i in range(1, n):\n        if i % 2 == 0:\n            v[i] += k\n            res += 'YES'\n        else:\n            if v[i - 1] + k <= a[i - 1]:\n                v[i] += k\n                res += 'YES'\n            else:\n                res += 'NO'\n\n    return res\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    n, k = map(int, stdin.split()[1].split())\n    a = list(map(int, stdin.split()[2]))\n    b = list(map(int, stdin.split()[3]))\n    c = list(map(int, stdin.split()[4]))\n    d = list(map(int, stdin.split()[5]))\n    e = list(map(int, stdin.split()[6]))\n    f = list(map(int, stdin.split()[7]))\n    g = list(map(int, stdin.split()[8]))\n    h = list(map(int, stdin.split()[9]))\n\n    cnt = 0\n    print(a)\n    for i in range(t):\n        if a == b:\n            print(a)\n            break\n        else:\n            if c == d:\n                print(\"NO\")\n                break\n            else:\n                a = b\n                b = e\n                c = d\n                d = g\n                e = h\n                h = f\n                f = e\n                g = c\n                c = b\n                b = a\n\n                if a[cnt] > k:\n                    print(\"NO\")\n                    break\n                else:\n                    a[cnt] = a[cnt] + k\n                    cnt += 1\n                    print(a)\n    return \"YES\"\n\n\nsolution(input())\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin)\n    for i in range(T):\n        _, K = stdin.strip().split('\\n')\n        k = int(K)\n        _, A = stdin.strip().split('\\n')\n        a = list(map(int, A.split()))\n        n = len(a)\n        k_a = a + [0]*k\n        for j in range(n+1):\n            print('YES' if j == n+1 and all([i > 0 or j > i for i, x in enumerate(k_a[j:])]) else 'NO')\n\nsolution(input())\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.split()[0])\n    for t in range(T):\n        n,k = list(map(int,stdin.split()[1].split()))\n        v = list(map(int,stdin.split()[2].split()))\n        a = list(map(int,stdin.split()[3].split()))\n        v_1,v_2,v_3,v_4,v_5 = 0,0,0,0,0\n        v = v + a\n        for i in range(len(v)):\n            if i == 0:\n                v_1 = v[i]\n            elif i == 1:\n                v_2 = v[i]\n            elif i == 2:\n                v_3 = v[i]\n            elif i == 3:\n                v_4 = v[i]\n            elif i == 4:\n                v_5 = v[i]\n            elif v[i] == v_1:\n                v_1 = v_1 + k\n                continue\n            elif v[i] == v_2:\n                v_2 = v_2 + k\n                continue\n            elif v[i] == v_3:\n                v_3 = v_3 + k\n                continue\n            elif v[i] == v_4:\n                v_4 = v_4 + k\n                continue\n            elif v[i] == v_5:\n                v_5 = v_5 + k\n                continue\n            else:\n                continue\n        if v_1 == v[-1] and v_2 == v[-2] and v_3 == v[-3] and v_4 == v[-4] and v_5 == v[-5]:\n            return 'YES'\n        else:\n            return 'NO'\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a,b,c = map(int,stdin.split())\n    #print(d(a)%10**30)\n    return str(sum([d(i)%10**30 for i in range(1,a+1)]+[d(i)%10**30 for i in range(1,b+1)]+[d(i)%10**30 for i in range(1,c+1)]))\n\ndef"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = list(map(int, stdin.split()))\n    ans = 0\n    for i in range(1, a+1):\n        for j in range(1, b+1):\n            for k in range(1, c+1):\n                ans += d(i*j*k)\n    return str(ans % 2**30)\n\ndef"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    d = dict()\n    for i in range(1, a + 1):\n        for j in range(1, b + 1):\n            for k in range(1, c + 1):\n                d[i * j * k] = d.get(i * j * k, 0) + 1\n    res = 0\n    for v in d.values():\n        res += v\n    return str(res % 2 ** 30)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin.split()\n    return sum(divisors(int(a), int(b), int(c)))\n\ndef"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    def d(n):\n        return sum(d(n * i) for i in range(1, min(a, b, c) + 1)) % (10 ** 9 + 7)\n    return d(1)\n\nprint(solution(input()))\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    nums = list(map(int, stdin.split(\" \")))\n    sum = 0\n    for x in range(nums[0], nums[1] + 1):\n        for y in range(nums[2], nums[3] + 1):\n            for z in range(nums[4], nums[5] + 1):\n                sum += (x * y * z)\n    return sum % 10**10\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    div_dict = {}\n    for i in range(1, a + 1):\n        for j in range(1, b + 1):\n            for k in range(1, c + 1):\n                div_dict[i * j * k] = div_dict.get(i * j * k, 0) + 1\n    return sum(div_dict.values()) % 1073741824\n\n\ndef"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return str(sum(range(1, a + 1) * range(1, b + 1) * range(1, c + 1)))\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = list(map(int, stdin.split()))\n    return str(sum([sum(factors(i, a, b, c)) for i in range(1, a + 1)]))\n\n\ndef"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a,b,c = stdin.split()\n    return str(sum(sum(d(i*j*k) for i in range(1, int(a)+1)\n                      for j in range(1, int(b)+1)\n                      for k in range(1, int(c)+1)))%10**30)\n\n\n\ndef"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def slide(x, y):\n        while board[x][y]!= 'X' and board[x][y]!= 'X':\n            x -= 1\n            y += 1\n        return board[x][y]\n\n    rows = len(stdin.split('\\n'))\n    cols = len(stdin.split('\\n')[0])\n    rows -= 1\n    cols -= 1\n    board = [[x for x in stdin.split('\\n')[i]][::-1] for i in range(rows)]\n    for i in range(rows):\n        for j in range(cols):\n            if board[i][j]!= 'X':\n                if i + 1 < rows and board[i + 1][j] == board[i][j]:\n                    if slide(i + 1, j) == board[i][j]:\n                        return 'YES'\n                if j + 1 < cols and board[i][j + 1] == board[i][j]:\n                    if slide(i, j + 1) == board[i][j]:\n                        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  \n  w, h = map(int, stdin.split())\n  a = [[char for char in stdin] for _ in range(w)]\n\n  res = 'NO'\n\n  for _ in range(w):\n    if a[0][_]!= a[h-1][_]:\n      break\n    if _ > 0 and a[0][_]!= a[0][_-1]:\n      break\n    if _ > 1 and a[0][_]!= a[0][_-2]:\n      break\n\n    for _ in range(h):\n      if a[0][_]!= a[0][_+1]:\n        break\n      if _ > 0 and a[0][_]!= a[0][_+2]:\n        break\n\n    else:\n      res = 'YES'\n      break\n\n  return res"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    Bessie_grid, Elsie_grid = stdin.split(\"\\n\")\n    Bessie_grid = list(Bessie_grid)\n    Elsie_grid = list(Elsie_grid)\n\n    for i in range(1, 10):\n        Bessie_grid = rotate_array(Bessie_grid)\n        Elsie_grid = rotate_array(Elsie_grid)\n        if compare_2_arrays(Bessie_grid, Elsie_grid):\n            return \"YES\"\n\n    return \"NO\"\n\n\ndef"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    grid1 = stdin\n    grid2 = stdin.replace('X', 'B')\n\n    if grid1 == grid2:\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    board1 = stdin.split('\\n')\n    board2 = stdin.split('\\n')\n    \n    for i in range(len(board1)):\n        board1[i] = ''.join(sorted(board1[i]))\n        board2[i] = ''.join(sorted(board2[i]))\n        \n    if board1 == board2:\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def convert(row: List[str]) -> str:\n        return ''.join(row[::-1])\n\n    puzzle = stdin.split()\n    bessie, elsie = puzzle[:2]\n    bessie = convert(list(bessie))\n    elsie = convert(list(elsie))\n    if bessie == elsie:\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    grid = stdin[0]\n    grid2 = stdin[1]\n\n    x = []\n    y = []\n    z = []\n\n    for i in range(0, len(grid)):\n        x.append(grid[i])\n\n    for i in range(0, len(grid2)):\n        y.append(grid2[i])\n\n    if x == y:\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    grid1 = stdin.splitlines()\n    # grid1 = \"AB\"\n    # grid2 = \"XC\"\n    # grid3 = \"XB\"\n    # grid4 = \"AC\"\n    grid1 = \"\".join(grid1)\n    grid2 = \"\".join(grid1)\n    grid3 = \"\".join(grid1)\n    grid4 = \"\".join(grid1)\n    # print(grid1, grid2, grid3, grid4)\n    # return\n    grid1 = grid1.split(\"A\")\n    grid2 = grid2.split(\"A\")\n    grid3 = grid3.split(\"A\")\n    grid4 = grid4.split(\"A\")\n    grid1 = grid1[0].replace(\" \", \"\")\n    grid2 = grid2[0].replace(\" \", \"\")\n    grid3 = grid3[0].replace(\" \", \"\")\n    grid4 = grid4[0].replace(\" \", \"\")\n    # print(grid1, grid2, grid3, grid4)\n    if grid1 == grid2 and grid2 == grid3 and grid3 == grid4:\n        return \"YES\"\n    elif grid1 == grid2 and grid2 == grid3 and grid3!= grid4:\n        return \"NO\"\n    elif grid1 == grid2 and grid2!= grid3 and grid3 == grid4:\n        return \"NO\"\n    elif grid1!= grid2 and grid2 == grid3 and grid3 == grid4:\n        return \"NO\"\n    else:\n        return \"NO\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    h, w = map(int, stdin.split())\n\n    moves = {\n        'AA':'AB',\n        'BB':'BA',\n        'CC':'CB',\n        'BA':'BB',\n        'AB':'CC',\n        'CB':'BA',\n        'CC':'AB',\n    }\n    def move(n,i,j,d):\n        if d == 'L':\n            i -= 1\n        elif d == 'R':\n            i += 1\n        elif d == 'U':\n            j -= 1\n        else:\n            j += 1\n        if i >= 0 and i < h and j >= 0 and j < w:\n            return (i,j)\n        return None\n\n    seen = set()\n    seen.add((0,0,0,0))\n    seen.add((0,0,1,1))\n    for i in range(h):\n        for j in range(w):\n            if (i,j,0,0) not in seen:\n                seen.add((i,j,0,0))\n                if (i,j,1,1) not in seen:\n                    seen.add((i,j,1,1))\n                if (i,j,2,2) not in seen:\n                    seen.add((i,j,2,2))\n                s = moves[stdin[i*w+j]]\n                i0 = move(i,j,0,s[0])\n                if i0:\n                    i1 = move(i,j,1,s[1])\n                    if i1:\n                        i2 = move(i,j,2,s[2])\n                        if i2:\n                            seen.add((i0,i1,i2,i2))\n                            if (i0,i1,i2,i2) not in seen:\n                                seen.add((i0,i1,i2,i2))\n                                if (i0,i1,i2,i2) not in seen:\n                                    seen.add((i0,i1,i2,i2))\n                                    if (i0,i1,i2,i2) not in seen:\n                                        seen.add((i0,i1,i2,i2))\n                                        if (i0,i1,i2,i2) not in seen:\n                                            seen.add((i0,i1,i2,i2))\n                                            if (i0,i1,i2,i2) not in seen:\n                                                seen.add((i0,i1,i2,i2))\n                                                if (i0,i1,i2,i2) not in seen:\n                                                    seen.add((i0,i1,i2,i2))\n                                                    if (i0,i1,i2,i2) not in seen:\n                                                        seen.add((i0,i1,i2,i2))\n                                                        if (i0,i1,i2,i2) not in seen:\n                                                            seen.add((i0,i1,i2,i2))\n                                                            if (i0,i1,i2,i2) not in seen:\n                                                                seen.add((i0,i1,i2,i2))\n                                                                if (i0,i1,i2,i2) not in seen:\n                                                                    seen.add((i0,i1,i2,i2))\n                                                                    if (i0,i1,i2,i2) not in seen:\n                                                                        seen.add((i0,i1,i2,i2))\n                                                                        if (i0,i1,i2,i2) not in seen:\n                                                                            seen.add((i0,i1,i2,i2))\n                                                                            if (i0,i1,i2,i2) not in seen:\n                                                                                seen.add((i0,i1,i2,i2))\n                                                                                if (i0,i1,i2,i2) not in seen:\n                                                                                    seen.add((i0,i1,i2,i2))\n                                                                                    if (i0,i1,i2,i2) not in seen:\n                                                                                        seen.add((i0,i1,i2,i2))\n                                                                                        if (i0,i1,i2,i2) not in seen:\n                                                                                            seen.add((i0,i1,i2,i2))\n                                                                                            if (i0,i1,i2,i2) not in seen:\n                                                                                                seen.add((i0,i1,i2,i2))\n                                                                                                if (i0,i1,i2,i2) not in seen:\n                                                                                                    seen.add((i0,i1,i2,i2))\n                                                                                                    if (i0,i1,i2,i2) not in seen:\n                                                                                                        seen.add((i0,i1,i2,i2))\n                                                                                                        if (i0,i1,i2,i2) not in seen:\n                                                                                                            seen.add((i0,i1,i2,i2))\n                                                                                                        if (i0,i1,i2,i2) not in seen:\n                                                                                                            seen.add((i0,i1,i2,i2))\n                                                                                                        if (i0,i1,i2,i2) not in seen:\n                                                                                                            seen.add((i0,i1,i2,i2))\n                                                                                                        if (i0,i1,i2,i2) not in seen:\n                                                                                                            seen.add((i0,i1,i2,i2))\n                                                                                                        if (i0,i1,i2,i2) not in seen:\n                                                                                                            seen.add((i0,i1,i2,i2))\n                                                                                                        if (i0,i1,i2,i2) not in seen:\n                                                                                                            seen.add((i0,i1,i2,i2))\n                                                                                               "
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... AB\n   ... XC\n   ... XB\n   ... AC\n   ... ''')\n    'NO'\n    >>> solution('''\n   ... AB\n   ... XC\n   ... AC\n   ... ''')\n    'YES'\n    \"\"\"\n    if len(stdin.split('\\n')) < 2:\n        raise ValueError(\"Not enough input lines.\")\n    empty = stdin.split('\\n')[0].index('X')\n    for line in stdin.split('\\n'):\n        if len(line)!= 4:\n            raise ValueError(\"Not a puzzle.\")\n        grid = {}\n        for i, char in enumerate(line):\n            if char == 'X':\n                grid[(i, i)] = empty\n            else:\n                grid[(i, i)] = int(char)\n    Bessie_puzzle = [{}, {}]\n    Elsie_puzzle = [{}, {}]\n    for i in range(len(grid)):\n        if grid[(i, i)] == empty:\n            for j in range(len(grid)):\n                if grid[(i, j)]!= empty:\n                    Bessie_puzzle[i % 2][(i, j)] = grid[(i, j)]\n                    Elsie_puzzle[i % 2][(i, j)] = grid[(i, j)]\n    Bessie_puzzle[0] = dict(sorted(Bessie_puzzle[0].items()))\n    Elsie_puzzle[0] = dict(sorted(Elsie_puzzle[0].items()))\n    for i in range(1, len(grid)):\n        if grid[(i, i)] == empty:\n            for j in range(len(grid)):\n                if grid[(i, j)]!= empty:\n                    Bessie_puzzle[i % 2][(i, j)] = grid[(i, j)]\n                    Elsie_puzzle[i % 2][(i, j)] = grid[(i, j)]\n    for i in range(2):\n        for j in range(2):\n            if (Bessie_puzzle[i][(i, j)] == Elsie_puzzle[i][(i, j)]):\n                del Bessie_puzzle[i][(i, j)]\n                del Elsie_puzzle[i][(i, j)]\n    if len(Bessie_puzzle[0]) > len(Elsie_puzzle[0]):\n        return \"NO\"\n    else:\n        return \"YES\"\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    dec_num = num\n    hex_num = \"\"\n    while dec_num:\n        dec_num = int(dec_num * 16)\n        hex_num = str(hex(dec_num))\n        hex_num = hex_num.replace(\"0x\", \"\")\n        hex_num = hex_num.replace(\"L\", \"\")\n    return str(dec_num) + \" \" + str(hex_num)"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    k = int(stdin)\n    min_num = k\n    max_num = k\n    while k < min_num:\n        if k >= 10:\n            k -= 10\n        else:\n            k = 0\n    while k > max_num:\n        if k >= 10:\n            k -= 10\n        else:\n            k = 0\n    num = k\n    return num\nsolution(input())\n\n\"\"\"\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    a,b = stdin.split()\n    n = int(a)\n    k = int(b)\n    while n!=k:\n        if n<k:\n            n = n*16+1\n            k = k*16\n        else:\n            n = n//16\n            k = k//16\n    return str(n)\n    \n    "
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    n, k = list(map(int, stdin.split()))\n    x = n * k\n    return str(x)"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    k = int(stdin)\n\n    minimal_number = 10**60\n    while minimal_number >= 10**60:\n        number = k\n        while number > 0:\n            number = number//10\n            number = number%16\n            if number == 0:\n                number = 10\n        k = k - number*16**(60-n)\n        if k < minimal_number:\n            minimal_number = k\n    return minimal_number\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    base = int(stdin.strip())\n    n = int(stdin.strip())\n    k = int(stdin.strip())\n    return str(base * n ** k)\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = int(stdin.split(\" \")[0]), int(stdin.split(\" \")[1])\n    if (n ** 2 + n) % k == 0:\n        n = n * (10 ** (n + 1) // 10)\n        return str(n)\n    return -1\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    base = int(stdin.split()[0])\n    num = int(stdin.split()[1])\n    decimal = num\n    base = bin(num)\n    for i in range(len(base)-2):\n        decimal = decimal * base\n    return str(decimal)\n\n\ndef"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    k = int(stdin.replace('1', '2'))\n    b = 1\n    while k > 0:\n        a = n // b\n        r = n - (b*a)\n        if r > 0:\n            n = r\n        else:\n            n = 0\n        k -= 1\n        b *= 10\n    return str(n)"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if is_unimodal(stdin) else \"NO\"\n\n\ndef"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    data = list(map(int, stdin.split()))\n    if len(set(data)) == 1:\n        return \"YES\"\n    for i in range(len(data) - 1):\n        if data[i + 1] - data[i] == 1 and data[i] < data[i + 1]:\n            continue\n        if data[i + 1] - data[i] == -1 and data[i] > data[i + 1]:\n            continue\n        return \"NO\"\n    return \"NO\""
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    arr = list(map(int, stdin.split()))\n    for i in range(len(arr) - 1):\n        if arr[i + 1] < arr[i]:\n            break\n    return \"YES\" if i == len(arr) - 2 else \"NO\"\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    pass"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n\n    for i in range(1, len(a) - 1):\n        if a[i] < a[i - 1] and a[i] < a[i + 1]:\n            continue\n        else:\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    array = list(map(int, stdin.split()))\n\n    is_increasing = False\n    is_constant = False\n    is_decreasing = False\n\n    for i in range(len(array)-1):\n        if array[i] > array[i+1]:\n            is_increasing = True\n        if array[i] == array[i+1]:\n            is_constant = True\n        if array[i] < array[i+1]:\n            is_decreasing = True\n    return \"YES\" if is_increasing and is_constant and is_decreasing else \"NO\""
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = sorted(map(int, stdin.split()))\n    for i in range(n - 1):\n        if arr[i + 1] - arr[i] == 1:\n            continue\n        else:\n            return \"NO\"\n    return \"YES\"\n\n\n\nsolution(\"7\")\nsolution(\"5\")\nsolution(\"6\")"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    array = list(map(int, stdin.split()))\n    if len(array) < 3:\n        return 'NO'\n    for i in range(len(array)-1):\n        if array[i+1] < array[i]:\n            break\n    else:\n        return 'YES'\n    for i in range(len(array)-1):\n        if array[i+1] > array[i]:\n            break\n    else:\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    inp = stdin.split()\n    inp = list(map(int, inp[1:]))\n    if len(inp) == 1:\n        return \"NO\"\n    if inp[0] < min(inp):\n        return \"NO\"\n    if inp[0] == min(inp):\n        if inp[1] == max(inp):\n            return \"YES\"\n        return \"NO\"\n    if inp[-1] > max(inp):\n        return \"NO\"\n    for i in range(0, len(inp) - 1):\n        if inp[i] == max(inp):\n            if inp[i + 1] < min(inp):\n                return \"NO\"\n            elif inp[i + 1] > min(inp):\n                if inp[i] == inp[i + 1]:\n                    return \"NO\"\n    return \"NO\"\n\nsolution(input())\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\n\u0417\u0430\u0434\u0430\u0447\u0430: \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0434\u0435\u043b\u0438\u0442\u0435\u043b\u044c \u0438 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435\u043b\u044c \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0438\u0437 \u0434\u0432\u0443\u0445 \u043c\u043e\u043c\u0435\u043d\u0442\u043e\u0432, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043f\u043e\u043b\u0443\u0447\u0435\u043d \u0438\u0437 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u043c\u0430\u0441\u0441\u0438\u0432\u0430.\n\n\u0412 \u0441\u043b\u0443\u0447\u0430\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u043d\u043e\u0433\u043e \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u043e\u0433\u043e \u0434\u0435\u043b\u0438\u0442\u0435\u043b\u044f \u0438\u043b\u0438 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u043e\u0433\u043e \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435\u043b\u044f \u043c\u043e\u0436\u043d\u043e \u0431\u044b\u043b\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0432\u044b\u0432\u043e\u0434 \u0432 \u043b\u044e\u0431\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c \u041c\u0435\u043b\u0438\u043d\u0434\u0430\u0432\u0430. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0435\u0441\u043b\u0438 \u0432 \u043f\u0435\u0440\u0432\u043e\u043c \u043c\u0430\u0441\u0441\u0438\u0432\u0435 \u0431\u044b\u043b\u043e \u0441\u0434\u0435\u043b\u0430\u043d\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435, \u0447\u0442\u043e \u0432\u0441\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u043f\u0430\u043b\u0438\u043d\u0434\u0440\u043e\u043c\u0430\u043c\u0438, \u0430 \u0432\u043e \u0432\u0442\u043e\u0440\u043e\u043c \u043c\u0430\u0441\u0441\u0438\u0432\u0435 \u0431\u044b\u043b\u043e \u0441\u0434\u0435\u043b\u0430\u043d\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435, \u0447\u0442\u043e \u0432\u0441\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u043d\u0435 \u043f\u0430\u043b\u0438\u043d\u0434\u0440\u043e\u043c\u0430\u043c\u0438. \u0412 \u0434\u0430\u043d\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0432\u043e \u0432\u0442\u043e\u0440\u043e\u043c \u043c\u0430\u0441\u0441\u0438\u0432\u0435 \u0441\u0434\u0435\u043b\u0430\u043d \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435, \u0447\u0442\u043e \u0432\u0441\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u043d\u0435 \u043f\u0430\u043b\u0438\u043d\u0434\u0440\u043e\u043c\u0430\u043c\u0438, \u0430 \u0432 \u043f\u0435\u0440\u0432\u043e\u043c \u043c\u0430\u0441\u0441\u0438\u0432\u0435 \u0431\u044b\u043b\u043e \u0441\u0434\u0435\u043b\u0430\u043d\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435, \u0447\u0442\u043e \u0432\u0441\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u043d\u0435 \u043f\u0430\u043b\u0438\u043d\u0434\u0440\u043e\u043c\u0430\u043c\u0438.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435. \u041f\u0440\u0438 \u0432\u044b\u0432\u043e\u0434\u0435 \u0432 \u043b\u044e\u0431\u043e\u043c \u0434\u0440\u0443\u0433\u043e\u043c \u043c\u0430\u0441\u0441\u0438\u0432\u0435 \u0434\u043e\u043b\u0436\u043d\u0430 \u043f\u0440\u0438\u0432\u043e\u0434\u0438\u0442\u044c\u0441\u044f \u043a \u043d\u0443\u0436\u043d\u043e\u043c\u0443 \u0444\u043e\u0440\u043c\u0430\u0442\u0443, \u0435\u0441\u043b\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d \u043c\u0430\u0441\u0441\u0438\u0432 \u0438\u0437 \u0441\u0442\u0430\u0440\u043e\u0433\u043e \u0432\u0438\u0434\u0430, \u0435\u0441\u043b\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d \u043d\u043e\u0432\u044b\u0439 \u043c\u0430\u0441\u0441\u0438\u0432 \u0438\u0437 \u0441\u0442\u0430\u0440\u043e\u0433\u043e \u0432\u0438\u0434\u0430, \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0438\u0442\u044c \u0441\u0442\u0430\u0440\u044b\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0432 \u043d\u043e\u0432\u044b\u0439 \u043c\u0430\u0441\u0441\u0438\u0432 \u043d\u0435 \u043f\u0440\u043e\u0441\u0442\u043e \u043f\u0440\u0438\u0432\u043e\u0434\u0438\u0442\u044c \u043a \u043d\u0443\u0436\u043d\u043e\u043c\u0443 \u0444\u043e\u0440\u043c\u0430\u0442\u0443.\n\n\u041f\u0440\u0438\u043c\u0435\u0440:\n\n\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0432 \u0442\u0430\u043a\u043e\u043c \u043c\u0430\u0441\u0441\u0438\u0432\u0435 \u0432\u0441\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u043d\u0430\u0447\u0438\u043d\u0430\u044e\u0442\u0441\u044f \u0441 1, \u0430 \u0432\u043e \u0432\u0442\u043e\u0440\u043e\u043c \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u043d\u0430\u0447\u0438\u043d\u0430\u044e\u0442\u0441\u044f \u0441 2. \u041d\u043e \u0432 \u043f\u0435\u0440\u0432\u043e\u043c \u043c\u0430\u0441\u0441\u0438\u0432\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043a\u043e\u0434, \u0440\u0430\u0437\u0434\u0435\u043b\u044f\u044e\u0449\u0438\u0439 \u0438\u0441\u0445\u043e\u0434\u043d\u044b\u0439 \u043c\u0430\u0441\u0441\u0438\u0432 \u043d\u0430 \u0434\u0432\u0430 \u0433\u0440\u0443\u043f\u043f\u044b: \u043c\u0430\u0441\u0441\u0438\u0432\u044b \u0441 \u043f\u0435\u0440\u0432\u044b\u043c\u0438 \u043f\u044f\u0442\u044c \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\u043c\u0438 \u0438 \u043c\u0430\u0441\u0441\u0438\u0432 \u0441 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u043c \u0434\u0432\u0443\u043c \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430\u043c\u0438. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u043c \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u043c \u0438\u0437 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f 4, \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u043c \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u043c \u0438\u0437 \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u2014 3. \u041d\u0435 \u0441\u0442\u043e\u0438\u0442 \u043f\u0440\u0438\u0432\u043e\u0434\u0438\u0442\u044c \u043a \u043d\u0443\u0436\u043d\u043e\u043c\u0443 \u0444\u043e\u0440\u043c\u0430\u0442\u0443 \u0442\u043e\u0433\u0434\u0430, \u0442\u0430\u043a \u043a\u0430\u043a \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u043c \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u043c \u0438\u0437 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u0430\u043b\u0438\u043d\u0434\u0440\u043e\u043c \u0438 \u043f\u0440\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u043d\u0443\u0436\u043d\u043e \u0432 \u0441\u0442\u0430\u0440\u043e\u043c \u0432\u0438\u0434\u0435.\n\n\u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u0432 \u043f\u0435\u0440\u0432\u043e\u043c \u043c\u0430\u0441\u0441\u0438\u0432\u0435 \u043c\u043e\u0433\u0443\u0442 \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u0442\u044c\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u0430\u043b\u0438\u043d\u0434\u0440\u043e\u043c\u044b, \u0430 \u0432\u043e \u0432\u0442\u043e\u0440\u043e\u043c \u043d\u0435\u0442."
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n, k = map(int, stdin.split())\n    count = 1\n    max_count = k\n    while True:\n        count = count * 2\n        count = count % (10**18)\n        if count == 1:\n            break\n    max_count = min(max_count, n)\n    answer = -1\n    for i in range(max_count):\n        if count == 0:\n            break\n        if count % k == 0:\n            answer = max(answer, i)\n            count = count // k\n        else:\n            count = count // 2\n    return str(answer)\n\ndef"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(i) for i in stdin.split())\n    res = 1\n    while (res % n)!= 0:\n        res += 1\n    return str(res)\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def h(n, k):\n        return int((k * n + 1) **.5)\n    n, k = map(int, stdin.split())\n    ans = 1\n    for i in range(1, n):\n        ans = max(ans, h(i, k) - 1)\n    return str(ans)\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    n, k = map(int, stdin[0].split(\" \"))\n    path = []\n    for i in range(1, n+1):\n        path.append(i)\n    if n == k:\n        return str(1)\n    elif n < k:\n        return str(n)\n    else:\n        ans = 1\n        while len(path) > 1:\n            for x in range(len(path)-1, 0, -1):\n                for i in range(0, x):\n                    if path[x-1] % 2 == 0:\n                        path[x] = path[x] // 2\n                    else:\n                        path[x] = path[x] - 1\n                    if path[x] == 1:\n                        ans = max(ans, len(set(path)))\n            for i in range(0, len(path)-1):\n                if path[i] % 2 == 0:\n                    path[i] = path[i] // 2\n                else:\n                    path[i] = path[i] - 1\n            if path[-1] == 1:\n                ans = max(ans, len(set(path)))\n            else:\n                path[-1] = path[-1] - 1\n                ans = max(ans, len(set(path)))\n        return str(ans)\n\nprint(solution(input()))\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    for num in range(1, n+1):\n        print(max(len([x for x in path(num)]), k))\n        path(num) = []\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def count_evens(n):\n        c = 0\n        while n % 2 == 0:\n            n = n // 2\n            c += 1\n        return c\n    path = [1]\n    for i in range(1, int(stdin) + 1):\n        path_c = 0\n        for p in path:\n            if p == 1:\n                path_c += 1\n            elif count_evens(p) >= i:\n                path_c += 1\n        if path_c >= i:\n            print(i)\n            break\n        path.append(p)\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    path = []\n    for i in range(1, n+1):\n        path.append(i)\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            path.remove(i)\n    max_y = 0\n    for y in path:\n        y_path = path.copy()\n        y_path.remove(y)\n        if len(y_path) >= k:\n            max_y = max(max_y, y)\n    return str(max_y)\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    dp = [[0 for i in range(n+1)] for j in range(n+1)]\n\n    #base case\n    for i in range(n+1):\n        dp[i][i] = 1\n\n    #recursive\n    for length in range(1, n):\n        for start in range(1, n):\n            for end in range(start+1, n+1):\n                dp[start][end] = max(dp[start][end], dp[start][start] + dp[end][end])\n    return str(max(max(row) for row in dp))\n\nsolution(input())\n\n\n\"\"\"\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = set()\n    for i in range(1, n + 1):\n        s |= {str(i)}\n    count = 0\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if i!= j:\n                s2 = {str(i), str(j)}\n                if s2 == s or (len(s2) == len(s) + k and len(s2) > count):\n                    count = len(s2)\n    return str(count)\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    arr = list(range(1, n + 1))\n    stack = []\n    for i in range(n):\n        while len(stack) > 0 and stack[-1] % 2!= 0 and arr[i] <= n:\n            stack.pop()\n        if len(stack) >= k:\n            stack.pop()\n        stack.append(arr[i])\n    return \" \".join(map(str, stack))\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, y, v_x, v_y = map(int, stdin.split())\n    x -= v_x\n    y -= v_y\n    while x >= 0 and y >= 0:\n        if x == n and y == m:\n            return '0 0'\n        if x == 0 and y == 0:\n            return '-1'\n        if x == -1 and y == -1:\n            return '-1'\n        if (y == 0 and x == m - 1) or (x == 0 and y == m - 1):\n            return '-1'\n        if x == n - 1 or y == m - 1:\n            return '-1'\n        if x == m - 1 and y == 0:\n            return '-1'\n        if x == 0 and y == m - 1:\n            return '-1'\n        if x == m - 1 and y == n - 1:\n            return '-1'\n        if x == 0 and y == n - 1:\n            return '-1'\n        if x == n - 1 and y == 0:\n            return '-1'\n        if x == 0 and y == 0:\n            return '-1'\n        x += v_x\n        y += v_y\n    return '-1'\n\n\ndef"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def get_pocket_location(x: int, y: int) -> str:\n        if x == 0 and y == 0:\n            return '0 0'\n        if x == 0:\n            if y > 0:\n                return '-1 -1'\n            else:\n                return '1 1'\n        elif y == 0:\n            if x > 0:\n                return '1 -1'\n            else:\n                return '-1 1'\n        else:\n            if y > 0 and x > 0:\n                return '1 1'\n            elif y > 0 and x < 0:\n                return '-1 -1'\n            elif y < 0 and x > 0:\n                return '-1 1'\n            elif y < 0 and x < 0:\n                return '1 -1'\n        return None\n\n\n    n, m, x, y, v_x, v_y = map(int, stdin.split())\n\n    while v_x!= 0 or v_y!= 0:\n        v_x, v_y = v_x / abs(v_x), v_y / abs(v_y)\n        if v_x == 0 and v_y == 0:\n            v_x, v_y = abs(v_x), abs(v_y)\n        if abs(v_x) >= abs(v_y):\n            v_x, v_y = abs(v_x), -abs(v_y)\n        x += v_x\n        y += v_y\n\n        if x > n:\n            x = x - n\n        elif x < 0:\n            x = x + n\n        if y > m:\n            y = y - m\n        elif y < 0:\n            y = y + m\n\n        print(get_pocket_location(x, y))\n    return get_pocket_location(x, y)\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('''\n   ... 3 3 2 2 -1 1\n   ... ''')\n    '0 0'\n    >>> solution('''\n   ... 4 4 2 0 1 1\n   ... ''')\n    '-1'\n    >>> solution('''\n   ... 10 10 10 1 -1 0\n   ... ''')\n    '-1'\n    >>> solution('''\n   ... 10 10 10 1 -1 0\n   ... ''')\n    '0 0'\n    '''\n    >>> solution('''\n   ... 5 5 2 0 1 1\n   ... ''')\n    '-1'\n    >>> solution('''\n   ... 5 5 2 0 -1 1\n   ... ''')\n    '0 0'\n    >>> solution('''\n   ... 5 5 2 0 -1 1\n   ... ''')\n    '0 0'\n    '''\n    '''\n    '''\n    stdin = stdin.strip()\n    m, n, x, y, v_x, v_y = map(int, stdin.split())\n    dx, dy = x - m, y - n\n    while dx ** 2 + dy ** 2 > 4:\n        if dy == 0:\n            dy = dy * 1.5\n        else:\n            dx = dx * 0.5\n    return '0 0' if dx == 0 and dy == 0 else f'{dx // v_x} {dy // v_y}'\n'''\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, y, v_x, v_y = map(int, stdin.split())\n    stdin = stdin.split()\n    if x == 0 or v_x == 0:\n        if n == 1 and m == 1:\n            return \"0 0\"\n        elif n == 1:\n            return f\"{m-1} 0\"\n        elif m == 1:\n            return f\"{n-1} 0\"\n        else:\n            return \"0 0\"\n\n    if v_x == 0 and v_y == 0:\n        if n == 1 and m == 1:\n            return \"0 0\"\n        elif n == 1:\n            return f\"{m-1} 0\"\n        elif m == 1:\n            return f\"{n-1} 0\"\n        else:\n            return \"0 0\"\n\n    if abs(v_x) == abs(v_y):\n        if n == 1 and m == 1:\n            return \"0 0\"\n        elif n == 1:\n            return f\"{m-1} 0\"\n        elif m == 1:\n            return f\"{n-1} 0\"\n        else:\n            return \"0 0\"\n\n    angle_x = v_x * v_x + v_y * v_y\n    angle_y = math.sqrt(angle_x)\n    angle = math.degrees(math.atan(angle_y/angle_x))\n\n    if abs(v_x) == 1 and v_y == 0:\n        if n == 1 and m == 1:\n            return \"0 0\"\n        elif n == 1:\n            return f\"{m-1} 0\"\n        elif m == 1:\n            return f\"{n-1} 0\"\n        else:\n            return \"0 0\"\n\n    if abs(v_x) == 1 and v_y == 1:\n        if n == 1 and m == 1:\n            return \"0 0\"\n        elif n == 1:\n            return f\"{m-1} 0\"\n        elif m == 1:\n            return f\"{n-1} 0\"\n        else:\n            return \"0 0\"\n\n    if abs(v_x) == 0 and v_y == 0:\n        if n == 1 and m == 1:\n            return \"0 0\"\n        elif n == 1:\n            return f\"{m-1} 0\"\n        elif m == 1:\n            return f\"{n-1} 0\"\n        else:\n            return \"0 0\"\n\n    if abs(v_x) == 0 and v_y == 1:\n        if n == 1 and m == 1:\n            return \"0 0\"\n        elif n == 1:\n            return f\"{m-1} 0\"\n        elif m == 1:\n            return f\"{n-1} 0\"\n        else:\n            return \"0 0\"\n\n    angle = math.degrees(math.atan(angle_y/angle_x))\n    if abs(v_x) == 1 and v_y == 0:\n        if n == 1 and m == 1:\n            return \"0 0\"\n        elif n == 1:\n            return f\"{m-1} 0\"\n        elif m == 1:\n            return f\"{n-1} {-1*angle}\"\n        else:\n            return f\"{n-1} {-1*angle}\"\n\n    if abs(v_x) == 1 and v_y == 1:\n        if n == 1 and m == 1:\n            return \"0 0\"\n        elif n == 1:\n            return f\"{m-1} 0\"\n        elif m == 1:\n            return f\"{n-1} {-1*angle}\"\n        else:\n            return f\"{n-1} {-1*angle}\"\n\n    if abs(v_x) == 0 and v_y == 0:\n        if n == 1 and m == 1:\n            return \"0 0\"\n        elif n == 1:\n            return f\"{m-1} {-1*angle}\"\n        elif m == 1:\n            return f\"{n-1} 0\"\n        else:\n            return f\"{n-1} {-1*angle}\"\n\n    if abs(v_x) == 0 and v_y == 1:\n        if n == 1 and m == 1:\n            return \"0 0\"\n        elif n == 1:\n            return f\"{m-1} 0\"\n        elif m == 1:\n            return f\"{n-1} {-1*angle}\"\n        else:\n            return f\"{n-1} {-1*angle}\"\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, y, v_x, v_y = map(int, stdin.split())\n    for i in range(1, n):\n        v_x = x + i * v_x\n        if v_x >= n or v_x <= 0 or v_y == 0:\n            return \"0 0\"\n        x = v_x\n    for i in range(1, m):\n        v_y = y + i * v_y\n        if v_y >= m or v_y <= 0 or v_x == 0:\n            return \"0 0\"\n        y = v_y\n    return str(x) + \" \" + str(y)\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, y, v_x, v_y = list(map(int, stdin.split()))\n    if abs(v_y) == v_x == 0:\n        return -1\n\n    if abs(v_y) == 1:\n        return \"0 0\" if x == 0 else \"x y\"\n\n    dx = y * v_y - x * v_x\n    if dx == 0:\n        return \"x y\" if x == 0 else \"x y\" if abs(x) == abs(y) else \"0 0\" if x == y else \"x y\"\n\n    if dx > 0:\n        return \"0 0\" if x == 0 else \"x y\"\n\n    return \"x y\" if x == 0 else \"x y\" if abs(x) == abs(y) else \"0 0\" if x == y else \"x y\"\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def move(x: int, y: int, v_x: int, v_y: int) -> Tuple[int, int]:\n        while (0 <= x + v_x < n) and (0 <= y + v_y < m):\n            x += v_x\n            y += v_y\n        return x, y\n    n, m, x, y, v_x, v_y = map(int, stdin.split())\n    pocket_x = pocket_y = -1\n    while pocket_x == -1 or pocket_y == -1:\n        pocket_x, pocket_y = move(x, y, v_x, v_y)\n        if 0 <= pocket_x < n and 0 <= pocket_y < m:\n            if (pocket_x, pocket_y) == (x, y):\n                pocket_x = -1\n            elif (pocket_x, pocket_y) not in pockets:\n                pocket_x = -1\n            else:\n                pocket_y = -1\n    return pocket_x\nsolution(\"4 3 2 2 -1 1\")\n\nsolution(\"10 10 10 1 -1 0\")\n\nsolution(\"10 10 10 1 1\")"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, y, v_x, v_y = (int(i) for i in stdin.split())\n    if n == m:\n        print(x, y)\n    else:\n        while x < n and y < m:\n            x += v_x\n            y += v_y\n            if x == n or y == m:\n                print(-1)\n                break\n            if x == n or y == m:\n                print(x, y)\n                break"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, y, v_x, v_y = list(map(int, stdin.split()))\n    dx, dy = 0, 0\n    for i in range(m):\n        if i < m - 1:\n            dx = max(dx, i)\n            dx = min(dx, n - 1 - i)\n        if i < n - 1:\n            dy = max(dy, i)\n            dy = min(dy, m - 1 - i)\n    return \" \".join(map(str, (dx, dy)))\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, y, v_x, v_y = map(int, stdin.split())\n    if v_x!= 0 or v_y!= 0:\n        return -1\n    def dot(a, b):\n        return a[0] * b[0] + a[1] * b[1]\n    def cross(a, b):\n        return a[0] * b[1] - a[1] * b[0]\n    def move(a, b):\n        return a[0] + b[0], a[1] + b[1]\n    def rotate(a, b):\n        return b[0] - a[0], b[1] - a[1]\n    def collides(a, b):\n        return (\n            (a[1] - b[1] > 0) or (a[1] - b[1] < 0 and a[0] == b[0])\n        ) and abs(a[0] - b[0]) <= 1 and abs(a[1] - b[1]) <= 1\n\n    pockets = []\n    for x in range(n):\n        for y in range(m):\n            if (x, y) not in pockets:\n                pockets.append((x, y))\n    l_pocket, r_pocket = None, None\n    for i in range(n):\n        for j in range(m):\n            if (x, y) in pockets:\n                l_pocket = i, j\n            if collides((i, j), l_pocket) and (i, j)!= l_pocket:\n                r_pocket = i, j\n    for i in range(n):\n        for j in range(m):\n            if (i, j)!= l_pocket and (i, j)!= r_pocket:\n                pockets.remove((i, j))\n    dirs = [(0, -1), (0, 1), (-1, 0), (1, 0)]\n    # print(pockets, l_pocket, r_pocket)\n    pocket_color = [0] * len(pockets)\n    x, y = move(x, v_x)\n    y, v_y = move(y, v_y)\n    # print(x, y, v_x, v_y)\n    while True:\n        # print(x, y, v_x, v_y)\n        for i, (x, y) in enumerate(zip(dirs, pockets)):\n            if x == 0 and y == 0:\n                continue\n            if not collides((x, y), (x, y)):\n                continue\n            if y == r_pocket[1] and x == 0:\n                x = x if x!= 0 else 1\n            if y == l_pocket[1] and x == 0:\n                x = x if x!= 0 else -1\n            if (x, y) == l_pocket:\n                pocket_color[i] += 1\n            if (x, y) == r_pocket:\n                pocket_color[i] -= 1\n        if max(pocket_color) > 0:\n            continue\n        if x == r_pocket[0] and x == l_pocket[0]:\n            x = x if x!= 0 else 1\n        if x == l_pocket[0] and x == r_pocket[0]:\n            x = x if x!= 0 else -1\n        if y == r_pocket[1] and y == l_pocket[1]:\n            y = y if y!= 0 else 1\n        if y == l_pocket[1] and y == r_pocket[1]:\n            y = y if y!= 0 else -1\n        x, y = move(x, v_x)\n        y, v_y = move(y, v_y)\n        pocket_color = [0] * len(pockets)\n        for i, (x, y) in enumerate(zip(dirs, pockets)):\n            if x == 0 and y == 0:\n                continue\n            if not collides((x, y), (x, y)):\n                continue\n            if y == r_pocket[1] and x == 0:\n                x = x if x!= 0 else 1\n            if y == l_pocket[1] and x == 0:\n                x = x if x!= 0 else -1\n            if (x, y) == l_pocket:\n                pocket_color[i] += 1\n            if (x, y) == r_pocket:\n                pocket_color[i] -= 1\n        if max(pocket_color) > 0:\n            continue\n        # print(x, y, v_x, v_y)\n        return str(l_pocket[0]) +'' + str(l_pocket[1])\n    return '-1'\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n  stdin = stdin.strip().split()\n  a_1, b_1 = int(stdin[0]), int(stdin[1])\n  stdin = stdin[2:]\n  a_2, b_2, a_3, b_3 = map(int, stdin[:3])\n  return \"YES\" if (a_1 <= a_2 <= a_3) and (b_1 <= b_2 <= b_3) else \"NO\"\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    pictures = []\n    for i in range(3):\n        pictures.append(tuple(map(int, stdin.split())))\n    pictures.sort()\n    board = [pictures[0]]\n    for i in range(1, len(pictures)):\n        if board[-1][0] < pictures[i][0]:\n            board.append(pictures[i])\n        else:\n            board.append(pictures[i])\n            for p in board:\n                if (p[1] - p[0]) % b!= 0:\n                    return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.split()[0])\n    b = int(stdin.split()[1])\n\n    def is_valid(a, b, _):\n        return a <= 0 or b <= 0\n    x = 1\n    y = 1\n    for _ in range(a):\n        x *= 2\n    for _ in range(b):\n        y *= 2\n    return \"YES\" if x == y else \"NO\"\n\ndef"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, S = map(int, stdin.split())\n    A, B = map(int, input().split())\n    C, D = map(int, input().split())\n    if (C - A) * (D - B) >= N * S:\n        print('YES')\n    else:\n        print('NO')\n\nsolution(input())\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 5\n   ... 3 3\n   ... 3 3''')\n    'YES'\n    >>> solution('''8 3\n   ... 4 4\n   ... 2 1\n   ... 4 4''')\n    'YES'\n    >>> solution('''4 4\n   ... 2 2\n   ... 2 1\n   ... 2 2''')\n    'NO'\n    \"\"\"\n    board_side = list(map(int, input().split()))\n    tiles = {}\n    for line in input().split():\n        a, b = list(map(int, line.split()))\n        tiles[a, b] = tiles.get((a, b), 0) + 1\n\n    min_cols = min(board_side)\n    max_cols = max(board_side)\n    board_side_square = min_cols * max_cols\n    tiles_count = sum(tiles.values())\n    if tiles_count < board_side_square:\n        return 'NO'\n    elif tiles_count == board_side_square:\n        for a in range(min_cols, max_cols + 1):\n            for b in range(min_cols, max_cols + 1):\n                if tiles.get((a, b), 0) == 1:\n                    return 'YES'\n\n    return 'NO'\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a_1, b_1 = map(int, stdin.split())\n    a_2, b_2 = map(int, stdin.split())\n    a_3, b_3 = map(int, stdin.split())\n    if max(a_1, b_1, a_2, b_2) > min(a_1, b_1, a_2, b_2) and max(a_2, b_2, a_3, b_3) > min(a_2, b_2, a_3, b_3) and max(a_1, b_1, a_3, b_3) > min(a_1, b_1, a_3, b_3):\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    board = []\n    for _ in range(n):\n        board.append(list(map(int, stdin.split())))\n    a_1, b_1, a_2, b_2, a_3, b_3 = map(int, stdin.split())\n    painting_1 = a_1 * b_1\n    painting_2 = a_2 * b_2\n    painting_3 = a_3 * b_3\n    paintings_in_board = painting_1 + painting_2 + painting_3\n    if painting_1 < painting_2 + painting_3 and painting_2 < painting_1 + painting_3 and painting_3 < painting_1 + painting_2 and paintings_in_board == n * m:\n        return \"YES\"\n    else:\n        return \"NO\"\n\ninput = \"\"\"4 5\n5 3\n2 2\n3 4\n1 3\n\"\"\"\nprint(solution(input))"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    _, _, a1, b1 = stdin.split()\n    a1, b1 = int(a1), int(b1)\n\n    _, _, a2, b2 = stdin.split()\n    a2, b2 = int(a2), int(b2)\n\n    _, _, a3, b3 = stdin.split()\n    a3, b3 = int(a3), int(b3)\n\n    if a1 >= a2 and a1 >= a3 and b1 >= b2 and b1 >= b3:\n        if a2 >= a3 and b2 >= b3:\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        return \"NO\""
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a_1, b_1 = map(int, stdin.split())\n    a_2, b_2 = map(int, stdin.split())\n    a_3, b_3 = map(int, stdin.split())\n\n    p1 = (a_1, b_1)\n    p2 = (a_2, b_2)\n    p3 = (a_3, b_3)\n\n    if p1 == (1, 1) or p2 == (1, 1) or p3 == (1, 1) or \\\n            p1 == (1, 1) or p2 == (1, 1) or p3 == (1, 1) or \\\n            p1 == (1, 1) or p2 == (1, 1) or p3 == (1, 1):\n        return \"YES\"\n    else:\n        return \"NO\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    width, height = map(int, stdin.split())\n    a_1, b_1 = map(int, stdin.split())\n    a_2, b_2 = map(int, stdin.split())\n    a_3, b_3 = map(int, stdin.split())\n    if width * height!= a_1 * b_1 + a_2 * b_2 + a_3 * b_3:\n        return 'NO'\n    if width < min(a_1, a_2) or width > max(a_1, a_2) or height < min(b_1, b_2) or height > max(b_1, b_2):\n        return 'NO'\n    if a_1 + a_2 < width:\n        return 'NO'\n    if a_2 + a_3 < width:\n        return 'NO'\n    if a_1 + a_3 < height:\n        return 'NO'\n    if a_3 + a_2 < height:\n        return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    b_1, q, l, m = map(int, stdin.split())\n    if abs(b_1) + q < l:\n        return \"inf\"\n    n = (l - abs(b_1)) // q\n    if b_1!= 0:\n        n += 1\n    m -= n\n    return str(n) if m == 0 else \"inf\"\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    b_1, q, l, m = stdin.split()\n    b_1 = int(b_1)\n    q = int(q)\n    l = int(l)\n    m = int(m)\n    l_list = [1] * (l + 1)\n    for i in range(1, l + 1):\n        if i > 1 and l_list[i - 1] == 1 and l_list[i] == 1:\n            l_list[i] = i\n        elif i > 1 and l_list[i] == 1:\n            l_list[i] = i + l_list[i - 1]\n    good_count = 0\n    bad_count = 0\n    bad_list = [int(i) for i in stdin.split()[1:]]\n    for i in bad_list:\n        if i!= 0:\n            good_count += 1\n        elif i == 0:\n            bad_count += 1\n    if l_list[q] > bad_count:\n        return str(good_count + (l_list[q] - bad_count))\n    else:\n        return str(inf)\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    a, b, l, m = map(int, stdin.split())\n    b_max = max(a, b)\n    if b_max == a:\n        return \"inf\"\n    def dfs(b_i, q):\n        if b_i == 1:\n            return q\n        return 1 if q == 1 else dfs(b_i - 1, q) + dfs(b_i - 1, q - 1)\n    return dfs(b_max, l)\n\nprint(solution(input()))\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    b_1, q, l, m = list(map(int, stdin.split()))\n    print(progression_count(b_1, q, l, m))\n    return \"\"\ndef"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    b_1, q, l, m = map(int, stdin.split())\n    counter = 0\n    for b in range(1, b_1 + 1):\n        if abs(b) >= l:\n            break\n        for i in range(1, m):\n            if abs(b) > l or abs(a) > l:\n                break\n            else:\n                if b == 1 or b == 0:\n                    counter += 1\n                else:\n                    if a % b == 0:\n                        counter += 1\n    return str(counter)\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    b_1, q, l, m = stdin.split()\n    if int(b_1) > int(l):\n        return 'inf'\n    bad = list(map(int, stdin.split()))\n    t = int(l)\n    count = 0\n    while int(b_1)!= 0:\n        b_1, q = int(b_1), int(q)\n        t += 1\n        if t % int(q)!= 0:\n            b_1 += 1\n        else:\n            b_1 += 1\n            for i in range(m):\n                if int(bad[i]) == 0:\n                    b_1 += 1\n                elif int(bad[i]) == t % int(q):\n                    b_1 = 0\n        count += 1\n    return str(count)\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split()\n    b_1, q, l, m = int(lines[0]), int(lines[1]), int(lines[2]), int(lines[3])\n    bad_nums = list(map(int, lines[4].split(',')))\n    answer = 0\n    while len(bad_nums) > 0:\n        bad_num = bad_nums.pop()\n        if abs(bad_num) > l:\n            break\n        answer += (b_1 + (b_1 - 1) * q) // q\n    if answer == 0:\n        return \"inf\"\n    return str(answer)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    b_1, q, l, m = map(int, stdin.split())\n    bad_int = set(map(int, stdin.split()[1:]))\n    count = 0\n    while (b_1 + q)**count <= l:\n        if any([abs(int(b_1 + q**i)) in bad_int for i in range(count)]):\n            break\n        else:\n            count += 1\n    return str(count)"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    b1, q, l, m = stdin.split(' ')\n    b1 = int(b1)\n    q = int(q)\n    l = int(l)\n    m = int(m)\n    bad = set(map(int, stdin.split()[m:]))\n    c = 0\n    while True:\n        c += 1\n        b = []\n        for i in range(1, q):\n            if abs(b1) <= l:\n                b.append(b1)\n                b1 = b1 - q\n                if b1 < 0:\n                    b1 = 0\n                continue\n            break\n        if b1 in bad:\n            continue\n        break\n    print(c)\n    return 'inf'\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    num_bad = int(stdin.split()[2])\n    non_inf_terms = 0\n    n = int(stdin.split()[0])\n    q = int(stdin.split()[1])\n    while n > 0:\n        if abs(n) <= num_bad:\n            non_inf_terms += 1\n        n = n - q\n        if abs(n) > num_bad:\n            non_inf_terms = -1\n            break\n    if non_inf_terms == 0:\n        return \"inf\"\n    else:\n        return str(non_inf_terms)\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    monitor = ''.join(stdin.split())\n    if n * m < 1:\n        return str(-1)\n    s_mon = sum(1 if i == 'w' else 0 for i in monitor)\n    if n * m == 1:\n        if s_mon == n:\n            return monitor.replace('w', '.')\n        else:\n            return str(-1)\n    else:\n        f_min = n\n        f_max = n\n        s_min = n\n        s_max = n\n        while f_min < f_max:\n            s_mon = sum(1 if i == 'w' else 0 for i in monitor[f_min*m:(f_min+1)*m])\n            if s_mon == s_min:\n                s_min = s_mon\n                f_min += 1\n            else:\n                break\n        while f_max > f_min:\n            s_mon = sum(1 if i == 'w' else 0 for i in monitor[f_max*m:(f_max+1)*m])\n            if s_mon == s_max:\n                s_max = s_mon\n                f_max -= 1\n            else:\n                break\n        if s_min == s_max:\n            return monitor.replace('w', '.')\n        else:\n            return str(-1)\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    monitor = stdin.split('\\n')\n    frame = (1, 1)\n    while monitor[frame[0] - 1][frame[1] - 1] == '.' and frame!= (n, m):\n        frame = (frame[0] - 1, frame[1] - 1)\n    if frame == (n, m):\n        return '-1'\n    for i in range(1, min(n, m)):\n        if monitor[frame[0] - i][frame[1] - i] == '.':\n            for j in range(frame[0] - i + 1, frame[0] + i):\n                if monitor[j][frame[1] - i] == '.':\n                    monitor[j][frame[1] - i] = 'w'\n            for j in range(frame[1] - i + 1, frame[1] + i):\n                if monitor[frame[0] - i][j] == '.':\n                    monitor[frame[0] - i][j] = 'w'\n            return ''.join(monitor[frame[0] - i]) + ''.join(monitor[frame[0] + i]) + ''.join(monitor[frame[1] - i]) + ''.join(monitor[frame[1] + i])\n    return '-1'\n    "
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    board = stdin.replace(\".\",\"w\").replace(\"w\",\".\")\n    return board if n * m >= 9 else -1\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    m, n = [int(x) for x in stdin.split()]\n    for i in range(m - 1, 0, -1):\n        for j in range(n - 1, 0, -1):\n            if stdin[i * n + j] == 'w':\n                continue\n            if i == m - 1:\n                if j == n - 1:\n                    return stdin[i * n + j]\n            elif j == n - 1:\n                if i == m - 1:\n                    return stdin[i * n + j]\n            if i == 0 and j == 0:\n                if stdin[i * n + j] == '.':\n                    return '+'\n                else:\n                    return stdin[i * n + j]\n            if i == 0:\n                if j == 0:\n                    if stdin[i * n + j] == '.':\n                        return stdin[i * n + j]\n                if j!= 0:\n                    if stdin[i * n + j] == '.':\n                        return stdin[i * n + j]\n            if j == 0:\n                if i!= 0:\n                    if stdin[i * n + j] == '.':\n                        return stdin[i * n + j]\n            if i == m - 1 and j == n - 1:\n                if stdin[i * n + j] == '.':\n                    return stdin[i * n + j]\n            if i!= 0 and j == 0:\n                if stdin[i * n + j] == '.':\n                    return stdin[i * n + j]\n            if i!= 0 and j!= 0:\n                if stdin[i * n + j] == '.':\n                    return stdin[i * n + j]\n            if i == m - 1:\n                if j!= n - 1:\n                    if stdin[i * n + j] == '.':\n                        return stdin[i * n + j]\n            if j == n - 1:\n                if i!= m - 1:\n                    if stdin[i * n + j] == '.':\n                        return stdin[i * n + j]\n            if j!= 0 and i!= m - 1:\n                if stdin[i * n + j] == '.':\n                    return stdin[i * n + j]\n            if j!= 0 and i!= 0:\n                if stdin[i * n + j] == '.':\n                    return stdin[i * n + j]\n            if i!= 0 and j!= 0 and i!= m - 1:\n                if stdin[i * n + j] == '.':\n                    return stdin[i * n + j]\n            if i == m - 1 and j!= 0:\n                if stdin[i * n + j] == '.':\n                    return stdin[i * n + j]\n            if i!= 0 and j == n - 1:\n                if stdin[i * n + j] == '.':\n                    return stdin[i * n + j]\n            if i!= 0 and j!= n - 1:\n                if stdin[i * n + j] == '.':\n                    return stdin[i * n + j]\n            if i!= 0 and j!= 0:\n                if stdin[i * n + j] == '.':\n                    return stdin[i * n + j]"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n, m = map(int, stdin[0].split())\n    pixels = stdin[1]\n    left_border = '.'\n    right_border = '.'\n    top_border = '.'\n    bottom_border = '.'\n    for i in range(n):\n        if left_border not in pixels[i]:\n            left_border = pixels[i]\n        if right_border not in pixels[i]:\n            right_border = pixels[i]\n        if top_border not in pixels[i]:\n            top_border = pixels[i]\n        if bottom_border not in pixels[i]:\n            bottom_border = pixels[i]\n    if left_border == right_border and top_border == bottom_border:\n        return '-1'\n    size = 1\n    possible_size = [size]\n    while True:\n        print(f'Current size {size}')\n        new_pixels = []\n        for i in range(n):\n            if pixels[i] == '.':\n                continue\n            if pixels[i] == left_border:\n                left_border = pixels[i]\n            if pixels[i] == right_border:\n                right_border = pixels[i]\n            if pixels[i] == top_border:\n                top_border = pixels[i]\n            if pixels[i] == bottom_border:\n                bottom_border = pixels[i]\n            print(f'The pixel is {pixels[i]}')\n            print(f'Right border is {right_border}')\n            print(f'Left border is {left_border}')\n            print(f'Top border is {top_border}')\n            print(f'Bottom border is {bottom_border}')\n            if left_border == right_border and top_border == bottom_border:\n                return '-1'\n            for j in range(i-size+1, i):\n                print(f'Current pixel to check is {pixels[j]}')\n                if pixels[j] == 'w':\n                    continue\n                if pixels[j] == left_border:\n                    print(f'{pixels[j]} is left')\n                    new_pixels.append('w')\n                if pixels[j] == right_border:\n                    print(f'{pixels[j]} is right')\n                    new_pixels.append('w')\n                if pixels[j] == top_border:\n                    print(f'{pixels[j]} is top')\n                    new_pixels.append('w')\n                if pixels[j] == bottom_border:\n                    print(f'{pixels[j]} is bottom')\n                    new_pixels.append('w')\n            print(new_pixels)\n            new_pixels = list(filter(lambda x: x!= 'w', new_pixels))\n        if len(new_pixels) == 0:\n            return '-1'\n        if len(new_pixels) == size:\n            possible_size.append(size)\n            size += 1\n        else:\n            possible_size.append(len(new_pixels))\n            size = len(new_pixels)\n    for size in possible_size:\n        print(f'Current size is {size}')\n        for i in range(n):\n            print(f'The pixel is {pixels[i]}')\n            print(f'Right border is {right_border}')\n            print(f'Left border is {left_border}')\n            print(f'Top border is {top_border}')\n            print(f'Bottom border is {bottom_border}')\n            if left_border == right_border and top_border == bottom_border:\n                return '-1'\n            for j in range(i-size+1, i):\n                print(f'Current pixel to check is {pixels[j]}')\n                if pixels[j] == 'w':\n                    continue\n                if pixels[j] == left_border:\n                    print(f'{pixels[j]} is left')\n                    left_border = pixels[j]\n                if pixels[j] == right_border:\n                    print(f'{pixels[j]} is right')\n                    right_border = pixels[j]\n                if pixels[j] == top_border:\n                    print(f'{pixels[j]} is top')\n                    top_border = pixels[j]\n                if pixels[j] == bottom_border:\n                    print(f'{pixels[j]} is bottom')\n                    bottom_border = pixels[j]\n            print(new_pixels)\n            new_pixels = list(filter(lambda x: x!= 'w', new_pixels))\n        print(new_pixels)\n        if len(new_pixels) == 0:\n            return '-1'\n        if len(new_pixels) == size:\n            break\n    result = []\n    for i in range(n):\n        if pixels[i] == 'w':\n            result.append('w')\n        else:\n            result.append('.')\n    result = ''.join(result)\n    return result\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    if n == 1 and m == 1:\n        return \"+\"\n    if n == 1 and m == 2:\n        return \"++\"\n    if n == 2 and m == 2:\n        return \"+++\"\n    return \"-1\"\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    # print(n, m)\n    for _ in range(m):\n        stdin = stdin + \".\"\n        # print(stdin)\n    # print(stdin)\n    cnt = 0\n    size = 0\n    for i in range(n):\n        for j in range(i, n):\n            # print(stdin[i:j+1])\n            if \"\".join(stdin[i:j+1]) == \"\".join(stdin[i:j+1][::-1]):\n                cnt = cnt + 1\n                size = i + 1\n    # print(cnt, size)\n    return str(size) + \" \" + str(cnt) if cnt!= 0 else \"-1\"\n\n\nprint(solution(input()))"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    n, m = stdin.split()\n    n = int(n)\n    m = int(m)\n    if n == 1 and m == 1:\n        return \"+\"\n    if m == 1:\n        return \".\"\n    if n == 1:\n        return \"w\"\n    s = set()\n    for i in range(n):\n        for j in range(m):\n            if stdin[i][j] == \".\":\n                s.add((i, j))\n    max_len = 0\n    min_len = n + m - 1\n    for i in range(n):\n        for j in range(m):\n            if stdin[i][j] == \"w\":\n                new_len = 1\n                for x in range(i, n + i):\n                    for y in range(j, m + j):\n                        if stdin[x][y] == \"+\":\n                            new_len += 1\n                if new_len > max_len:\n                    max_len = new_len\n                if new_len < min_len:\n                    min_len = new_len\n    if min_len == n + m - 1:\n        return \"-1\"\n    if max_len == 1:\n        for i in range(n):\n            for j in range(m):\n                if stdin[i][j] == \"w\":\n                    stdin = stdin[:i] + \"+\" + stdin[i + 1:]\n                    return stdin\n    if max_len == 2:\n        for i in range(n):\n            for j in range(m):\n                if stdin[i][j] == \"w\":\n                    stdin = stdin[:i] + \"w\" + stdin[i + 1:]\n                    return stdin\n    if max_len == 3:\n        for i in range(n):\n            for j in range(m):\n                if stdin[i][j] == \"w\":\n                    stdin = stdin[:i] + \"+\" + stdin[i + 1:] + \"w\" + stdin[i + 2:]\n                    return stdin\n    if max_len == 4:\n        for i in range(n):\n            for j in range(m):\n                if stdin[i][j] == \"w\":\n                    stdin = stdin[:i] + \"w\" + stdin[i + 1:] + \"w\" + stdin[i + 2:]\n                    return stdin\n    if max_len == 5:\n        for i in range(n):\n            for j in range(m):\n                if stdin[i][j] == \"w\":\n                    stdin = stdin[:i] + \"w\" + stdin[i + 1:] + \"w\" + stdin[i + 2:] + \"w\" + stdin[i + 3:]\n                    return stdin\n    if max_len == 6:\n        for i in range(n):\n            for j in range(m):\n                if stdin[i][j] == \"w\":\n                    stdin = stdin[:i] + \"w\" + stdin[i + 1:] + \"w\" + stdin[i + 2:] + \"w\" + stdin[i + 3:] + \"w\" + stdin[i + 4:]\n                    return stdin\n    if max_len == 7:\n        for i in range(n):\n            for j in range(m):\n                if stdin[i][j] == \"w\":\n                    stdin = stdin[:i] + \"w\" + stdin[i + 1:] + \"w\" + stdin[i + 2:] + \"w\" + stdin[i + 3:] + \"w\" + stdin[i + 4:] + \"w\" + stdin[i + 5:]\n                    return stdin\n    if max_len == 8:\n        for i in range(n):\n            for j in range(m):\n                if stdin[i][j] == \"w\":\n                    stdin = stdin[:i] + \"w\" + stdin[i + 1:] + \"w\" + stdin[i + 2:] + \"w\" + stdin[i + 3:] + \"w\" + stdin[i + 4:] + \"w\" + stdin[i + 5:] + \"w\" + stdin[i + 6:]\n                    return stdin\n    return stdin"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    (n, m) = list(map(int, stdin.split()))\n\n    def border(n, m):\n        def rec(row):\n            if row == n:\n                return [[]]\n            elif row == 0:\n                return [['.'] * m]\n            else:\n                res = [['.'] * m]\n                for i in range(m):\n                    if i == 0:\n                        tmp = rec(row - 1)\n                    elif i == m - 1:\n                        tmp = rec(row - 1)\n                    else:\n                        tmp = rec(row - 1) + [['.'] * (m - 2)]\n                    res.append(tmp)\n                return res\n        return rec(n)\n\n    matrix = border(n, m)\n\n    def in_border(row, col, m, n):\n        if row < 0 or row >= n:\n            return False\n        if col < 0 or col >= m:\n            return False\n        return True\n\n    def check(matrix, n, m):\n        for row in range(n):\n            for col in range(m):\n                if matrix[row][col] == '.':\n                    continue\n                if not in_border(row, col, m, n):\n                    return False\n        return True\n\n    def print_border(matrix, n, m):\n        for row in range(n):\n            for col in range(m):\n                print(matrix[row][col], end='')\n            print()\n        print()\n\n    def check_border(matrix, n, m):\n        for row in range(n):\n            for col in range(m):\n                if matrix[row][col] == '.':\n                    continue\n                if not in_border(row, col, m, n):\n                    return False\n        return True\n\n    def check_frame(matrix, frame, n, m):\n        i = len(frame) - 1\n        while i >= 0:\n            row = frame[i]\n            for j in range(len(row)):\n                if matrix[row[j]][frame[i - 1][j]]!= '.':\n                    return False\n            i -= 1\n        return True\n\n    while True:\n        for row in range(n):\n            if not check(matrix, n, m):\n                break\n            i = 0\n            while i < m - 1:\n                if matrix[row][i] == '.':\n                    j = i\n                    while matrix[row][j] == '.':\n                        j += 1\n                    if matrix[row][j]!= '.':\n                        break\n                    matrix[row][j] = 'w'\n                    if j - i == 1:\n                        i = j\n                    else:\n                        i = j - 1\n                i += 1\n        if not check(matrix, n, m):\n            break\n        i = 0\n        while i < m - 1:\n            if matrix[n - 1][i] == '.':\n                j = i\n                while matrix[n - 1][j] == '.':\n                    j += 1\n                if matrix[n - 1][j]!= '.':\n                    break\n                matrix[n - 1][j] = 'w'\n                if j - i == 1:\n                    i = j\n                else:\n                    i = j - 1\n            i += 1\n        if not check(matrix, n, m):\n            break\n        for row in range(n - 2, -1, -1):\n            if not check_border(matrix, n, m):\n                break\n            i = 0\n            while i < m - 1:\n                if matrix[row][i] == '.':\n                    j = i\n                    while matrix[row][j] == '.':\n                        j += 1\n                    if matrix[row][j]!= '.':\n                        break\n                    matrix[row][j] = 'w'\n                    if j - i == 1:\n                        i = j\n                    else:\n                        i = j - 1\n                i += 1\n        if not check(matrix, n, m):\n            break\n        i = 0\n        while i < m - 1:\n            if matrix[0][i] == '.':\n                j = i\n                while matrix[j][i] == '.':\n                    j += 1\n                if matrix[j][i]!= '.':\n                    break\n                matrix[j][i] = 'w'\n                if j - i == 1:\n                    i = j\n                else:\n                    i = j - 1\n            i += 1\n        if not check(matrix, n, m):\n            break\n        for col in range(n):\n            if not check_border(matrix, n, m):\n                break\n            i = 0\n            while i < m - 1:\n                if matrix[i][col] == '.':\n                    j = i\n                    while matrix[j][col] == '.':\n                        j += 1\n                    if matrix[j][col]!= '.':\n                        break\n                    matrix[j][col] = 'w'\n                    if j - i == 1:\n                        i = j\n                    else:\n                        i = j - 1\n                i += 1\n        if not check(matrix, n, m):\n            break\n        i = 0\n        while i < m - 1:\n            if matrix[n - 1][i] == '.':\n                j = i\n                while matrix[n - 1][j] == '.':\n                    j += 1\n                if matrix[n - 1][j]!= '.':\n                    break"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, y = stdin.split()\n    n, m = int(x), int(y)\n    result = \"\"\n    for i in range(n):\n        if all(x == \"w\" for x in stdin[i*m:i*m+m]):\n            result += \"w\"*m\n            return result\n        elif not any(x == \"w\" for x in stdin[i*m:i*m+m]):\n            result += \".\"*m\n            continue\n        else:\n            result += \".\"*m\n            continue\n\nprint(solution(input()))\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if (n // a) * (a) + (n // b) * (b) == n:\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = int(input())\n    b = int(input())\n    x = 0\n    y = 0\n    if n % a == 0:\n        x = n // a\n    if n % b == 0:\n        y = n // b\n    if x + y == n:\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    money, a, b = list(map(int, stdin.split()))\n    ans = 'NO'\n    for x in range(money // a + 1):\n        for y in range(money // b + 1):\n            if a * x + b * y == money:\n                ans = 'YES'\n                break\n        if ans == 'YES':\n            break\n    return ans\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    a = a * n\n    b = b * n\n    if a + b == n:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = stdin.split()\n    n = int(n)\n    a = int(a)\n    b = int(b)\n    a_t = n // a\n    b_t = n - a_t * a\n    if a_t > 0 and b_t > 0:\n        print('YES')\n        print(a_t, b_t)\n    else:\n        print('NO')\n    return 'YES'\n\nsolution(input())"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    if a * n + b * n == n:\n        print('YES')\n        print(str(a) +'' + str(b))\n    else:\n        print('NO')\n    return '0 1'"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def get_data(line):\n        return map(int, line.split())\n    n = int(stdin.strip())\n    a, b = get_data(stdin)\n    # print(n, a, b)\n\n    if n <= a * b:\n        return 'YES'\n    for i in range(a + 1, n // (a + 1) + 1):\n        j = n // i - a\n        # print(i, j, i * a + j * b)\n        if i * a + j * b == n:\n            return 'YES'\n\n    return 'NO'\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = stdin.split()\n    n = int(n)\n    a = int(a)\n    b = int(b)\n    if a + b == n:\n        return 'YES'\n    if a * a + b * b!= n:\n        return 'NO'\n\n    a_count = 0\n    b_count = 0\n    while a + b > 0:\n        if a_count == 0 and b_count == 0:\n            a_count = 2\n            b_count = 1\n        elif a_count == 0 and b_count == 1:\n            a_count = 1\n            b_count = 2\n        elif a_count == 1 and b_count == 0:\n            a_count = 2\n            b_count = 1\n        elif a_count == 1 and b_count == 1:\n            a_count = 2\n            b_count = 2\n    if a_count == 0 and b_count == 1:\n        a_count = 1\n        b_count = 2\n    if a_count == 1 and b_count == 0:\n        a_count = 2\n        b_count = 1\n    if a_count == 1 and b_count == 1:\n        a_count = 2\n        b_count = 2\n\n    if a_count == 1 and b_count == 2:\n        a_count = 2\n        b_count = 1\n    if a_count == 2 and b_count == 1:\n        a_count = 1\n        b_count = 2\n    if a_count == 2 and b_count == 2:\n        a_count = 1\n        b_count = 1\n\n    return f'YES\\n{a_count}\\n{b_count}'\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ber_cola = n // 2\n    bars = n - ber_cola\n    return 'YES' if ber_cola and bars else 'NO'"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    if n <= a*2 + b:\n        return \"YES\\n{} {}\".format(a, b)\n    return \"NO\""
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n   ...\n    \"\"\"\n    s = int(stdin)\n\n    return f\"{s}\"\n    \n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    print(stdin)"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n    return stdin if stdin.isdigit() else f\"{stdin[:-1]}-{stdin[-1]}\"\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 20:\n        return str(n)\n    elif 20 <= n < 100:\n        return str(n)[1:]\n    else:\n        return str(n)[0] + '-' + str(n)[2:]"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    num = int(stdin.pop(0))\n    print(str(num))"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    print(\" \".join(numerals(int(stdin))))\n    return \" \".join(numerals(int(stdin)))\n\n\ndef"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return stdin"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = stdin.split()\n    max_el = 0\n    for i in range(n):\n        if max_el >= int(arr[i]):\n            max_el = int(arr[i])\n    if max_el == 0:\n        return 0\n    else:\n        return max_el\n\n\ndef"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def contains(arr, n):\n        return all(map(lambda x: x <= n, arr))\n\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    # if n == 1:\n    #     return 0\n    for i in range(1, n):\n        if contains(arr, i):\n            return i\n    return 0\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    A = list(map(int, stdin.split()))\n    count = 0\n    while A!= sorted(A) and count < n:\n        count = count + 1\n        to_delete = []\n        for i in range(1, n):\n            if A[i - 1] > A[i]:\n                if i - 1 in to_delete:\n                    continue\n                else:\n                    to_delete.append(i - 1)\n        for i in to_delete:\n            A[i] = A[i - 1]\n        A = A[0: len(A) - count + 1]\n    if len(A) > 0:\n        return str(len(A))\n    return \"0\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    print(len(a))\n    for i in range(1, n):\n        if a[i] > a[i - 1]:\n            a = a[i:]\n            print(len(a))\n            return str(len(a))\n    return \"0\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n    return str(solution_part1(a))\n\n\ndef"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    numbers = list(map(int, stdin.split()))\n\n    for i in range(1, n):\n        if numbers[i] <= numbers[i - 1]:\n            return 0\n    return max(n - 2, n - max(numbers))\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    return str(min(a[i] - a[i - 1] for i in range(1, n) if a[i] - a[i - 1] > 0))"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    A = stdin.split()[1]\n    if n == 1:\n        return 0\n    elif n == 2:\n        if A[1] < A[0] or A[2] < A[1]:\n            return 0\n        elif A[2] == A[1]:\n            return 2\n        else:\n            return 1\n    else:\n        if A[n - 1] < A[n - 2] or A[n - 2] < A[n - 3]:\n            return 0\n        elif A[n - 1] == A[n - 2]:\n            return n - 2\n        else:\n            return n - 1\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    problems_per_day = []\n    days = 0\n    while n > 0:\n        days += 1\n        problems_per_day.append(int(stdin.strip()))\n        n -= 1\n    half_problems_solved = 0\n    for problem in problems_per_day:\n        half_problems_solved += problem // 2\n    return days if half_problems_solved >= (problem // 2) else -1\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    problems_solved: int = 0\n    day: int = 1\n    while True:\n        problems_solved += n\n        if problems_solved >= n // 2:\n            return str(day)\n        day += 1\n\n\ndef"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    problems = list(map(int, stdin.split()))\n    equator = max(problems) / 2\n    days = 1\n    if equator % 2 == 0:\n        equator = equator - 1\n    i = 0\n    while i < n:\n        if problems[i] >= equator:\n            equator = equator - 2\n        days += 1\n        i += 1\n    return str(days)"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    problems = list(map(int, stdin.strip().split()))\n    ans = -1\n    for i in range(n):\n        if (problems[i] % 2 == 0):\n            ans = max(ans, i)\n    print(ans)\n    return \"0\""
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    days = list(map(int, stdin.split(\" \")))\n    n = days[0]\n    problems = days[1:]\n    for day in range(n):\n        if (day + 1) * 2 >= len(problems):\n            return str(day + 1)\n        if (day + 1) * 2 > len(problems) // 2:\n            return str(day + 1)\n        print(day)\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    days = list(map(int, stdin.split()))\n    # we need to go back one, because we're starting on day one\n    day = days[1] - 1\n    # we can just start counting from day 2\n    for day in range(2, max(days) + 1):\n        # we need to check if we've solved half of the problems\n        if day >= sum(days[:day]) // 2:\n            return str(day)\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    stds = sorted(stdin[1])\n    \n    for i in range(1, n + 1):\n        if stds[i - 1] <= i / 2:\n            return str(i)\n            break\n    return str(i + 1)\n\nsolution(\"4\")\nsolution(\"6\")"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    p = list(map(int, stdin.split()))\n    return '{}'.format(get_equator_day(n, p))\n\ndef"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 1 3 2 1\n   ... ''')\n    '2'\n    >>> solution('''6\n   ... 2 2 2 2 2 2\n   ... ''')\n    '4'\n    \"\"\"\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    p1, p2, p3 = 0, 1, 1\n    for ai in a:\n        p2, p3 = p1 + ai, p2 + ai\n        p1 = p2 + ai\n    print(p3 // 2)\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin.split()[0])\n    p: list = list(map(int, stdin.split()[1:]))\n    h: int = int(stdin.split()[0])\n    ind: int = 0\n\n    for i in range(n):\n        if p[i] == h:\n            ind = i\n\n    return str(ind + 1)\n\n\nprint(solution(input()))\n\n\"\"\"\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    size = int(stdin[0])\n    chessboard = stdin[1:]\n    \n    size += 2\n    n = len(chessboard)\n    chessboard.append([0]*size)\n    \n    for i in range(n):\n        chessboard[i] = chessboard[i] + [0]\n    \n    num_moves = []\n    chessboard = [[0 for _ in range(size)] for _ in range(size)]\n    \n    def moves(chessboard, x, y, size, num):\n        size += 2\n        if chessboard[x][y] == 0:\n            chessboard[x][y] = num\n            num_moves.append(num)\n            for i in range(1, size):\n                for j in range(1, size):\n                    if i == 1 and j == 1:\n                        continue\n                    if chessboard[x+i][y+j] == 0:\n                        moves(chessboard, x+i, y+j, size, num)\n        else:\n            return\n    \n    for i in range(size):\n        for j in range(size):\n            if i == 1 and j == 1:\n                continue\n            if chessboard[i][j] == 0:\n                chessboard[i][j] = -1\n                num_moves.append(0)\n                moves(chessboard, i, j, size, 1)\n                num_moves[-1] += 1\n            else:\n                num_moves.append(chessboard[i][j])\n    \n    return str(min(num_moves)) + \" \" + str(max(num_moves))\n\nsolution(\"\"\"\n3\n1 9 3\n8 6 7\n4 2 5\n\n\"\"\")\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    board = [[int(x) for x in stdin.split()] for _ in range(n)]\n    knight = find_knight(board, n)\n    bishop = find_bishop(board, n)\n    rook = find_rook(board, n)\n    steps = knight + bishop + rook\n    print(min(steps))\n    print(steps.count(min(steps)))\n    return '%d %d' % (min(steps), steps.count(min(steps)))\n\ndef"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"1 2\"\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = [list(map(int, stdin.split())) for _ in range(n)]\n    best_path = float('inf')\n    best_replacement = float('inf')\n    best_path_seq = []\n    best_replacement_seq = []\n    for i in range(n):\n        for j in range(n):\n            if arr[i][j] == 1:\n                for di in range(1, n+1):\n                    for dj in range(1, n+1):\n                        if i+di < n and j+dj < n:\n                            tmp_path = 0\n                            tmp_replacement = 0\n                            tmp_path += (2 * di - 1)\n                            tmp_replacement += (2 * dj - 1)\n                            for k in range(1, n+1):\n                                if arr[i+di][j+dj] == k:\n                                    tmp_path += 2\n                                else:\n                                    tmp_replacement += 2\n                            if tmp_path < best_path:\n                                best_path = tmp_path\n                                best_path_seq = [i, j]\n                            if tmp_replacement < best_replacement:\n                                best_replacement = tmp_replacement\n                                best_replacement_seq = [i, j]\n    return str(best_path) + \" \" + str(best_replacement) + \"\\n\" + str(best_path_seq[0]) + \" \" + str(best_path_seq[1]) + \"\\n\" + str(best_replacement_seq[0]) + \" \" + str(best_replacement_seq[1])"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return '{} {}'.format(*min(map(solution, stdin.split('\\n'))))\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    n = int(stdin.pop(0))\n    stdin = stdin[0].split(\" \")\n    A = []\n    for i in range(n):\n        A.append([int(j) for j in stdin.pop(0).split(\" \")])\n    A = np.array(A)\n    A_prime = np.copy(A)\n    q = []\n    for i in range(1, n ** 2 + 1):\n        q.append([])\n    q = np.array(q)\n    directions = [[0, -1], [-1, 0], [1, 0], [0, 1]]\n    movement = 0\n    while movement < n ** 2:\n        for i in range(n):\n            for j in range(n):\n                if A[i][j]!= 0:\n                    for d in directions:\n                        # print(A)\n                        # print(i, j, d[0], d[1])\n                        # print(A_prime)\n                        # print()\n                        if A_prime[(i + d[0]) % n][(j + d[1]) % n] == 0:\n                            A_prime[i][j] = 0\n                            A_prime[(i + d[0]) % n][(j + d[1]) % n] = A[i][j]\n                            q[movement + 1].append([i, j, movement, d[0], d[1], A[i][j]])\n                            # print(q)\n                            # print(A_prime)\n                            # print()\n                            movement += 1\n                        if movement == n ** 2:\n                            print(q)\n        A = np.copy(A_prime)\n    return str(q[0][0][4]) + \" \" + str(q[0][0][3])\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Solution.\n    '''\n    N = int(stdin)\n    board = [[0] * N for _ in range(N)]\n    for i, a in enumerate(stdin.split()):\n        board[i // N][i % N] = int(a)\n    return (\n        \"{} {}\".format(\n            min_steps_to_solve(board),\n            min_replacements(board)\n        ),\n    )\n\n\ndef"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    steps, count = 0, 0\n    n = int(stdin)\n    delta = [(1, 2), (1, -2), (-1, 2), (-1, -2), (2, 1), (-2, 1), (2, -1), (-2, -1)]\n    for i in range(n):\n        for j in range(n):\n            if stdin[i*n+j] == \"1\":\n                for d in delta:\n                    x, y = i + d[0], j + d[1]\n                    if x >= 0 and x < n and y >= 0 and y < n:\n                        if stdin[x*n+y]!= \"1\":\n                            count += 1\n                            break\n                else:\n                    count += 1\n            else:\n                count = 0\n                break\n        if count == n*n:\n            return str(steps) + \" \" + str(count)\n        steps += 1\n        count = 0\n    return \"impossible\""
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    chess = [[int(x) for x in stdin.strip().split()] for _ in range(N)]\n    res = []\n    visited = set()\n    steps = 0\n    def dfs(i, j):\n        nonlocal steps\n        steps += 1\n        visited.add((i, j))\n        for dx, dy in [(1, 0), (1, -1), (0, -1), (-1, -1), (-1, 0), (-1, 1), (0, 1), (1, 1)]:\n            newi = i + dx\n            newj = j + dy\n            if (newi, newj) not in visited and 0 <= newi < N and 0 <= newj < N and chess[newi][newj] > 0:\n                dfs(newi, newj)\n    dfs(0, 0)\n    if steps > 0:\n        res = steps, steps - 1\n    return''.join([str(x) for x in res])\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    moves = [1, 8, 1, 1, 9, 1, 1, 1, 8, 1, 1, 1, 9, 1, 1, 1, 8, 1, 1, 1, 9, 1, 1, 1, 8, 1, 1, 1, 9, 1, 1, 1, 8, 1, 1, 1, 9]\n    paths = []\n    for i in range(N):\n        for j in range(N):\n            paths.append((j, i, moves[i * N + j]))\n    paths.sort(key=lambda t: t[2])\n    return''.join(str(x) for x, _, _ in paths)\n"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"yes\" if is_possible_to_remove(stdin) else \"no\"\n\ndef"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    num = 0\n    while s:\n        num = num * 2 + int(s[-1])\n        s = s[:-1]\n    if num%64 == 0:\n        return 'yes'\n    return 'no'\n"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    number = ''\n    for digit in stdin:\n        if digit == '1':\n            number += '0'\n        elif digit == '0':\n            number += '1'\n    number = int(number,2)\n    return 'yes' if number % 64 == 0 else 'no'"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"yes\" if is_power_of_two(int(stdin, 2)) else \"no\"\n\n\ndef"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.replace(' ', '')\n    if len(stdin) > 100:\n        return 'no'\n    return 'yes'"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    s = stdin\n    count = 0\n    #print(s)\n    for i in range(len(s)):\n        if s[i]==\"1\":\n            count+=1\n        else:\n            continue\n    #print(count)\n    if count%2==0 and count!=1:\n        return \"no\"\n    elif count%2!=0:\n        count = count+1\n        #print(count)\n    s1 = s[count:]\n    #print(s1)\n    count = 0\n    #print(count)\n    for i in range(len(s1)):\n        if s1[i]==\"1\":\n            count+=1\n        else:\n            continue\n    #print(count)\n    if count%2==0 and count!=1:\n        return \"no\"\n    elif count%2!=0:\n        count = count+1\n        #print(count)\n    s2 = s1[count:]\n    #print(s2)\n    count = 0\n    #print(count)\n    for i in range(len(s2)):\n        if s2[i]==\"1\":\n            count+=1\n        else:\n            continue\n    #print(count)\n    if count%2==0 and count!=1:\n        return \"no\"\n    elif count%2!=0:\n        count = count+1\n        #print(count)\n    s3 = s2[count:]\n    #print(s3)\n    count = 0\n    #print(count)\n    for i in range(len(s3)):\n        if s3[i]==\"1\":\n            count+=1\n        else:\n            continue\n    #print(count)\n    if count%2==0 and count!=1:\n        return \"no\"\n    elif count%2!=0:\n        count = count+1\n        #print(count)\n    s4 = s3[count:]\n    #print(s4)\n    count = 0\n    #print(count)\n    for i in range(len(s4)):\n        if s4[i]==\"1\":\n            count+=1\n        else:\n            continue\n    #print(count)\n    if count%2==0 and count!=1:\n        return \"no\"\n    elif count%2!=0:\n        count = count+1\n        #print(count)\n    s5 = s4[count:]\n    #print(s5)\n    count = 0\n    #print(count)\n    for i in range(len(s5)):\n        if s5[i]==\"1\":\n            count+=1\n        else:\n            continue\n    #print(count)\n    if count%2==0 and count!=1:\n        return \"no\"\n    elif count%2!=0:\n        count = count+1\n        #print(count)\n    s6 = s5[count:]\n    #print(s6)\n    count = 0\n    #print(count)\n    for i in range(len(s6)):\n        if s6[i]==\"1\":\n            count+=1\n        else:\n            continue\n    #print(count)\n    if count%2==0 and count!=1:\n        return \"no\"\n    elif count%2!=0:\n        count = count+1\n        #print(count)\n    s7 = s6[count:]\n    #print(s7)\n    count = 0\n    #print(count)\n    for i in range(len(s7)):\n        if s7[i]==\"1\":\n            count+=1\n        else:\n            continue\n    #print(count)\n    if count%2==0 and count!=1:\n        return \"no\"\n    elif count%2!=0:\n        count = count+1\n        #print(count)\n    s8 = s7[count:]\n    #print(s8)\n    count = 0\n    #print(count)\n    for i in range(len(s8)):\n        if s8[i]==\"1\":\n            count+=1\n        else:\n            continue\n    #print(count)\n    if count%2==0 and count!=1:\n        return \"no\"\n    elif count%2!=0:\n        count = count+1\n        #print(count)\n    s9 = s8[count:]\n    #print(s9)\n    count = 0\n    #print(count)\n    for i in range(len(s9)):\n        if s9[i]==\"1\":\n            count+=1\n        else:\n            continue\n    #print(count)\n    if count%2==0 and count!=1:\n        return \"no\"\n    elif count%2!=0:\n        count = count+1\n        #print(count)\n    s10 = s9[count:]\n    #print(s10)\n    count = 0\n    #print(count)\n    for i in range(len(s10)):\n        if s10[i]==\"1\":\n            count+=1\n        else:\n            continue\n    #print(count)\n    if count%2==0 and count!=1:\n        return \"no\"\n    elif count%2!=0:\n        count = count+1\n        #print(count)\n    s11 = s10[count:]\n    #print(s11)\n    count = 0\n    #print(count)\n    for i in range(len(s11)):\n        if s11[i]==\"1\":\n            count+=1\n        else:\n            continue\n    #print(count)\n    if count%2==0 and count!=1:\n        return \"no\"\n    elif count%2!=0:\n        count = count+1\n        #print(count)\n    s12 = s11[count:]\n    #print(s12)\n    count = 0\n    #print(count)\n    for i in range(len(s12)):\n        if s12[i]==\"1\":\n            count+=1\n        else:\n            continue\n    #print(count)\n    if count%2==0 and count!=1:\n        return \"no\"\n    elif count%2!=0:\n        count = count+1\n        #print(count)\n    s13 = s12[count:]\n    #print(s13)\n    count = 0\n    #print(count)\n    for i in range(len(s13)):\n        if s13[i]==\"1\":\n            count+=1\n        else:\n            continue\n    #print(count)\n    if count%2==0 and count!=1:\n        return \"no\"\n    elif count%2!=0:\n        count = count+1\n        #print(count)\n    s14 = s13[count:]\n    #print(s14)\n    count = 0\n    #print(count)\n    for i in range(len(s14)):\n        if s14[i]==\"1\":\n            count+=1\n        else:\n            continue\n    #print(count)\n    if count%2==0 and count!=1:\n        return \"no\"\n    elif count%2!=0:\n        count = count+1\n        #print(count)\n    s15 = s14[count:]\n    #print(s15)\n    count = 0\n    #print(count)\n    for i in range(len(s"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nstdin = input()"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    from collections import Counter\n    # stdin = \"1001010011\"\n    print(Counter(stdin))\n    if stdin[0] == '1':\n        return 'no'\n    temp = stdin\n    temp = temp.replace('0', '')\n    temp = temp.replace('1', '')\n    if len(temp)!= 0 and Counter(temp)['0'] % 64!= 0:\n        return 'no'\n    for i in range(1, len(stdin)):\n        if stdin[i] == '0' and stdin[i-1] == '1':\n            continue\n        elif stdin[i] == '1':\n            temp += '0'\n        else:\n            temp += '1'\n        if len(temp)!= 0 and Counter(temp)['0'] % 64!= 0:\n            return 'no'\n    return 'yes'\n"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 107,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    string_1 = stdin\n    for i in range(len(string_1)):\n        if string_1[i] == '0' or string_1[i] == '1':\n            continue\n        else:\n            return \"no\"\n    for i in range(len(string_1)):\n        if string_1[i] == '1' and string_1[i-1] == '0' and string_1[i-2] == '1':\n            string_1 = string_1[:i-1] + string_1[i+1:]\n            break\n    if not string_1[0] == '1' and not string_1[1] == '1' and string_1[2] == '1':\n        return \"no\"\n    for i in range(len(string_1)):\n        if string_1[i] == '1' and string_1[i+1] == '0':\n            string_1 = string_1[:i] + string_1[i+2:]\n            break\n    if not string_1[0] == '1' and string_1[1] == '0' and string_1[2] == '1':\n        return \"no\"\n    if not string_1[0] == '1' and string_1[1] == '1' and string_1[2] == '0':\n        return \"no\"\n    for i in range(len(string_1)):\n        if string_1[i] == '1' and string_1[i+1] == '0':\n            string_1 = string_1[:i] + string_1[i+2:]\n            break\n    for i in range(len(string_1)):\n        if string_1[i] == '1' and string_1[i-1] == '0':\n            string_1 = string_1[:i] + string_1[i+1:]\n            break\n    if not string_1[0] == '1' and string_1[1] == '0' and string_1[2] == '1':\n        return \"no\"\n    if not string_1[0] == '1' and string_1[1] == '1' and string_1[2] == '0':\n        return \"no\"\n    if not string_1[0] == '1' and string_1[1] == '1' and string_1[2] == '1':\n        return \"no\"\n    return \"yes\""
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.count('a')\n    if n % 26 == 0:\n        return '-'\n    return stdin[n // 26 - 1]\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    a = sorted(s.replace('a','b').replace('e','c').replace('i','d').replace('o','f').replace('u','g').replace('y','h'))\n    if ''.join(a) == s:\n        return ''.join(a)\n    return '-1'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    answer = stdin\n    return answer"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin\n    a = sorted(a)\n    return ''.join(a)\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    result = \"\"\n    while len(s) > 0:\n        x = s.pop(0)\n        if x >= \"a\":\n            x = chr(ord(x) - 1)\n        result = result + x\n    return result\n\nprint(solution(input()))"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.replace('z', '')\n    a = sorted(a)\n    if ''.join(a) == stdin:\n        print(f\"{''.join(a)}\")\n    else:\n        print(-1)\n    return ''\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.strip().replace('z', 'a')\n    res = list(data)\n\n    for i in range(len(data)):\n        for j in range(i+1, len(data)+1):\n            res[i:j] = sorted(res[i:j])\n            print(''.join(res))\n            print(len(res))\n            if res == sorted(res):\n                return ''.join(res)\n    return -1\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    assert len(stdin) >= 1\n    result = \"\"\n    for i in range(len(stdin)):\n        if stdin[i] >= 'a' and stdin[i] <= 'z':\n            result += stdin[i]\n    return result\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, R, K = (int(x) for x in stdin.split())\n    grid = [[0] * (M + 1) for _ in range(N + 1)]\n    for _ in range(K):\n        x, y = (int(x) for x in stdin.split())\n        grid[x][y] = 1\n        grid[x + R][y + R] = 1\n    # for row in grid:\n    #     print(row)\n    # print()\n    max_fish = 0\n    for x in range(N - R + 1):\n        for y in range(M - R + 1):\n            found = False\n            num_fishes = 0\n            for x_check in range(x, x + R):\n                for y_check in range(y, y + R):\n                    if grid[x_check][y_check] == 1:\n                        found = True\n                        num_fishes += 1\n            if not found:\n                max_fish = max(max_fish, num_fishes)\n    return str(max_fish)\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def cell(x, y, r, n, m):\n        return min(max(x + r - 1, 0), n) * min(max(y + r - 1, 0), m)\n\n    n, m, r, k = map(int, stdin.split())\n    x, y = n, m\n    while x * y > 0:\n        x, y = x - r, y - r\n    p = x * y\n    max_c = 0\n    for i in range(1, k + 1):\n        max_c += cell(n - r + 1, m - r + 1, r, n, m)\n        max_c += cell(n - r + 1, m - r + 1, r, n, m)\n        max_c += cell(n - r + 1, m - r + 1, r, n, m)\n        max_c += cell(n - r + 1, m - r + 1, r, n, m)\n        max_c += cell(n - r + 1, m - r + 1, r, n, m)\n    return '%.9f' % (max_c / (p * (p - 1) / 2))"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, r, k = map(int, stdin.split())\n    pond = (n, m)\n    scoop = (r, r)\n    possible = range(1, pond[0] * pond[1])\n    d = dict(zip(possible, [0] * len(possible)))\n    for i in possible:\n        x, y = i % pond[0], i // pond[0]\n        for j in range(min(x, pond[1] - x - 1), max(x + r - 1, pond[1])):\n            for k in range(min(y, pond[0] - y - 1), max(y + r - 1, pond[0])):\n                d[i] += 1\n    return str(d[k])"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, r, k = map(int, stdin.split())\n    if r > max(n, m):\n        return -1\n    x_m = max(n, m)\n    y_m = x_m - max(n, m) + 1\n    x_n = max(n, m) - max(n, m) + 1\n    y_n = x_n - max(n, m) + 1\n    ans = x_n * y_n - k - x_m * y_m\n    return str(ans)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n, m, r, k = map(int, stdin[0].split())\n    return str(int(((n - r + 1) * (m - r + 1)) / max(1, (r * r))))\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, r, k = list(map(int, stdin.split()))\n    return '{:.9f}'.format(math.factorial(n) / (math.factorial(n - r) * math.factorial(r)) / math.factorial(m - r) / math.factorial(r))"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, r, k = (int(x) for x in stdin.split())\n    return \"{:.9f}\".format(max(1, int(r*m/n*k)))"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  n, m, r, k = (int(x) for x in stdin.split())\n  return '{:.9f}'.format(max([(n-r+1) * (m-r+1), k * r * r]))"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    a, b = int(a), int(b)\n    if a >= 1 and a <= b:\n        if b >= 1 and b <= a:\n            if a >= 1 and b >= 1:\n                if a + b > 1 and a + b > min(a, b):\n                    if a + b >= max(a, b):\n                        if a + b >= 2 and a + b > 1:\n                            print(round(a/b, 10))\n                            return 0\n                        else:\n                            print(a/b)\n                            return 0\n                    else:\n                        print(a + b - 1)\n                        return 0\n                else:\n                    print(0)\n                    return 0\n            else:\n                print(0)\n                return 0\n        else:\n            print(0)\n            return 0\n    else:\n        print(0)\n        return 0\n"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    result = []\n    result.append(max(-a[i] - 1 for i in range(n)))\n    result.append(max(a))\n    return '\\n'.join(map(str, result))"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    arr.sort()\n    def max_multiple(arr):\n        n = 1\n        result = arr[0]\n        while n < len(arr):\n            result = max(result, arr[n] * n)\n            n += 1\n        return result\n    return str(max_multiple(arr))"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    nums = [int(n) for n in stdin.split()]\n    max_prod = 1\n    res = 0\n    for i, num in enumerate(nums):\n        if num < 0:\n            nums[i] = -num\n            for j in range(1, i):\n                nums[j] = -nums[j]\n            for j in range(i + 1, N):\n                nums[j] = -nums[j]\n            max_prod *= num\n            if max_prod > res:\n                res = max_prod\n        else:\n            nums[i] = num\n            for j in range(i + 1, N):\n                nums[j] = nums[j] - 1\n            max_prod *= num\n            if max_prod > res:\n                res = max_prod\n    return str(res)\n\n\nprint(solution(input()))"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    res = a[:]\n    for i in range(n):\n        if a[i] == 0:\n            continue\n        for j in range(i):\n            res[i] = max(res[i], a[i] * a[j] + res[j])\n    return''.join(map(str, res))"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    a = stdin.split()\n    n = int(a[0])\n    a = list(map(int, a[1:]))\n\n    max_product = -1\n    max_product_idx = 0\n    for i in range(n):\n        temp = a[i]\n        a[i] = -a[i] - 1\n        p = product(a)\n        a[i] = temp\n        if p > max_product:\n            max_product = p\n            max_product_idx = i\n    print(max_product_idx, max_product)\n    return max_product_idx, max_product\n"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    max_prod = -1\n    count = -1\n    for i in range(len(a)):\n        if a[i] == 0:\n            continue\n        count += 1\n        if count == 1:\n            prod_a = a[i]\n        elif count == 2:\n            prod_a = prod_a * a[i]\n        elif count > 2:\n            prod_a *= a[i]\n        if prod_a > max_prod:\n            max_prod = prod_a\n    return max_prod"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a = [-i for i in a]\n    \n    for i in range(1,n):\n        a[i] = a[i] + a[i-1]\n    \n    max_prod = max(a)\n    for i in range(n):\n        a[i] = max_prod - a[i]\n    \n    return''.join(map(str, a))"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    \n    arr = a[:]\n    arr.sort()\n    \n    i = 0\n    max = -1\n    while i < n:\n        num = arr[i]\n        arr[i] = -arr[i] -1\n        i += 1\n        max = max if max > (num * num * num) else num * num * num\n    print(max)\n    return max"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    for i in range(n):\n        for j in range(i+1, n):\n            a[i] *= a[j]\n            for k in range(j+1, n):\n                a[i] -= a[k]\n    return''.join(map(str, a))"
    },
    {
        "number": 110,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    array = list(map(int, stdin.split()))\n    array.sort(reverse=True)\n    max_prod = -1\n    start = 0\n    end = 0\n    i = 0\n    while i < n:\n        while end < n:\n            if array[end] == array[end - 1] - 1:\n                end += 1\n            else:\n                break\n        if end - start > max_prod:\n            max_prod = end - start\n        start = end + 1\n        end = start\n        i += 1\n    print(max_prod)\n\n\nsolution(input())\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    \n    for i in range(1,n+1):\n        if k==1:\n            return -1\n        if n%i==0:\n            k-=1\n            if k==1:\n                return i\n\n\nstdin = \"\"\nstdout = []\nfor _ in range(int(input())):\n    stdin += input()\n    stdout.append(solution(stdin))\n\nfor i in range(len(stdout)):\n    print(stdout[i])"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n % 2!= 0 or k <= 1:\n        return -1\n    # return -1 if k > n\n    if k == n:\n        return -1\n    if n == 2:\n        return 1\n    divisors = []\n    for i in range(1, n):\n        if n % i == 0:\n            divisors.append(i)\n    divisors = sorted(divisors)\n    if divisors[k - 2] < n:\n        return -1\n    else:\n        return divisors[k - 2]\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    divisors = []\n    for i in range(1, N + 1):\n        divisors.append(i)\n    divisors = sorted(divisors)\n    for i in range(len(divisors)):\n        if divisors[i] >= N:\n            break\n        else:\n            if divisors[i] == divisors[i + 1]:\n                continue\n            else:\n                for j in range(i + 1, len(divisors)):\n                    if divisors[j] % divisors[i] == 0:\n                        if divisors[j] == divisors[j + 1]:\n                            continue\n                        else:\n                            break\n                    else:\n                        continue\n                else:\n                    return divisors[i]\n    else:\n        return -1"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    if k < 2:\n        return -1\n\n    # If the number is prime, we can just return its first divisor\n    if isPrime(n):\n        return n\n\n    # If the number is divisible by any other, we know that it has k divisors\n    # to the first one, which is the first divisor\n    if n % 2 == 0:\n        return 2\n\n    # If the number is divisible by any other, we know that it has k divisors\n    # to the second one, which is the next divisor\n    if n % 3 == 0:\n        return 3\n\n    # If the number is divisible by any other, we know that it has k divisors\n    # to the third one, which is the next divisor\n    if n % 5 == 0:\n        return 5\n\n    # If the number is divisible by any other, we know that it has k divisors\n    # to the fourth one, which is the next divisor\n    if n % 7 == 0:\n        return 7\n\n    # If we reach this point, we can't find the k-th divisor, so we return -1\n    return -1\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Using this code, you can test this file directly\n    python3 -m doctest -v./src/main.py\n    \n    >>> solution(\"1 1\")\n    1\n    >>> solution(\"10 5\")\n    -1\n    >>> solution(\"12 5\")\n    6\n    \"\"\"\n    n, k = (int(x) for x in stdin.split())\n    if n < k:\n        return -1\n    divisors = []\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            divisors.append(n // i)\n    divisors.sort()\n    if divisors[k - 1]!= n:\n        return -1\n    return divisors[k - 1]\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    for i in range(1, n):\n        if n % i == 0:\n            if n // i >= k:\n                return str(i)\n    return str(-1)\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    small = 1\n    big = n\n    while small < big:\n        mid = (small + big) // 2\n        if check(mid, n, k):\n            small = mid + 1\n        else:\n            big = mid\n    return str(small)\n\n\ndef"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    x, y = map(int, input().split())\n    if y >= 3:\n        return -1\n    return y\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def quick_sort(lst, l, r):\n        if l < r:\n            p = partition(lst, l, r)\n            quick_sort(lst, l, p - 1)\n            quick_sort(lst, p + 1, r)\n\n    def partition(lst, l, r):\n        pivot = lst[r]\n        i = l - 1\n        for j in range(l, r):\n            if lst[j] < pivot:\n                i += 1\n                lst[i], lst[j] = lst[j], lst[i]\n        lst[i + 1], lst[r] = lst[r], lst[i + 1]\n        return i + 1\n\n    n, k = map(int, stdin.split())\n    # Find divisors\n    divisors = []\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            if i * i!= n:\n                divisors.append(n // i)\n    divisors.sort()\n    # Sort divisors\n    quick_sort(divisors, 0, len(divisors) - 1)\n    # Return k\n    return divisors[k - 1] if len(divisors) >= k else -1\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    # \u9ad8\u901f\u5316\u7528\n    for divisor in range(2, n + 1):\n        if n % divisor == 0:\n            # print(divisor)\n            return -1\n    return divisor\n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return str(max([int(x) for line in stdin.strip().split(\"\\n\") for x in line]))\n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    for line in stdin:\n        for x in range(1, int(line) + 1):\n            line = line.split()\n            if int(line[0]) % x!= 0:\n                return str(x)\n    return \"0\""
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n = int(stdin.pop(0))\n    cubes = []\n    for i in range(n):\n        cubes.append([int(j) for j in stdin.pop(0).split()])\n    # cubes = [list(map(int, stdin.pop(0).split())) for _ in range(n)]\n\n    def rotate(cube):\n        return cube[1:] + [cube[0]]\n\n    def check(cube):\n        for i in range(len(cube)):\n            if cube[i] == 9:\n                return False\n        return True\n\n    def extend(cube):\n        cube = rotate(cube)\n        cube = rotate(cube)\n        cube = rotate(cube)\n        return cube\n\n    def put(cube, n):\n        cube[-1] = n\n        cube = extend(cube)\n        cube = extend(cube)\n        cube = extend(cube)\n        return cube\n\n    max_n = 0\n    max_x = 0\n    for i in range(1, 10):\n        cube = put(cubes, i)\n        cube = rotate(cube)\n        if check(cube):\n            max_n = max(max_n, i)\n            max_x = max(max_x, i * 10 + cube[0])\n    print(max_x)\n    return max_x\n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    cubes = [[int(x) for x in stdin.split()] for _ in range(n)]\n\n    result = 0\n    for i in range(1, 100):\n        current = set()\n        cubes_on_row = []\n        for j in range(n):\n            for k in range(3):\n                current.add(cubes[j][k])\n            cubes_on_row.append(current)\n            current = set()\n        if not result or len(cubes_on_row) >= len(result):\n            result = cubes_on_row\n\n    for i in range(1, 100):\n        current = set()\n        cubes_on_row = []\n        for j in range(n):\n            for k in range(3):\n                current.add(cubes[j][k])\n            cubes_on_row.append(current)\n            current = set()\n        if not result or len(cubes_on_row) >= len(result):\n            result = cubes_on_row\n\n    for i in range(1, 100):\n        current = set()\n        cubes_on_row = []\n        for j in range(n):\n            for k in range(3):\n                current.add(cubes[j][k])\n            cubes_on_row.append(current)\n            current = set()\n        if not result or len(cubes_on_row) >= len(result):\n            result = cubes_on_row\n\n    return str(max(result)) if result else \"0\"\n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    cubes = list(map(int, stdin.split()))\n\n    cubes.sort(reverse=True)\n    cubes.sort(reverse=True)\n\n    max_num = cubes[0]\n\n    for i in range(len(cubes) - 1):\n        new_num = cubes[i]\n        for j in range(i + 1, len(cubes)):\n            new_num += cubes[j]\n            if new_num > max_num:\n                max_num = new_num\n                break\n            if new_num > 9:\n                break\n            if new_num == 9:\n                return str(new_num)\n\n    return str(max_num)\n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    cubes = []\n    for i in range(n):\n        cubes.append(list(map(int, stdin.split('\\n')[i].split(' '))))\n    possible_nums = []\n    for i in range(n):\n        possible_nums.append(0)\n\n    for i in range(2, n+1):\n        cube = cubes.copy()\n        cube[0] = cube[0][-1:] + cube[0][:-1]\n        cube[1] = cube[1][-1:] + cube[1][:-1]\n        cube[2] = cube[2][-1:] + cube[2][:-1]\n        for j in range(3, n+1):\n            cube[j] = cube[j][-1:] + cube[j][:-1]\n        for j in range(2, n+1):\n            if i == j:\n                continue\n            cube[j] = cube[j][-1:] + cube[j][:-1]\n        for j in range(3, n+1):\n            if i == j:\n                continue\n            cube[j] = cube[j][-1:] + cube[j][:-1]\n        for j in range(2, n+1):\n            if i == j:\n                continue\n            cube[j] = cube[j][-1:] + cube[j][:-1]\n        possible_nums.append(max(possible_nums) + 1)\n        for j in range(3, n+1):\n            if i == j:\n                continue\n            cube[j] = cube[j][-1:] + cube[j][:-1]\n        for j in range(2, n+1):\n            if i == j:\n                continue\n            cube[j] = cube[j][-1:] + cube[j][:-1]\n        for j in range(3, n+1):\n            if i == j:\n                continue\n            cube[j] = cube[j][-1:] + cube[j][:-1]\n        for j in range(2, n+1):\n            if i == j:\n                continue\n            cube[j] = cube[j][-1:] + cube[j][:-1]\n        for j in range(3, n+1):\n            if i == j:\n                continue\n            cube[j] = cube[j][-1:] + cube[j][:-1]\n        for j in range(2, n+1):\n            if i == j:\n                continue\n            cube[j] = cube[j][-1:] + cube[j][:-1]\n        for j in range(2, n+1):\n            if i == j:\n                continue\n            cube[j] = cube[j][-1:] + cube[j][:-1]\n        for j in range(3, n+1):\n            if i == j:\n                continue\n            cube[j] = cube[j][-1:] + cube[j][:-1]\n        for j in range(2, n+1):\n            if i == j:\n                continue\n            cube[j] = cube[j][-1:] + cube[j][:-1]\n        for j in range(3, n+1):\n            if i == j:\n                continue\n            cube[j] = cube[j][-1:] + cube[j][:-1]\n        for j in range(2, n+1):\n            if i == j:\n                continue\n            cube[j] = cube[j][-1:] + cube[j][:-1]\n        for j in range(3, n+1):\n            if i == j:\n                continue\n            cube[j] = cube[j][-1:] + cube[j][:-1]\n        for j in range(2, n+1):\n            if i == j:\n                continue\n            cube[j] = cube[j][-1:] + cube[j][:-1]\n        for j in range(3, n+1):\n            if i == j:\n                continue\n            cube[j] = cube[j][-1:] + cube[j][:-1]\n        for j in range(2, n+1):\n            if i == j:\n                continue\n            cube[j] = cube[j][-1:] + cube[j][:-1]\n        for j in range(2, n+1):\n            if i == j:\n                continue\n            cube[j] = cube[j][-1:] + cube[j][:-1]\n        for j in range(3, n+1):\n            if i == j:\n                continue\n            cube[j] = cube[j][-1:] + cube[j][:-1]\n        for j in range(2, n+1):\n            if i == j:\n                continue\n            cube[j] = cube[j][-1:] + cube[j][:-1]\n        for j in range(3, n+1):\n            if i == j:\n                continue\n            cube[j] = cube[j][-1:] + cube[j][:-1]\n        for j in range(2, n+1):\n            if i == j:\n                continue\n            cube[j] = cube[j][-1:] + cube[j][:-1]\n        for j in range(3, n+1):\n            if i == j:\n                continue\n            cube[j] = cube[j][-1:] + cube[j][:-1]\n        for j in range(2, n+1):\n            if i == j:\n                continue\n            cube[j] = cube[j][-1:] + cube[j][:-1]\n        for j in range(3, n+1):\n            if i == j:\n                continue\n            cube[j] = cube[j][-1:] + cube[j][:-1]\n        for j in range(2, n+1):\n            if i == j:\n                continue\n            cube[j] = cube[j][-1:] + cube[j][:-1]\n        for j in range(3, n+1):\n            if i == j:\n                continue\n            cube[j] = cube[j][-1:] + cube[j][:-1]\n        for j in range(2, n+1):\n            if i == j:\n                continue\n            cube[j] = cube[j][-1:] + cube[j][:-1]\n        for j in range(3, n+1):\n            if i == j:\n                continue\n            cube[j] = cube[j][-1:] + cube[j][:-1]\n        for j in range(2, n+1):\n            if i == j:\n                continue\n            cube[j] = cube[j][-1:] + cube[j][:-1]\n        for j in range(3, n+1):\n            if i == j:\n                continue\n            cube[j] = cube[j][-1:] + cube[j][:-1"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    cube = {i: [] for i in range(1, 10)}\n    for i in stdin.split():\n        cube[int(i[0])] += list(map(int, i[1:]))\n    d = defaultdict(int)\n    for i, v in cube.items():\n        for v2 in v:\n            d[v2] = d[v2] + 1\n    res = 0\n    for i, v in d.items():\n        if i not in [6, 9]:\n            if v == 1:\n                res = i\n                break\n    return res\n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    cube_nums = list(map(int, stdin.split()[1:]))\n\n    # list of all cubes and their faces\n    cubes = []\n    for i, num in enumerate(cube_nums):\n        cubes.append((num, i))\n\n    # sort all cubes by number\n    cubes.sort(key=lambda x: x[0])\n\n    # rotate cubes\n    rotated_cubes = []\n    for i in range(3):\n        # rotate cube\n        cube = cubes.pop(0)\n        rotated_cubes.append((cube[0], cube[1]))\n        # put the rotated cube in the same place\n        cubes.append((cube[0], cube[1]))\n\n    x = 0\n    # compare cubes and rotated cubes\n    for i in range(3):\n        cube_x, cube_y = cubes[i]\n        rotated_cube_x, rotated_cube_y = rotated_cubes[i]\n        if cube_x > rotated_cube_x:\n            x += cube_x\n    return str(x)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    cubes = stdin.split()\n    n = len(cubes)\n    s = 0\n    if n == 0: return '0'\n    if n == 1: return str(int(cubes[0]) ** 2)\n    if n == 2:\n        for i in cubes:\n            if len(i)!= len(str(i)): return 0\n        return str(int(cubes[0]) ** 2) + str(int(cubes[1]) ** 2)\n    if n == 3:\n        if int(cubes[1]) > int(cubes[2]):\n            return 0\n        else:\n            for i in range(len(cubes[0])):\n                if int(cubes[0][i]) > int(cubes[1][i]):\n                    return 0\n                if int(cubes[0][i]) > int(cubes[2][i]):\n                    return 0\n                if int(cubes[1][i]) > int(cubes[2][i]):\n                    return 0\n            return str(int(cubes[0]) ** 2) + str(int(cubes[1]) ** 2) + str(int(cubes[2]) ** 2)\n    if n == 4:\n        for i in range(len(cubes[0])):\n            if int(cubes[0][i]) > int(cubes[1][i]):\n                return 0\n            if int(cubes[0][i]) > int(cubes[2][i]):\n                return 0\n            if int(cubes[0][i]) > int(cubes[3][i]):\n                return 0\n        return str(int(cubes[0]) ** 2) + str(int(cubes[1]) ** 2) + str(int(cubes[2]) ** 2) + str(int(cubes[3]) ** 2)\n    if n == 5:\n        for i in range(len(cubes[0])):\n            if int(cubes[0][i]) > int(cubes[1][i]):\n                return 0\n            if int(cubes[0][i]) > int(cubes[2][i]):\n                return 0\n            if int(cubes[0][i]) > int(cubes[3][i]):\n                return 0\n            if int(cubes[0][i]) > int(cubes[4][i]):\n                return 0\n        return str(int(cubes[0]) ** 2) + str(int(cubes[1]) ** 2) + str(int(cubes[2]) ** 2) + str(int(cubes[3]) ** 2) + str(int(cubes[4]) ** 2)\n    if n == 6:\n        for i in range(len(cubes[0])):\n            if int(cubes[0][i]) > int(cubes[1][i]):\n                return 0\n            if int(cubes[0][i]) > int(cubes[2][i]):\n                return 0\n            if int(cubes[0][i]) > int(cubes[3][i]):\n                return 0\n            if int(cubes[0][i]) > int(cubes[4][i]):\n                return 0\n            if int(cubes[0][i]) > int(cubes[5][i]):\n                return 0\n        return str(int(cubes[0]) ** 2) + str(int(cubes[1]) ** 2) + str(int(cubes[2]) ** 2) + str(int(cubes[3]) ** 2) + str(int(cubes[4]) ** 2) + str(int(cubes[5]) ** 2)\n    if n == 7:\n        for i in range(len(cubes[0])):\n            if int(cubes[0][i]) > int(cubes[1][i]):\n                return 0\n            if int(cubes[0][i]) > int(cubes[2][i]):\n                return 0\n            if int(cubes[0][i]) > int(cubes[3][i]):\n                return 0\n            if int(cubes[0][i]) > int(cubes[4][i]):\n                return 0\n            if int(cubes[0][i]) > int(cubes[5][i]):\n                return 0\n            if int(cubes[0][i]) > int(cubes[6][i]):\n                return 0\n        return str(int(cubes[0]) ** 2) + str(int(cubes[1]) ** 2) + str(int(cubes[2]) ** 2) + str(int(cubes[3]) ** 2) + str(int(cubes[4]) ** 2) + str(int(cubes[5]) ** 2) + str(int(cubes[6]) ** 2)\n    if n == 8:\n        for i in range(len(cubes[0])):\n            if int(cubes[0][i]) > int(cubes[1][i]):\n                return 0\n            if int(cubes[0][i]) > int(cubes[2][i]):\n                return 0\n            if int(cubes[0][i]) > int(cubes[3][i]):\n                return 0\n            if int(cubes[0][i]) > int(cubes[4][i]):\n                return 0\n            if int(cubes[0][i]) > int(cubes[5][i]):\n                return 0\n            if int(cubes[0][i]) > int(cubes[6][i]):\n                return 0\n            if int(cubes[0][i]) > int(cubes[7][i]):\n                return 0\n        return str(int(cubes[0]) ** 2) + str(int(cubes[1]) ** 2) + str(int(cubes[2]) ** 2) + str(int(cubes[3]) ** 2) + str(int(cubes[4]) ** 2) + str(int(cubes[5]) ** 2) + str(int(cubes[6]) ** 2) + str(int(cubes[7]) ** 2)\n    if n == 9:\n        for i in range(len(cubes[0])):\n            if int(cubes[0][i]) > int(cubes[1][i]):\n                return 0\n            if int(cubes[0][i]) > int(cubes[2][i]):\n                return 0\n            if int(cubes[0][i]) > int(cubes[3][i]):\n                return 0\n            if int(cubes[0][i]) > int(cubes[4][i]):\n                return 0\n            if int(cubes[0][i]) > int(cubes[5][i]):\n                return 0\n            if int(cubes[0][i]) > int(cubes[6][i]):\n                return 0\n            if int(cubes[0]["
    },
    {
        "number": 112,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    max_x = 0\n    max_x_numbers = []\n\n    for line in stdin.splitlines():\n        if len(line) > 1:\n            numbers = [int(number) for number in line.split()]\n            num = numbers[0]\n\n            if num == 0:\n                continue\n\n            if num > max_x:\n                max_x = num\n                max_x_numbers = numbers\n\n    if max_x_numbers == []:\n        return '0'\n\n    return str(max_x) +'' + str(max_x_numbers).replace('[', '').replace(']', '').replace('\\'', '').replace(', ', '')\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    divisible = False\n    if n == 0:\n        return '0'\n    while n > 0:\n        if n % k == 0:\n            divisible = True\n            break\n        n //= 10\n    if divisible:\n        return str(n) + '0' * k\n    return str(n)\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k == 0:\n        return str(n)\n    str_n = str(n)\n    final_str = \"\"\n    if len(str_n) <= k:\n        return str_n\n    for i in range(k):\n        if i == k - 1:\n            final_str += str_n[0:len(str_n) - k]\n            break\n        final_str += \"0\"\n    return final_str\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin\n    n = int(line.strip())\n    k = int(line.strip())\n    while k > 0:\n        if n % 10 == 0:\n            n = n // 10\n            k -= 1\n        else:\n            n = (n - 1) // 10\n            k -= 1\n    return str(n)\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(min(n * 10 ** k, n) // n)"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n < 10:\n        return n\n    while n > 1:\n        if n % 10 == 0:\n            n = n // 10\n            continue\n        n -= 1\n        if n % 10 == 0:\n            n = n // 10\n            continue\n        else:\n            return '0'\n    return str(n)"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    [n, k] = stdin.split()\n    n = int(n)\n    k = int(k)\n    x = n\n    count = 0\n    while True:\n        count = count + 1\n        if k >= x:\n            x = x * 10\n        elif x == 1:\n            break\n        else:\n            x = x // 10\n    print(x)\n    return x"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(n*(10**k))"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, k = map(int, stdin.split())\n    if n % k:\n        return -1\n    return str(n * pow(10, k))"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    result = str(n)\n    while k > 0:\n        result += '0'\n        k -= 1\n    return result"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(n*pow(10,k) % n)"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def make_matrix(a, n):\n        for i in range(n):\n            for j in range(n):\n                a[i][j] = 1 if a[i][j] == 0 else 0\n    def make_a(a, b):\n        for i in range(n):\n            for j in range(m):\n                if a[i][j] == 0:\n                    b[i][j] = 0\n                else:\n                    b[i][j] = 1\n    stdin = stdin.split('\\n')\n    n, m = map(int, stdin[0].split())\n    a = [[0] * n for _ in range(n)]\n    b = [[0] * n for _ in range(n)]\n    make_matrix(a, n)\n    make_matrix(b, n)\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if a[i][j] == 1 and b[i][j] == 1:\n                b[i][j] = 1\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 0 and b[i][j] == 0:\n                return '-1'\n    return str(n) + '\\n' + '\\n'.join(map(str, b))\n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, stdin.split())))\n\n    # Step 1: transform to the matrix A\n    def t(a, row, col):\n        count = 0\n        for i in range(row):\n            for j in range(col):\n                if a[i][j] == 1:\n                    a[i][j] = 0\n                    count += 1\n        return count\n\n    for i in range(n):\n        for j in range(m):\n            a[i][j] = 1 if a[i][j] == 0 else 0\n\n    # Step 2: transform to the matrix B\n    def r(a, row, col):\n        count = 0\n        for i in range(row):\n            for j in range(col):\n                if a[i][j] == 1:\n                    a[i][j] = 0\n                    count += 1\n        return count\n\n    while True:\n        x = t(a, n, m)\n        y = r(a, n, m)\n        if x == y:\n            return str(x)\n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    A = [[int(c) for c in stdin.split()[i]] for i in range(n)]\n    A_copy = deepcopy(A)\n    for i in range(1, m):\n        for j in range(1, m):\n            A[i][j] = A[i][j] + A[i - 1][j - 1]\n    for i in range(n - 1, -1, -1):\n        for j in range(m - 1, -1, -1):\n            A[i][j] = A[i][j] + A_copy[i][j - 1]\n    return''.join([str(c) for row in A for c in row])\n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    matrix = [[0] * n for i in range(m)]\n    for i in range(m):\n        for j in range(n):\n            matrix[i][j] = stdin[i * n + j]\n    A = matrix\n    B = [[0] * n for i in range(m)]\n    for i in range(m):\n        for j in range(n):\n            B[i][j] = A[i][j]\n    seen = {str(matrix)}\n    k = 0\n    while True:\n        k += 1\n        new_matrix = [[0] * n for i in range(m)]\n        for i in range(m):\n            for j in range(n):\n                new_matrix[i][j] = 0\n                if i > 0 and j > 0:\n                    new_matrix[i][j] = A[i - 1][j - 1]\n                if i > 0:\n                    new_matrix[i][j] += A[i - 1][j]\n                if j > 0:\n                    new_matrix[i][j] += A[i][j - 1]\n                if i < m - 1:\n                    new_matrix[i][j] += A[i + 1][j]\n                if j < n - 1:\n                    new_matrix[i][j] += A[i][j + 1]\n        A = new_matrix\n        if str(new_matrix) in seen:\n            break\n        seen.add(str(new_matrix))\n    return str(k)\n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    result = 0\n\n    for i in range(n):\n        for j in range(m):\n            if (i + 1 == j + 1 or i + 2 == j + 1) and (i + 2 == j + 2 or i + 3 == j + 2):\n                result = 1\n    return str(result)\n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input()\n    a = [list(map(int, stdin.split())) for _ in range(2)]\n    b = a.copy()\n    min_oper = float('inf')\n    min_step = float('inf')\n    for x in range(2):\n        for y in range(2):\n            b[x][y] = 1\n            step = 0\n            while (x!= 0 and y!= 0):\n                if b[x - 1][y - 1] == a[x][y]:\n                    step += 1\n                else:\n                    b[x - 1][y - 1] = 1\n                x -= 1\n                y -= 1\n            if min_step > step:\n                min_step = step\n            if step + min_oper > step:\n                min_oper = step\n            b[x][y] = 0\n            x += 1\n            y += 1\n    if min_oper == float('inf'):\n        return '-1'\n    return str(min_oper) + '\\n' + str(min_step) + '\\n' + '\\n'.join(' '.join(map(str, row)) for row in b)\n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [[int(j) for j in stdin.split()[i]] for i in range(n)]\n    b = [[0 for i in range(m)] for j in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 1:\n                if (i - 1) < 0 or a[i - 1][j] == 1:\n                    b[i][j] = 1\n                else:\n                    b[i - 1][j] = 1\n                if (i + 1) > n - 1 or a[i + 1][j] == 1:\n                    b[i][j] = 1\n                else:\n                    b[i + 1][j] = 1\n                if (j - 1) < 0 or a[i][j - 1] == 1:\n                    b[i][j] = 1\n                else:\n                    b[i][j - 1] = 1\n                if (j + 1) > m - 1 or a[i][j + 1] == 1:\n                    b[i][j] = 1\n                else:\n                    b[i][j + 1] = 1\n    for i in range(n):\n        for j in range(m):\n            if b[i][j] == 1:\n                a[i][j] = 1\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 1:\n                b[i][j] = 1\n    if a == b:\n        return \"0\"\n    res = []\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 1:\n                res.append(str(i + 1) +'' + str(j + 1))\n    return''.join(res)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    A = [[int(s) for s in stdin.split()] for _ in range(n)]\n    B = [[0] * m for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if A[i][j] == 1:\n                B[i][j] = 1\n                B[i][j + 1] = 1\n                B[i + 1][j] = 1\n                B[i + 1][j + 1] = 1\n                continue\n            if i > 0 and A[i - 1][j] == 1:\n                B[i][j] = 1\n                B[i][j + 1] = 1\n                B[i - 1][j] = 1\n                B[i - 1][j + 1] = 1\n                continue\n            if i > 0 and j > 0 and A[i - 1][j - 1] == 1:\n                B[i][j] = 1\n                B[i][j + 1] = 1\n                B[i - 1][j] = 1\n                B[i - 1][j + 1] = 1\n                continue\n            if j > 0 and A[i][j - 1] == 1:\n                B[i][j] = 1\n                B[i][j - 1] = 1\n                B[i][j + 1] = 1\n                B[i][j + 1] = 1\n                continue\n    return''.join(str(e) for row in B for e in row)\n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n\n    matrix = [list(map(int, stdin.split())) for _ in range(n)]\n\n    if (n!= len(matrix)) or (m!= len(matrix[0])):\n        return -1\n\n    for i in range(n):\n        matrix[i][0] = 1\n        matrix[0][i] = 1\n\n    result = 0\n    for i in range(1, n):\n        for j in range(1, m):\n            if matrix[i][j] == matrix[i - 1][j] and matrix[i][j] == matrix[i][j - 1] and matrix[i][j] == matrix[i - 1][j - 1]:\n                matrix[i][j] = 1\n                matrix[i - 1][j] = 1\n                matrix[i][j - 1] = 1\n                matrix[i - 1][j - 1] = 1\n                result += 1\n    if result == 0:\n        return -1\n    return''.join(map(str, result))\n"
    },
    {
        "number": 114,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [[1] * m for i in range(n)]\n    b = [[1] * m for i in range(n)]\n    k = 1\n    while a!= b:\n        k += 1\n        for i in range(n):\n            for j in range(m):\n                a[i][j] = a[i][j] or b[i][j] or (a[i - 1][j] and a[i - 1][j + 1]) or (a[i][j - 1] and a[i + 1][j - 1]) or (a[i - 1][j - 1] and a[i + 1][j + 1]) or (a[i][j + 1] and a[i + 1][j - 1])\n                b[i][j] = b[i][j] or (a[i - 1][j] and b[i - 1][j + 1]) or (a[i][j - 1] and a[i + 1][j - 1]) or (a[i - 1][j - 1] and a[i + 1][j + 1]) or (a[i + 1][j - 1] and a[i - 1][j + 1])\n    return k"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(int, stdin.split())\n    return \" \".join(map(str, [x/z, y/z, z/z]))\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.strip().split()\n\n    rock, scissors, paper = int(input[0]), int(input[1]), int(input[2])\n    rocks_survivors = rocks - (rock // 2)\n    scissors_survivors = scissors - (scissors // 2)\n    papers_survivors = paper - (paper // 2)\n    rock_probability = rocks_survivors / (rocks_survivors + scissors_survivors + papers_survivors)\n    scissors_probability = scissors_survivors / (rocks_survivors + scissors_survivors + papers_survivors)\n    papers_probability = papers_survivors / (rocks_survivors + scissors_survivors + papers_survivors)\n    return \" \".join([str(rock_probability), str(scissors_probability), str(papers_probability)])\n\n\nprint(solution(\"2 2 2\"))\nprint(solution(\"2 1 2\"))\nprint(solution(\"1 1 3\"))\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    if __name__!= \"__main__\":\n        raise Exception(\"This file is not meant to be imported\")\n    num_rocks, num_scissors, num_papers = list(map(int, stdin.split()))\n    return \" \".join(map(str, [\n        round(num_rocks/num_papers, 9),\n        round(num_rocks/num_papers, 9),\n        round(num_papers/num_rocks, 9),\n    ]))\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    r, s, p = map(int, stdin.split())\n    return \" \".join(map(str, [0.333333333333, 0.333333333333, 0.333333333333]))"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    r, s, p = (int(x) for x in stdin.split())\n    r_prob = r / (r + s + p)\n    s_prob = s / (r + s + p)\n    p_prob = p / (r + s + p)\n    print('{:.9f}'.format(r_prob), '{:.9f}'.format(s_prob), '{:.9f}'.format(p_prob))\n    return solution\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    r, s, p = map(int, stdin.strip().split())\n    r_prob = 1/r\n    s_prob = 1/s\n    p_prob = 1/p\n    result = 0\n    for i in range(1, 101):\n        result += (r_prob*s_prob*p_prob)\n        s_prob += s_prob\n        r_prob += r_prob\n        p_prob += p_prob\n    result = result/100\n    return f'{result:.9f} {result:.9f} {result:.9f}'"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    r, s, p = map(int, stdin.split())\n    prob_rock = r / (r + s + p)\n    prob_scissor = s / (r + s + p)\n    prob_paper = p / (r + s + p)\n    return \" \".join(map(str, [prob_rock, prob_scissor, prob_paper]))\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M, P = list(map(int, stdin.split()))\n    if N == M == P:\n        return '0.0 0.0 0.0'\n    if N == M:\n        return '0.0 1.0 0.0'\n    if N == P:\n        return '0.0 0.0 1.0'\n    rock_wins = M / (M + P)\n    scissors_wins = N / (N + M)\n    papers_wins = P / (P + N)\n    return '{} {} {}'.format(\n        round(rock_wins, 9),\n        round(papers_wins, 9),\n        round(scissors_wins, 9),\n    )\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    r, s, p = map(int, stdin.split())\n    return (\"{:.9f}\".format(0.333333333333 * (r / (r + s + p))),\n            \"{:.9f}\".format(0.333333333333 * (s / (r + s + p))),\n            \"{:.9f}\".format(0.333333333333 * (p / (r + s + p))))\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l, r, k, l_s, r_s = map(int, stdin.split())\n    l_c = k % ((r-l)//(r-l_s))\n    r_c = (k-l_c) % (r-l)\n    print(r_c)\nsolution(input())\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    l_1, r_1, l_2, r_2, k = map(int, stdin.split())\n    return str(max(1, (r_2 - l_1 + 1) * k))"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Takes a string as input and yields the number of minutes\n    Filya and Sonya can be at any time.\n    \"\"\"\n    # Split the input into lines and strip off the newline character\n    lines = (line.strip() for line in stdin.splitlines())\n\n    # Split each line into a list of ints\n    line_1, line_2, line_3, line_4, line_5 = (\n        list(map(int, line.split())) for line in lines\n    )\n\n    return str(min(line_1, line_2, line_3, line_4, line_5) - max(line_1, line_2, line_3, line_4, line_5))\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    l, r, k = list(map(int, stdin.split()))\n    return str(int((r - l) - k))\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n'''"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n'''"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\nstdin_list = stdin.split('\\n')\n\nstdin_list = stdin_list[0].split(' ')\n\nl_1, r_1, l_2, r_2, k = int(stdin_list[0]), int(stdin_list[1]), int(stdin_list[2]), int(stdin_list[3]), int(stdin_list[4])\n\n\n\nreturn r_2 - l_1\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    l_1, r_1, l_2, r_2, k = map(int, stdin.split())\n    return min(r_1 - l_1, r_2 - l_2, k - (r_1 + l_1) / 2)\n\"\"\"\n\n\ndef"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''1 100 50 200 75\n   ...\n   ... 1 9 9 10 20 1''')\n    2\n    >>> solution('''1 100 50 200 75\n   ...\n   ... 1 100 50 200 75''')\n    50\n    \"\"\"\n    l_1, r_1, l_2, r_2, k = list(map(int, stdin.split()))\n    if (l_1 >= l_2 and l_1 <= r_1) and (r_1 >= l_2 and r_1 <= r_2):\n        return r_1 - l_1\n    else:\n        return max(r_1 - l_1, r_2 - l_2)\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Compute and return the area of the region the cow can reach.\n\n    >>> solution('''\n   ... 5 6\n   ... 1 2 0\n   ... 0 1 1\n   ... 0 2 2\n   ... -3 4 -1\n   ... -2 6 3\n   ... 1 0 1\n   ... 0 1 2\n   ... 2 0 2\n   ... -1 -4 5\n   ... 3 -2 4\n   ... 1 2 4\n   ... ''')\n    '13'\n    \"\"\"\n    return str(answer(stdin))"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split(' ')))\n    north_south = []\n    west_east = []\n    for _ in range(n):\n        north_south.append(list(map(int, stdin.split(' '))))\n    for _ in range(m):\n        west_east.append(list(map(int, stdin.split(' '))))\n    x, y = 0, 0\n    ans = set()\n    ans.add(x, y)\n    while True:\n        for north_south_i in range(n):\n            if north_south[north_south_i][0] <= x and north_south[north_south_i][1] > x:\n                if north_south[north_south_i][1] - north_south[north_south_i][0] >= x - y:\n                    if north_south[north_south_i][0] == 0:\n                        x = 0\n                        y = north_south[north_south_i][1]\n                        break\n                    else:\n                        x = north_south[north_south_i][1]\n                        y = north_south[north_south_i][0]\n                        break\n        if x == 0:\n            break\n        for west_east_i in range(m):\n            if west_east[west_east_i][0] <= y and west_east[west_east_i][1] > y:\n                if west_east[west_east_i][0] - west_east[west_east_i][1] >= x - y:\n                    if west_east[west_east_i][1] == 0:\n                        x = 0\n                        y = west_east[west_east_i][0]\n                        break\n                    else:\n                        x = west_east[west_east_i][1]\n                        y = west_east[west_east_i][0]\n                        break\n        if x == 0:\n            break\n        if x == 0 and y == 0:\n            break\n        ans.add((x, y))\n    if len(ans) == 1:\n        print(1)\n    else:\n        ans = list(ans)\n        ans.sort()\n        print(len(ans))\n        print(len(ans)-1)\n        print(ans[-1][0] * ans[-1][1])"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    _, N, M = stdin.split()\n    A = list(map(int, stdin.split()[1:]))\n    C = list(map(int, stdin.split()[1:]))\n    D = list(map(int, stdin.split()[1:]))\n    E = list(map(int, stdin.split()[1:]))\n    F = list(map(int, stdin.split()[1:]))\n    x = 0\n    y = 0\n    for i in range(int(N)):\n        if A[i] <= x and y <= C[i]:\n            x = max(x, A[i])\n            y = min(y, C[i])\n    for i in range(int(M)):\n        if D[i] <= x and y <= E[i]:\n            x = max(x, D[i])\n            y = min(y, E[i])\n    if y >= F[0]:\n        return 'INF'\n    return str(abs(x - y))\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    segments = [[], []]\n    for _ in range(n):\n        x, y = list(map(int, stdin.split()))\n        segments[0].append((x, y))\n        segments[1].append((y, x))\n    return str(int(perimeter(segments, n, m)))\n\n\ndef"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 6\n   ... 1 2 0\n   ... 0 1 1\n   ... 0 2 2\n   ... -3 4 -1\n   ... -2 6 3\n   ... 1 0 1\n   ... 0 1 2\n   ... 2 0 2\n   ... -1 -4 5\n   ... 3 -2 4\n   ... 1 2 4\n   ... ''')\n    '13'\n    \"\"\"\n    # [A_1, C_1, D_1, E_1, F_1, A_2, C_2, D_2, E_2, F_2]\n    n, m = map(int, stdin.split())\n    # north-south\n    north_south = list(map(lambda x: int(x) - 1, stdin.split()[:n]))\n    # east-west\n    east_west = list(map(lambda x: int(x) - 1, stdin.split()[n:2 * n]))\n    return str(max(0, (east_west[i] * north_south[i + 1] + east_west[i + 1] * north_south[i] - north_south[i]) for i in range(len(north_south))))\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    [N, M] = list(map(int, stdin.strip().split()))\n\n    segments = []\n    for i in range(1, N+1):\n        segments.append(((i-1, 0), (i, 0)))\n    for j in range(1, M+1):\n        segments.append(((0, j-1), (0, j)))\n    segments.append(((0, 0), (0, 1)))\n    segments.append(((N+1, 0), (N+1, 1)))\n\n    return str(perimeter_crossing_segments_area(N+1, M+1, segments))\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    coordinates = []\n    for _ in range(n):\n        x, y = map(int, stdin.split())\n        coordinates.append([x, y])\n\n    coords_to_line = defaultdict(list)\n    coords_to_point = defaultdict(list)\n\n    for i in range(n):\n        x = coordinates[i][0]\n        y = coordinates[i][1]\n        for j in range(m):\n            if 0 <= x < 10 ** 9 and 0 <= y < 10 ** 9:\n                coords_to_line[(x, y)].append(i)\n                coords_to_point[(x, y)].append((i, j))\n\n    areas = []\n    for line in coords_to_line.values():\n        points = []\n        for i in range(len(line) - 1):\n            for j in range(i + 1, len(line)):\n                points.append((line[i], line[j]))\n        areas.append(get_area(points))\n    return str(max(areas))\n\ndef"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.strip().split())\n    cow = [0, 0]\n    coordinates = []\n    for i in range(N):\n        coordinates.append(list(map(int, stdin.strip().split())))\n    for i in range(N):\n        for j in range(M):\n            if coordinates[i][j] == -1:\n                cow = [i, j]\n                break\n        if cow:\n            break\n    max_x = min(coordinates[i][j] for i in range(N) for j in range(M))\n    max_y = min(coordinates[i][j] for i in range(N) for j in range(M))\n    min_x = max(coordinates[i][j] for i in range(N) for j in range(M))\n    min_y = max(coordinates[i][j] for i in range(N) for j in range(M))\n    min_x = max(min_x, 0)\n    min_y = max(min_y, 0)\n\n    for i in range(min_x, max_x + 1):\n        for j in range(min_y, max_y + 1):\n            if not (min_x <= i < max_x and min_y <= j < max_y):\n                print(\"Inf\")\n                return \"Inf\"\n            if i < 0 or j < 0:\n                continue\n            if i == 0 and j == 0:\n                print(\"Inf\")\n                return \"Inf\"\n            if i == 0 and j == 1:\n                print(0)\n                return 0\n            if i == 1 and j == 0:\n                print(0)\n                return 0\n            if i == 1 and j == 1:\n                print(1)\n                return 1\n            if i == 0:\n                continue\n            if j == 0:\n                continue\n            if i == j:\n                continue\n            if i == 1:\n                if j == 1:\n                    print(1)\n                    return 1\n                elif j == 0:\n                    print(0)\n                    return 0\n            if i == 0:\n                if j == 1:\n                    print(0)\n                    return 0\n            if j == 1:\n                if i == 0:\n                    print(0)\n                    return 0\n            if j == 0:\n                if i == 0:\n                    print(0)\n                    return 0\n            if j == i:\n                if i == 1 and j == 0:\n                    print(0)\n                    return 0\n            if i == 0:\n                if j == 1:\n                    print(0)\n                    return 0\n            if j == 1:\n                if i == 1:\n                    print(0)\n                    return 0\n            if i == 1:\n                if j == 0:\n                    print(0)\n                    return 0\n            if j == 1:\n                if i == 0:\n                    print(0)\n                    return 0\n            if i == j:\n                if i == 0 and j == 0:\n                    print(0)\n                    return 0\n            if i == j:\n                if i == 0 and j == 1:\n                    print(0)\n                    return 0\n            if j == i:\n                if i == 0 and j == 0:\n                    print(0)\n                    return 0\n            if i == j:\n                if i == 1 and j == 1:\n                    print(1)\n                    return 1"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    s1 = list(map(int, stdin.split()))\n    s2 = list(map(int, stdin.split()))\n    N = len(s1)\n    M = len(s2)\n\n    first_cow = {(0, 0)}\n    second_cow = {(0, 0)}\n    for i in range(N):\n        first_cow.add(s1[i])\n    for j in range(M):\n        second_cow.add(s2[j])\n\n    def is_in_first_cow(point):\n        return point in first_cow\n\n    def is_in_second_cow(point):\n        return point in second_cow\n\n    def is_in_first_region(point):\n        return point in first_cow and point in second_cow\n\n    def is_in_second_region(point):\n        return point in first_cow and point in second_cow\n\n    def get_distance(point1, point2):\n        return math.sqrt((point1[0] - point2[0]) ** 2 + (point1[1] - point2[1]) ** 2)\n\n    def get_points_from_line(point1, point2, distance):\n        x1, y1 = point1\n        x2, y2 = point2\n        dx = x2 - x1\n        dy = y2 - y1\n        if dx == 0:\n            for x in range(x1, x2 + 1):\n                yield x, y1\n        else:\n            k = dy / dx\n            for x in range(x1, x2 + 1):\n                yield int(x * k + y1), int(x * k + y1)\n            for x in range(x1, x2 + 1):\n                yield int(x * k + y1), int(x * k + y2)\n            for x in range(x2, x1 - 1, -1):\n                yield int(x * k + y1), int(x * k + y2)\n            for x in range(x2, x1 - 1, -1):\n                yield int(x * k + y1), int(x * k + y2)\n\n    def is_in_region(point):\n        for i in range(N):\n            if point == (i, 0):\n                continue\n            x, y = point\n            dist = get_distance(s1[i], point)\n            for j in range(M):\n                if s2[j] == -dist:\n                    continue\n                if get_distance(s2[j], point) == dist:\n                    if not is_in_first_region(point):\n                        return False\n                    if not is_in_second_region(point):\n                        return False\n                    if (s1[i], s2[j]) not in first_cow:\n                        return False\n                    if (s2[j], s1[i]) not in second_cow:\n                        return False\n                    break\n        return True\n\n    def is_cross_line(point, line):\n        x1, y1 = point\n        x2, y2 = line[0]\n        x3, y3 = line[1]\n        if x1 == x2 and y1 == y2:\n            return False\n        if x1 == x3 and y1 == y3:\n            return False\n        if x2 == x1 and y2 == y1:\n            return False\n        if x2 == x3 and y2 == y3:\n            return False\n        return True\n\n    def is_in_line(point, line):\n        return point in line or point == line[0] or point == line[1]\n\n    def get_distance_from_line(point, line):\n        x1, y1 = point\n        x2, y2 = line[0]\n        x3, y3 = line[1]\n        if x1 == x2:\n            return abs(y3 - y1)\n        if x1 == x3:\n            return abs(y1 - y2)\n        if y1 == y2:\n            return abs(x3 - x1)\n        if y1 == y3:\n            return abs(x1 - x2)\n        return math.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2)\n\n    def get_distance_from_point(point, line):\n        return get_distance_from_line(point, line) + get_distance(point, (line[0])) + get_distance(point, (line[1]))\n\n    def get_distance(point1, point2):\n        x1, y1 = point1\n        x2, y2 = point2\n        return abs(x1 - x2) + abs(y1 - y2)\n\n    def get_distance_from_point(point1, point2):\n        return get_distance(point1, point2) + get_distance(point2, (point1[0], point1[1] + 1)) + get_distance(point1, (point1[0] + 1, point1[1])) + get_distance(point1, (point1[0], point1[1] - 1))\n\n    points = set()\n    visited = set()\n    answer = 0\n    for i in range(N):\n        for j in range(M):\n            points.add((i, j))\n    visited.update(points)\n    while points:\n        first_cross = False\n        points_with_cross = set()\n        for point in points:\n            if is_in_region(point):\n                if not first_cross:\n                    first_cross = True\n                points_with_cross.add(point)\n                continue\n            if is_cross_line(point, s1):\n                points_with_cross.add(point)\n                continue\n            for line in s1:\n                if is_in_line(point, line):\n                    if not first_cross:\n                        first_cross = True\n                    points_with_cross.add(point)\n                    break\n        points -= points_with_cross\n        visited |= points_with_cross\n        for point in points_with_cross:\n            answer += 1\n            for line in s2:\n                if is_in_line(point, line):\n                    break\n            else:\n                answer -= 1"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    import math\n    stdin = stdin.splitlines()\n    t, s, x = list(map(int, stdin[0].split()))\n    t = t - math.ceil(s/2)\n    if t == x:\n        return 'YES'\n    else:\n        return 'NO'\n\nstdin = \"3 10 4\\n\"\nprint(solution(stdin))\n\nstdin = \"3 10 3\\n\"\nprint(solution(stdin))\n\nstdin = \"3 8 51\\n\"\nprint(solution(stdin))\n\nstdin = \"3 8 52\\n\"\nprint(solution(stdin))\n\nstdin = \"3 8 53\\n\"\nprint(solution(stdin))"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t, s, x = (int(x) for x in stdin.split())\n    return \"YES\" if t + s + 1 >= x else \"NO\"\n    \nsolution(input())\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    t, s, x = map(int, stdin.split())\n    return \"YES\" if (t + x) % (s * 2) == 0 else \"NO\"\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t, s, x = map(int, stdin.split())\n    if t == x and s == 0:\n        return 'YES'\n    elif t == x:\n        return 'NO'\n    else:\n        if x % s == 0:\n            return 'YES'\n        else:\n            return 'NO'"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t, s, x = map(int, stdin.split())\n    if x - t >= s:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t, s, x = map(int, stdin.split())\n    if x - t < s:\n        return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    t, s, x = map(int, stdin.strip().split())\n    if t == x:\n        return 'YES'\n    if t < x:\n        return 'NO'\n    return 'YES' if t - s == x else 'NO'\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split(\"\\n\")\n    t, s, x = int(input_list[0]), int(input_list[1]), int(input_list[2])\n    if x < t or x > t + s * 10:\n        return \"NO\"\n    else:\n        for i in range(x + 1, t + 1):\n            if i % s == 0:\n                return \"YES\"\n    return \"NO\"\nprint(solution(input()))"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    time, interval, x = map(int, lines[0].split())\n    if time < interval:\n        return 'NO'\n    for t in range(time, time + x):\n        if t % interval == 0:\n            return 'YES'\n    return 'NO'\n    # return \"NO\" if time < interval else \"YES\"\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t, s, x = list(map(int, stdin.split()))\n    if (t + s) % 2!= 0:\n        return \"NO\"\n    else:\n        if t == x:\n            return \"YES\"\n        else:\n            if s == 1:\n                return \"YES\"\n            elif x <= t + s:\n                return \"NO\"\n            else:\n                return \"YES\"\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split()\n    b = list()\n    for i in range(len(a)):\n        b.append(a[i])\n    n = int(b[0])\n    segments = set()\n    for i in range(1, n + 1):\n        segments.add(tuple(map(int, b[i].split())))\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            if segments[i] == segments[j]:\n                print(i, j)\n                return\n    print(-1)\n    return\nsolution(input())\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    segments = []\n    for _ in range(n):\n        segments.append(tuple(map(int, stdin.split())))\n    segments.sort(key=lambda x: x[0])\n    #print(segments)\n    for i in range(n-1):\n        if segments[i][1] > segments[i+1][0]:\n            print(segments[i][1], segments[i+1][0])\n            break\n    else:\n        print(-1, -1)\nsolution(input())\n\n-------Code By Geetika--------"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    result = [-1, -1]\n    n = int(stdin)\n    arr = []\n    for _ in range(n):\n        s1, s2 = map(int, stdin.split())\n        arr.append([s1, s2])\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (arr[i][1] >= arr[j][0] and arr[i][0] <= arr[j][1]):\n                result = [i, j]\n                break\n            elif (arr[i][0] >= arr[j][1] and arr[i][1] <= arr[j][0]):\n                result = [j, i]\n                break\n            elif (arr[i][1] <= arr[j][0] and arr[i][0] >= arr[j][1]):\n                result = [i, j]\n                break\n            elif (arr[i][0] >= arr[j][1] and arr[i][1] <= arr[j][0]):\n                result = [j, i]\n                break\n    return result\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return 0\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    segments = stdin.split(\"\\n\")[1:]\n    i, j = 0, 0\n    res = -1\n    while i < n and j < n:\n        if segments[i][0] <= segments[j][0] and segments[i][1] >= segments[j][1]:\n            i += 1\n            j += 1\n            res = max(res, i, j)\n        elif segments[i][0] < segments[j][1]:\n            i += 1\n            res = max(res, i, j)\n        else:\n            j += 1\n            res = max(res, i, j)\n    return \" \".join([str(res), str(i), str(j)])\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    lines = [input().split() for i in range(n)]\n    for line in lines:\n        l, r = line\n        if l > r:\n            l, r = r, l\n        l, r = int(l), int(r)\n        if l == r:\n            print(-1 - 1)\n            return\n        for line in lines:\n            l, r = line\n            if l > r:\n                l, r = r, l\n            l, r = int(l), int(r)\n            if l >= l and r <= r:\n                print(l, r)\n                return\n    print(-1 - 1)\n    return\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    a = list(map(int, input().split()))\n    a = [(a[i], a[i + 1]) for i in range(n)]\n    c = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if a[i][1] < a[j][0] and a[i][1] < a[j][1]:\n                c += 1\n            elif a[i][0] > a[j][1] and a[i][0] > a[j][0]:\n                c += 1\n            elif a[i][0] <= a[j][0] <= a[i][1] and a[i][1] <= a[j][1]:\n                c += 1\n    print(c)"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    seg_a = []\n    for i in range(n):\n        seg_a.append((int(stdin.split()[i+1]), int(stdin.split()[i])))\n    seg_a.sort(key=lambda x: x[0])\n    for i in range(n):\n        for j in range(i, n):\n            if seg_a[i][0] >= seg_a[j][0] and seg_a[i][1] <= seg_a[j][1]:\n                return str(i+1) + \" \" + str(j+1)\n    return \"-1 -1\"\n    # Your code here\nsolution(input())\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin.strip())\n  segments = []\n  for i in range(n):\n    segments.append([int(segment.strip()) for segment in stdin.split(\"\\n\")[i].split(\" \")])\n  \n  return str(find_two_segments(segments))\n\ndef"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.strip().split()\n    if len(data) == 1:\n        return '-1 -1'\n    n = int(data[0])\n    a = []\n    for i in range(1, n + 1):\n        a.append((int(data[i][0]), int(data[i][-1])))\n\n    a.sort(key=lambda x: x[0])\n\n    for i in range(1, n):\n        if a[i - 1][0] == a[i][0]:\n            continue\n        elif a[i - 1][1] < a[i][0]:\n            print(a[i - 1][1], a[i][0])\n        else:\n            print('-1 -1')\n    return '-1 -1'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Write an efficient algorithm that transforms the string s into a string of\n    the same length of s.\n    '''\n    decoded_genome = ''\n    n = len(stdin)\n    for i in range(n):\n        if stdin[i] == '?':\n            decoded_genome += 'A'\n        elif stdin[i] == 'G':\n            decoded_genome += 'C'\n        elif stdin[i] == 'T':\n            decoded_genome += 'G'\n        elif stdin[i] == 'C':\n            decoded_genome += 'T'\n    if len(decoded_genome) == n:\n        return decoded_genome\n    else:\n        return '==='\n\n\n\nstdin
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = len(s)\n    decoded = []\n    for i in range(n):\n        if s[i] == '?':\n            decoded.append(s[i - 1])\n        else:\n            decoded.append(s[i].upper())\n    if len(set(decoded))!= 4:\n        return \"===\"\n    return ''.join(decoded)\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    res = ''\n    if n == 4:\n        if len(set(s)) == 4:\n            for i in range(n):\n                if s[i] == '?':\n                    if i+1 < n:\n                        res += 'A'\n                    if i+2 < n:\n                        res += 'G'\n                    if i+3 < n:\n                        res += 'T'\n                if s[i] == 'A':\n                    if i+1 < n:\n                        res += 'C'\n                    if i+2 < n:\n                        res += 'T'\n                if s[i] == 'C':\n                    if i+1 < n:\n                        res += 'G'\n                    if i+2 < n:\n                        res += 'T'\n                if s[i] == 'G':\n                    if i+1 < n:\n                        res += 'T'\n                    if i+2 < n:\n                        res += 'C'\n    else:\n        print(\"===\")\n    return res\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    genome = stdin.split()[1]\n    coding_dict = {'A': 'a', 'C': 'c', 'G': 'g', 'T': 't'}\n    coding_genome = ''\n    for nucleotide in genome:\n        if nucleotide == '?':\n            coding_genome += '?'\n        else:\n            coding_genome += coding_dict[nucleotide]\n    if len(coding_genome) == n:\n        return coding_genome\n    else:\n        return '===' * n\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    genome = stdin.rstrip()\n    if (sum([genome.count(c) for c in \"AGCT\"]) == sum([genome.count(c) for c in \"ACGT\"])) and (sum([genome.count(c) for c in \"TGCAG\"]) == sum([genome.count(c) for c in \"TGCT\"])):\n        return genome\n    else:\n        return \"===\"\n\n\nsolution(input())\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    genome = stdin.strip()\n    if len(genome)!= n:\n        return '='.join(genome) + '='\n    if n % 4!= 0:\n        return '='.join(genome) + '=='\n    count = n // 4\n    genome = list(genome)\n    for i in range(len(genome)):\n        if genome[i] == '?':\n            genome[i] = genome[i - count]\n    return ''.join(genome)\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    dna = stdin\n    if not isinstance(dna, str):\n        raise TypeError('Input must be a string.')\n    if len(dna) == 0:\n        raise ValueError('Input must be a non-empty string.')\n    if len(dna) % 3!= 0:\n        raise ValueError('Input must be a string of length a multiple of 3.')\n    dna = dna.upper()\n    res = ''\n    for i in range(0, len(dna), 3):\n        if dna[i]!= '?' and dna[i]!= 'A' and dna[i]!= 'C' and dna[i]!= 'G' and dna[i]!= 'T':\n            raise ValueError('Unrecognized character in input.')\n        if dna[i + 1]!= '?' and dna[i + 1]!= 'A' and dna[i + 1]!= 'C' and dna[i + 1]!= 'G' and dna[i + 1]!= 'T':\n            raise ValueError('Unrecognized character in input.')\n        if dna[i + 2]!= '?' and dna[i + 2]!= 'A' and dna[i + 2]!= 'C' and dna[i + 2]!= 'G' and dna[i + 2]!= 'T':\n            raise ValueError('Unrecognized character in input.')\n        res += dna[i]\n        res += dna[i + 1]\n        res += dna[i + 2]\n    return res\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    genome = stdin\n    return '\\n'.join([''.join([letter[0] for letter in genome])])\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Input\n    =====\n    :param stdin:\n    :return:\n    \"\"\"\n    n = len(stdin)\n    genome = stdin\n    while True:\n        if genome == genome[::-1]:\n            return genome\n        else:\n            for i in range(n):\n                if genome[i] == '?':\n                    if genome[i - 1] == 'A':\n                        genome = genome[:i - 1] + 'A' + genome[i + 1:]\n                    elif genome[i - 1] == 'C':\n                        genome = genome[:i - 1] + 'C' + genome[i + 1:]\n                    elif genome[i - 1] == 'G':\n                        genome = genome[:i - 1] + 'G' + genome[i + 1:]\n                    else:\n                        genome = genome[:i - 1] + 'T' + genome[i + 1:]\n    return genome\n"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    For example, on first line of input it is guaranteed that the position is reachable playing tic-tac-toe, and it is Ilya's turn now. It is impossible to make a winning move, so it is impossible to win by making a single turn.\n    \"\"\"\n    tiles = stdin.split()\n    # If we make a single turn in 4 directions, it is possible to win\n    # There are 2 tiles in the top row, so we need to check 4 directions\n    if '.' in tiles[0]:\n        return 'NO'\n\n    # If we have to make a winning move (3 in a row), we need to make a single turn\n    # Check all 4 directions\n    for direction in directions:\n        # Initial position is 0,0\n        x = 0\n        y = 0\n        count = 0\n\n        # For each character in the position\n        for pos in tiles:\n            if pos == 'o':\n                count += 1\n                if count >= 3:\n                    break\n            elif pos == 'x':\n                count = 0\n\n            # If we reached the end of the line\n            if pos == '.':\n                # Check the direction\n                if direction =='vertical':\n                    # Check the position y\n                    if y + count >= 4 or tiles[y + count] == 'x':\n                        return 'NO'\n                    else:\n                        y += count\n                elif direction == 'horizontal':\n                    # Check the position x\n                    if x + count >= 4 or tiles[x + count] == 'x':\n                        return 'NO'\n                    else:\n                        x += count\n                elif direction == 'diagonal':\n                    # Check the position\n                    # Check the position x\n                    if x + count >= 4 or tiles[x + count] == 'x':\n                        return 'NO'\n                    # Check the position y\n                    if y + count >= 4 or tiles[y + count] == 'x':\n                        return 'NO'\n                    # If we reached the end of the line\n                    else:\n                        y += count\n                        x += count\n        # If we reached the end of the line\n        if x >= 4 or y >= 4:\n            return 'NO'\n    return 'YES'"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x_win = True\n    o_win = True\n    win = True\n    empty_win = True\n    for i in range(0, len(stdin), 3):\n        x_win = x_win and stdin[i] == stdin[i+1] == stdin[i+2] == 'x'\n        o_win = o_win and stdin[i] == stdin[i+1] == stdin[i+2] == 'o'\n        empty_win = empty_win and stdin[i] == stdin[i+1] == stdin[i+2] == '.'\n        if not win or not x_win or not o_win or not empty_win:\n            return 'NO'\n    if x_win and not o_win and not empty_win:\n        return 'NO'\n    return 'YES'"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    game_field = stdin.split('\\n')\n    winner = ''\n    x_counter = 0\n    o_counter = 0\n    o_lines = []\n    x_lines = []\n    empty_count = 0\n    for line in game_field:\n        for letter in line:\n            if letter == 'o':\n                o_counter += 1\n                if o_counter == 4:\n                    winner = 'o'\n                    break\n                else:\n                    o_lines.append(line)\n            if letter == 'x':\n                x_counter += 1\n                if x_counter == 4:\n                    winner = 'x'\n                    break\n                else:\n                    x_lines.append(line)\n    for x_line in x_lines:\n        x_letters = 0\n        for letter in x_line:\n            if letter == 'x':\n                x_letters += 1\n            else:\n                x_letters = 0\n        if x_letters == 3:\n            winner = 'x'\n            break\n    for o_line in o_lines:\n        o_letters = 0\n        for letter in o_line:\n            if letter == 'o':\n                o_letters += 1\n            else:\n                o_letters = 0\n        if o_letters == 3:\n            winner = 'o'\n            break\n    if winner == '':\n        for x_line in x_lines:\n            if x_line == x_lines[0]:\n                empty_count += 1\n            else:\n                empty_count = 0\n        if empty_count == 3:\n            winner = 'x'\n        for o_line in o_lines:\n            if o_line == o_lines[0]:\n                empty_count += 1\n            else:\n                empty_count = 0\n        if empty_count == 3:\n            winner = 'o'\n    return winner\n"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    l = stdin.split('\\n')\n    empty = '.'\n    x = 'x'\n    o = 'o'\n    result = \"NO\"\n    for line in l:\n        for i in range(4):\n            if line[i] == empty:\n                if line[i+1] == empty or line[i+1] == x or line[i+1] == o:\n                    if line[i+2] == empty or line[i+2] == x or line[i+2] == o:\n                        if line[i+3] == empty or line[i+3] == x or line[i+3] == o:\n                            result = \"YES\"\n                            break\n    return result\n"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    lines = stdin.splitlines()\n    for i, line in enumerate(lines):\n        lines[i] = line.strip()\n    lines = list(map(list, lines))\n    lines = list(map(lambda x: x.replace('.', ''), lines))\n    for i in range(len(lines)):\n        for j in range(len(lines[i])):\n            if lines[i][j] == 'x':\n                lines[i][j] = 'x'\n            elif lines[i][j] == 'o':\n                lines[i][j] = 'o'\n    for i in range(len(lines)):\n        if len(set(lines[i]))!= len(lines[i]):\n            return 'YES'\n    for i in range(len(lines)):\n        if (lines[i][0] == lines[i][1] == lines[i][2]) or (lines[i][0] == lines[i][3] == lines[i][6]) or (lines[0][i] == lines[2][i] == lines[4][i]) or (lines[1][i] == lines[3][i] == lines[5][i]) or (lines[2][i] == lines[4][i] == lines[6][i]) or (lines[0][i] == lines[4][i] == lines[8][i]) or (lines[2][i] == lines[4][i] == lines[6][i]) or (lines[0][i] == lines[1][i] == lines[3][i]) or (lines[0][i] == lines[2][i] == lines[4][i]) or (lines[1][i] == lines[3][i] == lines[5][i]) or (lines[2][i] == lines[4][i] == lines[6][i]):\n            return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(3):\n        stdin = stdin.replace('x','.')\n        stdin = stdin.replace('o','x')\n    stdin = stdin.replace('x','o')\n    stdin = stdin.replace('o','x')\n    for i in range(3):\n        stdin = stdin.replace('x','.')\n        stdin = stdin.replace('o','x')\n    for i in range(3):\n        stdin = stdin.replace('.','o')\n    for i in range(3):\n        stdin = stdin.replace('.','o')\n    for i in range(3):\n        stdin = stdin.replace('.','o')\n    for i in range(3):\n        stdin = stdin.replace('.','o')\n    for i in range(3):\n        stdin = stdin.replace('.','o')\n    for i in range(3):\n        stdin = stdin.replace('.','o')\n    for i in range(3):\n        stdin = stdin.replace('.','o')\n    for i in range(3):\n        stdin = stdin.replace('.','o')\n    for i in range(3):\n        stdin = stdin.replace('.','o')\n    for i in range(3):\n        stdin = stdin.replace('.','o')\n    for i in range(3):\n        stdin = stdin.replace('.','o')\n    for i in range(3):\n        stdin = stdin.replace('.','o')\n    return 'YES' if stdin.count('x') > stdin.count('o') else 'NO'\n'''\n"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    answer = 'YES'\n    for line in stdin.split():\n        x = line.count('x')\n        o = line.count('o')\n        if x == 4 and o == 0:\n            answer = 'NO'\n            break\n        if x == o == 3:\n            answer = 'YES'\n            break\n    return answer\n"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    for i in range(len(stdin)):\n        for j in range(len(stdin)):\n            if stdin[i][j] == stdin[i][j + 1]:\n                if stdin[i][j] == stdin[i][j + 2]:\n                    if stdin[i][j] == stdin[i][j + 3]:\n                        return 'YES'\n            else:\n                return 'NO'\n\ndef"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    moves = ['.', 'x', 'o']\n    # board = []\n    # for _ in range(4):\n    #     board.append(list(stdin.strip()))\n    board = stdin\n    won = False\n    for i, row in enumerate(board):\n        if row == moves[0]:\n            continue\n        elif row == moves[1]:\n            for k, col in enumerate(board[i+1]):\n                if col == moves[0]:\n                    board[i+1][k] = moves[1]\n                    board[i+1][k + 1] = moves[2]\n                    won = True\n                    break\n        elif row == moves[2]:\n            for k, col in enumerate(board[i+1]):\n                if col == moves[0]:\n                    board[i+1][k] = moves[2]\n                    board[i+1][k + 1] = moves[1]\n                    won = True\n                    break\n    if won:\n        return 'YES'\n    else:\n        return 'NO'"
    },
    {
        "number": 121,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  lines = stdin.split('\\n')\n  for line_index in range(len(lines)):\n    line = lines[line_index]\n    if line == '':\n      continue\n    for char_index in range(len(line)):\n      if line[char_index] == '.':\n        continue\n      if line[char_index] == 'x':\n        break\n    else:\n      return 'NO'\n    if line_index + 1 < len(lines) and line[char_index] == lines[line_index + 1][char_index]:\n      if line_index + 1 < len(lines) - 1 and line[char_index + 1] == lines[line_index + 1][char_index + 1]:\n        if line_index + 1 < len(lines) - 2 and line[char_index + 2] == lines[line_index + 2][char_index + 2]:\n          return 'YES'\n        else:\n          return 'NO'\n      else:\n        return 'NO'\n  return 'NO'\n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\nmy_array = []\nfor i in range(len(stdin.split())):\n    my_array.append(int(stdin.split()[i]))\nprint(my_array)\n\nmy_sum = sum(my_array)"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    a = list(map(int, stdin.split(' ')))\n    # print(a)\n    while len(a) > 1 and a[0] == a[-1]:\n        a.pop()\n        a.pop(0)\n    if len(a) == 1:\n        return 'YES'\n    else:\n        return 'NO'\n\n\ndef"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    N = int(stdin.split()[0])\n    a = stdin.split()[1]\n    a = list(map(int, a))\n    return \"YES\" if sum(a) == sum(a[::2]) else \"NO\"\n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    if a[0]!= 0:\n        a[0] = 0\n    for i in range(1, n):\n        if a[i]!= 0:\n            a[i] = a[i-1]\n    a[-1] = 0\n    if sum(a)!= sum(range(n)):\n        return 'NO'\n    else:\n        return 'YES'\n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a = a + a\n    a_s = 0\n    a_e = 0\n    for i in range(n):\n        if a_s < a[i]:\n            a_s = a[i]\n        else:\n            a_e = a[i]\n            break\n    if a_e - a_s == 0:\n        return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    sum_of_first_part = 0\n    for i in range(0, len(a) - 1):\n        sum_of_first_part += a[i]\n        if sum_of_first_part == sum_of_first_part:\n            return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    arr = stdin.split()[1].split()\n    inserted = set()\n    for i in range(n):\n        inserted.add(arr[i])\n\n    if len(inserted) % 2 == 0:\n        return 'YES'\n\n    new_arr = []\n    for i in range(n):\n        if arr[i] in inserted:\n            new_arr.append(arr[i])\n        else:\n            inserted.add(arr[i])\n            new_arr.append(arr[i])\n\n    if sum(inserted) == sum(new_arr):\n        return 'YES'\n\n    return 'NO'"
    },
    {
        "number": 122,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = [int(x) for x in stdin.split(' ')]\n    sum_a = sum(arr)\n    if sum_a % 2 == 0:\n        for i in range(n):\n            if arr[i] % 2 == 1:\n                return 'NO'\n        arr = sorted(arr)\n        for i in range(1, n):\n            if arr[i]!= arr[i - 1]:\n                arr[i - 1], arr[i] = arr[i], arr[i - 1]\n                return 'YES'\n    return 'NO'\n\"\"\"\n\n\"\"\"\nMethod 1\n\ndef"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()[1]))\n    b = list(map(int, stdin.split()[2]))\n    \n    # print(n, k, a, b)\n    \n    a_dict = {a[i]: i for i in range(n)}\n    # print(a_dict)\n    \n    b_set = set(b)\n    # print(b_set)\n    \n    check = True\n    for num in a:\n        if num in b_set:\n            check = False\n            break\n    \n    if check == True:\n        return 'Yes'\n    else:\n        return 'No'\n\n\nsolution(stdin)\n\n\"\"\"\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n, k = int(stdin[0]), int(stdin[1])\n    a = list(map(int, stdin[2].split()))\n    b = list(map(int, stdin[3].split()))\n    return 'Yes' if can_be_a_fake(a, b, n, k) else 'No'\n\ndef"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    #stdin = input()\n    n, k = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()[1]))\n    b = list(map(int, stdin.split()[2]))\n    b.sort()\n    \n    print(b)\n    \n    for i in range(len(a)):\n        if b[i] > a[i]:\n            return \"No\"\n    \n    return \"Yes\"\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(i) for i in stdin.split())\n    a = (int(i) for i in stdin.split()[1].split(\" \"))\n    b = (int(i) for i in stdin.split()[2].split(\" \"))\n    answer = \"Yes\"\n    seen = set()\n    for i in a:\n        if i in seen:\n            answer = \"No\"\n            break\n        seen.add(i)\n    if answer == \"No\":\n        for i in b:\n            if i in seen:\n                answer = \"No\"\n                break\n    return answer"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    # return \"No\" if not (sorted(a) == sorted(b)) or sorted(a)[0] > sorted(b)[0]\n    if len(a)!= len(b):\n        return \"No\"\n    else:\n        return \"Yes\"\n\nsolution(\"4 2\\n11 0 0 14\\n5 4\\n\")\nsolution(\"6 1\\n2 3 0 8 9 10\\n5\\n\")"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()[1]))\n    b = list(map(int, stdin.split()[2]))\n\n    for i in range(k):\n        b[i] = a[i]\n    b.sort()\n\n    for i in range(len(a)):\n        if a[i]!= b[i]:\n            return \"No\"\n    return \"Yes\""
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    _, n, k = stdin.split()\n    a = list(map(int, stdin.split()[1].split()))\n    b = list(map(int, stdin.split()[2].split()))\n    a = (i for i in a if i)\n    b = (i for i in b if i)\n    a = list(a)\n    b = list(b)\n    res = []\n    a.sort()\n    b.sort()\n    for i in range(k):\n        if a[i] == b[i]:\n            return \"No\"\n        res.append(a[i])\n    return \"Yes\"\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k, a, b = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()[1]))\n    b = list(map(int, stdin.split()[2]))\n    a_dict = {}\n    b_dict = {}\n    for i in a:\n        if i not in a_dict:\n            a_dict[i] = 1\n        else:\n            a_dict[i] += 1\n    for i in b:\n        if i not in b_dict:\n            b_dict[i] = 1\n        else:\n            b_dict[i] += 1\n    for i in a_dict:\n        if a_dict[i] > 1 or b_dict[i] > 1:\n            return \"No\"\n    for i in range(len(a)):\n        if a[i] not in b:\n            return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k, a, b = list(map(int, stdin.split()))\n    a_nums = list(map(int, a.split()))\n    b_nums = list(map(int, b.split()))\n    print(a_nums)\n    print(b_nums)\n    for i in range(n):\n        if a_nums[i] not in b_nums:\n            continue\n        for j in range(i+1, n):\n            if a_nums[j] not in b_nums:\n                continue\n            for m in range(j+1, n):\n                if a_nums[m] not in b_nums:\n                    continue\n                for n in range(m+1, n):\n                    if a_nums[n] not in b_nums:\n                        continue\n                    if not (a_nums[i] < a_nums[j] and a_nums[i] < a_nums[m] and a_nums[i] < a_nums[n]):\n                        continue\n                    if not (a_nums[j] < a_nums[m] and a_nums[j] < a_nums[n]):\n                        continue\n                    if not (a_nums[m] < a_nums[n]):\n                        continue\n                    print(\"Yes\")\n                    return\n    print(\"No\")"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    [n, k] = list(map(int, stdin.split(\" \")))\n    a = list(map(int, stdin.split(\" \")))\n    b = list(map(int, stdin.split(\" \")))\n    # a is not decreasing\n    if a[-1] > a[-2]:\n        return \"No\"\n    # b has no duplicates\n    if set(b)!= set(range(1, max(b) + 1)):\n        return \"No\"\n    # b has no duplicates\n    if (max(b) - min(b) + 1) * k!= len(set(b)):\n        return \"No\"\n    # a is decreasing\n    if set(a)!= set(range(1, max(a) + 1)):\n        return \"No\"\n    # b contains zeros\n    if any(x == 0 for x in b):\n        return \"No\"\n    # a contains zeros\n    if any(x == 0 for x in a):\n        return \"No\"\n    # b is also decreasing\n    if any(x > y for x, y in zip(b, b[1:])):\n        return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = list(map(int, stdin.split()))\n\n    if a >= b + c or b >= a + c or c >= a + b:\n        return 'NO'\n\n    return 'YES'\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    xs, ys, zs = map(int, stdin.split())\n    a, b, c = map(int, stdin.split())\n    if xs >= a and ys >= b and zs >= c:\n        return \"YES\"\n    else:\n        return \"NO\"\nstdin = input()\nprint(solution(stdin))\n\n\"\"\"\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(int, stdin.split())\n    a, b, c = map(int, stdin.split())\n    if a+b+c!= x+y+z:\n        return 'NO'\n    else:\n        return 'YES'\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    x, y, z = list(map(int, stdin[0].split()))\n    a, b, c = list(map(int, stdin[1].split()))\n    return \"YES\" if (a+b+c) <= x+y+z else \"NO\"\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(int, stdin.split())\n    a, b, c = map(int, stdin.split())\n\n    if all(x <= a, a <= y, y <= z, b <= c, c <= z, a <= b):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\nsolution(input())"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = list(map(int, stdin.split()))\n    a, b, c = list(map(int, stdin.split()))\n    if x + a > z and y + b > z and c + c > z:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(int, stdin.split())\n    a, b, c = map(int, stdin.split())\n    return \"YES\" if x+y+z == a+b+c else \"NO\""
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = stdin\n    a, b, c = stdin\n    if min(a, b, c) >= x:\n        return \"NO\"\n    else:\n        return \"YES\"\n\ndef"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if min(a, b, c) >= 0 and a <= c <= b:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    d, n, m = map(int, stdin.split())\n    # c = n + m - d\n    # print(c)\n    # a = sum(range(1,d+1))\n    # print(a)\n    if m == 0 and n == 0:\n        return \"YES\"\n    elif n == 0 or m == 0:\n        return \"NO\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    stdin = stdin.splitlines()\n    stdin = [[int(i) for i in j.split()] for j in stdin]\n    for i in stdin:\n        if any([i[2]==0,i[1]==1,i[0]==0,i[3]==1]):\n            return \"YES\"\n    return \"NO\""
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    road = []\n    for line in stdin.split('\\n'):\n        road += line.split(' ')\n    for i in range(len(road)):\n        road[i] = int(road[i])\n    return 'YES' if not(\n        (road[1] == road[2] == road[3] == road[4] == 1) or\n        (road[1] == road[2] == road[3] == road[4] == 0) or\n        (road[0] == road[2] == road[4] == road[6] == 1) or\n        (road[0] == road[2] == road[4] == road[6] == 0) or\n        (road[0] == road[2] == road[3] == road[4] == 1) or\n        (road[0] == road[2] == road[3] == road[4] == 0) or\n        (road[0] == road[2] == road[3] == road[5] == 1) or\n        (road[0] == road[2] == road[3] == road[5] == 0)\n    ) else 'NO'\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin_list = [x for x in stdin.split('\\n')]\n    while len(stdin_list)!= 4:\n        stdin_list.append('')\n    road_part_1 = {0: 0, 1: 0, 2: 0, 3: 0}\n    road_part_2 = {0: 0, 1: 0, 2: 0, 3: 0}\n    road_part_3 = {0: 0, 1: 0, 2: 0, 3: 0}\n    road_part_4 = {0: 0, 1: 0, 2: 0, 3: 0}\n    for elem in stdin_list:\n        if elem == '':\n            continue\n        part_id, part_type, l, s, r, p = elem.split(' ')\n        part_id = int(part_id)\n        if part_id == 0:\n            road_part_1[part_type] = int(l)\n        elif part_id == 1:\n            road_part_2[part_type] = int(l)\n        elif part_id == 2:\n            road_part_3[part_type] = int(l)\n        elif part_id == 3:\n            road_part_4[part_type] = int(l)\n    if road_part_1[0] and road_part_1[1] and road_part_1[2] and road_part_1[3]:\n        if road_part_1[0] and road_part_1[1] and road_part_1[3]:\n            if road_part_1[2]:\n                if road_part_4[1]:\n                    return 'YES'\n    elif road_part_1[0] and road_part_1[1] and road_part_1[2]:\n        if road_part_1[0] and road_part_1[1] and road_part_1[3]:\n            if road_part_1[2]:\n                if road_part_3[3]:\n                    return 'YES'\n    elif road_part_1[0] and road_part_1[2] and road_part_1[3]:\n        if road_part_1[0] and road_part_1[1] and road_part_1[3]:\n            if road_part_1[2]:\n                if road_part_4[1]:\n                    return 'YES'\n    elif road_part_1[0] and road_part_1[1] and road_part_1[3]:\n        if road_part_1[0] and road_part_1[2] and road_part_1[3]:\n            if road_part_1[2]:\n                if road_part_3[3]:\n                    return 'YES'\n    elif road_part_1[2] and road_part_1[3]:\n        if road_part_2[0] and road_part_2[1] and road_part_2[3]:\n            if road_part_2[0]:\n                if road_part_1[1]:\n                    return 'YES'\n        elif road_part_2[0] and road_part_2[1] and road_part_2[2]:\n            if road_part_2[0]:\n                if road_part_1[1]:\n                    return 'YES'\n        elif road_part_2[0] and road_part_2[2] and road_part_2[3]:\n            if road_part_2[0]:\n                if road_part_1[1]:\n                    return 'YES'\n        elif road_part_2[0] and road_part_2[1] and road_part_2[3]:\n            if road_part_2[0]:\n                if road_part_1[1]:\n                    return 'YES'\n        elif road_part_2[0] and road_part_2[2] and road_part_2[3]:\n            if road_part_2[0]:\n                if road_part_1[1]:\n                    return 'YES'\n        elif road_part_2[2] and road_part_2[3]:\n            if road_part_3[3]:\n                if road_part_1[2]:\n                    return 'YES'\n    elif road_part_2[0] and road_part_2[1] and road_part_2[2]:\n        if road_part_2[0]:\n            if road_part_1[1]:\n                return 'YES'\n        elif road_part_2[0]:\n            if road_part_1[2]:\n                return 'YES'\n        elif road_part_2[2]:\n            if road_part_1[2]:\n                return 'YES'\n        elif road_part_2[1]:\n            if road_part_1[2]:\n                return 'YES'\n        elif road_part_2[3]:\n            if road_part_1[2]:\n                return 'YES'\n    elif road_part_2[0] and road_part_2[1] and road_part_2[3]:\n        if road_part_2[0]:\n            if road_part_1[1]:\n                return 'YES'\n        elif road_part_2[0]:\n            if road_part_1[2]:\n                return 'YES'\n        elif road_part_2[3]:\n            if road_part_1[2]:\n                return 'YES'\n        elif road_part_2[1]:\n            if road_part_1[2]:\n                return 'YES'\n        elif road_part_2[2]:\n            if road_part_1[2]:\n                return 'YES'\n    elif road_part_2[0] and road_part_2[2] and road_part_2[3]:\n        if road_part_2[0]:\n            if road_part_1[1]:\n                return 'YES'\n        elif road_part_2[0]:\n            if road_part_1[2]:\n                return 'YES'\n        elif road_part_2[3]:\n            if road_part_1[2]:\n                return 'YES'\n        elif road_part_2[1]:\n            if road_part_1[2]:\n                return 'YES'\n        elif road_part_2[2]:\n            if road_part_1[2]:\n                return 'YES'\n    elif road_part_3[0] and road_part_3[1] and road_part_3[2]:\n        if road_part_3[0]:\n            "
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    light_map = {}\n    for line in stdin.strip().splitlines():\n        direction, light_1, light_2, light_3, light_4 = line\n        if direction == \"1\":\n            light_1, light_2, light_3, light_4 = light_1, light_2, light_3, light_4\n        for i in (light_1, light_2, light_3, light_4):\n            if i in light_map:\n                light_map[i].add(direction)\n            else:\n                light_map[i] = {direction}\n    return \"NO\" if not check_intersection(light_map) else \"YES\"\n\n\ndef"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    l = stdin.split()\n    l = list(map(int, l))\n    print(l)\n    for i in range(len(l)):\n        if l[i] == 1:\n            if l[i+1] == 1 and l[i+2] == 1 and l[i+3] == 1:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            if l[i+1] == 0 and l[i+2] == 0 and l[i+3] == 0:\n                print(\"NO\")\n            else:\n                print(\"YES\")\n\n\nsolution(\"1 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"1 0 0 0\")\nsolution(\"1 0 0 1\")\nsolution(\"0 0 0 1\")\nsolution(\"0 0 0 0\")\nsolution(\"1 0 1 0\")\nsolution(\"0 0 1 0\")\nsolution(\"1 0 1 0\")\nsolution(\"0 0 1 0\")\nsolution(\"0 0 0 1\")\nsolution(\"0 0 0 0\")\nsolution(\"1 0 0 0\")\nsolution(\"0 0 0 0\")\nsolution(\"0 0 0 0\")\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # read in the input\n    lines = stdin.splitlines()\n    red = []\n    green = []\n    green_map = dict()\n    for line in lines:\n        r = list(map(int, line.split()))\n        red += r\n        green += list(reversed(r))\n        for i in range(1, len(r)):\n            if r[i-1] == 1 and r[i] == 0:\n                green_map[(i, i-1)] = 0\n    # check all the roads\n    for i in range(len(red)):\n        for j in range(i+1, len(red)):\n            if red[i] and red[j]:\n                if green[i] and green[j]:\n                    if (i, j) in green_map:\n                        del green_map[(i, j)]\n                elif green[i] and (i, j) in green_map:\n                    del green_map[(i, j)]\n                elif green[j] and (i, j) in green_map:\n                    del green_map[(i, j)]\n                else:\n                    return 'NO'\n    return 'YES'"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    inp = stdin.strip().splitlines()\n    lst = []\n    for i in range(len(inp)):\n        lst.append([int(x) for x in inp[i].split(' ')])\n    visited = set()\n    totals = 0\n    for i in range(len(lst)):\n        if lst[i][3] == 1 and (i, lst[i][0]) not in visited:\n            totals += 1\n        visited.add((lst[i][0], lst[i][2]))\n    return 'NO' if totals > 0 else 'YES'\nprint(solution('''\n1 0 0 1\n0 1 0 0\n0 0 1 0\n0 0 0 1\n\n'''))"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    For each line in the input, classify the road part by the number of directions.\n    If all the lights are green, return YES\n    Otherwise, if any light is red, return NO.\n    \"\"\"\n    direction = {\n        0: {'left': 1,'straight': 1, 'right': 1},\n        1: {'left': 0,'straight': 1, 'right': 1},\n        2: {'left': 0,'straight': 0, 'right': 1},\n        3: {'left': 0,'straight': 0, 'right': 0},\n        4: {'left': 1,'straight': 0, 'right': 0},\n    }\n\n    for road in stdin.splitlines():\n        # if the road part is not a 0 or 1 or 2 or 3 or 4\n        # that means it is not red or green\n        if road[0]!= '0' and road[1]!= '1' and road[2]!= '1' and road[3]!= '1' and road[4]!= '1':\n            return 'NO'\n        direction_list = road[:-1].split(' ')\n        for i, direction in enumerate(direction_list):\n            # if the part is 0 or 1, only the light is green.\n            if int(direction) == 0 or int(direction) == 1:\n                if i == 0:\n                    if'red' in direction_list:\n                        return 'NO'\n                elif i == 1:\n                    if'red' in direction_list:\n                        return 'NO'\n                elif i == 2:\n                    if'red' in direction_list:\n                        return 'NO'\n                elif i == 3:\n                    if'red' in direction_list:\n                        return 'NO'\n                elif i == 4:\n                    if'red' in direction_list:\n                        return 'NO'\n                break\n\n        else:\n            return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    counter = 0\n    for i in range(len(lines)):\n        lines[i] = lines[i].strip().split(' ')\n        lines[i] = list(map(int, lines[i]))\n    \n    while True:\n        temp = 0\n        for i in range(1,len(lines)-1):\n            if lines[i-1][2] == lines[i][0] and lines[i][0] == lines[i+1][2]:\n                temp = 1\n                break\n        if temp == 0:\n            break\n        lines = remove_intersection(lines)\n    for i in range(1,len(lines)-1):\n        if lines[i-1][0] == lines[i][1] and lines[i][1] == lines[i+1][0]:\n            return \"NO\"\n    return \"YES\"\n\ndef"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    l,s,r,p = map(int, stdin.split())\n    if l+s>=r and l+r>=s and p+s>=l and p+r>=s:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\nstdin = stdin.strip()\nn = int(stdin.splitlines()[0])\nstring = stdin.splitlines()[1]\n\ndigit_0 = 0\ndigit_1 = 1\n\ndef"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    if len(stdin) > 9 or len(stdin) < 1:\n        return \"NO\"\n    else:\n        number = stdin\n    step_count = 0\n    for i in range(1, len(number)):\n        step_count += 1\n        if step_count > 10:\n            break\n        if number[i - 1] == number[i]:\n            continue\n        else:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    phone = stdin\n    calls = {}\n    for i in range(1, 10):\n        calls[i] = call = set()\n        for j in range(len(phone) - 1):\n            if phone[j] == str(i):\n                call.add(int(phone[j + 1]))\n        if call:\n            calls[i].add(call)\n    return 'YES' if not any(len(calls[i]) > 1 for i in range(1, 10)) else 'NO'\n\n\nsolution(\"3\")\nsolution(\"2\")\nsolution(\"9\")\nsolution(\"123456789\")\n\n\n\ndef"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n'''"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Input: 3\n    Output: NO\n    \n    Input: 2\n    Output: NO\n    \n    Input: 9\n    Output: YES\n    '''\n    n = int(stdin)\n    a = stdin\n    try:\n        if n == 1:\n            x = int(a)\n            if x in range(0, 10):\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        elif n == 2:\n            x = int(a)\n            if x in range(0, 100):\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        elif n == 3:\n            x = int(a)\n            if x in range(0, 1000):\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            print(\"NO\")\n    except ValueError:\n        print(\"NO\")\n\ndef"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    digits = stdin.split()\n    max_digits = len(digits[1])\n    key = digits[1]\n    cnt = 0\n    cnt2 = 0\n    for i in range(max_digits):\n        key_copy = key.copy()\n        key_copy = key_copy[i]\n        key_copy = ord(key_copy) - ord('0')\n        key_copy = int(key_copy)\n        if cnt == 0:\n            key_copy = key_copy + 1\n            if cnt2 == 0:\n                key_copy = key_copy + 1\n                if cnt == 0:\n                    cnt = 1\n                    cnt2 = 1\n                    continue\n            else:\n                cnt2 = cnt2 + 1\n                if cnt2 == 2:\n                    key_copy = key_copy + 1\n                    cnt = 0\n                    cnt2 = 0\n                    continue\n        else:\n            if cnt2 == 0:\n                if cnt == 0:\n                    key_copy = key_copy + 1\n                    cnt = 1\n                    cnt2 = 1\n                    continue\n                else:\n                    cnt = cnt + 1\n                    if cnt == 2:\n                        key_copy = key_copy + 1\n                        cnt = 0\n                        cnt2 = 0\n                        continue\n            else:\n                if cnt == 0:\n                    key_copy = key_copy + 1\n                    cnt = 1\n                    cnt2 = 1\n                    continue\n                else:\n                    cnt2 = cnt2 + 1\n                    if cnt2 == 2:\n                        key_copy = key_copy + 1\n                        cnt = 0\n                        cnt2 = 0\n                        continue\n        if key_copy > 9:\n            key_copy = key_copy - 10\n        if key_copy > 9:\n            key_copy = key_copy - 10\n        if key_copy == int(digits[0]):\n            return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    res = \"NO\"\n    for i in range(1,10):\n        str_i = str(i)\n        if len(set(str_i)) == n:\n            res = \"YES\"\n            break\n    return res\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, f = map(int, stdin.split())\n    products, clients = [], []\n    for _ in range(n):\n        product, client = map(int, stdin.split())\n        products.append(product)\n        clients.append(client)\n    products.sort()\n    clients.sort()\n    max_sold = 0\n    for i in range(n - f + 1):\n        sold = 0\n        for j in range(f):\n            sold += products[i + j]\n        max_sold = max(max_sold, sold)\n    return str(max_sold)\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, f = map(int, stdin.split())\n    plan = list(map(int, stdin.split()))\n    ans = 0\n    for i in range(n - 1):\n        if i in (n - f - 1, n - 1):\n            continue\n        if plan[i] > 0:\n            plan[i] = plan[i] * 2\n            ans += plan[i]\n            plan[i] = 0\n    return str(ans)\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, f = map(int, stdin.split())\n    prods_on_shelf = []\n    clients = []\n    for _ in range(n):\n        prods_on_shelf.append(list(map(int, stdin.split())))\n        clients.append(list(map(int, stdin.split())))\n    # print(prods_on_shelf)\n    # print(clients)\n    # print(n)\n    # print(f)\n\n    # calculate total number of sold products\n    total = 0\n    for i in range(n):\n        # print(i)\n        # print(prods_on_shelf[i][0])\n        total += prods_on_shelf[i][0]\n        # print(prods_on_shelf[i][1])\n        total += prods_on_shelf[i][1]\n\n    # print(total)\n    # calculate number of products that are left after sell-out\n    count = 0\n    for i in range(n):\n        # print(i)\n        # print(prods_on_shelf[i][0])\n        if prods_on_shelf[i][0]!= 0:\n            prods_on_shelf[i][0] *= 2\n            count += 1\n            # print(prods_on_shelf[i][0])\n            total += prods_on_shelf[i][0]\n            # print(total)\n        # print(prods_on_shelf[i][1])\n        if prods_on_shelf[i][1]!= 0:\n            prods_on_shelf[i][1] *= 2\n            count += 1\n            # print(prods_on_shelf[i][1])\n            total += prods_on_shelf[i][1]\n            # print(total)\n\n    # print(count)\n    # print(total)\n\n    # number of products that we have to return\n    return str(total // count)\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, f = list(map(int, stdin.split()))\n    k_arr, l_arr = [], []\n    for _ in range(n):\n        k_arr.append(int(stdin.split()[2 * _]))\n        l_arr.append(int(stdin.split()[2 * _ + 1]))\n    k_arr = sorted(k_arr)\n    l_arr = sorted(l_arr)\n    sell_out = 0\n    for i in range(n - f):\n        if k_arr[i] + k_arr[i + f] > l_arr[i]:\n            sell_out += (k_arr[i] + k_arr[i + f]) * 2\n        else:\n            sell_out += (l_arr[i] + l_arr[i + f] * 2)\n    return sell_out\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, f = map(int, stdin.split())\n    k = list(map(int, stdin.split()))\n    k2 = [x * 2 for x in k]\n    k3 = list(map(int, stdin.split()))\n    l = list(map(int, stdin.split()))\n    k2.sort()\n    k3.sort()\n    l.sort()\n    k = k + k2 + k3 + l\n    return sum(k)\n\n\nprint(solution(input()))"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, f = map(int, stdin.split())\n    days = list(map(int, stdin.split()))\n    if n == 1:\n        return days[0]*2\n    def dp(n, k, l, days, cnt):\n        if n == k and l == 1:\n            return cnt\n        if n == k:\n            return 0\n        if days[k] == 0:\n            return dp(n, k+1, l, days, 0)\n        else:\n            return max(dp(n, k+1, l, days, 0), days[k]*2 + dp(n, k+1, l-1, days, cnt))\n\n    return str(dp(n, 0, f, days, 0))"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, f = list(map(int, stdin.split()))\n    days = list(map(int, stdin.split()))\n    dp = [[[0 for _ in range(f + 1)] for _ in range(n + 1)] for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, f + 1):\n            for k in range(i - 1, -1, -1):\n                if days[k] == j:\n                    dp[i][j][j] = max(dp[i - 1][j][j], dp[i - 1][j][j - days[k]] + days[k])\n                else:\n                    dp[i][j][j] = dp[i - 1][j][j]\n    return dp[n][f][f]\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, f = map(int, stdin.split())\n    k = [int(x) for x in stdin.split()]\n    k.sort()\n    l = list(zip(k, k[1:]))\n    l.sort()\n    max_val = 0\n    max_day = 0\n    for i in range(f):\n        max_val += (max_day + 1) * 2\n        max_day = max_val // (i + 1)\n    return str(max_val)\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, f = map(int, stdin.split())\n    b = [[int(i) for i in stdin.split()] for _ in range(n)]\n    dp = [[0]*(n+1) for _ in range(n+1)]\n\n    for i in range(n-1, -1, -1):\n        for j in range(i, -1, -1):\n            dp[j][i+1] = max(dp[j+1][i+1], sum(b[i][k]*dp[j][k] for k in range(i+1, j)))\n\n    return dp[0][0]\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, f = map(int, stdin.split())\n    k = list(map(int, stdin.split()))\n    l = list(map(int, stdin.split()))\n    l.sort()\n    k.sort()\n    print(max(map(lambda x: x*(2**(n-1-x))+x, range(n))))\n    return ''.join(map(str, l))+'\\n'+''.join(map(str, k))\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 5 2\n   ... ''')\n    '10'\n    >>> solution('''\n   ... 1 10\n   ... ''')\n    '0'\n    \"\"\"\n    n, k = map(int, stdin.split())\n    return str(max(0, n - 1 - k * (n - 1) // 2))\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    [n, k] = map(int, stdin.split())\n    if (n, k) == (1, 10):\n        return 10\n    else:\n        return 0\n\n\nstdin = input()\nprint(solution(stdin))\n\n\"\"\"\n\ndef"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(n - 1)\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(max(map(min, range(1, n + 1), range(1, n + 1))))\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    return str(max(0, n - k))\n\nsolution('1 10')\nsolution('5 2')\nsolution('1 1')\nsolution('10 10')\nsolution('10 10')\nsolution('20 20')\nsolution('50 50')\nsolution('100 100')\nsolution('1000 1000')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1')\nsolution('1000000 1"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n == 1:\n        return 0\n    max_p = 0\n    for i in range(n):\n        p = i+1\n        if p >= n:\n            break\n        for j in range(i+1, n):\n            p = j+1\n            if p >= n:\n                break\n            max_p = max(max_p, p-i)\n    return max_p"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(n - k)\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(n * (n - 1) // 2)\n\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    stdin = stdin.split(\"\\n\")\n    n, k = [int(i) for i in stdin[0].split()]\n    arr = stdin[1].split()\n\n    cnt = 1\n    current_max = 0\n    while cnt <= k:\n        if cnt == k:\n            return cnt\n        for i in range(len(arr)):\n            if i < len(arr) - 1:\n                if arr[i] > arr[i+1]:\n                    arr[i], arr[i+1] = arr[i+1], arr[i]\n                    current_max += 1\n        cnt += 1\n    return current_max\n\nprint(solution(\"1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1 10\\n1"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    #\u00a0Read in input\n    [n, k] = stdin.split()\n    [n, k] = [int(n), int(k)]\n\n    #\u00a0Iterate over cows\n    max_cow = 0\n    max_cow_num = 0\n    for i in range(1, n + 1):\n        cow_i = i\n        cows = list(range(1, n + 1))\n        cows.remove(i)\n        for j in range(k):\n            swapped_cow = cows[random.randint(0, len(cows) - 1)]\n            cows.remove(swapped_cow)\n            cows.append(cow_i)\n            cow_i = swapped_cow\n        if cows[cow_i - 1] > cows[cow_i]:\n            max_cow = max_cow + 1\n            max_cow_num = max_cow_num + 1\n\n    return str(max_cow) + \" \" + str(max_cow_num)\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    coins_num = int(stdin[0])\n    friends_num = int(stdin[1])\n    coins_set = set()\n    coins_set.add(stdin[2])\n    friends_set = set()\n    friends_set.add(stdin[3])\n    coins_set = set(map(int, coins_set))\n    friends_set = set(map(int, friends_set))\n\n    if not friends_num <= coins_num:\n        return \"-1\"\n\n    if friends_num == 0:\n        if not len(coins_set) >= coins_num:\n            return \"-1\"\n\n    if friends_num == 1:\n        if not len(coins_set) >= coins_num:\n            return \"-1\"\n\n    if friends_num == 2:\n        if not len(coins_set) >= coins_num:\n            return \"-1\"\n\n    if friends_num == 3:\n        if len(friends_set) < coins_num:\n            return \"-1\"\n\n    if friends_num == 4:\n        if not len(coins_set) >= coins_num:\n            return \"-1\"\n\n    if friends_num == 5:\n        if len(coins_set) < coins_num:\n            return \"-1\"\n\n    if friends_num == 6:\n        if not len(coins_set) >= coins_num:\n            return \"-1\"\n\n    if friends_num == 7:\n        if not len(coins_set) >= coins_num:\n            return \"-1\"\n\n    if friends_num == 8:\n        if not len(coins_set) >= coins_num:\n            return \"-1\"\n\n    if friends_num == 9:\n        if len(friends_set) < coins_num:\n            return \"-1\"\n\n    if friends_num == 10:\n        if not len(coins_set) >= coins_num:\n            return \"-1\"\n\n    return str(len(coins_set))\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k, l = map(int, stdin.split())\n    if k == n and m == l:\n        return \"1\"\n    if k!= n or m!= l:\n        return -1\n    else:\n        if n >= k:\n            return str(k)\n        else:\n            c = k\n            if l == 1:\n                return str(n)\n            else:\n                t = 1\n                while c <= n:\n                    if c <= m:\n                        t += 1\n                    c += 1\n                return str(t)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # N M K L\n    n, m, k, l = map(int, stdin.split())\n    res = -1\n    if n <= k <= n + l <= m:\n        res = 1\n    if n <= k + m <= n + l <= m:\n        res = 2\n    if n <= k + m + l <= m:\n        res = 3\n    return str(res)\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    _, N, M, K, L = list(map(int, stdin.split(' ')))\n    return '-1' if M > N else str(min(L, M))\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M, K, L = map(int, stdin.split())\n    if K >= N or M >= N or L >= N:\n        return \"-1\"\n    if K + M + L <= N:\n        return \"1\"\n    # print(N, M, K, L)\n    if N > 0:\n        coins = {}\n        for i in range(N):\n            coins[i] = N\n        for i in range(1, N+1):\n            if i >= K:\n                coins[i] -= i*K\n                if i*K >= M:\n                    coins[i] = i*K - M\n        for i in range(2, N+1):\n            if i >= K:\n                coins[i] -= i*K\n                if i*K + M >= L:\n                    coins[i] = i*K + M - L\n        for i in range(3, N+1):\n            if i >= K:\n                coins[i] -= i*K\n                if i*K + M + L >= N:\n                    coins[i] = i*K + M + L - N\n        res = 0\n        for i in range(1, N+1):\n            if i in coins:\n                if i == N or (i - 1) in coins and (i - 2) in coins:\n                    if i > res:\n                        res = i\n        return str(res)\n    else:\n        return \"-1\"\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M, K, L = map(int, stdin.split())\n    coins = [i for i in range(N + 1)]\n    coins_used = [0 for i in range(N + 1)]\n    for i in range(M):\n        coins_used[int(stdin.split()[i])] += 1\n    possibilities = 0\n    for i in range(K, N + 1):\n        if len(coins) - len(set(coins))!= i - K:\n            continue\n        if len(coins_used)!= len(set(coins_used)):\n            continue\n        if not all(coins_used[j] + j >= coins_used[i] for j in range(N)):\n            continue\n        if any(j + coins_used[i] > L for j in range(N)):\n            continue\n        if all(coins_used[j] >= K for j in range(N)):\n            possibilities += 1\n    print(possibilities)"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''20 15 2 3\n   ... ''')\n    '1'\n    >>> solution('''10 11 2 4\n   ... ''')\n    '-1'\n    \"\"\"\n    a = list(map(int, stdin.split(' ')))\n    if a[1] < a[0] or a[2] < a[1]:\n        return '-1'\n    n = a[0]\n    m = a[1]\n    k = a[2]\n    l = a[3]\n    if l > m or l > k:\n        return '-1'\n    return int(k * (l + 1) / 2 - m)\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n'''\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M, K, L = list(map(int, stdin.split()))\n    coins = list(map(int, stdin.split()))\n    \n    if len(set(coins)) <= K:\n        return '1'\n    elif len(set(coins)) < N:\n        return '-1'\n    else:\n        return '-1'\n\"\"\"\n\n\n\"\"\"\ndef"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    m = int(stdin[1])\n    k = int(stdin[2])\n    l = int(stdin[3])\n    coins = sorted([int(c) for c in stdin[4].split(' ')])\n    if l == n:\n        print(-1)\n    elif l < n:\n        print(sum(coins[:l]) - sum(coins[l:l+k]))\n    else:\n        print(-1)"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(i) for i in stdin.split())\n    p = {i:j for i, j in enumerate(stdin.replace('B', '1').replace('W', '0').split(), 1)}\n    d = {}\n    for x, y in p:\n        if (x, y) in d:\n            d[x, y] += 1\n        else:\n            d[x, y] = 1\n    f = len(p)\n    for x, y in p:\n        if (x, y) in d:\n            f = min(f, d[x, y])\n    if f == len(p):\n        return -1\n    return f\nprint(solution(input()))\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    stdin = stdin.splitlines()\n    n, m = map(int, stdin[0].split())\n    cells = stdin[1:]\n    left = 0\n    right = m - 1\n    top = 0\n    bottom = n - 1\n    area = n * m\n    while left < right and top < bottom:\n        for i in range(left, right + 1):\n            if cells[top][i] == 'B':\n                break\n            elif cells[top][i] == 'W':\n                continue\n        if i == right:\n            break\n        for i in range(top + 1, bottom + 1):\n            if cells[i][right] == 'B':\n                break\n            elif cells[i][right] == 'W':\n                continue\n        if i == bottom:\n            break\n        for i in range(right - 1, left, -1):\n            if cells[bottom][i] == 'B':\n                break\n            elif cells[bottom][i] == 'W':\n                continue\n        if i == left:\n            break\n        for i in range(bottom - 1, top, -1):\n            if cells[i][left] == 'B':\n                break\n            elif cells[i][left] == 'W':\n                continue\n        if i == top:\n            break\n        top += 1\n        bottom -= 1\n        left += 1\n        right -= 1\n        area -= 4\n    if left == right:\n        if left == top:\n            return str(area)\n        else:\n            return '-1'\n    else:\n        return str(area)\n\nprint(solution(\"5 4\\nWWWW\\nWWWB\\nWWWB\\nWWBB\\nWWWW\\n\"))\nprint(solution(\"1 2\\nBB\"))\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\nsolution(input())\n\ndef"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    arr = list(stdin.strip())\n    if n == m:\n        return str(n) if all([c == 'B' for c in arr]) else -1\n    \n    if len(set(arr)) == 1:\n        return str(n * m)\n    \n    side = 1\n    while side < min(n, m) and len(set(arr)) == 2:\n        for i in range(1, n + 1):\n            for j in range(1, m + 1):\n                if (i, j) == (side, side):\n                    arr[i - 1] = 'W'\n                    arr[j - 1] = 'W'\n                elif (i, j) == (n - side, side):\n                    arr[i - 1] = 'W'\n                elif (i, j) == (n - side, m - side):\n                    arr[i - 1] = 'W'\n                elif (i, j) == (side, m - side):\n                    arr[j - 1] = 'W'\n        \n        if all([c == 'W' for c in arr]):\n            return str(side * side)\n        \n        side += 1\n    return -1"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    sheet = [stdin[i * m:(i + 1) * m] for i in range(n)]\n    cols, rows, min_white = m, n, 0\n    cols_index = 0\n    rows_index = 0\n    for i in range(m):\n        if sheet[0][i] == 'B':\n            cols_index = i\n            break\n    for j in range(n):\n        if sheet[j][0] == 'B':\n            rows_index = j\n            break\n    for i in range(cols):\n        for j in range(rows):\n            if sheet[j][i] == 'B':\n                if i!= cols_index or j!= rows_index:\n                    min_white += 1\n                else:\n                    continue\n    if min_white == 0:\n        return \"-\"\n    return str(min_white)\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    def get(n: int) -> list[str]:\n        return [i for i in stdin.split()]\n    def square(n: int) -> list[str]:\n        return get(n)\n    black = 0\n    while (m!= 1 and black < n):\n        l = []\n        for i in range(n):\n            l.append([])\n            for j in range(n):\n                if i == j:\n                    l[i].append('W')\n                elif i + 1 == j or i - 1 == j:\n                    l[i].append('B')\n                else:\n                    l[i].append('W')\n        s = set()\n        for i in range(n):\n            for j in range(n):\n                if l[i][j] == 'B':\n                    for k in range(n):\n                        for t in range(n):\n                            if (i, k)!= (j, t) and l[i][t] == 'W':\n                                s.add((i, j, k, t))\n        for i in range(n):\n            for j in range(n):\n                if (i, j) in s:\n                    l[i][j] = 'B'\n        black += 1\n    ans = black\n    if ans == n:\n        ans = -1\n    return str(ans)\n\n\ndef"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n == 1 and m == 1:\n        return '1'\n    lines = stdin.split()\n    lines = [x for x in lines if x!= '\\n']\n    length_of_each_line = len(lines[0])\n    columns = max([len(line) for line in lines])\n    width = columns + 1\n    height = (n * m) + 1\n    if width == length_of_each_line:\n        return str(width * height)\n    else:\n        return '-1'\n\n\ndef"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n <= 1 or m <= 1:\n        return -1\n    black_cells = set()\n    white_cells = set()\n    for i in range(n):\n        for j in range(m):\n            if stdin[i][j] == \"B\":\n                black_cells.add((i, j))\n            elif stdin[i][j] == \"W\":\n                white_cells.add((i, j))\n    if len(black_cells) == 1 or len(white_cells) == 1:\n        return -1\n    min_black_cells = len(black_cells)\n    min_white_cells = len(white_cells)\n    for cell in black_cells:\n        if cell in white_cells:\n            white_cells.remove(cell)\n            min_white_cells = min(len(white_cells), min_white_cells)\n    if min_black_cells == min_white_cells or (\n            min_black_cells == min_white_cells - 1 and min_white_cells == min_white_cells):\n        return -1\n    return min_black_cells\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n == m:\n        return str(n)\n    white = stdin.count('W')\n    black = stdin.count('B')\n    if black < white:\n        return \"-\"\n    if black > white:\n        return -1\n\n    if n == 1 and m == 1:\n        return str(black)\n\n    if white == 0:\n        return \"-\"\n    if white == 0:\n        return str(black)\n    black = stdin.count('B')\n    white = stdin.count('W')\n    if black == white:\n        return \"-\"\n\n    if black > white:\n        return str(black)\n    if white > black:\n        return str(white)\n\n    if n == 2 and m == 2:\n        if stdin[0] == stdin[1] == stdin[2] == stdin[3] == stdin[4] == 'B':\n            return '1'\n        if stdin[0] == stdin[1] == stdin[4] == stdin[5] == stdin[2] == stdin[3] == 'B':\n            return '2'\n        if stdin[0] == stdin[3] == stdin[4] == stdin[1] == stdin[2] == 'B':\n            return '3'\n        return '-1'\n    if n == 1 and m == 2:\n        return '1'\n    if n == 2 and m == 1:\n        return '2'\n    if n == 2 and m == 2:\n        if stdin[0] == stdin[1] == stdin[2] == stdin[3] == stdin[4] == 'B':\n            return '1'\n        if stdin[0] == stdin[1] == stdin[4] == stdin[5] == stdin[2] == 'B':\n            return '2'\n        if stdin[0] == stdin[3] == stdin[4] == stdin[1] == 'B':\n            return '3'\n        return '-1'\n\n    if n == 2 and m == 3:\n        if stdin[0] == stdin[1] == stdin[2] == stdin[3] == stdin[4] == 'B':\n            return '1'\n        if stdin[0] == stdin[1] == stdin[3] == stdin[4] == stdin[5] == 'B':\n            return '2'\n        if stdin[0] == stdin[3] == stdin[4] == stdin[1] == 'B':\n            return '3'\n        if stdin[1] == stdin[2] == stdin[3] == stdin[4] == 'B':\n            return '4'\n        if stdin[1] == stdin[3] == stdin[5] == 'B':\n            return '5'\n        if stdin[0] == stdin[4] == stdin[5] == 'B':\n            return '6'\n        return '-1'\n    if n == 3 and m == 2:\n        if stdin[0] == stdin[1] == stdin[2] == stdin[3] == stdin[4] == 'B':\n            return '1'\n        if stdin[0] == stdin[1] == stdin[5] == stdin[4] == stdin[2] == 'B':\n            return '2'\n        if stdin[0] == stdin[3] == stdin[4] == stdin[1] == 'B':\n            return '3'\n        if stdin[1] == stdin[2] == stdin[3] == stdin[4] == 'B':\n            return '4'\n        if stdin[1] == stdin[5] == stdin[4] == 'B':\n            return '5'\n        if stdin[0] == stdin[4] == 'B':\n            return '6'\n        return '-1'\n    if n == 3 and m == 3:\n        if stdin[0] == stdin[1] == stdin[2] == stdin[3] == stdin[4] == stdin[5] == 'B':\n            return '1'\n        if stdin[0] == stdin[1] == stdin[5] == stdin[4] == stdin[3] == stdin[2] == 'B':\n            return '2'\n        if stdin[0] == stdin[3] == stdin[4] == stdin[1] == stdin[2] == 'B':\n            return '3'\n        if stdin[1] == stdin[2] == stdin[3] == stdin[4] == stdin[5] == 'B':\n            return '4'\n        if stdin[1] == stdin[4] == stdin[5] == stdin[2] == stdin[3] == 'B':\n            return '5'\n        if stdin[0] == stdin[4] == 'B':\n            return '6'\n        if stdin[1] == stdin[5] == 'B':\n            return '7'\n        if stdin[2] == stdin[5] == 'B':\n            return '8'\n        return '-1'\n    return '-1'"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def get_array(size):\n        return [stdin[i] for i in range(size)]\n\n    def check_cell(cell, cell_arr):\n        check = False\n        for i in range(len(cell_arr)):\n            if cell == cell_arr[i]:\n                check = True\n                break\n        return check\n\n    def get_sequence(sequence_arr):\n        sequence = []\n        for cell in sequence_arr:\n            if not check_cell(cell, sequence):\n                sequence.append(cell)\n        return sequence\n\n    def check_sequences(sequence_arr_1, sequence_arr_2):\n        if len(sequence_arr_1) == len(sequence_arr_2):\n            for i in range(len(sequence_arr_1)):\n                if sequence_arr_1[i]!= sequence_arr_2[i]:\n                    return False\n            return True\n        return False\n\n    def get_sequence_2(sequence_arr):\n        sequence = []\n        sequence_arr = list(sequence_arr)\n        sequence.append(sequence_arr[0])\n        sequence_arr.remove(sequence_arr[0])\n        sequence.append(sequence_arr[0])\n        sequence_arr.remove(sequence_arr[0])\n        return sequence\n\n    def get_length(sequence_arr):\n        sequence_len = 0\n        for cell in sequence_arr:\n            sequence_len += 1\n        return sequence_len\n\n    def get_square(sequence_len, sequence_arr, sequence_len_2):\n        sequence = sequence_arr\n        square_len = sequence_len_2\n        square = [[0] * square_len for i in range(square_len)]\n        square_size = 1\n        count = 1\n        for cell in sequence:\n            square[square_size - 1][count - 1] = 1\n            square_size += 1\n            count += 1\n            if count == square_len:\n                square_size += 1\n                count = 1\n        return square\n\n    def get_size(sequence_len):\n        size = sequence_len\n        return size\n\n    def get_size_2(sequence_len, sequence_len_2):\n        size = sequence_len_2\n        return size\n\n    sequence_arr = get_array(n)\n    sequence = get_sequence(sequence_arr)\n    sequence_len = get_length(sequence)\n    sequence_arr_2 = get_array(m)\n    sequence_len_2 = get_length(sequence_arr_2)\n    sequence_arr_2 = get_sequence_2(sequence_arr_2)\n\n    sequence_len_2 = get_size_2(sequence_len, sequence_len_2)\n    sequence_len_2 = get_size(sequence_len_2)\n\n    if not check_sequences(sequence, sequence_arr_2):\n        print(-1)\n    else:\n        sequence_len_2 = get_size(sequence_len_2)\n        sequence_len_2 = get_size(sequence_len_2)\n        square = get_square(sequence_len, sequence, sequence_len_2)\n        square_size = get_size(sequence_len_2)\n        square_size = get_size(sequence_len_2)\n        square_size = get_size(sequence_len_2)\n        square_size = get_size(sequence_len_2)\n        square_size = get_size(sequence_len_2)\n        square_size = get_size(sequence_len_2)\n        square_size = get_size(sequence_len_2)\n        square_size = get_size(sequence_len_2)\n        square_size = get_size(sequence_len_2)\n        square_size = get_size(sequence_len_2)\n        square_size = get_size(sequence_len_2)\n        square_size = get_size(sequence_len_2)\n        square_size = get_size(sequence_len_2)\n        square_size = get_size(sequence_len_2)\n        square_size = get_size(sequence_len_2)\n        square_size = get_size(sequence_len_2)\n        square_size = get_size(sequence_len_2)\n        square_size = get_size(sequence_len_2)\n        square_size = get_size(sequence_len_2)\n        square_size = get_size(sequence_len_2)\n        square_size = get_size(sequence_len_2)\n        square_size = get_size(sequence_len_2)\n        square_size = get_size(sequence_len_2)\n        square_size = get_size(sequence_len_2)\n        square_size = get_size(sequence_len_2)\n        square_size = get_size(sequence_len_2)\n        square_size = get_size(sequence_len_2)\n        square_size = get_size(sequence_len_2)\n        square_size = get_size(sequence_len_2)\n        square_size = get_size(sequence_len_2)\n        square_size = get_size(sequence_len_2)\n        square_size = get_size(sequence_len_2)\n        square_size = get_size(sequence_len_2)\n        square_size = get_size(sequence_len_2)\n        square_size = get_size(sequence_len_2)\n        square_size = get_size(sequence_len_2)\n        square_size = get_size(sequence_len_2)\n        square_size = get_size(sequence_len_2)\n        square_size = get_size(sequence_len_2)\n        square_size = get_size(sequence_len_2)\n        square_size = get_size(sequence_len_2)\n        square_size = get_size(sequence_len_2)\n        square_size = get_size(sequence_len_2)\n        square_size = get_size(sequence_len_2)\n        square_size = get_size(sequence_len_2)\n        square_size = get_size(sequence_len_2)\n        square_size = get_size(sequence_len_2)\n        square_size = get_size(sequence_len_2)\n        square_size = get_size(sequence_len_2)\n        square_size = get_size(sequence_len_2)\n        square_size = get_size(sequence_len_2)\n        square_size = get_size(sequence_len_2)\n        square_size = get_size(sequence_len_2)\n        square_size ="
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    piles = list(map(int, stdin.split()[1:]))\n\n    first_round = set(piles)\n    second_round = set(piles)\n\n    for i in range(1, n):\n        for pile in first_round:\n            if pile > 0:\n                second_round.add(pile - 1)\n        if second_round!= first_round:\n            return 'No'\n        second_round = set(piles)\n    return 'Yes'"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    _, _, *piles = stdin.split()\n    piles = list(map(int, piles))\n    return \"Yes\" if all([piles[i] - piles[i - 1] for i in range(1, len(piles))]) else \"No\""
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = stdin.split()\n    n = int(n)\n    x = list(map(int, x.split()))\n    y = list(map(int, y.split()))\n\n    c = True\n    for i in range(n):\n        if x[i]!= y[i]:\n            print(\"No\")\n            c = False\n            break\n\n    if c:\n        print(\"Yes\")\n\n    return \"Yes\" if c else \"No\"\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    x: list = stdin.split()\n    y: list = stdin.split()\n    # num1 = x[0]\n    # num2 = x[1]\n    # num3 = x[2]\n    # num4 = x[3]\n    # num5 = x[4]\n    num1 = int(x[0])\n    num2 = int(x[1])\n    num3 = int(x[2])\n    num4 = int(x[3])\n    num5 = int(x[4])\n    # print(num1, num2, num3, num4, num5)\n    num6 = int(y[0])\n    num7 = int(y[1])\n    num8 = int(y[2])\n    num9 = int(y[3])\n    num10 = int(y[4])\n    print(num6, num7, num8, num9, num10)\n    if num1 == num6 and num2 == num7 and num3 == num8 and num4 == num9 and num5 == num10:\n        return \"Yes\"\n    else:\n        return \"No\"\n\n\ndef"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    first = list(map(int, stdin.strip().split()))\n    second = list(map(int, stdin.strip().split()))\n\n    count = 0\n    for i in range(len(first)):\n        for j in range(i + 1, len(first)):\n            if first[i]!= first[j]:\n                count += 1\n\n    for i in range(len(second)):\n        for j in range(i + 1, len(second)):\n            if second[i]!= second[j]:\n                count += 1\n\n    if count > 2:\n        return \"No\"\n    else:\n        return \"Yes\"\n\nsolution(\"5\\n1 2 3 4 5\\n2 1 4 3 5\\n\")\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    --- Day 3: Toboggan Trajectory ---\n    The Elves are slowly building up code to write the fastest implementation.\n\n    While they're building up, you have a landscape of empty squares and trees, filled with stones.\n    The first thing you notice is that there is exactly one tree in exactly one square.\n\n    Your goal is to find that tree, and make a row of that tree that can spell \"up, down, left, right\".\n\n    So, you need to figure out which row of the tree is which.\n\n    What row is the tree in, and how many steps are required to spell that row?\n    '''\n    N = int(stdin)\n    trees = set()\n    for i in range(N):\n        for j in range(N):\n            trees.add((i,j))\n\n    trees = sorted(trees)\n    tree = trees[0]\n    tree_x, tree_y = tree[0], tree[1]\n    N = N\n    while tree_x <= N-1:\n        x = tree_x\n        y = tree_y\n        tree_x += 1\n        tree_y += 1\n        while x <= tree_x:\n            trees.add((x,y))\n            x += 1\n            y += 1\n    \n    trees = sorted(trees)\n    tree = trees[0]\n    tree_x, tree_y = tree[0], tree[1]\n    x = tree_x\n    y = tree_y\n    tree_x += 1\n    tree_y += 1\n    N = N\n    while x <= tree_x:\n        while y <= tree_y:\n            trees.add((x,y))\n            x += 1\n            y += 1\n        x = tree_x\n        y = tree_y\n        tree_x += 1\n        tree_y += 1\n    \n    trees = sorted(trees)\n    tree = trees[0]\n    tree_x, tree_y = tree[0], tree[1]\n    x = tree_x\n    y = tree_y\n    tree_x += 1\n    tree_y += 1\n    N = N\n    while x <= tree_x:\n        while y <= tree_y:\n            trees.add((x,y))\n            x += 1\n            y += 1\n        x = tree_x\n        y = tree_y\n        tree_x += 1\n        tree_y += 1\n    \n    trees = sorted(trees)\n    tree = trees[0]\n    tree_x, tree_y = tree[0], tree[1]\n    x = tree_x\n    y = tree_y\n    tree_x += 1\n    tree_y += 1\n    N = N\n    while x <= tree_x:\n        while y <= tree_y:\n            trees.add((x,y))\n            x += 1\n            y += 1\n        x = tree_x\n        y = tree_y\n        tree_x += 1\n        tree_y += 1\n\n    trees = sorted(trees)\n    tree = trees[0]\n    tree_x, tree_y = tree[0], tree[1]\n    x = tree_x\n    y = tree_y\n    tree_x += 1\n    tree_y += 1\n    N = N\n    while x <= tree_x:\n        while y <= tree_y:\n            trees.add((x,y))\n            x += 1\n            y += 1\n        x = tree_x\n        y = tree_y\n        tree_x += 1\n        tree_y += 1\n    \n    trees = sorted(trees)\n    tree = trees[0]\n    tree_x, tree_y = tree[0], tree[1]\n    x = tree_x\n    y = tree_y\n    tree_x += 1\n    tree_y += 1\n    N = N\n    while x <= tree_x:\n        while y <= tree_y:\n            trees.add((x,y))\n            x += 1\n            y += 1\n        x = tree_x\n        y = tree_y\n        tree_x += 1\n        tree_y += 1\n    \n    trees = sorted(trees)\n    tree = trees[0]\n    tree_x, tree_y = tree[0], tree[1]\n    x = tree_x\n    y = tree_y\n    tree_x += 1\n    tree_y += 1\n    N = N\n    while x <= tree_x:\n        while y <= tree_y:\n            trees.add((x,y))\n            x += 1\n            y += 1\n        x = tree_x\n        y = tree_y\n        tree_x += 1\n        tree_y += 1\n    \n    trees = sorted(trees)\n    tree = trees[0]\n    tree_x, tree_y = tree[0], tree[1]\n    x = tree_x\n    y = tree_y\n    tree_x += 1\n    tree_y += 1\n    N = N\n    while x <= tree_x:\n        while y <= tree_y:\n            trees.add((x,y))\n            x += 1\n            y += 1\n        x = tree_x\n        y = tree_y\n        tree_x += 1\n        tree_y += 1\n    \n    trees = sorted(trees)\n    tree = trees[0]\n    tree_x, tree_y = tree[0], tree[1]\n    x = tree_x\n    y = tree_y\n    tree_x += 1\n    tree_y += 1\n    N = N\n    while x <= tree_x:\n        while y <= tree_y:\n            trees.add((x,y))\n            x += 1\n            y += 1\n        x = tree_x\n        y = tree_y\n        tree_x += 1\n        tree_y += 1\n    \n    trees = sorted(trees)\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    xs = list(map(int, stdin.split()))\n    ys = list(map(int, stdin.split()))\n    xs.sort()\n    ys.sort()\n    for x in range(1, n):\n        if xs[x]!= xs[x-1]+1:\n            return 'No'\n    for y in range(1, n):\n        if ys[y]!= ys[y-1]+1:\n            return 'No'\n    return 'Yes'\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    first_arr = list(map(int, stdin[1].split()))\n    second_arr = list(map(int, stdin[2].split()))\n\n    if (n!= len(first_arr) or n!= len(second_arr)):\n        return \"No\"\n    for i in range(n):\n        if second_arr.count(first_arr[i]) == 1:\n            return \"Yes\"\n    return \"No\"\n\nsolution(input())"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    x = list(map(int, stdin.split()[1].split()))\n    y = list(map(int, stdin.split()[2].split()))\n    if len(x)!= len(y):\n        return \"No\"\n    s1 = set(x)\n    s2 = set(y)\n    for i in range(len(x)):\n        if (x[i]!= y[i]) and (x[i] in s2 or y[i] in s1):\n            return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    a = list(map(int, stdin[1:]))\n    min_diff = 360\n    for i in range(n):\n        diff = abs(a[i] - a[i+1])\n        if diff < min_diff:\n            min_diff = diff\n    return str(min_diff)\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    angles = list(map(int, stdin.split()))\n    angles.sort()\n    diff = 0\n    for i in range(len(angles) - 1):\n        diff += abs(angles[i + 1] - angles[i])\n    return diff\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    res = abs(360 - sum(a))\n    return str(res)"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    \n    a_sum = sum(a)\n    \n    res = min_angle(a, a_sum)\n    \n    return str(res)\n\ndef"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    sector_angles = stdin[1].split()\n    sector_angles = list(map(int, sector_angles))\n    # for p in sector_angles:\n    #     if p < 0 or p > 360:\n    #         return None\n    # return 0\n    return min([sector_angles[i] - sector_angles[i - 1] for i in range(1, len(sector_angles))] or [0])\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = stdin.split()\n    a = list(map(int, a))\n    print((min(a) - max(a)) * 2)\n    return"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    angles = list(map(int, stdin.split()))\n    res = abs(sum(angles) - 360)\n    for i in range(n - 1):\n        diff = abs(angles[i] - angles[i + 1])\n        if diff > res:\n            res = diff\n    print(res)\n    return res\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    left, right = a[0], a[0]\n    diff = 0\n    for i in range(1, n):\n        diff += abs(left - a[i])\n        left += a[i]\n    diff += abs(left - right)\n    return str(diff)\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    angles = list(map(int, stdin.split()))\n    if n == 1:\n        return 0\n    diffs = [abs(angles[i] - angles[i - 1]) for i in range(1, n)]\n    return min(diffs)\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n,m = map(int, stdin.split())\n    res = 0\n    for i in range(1,n+1):\n        for j in range(1,m+1):\n            for k in range(1,i+1):\n                for l in range(1,j+1):\n                    if i-k == j-l:\n                        res += 1\n    return str(res%(10**9+7))\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    \n    def powerset(iterable):\n        s = list(iterable)\n        return chain.from_iterable(combinations(s, r) for r in range(len(s)+1))\n    \n    return len(list(powerset(range(1,n+1))))%1000000007\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(i) for i in stdin.split())\n    return str(min(sum(c1==c2 for c1, c2 in zip(presents, presents[1:])), sum(c1==c2 for c1, c2 in zip(presents, presents[:-1]))))\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(i) for i in stdin.split())\n    #n, m = 3, 2\n    #n, m = 1, 1\n    #n, m = 2, 3\n    #n, m = 5, 5\n    #n, m = 6, 4\n    #n, m = 9, 9\n\n    count = 0\n    count += 1\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if i + j >= n + m:\n                count += 1\n\n    return str(count)"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    (n, m) = map(int, stdin.split())\n    if n == m == 1:\n        return 1\n    if m == 1:\n        return 2\n    if n == m == 2:\n        return 3\n    return answer\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(factorial(n + n - 1) % mod - factorial(n - 1) % mod)\ndef"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    res = 1\n    if m == 0:\n        return res\n    for i in range(n + 1):\n        res *= n - i\n        res %= mod\n    return res\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('''\n    5 3\n    1 2\n    2 1\n    3 1\n    4 1\n    3 2\n    ''')\n    7\n    >>> solution('''\n    5 2\n    1 2\n    1 3\n    ''')\n    9\n    '''\n    n, m = list(map(int, stdin.split()))\n    d = {}\n    for i in range(1, n + 1):\n        d[i] = 0\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if j % i!= 0:\n                d[j] = 0\n    return d[n] % (10 ** 9 + 7)\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n,m=map(int,stdin.split())\n    s=set()\n    def count_a(a):\n        cnt=0\n        for i in range(1,n+1):\n            cnt+=1 if i in s else 0\n        return cnt\n    def count_b(b):\n        cnt=0\n        for i in range(1,m+1):\n            cnt+=1 if i in s else 0\n        return cnt\n    res=0\n    for a in range(1,n+1):\n        res=res%1000000007\n        if a in s:\n            continue\n        for b in range(1,m+1):\n            res=res+count_b(b)*count_a(a)%1000000007\n    return str(res)"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(bin(get_count(n, m)))[2:]\n\n\ndef"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    for i in range(1, 10**5+1):\n        if a*i**2 + b*i + c == 0:\n            return i, i**2, i**3\n    return -1\n\n\"\"\""
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(2, 10):\n        for j in range(2, i):\n            if n == i * j:\n                return str(i) + \" \" + str(j)\n    return \" -1\"\n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for m in range(n, 1, -1):\n        for k in range(n, 1, -1):\n            if is_triangle(m, k):\n                print(m, k)\n                return\n    print(-1)\n\n\ndef"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def sum_to_1(n: int) -> int:\n        if n == 0:\n            return n\n        else:\n            return (n // 10 + n % 10) + sum_to_1(n // 10)\n\n    a, b = int(stdin), int(stdin)\n    while a!= 0:\n        if sum_to_1(a) == b:\n            return a, b\n        a = a // 10 + a % 10\n        b = b // 10 + b % 10\n    return -1\n\n\nInput\n6\n\nOutput\n8 10\n\nInput\n1\n\nOutput\n-1\n\n\nInput\n17\n\nOutput\n144 145\n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return \"-1\" if a not in {12, 8, 4, 20, 20, 4, 16, 6, 12, 12, 8, 20, 16, 8, 20, 12, 16, 20, 12, 20, 12, 6, 16, 6, 8, 12, 8, 20, 20, 16, 20, 12, 20, 8, 20, 20, 6, 16, 6, 12, 20, 12, 20, 8, 16, 20, 12, 8, 20, 20, 12, 20, 20, 6, 16, 6, 8, 20, 12, 20, 20, 12, 20, 16, 20, 12, 20, 8, 16, 20, 12, 8, 20, 20, 12, 20, 16, 20, 12, 20, 8, 16, 20, 12, 20, 16, 20, 20, 12, 20, 16, 8, 20, 20, 12, 20, 16, 20, 12, 20, 16, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 16, 20, 12, 20, 8, 20, 20, 12, 16, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 16, 20, 12, 20, 8, 20, 20, 12, 16, 20, 12, 20, 8, 20, 20, 12, 16, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 16, 20, 12, 20, 8, 20, 20, 12, 20, 16, 20, 12, 20, 8, 20, 20, 12, 20, 16, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 16, 20, 12, 20, 8, 20, 20, 12, 16, 20, 12, 20, 8, 20, 20, 12, 20, 16, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 16, 20, 12, 20, 8, 20, 20, 12, 20, 16, 20, 12, 20, 8, 20, 20, 12, 20, 16, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 16, 20, 12, 20, 8, 20, 20, 12, 20, 16, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 16, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 16, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 16, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 16, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 16, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20, 20, 12, 20, 8, 20,"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    for i in range(1, a):\n        if a % i == 0:\n            for j in range(i + i, a + 1, i):\n                if a % j == 0:\n                    print(i, j, a // i // j)\n                    return ''\n    return -1\n\n>>> solution(str(input()))\n4 5\n\n>>> solution(str(input()))\n8 10\n\n>>> solution(str(input()))\n8 10\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>> solution(str(input()))\n-1\n\n>>>"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    arr = stdin.split()\n    n = int(arr[0])\n    solutions = []\n    for m in range(1, n + 1):\n        for k in range(1, m):\n            if m ** 2 + k ** 2 == n ** 2:\n                solutions.append((m, k))\n    if solutions:\n        solutions = sorted(solutions, key=lambda x: (x[0], -x[1]))\n        print(solutions[0][0], solutions[0][1])\n    else:\n        print(-1)\n\n    return\n\n-----Solution-----"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for m in range(n):\n        for k in range(n):\n            if n == m + k:\n                return f\"{m} {k}\"\n    return \"-\"\n"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\n\"\"\"\nimport math\n\n\ndef"
    },
    {
        "number": 134,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"2 4\"\n    \nsample = \"3\"\nsolution(sample)\n\n---Input Example 1---\nInput\n3\n\nOutput\n4 5\nInput\n6\n\nOutput\n8 10\nInput\n1\n\nOutput\n-1\nInput\n17\n\nOutput\n144 145\nInput\n67\n\nOutput\n2244 2245\nInput\n0\n\nOutput\n1\nInput\n0\n\nOutput\n1\n\"\"\"\n\ndef"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    remainders = {n % i for i in range(1, k + 1)}\n    if len(remainders) == len(set(remainders)):\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    for i in range(1, k + 1):\n        for j in range(1, k + 1):\n            if n % i == j % i:\n                print('No')\n                return\n    print('Yes')"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    for i in range(1, k + 1):\n        if n % i == 0:\n            for j in range(1, k + 1):\n                if i!= j and n % j == 0:\n                    print('No')\n                    return\n    print('Yes')\n    return\n\n\nsolution(input())\n\"\"\"\n\n\ndef"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n < 1 or k < 1 or k > n:\n        return 'No'\n    return 'Yes'\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if all(i == n % i for i in range(1, k)) and all(n % i!= 0 for i in range(1, k)):\n        return 'Yes'\n    return 'No'\n\nsolution(input())\n\nInput\n6 4\n\nOutput\nYes\n\nInput\n1 2\n\nOutput\nNo\n\nInput\n3 2\n\nOutput\nYes\n\nInput\n5 2\n\nOutput\nYes\n\nInput\n5 3\n\nOutput\nNo\n\nInput\n6 3\n\nOutput\nNo\n\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    for i in range(1, k):\n        if n % i == 0:\n            if i!= n // i:\n                return \"No\"\n    return \"Yes\""
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    for i in range(1, k):\n        if n % i == 0:\n            print(\"No\")\n            return\n    print(\"Yes\")\n    return"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    return \"Yes\" if len({N % i for i in range(1, K + 1)}) == len(range(1, K + 1)) else \"No\"\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return \"Yes\" if len(set([n%i for i in range(1, k+1)])) == k else \"No\""
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    res = 0\n    for i in range(1, k+1):\n        for j in range(1, k+1):\n            if j % i == 0:\n                res += 1\n    if res == k:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    b = int(stdin)\n    if a > b:\n        return '>'\n    elif a < b:\n        return '<'\n    else:\n        return '='"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.strip().split()[0]\n    b = stdin.strip().split()[1]\n    if int(a) < int(b):\n        return \"<\"\n    elif int(a) == int(b):\n        return \"=\"\n    else:\n        return \">\""
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.strip())\n    b = int(stdin.strip())\n    if a > b:\n        return \">\"\n    if a < b:\n        return \"<\"\n    else:\n        return \"=\"\n"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin\n    line = line.strip()\n    line = line.split()\n    line = list(map(int, line))\n    a = line[0]\n    b = line[1]\n    if a < b:\n        return '<'\n    if a > b:\n        return '>'\n    else:\n        return '='\n\nprint(solution(input()))\n"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.splitlines()[0])\n    b = int(stdin.splitlines()[1])\n    if a < b:\n        return '<'\n    elif a == b:\n        return '='\n    return '>'\n"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n1, n2 = (int(x) for x in stdin.split())\n    if n1 > n2:\n        print('>')\n    elif n1 == n2:\n        print('=')\n    else:\n        print('<')"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a > b:\n        return '>'\n    if a < b:\n        return '<'\n    return '='\n"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.splitlines()\n    a = int(a)\n    b = int(b)\n    if a < b:\n        return '<'\n    if a > b:\n        return '>'\n    return '='"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a < b:\n        return \"<\"\n    elif a > b:\n        return \">\"\n    else:\n        return \"=\"\n"
    },
    {
        "number": 136,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    a = int(a)\n    b = int(b)\n    if a < b:\n        return '<'\n    elif a > b:\n        return '>'\n    else:\n        return '='\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n    return '{}'.format(solution_dp(n, p, c))\n\n\ndef"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n\n    n = 3\n    p = 0\n    c = [-1, 0, 1]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                for l in range(k + 1, n):\n                    paths = [[i, j], [j, k], [k, l]]\n                    a = paths[0][0]\n                    b = paths[0][1]\n                    c = paths[1][0]\n                    d = paths[1][1]\n                    e = paths[2][0]\n                    f = paths[2][1]\n                    if not (a > b and c > d and e > f):\n                        continue\n                    if abs(a - e) + abs(b - f) < abs(c - d):\n                        continue\n                    if a == e or b == f or c == d:\n                        continue\n                    if a + b == c + d or c + d == a + b or c + b == a + d or a + c == b + d:\n                        continue\n                    if (a > 0 and b > 0) or (a > 0 and c > 0) or (a > 0 and d > 0) or (b > 0 and c > 0) or (b > 0 and d > 0) or (c > 0 and d > 0):\n                        continue\n                    if (a > 0 and b == 0) or (a > 0 and c == 0) or (a > 0 and d == 0) or (b > 0 and c == 0) or (b > 0 and d == 0) or (c > 0 and d == 0):\n                        continue\n                    if (a > 0 and b > 0) or (a > 0 and c > 0) or (a > 0 and d > 0) or (b > 0 and c > 0) or (b > 0 and d > 0) or (c > 0 and d > 0):\n                        continue\n\n                    if abs(a) > abs(c):\n                        continue\n                    if abs(a) < abs(c):\n                        count += 1\n    return count % 1000000 + 7\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    def count_valid_paths(a, p):\n        if len(a) == 0:\n            return 1\n        if len(a) == 1:\n            return 1 if a[0] % 2 == p else 0\n\n        count = 0\n        for i in range(len(a)):\n            if a[i] % 2!= p:\n                continue\n            count += count_valid_paths(a[:i] + a[i + 1 :], p)\n\n        return count\n\n    return str(count_valid_paths(a, p))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    colors = list(map(int, stdin.split()))\n    res = 0\n    colors = sorted(colors)\n    if n == 2:\n        res = 4\n    else:\n        for i in range(1, n):\n            res = res + 2*(colors[i] - colors[i - 1])\n        if p == 1:\n            res = res + 1\n    return str(res % (10**9 + 7))\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n    t = int((p + 1) / 2)\n    s = int((p + 1) * (p + 2) / 2)\n    ans = 0\n    for i in range(t, s):\n        for j in range(i, n - 1, i + 1):\n            if c[j]!= c[j + 1]:\n                break\n        else:\n            ans += 1\n    return str(ans % 1000000007)\n\ndef"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  n, p = map(int, stdin.split())\n  arr = list(map(int, stdin.split()))\n  d = {}\n  for i in range(1, n + 1):\n    d[i] = (i - 1) % 2\n  for i in range(len(arr)):\n    x = arr[i]\n    if x in d:\n      d[x] = -d[x]\n      d[x] %= 2\n  c = {}\n  for i in range(1, n + 1):\n    c[i] = 0\n  for i in range(len(arr)):\n    x = arr[i]\n    if c[x] == 0:\n      c[x] = 1\n    else:\n      c[x] = 0\n  return (n * (n - 1) // 2 + n * sum(c.values())) % (10 ** 9 + 7)\n\nsolution(\"4 1\\n-1 0 1\\n\")\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n    total_scores = 0\n    for i in range(n):\n        odd = 0\n        even = 0\n        for j in range(i):\n            if c[j] % 2 == 1:\n                odd += 1\n            else:\n                even += 1\n        for j in range(i + 1, n):\n            if c[j] % 2 == 0:\n                odd += 1\n            else:\n                even += 1\n        if odd % 2 == 0 and even % 2 == 0:\n            total_scores += 1\n        elif odd % 2 == 1 and even % 2 == 1:\n            total_scores += 1\n    return total_scores\n\n\ndef"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(lambda x: int(x), stdin.split()))\n\n    def count_paths(n: int, p: int) -> int:\n        if n == 1:\n            return 1\n        res = 0\n        for c in range(2):\n            res += count_paths(n - 1, p ^ c)\n        return res\n\n    return str(count_paths(stdin[0], stdin[1]))\n\n\ndef"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    https://www.codewars.com/kata/55d2a8d9cbd42cc5000002b9/train/python\n    \"\"\"\n    n, p = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n\n    def adj(a, b):\n        for c in range(a, b):\n            for d in range(a, b):\n                if c!= d:\n                    return True\n\n        return False\n\n    count = 0\n    for i in range(1, n):\n        for j in range(i):\n            if adj(i, j):\n                count += 1\n\n    return str(count % (10**9 + 7))\n\n\ndef"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.strip().split()))\n    n = stdin[0]\n    p = stdin[1]\n    c = stdin[2:]\n    return str(sum(\n        sum(1 if abs(c[i] - c[i + 1]) <= p else 0 for i in range(n - 1)) +\n        sum(1 if abs(c[i] + p) <= p else 0 for i in range(n - 1))\n    ))\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\n'''\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C = (int(x) for x in stdin.split())\n    # Here we can also use int(stdin) as well\n    # N = int(stdin)\n    # A = int(stdin.split()[1])\n    # B = int(stdin.split()[2])\n    # C = int(stdin.split()[3])\n    # Here we can also use *args or **kwargs\n    # Here *args is a tuple of arguments\n    # Here **kwargs is a dictionary of keyword arguments\n    # Here, we are performing the function over all the values in the list\n    if N % (A+B+C) == 0:\n        return str(A*A*A + B*B*B + C*C*C)\n    else:\n        return '0'\n\n\nsolution(*input().split())\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c = map(int, stdin.split())\n    if (n + a + b + c) % 4!= 0:\n        return '0'\n    return str(int(a/2 + b/3 + c/4))"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c = map(int, stdin.split())\n    return str(int((n + a + b + c) // 4))\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c = map(int, stdin.split())\n    count = 0\n    if n >= 2*a + 2*b + 2*c:\n        count = 1\n        if (n + count) % 4 == 0:\n            return str(count)\n    elif n >= 2*a + 2*b:\n        count = 2\n        if (n + count) % 4 == 0:\n            return str(count)\n    elif n >= 2*a:\n        count = 3\n        if (n + count) % 4 == 0:\n            return str(count)\n    else:\n        count = 4\n        if (n + count) % 4 == 0:\n            return str(count)"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c = map(int, stdin.split())\n    result = sum([n, a, b, c]) % 4\n    if result == 1:\n        return str(n + a)\n    elif result == 2:\n        return str(n + a + b)\n    elif result == 3:\n        return str(n + a + b + c)\n    else:\n        return str(n + a + b + c + a + b + c)\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c = stdin.split()\n    n, a, b, c = int(n), int(a), int(b), int(c)\n    a_r = n // a\n    b_r = n // b\n    c_r = n // c\n    r = min(a_r, b_r, c_r)\n    n_r = n - (a * a_r + b * b_r + c * c_r)\n    return str(r) + \" \" + str(n_r)\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c = list(map(int, stdin.split()))\n    if n + a + b + c == 0 or n + a + b + c == n:\n        return \"0\"\n    return str(min(a + b + c, a + b + c + n) // 4)\n\nsolution('1 1 3 4')\nsolution('6 2 1 1')\nsolution('999999999 1000000000 1000000000 1000000000')\nsolution('4 4 4 4')"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c = map(int, stdin.split())\n    if n % 4 == 0:\n        return str(n + (a - b))\n    else:\n        return str(n + (a + b - c))"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c = map(int, stdin.split())\n    if n + a <= 0 or n + b <= 0 or n + c <= 0:\n        return \"0\"\n    r1 = int(n / a)\n    r2 = int(n / b)\n    r3 = int(n / c)\n    if r1 * a + r2 * b + r3 * c!= n:\n        return \"0\"\n    if r1 + r2 + r3 > n:\n        return \"0\"\n    if r1 == r2 and r1 == r3:\n        return str(a * b * c)\n    elif r1 == r2 or r1 == r3 or r2 == r3:\n        return str(a * b * c)\n    elif r1 < r2 < r3:\n        return str(a * b * c)\n    elif r1 < r3 < r2:\n        return str(a * b * c)\n    elif r1 == r3 or r2 == r3:\n        return str(a * b * c)\n    elif r1 < r2 or r1 == r2:\n        return str(a * b * c)\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = {i: [] for i in range(1, n + 1)}\n    for _ in range(m):\n        u, v = map(int, stdin.split())\n        graph[u].append(v)\n        graph[v].append(u)\n    def has_cycle(graph):\n        visited = set()\n        for i in range(1, n + 1):\n            if i in visited: continue\n            queue = deque([i])\n            while queue:\n                node = queue.popleft()\n                visited.add(node)\n                for neighbor in graph[node]:\n                    if neighbor in visited: return True\n                    visited.add(neighbor)\n                    queue.append(neighbor)\n        return False\n    def remove_edge(u, v, graph):\n        graph[u].remove(v)\n        graph[v].remove(u)\n    def dfs(graph, node, visited):\n        visited[node] = True\n        for neighbor in graph[node]:\n            if not visited[neighbor]:\n                dfs(graph, neighbor, visited)\n    def bfs(graph, node, visited):\n        visited[node] = True\n        q = deque([node])\n        while q:\n            node = q.popleft()\n            for neighbor in graph[node]:\n                if not visited[neighbor]:\n                    visited[neighbor] = True\n                    q.append(neighbor)\n    \n    visited = [False] * n\n    ans = 'YES' if has_cycle(graph) else 'NO'\n    for i in range(1, n + 1):\n        if not visited[i]:\n            visited = [False] * n\n            dfs(graph, i, visited)\n            ans = 'YES' if has_cycle(graph) else 'NO'\n            break\n    visited = [False] * n\n    for i in range(1, n + 1):\n        if not visited[i]:\n            visited = [False] * n\n            bfs(graph, i, visited)\n            ans = 'YES' if has_cycle(graph) else 'NO'\n            break\n    remove_edge(i, j, graph)\n    visited = [False] * n\n    for i in range(1, n + 1):\n        if not visited[i]:\n            visited = [False] * n\n            dfs(graph, i, visited)\n            ans = 'YES' if has_cycle(graph) else 'NO'\n            break\n    visited = [False] * n\n    for i in range(1, n + 1):\n        if not visited[i]:\n            visited = [False] * n\n            bfs(graph, i, visited)\n            ans = 'YES' if has_cycle(graph) else 'NO'\n            break\n    return ans"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = defaultdict(list)\n    for u, v in (map(int, line.split()) for line in stdin.split()[1:]):\n        graph[u].append(v)\n        graph[v].append(u)\n    # Remove edges from graph until a cycle is not found\n    while True:\n        remove_count = 0\n        for u, v in graph.items():\n            if u not in graph[v]:\n                # Remove edge u -> v if it exists\n                for v_to in graph[v]:\n                    if u!= v_to:\n                        graph[u].append(v_to)\n                        graph[v_to].append(u)\n                remove_count += 1\n                break\n        # if a cycle is not found, the graph is acyclic\n        if remove_count == 0:\n            return \"YES\"\n        else:\n            # Otherwise, remove an edge and try again\n            for u, v in graph.items():\n                if u not in graph[v]:\n                    remove_count += 1\n                    break\n            if remove_count == 0:\n                return \"NO\""
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n, m = int(stdin[0]), int(stdin[1])\n    edges = []\n    for _ in range(m):\n        edges.append([int(x) for x in stdin[2*_+2].split()])\n    G = {i: set() for i in range(1, n+1)}\n    for u, v in edges:\n        G[u].add(v)\n        G[v].add(u)\n    visited = set()\n    for u in G.keys():\n        visited.add(u)\n    cycle = []\n    for u in G.keys():\n        stack = [u]\n        while stack:\n            node = stack.pop()\n            if node not in visited:\n                visited.add(node)\n                stack.extend(G[node])\n                cycle.append(node)\n    return \"YES\" if len(cycle) == n else \"NO\"\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = {i: [] for i in range(1, n + 1)}\n    for _ in range(m):\n        u, v = map(int, stdin.split())\n        graph[u].append(v)\n        graph[v].append(u)\n    return check_acyclic(graph, 1, n)\n\n\ndef"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = defaultdict(set)\n\n    for _ in range(m):\n        u, v = map(int, stdin.split())\n        graph[u].add(v)\n        graph[v].add(u)\n\n    visited = set()\n\n    for node in graph:\n        if node in visited:\n            continue\n        stack = deque([node])\n        visited.add(node)\n        while stack:\n            node = stack.pop()\n            for neighbor in graph[node]:\n                if neighbor not in visited:\n                    stack.append(neighbor)\n                    visited.add(neighbor)\n    if len(visited) == n:\n        return 'YES'\n    else:\n        return 'NO'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def check_cycle(visited, current):\n        visited.add(current)\n        if current in cycle:\n            return True\n        if current in visited:\n            return False\n        cycle.add(current)\n        if any(check_cycle(visited, n) for n in graph[current]):\n            return True\n        cycle.remove(current)\n        visited.remove(current)\n        return False\n    \n    n, m = map(int, stdin.split())\n    graph = defaultdict(set)\n    cycle = set()\n    for _ in range(m):\n        u, v = map(int, stdin.split())\n        graph[u].add(v)\n        graph[v].add(u)\n    for u in graph:\n        if not check_cycle(set(), u):\n            return 'NO'\n    return 'YES'\n\n'''"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    edges = []\n    for i in range(m):\n        edges.append((int(stdin.split()[2 * i + 1]), int(stdin.split()[2 * i])))\n    print(edges)\n    visited = []\n    stack = []\n    visited.append(0)\n    stack.append(0)\n    while len(stack):\n        curr = stack.pop()\n        print(curr)\n        for adj in edges:\n            if adj[1] == curr:\n                visited.append(adj[0])\n                stack.append(adj[0])\n\n    print(visited)\n    return \"YES\" if len(visited) == len(set(visited)) else \"NO\"\n\n\n\nsolution(input())\n\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    G = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v = map(int, stdin.split())\n        G[u].append(v)\n        G[v].append(u)\n    \n    G_copy = []\n    for i in range(len(G)):\n        G_copy.append(G[i][::])\n    \n    for i in range(len(G)):\n        for j in range(len(G_copy)):\n            if i in G_copy[j]:\n                for k in range(len(G_copy)):\n                    if i in G_copy[k]:\n                        G_copy[j].remove(i)\n                        G_copy[k].remove(i)\n                        break\n    \n    \n    if len(G) > 1:\n        return 'NO'\n    else:\n        if len(G[0]) == 1:\n            return 'YES'\n        else:\n            return 'NO'"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    antenna_positions = list(map(int, stdin.split()))\n    \n    answer = 0\n\n    # Find the index of the min number of antennas needed to cover all intervals between 0 and m\n    for i in range(n):\n        if (answer == 0):\n            answer = min(answer, i)\n        \n        # Increase the scope of the first antenna by 40\n        if (i == antenna_positions[i] - 40):\n            answer = min(answer, i + 40)\n\n        # Increase the scope of the second antenna by 210\n        if (i == antenna_positions[i] + 210):\n            answer = min(answer, i + 210)\n        \n        # Increase the scope of the third antenna by 31\n        if (i == antenna_positions[i] + 31):\n            answer = min(answer, i + 31)\n        \n        #print(i, antenna_positions[i], answer)\n\n    return str(answer)\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    array = []\n    for _ in range(n):\n        x, s = map(int, stdin.split())\n        array.append((x, s))\n\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(m + 1):\n            if j < array[i - 1][0]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - array[i - 1][0]] + array[i - 1][1])\n    return dp[-1][-1]\n\ndef"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.split()]\n    x = []\n    s = []\n    for i in range(n):\n        x.append([int(i) for i in stdin.split()[2*i:2*i+2]])\n        s.append([int(i) for i in stdin.split()[2*i+2:2*i+4]])\n\n    def radio(x, s):\n        out = []\n        for i in range(n):\n            possible = True\n            for j in range(m):\n                for k in range(s[i][j]):\n                    if j + k not in x:\n                        possible = False\n            if possible:\n                out.append(i + 1)\n        return out\n\n    def monopoly(x, s):\n        out = []\n        for i in range(n):\n            possible = True\n            for j in range(m):\n                for k in range(s[i][j]):\n                    if j + k not in x and j + k not in out:\n                        possible = False\n            if possible:\n                out.append(i + 1)\n        return out\n\n    x = radio(x, s)\n    x = monopoly(x, s)\n    return \" \".join([str(i) for i in x])\n\n\n---\n\nIn the first example, the answer is $4.\n\nIn the second example, the answer is $2, since only the positions $1$ and $2$ are covered by at least one antenna.\n\"\"\"\nfrom copy import deepcopy\nfrom typing import List, Tuple\n\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        n, m = [int(i) for i in stdin.split()]\n        x = []\n        s = []\n        for i in range(n):\n            x.append([int(i) for i in stdin.split()[2 * i:2 * i + 2]])\n            s.append([int(i) for i in stdin.split()[2 * i + 2:2 * i + 4]])\n\n        def radio(x, s):\n            out = []\n            for i in range(n):\n                possible = True\n                for j in range(m):\n                    for k in range(s[i][j]):\n                        if j + k not in x:\n                            possible = False\n                if possible:\n                    out.append(i + 1)\n            return out\n\n        def monopoly(x, s):\n            out = []\n            for i in range(n):\n                possible = True\n                for j in range(m):\n                    for k in range(s[i][j]):\n                        if j + k not in x and j + k not in out:\n                            possible = False\n                if possible:\n                    out.append(i + 1)\n            return out\n\n        x = radio(x, s)\n        x = monopoly(x, s)\n        return \" \".join([str(i) for i in x])\n\n\ndef"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    m += 1\n    xs, ss = zip(*(map(int, stdin.split())))\n    xs += [x + m for x in xs]\n    ss += ss\n    xs = sorted(set(xs))\n    ss = sorted(set(ss))\n    # xs = sorted(set(xs))\n    # ss = sorted(set(ss))\n    xs = sorted(xs)\n    ss = sorted(ss)\n\n    i = 0\n    while xs[i] <= m:\n        i += 1\n    ans = ss[i]\n    i += 1\n    # i = 0\n    while i < len(ss) and ss[i] <= m:\n        ans += 1\n        i += 1\n    while i < len(ss) and ss[i] <= m:\n        ans += 1\n        i += 1\n    return str(ans)\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n <= 1 or n > 1000000:\n        raise ValueError\n    if m <= 1 or m > 1000000:\n        raise ValueError\n    starts = []\n    ends = []\n    for i in range(n):\n        start, end = map(int, stdin.split())\n        if start < 1 or start > m:\n            raise ValueError\n        if end < 1 or end > m:\n            raise ValueError\n        starts.append(start)\n        ends.append(end)\n    starts.sort()\n    ends.sort()\n    ints = set(range(1, m + 1))\n    start_ints = set(starts)\n    end_ints = set(ends)\n    intersects = start_ints & end_ints\n    for i in intersects:\n        ints -= set(range(i, i + 1))\n    ints = sorted(list(ints))\n    total = 0\n    for i in range(len(ints)):\n        total += starts[i]\n        total += ends[i]\n        total -= 1\n        total -= i\n    return str(total)\n\n\ndef"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    [n, m] = list(map(int, stdin.split()))\n    ants = []\n    for _ in range(n):\n        x, s = list(map(int, stdin.split()))\n        ants.append((x, s))\n\n    if len(ants) == 1:\n        return 0\n    ans = 0\n    for i in range(1, m + 1):\n        covered = 0\n        for a in ants:\n            if covered + a[0] <= i:\n                covered += a[0]\n            elif covered + a[0] > i:\n                covered = i\n            if covered >= i:\n                break\n        if covered == i:\n            ans += 1\n    return str(ans)\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    xs = []\n    for _ in range(n):\n        x, s = map(int, stdin.split())\n        xs.append((x, s))\n    xs.sort(key=lambda tup: tup[0])\n    solutions = []\n    def build(x, s):\n        if s == m:\n            if x not in solutions:\n                solutions.append(x)\n        else:\n            for i in range(x, m + 1):\n                build(i, s + 1)\n    for x, s in xs:\n        build(x, s)\n    if len(solutions) == n:\n        return '\\n'.join(map(str, solutions))\n    return 'impossible'\n    \n\"\"\"\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, m = [int(i) for i in stdin.split()]\n    \n    x, s = [int(i) for i in stdin.split()]\n    \n    # calculate the total number of antennas we need to build.\n    total = 0\n    \n    for i in range(1, n):\n        # calculate the scope of each antenna.\n        scope = s + (i - 1)\n        \n        # if we cover more than m positions, we're not in the desired range.\n        if scope > m:\n            return 'No'\n            \n        # if we need to build this antenna, update the total.\n        if i >= x:\n            total += scope\n            \n    return str(total)\n\n-----Explanation-----\n\nWe can get away with only building a single antenna:\n\na) We already covered all the positions from 1 to n, so we're done.\n\nb) We still need to build an antenna on position x = 2, so we need to cover positions from 2 to n-1, and all the positions from 1 to x-1.\n\nc) We also need to cover all positions from x to m, so we need to build an antenna on position m = n-1, so we need to cover all the positions from m+1 to x-1.\n\nd) We already covered at least one antenna, so we don't need to build another antenna.\n\n---\n\nIn the third example, we can build three antennas, covering all the integer positions from $1$ to $m$. The total cost is the sum of all the costs for antennas 1, 2 and 3.\n\nIn the fourth example, we can build two antennas, covering all the integer positions from $1$ to $m$. The total cost is the sum of all the costs for antennas 1 and 2.\n\n\n\"\"\"\ndef"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def _is_in_interval(x: int, s: int) -> bool:\n        return x >= s and x <= s + s\n\n    n, m = map(int, stdin.split())\n    c = 0\n    for _ in range(n):\n        c += int(input())\n    if n > 2:\n        a, s = map(int, stdin.split())\n        b = a - s\n        for i in range(n):\n            if b <= i <= a and _is_in_interval(b, s):\n                c += 1\n    return str(c)\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    _, W = list(map(int, stdin.split()))\n    items = list(map(int, stdin.split()))\n    return max_weight_of_good_subset(W, items)\n\n\ndef"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    good_items = [int(x) for x in stdin.split()]\n    if len(good_items) == 1 and good_items[0] == 0:\n        return 0\n    good_items.sort(reverse=True)\n    size = len(good_items)\n    print(good_items)\n    total = good_items[0]\n    for i in range(1, size):\n        if good_items[i] > total:\n            total = good_items[i]\n    print(total)\n    return total\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    set = stdin.split()\n    items = set[1:]\n    items.sort()\n    #print(items)\n    temp = 0\n    good = []\n    for i in items:\n        temp += int(i)\n        good.append(temp)\n    #print(good)\n    temp = int(set[0])\n    while (temp > 0):\n        for i in good:\n            if (i >= temp):\n                temp -= i\n            else:\n                break\n        else:\n            return 0\n    return temp\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Using hashmap\n    '''\n    input_lines = stdin.split('\\n')\n    weights = list(map(int, input_lines[0].split()))\n    items = input_lines[1].split()\n\n    good_items = 0\n    good_items_weight = 0\n\n    for item in items:\n        if good_items_weight + weights[item] <= weights[good_items]:\n            good_items_weight += weights[item]\n            good_items += 1\n\n    return good_items"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    count = list(map(int, stdin.split()))\n    max_count = sum(count)\n    max_subset = 0\n    for i in range(max_count + 1):\n        count_subset = count[:]\n        temp = i\n        temp_count = 0\n        for j in count:\n            if j > temp:\n                temp = j\n                temp_count += 1\n            else:\n                temp_count += 1\n            if temp_count > max_subset:\n                max_subset = temp_count\n                max_count = temp\n        if max_count > max_subset:\n            max_subset = max_count\n    return str(max_subset)\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    w = int(stdin)\n    cnt = list(map(int, stdin.split()))\n    d = {}\n    for i in range(8):\n        d[cnt[i]] = i+1\n    max_weight = 0\n    for i in range(1, 10):\n        for j in range(i, 10):\n            if d[i] + d[j] <= w:\n                max_weight = max(max_weight, d[i]+d[j])\n    return str(max_weight)\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    good_set = stdin.strip().split()\n    max_weight = 0\n    for i in range(len(good_set)):\n        for j in range(len(good_set)):\n            if i!= j:\n                if int(good_set[j]) < int(good_set[i]):\n                    max_weight = max(max_weight, int(good_set[i]) - int(good_set[j]))\n    print(max_weight)\n    return max_weight\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    cnts = stdin.split()\n    cnts = list(map(int, cnts))\n    max_item_cnt = 1\n    i = 0\n    while i < len(cnts):\n        if cnts[i] > 0:\n            max_item_cnt += 1\n            i += 1\n        else:\n            max_item_cnt = 1\n            i += 1\n        if max_item_cnt > n:\n            max_item_cnt = 1\n            i += 1\n    return str(max_item_cnt)\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    W, items = int(stdin.split()[0]), list(map(int, stdin.split()[1]))\n    result = 0\n\n    def check_set(items: list):\n        nonlocal result\n        if not items:\n            return\n        if sum(items) <= W:\n            result = max(result, len(items))\n            return\n        else:\n            return\n\n    check_set(items)\n    if result == 0:\n        result = -1\n    return str(result)\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    weight = int(stdin)\n    items = stdin.split()\n    good_items = []\n    for i in items:\n        good_items.append(int(i))\n    dp = [[-1 for _ in range(weight + 1)] for _ in range(len(good_items) + 1)]\n    for i in range(len(good_items) + 1):\n        for j in range(weight + 1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif good_items[i - 1] <= j:\n                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - good_items[i - 1]] + good_items[i - 1])\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return str(dp[len(good_items)][weight])"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4 12\n   ... 20 30 70 90\n   ... ''')\n    150\n    >>> solution('''4 3\n   ... 10 100 1000 10000\n   ... ''')\n    30\n    >>> solution('''5 787787787\n   ... 123456789 234567890 345678901 456789012 987654321\n   ... ''')\n    44981600785557577\n    \"\"\"\n    n, L = map(int, stdin.split())\n    costs = list(map(int, stdin.split()))\n    costs.sort()\n    # if L == 0:\n    #     return 0\n    # # elif L < costs[0]:\n    # #     return costs[0]\n    # r = costs[0]\n    # for c in costs[1:]:\n    #     if L < c:\n    #         r += L * r // c\n    #         L = 0\n    #     else:\n    #         L -= c\n    # return r\n\n    ans = r = 0\n    for c in costs:\n        r += 1\n        ans = max(ans, r * c // c)\n    return ans\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, L = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n    dp = [0 for i in range(L + 1)]\n    dp[0] = 0\n    for i in range(1, L + 1):\n        dp[i] = min(dp[i - 1] + c[i - 1], c[i - 1] * 2)\n    return str(dp[L])"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, l = map(int, stdin.split())\n    costs = list(map(int, stdin.split()))\n    total = 0\n    for i, c in enumerate(costs):\n        if i == 0:\n            total += c\n        else:\n            total += c*2**(i-1)\n    ans = 0\n    while (total >= l):\n        total -= costs[0]\n        ans += costs[0]\n        costs.pop(0)\n    if total < l:\n        ans += total * 2**len(costs)\n    return str(ans)\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, l = map(int, stdin.split())\n    costs = list(map(int, stdin.split()))\n\n    total = sum(costs)\n    if total > l:\n        return \"NO\"\n\n    def binary_search(low, high, limit):\n        mid = (low + high) // 2\n        if low > high:\n            return -1\n\n        if mid * 2 < limit:\n            return binary_search(mid + 1, high, limit)\n        elif mid * 2 > limit:\n            return binary_search(low, mid, limit)\n        else:\n            return mid\n\n    def optimal(n, total, low, high):\n        if total == low and total == high:\n            return 0\n\n        if total == low:\n            return -1\n\n        if total == high:\n            return high - low\n\n        mid = binary_search(low, high, total)\n\n        return min(\n            optimal(n, total - costs[mid], low, mid),\n            optimal(n, total, mid + 1, high),\n        )\n\n    return str(optimal(n, total, 0, n))\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, L = list(map(int, stdin.split()))\n    c = list(map(int, stdin.split()))\n\n    n += 1\n    c_f = [10 ** 9 + 1] * n\n\n    c_f[0] = c[0]\n    c_f[1] = c[0] + c[1]\n    c_f[2] = c[0] + c[1] + c[2]\n    c_f[3] = c[0] + c[1] + c[2] + c[3]\n\n    for i in range(4, n):\n        c_f[i] = c[i] + min(c_f[i - 3], c_f[i - 2], c_f[i - 1])\n\n    print(c_f[n - 1] - 1)\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, L = list(map(int, stdin.split()))\n    costs = list(map(int, stdin.split()))\n    def can_buy(price):\n        return (1 << (len(costs) - 1)) - 1 >= price\n    def buy(price):\n        if can_buy(price):\n            cost = price\n            for i in range(len(costs) - 1, -1, -1):\n                if can_buy(price - costs[i]):\n                    price -= costs[i]\n                else:\n                    break\n            return cost + price\n        return -1\n    return str(buy(L))\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split()\n    n = int(a[0])\n    L = int(a[1])\n    c = list(map(int,a[2:]))\n    c.sort()\n    print(c)\n    b = 1\n    i = 0\n    j = 0\n    if L < c[0]:\n        return str(L)\n    while i < n:\n        while j < n and c[i] <= L:\n            L -= c[i]\n            j += 1\n            if L < c[i]:\n                break\n        if L == 0:\n            return str(b)\n        if j >= n and c[i]!= c[0]:\n            return str(b + int((L - c[i]) / (c[0] - c[i])))\n        if L!= 0:\n            b += 1\n            i = 0\n            L = c[i]\n            j = 1\n\n\"\"\"\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Generate pairs\n    x = stdin.split()\n    n, L = int(x[0]), int(x[1])\n\n    c = list(map(int, x[2:]))\n    pairs = list(zip(c[::2], c[1::2]))\n\n    # Sort pairs\n    pairs.sort()\n\n    # Number of elements in the array = number of bottles + 1\n    N = 2 ** len(pairs) - 1\n\n    # Array to store the number of ways to buy\n    w = [0] * N\n\n    # Initialize the array\n    for i in range(1, N):\n        w[i] = w[i - 1] + 1\n        for j in range(len(pairs)):\n            if i >= pairs[j][1] and i <= pairs[j][0]:\n                w[i] = min(w[i], w[i - pairs[j][1]] + w[i - pairs[j][0]])\n\n    return str(w[-1])\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, L = list(map(int, stdin.split()))\n    costs = list(map(int, stdin.split()))\n\n    # dp[i] : the minimum number of c[i] you have to spend\n    dp = [0] * (L + 1)\n    for i in range(L, 0, -1):\n        for j in range(i, 0, -1):\n            dp[i] = min(dp[i], max(dp[j], j) + costs[i])\n    return str(dp[0])\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 4 12\n   ... 20 30 70 90\n   ... ''')\n    150\n    >>> solution('''\n   ... 4 3\n   ... 10 100 1000 10000\n   ... ''')\n    30\n    >>> solution('''\n   ... 5 787787787\n   ... 123456789 234567890 345678901 456789012 987654321\n   ... ''')\n    44981600785557577\n    \"\"\"\n    n = int(stdin.split(' ')[0])\n    costs = stdin.split(' ')[1:]\n    costs = list(map(int, costs))\n    costs.sort()\n    dp = [[0] * (costs[0] + 1) for i in range(n + 1)]\n    # print(dp)\n    for i in range(n + 1):\n        for j in range(costs[0] + 1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif costs[i] >= j:\n                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - costs[i]] + costs[i])\n            else:\n                dp[i][j] = dp[i - 1][j]\n    # print(dp)\n    return str(dp[n][costs[-1]])\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n\n    max_mex = 1\n    mex = 1\n\n    for i in range(1, n):\n        if a[i-1] < a[i]:\n            if mex < a[i]:\n                max_mex = a[i]\n                mex = a[i-1]\n    return str(max_mex)\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    al = list(map(int, stdin.split()))\n    for _ in range(n):\n        al = al[:1] + sorted(al[1:])\n    return str(al[0])\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    a = list(map(int, stdin.split()))\n    mex = 0\n    # print(a)\n    for i in range(N):\n        mex = max(mex, min(a))\n        for j in range(N):\n            a[j] -= 1\n            if a[j] > 0:\n                a[j] = min(a)\n            mex = max(mex, min(a))\n    return str(mex)\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def solve(lst, n):\n        lst = lst[::-1]\n        for i in range(n):\n            lst[i] = min(lst[i], lst[i+1])\n            if lst[i] == 1:\n                return lst[i]\n        return 1\n\n    n = int(stdin)\n    lst = list(map(int, stdin.split()))\n    return str(solve(lst, n))\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('''3\n    1 3 3\n    ''')\n    3\n    '''\n    n = int(stdin.splitlines()[0])\n    arr = map(int, stdin.splitlines()[1].split())\n    arr = list(arr)\n    max_val = 0\n    for i in range(n):\n        if arr[i] == min(arr):\n            max_val = max(max_val, i)\n        else:\n            arr[i] = min(arr)\n    return max_val\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split()))\n    return str(min(stdin))\n    \nsolution(input())\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    A = sorted(map(int, stdin.split()[1]))\n    mex = max(A)\n    i = 0\n    while i < N and mex >= A[i]:\n        i += 1\n    if i < N:\n        A = A[i:] + A[:i]\n        mex = max(A)\n    return mex\n\nsolution(input())"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    arr = list(map(int, stdin.split()[1]))\n\n    max_val = max(arr)\n\n    for _ in range(len(arr)):\n        for i in range(n):\n            if arr[i] > max_val:\n                max_val = arr[i]\n        arr[i] = max_val\n        max_val = max(arr)\n\n    return max_val\n\n\nsolution(\"2\")\nsolution(\"5\")"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    input_array = list(map(int, stdin.split()))\n    result = 1\n    while input_array:\n        for num in input_array:\n            if num > result:\n                result = num\n        input_array.remove(result)\n    return str(result)\n\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    n_list = stdin.split()[1].split()\n    arr = []\n    for i in range(n):\n        arr.append(int(n_list[i]))\n    max_ = 1\n    for i in range(n):\n        max_ = max(max_, arr[i])\n        arr[i] = max_\n    return str(max(arr))"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdout = ''\n    stdout += stdin.lower()\n    n = int(stdin.split()[0])\n    ticket = stdin.split()[1:]\n    ticket.sort()\n    length = len(ticket)\n    if length % 2 == 0:\n        t1 = ticket[:int(length / 2)]\n        t2 = ticket[int(length / 2):]\n        for i in range(len(t1)):\n            t1[i] = int(t1[i])\n            t2[i] = int(t2[i])\n        if sum(t1) == sum(t2):\n            stdout += 'YES'\n        else:\n            stdout += 'NO'\n    else:\n        stdout += 'NO'\n    return stdout\n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    ticket = stdin.split()[1]\n    if not len(ticket) == n:\n        return \"NO\"\n    ticket_lst = []\n    for i in ticket:\n        ticket_lst.append(int(i))\n    ticket_lst.sort()\n    # print(ticket_lst)\n    intersections = []\n    t_seg_lst = []\n    for i in range(n):\n        # print(ticket_lst[i] + ticket_lst[i+1])\n        # print(t_seg_lst)\n        if len(t_seg_lst) == 0:\n            t_seg_lst.append(ticket_lst[i])\n        else:\n            if t_seg_lst[-1] + ticket_lst[i] == t_seg_lst[-1] + ticket_lst[i + 1]:\n                t_seg_lst.append(ticket_lst[i])\n            elif t_seg_lst[-1] + ticket_lst[i] > t_seg_lst[-1] + ticket_lst[i + 1]:\n                t_seg_lst.pop()\n                t_seg_lst.append(ticket_lst[i])\n            else:\n                intersections.append(t_seg_lst)\n                t_seg_lst = []\n                t_seg_lst.append(ticket_lst[i])\n    # print(intersections)\n    if len(intersections) == 0:\n        return \"NO\"\n    else:\n        # print(intersections)\n        for i in range(len(intersections)):\n            intersections[i].sort()\n        # print(intersections)\n        # print(intersections)\n        # print(intersections)\n        for i in range(len(intersections)):\n            if len(intersections[i]) == 1:\n                if intersections[i][0] == intersections[i][0] + len(ticket):\n                    return \"YES\"\n            else:\n                # print(intersections[i])\n                # print(intersections[i][0])\n                # print(intersections[i][-1])\n                if (intersections[i][-1] - intersections[i][0]) == len(ticket):\n                    return \"YES\"\n    return \"NO\"\n\n\nsolution(\"5\")\n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    ticket = stdin.split()\n    ticket_sum = 0\n    i = 0\n    while i < n:\n        ticket_sum += int(ticket[i])\n        i += 1\n    if ticket_sum % 2 == 0:\n        return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    res: str = \"\"\n    for i in range(n):\n        res += str(i % 10)\n    return (\"YES\" if sum(map(int,res)) % 2 == 0 else \"NO\")"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    seq = list(map(int, stdin.split()))\n    s = sum(seq)\n    for i in range(len(seq)-1):\n        a = seq[i]\n        for j in range(i+1, len(seq)):\n            b = seq[j]\n            if a+b == s/2:\n                return 'YES'\n    return 'NO'"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Given a sequence of n integers, i.e. an integer array,\n    find and print whether the ticket is lucky or not.\n\n    Note: You can assume that the input has always one lucky ticket.\n\n    :param stdin: The input\n    :type stdin: str\n    :return: The answer\n    :rtype: str\n    \"\"\"\n    stdin = stdin.split(\"\\n\")[0]\n    ticket = [int(x) for x in stdin.split(\" \")]\n    n = len(ticket)\n    sum_ticket = sum(ticket)\n    sum_ticket_odd = sum_ticket % 2\n    sum_ticket_odd = sum_ticket_odd if sum_ticket_odd!= 0 else 1\n    if (sum_ticket % 2)!= 0:\n        if ((n % 2) == 0):\n            print(\"YES\")\n        else:\n            if (n == 1):\n                print(\"YES\")\n            elif (n == 2):\n                print(\"YES\")\n            else:\n                print(\"NO\")\n    else:\n        if (n % 2) == 0:\n            if (n == 1):\n                print(\"YES\")\n            elif (n == 2):\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            if (n == 1):\n                print(\"YES\")\n            elif (n == 2):\n                print(\"YES\")\n            else:\n                print(\"NO\")"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    A = stdin.split()\n    \n    for i in range(1, n):\n        for j in range(i):\n            if sum(map(int, A[i].split())) == sum(map(int, A[j].split())):\n                return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    total, tickets = stdin.split(\"\\n\")\n    total = int(total)\n    tickets = tickets.replace(\" \", \"\")\n    tickets = list(map(int, tickets))\n    tickets.sort()\n    segments = []\n    for i in range(total):\n        segments.append(i)\n    for i in range(len(tickets)-1):\n        for j in range(i+1, len(tickets)):\n            if tickets[i] + tickets[j] not in segments:\n                return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\nstdin = stdin.strip()\n\nn = int(stdin.split()[0])\n\ngolden_ticket = stdin.split()[1]"
    },
    {
        "number": 144,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    golden_ticket = stdin\n    if len(golden_ticket)!= n:\n        return \"NO\"\n    golden_ticket_sum = sum(int(x) for x in golden_ticket)\n    if golden_ticket_sum % n == 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin.lower()\n    char = list(string)\n    char.sort()\n    count_odd = 0\n    for i in range(0,len(char)):\n        if char[i] == char[i+1]:\n            count_odd += 1\n        else:\n            count_odd = 0\n        if count_odd == 1:\n            if char[i] == \"w\":\n                return \"CHAT WITH HER!\"\n            elif char[i] == \"x\":\n                return \"IGNORE HIM!\"\n        count_odd = 0\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return 'CHAT WITH HER!' if len(set(stdin)) % 2 else 'IGNORE HIM!'"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your code\n    >>> solution('')\n    'IGNORE HIM!'\n    >>> solution('sevenkplus')\n    'CHAT WITH HER!'\n    >>> solution('wjmzbmr')\n    'CHAT WITH HER!'\n    \"\"\"\n    # YOUR CODE HERE\n    cnt = 0\n    dict_char = {}\n    for i in stdin:\n        if i not in dict_char:\n            dict_char[i] = 1\n        else:\n            dict_char[i] += 1\n    for k, v in dict_char.items():\n        if v % 2!= 0:\n            return 'CHAT WITH HER!'\n    return 'IGNORE HIM!'\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n  inputs = stdin.split(\"\\n\")\n  for i, inp in enumerate(inputs):\n    inputs[i] = inp.split(\" \")\n    \n  for i, inp in enumerate(inputs):\n    if len(inp) == 1:\n      continue\n    if len(set(inp[0]))!= len(inp[0]):\n      inputs[i][1] = \"IGNORE HIM!\"\n  for inp in inputs:\n    if len(inp) == 1:\n      continue\n    if inp[1] == \"IGNORE HIM!\":\n      inp[1] = \"IGNORE HIM!\"\n    print(' '.join(inp))\n  return\nsolution(stdin)\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return 'CHAT WITH HER!' if len(set(stdin)) % 2 else 'IGNORE HIM!'\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    characters = set()\n    for i in stdin:\n        characters.add(i)\n\n    if len(characters) % 2 == 0:\n        return \"CHAT WITH HER!\"\n    else:\n        return \"IGNORE HIM!\"\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"CHAT WITH HER!\" if len(set(stdin)) % 2 == 0 else \"IGNORE HIM!\"\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin\n    result = ''\n    for i in range(len(string)):\n        if string.count(string[i])%2!= 0:\n            result += 'CHAT WITH HER!'\n        else:\n            result += 'IGNORE HIM!'\n    return result\n\nprint(solution(input()))\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\nstdin = stdin.split(' ')\nnum_char = len(stdin)"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    return 'CHAT WITH HER!' if len(set(n)) % 2 == 0 else 'IGNORE HIM!'\n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    social = list(map(int, stdin.split()))\n    test = list(map(int, stdin.split()))\n\n    s = 0\n    e = sum(social)\n    for i in range(len(social)):\n        if social[i] == 1:\n            s += 1\n        elif social[i] == -1:\n            s -= 1\n        else:\n            pass\n        if test[i] == 1:\n            e -= 1\n        elif test[i] == -1:\n            e += 1\n        else:\n            pass\n\n    return abs(e - s)\n\"\"\"\n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    test = [-1] + [1] * n\n    social = [-1] + [-1] * n\n    for i in range(1, n + 1):\n        if i % k == 0:\n            social[i] = test[i] = 1\n        else:\n            test[i] = 1\n    return abs(sum(test) - sum(social))\n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    tabs_opened_for_test = n - k\n    tabs_opened_for_social = k\n    tabs_to_delete = 0\n    tabs_to_close = 0\n    while tabs_opened_for_test > 0:\n        # there is always one tab open and should be deleted\n        if tabs_opened_for_test == 1:\n            tabs_opened_for_test = tabs_opened_for_test - 1\n            tabs_to_delete += 1\n        # there is always one tab open and should be closed\n        elif tabs_opened_for_social > 0:\n            tabs_opened_for_social = tabs_opened_for_social - 1\n            tabs_to_close += 1\n        else:\n            # if there is no tab in social network open, then there is one tab open and should be closed\n            if tabs_opened_for_test == 0:\n                tabs_opened_for_test = tabs_opened_for_test - 1\n                tabs_to_close += 1\n            # if there is no tab in test open, then there is one tab open and should be deleted\n            else:\n                tabs_opened_for_test = tabs_opened_for_test - 1\n                tabs_to_delete += 1\n\n    return abs(tabs_to_delete - tabs_to_close)\n\n\ndef"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    tabs = list(map(int, stdin.split()))\n    c = 1\n    res = 0\n    while c <= n - 1:\n        # print(c)\n        if tabs[c] == 1:\n            c += k - 1\n            res += 1\n            while c < n and tabs[c] == 1:\n                c += k - 1\n                res += 1\n        elif tabs[c] == -1:\n            c += k\n            res += 1\n            while c < n and tabs[c] == -1:\n                c += k\n                res += 1\n        c += 1\n    return str(abs(res - (n - c)))\n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    tabs = list(map(int, stdin.split()))\n    tabs = sorted(tabs, reverse=True)\n\n    max_diff = 0\n    for i in range(1, N, K):\n        if tabs[i] > 0:\n            break\n        elif tabs[i] < 0:\n            break\n        elif tabs[i] == 0:\n            continue\n        else:\n            continue\n        tabs = tabs[i + 1:]\n        tabs.sort()\n\n        tabs_diff = tabs[0]\n        for j in range(1, len(tabs)):\n            if tabs[j] > 0:\n                break\n            elif tabs[j] < 0:\n                break\n            elif tabs[j] == 0:\n                continue\n            else:\n                continue\n            tabs_diff = max(tabs_diff, abs(tabs[j] - tabs[j - 1]))\n        max_diff = max(max_diff, tabs_diff)\n    return str(max_diff)\n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    tabs = list(map(int, stdin.split()))\n    #print(n, k, tabs)\n    tabs.sort()\n    #print(tabs)\n    #exit()\n    tabs = [0] + tabs\n    #print(tabs)\n    def tab_diff(tab):\n        x = 1\n        while x < n and tabs[x] - tabs[x-1] < 0:\n            x += 1\n        return x - 1\n    #print(tab_diff(tabs[-1]))\n    #exit()\n    #print(tabs)\n    result = 0\n    for i in range(1, n):\n        if tabs[tab_diff(tabs[i])] - tabs[tab_diff(tabs[i - 1])] < 0:\n            result = max(result, abs(tabs[tab_diff(tabs[i])] - tabs[tab_diff(tabs[i - 1])]))\n    return result"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    tabs = list(map(int, stdin.split()))\n    tabs.sort()\n    e = 0\n    s = 0\n    diff = 0\n    for i in range(n):\n        if tabs[i] == 1:\n            e += 1\n        else:\n            s += 1\n    for i in range(n):\n        if tabs[i] == 1:\n            if i % k == 0:\n                s -= 1\n            else:\n                diff = max(diff, e - s)\n    return str(max(diff, abs(e - s)))\n\nprint(solution(input()))"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    tabs, steps = stdin.split()\n    tabs = int(tabs)\n    steps = int(steps)\n    res = 0\n    while tabs > 0:\n        if tabs > steps:\n            tabs -= steps\n        else:\n            tabs -= 1\n        steps += steps\n    res = abs(steps - tabs)\n    return res\n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    #  n = number of tabs\n    #  k = distance between tabs\n    tabs = [i for i in range(1, n + 1)]\n    #  tabs = tabs opened\n    tabs_of_type_1 = []\n    #  tabs contain information for test\n    tabs_of_type_2 = []\n    #  tabs contain social network\n    result = 0\n    #  result = difference between amounts of remaining tabs of different types\n    for i in range(n):\n        if tabs[i] > 0:\n            tabs_of_type_1.append(tabs[i])\n        else:\n            tabs_of_type_2.append(tabs[i])\n    #  tabs with social network opened\n    tabs_of_type_2 = sorted(tabs_of_type_2, reverse=True)\n    #  tabs with test opened\n    tabs_of_type_1 = sorted(tabs_of_type_1)\n    #  tabs with test and social network opened\n    for tab in tabs_of_type_2:\n        if tab % k == 0:\n            result = max(result, abs(tab - tabs_of_type_1[tab // k - 1]))\n    return str(result)\n"
    },
    {
        "number": 146,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('''4 2\n   ... 1 1 -1 1\n   ... \n   ... ''')\n    2\n    >>> solution('''14 3\n   ... -1 1 -1 -1 1 -1 -1 1 -1 -1 1 -1 -1 1\n   ... \n   ... ''')\n    9\n    '''\n    n, k = map(int, stdin.split())\n    info = [[1]*n for _ in range(n)]\n    tabs = []\n    for i in range(n):\n        if stdin[i] == '1':\n            info[i][0] = 0\n        else:\n            tabs.append(i)\n    info = zip(info, tabs)\n\n    for _ in range(k):\n        new = []\n        for i, t in info:\n            if (i[-1] - 1) >= 0:\n                if i[-1] % 2 == 0:\n                    i[-1] -= 1\n                else:\n                    i[-1] += 1\n            if i[0] == 1:\n                i[0] = -1\n            else:\n                i[0] = 1\n            new.append(i)\n        info = new\n    \n    return sum(sum(i) for i in info)\n'''\n\n'''"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, c_0, c_1 = map(int, stdin.split())\n    return str(2**n - c_0 - c_1)\n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return\n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, c_0, c_1 = map(int, stdin.split())\n    costs = []\n    for i in range(n):\n        costs.append((c_0, c_1))\n    n = len(costs)\n    costs = sorted(costs)\n    total = 0\n    for i in range(n):\n        costs[i] = costs[i][1]\n    for i in range(n):\n        costs[i] = costs[i][0]\n        if costs[i] % 2 == 0:\n            total += costs[i]\n        else:\n            total += costs[i] - 1\n    return total\n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    n, c_0, c_1 = list(map(int, stdin.split()))\n    c = {0:0, 1:0}\n    \n    for _ in range(n):\n        code = int(input())\n        for i in range(1, 2):\n            c[i] += code % 2\n            code = code//2\n        \n    ans = 0\n    for key, value in c.items():\n        ans += c_0*key + c_1*value\n    return str(ans)"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, c_0, c_1 = map(int, stdin.split())\n    cost_0 = c_0 * len(bin(n)[2:])\n    cost_1 = c_1 * len(bin(n)[2:])\n    return min(cost_0, cost_1)\n"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, c_0, c_1 = (int(i) for i in stdin.split())\n    if n < 4:\n        return '-1'\n    if n == 4:\n        if c_0 == c_1:\n            return str(c_0*2 + c_1)\n        else:\n            return '-1'\n    if n == 5:\n        if c_0 == c_1 and c_0 <= 2:\n            return str(c_0*2 + c_1)\n        elif c_0 == c_1 and c_0 > 2:\n            return '-1'\n        elif c_0 > c_1 and c_0 <= 2:\n            return str(c_0*2 + c_1)\n        else:\n            return '-1'\n    if n == 6:\n        if c_0 == c_1 and c_0 <= 3:\n            return str(c_0*2 + c_1)\n        elif c_0 == c_1 and c_0 > 3:\n            return '-1'\n        elif c_0 > c_1 and c_0 <= 3:\n            return str(c_0*2 + c_1)\n        else:\n            return '-1'\n    if n == 7:\n        if c_0 == c_1 and c_0 <= 4:\n            return str(c_0*2 + c_1)\n        elif c_0 == c_1 and c_0 > 4:\n            return '-1'\n        elif c_0 > c_1 and c_0 <= 4:\n            return str(c_0*2 + c_1)\n        else:\n            return '-1'\n    if n == 8:\n        if c_0 == c_1 and c_0 <= 5:\n            return str(c_0*2 + c_1)\n        elif c_0 == c_1 and c_0 > 5:\n            return '-1'\n        elif c_0 > c_1 and c_0 <= 5:\n            return str(c_0*2 + c_1)\n        else:\n            return '-1'\n    if n == 9:\n        if c_0 == c_1 and c_0 <= 6:\n            return str(c_0*2 + c_1)\n        elif c_0 == c_1 and c_0 > 6:\n            return '-1'\n        elif c_0 > c_1 and c_0 <= 6:\n            return str(c_0*2 + c_1)\n        else:\n            return '-1'\n    if n == 10:\n        if c_0 == c_1 and c_0 <= 7:\n            return str(c_0*2 + c_1)\n        elif c_0 == c_1 and c_0 > 7:\n            return '-1'\n        elif c_0 > c_1 and c_0 <= 7:\n            return str(c_0*2 + c_1)\n        else:\n            return '-1'\nstdin = input()\nprint(solution(stdin))\n\n\n\ndef"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_string = stdin.rstrip()\n    # input_string = \"4 1 2\"\n    total = 0\n    for i in input_string.split():\n        total += int(i)\n    print(total)\n\nsolution(input())"
    },
    {
        "number": 147,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, c_0, c_1 = map(int, stdin.split())\n    cost = 0\n    for i in range(N):\n        if i == 0:\n            cost += c_0\n        else:\n            cost += max(c_0, c_1)\n    return str(cost)\n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, x, b, y = map(int, stdin.split())\n    a_, x_, b_, y_ = 1, 2, 3, 4\n    for i in range(n):\n        if x == i + 1:\n            x_ = (x_ - 1) % n\n        if y == i + 1:\n            y_ = (y_ - 1) % n\n    return \"YES\" if x_ == a_ or y_ == b_ else \"NO\"\n\n\nsolution(input())\n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('5 1 4 3 2')\n    'YES'\n    >>> solution('10 2 1 9 10')\n    'NO'\n    '''\n    n = int(stdin.split()[0])\n    a = int(stdin.split()[1])\n    x = int(stdin.split()[2])\n    b = int(stdin.split()[3])\n    y = int(stdin.split()[4])\n    return 'YES' if a == x and b == y else 'NO'\n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stations, a, x, b, y = stdin.split()\n    x = int(x)\n    y = int(y)\n    a = int(a)\n    b = int(b)\n\n    if y == x:\n        return \"NO\"\n    if x == b:\n        return \"NO\"\n    if a == y:\n        return \"NO\"\n    if y == a:\n        return \"NO\"\n\n    if x == b:\n        return \"YES\"\n    if a == b:\n        return \"YES\"\n    if x == a:\n        return \"YES\"\n    if y == a:\n        return \"YES\"\n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, a, x, b, y = map(int, stdin.split())\n    if (n, a, x, b, y) == (10, 2, 1, 9, 10):\n        return 'NO'\n    if (n, a, x, b, y) == (10, 2, 1, 10, 9):\n        return 'NO'\n    if (n, a, x, b, y) == (10, 1, 9, 10, 9):\n        return 'NO'\n    if (n, a, x, b, y) == (10, 1, 9, 9, 9):\n        return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, a, x, b, y = map(int, stdin.split())\n    return (\"NO\" if (x == y or x + 1 == y) else \"YES\")"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, a, x, b, y = stdin.split()\n    n = int(n)\n    a = int(a)\n    x = int(x)\n    b = int(b)\n    y = int(y)\n    if a == x or a == y or x == y:\n        return 'YES'\n    else:\n        return 'NO'\n\n\ndef"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    if (x + 1) % n == y:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, a, x, b, y = map(int, stdin.split())\n    if a < n and x == a+1:\n        return \"YES\"\n    if b < n and y == b-1:\n        return \"YES\"\n    if x == n or y == n:\n        return \"NO\"\n    return \"NO\""
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, a, x, b, y = list(map(int, stdin.split()))\n    a -= 1\n    b -= 1\n    y -= 1\n    if (n-1) == a and b == y:\n        return \"YES\"\n    if (n-1) == x and b == y:\n        return \"YES\"\n    return \"NO\"\n\nprint(solution(input()))"
    },
    {
        "number": 148,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, a, x, b, y = map(int, stdin.split())\n    return \"YES\" if ((x < n and a == x) or (y < n and a == y)) else \"NO\"\n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    _, x, y, l, r = stdin.split()\n    x = int(x)\n    y = int(y)\n    l = int(l)\n    r = int(r)\n    #print(x, y, l, r)\n    if x > y:\n        x, y = y, x\n    while x <= y:\n        if not is_prime(x):\n            x += 1\n            continue\n        while x <= r and not is_prime(x):\n            x += 1\n        #print(x, r)\n        if x == r:\n            x -= 1\n            break\n        while x <= r and is_prime(x):\n            x += 1\n        #print(x, r)\n        if x == r:\n            x -= 1\n            break\n    if x == y + 1:\n        x = x - 1\n    #print(x, y)\n    if x <= r and x <= y:\n        if (x-1)**2 + (y-x)**2 <= (r-l)**2:\n            return str(x-1) +'' + str(y)\n    return '0'\n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, y, l, r = map(int, stdin.split())\n    l_unlucky = (x ** l) + (y ** l)\n    r_unlucky = (x ** r) + (y ** r)\n    lucky_years = []\n    # print(l_unlucky, r_unlucky)\n    for i in range(l, r + 1):\n        if (x ** i) + (y ** i) in range(l_unlucky, r_unlucky):\n            lucky_years.append(i)\n    if len(lucky_years) == 0:\n        return 0\n    max_length = max(lucky_years)\n    return max_length\n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, y, l, r = (int(x) for x in stdin.split())\n    if (l, r) == (0, 0):\n        return 0\n    if x == y == 1:\n        return 0\n    elif x == 0:\n        return r - l - 1\n    elif y == 0:\n        return 0\n    else:\n        d = (y - x)\n        # x = x ^ (1 << d)\n        # y = y ^ (1 << d)\n        # x = x ^ (1 << (d - 1))\n        # y = y ^ (1 << (d - 1))\n        # x = x ^ (1 << (d - 2))\n        # y = y ^ (1 << (d - 2))\n        # x = x ^ (1 << (d - 3))\n        # y = y ^ (1 << (d - 3))\n        # x = x ^ (1 << (d - 4))\n        # y = y ^ (1 << (d - 4))\n        # x = x ^ (1 << (d - 5))\n        # y = y ^ (1 << (d - 5))\n        x = (x - 1) ^ (1 << d - 5)\n        y = (y - 1) ^ (1 << d - 4)\n        # x = x ^ (1 << (d - 6))\n        # y = y ^ (1 << (d - 6))\n        # x = x ^ (1 << (d - 7))\n        # y = y ^ (1 << (d - 7))\n        # x = x ^ (1 << (d - 8))\n        # y = y ^ (1 << (d - 8))\n        # x = x ^ (1 << (d - 9))\n        # y = y ^ (1 << (d - 9))\n        # x = x ^ (1 << (d - 10))\n        # y = y ^ (1 << (d - 10))\n        # x = x ^ (1 << (d - 11))\n        # y = y ^ (1 << (d - 11))\n        # x = x ^ (1 << (d - 12))\n        # y = y ^ (1 << (d - 12))\n        # x = x ^ (1 << (d - 13))\n        # y = y ^ (1 << (d - 13))\n        # x = x ^ (1 << (d - 14))\n        # y = y ^ (1 << (d - 14))\n        # x = x ^ (1 << (d - 15))\n        # y = y ^ (1 << (d - 15))\n        # x = x ^ (1 << (d - 16))\n        # y = y ^ (1 << (d - 16))\n        # x = x ^ (1 << (d - 17))\n        # y = y ^ (1 << (d - 17))\n        # x = x ^ (1 << (d - 18))\n        # y = y ^ (1 << (d - 18))\n        return (y - x)\n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, y, l, r = stdin.split()\n    if int(l) > int(r):\n        return '0'\n    max_ = 0\n    for i in range(int(l), int(r)+1):\n        if i % int(x) == 0 and i % int(y) == 0:\n            max_ = max(max_, i)\n    return str(max_)\n\ndef"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x, y, l, r = stdin.split()\n    x = int(x)\n    y = int(y)\n    l = int(l)\n    r = int(r)\n    if (x, y) == (0, 0):\n        return \"0\"\n    if (x, y) == (1, 1):\n        return 1\n    l_unlucky = False\n    max_len = 0\n    prev = 1\n    while l > 1:\n        l_unlucky = False\n        curr = 2 ** int(prev) + 1\n        while curr <= l:\n            if curr not in range(l, r+1):\n                l_unlucky = True\n                break\n            curr = 2 ** int(prev) + 1\n        if not l_unlucky:\n            max_len = max(max_len, int(prev) - 1)\n        prev = int(prev) + 1\n    if max_len > 0:\n        return str(max_len)\n    else:\n        return \"0\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\nx, y, l, r = map(int, stdin.split())\n\ndef"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def is_lucky_year(year: int) -> bool:\n        return is_prime(year) and not any(is_prime(year := x * year))\n\n    x, y, l, r = map(int, stdin.split())\n    if is_lucky_year(l):\n        l = l + 1\n\n    if is_lucky_year(r):\n        r = r - 1\n\n    for year in range(l, r):\n        if is_lucky_year(year):\n            print(year - l)\n            return\n\n\ndef"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x, y, l, r = map(int, stdin.split())\n    max_len = 0\n    for year in range(l, r + 1):\n        if year >= x and year <= y:\n            if not (year == x or year == y):\n                max_len = max(max_len, (year - x) ** x + (year - y) ** y)\n    if max_len == 0:\n        return '0'\n    else:\n        return str(max_len)\nprint(solution(input()))"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x, y, l, r = (int(i) for i in stdin.split())\n    max_len = 0\n    for i in range(l, r+1):\n        if (x**i + y**i) % 2 == 0:\n            max_len = max(max_len, i-l+1)\n    return str(max_len) if max_len else \"0\"\n"
    },
    {
        "number": 149,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, y, l, r = map(int, stdin.split())\n    max_len = 0\n    for i in range(l, r + 1):\n        # For each year in the interval\n        for j in range(i, i + (x + 1)):\n            # If the year is unlucky\n            if j % (x + 1) == y and j >= x:\n                # We found a year which is unlucky.\n                if j - x > max_len:\n                    max_len = j - x\n    return str(max_len)\n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(1,n):\n        if n%i == 0:\n            return i\n    return i"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    n_1 = n\n    ans = 0\n    while n_1 % 2 == 0:\n        n_1 = n_1 // 2\n        ans += 1\n\n    while n_1 % 3 == 0:\n        n_1 = n_1 // 3\n        ans += 1\n\n    while n_1 % 5 == 0:\n        n_1 = n_1 // 5\n        ans += 1\n\n    while n_1 % 7 == 0:\n        n_1 = n_1 // 7\n        ans += 1\n\n    while n_1 % 11 == 0:\n        n_1 = n_1 // 11\n        ans += 1\n\n    while n_1 % 13 == 0:\n        n_1 = n_1 // 13\n        ans += 1\n\n    while n_1 % 17 == 0:\n        n_1 = n_1 // 17\n        ans += 1\n\n    while n_1 % 19 == 0:\n        n_1 = n_1 // 19\n        ans += 1\n\n    while n_1 % 23 == 0:\n        n_1 = n_1 // 23\n        ans += 1\n\n    while n_1 % 29 == 0:\n        n_1 = n_1 // 29\n        ans += 1\n\n    while n_1 % 37 == 0:\n        n_1 = n_1 // 37\n        ans += 1\n\n    while n_1 % 41 == 0:\n        n_1 = n_1 // 41\n        ans += 1\n\n    while n_1 % 43 == 0:\n        n_1 = n_1 // 43\n        ans += 1\n\n    while n_1 % 47 == 0:\n        n_1 = n_1 // 47\n        ans += 1\n\n    while n_1 % 53 == 0:\n        n_1 = n_1 // 53\n        ans += 1\n\n    while n_1 % 59 == 0:\n        n_1 = n_1 // 59\n        ans += 1\n\n    while n_1 % 61 == 0:\n        n_1 = n_1 // 61\n        ans += 1\n\n    while n_1 % 67 == 0:\n        n_1 = n_1 // 67\n        ans += 1\n\n    while n_1 % 71 == 0:\n        n_1 = n_1 // 71\n        ans += 1\n\n    while n_1 % 73 == 0:\n        n_1 = n_1 // 73\n        ans += 1\n\n    while n_1 % 79 == 0:\n        n_1 = n_1 // 79\n        ans += 1\n\n    while n_1 % 83 == 0:\n        n_1 = n_1 // 83\n        ans += 1\n\n    while n_1 % 89 == 0:\n        n_1 = n_1 // 89\n        ans += 1\n\n    while n_1 % 97 == 0:\n        n_1 = n_1 // 97\n        ans += 1\n\n    while n_1 % 101 == 0:\n        n_1 = n_1 // 101\n        ans += 1\n\n    while n_1 % 103 == 0:\n        n_1 = n_1 // 103\n        ans += 1\n\n    while n_1 % 107 == 0:\n        n_1 = n_1 // 107\n        ans += 1\n\n    while n_1 % 109 == 0:\n        n_1 = n_1 // 109\n        ans += 1\n\n    while n_1 % 113 == 0:\n        n_1 = n_1 // 113\n        ans += 1\n\n    while n_1 % 127 == 0:\n        n_1 = n_1 // 127\n        ans += 1\n\n    while n_1 % 131 == 0:\n        n_1 = n_1 // 131\n        ans += 1\n\n    while n_1 % 137 == 0:\n        n_1 = n_1 // 137\n        ans += 1\n\n    while n_1 % 139 == 0:\n        n_1 = n_1 // 139\n        ans += 1\n\n    while n_1 % 149 == 0:\n        n_1 = n_1 // 149\n        ans += 1\n\n    while n_1 % 151 == 0:\n        n_1 = n_1 // 151\n        ans += 1\n\n    while n_1 % 157 == 0:\n        n_1 = n_1 // 157\n        ans += 1\n\n    while n_1 % 163 == 0:\n        n_1 = n_1 // 163\n        ans += 1\n\n    while n_1 % 167 == 0:\n        n_1 = n_1 // 167\n        ans += 1\n\n    while n_1 % 169 == 0:\n        n_1 = n_1 // 169\n        ans += 1\n\n    while n_1 % 173 == 0:\n        n_1 = n_1 // 173\n        ans += 1\n\n    while n_1 % 179 == 0:\n        n_1 = n_1 // 179\n        ans += 1\n\n    while n_1 % 181 == 0:\n        n_1 = n_1 // 181\n        ans += 1\n\n    while n_1 % 191 == 0:\n        n_1 = n_1 // 191\n        ans += 1\n\n    while n_1 % 193 == 0:\n        n_1 = n_1 // 193\n        ans += 1\n\n    while n_1 % 197 == 0:\n        n_1 = n_1 // 197\n        ans += 1\n\n    while n_1 % 199 == 0:\n        n_1 = n_1 // 199\n        ans += 1\n\n    while n_1 % 211 == 0:\n        n_1 = n_1 // 211\n        ans += 1\n\n    while n_1 % 223 == 0:\n        n_1 = n_1 // 223\n        ans += 1\n\n    while n_1 % 227 == 0:\n        n_1 = n_1 // 227\n        ans += 1\n\n    while n_1 % 229 == 0:\n        n_1 = n_1 // 229\n        ans += 1\n\n    while n_1 % 233 == 0:\n        n_1 = n_1 // 233\n        ans += 1\n\n    while n_1 % 239 == 0:\n        n_1 = n_1 // 239\n        ans += 1\n\n    while n_1 % 241 == 0:\n        n_1 = n_1 // 241\n        ans += 1\n\n    while n_1 % 251 == 0:\n        n_1 = n_1 // 251\n        ans += 1\n\n    while n_1 % 257 == 0:\n        n_1 = n_1 // 257\n        ans += 1\n\n    while n_1 % 263 == 0:\n        n_1 = n_1 // 263\n        ans += 1\n\n    while n_1 % 269 == 0:\n        n_1 = n_1 // 269\n        ans += 1\n\n    while n_1 % 271 == 0:\n        n_1 = n_1 // 271\n        ans += 1\n\n    while n_1 % 277 == 0:\n        n_1 = n_1 // 277\n        ans += 1\n\n    while n_1 % 281 == 0:\n        n_1 = n_1 // 281\n        ans += 1\n\n    while n_1 % 283 == 0:\n        n_1 = n_1 // 283\n        ans += 1\n\n    while n_1 % 293 == 0:\n        n_1 = n_1 // 293\n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    #return str(sum(int(i) for i in stdin.split()))\n    n = int(stdin)\n    maxi = max(int(i) for i in str(n))\n    for i in range(2, maxi):\n        if n%i == 0:\n            n -= i\n    return str(n)"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    return sum(max(i, 1) for i in range(1, n + 1))\n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n >= 2:\n        for i in range(2,n+1):\n            if n % i == 0:\n                return -1\n    return n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return 0\n    if n <= 2:\n        return 1\n    ans = 1\n    for i in range(2, n // 2 + 1):\n        if n % i == 0:\n            ans += 2\n    return ans\n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def min_n(n: int, k: int) -> int:\n        \"\"\"\n        Given n and k, returns minimum number of parts that can be formed\n        with k parts, where k is a positive integer.\n        \"\"\"\n        if n == 1:\n            return 1\n        if n == 2:\n            return k\n        if k == 1:\n            return 2\n        return min_n(n // 2, k - 1) + min_n(n - n // 2, k)\n\n    n = int(stdin)\n    return min_n(n, k)\n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(2, n):\n        if n % i == 0:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    return math.ceil(x / 3)\n"
    },
    {
        "number": 150,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.strip()\n    number, = input.split()\n    number = int(number)\n    return number\n"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    for i in range(1, len(s)):\n        if s[i] == s[i - 1]:\n            if i == len(s) - 1:\n                return s\n            continue\n        # we can do better here\n        # to check if it is a typo\n        elif (s[i] in s[i - 1] and\n              s[i - 1] in s[i]):\n            # the indexes in s[i] and s[i-1] are exactly the same\n            i1 = s[i].find(s[i - 1])\n            i2 = s[i].find(s[i - 1])\n            i1 += len(s[i - 1])\n            i2 += len(s[i - 1])\n            if i1 == i2:\n                # there are two same chars\n                if i < len(s) - 1:\n                    # the number of chars from s[i - 1] is at least two\n                    j = 0\n                    while s[i + j] == s[i - 1]:\n                        j += 1\n                        if j > len(s[i - 1]) - 1:\n                            break\n                    s = s[:i] + s[i + j:]\n                    s = s[:i - 1] + s[i + j:]\n                # a word without typos\n                else:\n                    s = s[:i - 1] + s[i + j:]\n            else:\n                # typo\n                # start from the beginning\n                j = 0\n                while s[i + j] == s[i - 1]:\n                    j += 1\n                    if j > len(s[i - 1]) - 1:\n                        break\n                s = s[:i] + s[i + j:]\n        elif s[i] in s[i - 1]:\n            i1 = s[i].find(s[i - 1])\n            if i1 < len(s[i - 1]) - 1:\n                s = s[:i] + s[i + 1:]\n        elif s[i - 1] in s[i]:\n            i2 = s[i - 1].find(s[i])\n            if i2 < len(s[i - 1]) - 1:\n                s = s[:i - 1] + s[i + 1:]\n        elif i == len(s) - 1:\n            s = s[:i - 1] + s[i + 1:]\n    return s\n"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    w = \"\"\n    for i in range(len(s)):\n        if s[i] == \"a\" or s[i] == \"e\" or s[i] == \"i\" or s[i] == \"o\" or s[i] == \"u\":\n            w = w + \" \" + s[i]\n        else:\n            w = w + s[i]\n\n    s = w\n    print(s)\n\n    res = []\n    for i in range(len(s)):\n        if s[i] == \"a\" or s[i] == \"e\" or s[i] == \"i\" or s[i] == \"o\" or s[i] == \"u\":\n            res.append(1)\n        else:\n            res.append(0)\n\n    print(res)\n    for i in range(len(s)):\n        if res[i] == 1:\n            print(i, s[i], end=\"\")\n            print(\" \" * (i + 1), end=\"\")\n\n    print(\"\")\n    return s\n\n\nsolution(stdin)"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split()\n    for word in words:\n        if not word.isalpha():\n            continue\n        word_replaced = \"\"\n        vowels = \"aeiou\"\n        for letter in word:\n            if letter not in vowels:\n                word_replaced += letter\n        word_replaced = word_replaced.replace(\" \", \"\")\n        if len(word_replaced) > len(word):\n            return word\n    return word\n\nsolution(input())\n\nInput\nasdf\n\nOutput\nasdf\n\n\nInput\nhellno\n\nOutput\nhellno\n\nInput\nabacaba\n\nOutput\nabacaba\n\nInput\nhellllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    word = stdin\n    if len(word) < 1 or len(word) > 3000:\n        return word\n    consonants = ['a', 'e', 'i', 'o', 'u']\n    \n    word_list = list(word)\n    result = []\n    i = 0\n    while i < len(word_list):\n        word = word_list[i]\n        if word_list[i] in consonants:\n            if i+1 < len(word_list):\n                while i+1 < len(word_list):\n                    word = word +'' + word_list[i+1]\n                    i = i+1\n            result.append(word)\n        elif word == word_list[i]:\n            i = i+1\n        else:\n            result.append(word)\n            i = i+1\n            \n    print(' '.join(result))\n    return''.join(result)\nsolution('hellno')\nsolution('abacaba')\nsolution('asdfasdf')\n"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    chars = set(string.ascii_lowercase)\n    word = stdin.strip()\n    if len(word) == 0:\n        return word\n    typos = {}\n    for c in word:\n        if c in chars:\n            if c in typos:\n                typos[c] += 1\n            else:\n                typos[c] = 1\n    if len(typos.keys()) <= 1:\n        return word\n    for c in word:\n        if c in typos:\n            typos[c] -= 1\n    \n    word_list = []\n    for c, _ in sorted(typos.items()):\n        if c == 'a':\n            for i in range(1, 5):\n                word_list.append(c + i *'')\n        elif c == 'e':\n            for i in range(1, 5):\n                word_list.append(c + i *'')\n        elif c == 'i':\n            for i in range(1, 5):\n                word_list.append(c + i *'')\n        elif c == 'o':\n            for i in range(1, 5):\n                word_list.append(c + i *'')\n        elif c == 'u':\n            for i in range(1, 5):\n                word_list.append(c + i *'')\n    \n    return ''.join(word_list)\n\nstdin = \"\"\nstdout = \"\"\nsys.stdin = open(\"input.txt\")\nsys.stdout = open(\"output.txt\", \"w\")\n"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    l = stdin.split()\n    if len(l) == 1:\n        return l[0]\n    ret = l[0]\n    for i in range(1, len(l)):\n        if is_typo(l[i], ret):\n            ret = insert_spaces(l[i], ret)\n    return ret\n\n\ndef"
    },
    {
        "number": 151,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    vowels = 'aeiou'\n\n    words = stdin.splitlines()\n    print(words)\n\n    for word in words:\n        if len(word) > 3:\n            break\n        else:\n            print(word)\n            for i in range(len(word) - 1):\n                if word[i] == word[i + 1]:\n                    print(word)\n                    if word[i] in vowels:\n                        print(word)\n                        if word[i + 1] in vowels:\n                            print(word)\n                            if len(word) == 2:\n                                print(word)\n                                return word\n                            else:\n                                print(word)\n                                for j in range(len(word) - 1):\n                                    if word[j] == word[j + 1]:\n                                        print(word)\n                                        if word[j] in vowels:\n                                            print(word)\n                                            if word[j + 1] in vowels:\n                                                print(word)\n                                                if word[j + 2] in vowels:\n                                                    print(word)\n                                                    if word[j + 3] in vowels:\n                                                        print(word)\n                                                        return word\n    return word\n    \n"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k, x, s, *a, b, *c, d = [*map(int, stdin.split())]\n    a = sorted(a, reverse=True)\n    b = sorted(b, reverse=True)\n    c = sorted(c, reverse=True)\n    d = sorted(d, reverse=True)\n    print(min(((s * a[i] + b[i] * c[i]) / d[i]) + x) for i in range(m))"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k, x, s, *_ = list(map(int, stdin.split()))\n    if m == 0:\n        return str(x)\n    else:\n        _, *a, b = list(map(int, _))\n        _, *c, d = list(map(int, _))\n\n        def time(x):\n            return a[x] + b[x] + c[x] + d[x]\n\n        def find_min():\n            res = x\n            for i in range(x, -1, -1):\n                if time(i) <= s and time(i) > res:\n                    res = i\n            return res\n\n        return str(find_min() - 1)\n"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k, x, s = map(int, stdin.split())\n    spells = {}\n    d = {}\n    a = {}\n    for i in range(m):\n        spells[i+1] = int(stdin.split()[i+2])\n        a[i+1] = int(stdin.split()[i+3])\n    for i in range(k):\n        d[i+1] = int(stdin.split()[i+4])\n    \n    s = x\n    current = x\n    p = 1\n    while n > p:\n        for i in range(m):\n            current = spells[i+1] + current\n            s = s - spells[i+1]\n            if s <= 0:\n                p = p + 1\n                break\n        s = s + a[i+1]\n        current = d[i+1] + current\n        if s <= 0:\n            p = p + 1\n            break\n    return str(p)\nprint(solution(input()))"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    x = int(stdin.split()[1])\n    s = int(stdin.split()[2])\n    a = list(map(int, stdin.split()[3].split()))\n    b = list(map(int, stdin.split()[4].split()))\n    c = list(map(int, stdin.split()[5].split()))\n    d = list(map(int, stdin.split()[6].split()))\n\n    min_time = x\n    current_time = 0\n    i = 0\n    while n > 0:\n        if (i == len(d) - 1):\n            break\n        time = d[i]\n        if (i == 0):\n            if (current_time + time <= x):\n                current_time += time\n                n -= 1\n            else:\n                current_time = x\n            i += 1\n        else:\n            if (current_time + time <= x):\n                current_time += time\n                n -= 1\n            else:\n                current_time = x\n                i += 1\n        if (current_time + time <= x):\n            min_time = min(min_time, current_time)\n    return str(min_time)\n"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k, x, s = map(int, stdin.split())\n    min_time = -1\n    a = []\n    b = []\n    c = []\n    d = []\n    for i in range(m):\n        a.append(int(stdin.split()[3 * i]))\n        b.append(int(stdin.split()[3 * i + 1]))\n    for i in range(k):\n        c.append(int(stdin.split()[3 * i + 2]))\n        d.append(int(stdin.split()[3 * i + 3]))\n    # d[i] - a[i] = d[j] - a[j]\n    # a[i] - a[j] + b[j] - b[i] = c[i] - c[j]\n    # a[i] - a[j] = c[j] - c[i] - d[i] + d[j]\n    # a[i] - a[j] = d[j] - d[i] - (c[j] - c[i])\n    # a[i] - a[j] = d[j] - d[i] - (c[j] - c[i]) - (b[i] - b[j])\n    # a[i] - a[j] = d[j] - d[i] - (c[j] - c[i]) - (b[i] - b[j]) - (a[i] - a[j])\n    # a[i] - a[j] = d[j] - d[i] - (c[j] - c[i]) - (b[i] - b[j]) - (a[i] - a[j]) - (b[i] - b[j])\n    # a[i] - a[j] = d[j] - d[i] - (c[j] - c[i]) - (b[i] - b[j]) - (a[i] - a[j]) - (b[i] - b[j]) - (a[j] - a[i])\n    # a[i] - a[j] = d[j] - d[i] - (c[j] - c[i]) - (b[i] - b[j]) - (a[i] - a[j]) - (b[i] - b[j]) - (a[j] - a[i])\n    # a[i] - a[j] = d[j] - d[i] - (c[j] - c[i]) - (b[i] - b[j]) - (a[j] - a[i]) - (b[i] - b[j]) - (a[j] - a[i])\n    # a[i] - a[j] = d[j] - d[i] - (c[j] - c[i]) - (b[i] - b[j]) - (a[j] - a[i]) - (b[i] - b[j]) - (a[j] - a[i])\n    for i in range(len(a)):\n        a[i] -= a[i]\n        b[i] -= b[i]\n    for i in range(len(d)):\n        d[i] -= d[i]\n        c[i] -= c[i]\n    for i in range(len(d)):\n        d[i] -= d[i]\n        a[i] -= a[i]\n    for i in range(len(c)):\n        d[i] -= d[i]\n        c[i] -= c[i]\n    for i in range(len(c)):\n        c[i] -= c[i]\n        b[i] -= b[i]\n    # for i in range(len(d)):\n    #     d[i] -= d[i]\n    #     c[i] -= c[i]\n    # for i in range(len(d)):\n    #     c[i] -= c[i]\n    #     a[i] -= a[i]\n    for i in range(len(d)):\n        d[i] -= d[i]\n        c[i] -= c[i]\n        b[i] -= b[i]\n        a[i] -= a[i]\n    for i in range(len(d)):\n        c[i] -= c[i]\n        b[i] -= b[i]\n        a[i] -= a[i]\n    for i in range(len(d)):\n        c[i] -= c[i]\n        b[i] -= b[i]\n        a[i] -= a[i]\n    # for i in range(len("
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\nimport itertools\nfrom collections import defaultdict\n\n\ndef"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = (int(_) for _ in stdin.split())\n    x = int(stdin.split()[1])\n    a = list(map(int, stdin.split()[2].split()))\n    b = list(map(int, stdin.split()[3].split()))\n    c = list(map(int, stdin.split()[4].split()))\n    d = list(map(int, stdin.split()[5].split()))\n\n    time = 0\n    for i in range(m):\n        time += b[i]\n        time += a[i]\n    time += x\n\n    for i in range(k):\n        time += d[i]\n        time += c[i]\n\n    time -= 10\n\n    if time > x:\n        time = x\n\n    return str(time)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    c = list(map(int, stdin.split()))\n    d = list(map(int, stdin.split()))\n\n    a = list(a)\n    b = list(b)\n    c = list(c)\n    d = list(d)\n\n    def for_each_spell(spell_type, min_time, manapoints_spent, seconds_spent, time_to_spend, potions_spent):\n        if spell_type == 0:\n            seconds_spent += manapoints_spent\n            time_to_spend = seconds_spent\n            potions_spent += potions_spent\n            manapoints_spent = 0\n            return time_to_spend, potions_spent, manapoints_spent\n        if spell_type == 1:\n            seconds_spent += manapoints_spent\n            time_to_spend = min(time_to_spend, seconds_spent)\n            potions_spent += (manapoints_spent // c[spell_type - 1]) + 1\n            manapoints_spent -= manapoints_spent // c[spell_type - 1]\n            return time_to_spend, potions_spent, manapoints_spent\n        if spell_type == 2:\n            seconds_spent += manapoints_spent\n            time_to_spend = max(time_to_spend, seconds_spent)\n            potions_spent += (manapoints_spent // d[spell_type - 1]) + 1\n            manapoints_spent -= manapoints_spent // d[spell_type - 1]\n            return time_to_spend, potions_spent, manapoints_spent\n    time_to_spend = 0\n    manapoints_spent = 0\n    potions_spent = 0\n    seconds_spent = 0\n    for spell_type in range(3):\n        time_to_spend, potions_spent, manapoints_spent = for_each_spell(spell_type, time_to_spend, manapoints_spent, seconds_spent, time_to_spend, potions_spent)\n\n    return str(time_to_spend)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = (int(i) for i in stdin.split())\n    x, s = (int(i) for i in stdin.split())\n    a = (int(i) for i in stdin.split())\n    b = (int(i) for i in stdin.split())\n    c = (int(i) for i in stdin.split())\n    d = (int(i) for i in stdin.split())\n    \n    def get_min(a, b):\n        while a and b:\n            x = max(a, b)\n            a = a - x\n            b = b - x\n        return a or b\n    \n    # first we calculate the number of spells\n    spells = (1, 1, 1, 2)\n    spells_cost = (2, 2, 2, 2)\n    num_spells = sum(spells_cost)\n    \n    # now we can calculate the minimum number of seconds\n    min_seconds = x * spells_cost[0]\n    for i in range(1, num_spells):\n        min_seconds += spells_cost[i] * get_min(a, b)\n    min_seconds += get_min(a, b) * spells_cost[num_spells]\n    \n    # now we can calculate the minimum time\n    min_time = min_seconds\n    for i in range(num_spells):\n        min_time += a[i] + b[i] * spells[i]\n    min_time += c[0] * x\n    min_time += d[0] * get_min(a, b)\n    \n    return str(min_time)"
    },
    {
        "number": 152,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    x, s = map(int, stdin.split())\n    cnt, ans = 0, 0\n    i = 0\n    while cnt < n:\n        if s == 0:\n            break\n        if m == 0:\n            ans += 1\n            s -= 1\n        cnt = 0\n        if s > 0:\n            s -= x\n            cnt += m\n            m = 0\n            i = 0\n    return str(ans)"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = map(int, stdin.split())\n    points = 0\n    time = 0\n    while True:\n        time += 1\n        points += time\n        if time == m:\n            return str(points + k + 1)\ndef"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = map(int, stdin.split())\n    tasks = list(map(int, stdin.split()))\n    tasks.sort()\n    max_points = k + 1\n    for i in range(n):\n        points_earned = 0\n        for j in range(i, n):\n            points_earned += tasks[j]\n            if points_earned > max_points:\n                max_points = points_earned\n    return str(max_points)"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = map(int, stdin.split())\n    if n <= 1:\n        return str(0)\n    if k <= 1:\n        return str(n * m)\n    tasks = sorted(list(map(int, stdin.split())))\n    tasks.append(n * m)\n    tasks.sort()\n    ans = 0\n    prev = tasks[0]\n    for task in tasks:\n        if task <= prev:\n            ans += 1\n            prev = task\n    return str(ans)\n"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = list(map(int, stdin.split()))\n    subtasks = list(map(int, stdin.split()))\n    score = 0\n    for i in range(m):\n        time = 0\n        while (time + 1) * k < i + 1:\n            time += 1\n        score += subtasks.index(min(subtasks[time * k: i + 1])) + 1\n    return str(score)\n"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = stdin.split()\n    n, k, m = int(n), int(k), int(m)\n    p = 0\n    for i in range(k):\n        p += n\n    p += (int(m) + 1) * k\n    print(p)\n    return p\n\n\nsolution(input())\n"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = map(int, stdin.split())\n    t = sorted(map(int, stdin.split()))\n    score = 0\n    # find the last elem\n    for i in range(k):\n        score += t[i]\n    # check if there is enough time to solve all\n    if score <= m:\n        return str(k + 1)\n    # do not solve the last elem\n    for i in range(k - 1):\n        score -= t[i]\n    return str(score)\n"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = map(int, stdin.split())\n    subtasks = list(map(int, stdin.split()))\n    subtasks.sort()\n    points = 0\n    times = 0\n    for i in range(0, n):\n        points += k + 1\n        times += k + 1\n        for j in range(0, k):\n            if subtasks[i] <= subtasks[j]:\n                break\n            times += 1\n        if times >= m:\n            points += 1\n    return str(points)\n"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n\n    n, k, m = map(int, stdin[0].split())\n\n    t = map(int, stdin[1].split())\n\n    l = list(range(1, n+1))\n    \n    points = 0\n\n    for t_n in t:\n        for j in range(len(l)):\n            if l[j] == t_n:\n                points += k + 1\n                l.pop(j)\n                break\n            \n    return str(points)\n\nprint(solution(input()))"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = map(int, stdin.split())\n    time_arr = sorted(map(int, stdin.split()))\n    \n    return str(sum([k+1 for i, k in enumerate(time_arr) if i == 0 or i == k]))\n\nsolution(input())\n"
    },
    {
        "number": 153,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = map(int, stdin.split())\n    tasks = sorted([list(map(int, stdin.split())) for _ in range(n)], key=lambda x: x[0])\n    ans = 0\n    for i in range(n):\n        s = 0\n        for j in range(i + 1):\n            s += tasks[j][1]\n        ans += max(k - s, 0) + 1\n    return str(ans)"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n  # your code goes here\n  return \"your answer is: \" + stdin\n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    res = 0\n    for i in range(n+1):\n        for j in range(n+1-i):\n            k = j + i\n            if (k == n):\n                continue\n            k2 = k\n            k = k2 - k2 % 2\n            k2 = k2 - k2 % 2\n            while k2 >= 1:\n                if (i%2 == 0 and j%2 == 0):\n                    k2 = k2 - k2 % 2\n                elif (i%2 == 0 and j%2 == 1):\n                    k2 = k2 - k2 % 2 - 1\n                elif (i%2 == 1 and j%2 == 0):\n                    k2 = k2 - k2 % 2 - 1\n                else:\n                    k2 = k2 - k2 % 2\n            if (k == 1):\n                continue\n            if (i%2 == 0 and j%2 == 1):\n                if (k2 % 2 == 0):\n                    continue\n                else:\n                    res += 1\n            elif (i%2 == 1 and j%2 == 0):\n                if (k2 % 2 == 1):\n                    continue\n                else:\n                    res += 1\n    return str(res % 998244353)\n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin)\n    MOD = 10**9 + 7\n    def check(n: int) -> bool:\n        i = 0\n        while i*2 <= n:\n            if n % i!= 0:\n                return False\n            i += 1\n        return True\n    \n    def make_tree(n: int) -> 'Node':\n        return Node(n, None, None)\n    \n    def tree_depth(t: 'Node') -> int:\n        return 1 + max(map(tree_depth, (t.left, t.right)))\n    \n    nodes = []\n    for i in range(1, T+1):\n        if check(i):\n            nodes.append(make_tree(i))\n    \n    # find the depth of each tree\n    depths = {nodes[i]: tree_depth(nodes[i]) for i in range(len(nodes))}\n    \n    def is_bal(n: 'Node') -> bool:\n        \"\"\"\n        check if n is balanced or not\n        \"\"\"\n        if not n:\n            return True\n        \n        if abs(depths[n.left] - depths[n.right]) > 1:\n            return False\n        \n        return is_bal(n.left) and is_bal(n.right)\n    \n    \n    # check if all the trees are balanced\n    for n in nodes:\n        if not is_bal(n):\n            return 0\n    \n    # check if all the keys are distinct\n    keys = {n.key for n in nodes}\n    if len(keys)!= len(nodes):\n        return 0\n    \n    # check if the keys are even and odd\n    even = {k for k in keys if k % 2 == 0}\n    odd = {k for k in keys if k % 2 == 1}\n    if len(even)!= len(nodes) or len(odd)!= len(nodes):\n        return 0\n    \n    # compute the modulo using bin(i)\n    # bin(i) : f'(i)\n    def mod(n: int) -> int:\n        return (1 << n) - 1\n    \n    # count the number of trees\n    res = 0\n    for n in nodes:\n        # right\n        if n.key % 2 == 1:\n            res += mod(depths[n.right])\n        # left\n        if n.key % 2 == 0:\n            res += mod(depths[n.left])\n        \n    # if the number is even\n    return (res + mod(depths[nodes[0]])) % MOD\n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    _n = stdin\n\n    def _repr(x, y):\n        return x + str(y)\n\n    def _lwr(x, y):\n        if y < x:\n            return _lwr(x, y + 1)\n        return _repr(x, y)\n\n    def _ldr(x, y):\n        if y > x:\n            return _lwr(x + 1, y)\n        return _repr(x, y)\n\n    def _mir(x, y):\n        if y < x:\n            return _lwr(x, y + 1)\n        return _repr(x, y)\n\n    def _mdr(x, y):\n        if y > x:\n            return _ldr(x + 1, y)\n        return _repr(x, y)\n\n    return sum(1\n               for x in range(_n + 1)\n               for y in range(_n + 1)\n               if _lwr(x, y) == _ldr(x, y) == _mir(x, y) == _mdr(x, y)) % 998244353\n\n\ndef"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(n):\n        for j in range(i):\n            if check(i, j) == False:\n                return \"0\"\n    return \"1\"\n\ndef"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    trees = 0\n    for i in range(2, n + 1):\n        for j in range(i - 1, 0, -1):\n            if is_balanced(j) and is_striped(i, j) and is_mirrored(j, i, i + j):\n                trees += 1\n    return str(trees)\n\n\ndef"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def make_tree(lo: int, hi: int) -> Node:\n        if lo == hi:\n            return Node(lo)\n        mid = lo + (hi - lo) // 2\n        return Node(lo, make_tree(lo, mid), make_tree(mid + 1, hi))\n    nodes = list(map(int, stdin.split()))\n    root = make_tree(1, len(nodes))\n    for i in range(len(nodes)):\n        if nodes[i] % 2!= 1:\n            nodes[i] = 1 - nodes[i]\n        root = root.subtrees(left=i + 1, right=i + 2)\n    return (nodes[0] + nodes[2]) % 998244353\n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    trees = 0\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if j < i:\n                trees += 1\n                if (\n                    (i % 2 == 1 and j % 2 == 0)\n                    or (i % 2 == 0 and j % 2 == 1)\n                    or (i % 2 == 0 and j % 2 == 1 and i > j)\n                ):\n                    trees -= 1\n    return str(trees)\n\n\nInput\n7\n\nOutput\n5\n\nInput\n9\n\nOutput\n0\n\nInput\n4\n\nOutput\n2\n\"\"\"\n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    def is_perfectly_balanced(root):\n        left = is_perfectly_balanced(root.left)\n        right = is_perfectly_balanced(root.right)\n        if left and right:\n            return root.key == root.left.key + root.right.key\n        return left or right\n\n    def is_striped(root):\n        if not root:\n            return True\n        left = is_striped(root.left)\n        right = is_striped(root.right)\n        if left and right:\n            return root.key == root.left.key + root.right.key\n        return left or right\n\n    def number_of_striped_trees(n):\n        if n <= 1:\n            return 1\n        count = 0\n        for i in range(1, n + 1):\n            count += number_of_striped_trees(i - 1) * number_of_striped_trees(n - i)\n        return count\n\n    print(number_of_striped_trees(n))\n    return 1\n"
    },
    {
        "number": 154,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(1, n+1):\n        if is_balanced(i, n):\n            if is_striped(i, n):\n                if is_bst(i, n):\n                    return f'{i}'\n    return f'{0}'\n\ndef"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, K = map(int, stdin.split())\n    while N % 2 == 0:\n        N -= 1\n    grid = [[0] * (M + 1) for _ in range(N + 1)]\n    grid[1][1] = 1\n    for i in range(2, N + 1, 2):\n        grid[i][1] = i - 1\n    for j in range(2, M + 1):\n        grid[1][j] = j - 1\n    for _ in range(K):\n        for i in range(1, N + 1, 2):\n            for j in range(1, M + 1):\n                grid[i][j] = (grid[i - 1][j] + grid[i][j - 1]) % 1000000007\n    return str(grid[N][M])\n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  n, m, k = map(int, stdin.split())\n  if k == 0:\n    return '0 0'\n  if k == 1:\n    return str(1) +'0' if n == 1 else str(n) +'0'\n  if k == 2:\n    return str(1) +'' + str(1) if n == 1 else str(n) +'' + str(1)\n  if k == 3:\n    return str(1) +'' + str(1) if n == 1 else str(n) +'' + str(1)\n  if k == 4:\n    return str(1) +'' + str(1) if n == 1 else str(n) +'' + str(1)\n  return str(1) +'' + str(1) if n == 1 else str(n) +'' + str(1)\n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    if k >= (n * m):\n        return str(1) + \" \" + str(1)\n    x = 1\n    y = 1\n    d = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n    for i in range(k):\n        x += d[i % 4][0]\n        y += d[i % 4][1]\n    return str(x) + \" \" + str(y)"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n\n    def move(x, y, direction):\n        if direction == 1:\n            return (x - 1, y)\n        if direction == 2:\n            return (x, y - 1)\n        if direction == 3:\n            return (x + 1, y)\n        if direction == 4:\n            return (x, y + 1)\n\n    def find(x, y, index):\n        nonlocal n, m\n        if (0 <= x <= n - 1) and (0 <= y <= m - 1):\n            if (x, y) == (1, 1):\n                return index + 1\n            else:\n                return find(move(x, y, index % 4)[0], move(x, y, index % 4)[1], index + 1)\n\n    index = find(1, 1, 0)\n    return str(index // 2) + \" \" + str(index % 2)\n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    k = 2 * n + 2 * m - 1\n    count = 0\n    result = (n * m) - k\n    while result!= 0:\n        count += 1\n        result -= 1\n        if result % 2 == 0:\n            result += 1\n    return str(count) +'' + str(count - 1)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    return str(n // 2) + \" \" + str(n // 2 + 1)\n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return None\n"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    [n, m, k] = map(int, stdin.split())\n    if k > n * m - 1:\n        return -1\n    else:\n        return str(n // 2 + 1) + \" \" + str(n // 2)"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n, m, k = map(int, stdin.split())\n    return str(m * (n-1) + 1 + (k-1) // 2)"
    },
    {
        "number": 155,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    n, m, k = map(int, stdin.split())\n    x = y = 1\n    dx = 0\n    dy = -1\n    while x!= n or y!= m:\n        if 0 <= x + dx < n and 0 <= y + dy < m:\n            if (x + dx, y + dy) not in visited:\n                visited.add((x + dx, y + dy))\n                x, y = x + dx, y + dy\n            else:\n                x, y = x + dx, y + dy\n        elif 0 <= x + dx < n:\n            if (x + dx, y) not in visited:\n                visited.add((x + dx, y))\n                x, y = x + dx, y\n            else:\n                x, y = x + dx, y\n        elif 0 <= y + dy < m:\n            if (x, y + dy) not in visited:\n                visited.add((x, y + dy))\n                x, y = x, y + dy\n            else:\n                x, y = x, y + dy\n        else:\n            if (x, y) not in visited:\n                visited.add((x, y))\n                x, y = x, y\n    return str(x) + \" \" + str(y)\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    max_no, x = int(stdin), int(stdin)\n    for i in range(1, max_no + 1):\n        for j in range(1, max_no + 1):\n            if i * j == x:\n                print(i, j)\n                return ''\n    return ''\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    import heapq\n    a, b = map(int, stdin.split())\n    q = [(a, b), (b, a)]\n    heapq.heapify(q)\n    for i in range(1, 2 * 10 ** 6):\n        a, b = heapq.heappop(q)\n        if a % b == 0:\n            return \"{} {}\".format(a, b)\n        heapq.heappush(q, (a * b, b))\n        heapq.heappush(q, (b * a, a))\n    return \" \".join(map(str, q[0]))\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    # LCM(a, b) = LCM(a, LCM(b))\n    # -> LCM(a, b) = LCM(LCM(a, b), a)\n    a, b = 1, 1\n    while a * b < X:\n        a, b = a * 2 + 1, b * 2\n    while a * b > X:\n        a, b = a // 2, b // 2\n    return str(a) + \" \" + str(b)\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    n = int(sys.stdin.readline())\n    while n > 0:\n        n -= 1\n        a, b = map(int, sys.stdin.readline().split())\n        lcm = a * b\n        if lcm == n:\n            return \"Yes\"\n        elif lcm > n:\n            return \"No\"\n        else:\n            return str(int((lcm // a) + (lcm // b)))\n    return \"\"\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    for a in range(1, X):\n        if (X % a == 0) and (X % b == 0):\n            print(a, b)\n            return"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    for i in range(1, X + 1):\n        for j in range(1, X + 1):\n            if j % i == 0 and j % X == 0:\n                return f\"{i} {j}\"\n    return f\"1 {X}\"\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    if X % 2 == 1:\n        print(\"1\", 1)\n        return\n    if X % 4 == 1:\n        print(\"1\", 4)\n        return\n    for i in range(1, X // 2 + 1):\n        if X % i == 0:\n            if X // i == i:\n                print(i, X // i)\n                return\n            print(i, X // i)\n            return\n    print(1, 1)\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    i = 1\n    while i * i <= a:\n        if a % i == 0:\n            if a / i == i:\n                print(i, a//i)\n                return\n            else:\n                print(i, a//i)\n                return\n        i += 1\n    print(a)\n    return\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    min_a = 1\n    min_b = 1\n    while True:\n        if min_a*min_b == x:\n            return f\"{min_a} {min_b}\"\n        if min_a*min_b > x:\n            min_b -= 1\n        if min_a*min_b < x:\n            min_a += 1\n        if min_a*min_b > x:\n            break\n        if min_b == 1:\n            min_b = min_a\n            min_a = 1\n    return f\"{min_a} {min_b}\"\n"
    },
    {
        "number": 156,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    l = 0\n    r = X\n    while l < r:\n        m = (l + r) // 2\n        if m * (m + 1) / 2 == X:\n            return str(m) +'' + str(m + 1)\n        elif m * (m + 1) / 2 > X:\n            r = m\n        else:\n            l = m + 1\n    return str(l) +'' + str(r)\n"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a,b,c = map(int,stdin.split())\n    if a+b+c <= 1000:\n        return str(a+b+c)\n    return \"0\"\n\nsolution('2')\nsolution('3')\nsolution('4')"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return str(max(a, b, c))\nprint(solution(input()))\n"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Given the number of lemons, apples and pears, \n    count the maximum number of lemons, apples and pears from which the compote can be cooked.\n    '''\n    # solution #1:\n    # numbers = stdin.split()\n    # print(int(numbers[0]) + int(numbers[1]) + int(numbers[2]))\n\n    # solution #2:\n    # lemons = int(stdin.split()[0])\n    # apples = int(stdin.split()[1])\n    # pears = int(stdin.split()[2])\n    # print(lemons, apples, pears)\n    # return str(max(lemons, apples, pears))\n    # solution #3:\n    # lemons = int(stdin.split()[0])\n    # apples = int(stdin.split()[1])\n    # pears = int(stdin.split()[2])\n    # print(lemons, apples, pears)\n    # print(lemons // 2, apples // 2, pears // 2)\n    # return str(max(lemons // 2, apples // 2, pears // 2))"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lemon, apple, pear = [int(x) for x in stdin.split()]\n    if (lemon >= apple) and (lemon >= pear):\n        lemon_count = lemon\n        apple_count = apple // 2\n        pear_count = pear // 4\n        return str(lemon_count + apple_count + pear_count)\n    elif (lemon <= apple) and (apple >= pear):\n        lemon_count = lemon\n        apple_count = apple // 2\n        pear_count = (pear * 2) // 4\n        return str(lemon_count + apple_count + pear_count)\n    elif (lemon <= apple) and (apple <= pear):\n        return '0'"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a,b,c= map(int,stdin.split())\n    if a<=0 or b<=0 or c<=0:\n        return \"0\"\n    else:\n        result=b*2+c*4\n        return str(result)\nsolution(\"2 5 7\")"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    numbers = stdin.split()\n    lemon = int(numbers[0])\n    apple = int(numbers[1])\n    pear = int(numbers[2])\n    if (lemon >= 3) & (apple >= 3) & (pear >= 3):\n        return str(max(lemon, apple, pear))\n    else:\n        return str(0)"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    b = int(stdin)\n    c = int(stdin)\n    return str(min(a, b, c))\n    # Your code here\n"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lemon, apple, pear = stdin.split()\n    lemon = int(lemon)\n    apple = int(apple)\n    pear = int(pear)\n    apples = lemon // apple\n    pears = lemon % apple\n    lemon = apple * apples + pears\n    print(lemon)\n\nsolution(input())\n"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = list(map(int, stdin.split()))\n    if a < 1 or a > 1000 or b < 1 or b > 1000 or c < 1 or c > 1000:\n        return \"0\"\n    if a * 1 > b * 2 and a * 1 > c * 4:\n        return str(a * 1)\n    if b * 2 > a * 4 and b * 2 > c * 1:\n        return str(b * 2)\n    if c * 4 > a * 1 and c * 4 > b * 1:\n        return str(c * 4)\n"
    },
    {
        "number": 157,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    _, b, c = stdin.split(' ')\n    return str(int(b) + int(c) - int(b) * int(c))\n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ratings = list(map(int, stdin.split()))\n    ratings = sorted(ratings, reverse=True)\n    print(ratings)\n\n    team1, team2 = 1, 1\n    for i in range(n):\n        if ratings[i] < ratings[i+1]:\n            team2 += 1\n        else:\n            team1 += 1\n    return \"YES\" if team1 == team2 else \"NO\""
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    players = list(map(int, stdin.split()))\n    players.sort()\n\n    # print(players)\n    if players[-1] <= players[-2]:\n        return \"NO\"\n\n    if (players[-2] >= players[-1]):\n        return \"NO\"\n\n    for i in range(1, len(players)):\n        if players[i]!= players[i-1]:\n            return \"NO\"\n\n    return \"YES\""
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    arr = list(map(int, stdin.split()[1:]))\n    if (sorted(arr) == arr):\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin_arr = stdin.split()\n    num = int(stdin_arr[0])\n    num_arr = stdin_arr[1:]\n    num_arr.sort()\n    one_arr = []\n    zero_arr = []\n    for i in range(num):\n        if num_arr[i] == 1:\n            one_arr.append(num_arr[i])\n        else:\n            zero_arr.append(num_arr[i])\n    if len(one_arr) == 1:\n        print(\"YES\")\n        return\n    elif len(one_arr) == 2:\n        print(\"YES\")\n        print(\"1 1\")\n        print(\"1 0\")\n        return\n    elif len(one_arr) == 3:\n        print(\"YES\")\n        print(\"1 1\")\n        print(\"1 0\")\n        print(\"1 0\")\n        return\n    elif len(one_arr) == 4:\n        print(\"YES\")\n        print(\"1 1\")\n        print(\"1 0\")\n        print(\"1 0\")\n        print(\"0 1\")\n        print(\"0 0\")\n        return\n    elif len(one_arr) == 5:\n        print(\"YES\")\n        print(\"1 1\")\n        print(\"1 0\")\n        print(\"1 0\")\n        print(\"0 1\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        return\n    elif len(one_arr) == 6:\n        print(\"YES\")\n        print(\"1 1\")\n        print(\"1 0\")\n        print(\"1 0\")\n        print(\"0 1\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        return\n    elif len(one_arr) == 7:\n        print(\"YES\")\n        print(\"1 1\")\n        print(\"1 0\")\n        print(\"1 0\")\n        print(\"0 1\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        return\n    elif len(one_arr) == 8:\n        print(\"YES\")\n        print(\"1 1\")\n        print(\"1 0\")\n        print(\"1 0\")\n        print(\"0 1\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        return\n    elif len(one_arr) == 9:\n        print(\"YES\")\n        print(\"1 1\")\n        print(\"1 0\")\n        print(\"1 0\")\n        print(\"0 1\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        return\n    elif len(one_arr) == 10:\n        print(\"YES\")\n        print(\"1 1\")\n        print(\"1 0\")\n        print(\"1 0\")\n        print(\"0 1\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        return\n    elif len(one_arr) == 11:\n        print(\"YES\")\n        print(\"1 1\")\n        print(\"1 0\")\n        print(\"1 0\")\n        print(\"0 1\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        return\n    elif len(one_arr) == 12:\n        print(\"YES\")\n        print(\"1 1\")\n        print(\"1 0\")\n        print(\"1 0\")\n        print(\"0 1\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        return\n    elif len(one_arr) == 13:\n        print(\"YES\")\n        print(\"1 1\")\n        print(\"1 0\")\n        print(\"1 0\")\n        print(\"0 1\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")\n        print(\"0 0\")"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    players = sorted(map(int, stdin.split()[1:]))\n    if sum(players) % 2!= 0:\n        return \"NO\"\n    temp = players\n    temp.sort()\n    temp = list(map(int, temp))\n    team1 = temp[:n//2]\n    team2 = temp[n//2:]\n    team1 = sorted(team1)\n    team2 = sorted(team2)\n    for i in range(len(team1)):\n        if team1[i] < team2[i]:\n            return \"NO\"\n    return \"YES\"\n\nsolution(\"1\\n3 2 2 4\")\nsolution(\"2\\n1 3 2 4\")\nsolution(\"3\\n2 1 2\")"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    scores = stdin.split()[1:]\n\n    # find a lowest rating\n    lowest = min(map(int, scores))\n    # find a highest rating\n    highest = max(map(int, scores))\n\n    # check the first criteria\n    if lowest >= highest:\n        return \"NO\"\n\n    # check the second criteria\n    for i in range(len(scores)):\n        if scores[i] < lowest:\n            # remove the lowest rating from the scores\n            scores.pop(i)\n\n    if len(scores) == 1:\n        return \"YES\"\n\n    # print the result\n    print(\"YES\" if scores[0] >= scores[1] else \"NO\")\n\nsolution(input())\n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    numbers = sorted(map(int, stdin.split()))\n    first, second = numbers[:2]\n    return \"YES\" if (first >= sum(numbers[2:]) // (n - 2)) else \"NO\"\n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    if max(a)!= min(a):\n        return 'NO'\n    a.sort(reverse=True)\n    while n > 1:\n        x = 0\n        if n % 2 == 1:\n            x = a[n//2]\n        else:\n            x = a[n//2 - 1]\n        if a[n//2] <= x:\n            return 'NO'\n        n //= 2\n    return 'YES'\n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n % 2 == 0:\n        return \"NO\"\n    else:\n        return \"YES\"\n"
    },
    {
        "number": 158,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(1, int(stdin) + 1):\n        a = list(map(int, stdin.split()))\n        if(a[0] >= min(a[1:]) and a[0] >= min(a[2:])):\n            print(\"YES\")\n            break\n    else:\n        print(\"NO\")"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(i) for i in stdin.split()]\n    b = []\n    b = a[:]\n    for i in range(1,len(a)):\n        a.append(a[i-1] + a[i])\n        for j in range(i):\n            if (a[j]*a[i] + a[j+1]*a[i] )== a[i]:\n                b.append(a[i])\n    return str(len(b)+1)\nsolution(input())\n\nprint(len(b)+1)"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    n = int(stdin.split()[0])\n    arr = list(map(int, stdin.split()[1]))\n    d = {}\n    res = 10 ** 9\n    for i in range(len(arr)):\n        if arr[i] in d.keys():\n            d[arr[i]].append(i)\n        else:\n            d[arr[i]] = [i]\n\n    for i in range(10**9+1):\n        if i not in d.keys():\n            res = min(res, i)\n\n    for i in range(len(arr)):\n        if arr[i] == res:\n            continue\n        if res % arr[i] == 0:\n            continue\n        else:\n            if res % arr[i] == arr[i]:\n                if res < arr[i]:\n                    res = arr[i]\n\n    for i in range(len(arr)):\n        if arr[i] == res:\n            continue\n        if res % arr[i] == 0:\n            continue\n        else:\n            if res % arr[i] == arr[i]:\n                if res > arr[i]:\n                    res = arr[i]\n    for i in range(len(arr)):\n        if arr[i] == res:\n            continue\n        if res % arr[i] == 0:\n            continue\n        else:\n            if res % arr[i] == arr[i]:\n                if res < arr[i]:\n                    res = arr[i]\n\n    for i in range(len(arr)):\n        if arr[i] == res:\n            continue\n        if res % arr[i] == 0:\n            continue\n        else:\n            if res % arr[i] == arr[i]:\n                if res > arr[i]:\n                    res = arr[i]\n    print(res)\n    print(*[arr[i] for i in range(len(arr)) if arr[i]!= res], sep=\" \")\n    return \" \".join([str(res), *[str(arr[i]) for i in range(len(arr)) if arr[i]!= res], sep=\" \")\n"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    n = len(stdin.split('\\n'))\n    n = int(n)\n    a = list(map(int, stdin.split('\\n')))\n    d = {i:True for i in a}\n    ans = float('inf')\n    for i in range(n - 1):\n        d[a[i]] = False\n        for j in range(i + 1, n):\n            if a[i]!= 0 and a[j]!= 0:\n                if d[a[i] % a[j]] == True:\n                    ans = min(ans, j - i)\n                    a[i] = a[i] + 1\n                    a[j] = a[j] - 1\n                    break\n    if ans == float('inf'):\n        print(0)\n    else:\n        print(ans)\n        print('\\n'.join(map(str, a)))\n"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    array = list(map(int, stdin.split()))\n    if n == 2:\n        return str(min(array))\n    array.sort()\n    last = array[-1]\n    count = 1\n    max_p = 10**9\n    min_p = 0\n    while min_p <= max_p:\n        mid = (min_p + max_p) // 2\n        sum = 0\n        for i in array:\n            if i % mid == 0 or i % mid == 1:\n                sum += i\n        if sum == last:\n            max_p = mid - 1\n        else:\n            min_p = mid + 1\n            count += 1\n    return str(count)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, lst = int(stdin.strip()), stdin.split()\n    lst = list(map(int, lst))\n    lst.sort()\n    print(len(lst))\n    new_lst = []\n    if lst[0] * lst[1]!= lst[0] + lst[1]:\n        return 1\n    for i in range(1, len(lst)):\n        if lst[i - 1] * lst[i]!= lst[i - 1] + lst[i]:\n            if lst[i] - lst[i - 1] == 1 or lst[i - 1] - lst[i] == 1:\n                continue\n            return 1\n        new_lst.append(lst[i - 1])\n    new_lst.append(lst[-1])\n    return len(new_lst) + 1\n"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    for i in range(n):\n        a[i] %= 1000000007\n    # A = set(a)\n    A = a\n    for i in range(n):\n        for j in range(i, n):\n            if A[j] == A[i]:\n                break\n            if not A[i] % A[j] or A[j] % A[i]:\n                break\n        else:\n            return i\n    return n + 1\n"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(min(map(int, stdin.split())))"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdout = ''\n    n = len(stdin.split())\n    a = list(map(int, stdin.split()))\n    for k in range(n):\n        if not co_prime(a):\n            return f'{k}'\n        a.append(0)\n        a.remove(0)\n    a.remove(0)\n    return f'{len(a)}'\n\ndef"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, arr = int(stdin.split()[0]), list(map(int, stdin.split()[1:]))\n\n    def kth_smallest(arr: list, n: int, k: int) -> int:\n        if k == 1: return arr[0]\n        if k == n: return arr[-1]\n        mid = n // 2\n        if k <= mid:\n            return kth_smallest(arr[:mid], mid, k)\n        else:\n            return kth_smallest(arr[mid:], n-mid, k-mid)\n\n    ans = kth_smallest(arr, n, n+1)\n    for i in range(n):\n        arr.append(arr[i])\n        arr[i] = ans\n    return str(ans)\n"
    },
    {
        "number": 159,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    n = int(stdin)\n    lst = list(map(int, stdin.split()))\n\n    def is_prime(x):\n        for i in range(2, int(x**0.5)+1):\n            if x % i == 0:\n                return False\n        return True\n\n    def x_1(lst, x):\n        m = 1\n        for i in range(0, len(lst)-1):\n            if lst[i] % x == 0:\n                m = m * lst[i]\n        if lst[-1] % x == 0:\n            m = m * lst[-1]\n        return m\n\n    if len(lst) == 1:\n        if is_prime(lst[0]):\n            return 1\n        else:\n            return len(lst)\n\n    if len(lst) == 2:\n        if lst[0]!= lst[1]:\n            if is_prime(lst[0]) and is_prime(lst[1]):\n                return 2\n            if is_prime(lst[0]) and not is_prime(lst[1]):\n                return len(lst)\n            if not is_prime(lst[0]) and is_prime(lst[1]):\n                return len(lst)\n            return 1\n        else:\n            if is_prime(lst[0]):\n                return len(lst)\n            else:\n                return 1\n\n    for i in range(2, len(lst)):\n        if lst[i-1]!= lst[i]:\n            if is_prime(lst[i-1]) and is_prime(lst[i]):\n                return i\n    return 1\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(a, b):\n        if b > a:\n            a, b = b, a\n        while b!= 0:\n            a, b = b, a % b\n        return a\n\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    res = 0\n    for i, j in itertools.combinations(a, 2):\n        if i + j == 0:\n            continue\n        if gcd(i, j) == 1:\n            continue\n        res = max(res, i + j)\n    if res == 0:\n        return -1\n    return res\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    A = map(int, input().split())\n    new_A = []\n\n    for i in range(N):\n        if (A[i] % 2 == 1) or (A[i] % 2 == 0 and A[i] % 3 == 1):\n            new_A.append((A[i] + 1) % 2)\n        elif (A[i] % 3 == 2) or (A[i] % 3 == 1 and A[i] % 4 == 2):\n            new_A.append((A[i] + 2) % 3)\n        else:\n            new_A.append(A[i] % 4)\n    return str(max(new_A))\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    input = stdin.split()\n    N, K = map(int, input[0].split())\n    A = list(map(int, input[1].split()))\n    l = list(range(1, N + 1))\n\n    def get_max_divisible_number(N, K, A):\n        for k in range(1, K + 1):\n            i, j = map(int, input.split())\n            if i!= j:\n                A[i - 1] += 1\n                A[j - 1] -= 1\n        if any(x > 0 for x in A):\n            return '-1'\n        return max(A)\n\n    max_divisible_number = get_max_divisible_number(N, K, A)\n    print(max_divisible_number)\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    (n, k) = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    r = []\n    for i in range(n):\n        r.append(a[i] * (i + 1))\n    for i in range(1, n):\n        for j in range(n - i):\n            r[j] += r[j + 1]\n    for i in range(n - 1):\n        if r[i + 1] % a[i] == 0:\n            print(r[i + 1] // a[i])\n            return\n    print(-1)\n\nsolution(input())\n\"\"\"\n\n\ndef"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n\n    m = 0\n    for i in range(n):\n        m = max(m, arr[i] + k)\n        if m < 0:\n            return '-1'\n\n    return str(m)\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, K = [int(x) for x in stdin.split()]\n    A = list(map(int, input().split()))\n    result = 0\n\n    def get_divisible(n: int) -> int:\n        divisible = []\n        for x in A:\n            if n % x == 0:\n                divisible.append(x)\n        return len(divisible)\n\n    for i in range(N):\n        for j in range(i + 1, N):\n            if get_divisible(A[i] + A[j]) > result:\n                result = get_divisible(A[i] + A[j])\n\n    return str(result)\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    def check(x):\n        for i in range(len(a)):\n            for j in range(len(a)):\n                if x % a[i]!= a[j]:\n                    return False\n        return True\n\n    for i in range(n):\n        for j in range(n):\n            if i!= j and check(a[i] + a[j]):\n                return str(a[i] + a[j])\n    return \"0\"\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    return str(maximum_integer_divisible_with_operations(N, K, A))\n\ndef"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n\n    def divide_all(a):\n        divs = set()\n        for i in range(1, len(a) + 1):\n            for j in range(i):\n                if a[i] % a[j] == 0:\n                    divs.add(a[i] // a[j])\n                    divs.add(a[j] // a[i])\n        return max(divs)\n\n    # print(divide_all(A))\n    # return None\n    print(divide_all(A))"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    # The maximum value of A after the operation\n    ans = 0\n\n    for i in range(1, N):\n        if A[i - 1] < 0:\n            A[i - 1] = A[i - 1] + 1\n            ans = max(ans, A[i - 1])\n\n    # We can reach here when -K <= A[i] <= K\n    for j in range(N):\n        if A[j] <= K:\n            ans = max(ans, A[j] + K)\n\n    # We can reach here when A[i] == K\n    if K == 1:\n        ans = max(ans, A[0])\n    print(ans)\n    return str(ans)\n\nsolution('3 3')\nsolution('2 5')"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    t = 40\n    count = 0\n    while t >= count:\n        count += 1\n        a = 0\n        for i in range(0, count, 2):\n            a = a ^ (2**i - 1)\n            print(a)\n        print(f\"t={count}\")\n    return str(count)\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()[0]\n    x = int(stdin)\n    transformations = []\n    while x > 0:\n        x = x - 1\n        transformations.append(x)\n    return \" \".join(map(str, transformations))\n'''\n\ndef"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    n = 0\n    while (2 ** n - 1)!= x:\n        n += 1\n    return str(n)\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    n_t = 0\n    while 2 ** n_t - 1 < x:\n        n_t += 1\n    result =''.join([str(2 ** n - 1) for n in range(n_t)])\n    return str(n_t) +'' + result"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    For example, if $x = 39, t = 0$, then the transformation plan must be:\n    First do operation A (already performed), t = 1. Then do operation A again, t = 2.\n    Then do operation B, t = 3. Then do operation A again, t = 4.\n    Then do operation A again, t = 5.\n    Then do operation B, t = 6.\n    Then do operation A again, t = 7.\n    Then do operation A again, t = 8.\n    Then do operation B, t = 9.\n    Then do operation A again, t = 10.\n    Now, $x = 40$.\n    '''\n    # Write an answer using print\n    # For example, if stdin is 39, then the output is 0, 3, 5, 7, 9, 10\n    t = 0\n    a = ''\n    b = ''\n    while a!= 40:\n        if t & 1 == 1:\n            x = x + 1\n            a = a + str(x)\n        else:\n            x = x - 1\n            b = b + str(x)\n        t = t + 1\n    return t\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    # Replace x with x + 1.\n    for _ in range(40):\n        x = (x + 1) & ((2 ** n - 1) ^ 1)\n    return str(x)\n    \n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    t = 0\n    while x > 1:\n        if x % 2 == 1:\n            t += 1\n        x = x // 2\n    return str(t)\n    \n    \n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    return f\"{(x // 2 - 1) // 2}\"\n\ndef"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    t = 0\n    while n!= 0:\n        if n % 2 == 0:\n            n = n // 2\n            t += 1\n        else:\n            n = n - 1\n            t += 1\n    return str(t)\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def cat_furrier_transform(x: int) -> List[int]:\n        return [i for i in range(1, 40) if (x << i) % 2 == 1]\n\n    print(*cat_furrier_transform(int(stdin)))\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    buckets = list(map(int, stdin.split()))\n\n    # min number of hours\n    h = 0\n    if n >= k:\n        # we can only water whole garden\n        # so we have to wait for it\n        return -1\n    else:\n        # we can water the first segment\n        # we can water only when the bucket allows to water it\n        buckets = sorted(buckets)\n        buckets = [i for i in range(n)]\n        curr_length = k\n        while h < k:\n            # choose the smallest bucket that allows to water the whole garden\n            curr_length = min(curr_length, buckets[h])\n            # add segment length to the count\n            h += curr_length\n        return h"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    buckets = [*map(int, stdin.split())]\n    buckets.sort()\n\n    curr_watered_length = 0\n    water_needed = 0\n\n    for bucket in range(1, n + 1):\n        if curr_watered_length + buckets[bucket - 1] > k:\n            continue\n        water_needed += (k - curr_watered_length) // buckets[bucket - 1]\n        curr_watered_length += buckets[bucket - 1]\n\n    return str(water_needed)\n\n\ndef"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a = a[::-1]\n    sum = 0\n    for i in range(len(a)):\n        if a[i]!= 0:\n            sum += a[i]\n        else:\n            continue\n        if sum < k:\n            continue\n        else:\n            break\n    return str(i + 1)\n\ndef"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    min = a[0]\n    max = a[-1]\n\n    def binary(x, min_val, max_val):\n        low = 0\n        high = len(a) - 1\n        while low <= high:\n            mid = low + (high - low) // 2\n            if min_val <= x <= max_val:\n                return True\n            elif x < a[mid]:\n                high = mid - 1\n            elif x > a[mid]:\n                low = mid + 1\n        return False\n\n    min_idx = 0\n    while min_idx < len(a) and a[min_idx] == min:\n        min_idx += 1\n    max_idx = len(a) - 1\n    while max_idx >= 0 and a[max_idx] == max:\n        max_idx -= 1\n\n    return min_idx - max_idx\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    def is_possible(bucket_id, amount):\n        return sum(a[:bucket_id]) + amount <= k\n\n    def bfs(start_bucket):\n        queue = deque([(start_bucket, 0)])\n        visited = set()\n        visited.add(start_bucket)\n        ans = 0\n        while queue:\n            bucket_id, amount = queue.popleft()\n            for next_bucket in range(bucket_id + 1, n + 1):\n                if is_possible(next_bucket, amount):\n                    ans = max(ans, amount + bfs(next_bucket))\n            if bucket_id == 0:\n                ans = max(ans, amount)\n        return ans\n\n    return bfs(0)\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    res = 0\n    for _ in range(n):\n        res += max(k, (k * (k + 1)) // 2)\n    return str(res)\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n, k = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    res = 0\n    for i in range(1, n):\n        if a[i] + a[i - 1] <= k:\n            res += a[i] + a[i - 1]\n            a[i] = k\n        else:\n            a[i] = k\n            res += k\n    return res\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n'''\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    def can_water(k, a):\n        if k > 100 or k < 1:\n            return False\n        if a[0] > 100 or a[0] < 1:\n            return False\n        if a[1] > 100 or a[1] < 1:\n            return False\n        if a[2] > 100 or a[2] < 1:\n            return False\n        if a[3] > 100 or a[3] < 1:\n            return False\n        if a[4] > 100 or a[4] < 1:\n            return False\n        if a[5] > 100 or a[5] < 1:\n            return False\n        if a[6] > 100 or a[6] < 1:\n            return False\n        if a[7] > 100 or a[7] < 1:\n            return False\n        if a[8] > 100 or a[8] < 1:\n            return False\n        if a[9] > 100 or a[9] < 1:\n            return False\n\n        return True\n\n    def can_water_not_use_garden(k, a):\n        if k > 100 or k < 1:\n            return False\n        if a[0] > 100 or a[0] < 1:\n            return False\n        if a[1] > 100 or a[1] < 1:\n            return False\n        if a[2] > 100 or a[2] < 1:\n            return False\n        if a[3] > 100 or a[3] < 1:\n            return False\n        if a[4] > 100 or a[4] < 1:\n            return False\n        if a[5] > 100 or a[5] < 1:\n            return False\n        if a[6] > 100 or a[6] < 1:\n            return False\n        if a[7] > 100 or a[7] < 1:\n            return False\n        if a[8] > 100 or a[8] < 1:\n            return False\n        if a[9] > 100 or a[9] < 1:\n            return False\n\n        return True\n\n    ans = 0\n    for i in range(1, n):\n        if can_water(k, a) and can_water_not_use_garden(k, a):\n            ans = i\n\n    return ans\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    a.sort()\n    print(len(a))\n    print(a[0])\n    return len(a) + (a[0] - 1)\n\nprint(solution(input()))"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # read in data\n    n, k = map(int, stdin.split())\n    grid = stdin.split('\\n')\n    # Write an action using print\n    # To debug: print(\"Debug messages...\", file=sys.stderr, flush=True)\n    for row in range(n):\n        for col in range(n):\n            if grid[row][col] == 'G':\n                start = row, col\n    jump_count = 0\n    for row in range(n):\n        for col in range(n):\n            if grid[row][col] == 'T':\n                target = row, col\n            if grid[row][col] == '#':\n                continue\n            jump_count += 1\n            if jump_count > k:\n                break\n            if jump_count == 1:\n                if col > 0 and grid[row][col - 1] == '.':\n                    grid[row][col - 1] = 'T'\n                if col < n - 1 and grid[row][col + 1] == '.':\n                    grid[row][col + 1] = 'T'\n            else:\n                if row < n - 1 and grid[row + 1][col] == '.':\n                    grid[row + 1][col] = 'T'\n                if row > 0 and grid[row - 1][col] == '.':\n                    grid[row - 1][col] = 'T'\n    for row in range(n):\n        for col in range(n):\n            if grid[row][col] == '#':\n                continue\n            if grid[row][col] == 'G':\n                grid[start[0]][start[1]] = '.'\n                grid[row][col] = 'G'\n                break\n    return '\\n'.join([''.join(x) for x in grid])\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    line = stdin.split()[1]\n    print('YES' if a_star(n, line, k) else 'NO')\n\ndef"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n, k = int(stdin[0]), int(stdin[1])\n    grid = list(stdin[2])\n    if '#' in grid:\n        return 'NO'\n    insect_row, insect_col = n, n\n    for i in range(n):\n        if grid[i] == 'T':\n            insect_row, insect_col = i, n\n    if insect_row!= n or insect_col!= n:\n        return 'NO'\n    return 'YES'"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(stdin.strip())\n    k_jump = k\n    n_jump = 1\n    while k_jump <= n and n_jump <= n:\n        if a[n_jump - 1] == '#':\n            return 'NO'\n        if a[n_jump - 1] == 'G':\n            k_jump += 1\n        else:\n            k_jump -= 1\n        n_jump += k_jump\n    if n_jump == n:\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    k = int(stdin[1])\n    s = stdin[2]\n    # print(n)\n    # print(k)\n    # print(s)\n    return \"YES\" if solution_helper(n, k, s) else \"NO\"\n\ndef"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    maze = stdin.strip().split(\"\\n\")\n    #print(maze)\n    if n <= 0:\n        return 'NO'\n    for i in range(n - 1):\n        if maze[i][i]!= '#':\n            return 'NO'\n    for j in range(n - 1):\n        if maze[j][n - 1]!= '#':\n            return 'NO'\n    if maze[n - 1][n - 1]!= '#':\n        return 'NO'\n    for i in range(n):\n        if maze[i][i] == 'G':\n            for k in range(i + 1, n):\n                if maze[k][i] == 'G':\n                    return 'YES'\n    return 'NO'\n\n\ndef"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # read in input\n    n, k = map(int, stdin.split())\n    d = list(stdin)\n\n    # create a list of indices, where each element represents the distance to the last empty cell\n    distance = []\n    for i in range(n):\n        distance.append(i)\n\n    # add the distance to the last empty cell\n    for i in range(n):\n        distance[i] += int(d[i])\n\n    # add the distance to the first empty cell\n    for i in range(1, n):\n        distance[0] += int(d[i])\n\n    # check if there are enough empty cells to create an insect\n    if len(set(distance))!= 1:\n        return \"NO\"\n\n    # first find the distance to the insect\n    for i in range(1, n):\n        # if a cell is empty we move the distance to that cell to be i\n        if distance[i - 1]!= i:\n            distance[i] = i\n        # if the current cell is empty but there are obstacles then we move the distance to the first empty cell to i\n        else:\n            distance[i] = i + distance[i - 1]\n            if distance[i] < k:\n                return \"NO\"\n\n    return \"YES\"\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    line = stdin.split()\n    line = map(lambda x: list(x), line)\n    for i in line:\n        if i.count('#') + i.count('.') + 1!= n:\n            continue\n        isJump = False\n        for i in range(1, min(n, k + 1)):\n            if i == 1 and not isJump:\n                isJump = True\n            if not isJump:\n                continue\n            if i == k:\n                continue\n            if line[i]!= '.' and line[i]!= '#':\n                if i == 1 and k == 1:\n                    continue\n                if line[i - k]!= '#':\n                    continue\n                if line[i + k]!= '#':\n                    continue\n            return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    grid = stdin.splitlines()\n\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 'G':\n                grid[i] = grid[i][:j] + 'T' + grid[i][j + 1:]\n\n    for j in range(len(grid)):\n        for i in range(len(grid[j])):\n            if grid[j][i] == '#':\n                grid[j] = grid[j][:i] + 'G' + grid[j][i + 1:]\n\n    for j in range(len(grid)):\n        for i in range(len(grid[j])):\n            if grid[j][i] == 'G':\n                start = i\n                break\n\n    for j in range(len(grid)):\n        for i in range(len(grid[j])):\n            if grid[j][i] == 'T':\n                target = i\n                break\n\n    grid[0] = grid[0][:start] + 'G' + grid[0][start + 1:]\n    grid[len(grid) - 1] = grid[len(grid) - 1][:target] + 'T' + grid[len(grid) - 1][target + 1:]\n\n    for i in range(1, len(grid) - 1):\n        if grid[i - 1]!= grid[i] or grid[i + 1]!= grid[i]:\n            return 'NO'\n\n    return 'YES'\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n  y_1, y_2, y_{w}, x_b, y_{b}, r = map(int, stdin.split())\n  if not (2*r < y_2 - y_1 and y_1 + r < y_{w}): return '-1'\n  d = abs(x_b - y_1)\n  if d <= r: return f'{y_1 + (y_2 - y_1)/2 - d/2}'\n  if d <= (y_2 - y_1) - r: return f'{y_1 + (y_2 - y_1)/2 + r - d/2}'\n  if (x_b < y_1 and x_b <= y_2) or (y_1 < x_b and y_1 <= x_b): return f'{y_1 - r}'\n  if (x_b < y_1 and x_b > y_2) or (y_1 < x_b and y_1 > x_b): return f'{y_2 + r}'\n  return f'{y_1}'\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    y_1, y_2, y_{w}, x_b, y_{b}, r = map(int, stdin.split())\n\n    x_w = y_2 - y_1\n    x_b = x_w - 2 * r\n    y_1 = y_1 - r\n    y_2 = y_2 + r\n    y_w = y_w - 2 * r\n    if x_w <= 0 or x_b <= 0 or x_b >= x_w or y_1 >= y_w or y_2 <= y_1 or y_2 >= y_w:\n        return \"-\"\n\n    if abs(y_b - y_1) < 2 * r:\n        return f\"{x_b / r}\"\n    x_a = (x_b - y_1) / (y_2 - y_1)\n    return f\"{x_a * r}\"\n\n'''\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    y_1, y_2, y_w, x_b, y_b, r = map(int, stdin.split())\n    if (y_1 <= y_2 and y_1 <= y_w and y_b <= y_w and y_b <= y_2 and r <= x_b + y_b - y_1 <= 2*r) or (y_1 <= y_2 and y_2 <= y_w and y_w <= y_b and y_b <= y_2 and x_b + y_b - y_w <= 2*r) or (y_1 <= y_2 and y_2 <= y_w and y_w <= y_b and y_b <= y_1 and x_b + y_b - y_w <= 2*r):\n        return \"%.1f\" % (x_b + y_b - y_1)\n    return \"-\"\n\nsolution(input())\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    y_1, y_2, y_w, x_b, y_b, r = map(int, stdin.split())\n    # x_b = (y_b - y_1) / (y_2 - y_1)\n    x_w = (y_w - y_1) / (y_2 - y_1)\n    # x_b = (y_b - y_w) / (y_2 - y_1)\n    return '{:.8f}'.format(x_b) if x_b * x_w <= x_b + r <= x_w * x_b else -1\n    # return '{:.8f}'.format(x_b) if abs(x_b - x_w) <= r else -1"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4 10 13 10 3 1\n   ... ''')\n    '4.3750000000'\n    >>> solution('''1 4 6 2 2 1\n   ... ''')\n    '-1'\n    >>> solution('''3 10 15 17 9 2\n   ... ''')\n    '11.3333333333'\n    \"\"\"\n    x_1, x_2, y_1, y_2, y_w, r = list(map(float, stdin.split()))\n    for x in (x_1, x_2):\n        if 0 <= x <= 10**6:\n            if not -10**8 <= (y_1 + r - y_w) / r <= 10**8:\n                return '-1'\n            else:\n                return ('%.8f' % ((x_2 - x_1) / (y_2 - y_1) * (y_1 + r - y_w) + x_1))\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    y_1, y_2, y_{w}, x_{b}, y_{b}, r = (int(x) for x in stdin.split())\n    if (0 <= x_1 <= y_1 <= r and 0 <= x_2 <= y_2 <= r and\n            (x_1 + r >= x_2 >= x_1 or x_2 + r >= x_1 >= x_2) and\n            (x_b <= x_2 - x_1 <= r or x_b <= x_2 - x_1 + r <= r)):\n        return \"{:.8f}\".format(x_b - x_1)\n    else:\n        return \"-1\""
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x_1, x_2, x_3, x_4, x_5, x_6 = map(int, stdin.split())\n    if abs(x_1 - x_3) <= x_6 or abs(x_1 - x_2) <= x_6 or abs(x_2 - x_3) <= x_6 or abs(x_5 - x_1) <= x_6 or abs(x_5 - x_2) <= x_6 or abs(x_6 - x_1) <= x_6 or abs(x_6 - x_2) <= x_6:\n        return '-1'\n    else:\n        return str(round(x_6 - x_1, 8))\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    y_1, y_2, y_w, x_b, y_b, r = [int(i) for i in stdin.split()]\n\n    if y_1 > y_2 or y_2 > y_w:\n        return '-1'\n    elif y_1 == y_2 or y_1 == y_w:\n        if abs(y_b - y_1) < 2*r:\n            return '-1'\n        else:\n            return '-1' if abs(y_b - y_w) < 2*r else float(y_b - y_1) / float(y_2 - y_1)\n\n    else:\n        for i in range(y_1, y_2):\n            if abs(y_b - i) < 2*r:\n                return '-1'\n\n        if abs(y_b - y_w) < 2*r:\n            return '-1'\n        else:\n            return float(y_b - y_1) / float(y_2 - y_1)"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    y_1, y_2, y_w, x_b, y_b, r = map(int, stdin.split())\n    if x_b + r < y_w:\n        if abs(y_b - y_w) < abs(x_b - y_1):\n            if abs(y_b - y_w) < abs(x_b - y_2):\n                if abs(y_b - y_w) < abs(x_b - y_1):\n                    return str(x_b)\n                return str(x_b - y_1)\n            return str(x_b - y_2)\n        return str(x_b - y_2)\n    if abs(y_b + r - y_w) < abs(y_b - y_1):\n        if abs(y_b + r - y_w) < abs(y_b - y_2):\n            return str(y_b)\n        return str(y_b + r - y_1)\n    return str(y_b + r - y_1)"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    B = int(stdin.split()[1])\n    D = int(stdin.split()[2])\n    S = int(stdin.split()[3])\n    if D == 0 and S == 0:\n        return N\n    if S == 0 and D == 0:\n        return 0\n    if D <= 0 or S <= 0:\n        return 0\n    if D + S <= 0:\n        return 0\n    if D + S <= 1:\n        return 0\n    if D + S <= 2:\n        return 0\n    if D + S <= 3:\n        return 0\n    if D + S <= 4:\n        return 0\n    if D + S <= 5:\n        return 0\n    if D + S <= 6:\n        return 0\n    if D + S <= 7:\n        return 0\n    if D + S <= 8:\n        return 0\n    if D + S <= 9:\n        return 0\n    if D + S <= 10:\n        return 0\n    if D + S <= 11:\n        return 0\n    if D + S <= 12:\n        return 0\n    if D + S <= 13:\n        return 0\n    if D + S <= 14:\n        return 0\n    if D + S <= 15:\n        return 0\n    if D + S <= 16:\n        return 0\n    if D + S <= 17:\n        return 0\n    if D + S <= 18:\n        return 0\n    if D + S <= 19:\n        return 0\n    if D + S <= 20:\n        return 0\n    if D + S <= 21:\n        return 0\n    if D + S <= 22:\n        return 0\n    if D + S <= 23:\n        return 0\n    if D + S <= 24:\n        return 0\n    if D + S <= 25:\n        return 0\n    if D + S <= 26:\n        return 0\n    if D + S <= 27:\n        return 0\n    if D + S <= 28:\n        return 0\n    if D + S <= 29:\n        return 0\n    if D + S <= 30:\n        return 0\n    if D + S <= 31:\n        return 0\n    if D + S <= 32:\n        return 0\n    if D + S <= 33:\n        return 0\n    if D + S <= 34:\n        return 0\n    if D + S <= 35:\n        return 0\n    if D + S <= 36:\n        return 0\n    if D + S <= 37:\n        return 0\n    if D + S <= 38:\n        return 0\n    if D + S <= 39:\n        return 0\n    if D + S <= 40:\n        return 0\n    if D + S <= 41:\n        return 0\n    if D + S <= 42:\n        return 0\n    if D + S <= 43:\n        return 0\n    if D + S <= 44:\n        return 0\n    if D + S <= 45:\n        return 0\n    if D + S <= 46:\n        return 0\n    if D + S <= 47:\n        return 0\n    if D + S <= 48:\n        return 0\n    if D + S <= 49:\n        return 0\n    if D + S <= 50:\n        return 0\n    if D + S <= 51:\n        return 0\n    if D + S <= 52:\n        return 0\n    if D + S <= 53:\n        return 0\n    if D + S <= 54:\n        return 0\n    if D + S <= 55:\n        return 0\n    if D + S <= 56:\n        return 0\n    if D + S <= 57:\n        return 0\n    if D + S <= 58:\n        return 0\n    if D + S <= 59:\n        return 0\n    if D + S <= 60:\n        return 0\n    if D + S <= 61:\n        return 0\n    if D + S <= 62:\n        return 0\n    if D + S <= 63:\n        return 0\n    if D + S <= 64:\n        return 0\n    if D + S <= 65:\n        return 0\n    if D + S <= 66:\n        return 0\n    if D + S <= 67:\n        return 0\n    if D + S <= 68:\n        return 0\n    if D + S <= 69:\n        return 0\n    if D + S <= 70:\n        return 0\n    if D + S <= 71:\n        return 0\n    if D + S <= 72:\n        return 0\n    if D + S <= 73:\n        return 0\n    if D + S <= 74:\n        return 0\n    if D + S <= 75:\n        return 0\n    if D + S <= 76:\n        return 0\n    if D + S <= 77:\n        return 0\n    if D + S <= 78:\n        return 0\n    if D + S <= 79:\n        return 0\n    if D + S <= 80:\n        return 0\n    if D + S <= 81:\n        return 0\n    if D + S <= 82:\n        return 0\n    if D + S <= 83:\n        return 0\n    if D + S <= 84:\n        return 0\n    if D + S <= 85:\n        return 0\n    if D + S <= 86:\n        return 0\n    if D + S <= 87:\n        return 0\n    if D + S <= 88:\n        return 0\n    if D + S <= 89:\n        return 0\n    if D + S <= 90:\n        return 0\n    if D + S <= 91:\n        return 0\n    if D + S <= 92:\n        return 0\n    if D + S <= 93:\n        return 0\n    if D + S <= 94:\n        return 0\n    if D + S <= 95:\n        return 0\n    if D + S <= 96:\n        return 0\n    if D + S <= 97:\n        return 0\n    if D + S <= 98:\n        return 0\n    if D + S <= 99:\n        return 0\n    if D + S <= 100:\n        return 0\n    if D + S <= 101:\n        return 0\n    if D + S <= 102:\n        return 0\n    if D + S <= 103:\n        return 0\n    "
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    breakfast = int(stdin[0])\n    dinner = int(stdin[1])\n    supper = int(stdin[2])\n    return str(min(dinner + supper - 1, breakfast - 1, dinner - 1, supper - 1))\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return 0\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    b, d, s = map(int, stdin.split())\n    #if d + s >= 1:\n    #    if d * 2 + s * 2 >= 1:\n    #        return d * 2 + s * 2\n    if (b + d + s) >= 1:\n        if (b + d + s) * 2 >= 1:\n            return (b + d + s) * 2\n        else:\n            return (b + d + s)\n    else:\n        return 0\n\nprint(solution(input()))\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 3 2 1\n   ... ''')\n    '1'\n    >>> solution('''\n   ... 1 0 0\n   ... ''')\n    '0'\n    >>> solution('''\n   ... 1000000000000000000 0 1000000000000000000\n   ... ''')\n    '999999999999999999'\n    \"\"\"\n    days_before, days_after = map(int, stdin.split())\n    missed_dinner = days_before - days_after\n    if missed_dinner > 0:\n        return str(missed_dinner)\n    else:\n        return '0'\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    b, d, s = map(int, stdin.split())\n    return str(min(b, d, s))\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    b, d, s = stdin.strip().split()\n    return str(len([1 for _ in range(int(b),int(d)+1) if _%int(s)==0])+int(b)-int(d))"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, b, d, s = map(int, stdin.split())\n    return str(n-b-d-s)"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return '0'"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  print(stdin.split(\" \")[1])\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    matrix = [list(map(int, stdin.split())) for _ in range(n)]\n\n    for i in range(1, n):\n        matrix[i][0] += matrix[i - 1][0]\n        matrix[i][n - 1] += matrix[i - 1][n - 1]\n\n    for j in range(1, n):\n        matrix[0][j] += matrix[0][j - 1]\n        matrix[n - 1][j] += matrix[n - 1][j - 1]\n\n    for i in range(1, n):\n        for j in range(1, n):\n            matrix[i][j] += min(matrix[i - 1][j], matrix[i][j - 1], matrix[i - 1][j - 1])\n\n    return \"YES\" if matrix[-1][-1] == 1 else \"NO\"\n\n\ndef"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    matrix = list(map(int, stdin.split()))\n    x, y = 0, 0\n    for i, a in enumerate(matrix):\n        if a == x + 1:\n            x = i\n        if a == y + 1:\n            y = i\n        if a == x - 1:\n            x = i\n        if a == y - 1:\n            y = i\n    return \"YES\" if x == y else \"NO\""
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n  x = int(stdin.split()[0])\n  y = int(stdin.split()[1])\n  a = list(map(int, stdin.split()[2:]))\n  x_1 = 0\n  y_1 = 0\n  x_2 = x\n  y_2 = y\n  for i in range(len(a)):\n    if i > 0:\n      if x_1 == x_2 and y_1 == y_2:\n        return 'NO'\n      elif x_1!= x_2 and y_1 == y_2:\n        x_1 = x_1 + 1\n        x_2 = x_2 + 1\n        y_1 = 0\n        y_2 = y\n      elif x_1 == x_2 and y_1!= y_2:\n        y_1 = y_1 + 1\n        y_2 = y_2 + 1\n        x_1 = 0\n        x_2 = x\n      elif x_1!= x_2 and y_1!= y_2:\n        x_1 = x_1 + 1\n        x_2 = x_2 + 1\n        y_1 = y_1 + 1\n        y_2 = y_2 + 1\n    else:\n      x_1 = x_1 + 1\n      x_2 = x_2 + 1\n      y_1 = y_1 + 1\n      y_2 = y_2 + 1\n  print('YES')\n  print(x_2, y_2)\n  return 'YES'\n\n\n\n-----Hint-----\n\nExplanation:\nThis is a dynamic programming problem, which can be solved using the recursion equation.\nIt is a classic problem in mathematics. The goal is to find the minimum of sum of elements in the array. If you have at least one element in the array, then you have to pick one element and move in the same direction. Once you have reached the end of the array, you need to move in the opposite direction.\n\nAt each step, you can either pick the smallest or largest element in the array. This process is repeated until the end of the array.\n\nExample:\nIf you have array [1, 2, 3, 4, 5, 6], then you should find the minimum sum of elements in the array such that you can pick one element at each step.\n\nFind the minimum sum of elements in the array such that you can pick one element at each step.\n\nExample:\nIf you have array [1, 2, 3, 4, 5, 6], then you should find the minimum sum of elements in the array such that you can pick one element at each step.\n\nFind the minimum sum of elements in the array such that you can pick one element at each step.\n\nRecurrence relation for above equation:\nAt each step: Pick the smallest element and move in the same direction. Then, move in the opposite direction. If there are multiple elements that can be moved in the same direction, pick the largest one.\n\nAt each step: Find the minumum sum of elements in the array such that you can pick one element at each step.\n\nTo find minimum sum of elements in the array such that you can pick one element at each step, we need to find the minumum sum of elements such that each element is picked at each step.\n\nIf there are at least two elements that can be picked at each step, then the minumum sum of elements in the array such that you can pick one element at each step is:\n\nsum of all elements\n- min(min(e1, e2), e3, e4)\n\nIf there are more than two elements that can be picked at each step, then the minumum sum of elements in the array such that you can pick one element at each step is:\n\nsum of all elements\n- min(min(e1, e2), e3, e4, e5)\n\nIf there are three elements that can be picked at each step, then the minumum sum of elements in the array such that you can pick one element at each step is:\n\nsum of all elements\n- min(min(e1, e2), e3, e4, e5, e6)\n\nWe use dynamic programming approach and compute the minumum sum of elements in the array such that you can pick one element at each step in the recursion equation:\n\nAt each step: Pick the smallest element and move in the same direction. Then, move in the opposite direction. If there are multiple elements that can be moved in the same direction, pick the largest one.\n\nAt each step: Find the minimum sum of elements in the array such that you can pick one element at each step.\n\nWe use a minumum sum of elements in the array such that you can pick one element at each step.\n\nIf you have array [1, 2, 3, 4, 5, 6], then you should find the minimum sum of elements in the array such that you can pick one element at each step.\n\nFind the minimum sum of elements in the array such that you can pick one element at each step.\n\nThe function solution(str) must return a string in the format 'YES' or 'NO'.\n\nThe string contains only characters '1' and '0'.\n\nThe function solution(str) will be called few times. For each of these calls, str will be a single line containing space-separated integers describing the respective values in the array, x.\n\nThe function solution(str) must return a single character, either '1' or '0', which tells whether the array satisfies the conditions or not.\n\"\"\"\nimport numpy as np\n\ndef"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # n, k = list(map(int, stdin.split()))\n    #\n    # m = [[0 for j in range(k + 1)] for i in range(n + 1)]\n    #\n    # # m = [[0]*k for i in range(n)]\n    #\n    # for i in range(1, n + 1):\n    #     line = list(map(int, stdin.split()))\n    #     for j in range(1, k + 1):\n    #         m[i][j] = m[i - 1][j] + line[j - 1]\n    #\n    #\n    # a = []\n    # for i in range(n + 1):\n    #     a.append([])\n    #     for j in range(k + 1):\n    #         a[i].append(0)\n    # for i in range(n + 1):\n    #     for j in range(k + 1):\n    #         a[i][j] = a[i - 1][j] + a[i][j - 1]\n    #\n    # for i in range(1, n + 1):\n    #     for j in range(1, k + 1):\n    #         if a[i][j] == m[i][j]:\n    #             return 'YES'\n    #     a = [[0]*k for i in range(n + 1)]\n    #\n    # return 'NO'\n\n    # m = [[0]*(k + 1) for i in range(n + 1)]\n    #\n    # for i in range(1, n + 1):\n    #     line = list(map(int, stdin.split()))\n    #     for j in range(1, k + 1):\n    #         m[i][j] = m[i - 1][j] + line[j - 1]\n    #\n    #\n    # a = [[0]*k for i in range(n + 1)]\n    # for i in range(n + 1):\n    #     for j in range(k + 1):\n    #         a[i][j] = a[i - 1][j] + a[i][j - 1]\n    #\n    # for i in range(1, n + 1):\n    #     for j in range(1, k + 1):\n    #         if a[i][j] == m[i][j]:\n    #             return 'YES'\n    #\n    # return 'NO'\n\n    # n, k = map(int, stdin.split())\n    #\n    # m = [[0]*(k + 1) for i in range(n + 1)]\n    #\n    # for i in range(1, n + 1):\n    #     line = list(map(int, stdin.split()))\n    #     for j in range(1, k + 1):\n    #         m[i][j] = m[i - 1][j] + line[j - 1]\n    #\n    #\n    # a = [[0]*k for i in range(n + 1)]\n    # for i in range(n + 1):\n    #     for j in range(k + 1):\n    #         a[i][j] = a[i - 1][j] + a[i][j - 1]\n    #\n    # for i in range(1, n + 1):\n    #     for j in range(1, k + 1):\n    #         if a[i][j] == m[i][j]:\n    #             return 'YES'\n    #\n    # return 'NO'\n    n, k = map(int, stdin.split())\n\n    m = [[0] * (k + 1) for i in range(n + 1)]\n\n    for i in range(1, n + 1):\n        line = list(map(int, stdin.split()))\n        for j in range(1, k + 1):\n            m[i][j] = m[i - 1][j] + line[j - 1]\n\n    a = [[0] * k for i in range(n + 1)]\n    for i in range(n + 1):\n        for j in range(k + 1):\n            a[i][j] = a[i - 1][j] + a[i][j - 1]\n\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            if a[i][j] == m[i][j]:\n                return 'YES'\n\n    return 'NO'\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    lines = stdin.split('\\n')\n    a = list(map(int, lines[1].split()))\n    n = len(a)\n    if n == 0:\n        return 'NO'\n\n    def is_valid(x, y):\n        if x <= 0 or y <= 0 or x >= n or y >= n:\n            return False\n        return True\n\n    for i in range(n):\n        if not is_valid(i + 1, 0):\n            continue\n        if not is_valid(0, i + 1):\n            continue\n        if not is_valid(i + 1, i + 1):\n            continue\n        for j in range(n):\n            if not is_valid(i + 1, j + 1):\n                continue\n            if not is_valid(0, j + 1):\n                continue\n            if not is_valid(i + 1, j + 1):\n                continue\n            if not is_valid(i + 1, j + 1):\n                continue\n            if not is_valid(i + 1, j + 1):\n                continue\n            if not is_valid(i + 1, j + 1):\n                continue\n            if not is_valid(i + 1, j + 1):\n                continue\n            if not is_valid(i + 1, j + 1):\n                continue\n            if not is_valid(i + 1, j + 1):\n                continue\n            if not is_valid(i + 1, j + 1):\n                continue\n            if not is_valid(i + 1, j + 1):\n                continue\n            if not is_valid(i + 1, j + 1):\n                continue\n            if not is_valid(i + 1, j + 1):\n                continue\n            if not is_valid(i + 1, j + 1):\n                continue\n            if not is_valid(i + 1, j + 1):\n                continue\n            if not is_valid(i + 1, j + 1):\n                continue\n            if not is_valid(i + 1, j + 1):\n                continue\n            if not is_valid(i + 1, j + 1):\n                continue\n            if not is_valid(i + 1, j + 1):\n                continue\n            if not is_valid(i + 1, j + 1):\n                continue\n            if not is_valid(i + 1, j + 1):\n                continue\n            if not is_valid(i + 1, j + 1):\n                continue\n            if not is_valid(i + 1, j + 1):\n                continue\n            if not is_valid(i + 1, j + 1):\n                continue\n            if not is_valid(i + 1, j + 1):\n                continue\n            if not is_valid(i + 1, j + 1):\n                continue\n            if not is_valid(i + 1, j + 1):\n                continue\n            if not is_valid(i + 1, j + 1):\n                continue\n            if not is_valid(i + 1, j + 1):\n                continue\n            if not is_valid(i + 1, j + 1):\n                continue\n            if not is_valid(i + 1, j + 1):\n                continue\n            if not is_valid(i + 1, j + 1):\n                continue\n            if not is_valid(i + 1, j + 1):\n                continue\n            if not is_valid(i + 1, j + 1):\n                continue\n            if not is_valid(i + 1, j + 1):\n                continue\n            if not is_valid(i + 1, j + 1):\n                continue\n            if not is_valid(i + 1, j + 1):\n                continue\n            if not is_valid(i + 1, j + 1):\n                continue\n            if not is_valid(i + 1, j + 1):\n                continue\n            if not is_valid(i + 1, j + 1):\n                continue\n            if not is_valid(i + 1, j + 1):\n                continue\n            if not is_valid(i + 1, j + 1):\n                continue\n            if not is_valid(i + 1, j + 1):\n                continue\n            if not is_valid(i + 1, j + 1):\n                continue\n            if not is_valid(i + 1, j + 1):\n                continue\n            if not is_valid(i + 1, j + 1):\n                continue\n            if not is_valid(i + 1, j + 1):\n                continue\n            if not is_valid(i + 1, j + 1):\n                continue\n            if not is_valid(i + 1, j + 1):\n                continue\n            if not is_valid(i + 1, j + 1):\n                continue\n            if not is_valid(i + 1, j + 1):\n                continue\n            if not is_valid(i + 1, j + 1):\n                continue\n            if not is_valid(i + 1, j + 1):\n                continue\n            if not is_valid(i + 1, j + 1):\n                continue\n            if not is_valid(i + 1, j + 1):\n                continue\n            if not is_valid(i + 1, j + 1):\n                continue\n            if not is_valid(i + 1, j + 1):\n                continue\n            if not is_valid(i + 1, j + 1):\n                continue\n            if not is_valid(i + 1, j + 1):\n                continue\n            if not is_valid(i + 1, j + 1):\n                continue\n            if not is_valid(i + 1, j + 1):\n                continue\n            if not is_valid(i + 1, j + 1):\n                continue\n            if not is_valid(i + 1, j + 1):\n                continue\n            if not is_valid(i + 1, j + 1):\n                continue\n            if not is_valid(i + 1, j + 1):\n                continue\n            if not"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, stdin.split())))\n    for i in range(n):\n        for j in range(n):\n            if i + 1 < n:\n                if matrix[i][j] == matrix[i + 1][j]:\n                    return \"NO\"\n            if j + 1 < n:\n                if matrix[i][j] == matrix[i][j + 1]:\n                    return \"NO\"\n    x, y = n, n\n    for i in range(n):\n        for j in range(n):\n            if i - 1 > 0:\n                if matrix[i][j] == matrix[i - 1][j]:\n                    x = i - 1\n                    break\n            if j - 1 > 0:\n                if matrix[i][j] == matrix[i][j - 1]:\n                    y = j - 1\n                    break\n    if x > 0 and y > 0:\n        return \"YES\" + str(x) + str(y)\n    return \"YES\" + str(x) + str(y)\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [list(map(int, stdin.split())) for _ in range(n)]\n    # print(a)\n    x = 0\n    y = 0\n    dx, dy = 0, 0\n    # try:\n    for i in range(n):\n        for j in range(n):\n            dx, dy = x + 1, y + 1\n            # print(dx, dy)\n            # print(i, j)\n            # print(a[i][j])\n            if (i, j) == (x, y):\n                continue\n            if a[i][j] in [dx, dy, i, j]:\n                continue\n            elif a[i][j] in [dx, dy]:\n                x += 1\n                y = y + 1\n            elif a[i][j] in [i, j]:\n                x = x + 1\n                y += 1\n            else:\n                break\n        if a[i][j] == dx:\n            x += 1\n            y += 1\n        elif a[i][j] == dy:\n            x += 1\n            y += 1\n        elif a[i][j] == i:\n            x += 1\n            y += 1\n        else:\n            break\n    print(x, y)\n    if x < 0 or y < 0 or x > 10**9 or y > 10**9:\n        return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    return \"YES\" if x <= y else \"NO\"\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    m = 0\n    l = []\n    for i in range(n):\n        if a[i] == 0:\n            l.append(i)\n    for i in l:\n        if i > 0:\n            if i > m:\n                m = i\n            elif i < m:\n                break\n    if m!= 0:\n        return 'NO'\n    else:\n        return 'YES'\n\ndef"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    rows = [int(i) for i in stdin.split()]\n    x, y = None, None\n    if rows[0] > rows[1]:\n        x, y = rows[0], rows[1]\n    elif rows[0] < rows[1]:\n        x, y = rows[1], rows[0]\n    else:\n        return \"NO\"\n    for i in range(2, n):\n        if x + 1 < rows[i] or x - 1 > rows[i]:\n            x, y = None, None\n            break\n        elif x > rows[i] or x < rows[i]:\n            x, y = None, None\n            break\n        elif y + 1 < rows[i] or y - 1 > rows[i]:\n            x, y = None, None\n            break\n        else:\n            x, y = rows[i], rows[i]\n    if x is None or y is None:\n        return \"NO\"\n    else:\n        return str(x) + \" \" + str(y)\n\n>>> solution('5\\n1 2 3 6 9 8 5 2')\nYES\n3 3\n\n>>> solution('6\\n1 2 1 2 5 3')\nNO\n\n>>> solution('2\\n1 10')\nYES\n4 9\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"\"\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    ans = \"\"\n    x = 0\n    if len(a) > len(b):\n        ans = a\n        x = len(b)\n    elif len(a) < len(b):\n        ans = b\n        x = len(a)\n\n    for i in range(x):\n        if ans[i] == a[i]:\n            ans = ans[:i] + ans[i + 1:]\n    return ans if len(ans)!= 0 else \"-1\"\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    b_length = len(b)\n    if b_length == 0:\n        return \"-\"\n    count = 0\n    while b_length > 0:\n        if b[:count] == a[:count]:\n            b = b[count:]\n            b_length = len(b)\n        else:\n            count += 1\n    return a if b_length == 0 else a[count:]"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.strip()\n    b = stdin.strip()\n    i = 0\n    j = 0\n    maxLen = 0\n    result = \"\"\n    if a == b:\n        return \"-\"\n    while i < len(a) and j < len(b):\n        if a[i] == b[j]:\n            i += 1\n            j += 1\n            maxLen = max(maxLen, j-i)\n        else:\n            i += 1\n    return result.join(a[i:i+maxLen])"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split('\\n')\n\n    b_splitted = b.split()\n    longest_string = ''\n    for i in range(len(a) - len(b) + 1):\n        string = a[i:i + len(b)]\n        if string == b_splitted:\n            if len(string) > len(longest_string):\n                longest_string = string\n    if not longest_string:\n        return '- -'\n    return longest_string\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # min_count = len(stdin[0])\n    # for line in stdin:\n    #     if min_count > len(line):\n    #         min_count = len(line)\n\n    # result = \"\"\n    # for i in range(min_count):\n    #     tmp_result = \"\"\n    #     for line in stdin:\n    #         if line[i] == stdin[0][i]:\n    #             tmp_result += line[i]\n    #     result = max(result, tmp_result)\n    # return result\n    # return stdin[0] if len(stdin[0]) < min_count else \"\"\n\n    return stdin[0] if len(stdin[0]) < min(len(i) for i in stdin) else \"\"\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    b = ''.join(set(b) - set(a))\n    return b if len(b) > 0 else '-'\nsolution(input())\n\ndef"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin\n    min_length = min(len(a), len(b))\n    counter = 0\n    answer = \"\"\n\n    for i in range(min_length):\n        if a[i] == b[i]:\n            counter += 1\n        else:\n            answer = a[:i] + a[i + 1:]\n            break\n\n    if answer == \"\":\n        answer = -1\n    return answer\n\nsolution(\"hi\")\nsolution(\"bob\")\nsolution(\"abca\")\nsolution(\"abcdcba\")"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split(\"\\n\")\n    if a == b:\n        return \"-1\"\n    l = len(b)\n    if l == 0:\n        return a\n    ans = \"\"\n    for i in range(l):\n        tmp = b[i:]\n        if tmp.find(a)!= -1:\n            ans = a + ans\n            break\n    return ans\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # \u0440\u0430\u0437\u0431\u0438\u0432\u0430\u0435\u043c \u0432\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u043c\u0430\u0441\u0441\u0438\u0432\u044b \u0438\u0437 \u0441\u0442\u0440\u043e\u043a\n    # \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u0441\u043b\u043e\u0432\u0430\u0440\u044c, \u043a\u043b\u044e\u0447\u0430\u043c\u0438 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u043d\u043e\u043c\u0435\u0440\u0430 \u0441\u0442\u0440\u043e\u043a, \u0430 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f - \u0441\u043f\u0438\u0441\u043e\u043a \u0441\u0442\u0440\u043e\u043a\n    # \u0440\u0430\u0437\u0431\u0438\u0432\u0430\u0435\u043c \u043c\u0430\u0441\u0441\u0438\u0432 \u043d\u0430 \u0441\u0442\u0440\u043e\u043a\u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u0438 split \u0438 \u043f\u0435\u0440\u0435\u043c\u0435\u0448\u0438\u0432\u0430\u0435\u043c \u0441\u043f\u0438\u0441\u043e\u043a \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0442\u043e\u0433\u043e, \u0447\u0442\u043e \u0447\u0442\u043e \u0442\u043e \u043c\u0435\u043d\u044c\u0448\u0435, \u0447\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u0440\u043e\u043a \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435\n    # \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043d\u043e\u0432\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u0441\u0442\u0440\u043e\u043a \u0447\u0442\u043e\u0431\u044b \u0438\u0437\u0431\u0435\u0436\u0430\u0442\u044c \u043f\u0435\u0440\u0435\u0437\u0430\u043f\u0438\u0441\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u0435\n    lines = stdin.split('\\n')\n    new_lines = []\n    for line in lines:\n        line = line.split(' ')\n        line = list(line)\n        new_lines.append(line)\n\n    # \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u0446\u0438\u043a\u043b \u043f\u043e \u0441\u0442\u0440\u043e\u043a\u0430\u043c \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0435\u0441\u0442\u044c \u043b\u0438 \u0432 \u044d\u0442\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u043f\u0430\u043b\u0438\u043d\u0434\u0440\u043e\u043c\n    # \u0435\u0441\u043b\u0438 \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 \u0435\u0441\u0442\u044c \u0441\u0438\u043c\u0432\u043e\u043b, \u0441\u0440\u0430\u0432\u043d\u0438\u0432\u0430\u0435\u043c \u0435\u0433\u043e \u0441\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439\n    # \u0435\u0441\u043b\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0440\u0430\u0432\u043d\u043e \u0442\u043e \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0435\u0433\u043e \u0432 \u0441\u043f\u0438\u0441\u043e\u043a\n    result = 0\n    for line in new_lines:\n        for i in range(len(line)):\n            if line[i] == line[-1-i]:\n                result += 1\n    return str(result)"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"0\"\n    if n == 1:\n        return \"1\"\n    s = stdin.replace(\"+\", \"\")\n    s = s.replace(\"-\", \"\")\n    # print(s)\n    return \"3\" if len(s) <= n else str(len(s))\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.strip()\n\n    stones = []\n\n    for i in range(len(s)):\n        if s[i] == \"-\" or s[i] == \"+\":\n            stones.append(s[i])\n    stones = list(map(int, stones))\n\n    if len(stones) > n:\n        return str(0)\n\n    if len(stones) == n:\n        return str(len(stones))\n\n    if len(stones) == 0:\n        return str(n)\n\n    def stones_addition(stones):\n        result = 0\n        for i in range(len(stones)):\n            result += stones[i]\n            if result >= n:\n                return str(i+1)\n        return str(len(stones)+1)\n\n    def stones_substitution(stones):\n        result = 0\n        for i in range(len(stones)):\n            result += stones[i]\n            if result < n:\n                return str(i+1)\n        return str(len(stones)+1)\n\n    if n == 1:\n        return stones_addition(stones)\n\n    return stones_substitution(stones)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        if i == 0:\n            if stdin[i] == '+':\n                n = 1\n            else:\n                n = 0\n            s = stdin\n        else:\n            if stdin[i] == '-':\n                s = s[:n] + stdin[i] + s[n + 1:]\n            else:\n                s = s[:n] + stdin[i] + s[n:]\n            n += 1\n    return str(len(s))\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    s = stdin.strip()\n\n    if n == 0:\n        return \"0\"\n\n    total_stones = 0\n    for i in range(n):\n        if s[i] == \"-\" and i == 0:\n            continue\n        if s[i] == \"-\":\n            total_stones -= 1\n        elif s[i] == \"+\":\n            total_stones += 1\n        if total_stones < 0:\n            return \"0\"\n    return str(total_stones)\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    num, s = map(int, stdin.split())\n    s = list(s)\n\n    def count_stones(i, count):\n        if i == num:\n            if s == [\"-\"] * num:\n                return count\n            return count + 1\n\n        if s[i] == \"-\":\n            return count_stones(i + 1, count)\n        elif s[i] == \"+\":\n            return count_stones(i + 1, count + 1)\n\n    return count_stones(0, 0)\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    result = 0\n    while s!= \"--\" and s!= \"+--\":\n        result += 1\n        s = stdin.replace(\"--\", \"+--\")\n        s = stdin.replace(\"++\", \"+--\")\n    return result\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return '0'\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin\n    counter = 0\n    while n:\n        if s == \"+\":\n            counter += 1\n        else:\n            counter -= 1\n        n -= 1\n        if counter < 0:\n            counter = 0\n            s = \"+\" + s\n    return str(counter)\n"
    },
    {
        "number": 169,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    rubles = int(stdin[0])\n    glass_bottles = int(stdin[1])\n    plastic_bottles = int(stdin[2])\n    max_liters = min(rubles // (glass_bottles + plastic_bottles), rubles // plastic_bottles)\n    print(max_liters)\n\n\nsolution(input())\n"
    },
    {
        "number": 169,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    m, d = n, n\n    while m // 10 > 0:\n        m //= 10\n        d //= 10\n    p = m % d\n    if p > 0:\n        return str(n)\n    m = n\n    while m // 10 > 0:\n        m //= 10\n        d //= 10\n    while m % 10 > 0:\n        m -= 1\n        d //= 10\n    return str(m)"
    },
    {
        "number": 169,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return sum([int(i) for i in stdin.split(\"\\n\")])\n"
    },
    {
        "number": 169,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    d_glass = []\n    d_plastic = []\n    for i in range(n):\n        d_glass.append(int(stdin.strip().split()[i]))\n    for i in range(n):\n        d_plastic.append(int(stdin.strip().split()[i+n]))\n    #print(d_glass)\n    #print(d_plastic)\n    return"
    },
    {
        "number": 169,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def compare(a: int, b: int) -> int:\n        if a > b:\n            return 1\n        if a < b:\n            return -1\n        return 0\n\n    n = int(stdin)\n    a, b, c = map(int, input().split())\n    q = [(0, 1, 0)]\n    visited = set()\n    visited.add(0)\n    while q:\n        cost, l, visited = heapq.heappop(q)\n        if l == n:\n            return cost\n        elif l + c < n:\n            heapq.heappush(q, (cost, l + c, visited.union({l + c})))\n        else:\n            heapq.heappush(q, (cost, l, visited.union({l})))\n\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 169,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    a = int(stdin.strip())\n    b, c = stdin.strip().split()\n    c = int(c)\n    max_liters = 0\n    for i in range(a // c):\n        if i > max_liters:\n            max_liters = i\n    if a - c * max_liters > 0:\n        max_liters = max_liters + 1\n    return str(max_liters)\n"
    },
    {
        "number": 169,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    number_of_rubles = int(stdin)\n    \n    print(number_of_rubles)\n\n    liter_glass = 0\n    liter_plastic = 0\n    rubles_empty = 0\n    while number_of_rubles >= 0:\n        if liter_glass == 0 and liter_plastic == 0:\n            if number_of_rubles >= rubles_empty:\n                number_of_rubles = number_of_rubles - rubles_empty\n                liter_plastic += 1\n                print(liter_plastic)\n            else:\n                liter_glass += 1\n                print(liter_glass)\n        elif liter_plastic > 0:\n            if number_of_rubles >= (rubles_empty + liter_plastic):\n                number_of_rubles = number_of_rubles - (rubles_empty + liter_plastic)\n                liter_plastic += 1\n                print(liter_plastic)\n            else:\n                liter_glass += 1\n                print(liter_glass)\n        elif liter_glass > 0:\n            if number_of_rubles >= (rubles_empty + liter_glass):\n                number_of_rubles = number_of_rubles - (rubles_empty + liter_glass)\n                liter_glass += 1\n                print(liter_glass)\n            else:\n                liter_plastic += 1\n                print(liter_plastic)\n    return number_of_rubles\n\nprint(solution(\"10\\n11\\n9\\n8\\n\"))\nprint(solution(\"10\\n5\\n6\\n1\\n\"))\nprint(solution(\"10\\n1\\n1\\n1\\n\"))\n"
    },
    {
        "number": 169,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    lst = list(map(int, stdin.split()))\n    lst.sort()\n    print(lst[-1] - lst[0])\n"
    },
    {
        "number": 169,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Examples\n    >>> solution('''\n   ... 10\n   ... 11\n   ... 9\n   ... 8\n   ...\n   ... ''')\n    '2'\n    >>> solution('''\n   ... 10\n   ... 5\n   ... 6\n   ... 1\n   ...\n   ... ''')\n    '2'\n    '''\n    t = list(map(int, stdin.split()))\n    t.sort()\n    # print(t)\n    d = {'rubles': t[0], 'plastic_liter_bottle': t[1], 'glass_liter_bottle': t[2],'money': t[3]}\n    d['rubles'] = d['rubles'] + d['plastic_liter_bottle'] + d['glass_liter_bottle']\n    d['rubles'] = d['rubles'] - d['money']\n    if d['rubles'] < 0:\n        return '0'\n    return str(d['rubles'])\n    '''\n"
    },
    {
        "number": 169,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(10):\n        n, a, b, c = stdin.split()\n        n = int(n)\n        a = int(a)\n        b = int(b)\n        c = int(c)\n        if n == 0:\n            break\n        elif (a <= n and b <= n) or (a <= n and c <= n) or (b <= n and c <= n):\n            print(n)\n            break\n    else:\n        print(\"No solution\")\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    k1 = int(stdin.split()[0])\n    k2 = int(stdin.split()[1])\n    cards = list(map(int, stdin.split()[2:n + 1]))\n    k1cards = cards[:k1]\n    k2cards = cards[k1:]\n    k2cards.reverse()\n    k1 = 0\n    k2 = 0\n    while k1cards and k2cards:\n        if k1cards[-1] > k2cards[-1]:\n            k2cards.append(k1cards.pop())\n            k2 += 1\n        elif k2cards[-1] > k1cards[-1]:\n            k1cards.append(k2cards.pop())\n            k1 += 1\n    if k2 > k1:\n        return str(k2 - k1 + 1) + \" \" + str(2)\n    elif k2 == k1:\n        return \"0 0\"\n    else:\n        return \"0 -1\"\n        \n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your code goes here\n    \"\"\"\n    # replace this for solution\n    s1 = stdin.split()\n    n = int(s1[0])\n    k1 = int(s1[1])\n    k2 = int(s1[2])\n    a = []\n    c = []\n    for i in range(k1):\n        a.append(int(stdin.split()[i+1]))\n    for j in range(k2):\n        c.append(int(stdin.split()[j+k1+1]))\n    a.sort()\n    c.sort()\n    ans = 0\n    cnt = 0\n    while (len(a)!= 0 and len(c)!= 0):\n        if (a[0] > c[0]):\n            ans += 1\n            c.pop(0)\n            cnt += 1\n        else:\n            c.pop(0)\n            cnt += 1\n        a.pop(0)\n    if (cnt == k1):\n        print(ans, 2)\n    else:\n        print(ans, 1)\n    return \"\"\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    soldier_1 = list(map(int, stdin.split()))\n    soldier_2 = list(map(int, stdin.split()))\n    result = [-1]\n\n    while soldier_1 and soldier_2:\n        if soldier_1[-1] > soldier_2[-1]:\n            result[0] += 1\n            soldier_2.pop()\n            soldier_1.pop()\n        elif soldier_1[-1] < soldier_2[-1]:\n            result[0] += 1\n            soldier_1.pop()\n        elif len(soldier_1) == 1:\n            result[0] += 1\n            result[1] = 1\n            break\n        elif len(soldier_2) == 1:\n            result[0] += 1\n            result[1] = 2\n            break\n    if soldier_1:\n        result[1] = 1\n    elif soldier_2:\n        result[1] = 2\n    return''.join(map(str, result))\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    k1 = int(stdin.split()[1])\n    k2 = int(stdin.split()[2])\n    cards = list(range(n))\n    win1 = False\n    win2 = False\n    count = 0\n    while cards:\n        if win1 == False and win2 == False:\n            if cards[0] % k1 == 0:\n                win1 = True\n            if cards[0] % k2 == 0:\n                win2 = True\n        if win1 == False and win2 == False:\n            if cards[0] % k1!= 0:\n                win2 = True\n            if cards[0] % k2!= 0:\n                win1 = True\n        cards = cards[1:] + cards[:1]\n        if win1 == False:\n            cards = cards[1:] + cards[:1]\n            count += 1\n    if count == n:\n        return '-1'\n    else:\n        return str(count) +'' + str(1) if win1 == True else str(count) +'' + str(2)\n\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    k_1, k_2 = map(int, stdin.split())\n    stack_1 = list(range(1, n + 1))\n    stack_2 = list(range(1, n + 1))\n    while stack_1 and stack_2:\n        if stack_1[0] > stack_2[0]:\n            stack_1.pop(0)\n            stack_2.append(stack_1.pop(0))\n        elif stack_1[0] < stack_2[0]:\n            stack_1.append(stack_1.pop(0))\n            stack_2.pop(0)\n    return str(len(stack_1) + len(stack_2)) + \" \" + str(2) if len(stack_1) else \"-1\""
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if not (1 <= n <= 10):\n        return '-1'\n    k1, k2 = map(int, stdin.split())\n    if (1 <= k1 <= n - 1) and (1 <= k2 <= n - 1):\n        player1_cards = []\n        player2_cards = []\n        for i in range(k1):\n            player1_cards.append(i + 1)\n        for i in range(k2):\n            player2_cards.append(i + n + 1)\n        card_value = 0\n        player1_value = 0\n        player2_value = 0\n        player1_turn = True\n        for card in player1_cards:\n            player1_value += card\n            player2_value += n + 1 - card\n        for card in player2_cards:\n            player2_value += card\n            player1_value += n + 1 - card\n        if player1_value > player2_value:\n            return '2'\n        elif player1_value < player2_value:\n            return '1'\n        else:\n            while True:\n                for i in range(len(player1_cards)):\n                    if player1_cards[i]!= player2_cards[i]:\n                        card_value += 1\n                if player1_cards == player2_cards:\n                    return '-1'\n                else:\n                    if player1_turn:\n                        player1_cards.append(player1_cards.pop(0))\n                        player2_cards.append(player2_cards.pop(0))\n                        player1_turn = False\n                    else:\n                        player1_cards.append(player1_cards.pop(0))\n                        player2_cards.append(player2_cards.pop(0))\n                        player1_turn = True\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n  print(stdin)\n  return '-1'"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.rstrip()\n    n = int(stdin.split(' ')[0])\n    k1 = int(stdin.split(' ')[1])\n    k2 = int(stdin.split(' ')[2])\n    first_soldier_cards = list(map(int, stdin.split(' ')[1:]))\n    second_soldier_cards = list(map(int, stdin.split(' ')[2:]))\n\n    if len(first_soldier_cards)!= n or len(second_soldier_cards)!= n:\n        return '-1'\n\n    def fight(cards, other_cards, n):\n        result_cards = []\n        result_cards.extend(cards)\n        while len(other_cards) > 0:\n            cards.pop()\n            cards.append(other_cards.pop(0))\n        return result_cards\n\n    max_value = max(first_soldier_cards)\n    first_soldier_cards.sort()\n    min_value = min(second_soldier_cards)\n    second_soldier_cards.sort(reverse=True)\n\n    # print(first_soldier_cards)\n    # print(second_soldier_cards)\n    # print(max_value)\n    # print(min_value)\n\n    def max_min(card, other_cards, n):\n        result_cards = []\n        result_cards.extend(card)\n        while len(other_cards) > 0:\n            card.pop()\n            card.append(other_cards.pop(0))\n        return result_cards\n\n    def max_min(card, other_cards, n):\n        result_cards = []\n        result_cards.extend(card)\n        while len(other_cards) > 0:\n            card.pop()\n            card.append(other_cards.pop(0))\n        return result_cards\n\n    def max_min(card, other_cards, n):\n        result_cards = []\n        result_cards.extend(card)\n        while len(other_cards) > 0:\n            card.pop()\n            card.append(other_cards.pop(0))\n        return result_cards\n\n    def max_min(card, other_cards, n):\n        result_cards = []\n        result_cards.extend(card)\n        while len(other_cards) > 0:\n            card.pop()\n            card.append(other_cards.pop(0))\n        return result_cards\n\n    def max_min(card, other_cards, n):\n        result_cards = []\n        result_cards.extend(card)\n        while len(other_cards) > 0:\n            card.pop()\n            card.append(other_cards.pop(0))\n        return result_cards\n\n    def max_min(card, other_cards, n):\n        result_cards = []\n        result_cards.extend(card)\n        while len(other_cards) > 0:\n            card.pop()\n            card.append(other_cards.pop(0))\n        return result_cards\n\n    def max_min(card, other_cards, n):\n        result_cards = []\n        result_cards.extend(card)\n        while len(other_cards) > 0:\n            card.pop()\n            card.append(other_cards.pop(0))\n        return result_cards\n\n    def max_min(card, other_cards, n):\n        result_cards = []\n        result_cards.extend(card)\n        while len(other_cards) > 0:\n            card.pop()\n            card.append(other_cards.pop(0))\n        return result_cards\n\n    def max_min(card, other_cards, n):\n        result_cards = []\n        result_cards.extend(card)\n        while len(other_cards) > 0:\n            card.pop()\n            card.append(other_cards.pop(0))\n        return result_cards\n\n    def max_min(card, other_cards, n):\n        result_cards = []\n        result_cards.extend(card)\n        while len(other_cards) > 0:\n            card.pop()\n            card.append(other_cards.pop(0))\n        return result_cards\n\n    def max_min(card, other_cards, n):\n        result_cards = []\n        result_cards.extend(card)\n        while len(other_cards) > 0:\n            card.pop()\n            card.append(other_cards.pop(0))\n        return result_cards\n\n    def max_min(card, other_cards, n):\n        result_cards = []\n        result_cards.extend(card)\n        while len(other_cards) > 0:\n            card.pop()\n            card.append(other_cards.pop(0))\n        return result_cards\n\n    def max_min(card, other_cards, n):\n        result_cards = []\n        result_cards.extend(card)\n        while len(other_cards) > 0:\n            card.pop()\n            card.append(other_cards.pop(0))\n        return result_cards\n\n    def max_min(card, other_cards, n):\n        result_cards = []\n        result_cards.extend(card)\n        while len(other_cards) > 0:\n            card.pop()\n            card.append(other_cards.pop(0))\n        return result_cards\n\n    def max_min(card, other_cards, n):\n        result_cards = []\n        result_cards.extend(card)\n        while len(other_cards) > 0:\n            card.pop()\n            card.append(other_cards.pop(0))\n        return result_cards\n\n    def max_min(card, other_cards, n):\n        result_cards = []\n        result_cards.extend(card)\n        while len(other_cards) > 0:\n            card.pop()\n            card.append(other_cards.pop(0))\n        return result_cards\n\n    def max_min(card, other_cards, n):\n        result_cards = []\n        result_cards.extend(card)\n        while len(other_cards) > 0:\n            card.pop()\n            card.append(other_cards.pop(0))\n        return result_cards\n\n    def max_min(card, other_cards, n):\n        result_cards = []\n        result_cards.extend(card)\n        while len(other_cards) > 0:\n            card.pop()\n            card.append("
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    k_1 = int(stdin.split()[1])\n    k_2 = int(stdin.split()[2])\n\n    players = [k_1, k_2]\n\n    for i in range(1, n - 1):\n        players.append(players[0] + players[1])\n\n    if players[0] > players[1]:\n        return '2'+ str(len(players) - 2)\n    else:\n        return '1'+ str(len(players) - 2)\n\nprint(solution('2 2 4'))\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    result = ''\n    for letter in stdin:\n        if letter.isupper():\n            result += 'Correct'\n            break\n        elif letter.islower():\n            result += 'Correct'\n            break\n        elif letter.isdigit():\n            result += 'Correct'\n            break\n        elif letter == '_':\n            result += 'Correct'\n            break\n        else:\n            result += 'Too weak'\n    return result\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    for letter in stdin:\n        if letter in alphabet:\n            continue\n        elif letter == '!':\n            continue\n        elif letter == '?':\n            continue\n        elif letter == '.':\n            continue\n        elif letter == ',':\n            continue\n        elif letter == '_':\n            continue\n        else:\n            return 'Too weak'\n    return 'Correct'"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    count_q_letters, count_e_letters, count_numbers = 0, 0, 0\n    for letter in stdin:\n        if letter == \"!\":\n            count_q_letters += 1\n        elif letter == \"?\":\n            count_e_letters += 1\n        elif letter == \".\":\n            count_numbers += 1\n        elif letter == \",\":\n            count_e_letters += 1\n        elif letter == \"_\":\n            count_q_letters += 1\n        elif letter.isalpha():\n            count_e_letters += 1\n        elif letter.isdigit():\n            count_numbers += 1\n        else:\n            pass\n    if count_e_letters == 0 and count_q_letters == 0 and count_numbers == 0:\n        return \"Correct\"\n    elif count_e_letters >= 1 and count_q_letters >= 1 and count_numbers >= 1:\n        return \"Too weak\"\n    else:\n        return \"Too weak\""
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    pass"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    try:\n        password = stdin.split()\n        \n        if len(password) > 100:\n            return 'Too weak'\n        \n        for char in password:\n            if char.isupper():\n                break\n        else:\n            return 'Too weak'\n        \n        for char in password:\n            if char.islower():\n                break\n        else:\n            return 'Too weak'\n        \n        for char in password:\n            if char.isdigit():\n                break\n        else:\n            return 'Too weak'\n        \n        return 'Correct'\n    except:\n        return 'Too weak'\nsolution(input())"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    while True:\n        for i in range(len(stdin)):\n            if stdin[i] == '!':\n                stdin = stdin[:i] + '!' + stdin[i + 1:]\n                break\n            if stdin[i] == '?':\n                stdin = stdin[:i] + '?' + stdin[i + 1:]\n                break\n            if stdin[i] == '.':\n                stdin = stdin[:i] + '.' + stdin[i + 1:]\n                break\n            if stdin[i] == ',':\n                stdin = stdin[:i] + ',' + stdin[i + 1:]\n                break\n            if stdin[i] == '_':\n                stdin = stdin[:i] + '_' + stdin[i + 1:]\n                break\n        if stdin.count('!') + stdin.count('?') + stdin.count('.') + stdin.count(',') == 1:\n            return stdin[0]\n        else:\n            return 'Too weak'"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    is_complex = False\n    if len(stdin) < 5:\n        return \"Too weak\"\n    elif any([re.search(r'[a-z]', stdin) is not None, re.search(r'[A-Z]', stdin) is not None, re.search(r'[0-9]', stdin) is not None, re.search(r'[^a-zA-Z0-9_\\.]', stdin) is not None]):\n        is_complex = True\n    if is_complex:\n        return \"Correct\"\n    else:\n        return \"Too weak\"\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    import re\n    \n    pass_str = stdin\n    \n    if len(pass_str) < 5 or len(pass_str) > 100:\n        return \"Too weak\"\n    \n    password = re.sub(r\"\\W+\", \"\", pass_str)\n    \n    if len(password) < 5 or len(password) > 100:\n        return \"Too weak\"\n    \n    special_characters = re.findall(r\"\\W+\", password)\n    \n    if len(special_characters) < 2:\n        return \"Too weak\"\n    \n    for special_char in special_characters:\n        if special_char in \"!,?.\":\n            return \"Too weak\"\n    \n    small_characters = re.findall(r\"\\w+\", password)\n    \n    if len(small_characters) < 2:\n        return \"Too weak\"\n    \n    for small_char in small_characters:\n        if small_char in \"!?\":\n            return \"Too weak\"\n    \n    digits = re.findall(r\"\\d+\", password)\n    \n    if len(digits) < 2:\n        return \"Too weak\"\n    \n    return \"Correct\"\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    for char in stdin:\n        if char in ('!', '?', '.', ',', '_'):\n            continue\n        elif char.isupper():\n            continue\n        else:\n            return 'Too weak'\n    return 'Correct'\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    for i in stdin:\n        if i == \",\" or i == \"_\":\n            return \"Too weak\"\n        elif i.isupper():\n            return \"Correct\"\n        elif i.islower():\n            return \"Correct\"\n        elif i.isdigit():\n            return \"Correct\""
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    students_count, group_a_count, group_b_count = map(int, stdin.split())\n\n    students = list(map(int, stdin.split()))\n    students.sort()\n    students_min = students[0]\n    students_max = students[students_count - 1]\n\n    while students_min <= students_max:\n        mid = (students_min + students_max) // 2\n        a_count = sum([1 if x >= mid else 0 for x in students])\n        if a_count == students_count:\n            return str(mid)\n        elif a_count < students_count:\n            students_min = mid + 1\n        else:\n            students_max = mid - 1\n\n    return \"-1\"\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    n = a[0]\n    if n > 10 or n < 1:\n        return \"Error: invalid input\"\n    if len(a)!= 2 * n:\n        return \"Error: invalid input\"\n    dist = {}\n    for i in range(n):\n        dist[i] = 0\n    for i in range(n):\n        dist[a[i]] += 1\n    # print(dist)\n    a = sorted(dist.items(), key=lambda x: x[1], reverse=True)\n    # print(a)\n    # print(len(a))\n    if len(a) < 2:\n        return \"Error: invalid input\"\n    # print(len(a[0][1]))\n    if a[0][1] < 2 or a[0][1] > n:\n        return \"Error: invalid input\"\n    # print(a[0][0], a[1][0], a[2][0])\n    # print(a[0][0], a[1][0], a[2][0], a[3][0], a[4][0], a[5][0])\n    for i in range(1, 6):\n        if a[0][0] == a[i][0]:\n            a[0][1] += a[i][1]\n        else:\n            a[i][1] += a[0][1]\n            a[0][1] = a[i][1]\n    # print(a[0][1], a[1][1])\n    if a[0][1]!= n:\n        return \"Error: invalid input\"\n    return \"0\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1]))\n    b = list(map(int, stdin.split('\\n')[2]))\n    answer = -1\n    if n < 2:\n        return answer\n    else:\n        while n!= 1:\n            if len(set(a)) == n:\n                return n - 1\n            elif len(set(b)) == n:\n                return n - 1\n            else:\n                a.sort()\n                b.sort()\n                i = 0\n                j = 0\n                while i < n - 1:\n                    if a[i] == a[i + 1]:\n                        a.remove(a[i])\n                        n -= 1\n                        continue\n                    i += 1\n                while j < n - 1:\n                    if b[j] == b[j + 1]:\n                        b.remove(b[j])\n                        n -= 1\n                        continue\n                    j += 1\n                if a[0]!= b[0]:\n                    answer = n - 1\n    return answer"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    b = list(map(int, stdin.strip().split()))\n    groups = {\n        \"A\": a[:n // 2],\n        \"B\": b[n // 2:]\n    }\n    res = 0\n    while len(groups[\"A\"]) > 1:\n        min_a = min(groups[\"A\"])\n        min_b = min(groups[\"B\"])\n        tmp = min(min_a, min_b)\n        tmp_a = min_a - tmp\n        tmp_b = min_b - tmp\n        groups[\"A\"] = [x for x in groups[\"A\"] if x < tmp_a]\n        groups[\"B\"] = [x for x in groups[\"B\"] if x < tmp_b]\n        res += 1\n    return str(res)"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(i) for i in stdin.split()]\n    b = [int(i) for i in stdin.split()]\n    min_exchange = 1000000000000\n    max_exchange = 0\n    while min_exchange!= max_exchange:\n        min_exchange = max_exchange\n        max_exchange = 0\n        a_group = []\n        b_group = []\n        while len(a_group) < n:\n            if len(b_group) == n:\n                break\n            if a_group and b_group:\n                break\n            if len(a_group) >= len(b_group):\n                if a_group:\n                    a_index = 0\n                    while a_index < len(a_group):\n                        if a[a_index] <= b[b_group[0]]:\n                            a_group.append(a.pop(a_index))\n                            break\n                        a_index += 1\n                else:\n                    a_index = 0\n                    while a_index < len(a):\n                        if a[a_index] <= b[b_group[0]]:\n                            a_group.append(a.pop(a_index))\n                            break\n                        a_index += 1\n            else:\n                if b_group:\n                    b_index = 0\n                    while b_index < len(b_group):\n                        if b[b_group[b_index]] <= a[a_group[0]]:\n                            b_group.append(b.pop(b_index))\n                            break\n                        b_index += 1\n                else:\n                    b_index = 0\n                    while b_index < len(b):\n                        if b[b_index] <= a[a_group[0]]:\n                            b_group.append(b.pop(b_index))\n                            break\n                        b_index += 1\n        if len(a_group) == n:\n            for i in range(len(a_group)):\n                b_group.append(a_group.pop(0))\n        else:\n            for i in range(len(b_group)):\n                a_group.append(b_group.pop(0))\n        max_exchange = len(a_group) + len(b_group)\n    return str(len(a_group))\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = stdin.split()[1]\n    b = stdin.split()[2]\n    ac = [int(i) for i in a]\n    bc = [int(i) for i in b]\n    if (len(ac)!= len(bc)):\n        return -1\n    return min(abs(i - j) for i, j in zip(ac, bc))\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.rstrip('\\n')\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n    b = list(map(int, stdin.split()[2]))\n    a_sort = sorted(a)\n    b_sort = sorted(b)\n    min_exchanges = -1\n    while a_sort and b_sort:\n        if a_sort[0] == b_sort[0]:\n            a_sort = a_sort[1:]\n            b_sort = b_sort[1:]\n        else:\n            a_sort = a_sort[1:]\n            b_sort = b_sort[1:]\n            min_exchanges += 1\n    return str(min_exchanges)\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a = tuple(a)\n    if a.count(1) == a.count(2) and a.count(1) == a.count(3) and a.count(1) == a.count(4):\n        return '1'\n    if a.count(1) == a.count(2) and a.count(1) == a.count(3) and a.count(1) == a.count(4) and a.count(1) == a.count(5):\n        return '1'\n    if a.count(1) == a.count(2) and a.count(1) == a.count(3) and a.count(1) == a.count(4) and a.count(1) == a.count(5) and a.count(1) == a.count(6):\n        return '1'\n    if a.count(1) == a.count(2) and a.count(1) == a.count(3) and a.count(1) == a.count(4) and a.count(1) == a.count(5) and a.count(1) == a.count(6) and a.count(1) == a.count(7):\n        return '1'\n    if a.count(1) == a.count(2) and a.count(1) == a.count(3) and a.count(1) == a.count(4) and a.count(1) == a.count(5) and a.count(1) == a.count(6) and a.count(1) == a.count(7) and a.count(1) == a.count(8):\n        return '1'\n    if a.count(1) == a.count(2) and a.count(1) == a.count(3) and a.count(1) == a.count(4) and a.count(1) == a.count(5) and a.count(1) == a.count(6) and a.count(1) == a.count(7) and a.count(1) == a.count(8) and a.count(1) == a.count(9):\n        return '1'\n    if a.count(1) == a.count(2) and a.count(1) == a.count(3) and a.count(1) == a.count(4) and a.count(1) == a.count(5) and a.count(1) == a.count(6) and a.count(1) == a.count(7) and a.count(1) == a.count(8) and a.count(1) == a.count(9) and a.count(1) == a.count(10):\n        return '1'\n    if a.count(1) == a.count(2) and a.count(1) == a.count(3) and a.count(1) == a.count(4) and a.count(1) == a.count(5) and a.count(1) == a.count(6) and a.count(1) == a.count(7) and a.count(1) == a.count(8) and a.count(1) == a.count(9) and a.count(1) == a.count(10) and a.count(1) == a.count(11):\n        return '1'\n    if a.count(1) == a.count(2) and a.count(1) == a.count(3) and a.count(1) == a.count(4) and a.count(1) == a.count(5) and a.count(1) == a.count(6) and a.count(1) == a.count(7) and a.count(1) == a.count(8) and a.count(1) == a.count(9) and a.count(1) == a.count(10) and a.count(1) == a.count(11) and a.count(1) == a.count(12):\n        return '1'\n    if a.count(1) == a.count(2) and a.count(1) == a.count(3) and a.count(1) == a.count(4) and a.count(1) == a.count(5) and a.count(1) == a.count(6) and a.count(1) == a.count(7) and a.count(1) == a.count(8) and a.count(1) == a.count(9) and a.count(1) == a.count(10) and a.count(1) == a.count(11) and a.count(1) == a.count(12) and a.count(1) == a.count(13):\n        return '1'\n    if a.count(1) == a.count(2) and a.count(1) == a.count(3) and a.count(1) == a.count(4) and a.count(1) == a.count(5) and a.count(1) == a.count(6) and a.count(1) == a.count(7) and a.count(1) == a.count(8) and a.count(1) == a.count(9) and a.count(1) == a.count(10) and a.count(1) == a.count(11) and a.count(1) == a.count(12) and a.count(1) == a.count(13) and a.count(1) == a.count(14):\n        return '1'\n    if a.count(1) == a.count(2) and a.count(1) == a.count(3) and a.count(1) == a.count(4) and a.count(1) == a.count(5) and a.count(1) == a.count(6) and a.count(1) == a.count(7) and a.count(1) == a.count(8) and a.count(1) == a.count(9) and a.count(1) == a.count(10) and a.count(1) == a.count(11) and a.count(1) == a.count(12) and a.count(1) == a.count(13) and a.count(1) == a.count(14) and a.count(1) == a.count(15):\n        return '"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.strip().split()))\n    a.sort()\n    b = list(map(int, stdin.strip().split()))\n    b.sort()\n    if a!= b:\n        return -1\n    else:\n        return len(a)\n\n\nprint(solution(input()))"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    students_a = list(map(int, stdin.split()))\n    students_b = list(map(int, stdin.split()))\n\n    students_a = sorted(students_a)\n    students_b = sorted(students_b)\n\n    diff = students_a[0] - students_b[0]\n    students_b.append(students_b[-1])\n    for i in range(1, n):\n        if students_a[i] - students_b[i]!= diff:\n            return -1\n        students_b.append(students_b[-1])\n        diff = students_a[i] - students_b[i]\n\n    return str(diff)\n\nprint(solution(input()))\n"
    },
    {
        "number": 173,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n\n    directions = {\n        '>': {'v': '^'},\n        '<': {'v': 'v'},\n        '^': {'v': '<'},\n        'v': {'v': '>', '^': '^'},\n    }\n\n    for _ in range(n):\n        letter, direction = stdin.split()\n        if direction not in directions[letter]:\n            return 'NO'\n        direction = directions[letter][direction]\n        stdin = stdin.replace(letter, direction, 1)\n    return 'YES'"
    },
    {
        "number": 173,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    h_streets, v_streets = stdin.splitlines()\n    h_streets = list(h_streets)\n    v_streets = list(v_streets)\n\n    h_steps = []\n    v_steps = []\n    for index, h_street in enumerate(h_streets):\n        if h_street == '<':\n            h_steps.append('<')\n            h_steps.append(index + 1)\n        else:\n            h_steps.append('>')\n            h_steps.append(index + 1)\n\n    for index, v_street in enumerate(v_streets):\n        if v_street == '^':\n            v_steps.append('^')\n            v_steps.append(index + 1)\n        else:\n            v_steps.append('v')\n            v_steps.append(index + 1)\n\n    h_steps.sort()\n    v_steps.sort()\n\n    if len(h_steps) > len(v_steps):\n        return 'NO'\n    else:\n        return 'YES'\n"
    },
    {
        "number": 173,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    street_directions = stdin.split('\\n')\n    if any(i!= '<' and i!= '>' and i!= '^' and i!= 'v' for i in street_directions[1]):\n        return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 173,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    direction = stdin[1]\n    while n!= len(direction):\n        direction += stdin[n+1]\n        n += 1\n    \n    street = stdin[1]\n    while m!= len(street):\n        street += stdin[m+1]\n        m += 1\n\n    if len(street) < len(direction):\n        return \"NO\"\n\n    if (direction == '>') and (street[::-1] == direction):\n        return \"YES\"\n    if (direction == '<') and (street == direction[::-1]):\n        return \"YES\"\n    if (direction == '^') and (street == direction[::-1]):\n        return \"YES\"\n    if (direction == 'v') and (street == direction[::-1]):\n        return \"YES\"\n\n    return \"NO\""
    },
    {
        "number": 173,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    horizontal = stdin.split()[1]\n    vertical = stdin.split()[2]\n    visited = [[False] * m for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if horizontal[i] == vertical[j] and not visited[i][j]:\n                visited[i][j] = True\n                return \"YES\"\n    return \"NO\""
    },
    {
        "number": 173,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(x) for x in stdin.split())\n    h_direction = stdin.split()[1]\n    v_direction = stdin.split()[2]\n    horizontal = set()\n    vertical = set()\n\n    for i in range(0, n):\n        horizontal.add(h_direction[i])\n    for j in range(0, m):\n        vertical.add(v_direction[j])\n\n    horizontal = sorted(horizontal)\n    vertical = sorted(vertical)\n    combine = horizontal + vertical\n\n    for i in range(0, len(combine)):\n        if combine[i] == '<' and combine[i + 1] == '>':\n            if combine[i + 2] == '<':\n                if combine[i + 3] == '>':\n                    return 'YES'\n                else:\n                    return 'NO'\n            else:\n                if combine[i + 3] == '>':\n                    return 'NO'\n                else:\n                    return 'YES'\n        elif combine[i] == '>' and combine[i + 1] == '<':\n            if combine[i + 2] == '>':\n                if combine[i + 3] == '<':\n                    return 'YES'\n                else:\n                    return 'NO'\n            else:\n                if combine[i + 3] == '<':\n                    return 'NO'\n                else:\n                    return 'YES'\n        elif combine[i] == '^' and combine[i + 1] == 'v':\n            if combine[i + 2] == '^':\n                if combine[i + 3] == '^':\n                    return 'YES'\n                else:\n                    return 'NO'\n            else:\n                if combine[i + 3] == '^':\n                    return 'NO'\n                else:\n                    return 'YES'\n        elif combine[i] == 'v' and combine[i + 1] == '^':\n            if combine[i + 2] == 'v':\n                if combine[i + 3] == '^':\n                    return 'YES'\n                else:\n                    return 'NO'\n            else:\n                if combine[i + 3] == '^':\n                    return 'NO'\n                else:\n                    return 'YES'\n    else:\n        return 'NO'\n\nprint(solution(stdin))\n\n-----Explanation-----\n\nWe have provided an example, where we have a street direction pattern in the second sample test case.\n\nThe pattern is:\n\n<>\nv^v\n\nOur goal is to reach a junction from any other junction in this pattern. If we move from east to west, we are guaranteed to move from north to south. If we move from west to east, we are guaranteed to move from south to north.\n\nThe pattern has four horizontal streets.\n\nThe pattern has four vertical streets.\n\nWhen we reach any junction from any of the four streets, the traffic flow in any of the four streets can be made in both horizontal and vertical directions.\n\nFrom any of the four streets, we can reach any junction, so the pattern meets the criteria of the mayor.\n\nInput/Output\n\n[Input]\n\nThe first line of input contains two integers, n and m, (2 \u2264 n, m \u2264 20), denoting the number of horizontal streets and the number of vertical streets, respectively.\n\nThe second line contains a string of length n, made of characters '<' and '>', denoting direction of each horizontal street. If the i-th character is equal to '<', the street is directed from east to west otherwise, the street is directed from west to east. Streets are listed in order from north to south.\n\nThe third line contains a string of length m, made of characters '^' and 'v', denoting direction of each vertical street. If the i-th character is equal to '^', the street is directed from south to north, otherwise the street is directed from north to south. Streets are listed in order from west to east.\n\nOutput\n\nIf the given pattern meets the mayor's criteria, print a single line containing \"YES\", otherwise print a single line containing \"NO\".\n\nConstraints\n\n\n\n[Output]\n\nThe pattern may be any legal street direction pattern.\n\nSample Input 1\n\n4 6\n><>\nv^v\n\nSample Output 1\n\nYES\n\nSample Input 2\n\n3 3\n<><>\nv^v\n\nSample Output 2\n\nNO\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 173,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    hor_str = stdin.split()[1]\n    ver_str = stdin.split()[2]\n    # print(n, m)\n    # print(hor_str)\n    # print(ver_str)\n    if (n-1)%2!= 0:\n        return \"NO\"\n    if (m-1)%2!= 0:\n        return \"NO\"\n    if (n-1) < (m-1):\n        return \"NO\"\n\n    # print(\"YES\")\n    # return \"YES\"\n"
    },
    {
        "number": 173,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    x = list(stdin.strip())\n    x.sort()\n    y = []\n    for i in range(n):\n        if x[i] == '<':\n            y.append('v')\n        else:\n            y.append('^')\n    y.sort()\n    x = x + y\n    if n % 2 == 0:\n        if x[-1]!= x[-2]:\n            return 'NO'\n    elif m % 2 == 0:\n        if x[-1]!= x[-2]:\n            return 'NO'\n    else:\n        if x[-1]!= x[-2]:\n            return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 173,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n        n, m = map(int, input().split())\n        h, v = \"\".join(stdin.split()), \"\".join(stdin.split())\n        lst = []\n        for i in range(n):\n            lst.append(h[i])\n        for i in range(m):\n            lst.append(v[i])\n        print(lst)\n        return"
    },
    {
        "number": 173,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    patterns = [[x == '<' for x in stdin] for stdin in stdin.strip().split()]\n    return \"YES\" if all(all(x, y) or not x and y for x, y in zip(patterns[0], patterns[1])) else \"NO\"\n"
    },
    {
        "number": 174,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split()\n    n = int(inputs[0])\n    numbers = inputs[1:]\n    # print(n, numbers)\n    for i in range(len(numbers)):\n        numbers[i] = int(numbers[i])\n    print(numbers)\n    ans = \"YES\"\n    for i in range(len(numbers) - 1):\n        if numbers[i] == 0 and numbers[i + 1] == 1:\n            ans = \"NO\"\n            break\n        elif numbers[i] == 1 and numbers[i + 1] == 0:\n            ans = \"NO\"\n            break\n        else:\n            continue\n    # print(ans)\n    return ans\n\nsolution(\"4\\n0 1 1 0\\n\")\n"
    },
    {
        "number": 174,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = stdin.split(\"\\n\")\n    arr = list(map(int, arr[0].split()))\n    if arr == [0] * n:\n        return \"NO\"\n    if n == 2:\n        if arr[0] == 0 and arr[1] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        for i in range(n):\n            if arr[i] == 0:\n                continue\n            arr[i] = \"(\" + str(arr[i]) + \")\"\n        # print(arr)\n        if n == 1:\n            return str(arr[0])\n        else:\n            for i in range(n - 1):\n                arr[i] = \"(\" + arr[i] + \"->\" + str(arr[i + 1]) + \")\"\n            return str(arr[0])"
    },
    {
        "number": 174,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    st = \"\"\n    for i in range(n):\n        st += str(int(stdin.split()[i]))\n    if bool(st) == True:\n        print(\"YES\")\n    else:\n        print(\"NO\")"
    },
    {
        "number": 174,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    res = []\n    for i in range(1, n+1):\n        res.append(i)\n    # print(res)\n    for i in range(1, n+1):\n        arr = stdin.split()\n        for j in range(1, n+1):\n            # print(arr[j],res[i],res[j-1])\n            if arr[j-1] == '->':\n                res[i] = res[i] and res[j]\n                # print(res)\n    return 'YES' if res[0] == 0 else 'NO'"
    },
    {
        "number": 174,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n\n    def isCorrect(expr):\n        bracket = {\n            '>': '<',\n            '<': '>',\n            '^': 'v'\n        }\n        stack = []\n        for i in expr:\n            if i in bracket:\n                stack.append(i)\n            elif len(stack) == 0 or stack.pop()!= bracket[i]:\n                return False\n        return len(stack) == 0\n\n    def isCorrect_alt(expr):\n        bracket = {\n            '>': '<',\n            '<': '>',\n            '^': 'v'\n        }\n        stack = []\n        for i in expr:\n            if i in bracket:\n                stack.append(i)\n            elif len(stack) == 0 or stack.pop()!= bracket[i]:\n                return False\n            else:\n                while len(stack) > 0 and (stack[-1] in bracket and bracket[stack[-1]] == i):\n                    stack.pop()\n        return len(stack) == 0\n\n    def solve(a):\n        n = len(a)\n        if n == 1:\n            if a[0] == 0:\n                return 'YES'\n            else:\n                return 'NO'\n        elif n == 2:\n            return 'NO'\n        elif n == 3:\n            if a[1] == 0:\n                return 'YES'\n            elif a[2] == 0:\n                return 'YES'\n            else:\n                return 'NO'\n        else:\n            print('\\n')\n            for i in range(len(a)-1):\n                if a[i] == 1:\n                    b = a[:i]\n                    b.append(0)\n                    b.append(0)\n                    b.append(0)\n                    b.insert(i+1,1)\n                    if isCorrect_alt(b):\n                        if isCorrect(b):\n                            print('YES')\n                            return 'YES'\n            print('NO')\n            return 'NO'\n\n    return solve(a)\n"
    },
    {
        "number": 174,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    l = list(map(int, stdin.split()))\n    n = l[0]\n    l = l[1:]\n\n    for i in range(1, n):\n        for j in range(i):\n            if l[i] == 1 and l[j] == 1:\n                l[i] = 0\n            elif l[i] == 1 and l[j] == 0:\n                l[i] = 1\n            elif l[i] == 0 and l[j] == 0:\n                l[i] = 0\n            elif l[i] == 0 and l[j] == 1:\n                l[i] = 1\n    \n    if l[0] == 1:\n        return \"YES\"\n    else:\n        return \"NO\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 174,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for _ in range(n):\n        _inp = stdin\n        _inp = _inp.replace(\"1\", \"1>\")\n        _inp = _inp.replace(\"0\", \"0>\")\n        _inp = _inp.replace(\"-\", \"->\")\n        _inp = _inp.replace(\"(\", \"(<\")\n        _inp = _inp.replace(\")\", \">\")\n        _inp = _inp.replace(\"=\", \"==\")\n        if eval(_inp) == 0:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 174,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    input: 2 integer numbers\n    output: \"YES\" if the input is correct, \"NO\" otherwise\n    '''\n    # your code here\n    n = int(stdin)\n    a = stdin.split()\n    a = list(map(int, a))\n    if a[0] == a[1]:\n        print('YES')\n    else:\n        print('NO')\n\n    return 'YES'\n"
    },
    {
        "number": 174,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = stdin.split(\"\\n\")[1:]\n    a = [int(i) for i in a]\n    import re\n    i = 0\n    a_list = []\n    while i < n:\n        if re.match(r'[0-9]', a[i]):\n            a_list.append(a[i])\n        i += 1\n    i = 0\n    a_n = 0\n    l = len(a_list)\n    a_list.sort()\n    while i < l:\n        a_n = a_list[i] + a_n\n        i += 1\n    if a_n!= 0:\n        return \"NO\"\n    i = 0\n    a_i = 0\n    while i < n:\n        if re.match(r'[0-9]', a[i]):\n            a_i = a[i]\n            i += 1\n        else:\n            if a_i!= 0:\n                a_i = a_i + a[i]\n                i += 1\n            else:\n                return \"NO\"\n    if a_i!= 0:\n        return \"NO\"\n    i = 0\n    a_list = []\n    while i < n:\n        if re.match(r'[0-9]', a[i]):\n            a_list.append(a[i])\n        i += 1\n    i = 0\n    a_list.sort()\n    l = len(a_list)\n    j = 0\n    while j < l:\n        if a_list[j] == 0:\n            del a_list[j]\n            l -= 1\n        else:\n            j += 1\n    a_list.reverse()\n    l = len(a_list)\n    i = 0\n    while i < l:\n        if a_list[i] == 0:\n            del a_list[i]\n            l -= 1\n        else:\n            i += 1\n    a_list.reverse()\n    if a_list!= []:\n        return \"NO\"\n    else:\n        return \"YES\""
    },
    {
        "number": 174,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    if not all(0 <= ai <= 1 for ai in a):\n        return \"NO\"\n    if len(a)!= n:\n        return \"NO\"\n    for i in range(1, n):\n        if not (a[i - 1] > 0 and a[i] > 0):\n            return \"NO\"\n    if a[0] == 0 and a[n - 1] == 1:\n        return \"YES\"\n    a.sort()\n    st = \"\"\n    i = 0\n    while i < n:\n        st += str(a[i])\n        if i!= 0 and i!= n - 1 and a[i - 1] > a[i + 1]:\n            return \"NO\"\n        i += 1\n    return st + \"->\" + st\n"
    },
    {
        "number": 175,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    while a!= 0 or b!= 0:\n        if a >= 2 * b:\n            a = a - 2 * b\n            if a == 0:\n                break\n        elif b >= 2 * a:\n            b = b - 2 * a\n            if b == 0:\n                break\n    return '{} {}'.format(a, b)"
    },
    {
        "number": 175,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = (int(i) for i in stdin.split())\n    while a > 0 or b > 0:\n        if a > 2 * b:\n            a = a - 2 * b\n            b = b - 2 * a\n        elif a <= 2 * b:\n            b = b - 2 * a\n            a = a - 2 * b\n    return str(a) +'' + str(b)\n"
    },
    {
        "number": 175,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = 0\n    b = 0\n    while True:\n        if a == 0 or b == 0:\n            break\n        if a > 2*b:\n            a = a - 2*b\n        elif a < 2*b:\n            b = b - 2*a\n        else:\n            break\n    return str(a) + \" \" + str(b)\n"
    },
    {
        "number": 175,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    while True:\n        a, b = m, n\n        while a >= 2 * b:\n            a = a - 2 * b\n            if a == 0:\n                return f\"{b} {n}\"\n            elif a > 0:\n                b = b - 2 * a\n        while b >= 2 * a:\n            b = b - 2 * a\n            if b == 0:\n                return f\"{a} {n}\"\n            elif b > 0:\n                a = a - 2 * b\n        n = a\n        m = b\n    return stdin"
    },
    {
        "number": 175,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a, b = n, m\n    while True:\n        if a == 0 or b == 0:\n            break\n        elif a > 2 * b:\n            a = a - 2 * b\n        elif a < 2 * b:\n            b = b - 2 * a\n        else:\n            break\n    return str(a) + \" \" + str(b)\n\nprint(solution(input()))\n"
    },
    {
        "number": 175,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    a, b = 0, 0\n    while (a < n or b < n) and (a < 2 * b or b < 2 * a):\n        if a >= 2 * b or b >= 2 * a:\n            a = a - 2 * b\n            b = b - 2 * a\n        else:\n            a = n\n            b = n\n    return str(a) + \" \" + str(b)"
    },
    {
        "number": 175,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = list(map(int, stdin.split()))\n    while True:\n        if not a and not b:\n            break\n        elif a == 0:\n            break\n        elif b == 0:\n            break\n        elif a < 0 and b < 0:\n            break\n        elif a >= 2 * b:\n            a -= 2 * b\n        elif b >= 2 * a:\n            b -= 2 * a\n    return a, b\n"
    },
    {
        "number": 175,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a, b = n, 1\n    while a >= 2 * b:\n        if a % 2 == 0:\n            a = a // 2\n        else:\n            a = a - 2 * b\n        b = b + 2 * a\n    return \"{} {}\".format(a, b)\n"
    },
    {
        "number": 175,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  stdin = stdin.split()\n  a = int(stdin[0])\n  b = int(stdin[1])\n  i = 0\n  while a > 2 * b:\n    if a > 2 * b:\n      a -= 2 * b\n    else:\n      a = 0\n      b = 0\n    i += 1\n  while b > 2 * a:\n    if b > 2 * a:\n      b -= 2 * a\n    else:\n      b = 0\n      a = 0\n    i += 1\n  return str(i) + \" \" + str(a) + \" \" + str(b) + \"\\n\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 175,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.split()[0])\n    b = int(stdin.split()[1])\n    while True:\n        if a <= 0 or b <= 0:\n            break\n        a -= 2*b\n        b -= 2*a\n    return f\"{a} {b}\"\n"
    },
    {
        "number": 176,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = int(n * (n - 1) / 2)\n    b = int(n * (n + 1) / 2)\n    c = b - a\n    d = int(c / k)\n    e = c - d * k\n    f = e + 1\n    g = a + d * k\n    h = g + d\n    i = h - e\n    return str(i)\n\nprint(solution(\"1 1 10\"))\nprint(solution(\"2 -4 4\"))"
    },
    {
        "number": 176,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    a, b = map(int, lines[0].split())\n    k, m, n = map(int, lines[1].split())\n    ans = 0\n    for i in range(m, n + 1):\n        if a <= i <= b and i % k == 0:\n            ans += 1\n    return str(ans)\n"
    },
    {
        "number": 176,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k, a, b = map(int, stdin.split())\n    cnt = 0\n    while a <= b:\n        if a % k == 0:\n            cnt += 1\n        a += 1\n    print(cnt)"
    },
    {
        "number": 176,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    _, k, a, b = map(int, stdin.split())\n    return str(k * (b - a + 1) // (k - 1))\n"
    },
    {
        "number": 176,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    k, a, b = map(int, stdin.split())\n    cnt = 0\n    while a <= b:\n        if a % k == 0:\n            cnt += 1\n        a += 1\n    return str(cnt)"
    },
    {
        "number": 176,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    count = 0\n    for i in range(a, b + 1):\n        if i % 3 == 0 or i % 5 == 0:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 176,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    stdin = '1 1 10'\n    k, a, b = 1, 1, 10\n    return 10\n    '''\n\n    def in_segment(x):\n        if x < a:\n            return 0\n        elif x > b:\n            return 0\n        else:\n            return 1\n\n    return sum([in_segment(x) for x in range(a, b + 1)])\n"
    },
    {
        "number": 176,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    k, a, b = map(int, stdin.strip().split())\n    # Your code here\n    def divisors(n):\n        return len([i for i in range(1, n + 1) if n % i == 0])\n    total = 0\n    while a <= b:\n        if divisors(a) % k == 0:\n            total += 1\n        a += 1\n    return str(total)"
    },
    {
        "number": 176,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n, a, b = list(map(int, stdin.split()))\n    m = int(b - a) + 1\n    k = int(m / n)\n    ans = 0\n    for i in range(n):\n        if a + i * k <= b:\n            ans += 1\n    print(ans)\n    return stdin\n    \nprint(solution(input()))\n"
    },
    {
        "number": 176,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    k, a, b = list(map(int, stdin.split()))\n    if a > b:\n        a, b = b, a\n    count = 0\n    for i in range(a, b + 1):\n        if i % k == 0:\n            count += 1\n    return str(count)"
    },
    {
        "number": 177,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    print(stdin[:stdin.find('0')] + str(stdin[stdin.find('0') + 1:stdin.find('1')]))\n    return stdin[:stdin.find('0')] + str(stdin[stdin.find('0') + 1:stdin.find('1')]\n\nsolution(input())\n\ndef"
    },
    {
        "number": 177,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(n%10)\n"
    },
    {
        "number": 177,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    number = stdin\n    for i in range(len(number)):\n        print(number[i])\n    return number\n\nsolution(\"123456789101112131415161718192021222324252627282930313233343536\")\n\nOutput\n\n123456789101112131415161718192021222324252627282930313233343536\n"
    },
    {
        "number": 177,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    if k < 1 or k > 10000:\n        raise Exception('Invalid k')\n\n    sequence = ['0'] * k\n    for n in range(1, k + 1):\n        sequence[n - 1] = str(n % 10)\n\n    return ''.join(sequence)\n"
    },
    {
        "number": 177,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    result = \"\"\n    while n > 0:\n        result = str(n % 10) + result\n        n = int(n / 10)\n    return result\n"
    },
    {
        "number": 177,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.split('\\n')[0]\n"
    },
    {
        "number": 177,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 1\n   ... ''')\n    '1'\n    >>> solution('''\n   ... 12\n   ... ''')\n    '1'\n    >>> solution('''\n   ... 123456789101112131415161718192021222324252627282930313233343536\n   ... ''')\n    '1'\n    >>> solution('''\n   ... 123456789101112131415161718192021222324252627282930313233343536\n   ... ''')\n    '2'\n    >>> solution('''\n   ... 123456789101112131415161718192021222324252627282930313233343536\n   ... ''')\n    '3'\n    >>> solution('''\n   ... 123456789101112131415161718192021222324252627282930313233343536\n   ... ''')\n    '4'\n    >>> solution('''\n   ... 123456789101112131415161718192021222324252627282930313233343536\n   ... ''')\n    '5'\n    >>> solution('''\n   ... 123456789101112131415161718192021222324252627282930313233343536\n   ... ''')\n    '6'\n    >>> solution('''\n   ... 123456789101112131415161718192021222324252627282930313233343536\n   ... ''')\n    '7'\n    >>> solution('''\n   ... 123456789101112131415161718192021222324252627282930313233343536\n   ... ''')\n    '8'\n    >>> solution('''\n   ... 123456789101112131415161718192021222324252627282930313233343536\n   ... ''')\n    '9'\n    >>> solution('''\n   ... 123456789101112131415161718192021222324252627282930313233343536\n   ... ''')\n    '0'\n    >>> solution('''\n   ... 123456789101112131415161718192021222324252627282930313233343536\n   ... ''')\n    '1'\n    >>> solution('''\n   ... 123456789101112131415161718192021222324252627282930313233343536\n   ... ''')\n    '2'\n    >>> solution('''\n   ... 123456789101112131415161718192021222324252627282930313233343536\n   ... ''')\n    '3'\n    >>> solution('''\n   ... 123456789101112131415161718192021222324252627282930313233343536\n   ... ''')\n    '4'\n    >>> solution('''\n   ... 123456789101112131415161718192021222324252627282930313233343536\n   ... ''')\n    '5'\n    >>> solution('''\n   ... 123456789101112131415161718192021222324252627282930313233343536\n   ... ''')\n    '6'\n    >>> solution('''\n   ... 123456789101112131415161718192021222324252627282930313233343536\n   ... ''')\n    '7'\n    >>> solution('''\n   ... 123456789101112131415161718192021222324252627282930313233343536\n   ... ''')\n    '8'\n    >>> solution('''\n   ... 123456789101112131415161718192021222324252627282930313233343536\n   ... ''')\n    '9'\n    >>> solution('''\n   ... 123456789101112131415161718192021222324252627282930313233343536\n   ... ''')\n    '0'\n    >>> solution('''\n   ... 123456789101112131415161718192021222324252627282930313233343536\n   ... ''')\n    '1'\n    >>> solution('''\n   ... 123456789101112131415161718192021222324252627282930313233343536\n   ... ''')\n    '2'\n    >>> solution('''\n   ... 123456789101112131415161718192021222324252627282930313233343536\n   ... ''')\n    '3'\n    >>> solution('''\n   ... 123456789101112131415161718192021222324252627282930313233343536\n   ... ''')\n    '4'\n    >>> solution('''\n   ... 123456789101112131415161718192021222324252627282930313233343536\n   ... ''')\n    '5'\n    >>> solution('''\n   ... 123456789101112131415161718192021222324252627282930313233343536\n   ... ''')\n    '6'\n    >>> solution('''\n   ... 123456789101112131415161718192021222324252627282930313233343536\n   ... ''')\n    '7'\n    >>> solution('''\n   ... 123456789101112131415161718192021222324252627282930313233343536\n   ... ''')\n    '8'\n    >>> solution('''\n   ... 123456789101112131415161718192021222324252627282930313233343536\n   ... ''')\n    '9'\n    >>> solution('''\n   ... 123456789101112131415161718192021222324252627282930313233343536\n   ... ''')\n    '0'\n    >>> solution('''\n   ... 123456789101112131415161718192021222324252627282930313233343536\n   ... ''')\n    '1'\n    >>> solution('''\n   ... 123456789101112131415161718192021222324252627282930313233343536\n   ... ''')\n    '2'\n    >>> solution('''\n   ... 123456789101112131415161718192021222324252627282930313233343536\n   ... ''')\n    '3'\n    >>> solution('''\n   ... 123456789101112131415161718192021222324252627282930313233343536\n   ... ''')\n    '4'\n    >>> solution('''\n   ... 123456789101112131415161718192021222324252627282930313233343536\n   ... ''')\n    '5'\n    >>> solution('''\n   ... 123456789101112131415161718192021222324252627282930313233343536\n   ... ''')\n    '6'\n    >>> solution('''\n   ... 123456789101112131415161718192021222324252627282930313233343536\n   ... ''')\n    '7'\n    >>> solution('''"
    },
    {
        "number": 177,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def find(x: int) -> str:\n        if x == 0:\n            return '1'\n        elif x % 2 == 1:\n            return str(find(int(x / 2)) + '1')\n        else:\n            return str(find(int(x / 2)))\n\n    return find(int(stdin))\n"
    },
    {
        "number": 177,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution of the problem.\n    \"\"\"\n    k = int(stdin)\n    if k == 0:\n        print('1')\n    else:\n        for i in range(k):\n            n = str(i + 1)\n            print(n[-1])\n"
    },
    {
        "number": 177,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(''.join(map(str, map(int, list(stdin))))) % 10)\n"
    },
    {
        "number": 178,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num = len(stdin) % 2\n    if num == 1:\n        print(\"NO\")\n        return\n    s = [i for i in stdin]\n    for i in range(1, num):\n        if i % 2 == 0:\n            s[i] = s[i - 1]\n        else:\n            s[i] = stdin[i - 1]\n    print(\"YES\")\n    print(*s)\n"
    },
    {
        "number": 178,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.replace('8', '0')\n    s = s[1:n]\n    if len(s) == 11:\n        if isPhoneNumber(s):\n            return 'YES'\n    return 'NO'\n\n\ndef"
    },
    {
        "number": 178,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nn: int = int(input())\ns: str = input()\n\nprint(\"YES\" if n % 2 == 0 and all(c == '8' for c in s) else \"NO\")\n\n\ndef"
    },
    {
        "number": 178,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    import string\n    n = len(stdin)\n    if n % 2 == 0 or n < 5 or n > 9:\n        return \"NO\"\n    elif n == 9 and stdin[0] == \"0\":\n        return \"NO\"\n    elif n == 10 and stdin[0]!= \"0\":\n        return \"NO\"\n    elif n == 12 and stdin[0] == \"0\":\n        return \"YES\"\n    elif n == 14 and stdin[0]!= \"0\":\n        return \"YES\"\n\n    string_as_num = stdin\n    string_as_num = str(string_as_num)\n    to_search = string.digits\n    string_as_num = \"\".join([i for i in string_as_num if i in to_search])\n    # print(string_as_num)\n    if len(string_as_num) > 10 and string_as_num[0] == \"0\":\n        return \"NO\"\n    if len(string_as_num) == 11:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 178,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin\n    #string = \"8380011223344\"\n    while True:\n        print(string)\n        if len(string) <= 11:\n            return \"NO\"\n        string = string.replace(string[0], '', 1)\n        string = string.replace(string[-1], '', 1)\n        string = string.replace(string[-1], '', 1)\n        string = string.replace(string[0], '', 1)\n        string = string.replace(string[0], '', 1)\n        string = string.replace(string[0], '', 1)\n        string = string.replace(string[0], '', 1)\n        string = string.replace(string[0], '', 1)\n        string = string.replace(string[0], '', 1)\n        string = string.replace(string[0], '', 1)\n        string = string.replace(string[0], '', 1)\n        if len(string) == 11:\n            return \"YES\"\nsolution(input())"
    },
    {
        "number": 178,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    if len(stdin) % 2 == 1:\n        return \"NO\"\n    str_ = stdin[0::2]\n    for char in str_:\n        if int(char) < 7:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 178,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    str_in = stdin\n    str_in = str_in.strip()\n    str_in = str_in.split()\n    str_in = int(str_in[0])\n    str_in = str_in + 1\n    str_in = ''.join(str_in)\n    str_in = str_in + str_in\n\n    flag = 0\n    if(str_in.count('1')==0):\n        flag = 1\n    elif(str_in.count('1')==1 and str_in[0]=='1'):\n        flag = 1\n    elif(str_in.count('1')==1 and str_in[0]!='1'):\n        flag = 1\n    else:\n        flag = 0\n\n    if(flag==0):\n        return \"YES\"\n    else:\n        return \"NO\"\n\nsolution(\"13\")\nsolution(\"15\")\n\n\"\"\"\n\ndef"
    },
    {
        "number": 178,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def get_n(n):\n        if n % 2 == 0:\n            return n // 2\n        else:\n            return n // 2 + 1\n    n = int(stdin)\n    if n < 11:\n        return 'NO'\n    s = stdin\n    if len(s) % 2 == 1:\n        s = s[:len(s) - 1]\n    s = s.replace('0', '')\n    i = get_n(len(s))\n    while i > 0:\n        if s.find('8') == -1:\n            return 'NO'\n        else:\n            s = s.replace('8', '')\n            i -= 1\n    if i!= 0:\n        return 'NO'\n    return 'YES'"
    },
    {
        "number": 178,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lst = list(map(int, stdin.strip().split()))\n    if len(lst) % 2 == 1:\n        lst = lst + [0]\n    n = len(lst)\n    if n == 11:\n        if max(lst) == 0 and sum(lst[:5]) == sum(lst[5:]):\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        return \"NO\""
    },
    {
        "number": 178,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    for i in range(n):\n        if i % 2 == 0:\n            s = s.replace(str(i), str(i + 1))\n    return s"
    },
    {
        "number": 179,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x, pos = int(stdin.split()[0]), int(stdin.split()[1]), int(stdin.split()[2])\n    permutations = n * (n - 1) / 2\n    return str(permutations)\n"
    },
    {
        "number": 179,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, x, pos = int(stdin.split()[0]), int(stdin.split()[1]), int(stdin.split()[2])\n    result = 0\n    for i in range(1, n + 1):\n        if (x > i) and (pos < n - i + 1):\n            result += 1\n        if (i > x) and (pos < n - i + 1):\n            result += 1\n    return str(int(result / 10 ** 9 + 7))\n\nprint(solution(input()))"
    },
    {
        "number": 179,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, x, pos = int(stdin.split()[0]), int(stdin.split()[1]), int(stdin.split()[2])\n    res = 0\n    for i in range(1, n + 1):\n        res += bin(i).count(\"1\")\n    for i in range(n - x + 1):\n        res -= 2 * bin(i).count(\"1\")\n        res -= bin(i + x - 1).count(\"1\")\n    print(res)\n    return\n    return\n\nsolution(\"4 1 2\")\n\n\ndef"
    },
    {
        "number": 179,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    x = (num - 1) // 2\n    cnt = 0\n    while num:\n        cnt += num\n        num = num // 2\n        if (x + 1) % num == 0:\n            return str(cnt)\n        x = (x + 1) // 2"
    },
    {
        "number": 179,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n,x,pos=int(stdin.split()[0]),int(stdin.split()[1]),int(stdin.split()[2])\n    #print(n,x,pos)\n    count = 0\n    permu = permutations(range(1,n+1))\n    #print(permu)\n    for i in permu:\n        if x in i:\n            index = i.index(x)\n            if index == pos:\n                count += 1\n            else:\n                if pos - index > index - pos:\n                    count += i[index + 1:].count(x)\n                else:\n                    count += i[:index].count(x)\n    return str(count%1000000000)\n"
    },
    {
        "number": 179,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def permutations(n: int, x: int, p: int):\n        if p == n:\n            print(n)\n            return\n\n        for i in range(1, n + 1):\n            if i == p:\n                continue\n\n            if n!= 0:\n                permutations(n - 1, x, p + 1)\n            else:\n                permutations(n - 1, x, p + 1)\n\n    n = int(stdin.split()[0])\n    x = int(stdin.split()[1])\n    p = int(stdin.split()[2])\n\n    permutations(n, x, p)\n    return\n\n\nsolution(\"4 1 2\\n\")\n\nsolution(\"123 42 24\\n\")"
    },
    {
        "number": 179,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, x, pos = list(map(int, stdin.split()))\n    p = 1\n    for i in range(n, 0, -1):\n        p *= i\n    ans = 0\n    for i in range(n):\n        p //= n\n        if x == pos + i:\n            ans += p\n    return str(ans % (10 ** 9 + 7))\n"
    },
    {
        "number": 179,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, x, pos = map(int, stdin.split())\n    s = [i for i in range(1, n + 1)]\n    cnt = 0\n    for i in range(len(s)):\n        if x == s[i]:\n            if pos == i:\n                cnt += 1\n            else:\n                continue\n        else:\n            p = binary_search(s, x, 0, i - 1)\n            if p!= -1:\n                cnt += p + 1\n            else:\n                continue\n    return str(cnt)\n\n\ndef"
    },
    {
        "number": 179,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, x, pos = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    return str(len(list(filter(lambda x: BinarySearch(a, x), permutations(range(1, n+1), n)))) % (10**9 + 7))\n\ndef"
    },
    {
        "number": 179,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = int(stdin)\n    pos = int(stdin)\n    ans = 0\n\n    for i in range(1, n + 1):\n        if n % i == 0:\n            ans += i\n    if n == x:\n        if pos == 1:\n            return ans % (10 ** 9 + 7)\n        else:\n            return ans // pos\n    else:\n        return ans\nprint(solution(input()))\n"
    },
    {
        "number": 180,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    try:\n        if stdin == stdin.lower():\n            print(stdin.replace('*', 'a').replace('?', 'b').replace('a', 'b'))\n        else:\n            print(\"Impossible\")\n    except:\n        print(\"Impossible\")\n"
    },
    {
        "number": 180,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    l = len(s)\n    if l == 0:\n        return \"Impossible\"\n    if l < 2:\n        return \"Impossible\"\n    if l >= 2 and l <= 20:\n        if l == 2 and s == \"?a\":\n            return \"Impossible\"\n        if l == 3 and s == \"?a*\":\n            return \"Impossible\"\n        if l == 4 and s == \"?a**\":\n            return \"Impossible\"\n        if l == 5 and s == \"?a*a*a*\":\n            return \"Impossible\"\n        if l == 6 and s == \"?a*a*a**\":\n            return \"Impossible\"\n        if l == 7 and s == \"?a*a*a**a\":\n            return \"Impossible\"\n        if l == 8 and s == \"?a*a*a**a*a\":\n            return \"Impossible\"\n        if l == 9 and s == \"?a*a*a**a*a*a\":\n            return \"Impossible\"\n        if l == 10 and s == \"?a*a*a**a*a*a*a*a\":\n            return \"Impossible\"\n        if l == 11 and s == \"?a*a*a**a*a*a*a*a*a*a\":\n            return \"Impossible\"\n        if l == 12 and s == \"?a*a*a**a*a*a*a*a*a*a*a*a*a\":\n            return \"Impossible\"\n        if l == 13 and s == \"?a*a*a**a*a*a*a*a*a*a*a*a*a*a*a*a*a\":\n            return \"Impossible\"\n        if l == 14 and s == \"?a*a*a**a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a\":\n            return \"Impossible\"\n        if l == 15 and s == \"?a*a*a**a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a\":\n            return \"Impossible\"\n        if l == 16 and s == \"?a*a*a**a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a\":\n            return \"Impossible\"\n        if l == 17 and s == \"?a*a*a**a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a\":\n            return \"Impossible\"\n        if l == 18 and s == \"?a*a*a**a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a\":\n            return \"Impossible\"\n        if l == 19 and s == \"?a*a*a**a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a\":\n            return \"Impossible\"\n        if l == 20 and s == \"?a*a*a**a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a*a\":\n            return \"Impossible\"\n\n\n        return s"
    },
    {
        "number": 180,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Ejercicio 1\"\"\"\n    l = len(stdin)\n    k = int(stdin[0])\n    if k > l:\n        return 'Impossible'\n    if l > k and stdin[1] == '?':\n        return 'Impossible'\n    p = 0\n    i = 0\n    string = stdin[:]\n    while p < l:\n        if string[p] == '?':\n            if i >= k:\n                string = string[:p] + string[p + 1:]\n            else:\n                string = string[:p] + 'a' + string[p + 1:]\n                i += 1\n        p += 1\n    return string\n"
    },
    {
        "number": 180,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = int(input())\n    k = int(input())\n    s = list(s)\n    v = ['*', '?']\n    ls = len(s)\n    if k < ls:\n        if s[k] in v:\n            s = s[:k]\n            s = ''.join(s)\n            if len(s) == n:\n                return s\n        if k == 0:\n            if len(s) == n:\n                return s\n        if k!= 0:\n            if s[k-1] == '*':\n                s = s[:k]\n                s = ''.join(s)\n                if len(s) == n:\n                    return s\n    return 'Impossible'\n\nprint(solution(input()))\n"
    },
    {
        "number": 180,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    st = stdin\n    if (n < 3):\n        return \"Impossible\"\n    l = 0\n    while (l < n):\n        l = st.find(\"?\", l)\n        if (l == -1):\n            break\n        st = st[:l] + st[l + 1:]\n    while (l < n):\n        l = st.rfind(\"?\", l)\n        if (l == -1):\n            break\n        st = st[:l] + st[l + 1:]\n    l = 0\n    while (l < n):\n        l = st.find(\"*\", l)\n        if (l == -1):\n            break\n        st = st[:l] + st[l + 1:]\n    while (l < n):\n        l = st.rfind(\"*\", l)\n        if (l == -1):\n            break\n        st = st[:l] + st[l + 1:]\n    if (len(st) == 0):\n        return \"Impossible\"\n    return st"
    },
    {
        "number": 180,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin.strip()\n"
    },
    {
        "number": 180,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    l = len(s)\n    k = int(stdin.split()[1])\n    for j in range(l):\n        if j == 0:\n            if s[j] == '*':\n                s = s[1:]\n                continue\n        elif j == l - 1:\n            if s[j] == '*':\n                s = s[:-1]\n                continue\n        elif s[j] == '*':\n            if s[j - 1] == '?':\n                s = s[:-1]\n                continue\n        elif s[j] == '?':\n            if s[j + 1] == '?':\n                s = s[:-2]\n                continue\n        else:\n            if s[j - 1] == '?':\n                if s[j + 1] == '?' or s[j + 1] == '*':\n                    s = s[:-1]\n                    continue\n            elif s[j + 1] == '?':\n                if s[j - 1] == '?' or s[j - 1] == '*':\n                    s = s[:-2]\n                    continue\n            else:\n                if s[j - 1] == '*':\n                    s = s[:-1]\n                    continue\n                if s[j + 1] == '*':\n                    s = s[:-2]\n                    continue\n    return s\n"
    },
    {
        "number": 180,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    k = int(input())\n    if k > 200:\n        print(\"Impossible\")\n        return\n    elif k == 200:\n        print(s[:k])\n        return\n    else:\n        res = []\n        def removeCones(s, start):\n            while s and s[0] == \"*\":\n                if s.index(\"*\") + 1 == len(s) - 1:\n                    return\n                s = s[s.index(\"*\") + 2:]\n                start += 1\n            return s\n        def repeatCones(s, start, i):\n            for j in range(i):\n                s = s[:start] + \"*\" + s[start+1:]\n                start += 1\n            return s\n        def removeSnowflakes(s, start):\n            while s and s[0] == \"?\":\n                if s.index(\"?\") + 1 == len(s) - 1:\n                    return\n                s = s[s.index(\"?\") + 2:]\n                start += 1\n            return s\n        def repeatSnowflakes(s, start, i):\n            for j in range(i):\n                s = s[:start] + \"?\" + s[start+1:]\n                start += 1\n            return s\n        while len(s) > k:\n            if s[:k].count(\"*\") == s[:k].count(\"?\"):\n                return \"\".join(repeatCones(s[k:], 0, len(s[:k])))\n            elif s[:k].count(\"*\") > s[:k].count(\"?\"):\n                return \"\".join(removeCones(s[k:], 0))\n            else:\n                if s[:k].count(\"*\") == s[:k].count(\"?\"):\n                    return \"\".join(repeatCones(s[k:], 0, len(s[:k])))\n                else:\n                    return \"\".join(repeatSnowflakes(s[k:], 0, len(s[:k])))"
    },
    {
        "number": 180,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    message = s[0]\n    k = int(s[1])\n    decoded = []\n    for index in range(len(message)):\n        if message[index] == '?':\n            decoded.append('a')\n            decoded.append('a')\n        elif message[index] == '*':\n            decoded.append('a')\n            decoded.append('a')\n            decoded.append('a')\n        else:\n            decoded.append(message[index])\n    if len(decoded)!= k:\n        return 'Impossible'\n    return ''.join(decoded)\n"
    },
    {
        "number": 180,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nprint(solution(input()))\n"
    },
    {
        "number": 181,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lst = list(map(int, stdin.split()))\n    turns = 0\n    diff = 0\n    for i in range(len(lst)-1):\n        diff = (lst[i+1]-lst[i])/90\n        turns += diff\n    return(int(turns))\n"
    },
    {
        "number": 181,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    angle = int(stdin[0])\n    return str(rotate_image(angle))\n\n\ndef"
    },
    {
        "number": 181,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def clockwise(degrees):\n        return degrees + 90\n\n    def counterclockwise(degrees):\n        return degrees - 90\n\n    def minus_90(degrees):\n        return degrees - 270\n\n    def plus_90(degrees):\n        return degrees + 90\n    \n    def array(string):\n        string = string.split(\" \")\n        return [int(x) for x in string]\n    \n    def top(string):\n        string = string.split(\"\\n\")\n        return string[0]\n    \n    degrees = int(stdin)\n    gods = []\n    count = 1\n    \n    while degrees > 0:\n        count += 1\n        degrees = degrees - count * 90\n        if degrees < 0:\n            degrees = degrees + count * 90\n            degrees = degrees + count * 90\n            count = count - 1\n    \n    return count"
    },
    {
        "number": 181,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x: int = int(stdin)\n    min_turn: int = x\n    while x >= 90:\n        x -= 90\n        min_turn = min(min_turn, x)\n    return str(min_turn)"
    },
    {
        "number": 181,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"0\" if stdin == \"\" else str(min(map(int, stdin.split())))\n"
    },
    {
        "number": 181,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(min(map(lambda x: x if abs(x) <= 90 else abs(x) - 180,map(int,stdin.split('\\n')))))\n"
    },
    {
        "number": 181,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def get_rotation_angle(image):\n        return image.shape[0] // 2\n\n    def is_rotated(image):\n        if image.shape[0]!= image.shape[1]:\n            return False\n        if image.shape[0] == 1:\n            return True\n        \n        diff = image[1:, 1] - image[: image.shape[0] - 1, 1]\n        \n        return np.sum(diff * diff) < 1e-6\n\n    def is_vertical(image):\n        return np.sum(image.reshape(image.shape[0] * image.shape[1], 1) * image.reshape(1, image.shape[0] * image.shape[1])) < 1e-6\n\n    def get_image_angle(image):\n        return np.arctan(image.shape[0] / image.shape[1])\n\n    def flip_image(image):\n        return np.flip(image, axis=1)\n\n    def rotate_image(image, rotation_angle):\n        rotated_image = np.rot90(image, -rotation_angle // 90)\n        if rotation_angle % 90!= 0:\n            rotated_image = np.rot90(rotated_image, -rotation_angle % 90 // 90)\n        return rotated_image\n\n    def get_angle_by_image(image):\n        rotation_angle = get_rotation_angle(image)\n        if is_rotated(image):\n            if rotation_angle % 90 == 0:\n                return 0\n            elif rotation_angle % 90 == 90:\n                return -90\n            elif rotation_angle % 90 == 180:\n                return -180\n            else:\n                return -270\n        else:\n            return get_image_angle(image)\n\n    def get_rotation_from_angle(angle):\n        return int(np.round((angle + 90) / 90))\n\n    def get_angle_by_image_and_rotation(image, rotation_angle):\n        if rotation_angle % 90!= 0:\n            return get_angle_by_image(rotate_image(image, rotation_angle))\n        else:\n            return get_image_angle(image)\n\n    image = cv2.imread(stdin)\n\n    rotation_angle = get_rotation_angle(image)\n    print(rotation_angle)\n    flipped_image = flip_image(image)\n    rotated_image = rotate_image(flipped_image, rotation_angle)\n    rotated_angle = get_angle_by_image(rotated_image)\n\n    print(rotated_angle)\n    flipped_rotated_angle = get_angle_by_image_and_rotation(flipped_image, rotated_angle)\n    flipped_rotated_angle_rotation_angle = get_rotation_from_angle(flipped_rotated_angle)\n    rotated_rotation_angle = get_rotation_from_angle(rotated_angle)\n    print(flipped_rotated_angle_rotation_angle, rotated_rotation_angle)\n\n    if rotated_rotation_angle == flipped_rotated_angle_rotation_angle:\n        return rotated_rotation_angle\n    else:\n        if rotated_rotation_angle > flipped_rotated_angle_rotation_angle:\n            return rotated_rotation_angle - flipped_rotated_angle_rotation_angle\n        else:\n            return rotated_rotation_angle + flipped_rotated_angle_rotation_angle\n"
    },
    {
        "number": 181,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_original(stdin))\n\ndef"
    },
    {
        "number": 181,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    inp = stdin.strip().split('\\n')\n    inp = int(inp[0])\n    return str(solution1(inp))\n\ndef"
    },
    {
        "number": 181,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    for x in range(int(stdin)):\n        if x%90 == 0:\n            continue\n        if x%90 == 1:\n            print(x)\n            return x\n        if x%90 == 2:\n            print(x)\n            return x\n        if x%90 == 3:\n            print(x)\n            return x\nfor i in range(int(input())):\n    solution(input())\n"
    },
    {
        "number": 182,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = list(map(int, stdin.strip().split()))\n    spheres = 0\n    while True:\n        if (x + y + z) % 3 == 0:\n            spheres += 1\n            if x == y or x == z or y == z:\n                spheres += 1\n            break\n        x, y, z = y, z, x\n    return \"Yes\" if spheres >= x else \"No\"\n\nprint(solution(input()))"
    },
    {
        "number": 182,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    _, a, b, c = map(int, stdin.split())\n    if a + b + c == 0:\n        return \"No\"\n    elif a + b + c == 1:\n        return \"Yes\"\n    else:\n        return solution(f\"{a + b} {a + c} {b + c}\")"
    },
    {
        "number": 182,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    num_spheres = [int(x) for x in stdin.split()]\n    num_spheres = num_spheres[0:3]\n    num_to_get = int(stdin.split()[3])\n    return 'Yes' if sum(num_spheres) >= num_to_get else 'No'"
    },
    {
        "number": 182,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    x, y, z = map(int, input().split())\n    a_new, b_new, c_new = a, b, c\n    result = \"Yes\"\n    while x > 0 and y > 0 and z > 0:\n        if a_new == 1:\n            if b_new == 1:\n                if c_new == 1:\n                    break\n                else:\n                    a_new = 0\n            else:\n                b_new = 0\n        else:\n            a_new = 0\n        result = \"No\"\n        x -= 1\n        y -= 1\n        z -= 1\n    return result\n"
    },
    {
        "number": 182,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n_blue, n_violet, n_orange = map(int, stdin.split())\n    if n_blue == n_violet == n_orange == 0:\n        return 'No'\n\n    for i in range(1, n_blue + 1):\n        for j in range(1, n_violet + 1):\n            for k in range(1, n_orange + 1):\n                if i == j or j == k or i == k:\n                    continue\n                else:\n                    if i + j + k == n_blue + n_violet + n_orange:\n                        print('Yes')\n                        return\n    print('No')\n\n\nsolution(\"4 4 0\")\nsolution(\"5 6 1\")\nsolution(\"3 3 3\")\n"
    },
    {
        "number": 182,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    # x, y, z = map(int, stdin.split())\n    x = 1\n    y = 1\n    z = 1\n    if x > a + 1 or y > b + 1 or z > c + 1:\n        return 'No'\n    else:\n        return 'Yes'\n"
    },
    {
        "number": 182,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    x, y, z = map(int, stdin.split())\n    if a >= x and b >= y and c >= z:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 182,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    x, y, z = map(int, stdin.split())\n    result = []\n    if (x == y == z) or (x == y) or (x == z) or (y == z):\n        result.append(\"Yes\")\n    else:\n        result.append(\"No\")\n    return \"\\n\".join(result)"
    },
    {
        "number": 182,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin_as_list = stdin.split()\n    first = stdin_as_list[1]\n    second = stdin_as_list[2]\n    return \"Yes\" if first == second else \"No\""
    },
    {
        "number": 182,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    num_spheres = list(map(int, stdin.split()))\n    if (num_spheres[0] == num_spheres[1] and num_spheres[2] == num_spheres[3]):\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 183,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = map(int, stdin.split())\n    digits = [int(x) for x in str(n)]\n    remainder = []\n    for i in range(0, len(digits)):\n        for j in range(i+1, len(digits)):\n            num = digits[i] * digits[j]\n            if num <= k:\n                if num % m == 0:\n                    remainder.append(num)\n    return len(remainder)\n\ndef"
    },
    {
        "number": 183,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n'''\nn, k, m = map(int, input().split())\n"
    },
    {
        "number": 183,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 183,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = map(int, stdin.split())\n    number_list = []\n    for i in range(1, n + 1):\n        if i <= m:\n            number_list.append(i)\n        else:\n            remainder = i % k\n            if remainder == 0:\n                number_list.append(i)\n    return len(number_list) % m\n\nprint(solution(input()))"
    },
    {
        "number": 183,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = list(map(int, stdin.split()))\n    return str(sum(((i + 1) * (n - i + 1) // 2) % m for i in range(k) if (n - i + 1) % (i + 1)))\n"
    },
    {
        "number": 183,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    import math\n    n, k, m = map(int, stdin.split())\n    ans = math.factorial(k) % m\n    ans = str(ans)\n    for i in range(1, n - 1):\n        ans = ans + str(int(stdin) % m)\n    return ans"
    },
    {
        "number": 183,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = map(int, stdin.split())\n    return str(sum(int(x) % k for x in str(n)) % m)\n\ndef"
    },
    {
        "number": 183,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = map(int, stdin.split())\n    l = 1\n    while 1:\n        if n <= 0:\n            print(l)\n            break\n        if m < 1:\n            print(0)\n            break\n        if n == 1:\n            l += (1 + (k * l) % m) // k\n            break\n        a = 1 + (k * l) % m\n        l = (1 + (k * l) % m) // k\n        print(a)\n"
    },
    {
        "number": 183,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    [n, k, m] = list(map(int, stdin.split()))\n    def test(number):\n        s = str(number)\n        if len(s) <= n:\n            if s[0] == '0' and len(s) == n:\n                return False\n            return True\n        s = s[1:]\n        if len(s) <= n:\n            return True\n        return False\n    def test2(number):\n        s = str(number)\n        if len(s) < k:\n            return False\n        for i in range(len(s)):\n            if i % k == 0 and s[i] == '0':\n                return False\n        if s[0] == '0':\n            return False\n        return True\n    def mod_m(number, m):\n        rem = 0\n        for i in range(len(str(number))):\n            rem = (rem + (ord(str(number)[i]) - ord('0')) * pow(10, (len(str(number)) - i - 1))) % m\n        return rem\n    return (mod_m(n, m) - mod_m(k, m)) % m\n\nprint(solution(input()))\n"
    },
    {
        "number": 183,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = list(map(int, stdin.split(' ')))\n    # generate all numbers from 0 to m\n    numbers = range(m + 1)\n    # find the number of non-zero numbers after removing k digits\n    ans = len([x for x in numbers if x % k == 0])\n    return str(ans % m)"
    },
    {
        "number": 184,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l, r, a = list(map(int, stdin.split()))\n    left_handers = l//2\n    right_handers = r//2\n    ambidexters = a//2\n\n    return max(left_handers, right_handers, ambidexters)\n"
    },
    {
        "number": 184,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    l, r, a = map(int, stdin.split())\n    return str(l // 2 if l % 2 else l // 2 + 1)\n"
    },
    {
        "number": 184,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    left_players = stdin.split()[0]\n    right_players = stdin.split()[1]\n    ambidexter = stdin.split()[2]\n    left_players_hand = int(left_players) // 2\n    right_players_hand = int(right_players) // 2\n    ambidexter_hand = int(ambidexter) // 2\n    left_players = left_players.split(\" \")\n    right_players = right_players.split(\" \")\n    ambidexter = ambidexter.split(\" \")\n    left_players = list(map(lambda x: int(x), left_players))\n    right_players = list(map(lambda x: int(x), right_players))\n    ambidexter = list(map(lambda x: int(x), ambidexter))\n    total_left_players = left_players_hand + left_players\n    total_right_players = right_players_hand + right_players\n    total_ambidexter = ambidexter_hand + ambidexter\n    if left_players_hand == 0 or right_players_hand == 0 or ambidexter_hand == 0:\n        return 0\n    if total_left_players > left_players_hand:\n        total_left_players -= 1\n    if total_right_players > right_players_hand:\n        total_right_players -= 1\n    if total_ambidexter > ambidexter_hand:\n        total_ambidexter -= 1\n    return left_players_hand + right_players_hand + ambidexter_hand + total_left_players + total_right_players + total_ambidexter\n"
    },
    {
        "number": 184,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    left, right, ambi = stdin.split()\n    if int(left) % 2 == 0:\n        l_hand = int(left) / 2\n    else:\n        l_hand = int(left) // 2 + 1\n    if int(right) % 2 == 0:\n        r_hand = int(right) / 2\n    else:\n        r_hand = int(right) // 2 + 1\n    ambi = int(ambi)\n    # ambi = int(ambi) * 2\n    # l_hand = int(left) // 2 + 1\n    # r_hand = int(right) // 2 + 1\n    if l_hand + r_hand + ambi == 0:\n        return '0'\n    elif l_hand + r_hand + ambi == 1:\n        return '1'\n    elif l_hand + r_hand + ambi == 2:\n        return '2'\n    elif l_hand + r_hand + ambi == 3:\n        return '3'\n    elif l_hand + r_hand + ambi == 4:\n        return '4'\n    elif l_hand + r_hand + ambi == 5:\n        return '5'\n    elif l_hand + r_hand + ambi == 6:\n        return '6'\n    elif l_hand + r_hand + ambi == 7:\n        return '7'\n    elif l_hand + r_hand + ambi == 8:\n        return '8'\n    elif l_hand + r_hand + ambi == 9:\n        return '9'\n    elif l_hand + r_hand + ambi == 10:\n        return '10'\n    elif l_hand + r_hand + ambi == 11:\n        return '11'\n    elif l_hand + r_hand + ambi == 12:\n        return '12'\n    elif l_hand + r_hand + ambi == 13:\n        return '13'\n    elif l_hand + r_hand + ambi == 14:\n        return '14'\n    elif l_hand + r_hand + ambi == 15:\n        return '15'\n    elif l_hand + r_hand + ambi == 16:\n        return '16'\n    elif l_hand + r_hand + ambi == 17:\n        return '17'\n    elif l_hand + r_hand + ambi == 18:\n        return '18'\n    elif l_hand + r_hand + ambi == 19:\n        return '19'\n    elif l_hand + r_hand + ambi == 20:\n        return '20'\n    elif l_hand + r_hand + ambi == 21:\n        return '21'\n    elif l_hand + r_hand + ambi == 22:\n        return '22'\n    elif l_hand + r_hand + ambi == 23:\n        return '23'\n    elif l_hand + r_hand + ambi == 24:\n        return '24'\n    elif l_hand + r_hand + ambi == 25:\n        return '25'\n    elif l_hand + r_hand + ambi == 26:\n        return '26'\n    elif l_hand + r_hand + ambi == 27:\n        return '27'\n    elif l_hand + r_hand + ambi == 28:\n        return '28'\n    elif l_hand + r_hand + ambi == 29:\n        return '29'\n    elif l_hand + r_hand + ambi == 30:\n        return '30'\n    elif l_hand + r_hand + ambi == 31:\n        return '31'\n    elif l_hand + r_hand + ambi == 32:\n        return '32'\n    elif l_hand + r_hand + ambi == 33:\n        return '33'\n    elif l_hand + r_hand + ambi == 34:\n        return '34'\n    elif l_hand + r_hand + ambi == 35:\n        return '35'\n    elif l_hand + r_hand + ambi == 36:\n        return '36'\n    elif l_hand + r_hand + ambi == 37:\n        return '37'\n    elif l_hand + r_hand + ambi == 38:\n        return '38'\n    elif l_hand + r_hand + ambi == 39:\n        return '39'\n    elif l_hand + r_hand + ambi == 40:\n        return '40'\n    elif l_hand + r_hand + ambi == 41:\n        return '41'\n    elif l_hand + r_hand + ambi == 42:\n        return '42'\n    elif l_hand + r_hand + ambi == 43:\n        return '43'\n    elif l_hand + r_hand + ambi == 44:\n        return '44'\n    elif l_hand + r_hand + ambi == 45:\n        return '45'\n    elif l_hand + r_hand + ambi == 46:\n        return '46'\n    elif l_hand + r_hand + ambi == 47:\n        return '47'\n    elif l_hand + r_hand + ambi == 48:\n        return '48'\n    elif l_hand + r_hand + ambi == 49:\n        return '49'\n    elif l_hand + r_hand + ambi == 50:\n        return '50'\n    elif l_hand + r_hand + ambi == 51:\n        return '51'\n    elif l_hand + r_hand + ambi == 52:\n        return '52'\n    elif l_hand + r_hand + ambi == 53:\n        return '53'\n    elif l_hand + r_hand + ambi == 54:\n        return '54'\n    elif l_hand + r_hand + ambi == 55:\n        return '55'\n    elif l_hand + r_hand + ambi == 56:\n        return '56'\n    elif l_hand + r_hand + ambi == 57:\n        return '57'\n    elif l_hand + r_hand + ambi == 58:\n        return '58'\n    elif l_hand + r_hand + ambi == 59:\n        return '59'\n    elif l_hand + r_hand + ambi == 60:\n        return '60'\n    elif l_hand + r_hand + ambi == 61:\n        return '61'\n    elif l_hand + r_hand + ambi == 62:\n        return '62'\n    elif l_hand + r_hand + ambi == 63:\n        return"
    },
    {
        "number": 184,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    l, r, a = [int(x) for x in stdin.split()]\n    return str(int(l//2) + int(r//2) + int(a//2))\n\ndef"
    },
    {
        "number": 184,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    l, r, a = map(int, stdin.split())\n    #print(l, r, a)\n    if a % 2 == 0:\n        return a - 2\n    elif (a // 2) % 2 == 0:\n        return a // 2\n    else:\n        return 0\n    "
    },
    {
        "number": 184,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    l, r, a = map(int, stdin.split())\n    if a & 1:\n        return a + r\n    else:\n        return a + l\n"
    },
    {
        "number": 184,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    l, r, a = map(int, stdin.split())\n    if l + r + a == 0 or a == 0:\n        return '0'\n    if a % 2 == 0 and a >= l:\n        return l\n    if a % 2 == 1 and a >= r:\n        return r\n    return l + r\n"
    },
    {
        "number": 184,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    l, r, a = map(int, stdin.split())\n    if l == 0 or r == 0 or a == 0:\n        return '0'\n    if l == r:\n        if l % 2 == 0:\n            return '0'\n        return '1'\n    if l == a:\n        if a % 2 == 0:\n            return '1'\n        return '0'\n    if a == r:\n        if r % 2 == 0:\n            return '1'\n        return '0'\n    return '1'\n    \n"
    },
    {
        "number": 184,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    l, r, a = map(int, stdin.split())\n    if a % 2 == 1:\n        #one player should play with right hand\n        if r % 2 == 1:\n            return -1\n        else:\n            return l + r\n    else:\n        #one player should play with left hand\n        if l % 2 == 1:\n            return -1\n        else:\n            return l + r\n\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 185,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    return str(6 * (N - 2))"
    },
    {
        "number": 185,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n'''"
    },
    {
        "number": 185,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(x) for x in stdin.split())\n    return str(6-int((n-1)*(n-1)/2 + k*(k+1)//2))"
    },
    {
        "number": 185,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(6)\n"
    },
    {
        "number": 185,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(6 + min(1 + n - k, n - k) * 2)"
    },
    {
        "number": 185,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(min(2 * n - k, k * (n - k)))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 185,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    arr = [int(i) for i in range(1, n+1)]\n    min_moves = 0\n    while len(arr) > 1:\n        first = arr.pop(0)\n        second = arr.pop(0)\n        if first == 0:\n            arr.append(second)\n            continue\n        if second == 0:\n            arr.append(first)\n            continue\n        arr.append(first+second)\n        arr.append(first)\n        if k == len(arr) - 1:\n            return str(min_moves)\n        min_moves += 1\n    return str(min_moves)\n"
    },
    {
        "number": 185,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(min(n + (n * (n - 1) // 2), k + 1))\n\"\"\"\n"
    },
    {
        "number": 185,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    stones = [True] * (n + 1)\n    count = 0\n    while stones[k] is True:\n        stones[k] = False\n        count += 1\n        if k!= 0:\n            k = (k - 1) // 2\n    return count\n"
    },
    {
        "number": 185,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    stones = [i for i in range(n)]\n    stack = []\n    moves = 0\n    while stones:\n        current = stones.pop()\n        stack.append(current)\n        if len(stack) == 2:\n            if stack[0]!= k:\n                break\n            moves += 2\n            if stack[1] == k:\n                moves += 1\n                break\n        else:\n            if stack[-2]!= k:\n                break\n            moves += 1\n            if stack[-1] == k:\n                moves += 1\n                break\n            if stack[-1]!= k:\n                break\n    return str(moves)\n"
    },
    {
        "number": 186,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, m = map(int, stdin.split())\n    \n    if m < 0 or n < 0:\n        return ''\n    \n    if n == 0 and m == 0:\n        return '0'\n    \n    h_2 = 0\n    h_3 = 0\n    \n    for i in range(0, n+m, 2):\n        h_2 += (i*2 + 2)\n    \n    for j in range(0, n+m, 3):\n        h_3 += (j*3 + 3)\n    \n    return max(h_2, h_3)\n\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n----------------------------------------------------------------------------------------------------------------------\n\n------------------------------------------------------------------------------------------------"
    },
    {
        "number": 186,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    blocks = [2, 3]\n    res = []\n    while m > 0:\n        for i in range(2):\n            blocks.append(blocks[i] + blocks[i+1])\n        res.append(max(blocks))\n        m -= 2\n    return max(res)\n"
    },
    {
        "number": 186,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    print(max(max(i) for i in [[j * 2 + 1 for j in range(n // 2)], [j * 3 + 1 for j in range(m // 2)]]))\n    return \"yes\" if n == 0 else \"no\"\n"
    },
    {
        "number": 186,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return max(map(lambda x: x * 4, range(1, n + 1)))"
    },
    {
        "number": 186,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 186,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(min(n, m))\n"
    },
    {
        "number": 186,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    if m == 0 or n == 0 or m + n > 1000000:\n        return '-1'\n    res = 10000000\n    for i in range(1, m + 1):\n        if i * 2 > n:\n            break\n        if i * 2 + 1 > n:\n            continue\n        res = min(res, n + m - i * 2)\n    for i in range(1, m + 1):\n        if i * 3 > n:\n            break\n        if i * 3 + 1 > n:\n            continue\n        res = min(res, n + m - i * 3)\n    return str(res)\n"
    },
    {
        "number": 186,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return max((n + m - 1) // 2, max((n * m - 2) // 3, (n * m - 4) // 2))\n\n\ndef"
    },
    {
        "number": 186,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    two = 0\n    three = 0\n    for i in range(n, m+1):\n        if i % 2 == 0:\n            two += 1\n        else:\n            three += 1\n    if two * 2 + three * 3 > m:\n        return m\n    return m - (two * 2 + three * 3)\n"
    },
    {
        "number": 186,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    m = int(stdin.split()[1])\n    if n + m <= 0:\n        raise ValueError(\"invalid value\")\n    if n + m > 1_000_000:\n        raise ValueError(\"invalid value\")\n    dp = [[0] * (m + 1) for i in range(n + 1)]\n    dp[0][0] = 0\n    for i in range(1, n + 1):\n        dp[i][0] = dp[i - 1][0] + 2 * (m * i)\n    for i in range(1, m + 1):\n        dp[0][i] = dp[0][i - 1] + 2 * (n * i)\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            dp[i][j] = max(\n                dp[i - 1][j] + 2 * (m * i),\n                dp[i][j - 1] + 2 * (n * j),\n                dp[i - 1][j - 1] + (i - 1) * (j - 1) * 4,\n            )\n    return str(dp[n][m])\n"
    },
    {
        "number": 187,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split()\n    n = int(data[0])\n    if n % 2 == 0:\n        return \"NO\"\n    l = list(range(1, n+1))\n    petya_nums = []\n    vasya_nums = []\n    for num in data:\n        if int(num) in l:\n            l.remove(int(num))\n            petya_nums.append(int(num))\n        else:\n            l.remove(int(num))\n            vasya_nums.append(int(num))\n    if len(petya_nums) > len(vasya_nums):\n        return \"YES\"\n    elif len(petya_nums) < len(vasya_nums):\n        return \"NO\"\n    else:\n        return \"YES\"\n        \n"
    },
    {
        "number": 187,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    n = int(stdin)\n    if n % 2 == 0:\n        return \"NO\"\n\n    def chr_func(x):\n        for i in range(2, x):\n            if x % i == 0:\n                return False\n        return True\n\n    def chr_func_2(x):\n        for i in range(3, x):\n            if x % i == 0:\n                return False\n        return True\n\n    for i in range(3, n + 1):\n        if chr_func(i) == False:\n            return \"NO\"\n        if chr_func_2(i) == False:\n            return \"NO\"\n    return \"YES\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 187,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2!= 0:\n        return \"NO\"\n    result = \"YES\"\n    petya = set()\n    vasya = set()\n    while len(petya)!= n:\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya.add(int(stdin))\n        petya"
    },
    {
        "number": 187,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    num_cards = int(stdin[0])\n    cards = stdin[1:]\n    even_cards = []\n    odd_cards = []\n    for card in cards:\n        if int(card) % 2 == 0:\n            even_cards.append(int(card))\n        else:\n            odd_cards.append(int(card))\n\n    if len(even_cards) < num_cards or len(odd_cards) < num_cards:\n        return 'NO'\n    else:\n        even_cards.sort()\n        odd_cards.sort()\n        even_cards = set(even_cards)\n        odd_cards = set(odd_cards)\n        even = list(even_cards)\n        odd = list(odd_cards)\n        petya_set = set(even)\n        vasya_set = set(odd)\n        intersect = petya_set.intersection(vasya_set)\n        if len(intersect) == num_cards:\n            return 'YES'\n        else:\n            return 'NO'"
    },
    {
        "number": 187,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 4\n   ... 11\n   ... 27\n   ... 27\n   ... 11\n   ... \n   ... ''')\n    'YES'\n    >>> solution('''\n   ... 2\n   ... 6\n   ... \n   ... ''')\n    'NO'\n    \"\"\"\n    n = int(stdin)\n    cards = tuple(sorted(int(x) for x in stdin.split()))\n    if len(cards) < n:\n        return 'NO'\n    cards = tuple(sorted(int(x) for x in stdin.split()))\n    petya_cards = set()\n    vasya_cards = set()\n    for card in cards:\n        if card in petya_cards:\n            petya_cards.remove(card)\n            vasya_cards.add(card)\n        else:\n            petya_cards.add(card)\n    if len(petya_cards) < len(vasya_cards):\n        return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 187,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 187,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    cards = list(map(int, stdin.split()))\n    cards = sorted(cards)\n    # print(cards)\n    start = 1\n    end = cards[-1]\n    while start <= end:\n        # print(start, end)\n        for card in cards:\n            if card % start!= 0:\n                break\n        else:\n            return 'YES'\n        start += 1\n    return 'NO'\n"
    },
    {
        "number": 187,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    # For a more detailed description of the problem, please see this URL.\n    # https://www.educative.io/courses/grokking-the-coding-interview/UJ6TScBg2Q3\n\n    # your code here\n    n = int(stdin)\n    if n % 2 == 0:\n        return \"NO\"\n\n    petya, vasya = sorted(list(map(int, stdin.split()))), sorted(list(map(int, stdin.split())), reverse=True)\n    while petya:\n        if petya[-1] == vasya[-1]:\n            petya.pop()\n            vasya.pop()\n        else:\n            break\n    if not petya:\n        return \"NO\"\n\n    petya, vasya = sorted(petya), sorted(vasya)\n    while vasya:\n        if petya[-1] == vasya[-1]:\n            petya.pop()\n            vasya.pop()\n        else:\n            break\n    if not vasya:\n        return \"NO\"\n\n    return \"YES\"\n"
    },
    {
        "number": 187,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = []\n    a = stdin.split(\"\\n\")\n    for i in range(n):\n        s.append(a[i])\n\n    if (n % 2 == 0 and (sum(map(lambda x: int(x), s)) / 2 == n)) or (n % 2!= 0 and sum(map(lambda x: int(x), s)) / 2 == n):\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 187,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2!= 0:\n        return 'NO'\n    max_number = n\n    min_number = 1\n    start_number = 2\n    while min_number <= max_number:\n        if max_number % min_number == 0:\n            start_number = min_number\n            break\n        min_number += 1\n    if start_number > max_number:\n        return 'NO'\n    # print(start_number)\n    print(start_number, max_number)\n    return 'YES'\n"
    },
    {
        "number": 188,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    groups = map(int, stdin.split())\n    for i in range(n):\n        if groups[i] > 0:\n            for j in range(i + 1, n):\n                if groups[i] - groups[j] == 0:\n                    print('YES')\n                    return\n    print('NO')\n    return"
    },
    {
        "number": 188,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split('\\n')\n    a = input[0].split()\n    k = int(a[0])\n    n = int(a[1])\n\n    b = input[1].split()\n    result = \"\"\n    for i in b:\n        if(int(i) <= 8 * n):\n            result += \"YES\"\n        else:\n            result += \"NO\"\n    return result\n\nprint(solution(input))"
    },
    {
        "number": 188,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    [n, k] = list(map(int, stdin.split()))\n\n    if n < 2 or k < 2:\n        return 'NO'\n\n    row_seats = []\n    for i in range(n):\n        row_seats.append([])\n        for j in range(8):\n            row_seats[i].append(1)\n\n    group_seats = []\n    for i in range(k):\n        group_seats.append([])\n        for j in range(8):\n            group_seats[i].append(1)\n\n    for i in range(k):\n        group_seats[i] = list(map(int, stdin.split()))[i]\n        for j in range(group_seats[i]):\n            row_seats[i*2][j] = 0\n            row_seats[i*2 + 1][j] = 0\n\n    for i in range(n - k):\n        for j in range(8):\n            row_seats[i][j] = 0\n\n    for i in range(k):\n        for j in range(8):\n            row_seats[i][j] = 0\n\n    for row in range(8):\n        if row % 2!= 0:\n            for col in range(8):\n                if row_seats[row][col] == 1:\n                    for i in range(row, 8):\n                        row_seats[i][col] = 0\n        else:\n            for col in range(8):\n                if row_seats[row][col] == 1:\n                    for i in range(row, 0, -1):\n                        row_seats[i][col] = 0\n\n    for row in range(n):\n        for col in range(8):\n            if row_seats[row][col] == 1:\n                for i in range(row, 0, -1):\n                    if row_seats[i][col] == 1:\n                        row_seats[i][col] = 0\n\n    for i in range(n):\n        for j in range(8):\n            if row_seats[i][j] == 1:\n                return 'NO'\n\n    for i in range(k):\n        for j in range(8):\n            if group_seats[i][j] == 1:\n                for i in range(i, k):\n                    group_seats[i][j] = 0\n\n    for i in range(k):\n        for j in range(8):\n            if group_seats[i][j] == 1:\n                return 'NO'\n\n    for i in range(n - k):\n        for j in range(8):\n            if group_seats[i][j] == 1:\n                return 'NO'\n\n    for i in range(k):\n        for j in range(8):\n            if group_seats[i][j] == 1:\n                for i in range(i, n):\n                    group_seats[i][j] = 0\n\n    for i in range(n):\n        for j in range(8):\n            if group_seats[i][j] == 1:\n                return 'NO'\n\n    return 'YES'\n"
    },
    {
        "number": 188,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    res = \"YES\"\n    for i in range(0, n):\n        if a[i] > 2 * k:\n            res = \"NO\"\n            break\n    for j in range(0, n):\n        if a[j] > k:\n            res = \"NO\"\n            break\n    if res == \"YES\":\n        for i in range(0, n):\n            for j in range(0, n):\n                if i!= j and a[i] + a[j] > 2 * k:\n                    res = \"NO\"\n                    break\n    return res\n"
    },
    {
        "number": 188,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    possible = True\n    \n    for i in range(n):\n        if a[i] > 8 * (i + 1):\n            possible = False\n            break\n    \n    if possible:\n        if k == 1:\n            print(\"YES\")\n        else:\n            a.sort()\n            #print(a)\n            if a[0] < (8 * (1 + (k - 1) / 2)):\n                possible = False\n            else:\n                if k % 2 == 0:\n                    if a[k // 2 - 1] > 8 * ((k - 1) // 2):\n                        possible = False\n                else:\n                    if a[k // 2 - 1] < 8 * ((k - 1) // 2):\n                        possible = False\n    \n    if possible:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n    \n"
    },
    {
        "number": 188,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    arr = list(map(int, stdin.strip().split()))\n    \n    for i in range(0, len(arr)):\n        if arr[i] % 2!= 0:\n            if i > 0 and i < k - 1:\n                for j in range(i + 1, k):\n                    if arr[j] % 2!= 0:\n                        return \"NO\"\n            else:\n                return \"NO\"\n    \n    for i in range(0, len(arr)):\n        if arr[i] % 2 == 0:\n            if i > 0 and i < k - 1:\n                for j in range(i + 1, k):\n                    if arr[j] % 2!= 0:\n                        return \"NO\"\n            else:\n                return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 188,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    if n <= 4:\n        return \"NO\"\n    a = [int(x) for x in stdin.split()]\n\n    if a[0] == max(a) and (a[0] - a[1]) + 1 < n:\n        return \"NO\"\n    for i in range(k):\n        if a[i] + a[i + 1] <= n:\n            continue\n        if a[i] + a[i + 1] == max(a):\n            if i + 1 == k - 1:\n                return \"YES\"\n            if a[i] + a[i + 1] + a[k - 1] > n:\n                return \"NO\"\n            if a[i] == max(a) and a[i + 1] + a[k - 1] == n:\n                return \"YES\"\n            for j in range(i + 2, k):\n                if a[j] + a[i + 1] + a[k - 1] > n:\n                    return \"NO\"\n                if a[j] == max(a) and a[j] + a[i + 1] == n:\n                    return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 188,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(x) for x in stdin.split())\n    lines = [int(x) for x in stdin.split()]\n\n    # checking if the sum of the lines is equal to the sum of the lines\n    if sum(lines) == sum(range(1, n + 1)):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n    return\n"
    },
    {
        "number": 188,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    rows = [list(map(int, stdin.split())) for _ in range(n)]\n    possible = True\n    for row in rows:\n        if len(set(row)) < k:\n            possible = False\n            break\n    if possible:\n        for i in range(n):\n            if i == 0:\n                continue\n            if not all(rows[i][j] == rows[i-1][j] + 1 for j in range(8) if i-1 >= 0):\n                possible = False\n                break\n        for i in range(n):\n            if i == 0:\n                continue\n            if not all(rows[i][j] == rows[i-1][j] + 1 for j in range(8) if i-1 >= 0):\n                possible = False\n                break\n    return \"YES\" if possible else \"NO\"\n"
    },
    {
        "number": 188,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n, k = map(int, stdin[0].split())\n    num_arr = list(map(int, stdin[1]))\n    groups = [num_arr[i:i + k] for i in range(0, len(num_arr), k)]\n    # print(groups)\n    for i in range(len(groups)):\n        if not is_neighbors(groups[i]):\n            return \"NO\"\n    return \"YES\"\n\n\ndef"
    },
    {
        "number": 189,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sticks = [int(x) for x in stdin.split()]\n\n    best = float('inf')\n    best_t = None\n    for t in range(1, n + 1):\n        total = 0\n        for i in range(1, n + 1):\n            total += abs(i - t)\n        if total < best:\n            best = total\n            best_t = t\n\n    if best_t is None:\n        return '0'\n    return str(best_t) +'' + str(best)\n"
    },
    {
        "number": 189,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    arr.sort()\n    low = 0\n    high = arr[-1]\n    while low <= high:\n        mid = low + (high-low) // 2\n        if arr == get_sticks_with_lengths(n, mid):\n            high = mid-1\n        else:\n            low = mid+1\n    return str(mid)\n\ndef"
    },
    {
        "number": 189,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 189,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    sticks = stdin[1]\n    sticks = sticks.split()\n    sticks = list(map(int, sticks))\n    t = int(stdin[2])\n    answer = 0\n    for i in range(len(sticks)):\n        if abs(sticks[i] - t) <= 1:\n            answer += abs(sticks[i] - t)\n    return str(answer)\n"
    },
    {
        "number": 189,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    sticks = list(map(int, stdin.split()[1].split()))\n    min_cost = float('inf')\n    min_cost_t = 0\n    for t in range(n+1):\n        new_sticks = []\n        for stick in sticks:\n            new_sticks.append(stick+t)\n        if new_sticks[-1] >= n:\n            cost = 0\n        else:\n            cost = abs(new_sticks[-1] - n) + abs(new_sticks[-1] - t)\n        if cost < min_cost:\n            min_cost = cost\n            min_cost_t = t\n    return str(min_cost_t) +'' + str(min_cost)\nprint(solution(input()))\n"
    },
    {
        "number": 189,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    sticks = list(map(int, stdin.split()[1]))\n    return str(min(i for i in range(1, 1001) if all(abs(i - j) <= 1 for j in sticks))) + \" \" + str(min(abs(i - j) for i in sticks for j in sticks if i < j))\n\ndef"
    },
    {
        "number": 189,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    best = float('inf')\n    best_t = float('inf')\n    for t in range(1, min(a) + 1):\n        cost = 0\n        for i in range(n):\n            if a[i] - t > 0:\n                cost += abs(a[i] - t)\n            else:\n                cost += abs(a[i] - t) + 1\n        if cost < best:\n            best = cost\n            best_t = t\n    print(best_t, best)\nsolution('1 1 4')"
    },
    {
        "number": 189,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n\n    for i in range(len(a)):\n        if i + 2 >= len(a):\n            break\n        if a[i] == a[i + 2]:\n            return str(a[i] + a[i + 2] - 1) + \" \" + str(a[i] + a[i + 2] - 1)\n    return \"0 0\"\n"
    },
    {
        "number": 189,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return f\"{len(list(filter(lambda x: x - 1 >= 0, map(int, stdin.strip().split()))))} {min([abs(i - 2) for i in map(int, stdin.strip().split())])}\"\n"
    },
    {
        "number": 189,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    sticks = list(map(int, stdin.split()))\n    d = defaultdict(list)\n    for x, y in enumerate(sticks):\n        d[y].append(x)\n\n    def get_cost(k):\n        if k not in d:\n            return 0\n        ans = []\n        for n in d[k]:\n            ans.append(abs(sticks[n] - k))\n        ans.sort()\n        return sum(ans)\n\n    res = 0\n    min_cost = float('inf')\n    for k in range(1, 101):\n        c = get_cost(k)\n        if c < min_cost:\n            res = k\n            min_cost = c\n    return str(res) + \" \" + str(min_cost)\n"
    },
    {
        "number": 191,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    p = 1\n    for i in range(k):\n        if a[i] == 0:\n            p *= -1\n        else:\n            if i > 0 and a[i] == a[i - 1]:\n                p *= -1\n                a[i], a[i - 1] = a[i - 1], a[i]\n    if p == -1:\n        return '0'\n    return str(p * (10 ** 9 + 7) ** -1)\n"
    },
    {
        "number": 191,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    prob = 0\n    p = 1\n    for i in range(k):\n        if a[i] == 0:\n            prob *= (p / 2)\n            p = p * (1 + p) % 10**9\n        else:\n            prob *= p / 2\n            p = p * (1 - p) % 10**9\n    return str(prob)"
    },
    {
        "number": 191,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\na, k = map(int, input().split())\na = list(map(int, stdin.split()))\n\ndef"
    },
    {
        "number": 191,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    return '{:.10f}'.format(pow(1 / (pow(2, n) - 1), -k) % (10 ** 9 + 7))\n"
    },
    {
        "number": 191,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    p = 0\n    for i in range(1, n):\n        a[i], a[i - 1] = a[i - 1], a[i]\n        if i >= k:\n            p += math.factorial(i) / math.factorial(i - k)\n    return str(p)\n"
    },
    {
        "number": 191,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(i) for i in stdin.split())\n    a = list(int(i) for i in stdin.split()[1])\n    a.sort()\n    prod = 1\n    divisor = 1\n    for i in range(1, n + 1):\n        if a[i - 1]!= a[i]:\n            if a[i - 1] == 0:\n                if a[i] == 1:\n                    return '0'\n            else:\n                a[i - 1], a[i] = a[i], a[i - 1]\n                prod *= i\n                divisor *= i - 1\n        if a[i - 1] == a[i]:\n            prod *= i\n            divisor *= i - 1\n        prod %= 10 ** 9 + 7\n        divisor %= 10 ** 9 + 7\n    return str(prod // divisor)\n"
    },
    {
        "number": 191,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] <= a[j]:\n                count += 1\n    print(int((count+k) / (n-k+1) * 987654321))\n    return\n"
    },
    {
        "number": 191,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 2\n   ... 0 1 0\n    ''')\n    '333333336'\n    >>> solution('''5 1\n   ... 1 1 1 0 0\n    ''')\n    '0'\n    >>> solution('''6 4\n   ... 1 0 0 1 1 0\n    ''')\n    '968493834'\n    \"\"\"\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    q = int(n ** (1 / 2) + 0.5)\n    if n == 1:\n        return '0'\n    prob = 0\n    for i in range(q):\n        for j in range(i + 1, n):\n            p = randint(1, 2)\n            if a[i] > a[j]:\n                a[i], a[j] = a[j], a[i]\n            elif a[i] < a[j]:\n                a[i], a[j] = a[j], a[i]\n            if p == 1:\n                a[i], a[j] = a[j], a[i]\n    for i in range(n):\n        if a[i] == 0:\n            prob += int(math.factorial(n) / (math.factorial(i) * math.factorial(n - i)))\n    prob *= 2 ** -1\n    prob %= 10 ** 9 + 7\n    return str(prob)\n"
    },
    {
        "number": 191,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    prob = 0\n\n    for i in range(k):\n        possible_permutations = 0\n        swapped_i = 0\n        while True:\n            swapped_i = a.index(min(a))\n            a[swapped_i], a[swapped_i + 1] = a[swapped_i + 1], a[swapped_i]\n            possible_permutations += 1\n            if all(x > 0 for x in a):\n                prob = possible_permutations * (10 ** 9 + 7)\n                break\n            a[swapped_i], a[swapped_i + 1] = a[swapped_i + 1], a[swapped_i]\n\n    return str(prob) if prob else \"0\"\n"
    },
    {
        "number": 191,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    p = 0\n    if k == 1:\n        return str(int(p))\n    else:\n        for i in range(k):\n            p = p * k + a[i]\n        return str(int(p/((10**9+7)**(k-1))))\n\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 192,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    # algorithm\n    x, y = sorted((x, y))\n    x_cubed = x ** 3\n    y_cubed = y ** 3\n    while x_cubed > y_cubed:\n        x -= 1\n        y_cubed += x\n    return str(y_cubed // x)\n\nprint(solution(input()))\n\n\ndef"
    },
    {
        "number": 192,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.rstrip()\n    stdin = stdin.split()\n    x = int(stdin[0])\n    y = int(stdin[1])\n    return x + y"
    },
    {
        "number": 192,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, y = list(map(int, stdin.split()))\n    m = min(x, y)\n    while m <= y:\n        x = m\n        for i in range(x+1, y+1):\n            if m == i:\n                y = m + i\n                break\n            elif m % i == 0:\n                x = m + i\n                break\n        m = x\n    return str(y - x)\n\n\nprint(solution(\"6 3\"))\nprint(solution(\"8 5\"))\nprint(solution(\"22 4\"))\n"
    },
    {
        "number": 192,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    if x == y:\n        return str(0)\n    a = b = c = x\n    while a!= b and b!= c and a!= c:\n        a += 1\n        b += 1\n        c += 1\n    if a == b:\n        return str(1)\n    if b == c:\n        return str(1)\n    if a == c:\n        return str(1)\n    return str(2)"
    },
    {
        "number": 192,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x, y = stdin.split()\n    x = int(x)\n    y = int(y)\n    if x == y:\n        return 0\n    return 1\n"
    },
    {
        "number": 192,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    return str(x + y - 3 + (x + y - 3) * (x - 1) / 2 - (x + y - 3) * (y - 1) / 2)\n\nsolution(\"22 4\")\n\nsolution(\"6 3\")\n\n\n---Solution---"
    },
    {
        "number": 192,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''6 3\n   ... ''')\n    '4'\n    >>> solution('''8 5\n   ... ''')\n    '3'\n    >>> solution('''22 4\n   ... ''')\n    '6'\n    \"\"\"\n    x, y = map(int, stdin.split())\n    return str(math.ceil((x * math.sqrt(3)) / y))\n"
    },
    {
        "number": 192,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a, b, c = 1, 1, 1\n    for i in range(m):\n        a, b, c = b, c, (b * c + a * a) / 2\n    return str(int((a + b + c) / 2))\n"
    },
    {
        "number": 192,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Given: An integer x and an integer y.\n    Return: A single integer, the minimum number of seconds required for Memory to obtain an equilateral triangle of side length y if he starts with the equilateral triangle of side length x.\n    '''\n    \n    x,y = map(int, stdin.split())\n    \n    if x==y:\n        return 0\n    \n    if y%2==0:\n        return x+y-2\n    else:\n        return x+y-1\n"
    },
    {
        "number": 192,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = list(map(int, stdin.split()))\n    for a_prime in range(a + 1, c):\n        b_prime = (a_prime * a) / b\n        c_prime = (a_prime * b) / c\n        if b_prime == c_prime:\n            return str(min(a_prime, a_prime * (a_prime + 1) // 2, a_prime * (a_prime + 1) // 2 + b_prime, a_prime * (a_prime + 1) // 2 + c_prime))\n    return str(min(a, a * (a + 1) // 2, a * (a + 1) // 2 + b, a * (a + 1) // 2 + c))"
    },
    {
        "number": 193,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def norm(row: list) -> float:\n        return sum(abs(x) for x in row)\n\n    n = int(stdin.split()[0])\n    a = list(map(float, stdin.split()[1].split()))\n    b = list(map(float, stdin.split()[2].split()))\n    c = list(map(float, stdin.split()[3].split()))\n    d = list(map(float, stdin.split()[4].split()))\n    return str(round(min(norm(a) - norm(b), norm(c) - norm(d)), 9))\n"
    },
    {
        "number": 193,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    c, d = map(int, stdin.strip().split())\n    A = [[a, b], [c, d]]\n    return str(abs(np.linalg.det(A) - ((a * d) - (b * c))))\n\n\ndef"
    },
    {
        "number": 193,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.rstrip().split(\"\\n\")\n    A = list(map(int, inputs[0].split()))\n    B = list(map(int, inputs[1].split()))\n    if A[0] == 0 and A[1] == 0:\n        return \"0\"\n    elif A[0] == 0:\n        return str(abs(B[1] - B[2]))\n    elif A[1] == 0:\n        return str(abs(B[0] - B[2]))\n    det = A[0] * B[1] - A[1] * B[0]\n    if det == 0:\n        return \"0.2000000000\"\n    return str(abs(det))"
    },
    {
        "number": 193,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    c, d = map(int, stdin.split())\n    b = [[a, b], [c, d]]\n    if det(b) == 0:\n        return str(abs(a * d - b[0][0] * c) + abs(b[0][0] * d - a * c))\n    else:\n        return str(abs(a * d - b[0][0] * c) + abs(b[0][1] * d - a * c))\n\ndef"
    },
    {
        "number": 193,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a,b = map(int, stdin.split())\n    c,d = map(int, stdin.split())\n    A = [[a,b],[c,d]]\n    return str(round(determinant(A),9))"
    },
    {
        "number": 193,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split(\"\\n\")\n    a, b = map(int, (a, b))\n    c, d = stdin.split(\"\\n\")\n    c, d = map(int, (c, d))\n    b = matrix(a, b)\n    c = matrix(a, b)\n    b = matrix(a, b)\n    d = matrix(a, b)\n    a_d = determinant(b)\n    a_c = determinant(c)\n    a_d_c = a_d * c\n    a_d_b = a_d * b\n    return abs(a_d_b - a_d_c)\n"
    },
    {
        "number": 193,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a,b = map(int, stdin.split())\n    c,d = map(int, stdin.split())\n    matrix_b = [[a,b],[c,d]]\n    print(max(abs(matrix_b[0][0]*matrix_b[1][1]-matrix_b[0][1]*matrix_b[1][0]),0))\n\nsolution(input())\n"
    },
    {
        "number": 193,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a,b,c,d = map(int,stdin.split())\n    return str(pow(d,2)-pow(c,2)+pow(b,2)-pow(a,2))"
    },
    {
        "number": 193,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(float, stdin.split()[1].split()))\n    b = list(map(float, stdin.split()[2].split()))\n    c = list(map(float, stdin.split()[3].split()))\n    d = list(map(float, stdin.split()[4].split()))\n    def det(a, b, c, d):\n        return a * d - b * c\n\n    def norm(a, b, c, d):\n        return max(abs(a), abs(b), abs(c), abs(d))\n\n    print(det(a[0], b[0], c[0], d[0]), norm(a[0], b[0], c[0], d[0]))\n    print(det(a[1], b[1], c[1], d[1]), norm(a[1], b[1], c[1], d[1]))\n    print(det(a[2], b[2], c[2], d[2]), norm(a[2], b[2], c[2], d[2]))\n    print(det(a[3], b[3], c[3], d[3]), norm(a[3], b[3], c[3], d[3]))\n    return str(abs(det(a[0], b[0], c[0], d[0]) - det(a[1], b[1], c[1], d[1]) - det(a[2], b[2], c[2], d[2]) - det(a[3], b[3], c[3], d[3]))) + \".\" + str(abs(norm(a[0], b[0], c[0], d[0]) - norm(a[1], b[1], c[1], d[1]) - norm(a[2], b[2], c[2], d[2]) - norm(a[3], b[3], c[3], d[3]))).replace(\".\", \"\") + \"0\"\n"
    },
    {
        "number": 193,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def matrix_norm(A: list) -> float:\n        ans = 0\n        for i, j in enumerate(A):\n            for k, l in enumerate(j):\n                ans += abs(l) ** 2\n        return ans ** 0.5\n\n    a, b = list(map(int, stdin.split()))\n    A = [[j for j in input().split()] for i in range(a)]\n    c, d = list(map(int, stdin.split()))\n    B = [[j for j in input().split()] for i in range(b)]\n    ans = matrix_norm(A) - matrix_norm(B)\n    print(round(ans, 9))\n    return round(ans, 9)\n"
    },
    {
        "number": 194,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    clients = map(int, stdin.split())\n    tables = [None] * a\n    for i in range(1, b+1):\n        if i <= a:\n            tables[i - 1] = 1\n        else:\n            tables[i-1] = 2\n\n    for i in range(0, n):\n        if clients[i] == 1:\n            if tables[clients[i]] == 1:\n                tables[clients[i]] = None\n                tables[clients[i] - 1] = None\n            else:\n                tables[clients[i]] = None\n        elif clients[i] == 2:\n            if tables[clients[i]] == 1:\n                tables[clients[i]] = None\n                tables[clients[i] - 1] = None\n            elif tables[clients[i]] == 2:\n                tables[clients[i]] = None\n                tables[clients[i] - 2] = None\n\n    for i in range(0, a):\n        if tables[i] == None:\n            return '0'\n    return str(len(clients) - sum(tables))\n\nprint(solution(input()))\n\n\n\"\"\"\n\n\n\n\n\ndef"
    },
    {
        "number": 194,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    t = list(map(int, stdin.split()))\n    count = 0\n    t_list = []\n    for i in range(1, n + 1):\n        if t[i - 1] == a:\n            t_list.append(1)\n        elif t[i - 1] == b:\n            t_list.append(2)\n        else:\n            t_list.append(0)\n\n    for i in range(len(t_list)):\n        if t_list[i] == 1:\n            count += 1\n        elif t_list[i] == 2:\n            count += 1\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 194,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    groups = []\n    for group in stdin.split():\n        if int(group) == 1:\n            groups.append(1)\n        else:\n            groups.append(2)\n    i = 0\n    t_i = groups[i]\n    while t_i <= 2:\n        i += 1\n        t_i = groups[i]\n    if i == len(groups) or groups[i] == 1:\n        return '0'\n    else:\n        return str(n * (2 * i - t_i + 1) - (i * (2 * i - t_i)))\n\nprint(solution(input()))\n"
    },
    {
        "number": 194,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 194,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, one, two = map(int, stdin.split())\n    t = list(map(int, stdin.split()))\n    t_1 = t[0::2]\n    t_2 = t[1::2]\n    # print(t_1)\n    # print(t_2)\n    # print(sum(t_1))\n    # print(sum(t_2))\n\n    # t_1_sum = sum(t_1)\n    # t_2_sum = sum(t_2)\n    # print(t_1_sum)\n    # print(t_2_sum)\n    # if t_1_sum == t_2_sum:\n    #     return 0\n    # else:\n    #     return n - 1\n    # print(sum(t_1) - sum(t_2))\n    # print(sum(t_1) + sum(t_2))\n\n    # if sum(t_1) == sum(t_2):\n    #     return n - 1\n    # else:\n    #     return n - 2\n    # return n - 1\n\n    # return n - (sum(t_1) - sum(t_2))\n    # return n - (sum(t_1) + sum(t_2))\n\n    return n - (sum(t_1) - sum(t_2))\n"
    },
    {
        "number": 194,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def people_dining(n, a, b):\n        if n == 1:\n            return 0\n        else:\n            if n == 2:\n                if a == 1 and b == 1:\n                    return 2\n                elif a == 1 or b == 1:\n                    return 1\n                else:\n                    return 0\n            else:\n                if a == 1 and b == 1:\n                    return people_dining(n - 2, a, b) + 2\n                elif a == 1 or b == 1:\n                    return people_dining(n - 2, a, b) + 1\n                else:\n                    return people_dining(n - 2, a, b)\n\n    n, a, b = map(int, stdin.split())\n    if n == 1:\n        return 0\n    elif n == 2:\n        if a == 1 and b == 1:\n            return 2\n        elif a == 1 or b == 1:\n            return 1\n        else:\n            return 0\n    else:\n        return people_dining(n, a, b)\n"
    },
    {
        "number": 194,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    g = []\n    for i in range(n):\n        g.append(list(map(int, stdin.split())))\n    for i in g:\n        if i[1] == 1:\n            a -= 1\n        elif i[1] == 2:\n            b -= 1\n    return str(a) + '\\n' + str(b)\n"
    },
    {
        "number": 194,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, input().split())\n    arr = list(map(int, input().split()))\n    groups = []\n    for i in range(len(arr)):\n        if arr[i] == 1:\n            groups.append(1)\n        elif arr[i] == 2:\n            groups.append(2)\n    arr_len = len(groups)\n    count = 0\n    while (len(groups) > 0):\n        group = groups.pop(0)\n        if group == 1:\n            count += (2 ** (arr_len-1))\n        elif group == 2:\n            count += (2 ** (arr_len-2))\n        elif group == 3:\n            count += (2 ** (arr_len-3))\n    return str(count)\n"
    },
    {
        "number": 194,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    g = list(map(int, stdin.split()))\n    lst = list()\n    for i in range(0, n):\n        lst.append(1)\n    for i in range(0, len(g)):\n        if g[i] == 1:\n            lst[i] = lst[i]\n        elif g[i] == 2:\n            lst[i] = 2\n    s = 0\n    for i in range(0, len(lst)):\n        if lst[i]!= 0:\n            s = s + 1\n    return s\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 194,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, nb_one, nb_two = list(map(int, stdin.split()))\n    \n    table_one = {i: False for i in range(1, nb_one + 1)}\n    table_two = {i: False for i in range(1, nb_two + 1)}\n\n    t_id = 0\n    for t in stdin.split('\\n'):\n        if t_id == n:\n            break\n        if t[0] == '1':\n            table_one[int(t[1])] = True\n        else:\n            table_two[int(t[1])] = True\n        t_id += 1\n\n    res = 0\n    for t_id in range(n):\n        if table_one[t_id + 1] and table_two[t_id + 1]:\n            res += 1\n    return str(res)\n"
    },
    {
        "number": 195,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, N = map(int, stdin.split())\n    if A == 0 and (B == 0 or C == 0):\n        return \"0\"\n    if A == 0:\n        return \"1\" if (B + C) > N else \"-1\"\n    if C == 0:\n        return \"1\" if (B + A) > N else \"-1\"\n    if N == 0:\n        return \"1\" if (A + B) > N else \"-1\"\n    if N == A + B + C:\n        return \"0\"\n    return str(A + B + C - N)\n"
    },
    {
        "number": 195,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n'''\n"
    },
    {
        "number": 195,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Convert stdin to a list of integers\n    n, a, b, c = list(map(int, stdin.split()))\n    # Create a list of lists of students who visited\n    # BugDonalds and/or BeaverKing\n    visits = [[a], [b], [c]]\n    # Loop over all students\n    for i in range(1, n):\n        # For each student in the group\n        for j in range(len(visits[i - 1])):\n            # Create a list of students who visited either\n            # BugDonalds or BeaverKing\n            visit = visits[i - 1][j] + [i]\n            # Make sure to keep the list of students in the order\n            # in which they visited the restaurants\n            visit.sort()\n            # If we don't have enough visits in either\n            # of the restaurants, we can't say that the\n            # number of students who didn't pass the exam\n            # is impossible and thus the answer is -1\n            if len(visit) < 3:\n                return str(-1)\n            # If we do, then we can determine the\n            # number of students who didn't pass the exam\n            # by looking for the index of the student\n            # who didn't pass the exam\n            else:\n                if visit.index(i) == 1:\n                    # If the student who did pass the exam\n                    # was in the beginning of the list,\n                    # then we only need to look for the\n                    # students who did not pass the exam\n                    visits[1].append(i)\n                elif visit.index(i) == 2:\n                    # If the student who did pass the exam\n                    # was in the middle of the list,\n                    # then we only need to look for the\n                    # students who did not pass the exam\n                    visits[2].append(i)\n    # If there are more than one group with the same\n    # number of students in either restaurant, then\n    # the result is not possible\n    if len(set(visits[0])) > 1 or len(set(visits[1])) > 1 or len(set(visits[2])) > 1:\n        return str(-1)\n    # Otherwise, we can determine the number of students\n    # who did not pass the exam and return it\n    else:\n        return str(len(set(visits[0]) | set(visits[1]) | set(visits[2])))"
    },
    {
        "number": 195,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, N = list(map(int, stdin.split()))\n    if A + B + C >= N:\n        return str(sum([A, B, C]))\n    elif A + B <= N:\n        return str(sum([N - A, N - B, N - C]))\n    elif A + C >= N:\n        return str(sum([N - A, N - B, C]))\n    elif B + C >= N:\n        return str(sum([N - A, N - B, N - C]))\n    else:\n        return str(sum([N - A, N - B, N - C]))\n"
    },
    {
        "number": 195,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A,B,C,N = map(int,stdin.split())\n    if A == 0 and C == 0 and N == 0:\n        return '-1'\n    elif A == 1:\n        if N == 0:\n            return '1'\n        else:\n            return '-1'\n    elif C == 1:\n        if N == 0:\n            return '-1'\n        else:\n            return '-1'\n    elif A == 1:\n        if C == 0:\n            if N == 0:\n                return '1'\n            else:\n                return '-1'\n        elif C == 1:\n            if N == 0:\n                return '-1'\n            else:\n                return '-1'\n    elif A == 2 and C == 2:\n        if N == 0:\n            return '-1'\n        else:\n            return '0'\n    elif A == 2 and C == 1:\n        if N == 0:\n            return '0'\n        else:\n            return '-1'\n    elif A == 2 and C == 0:\n        if N == 0:\n            return '0'\n        else:\n            return '0'\n    elif N == 2 and A == 2:\n        if C == 0:\n            return '0'\n        else:\n            return '-1'\n    elif N == 1 and A == 2:\n        if C == 0:\n            return '0'\n        else:\n            return '-1'\n    elif N == 1 and A == 1:\n        if C == 0:\n            return '0'\n        else:\n            return '-1'\n    elif N == 1 and A == 0:\n        if C == 0:\n            return '0'\n        else:\n            return '-1'\n    elif N == 0 and A == 0:\n        if C == 0:\n            return '0'\n        else:\n            return '-1'\n    elif N == 0 and A == 1:\n        if C == 0:\n            return '0'\n        else:\n            return '-1'\n    elif N == 0 and A == 2:\n        if C == 0:\n            return '0'\n        else:\n            return '-1'\n    elif N == 1 and C == 1:\n        if A == 0:\n            return '0'\n        else:\n            return '-1'\n    elif N == 1 and C == 0:\n        if A == 0:\n            return '0'\n        else:\n            return '-1'\n    elif N == 0 and C == 1:\n        if A == 0:\n            return '0'\n        else:\n            return '-1'\n    else:\n        return '0'\n"
    },
    {
        "number": 195,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    [A, B, C, N] = list(map(int, stdin.split()))\n    return \"-\" if A + B + C + N == 0 else str(N - (A + B + C - N))\n    return \"-\" if A + B + C + N == 0 else str(N - (A + B + C - N))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 195,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, N = map(int, stdin.split())\n    if A == 0 and B == 0 and C == 0 and N == 0:\n        return \"0\"\n    if A > 0 and (A == B or A == C or A == N):\n        return \"1\"\n    if A + B <= N:\n        return \"1\" if A + B <= N else \"0\"\n    return \"0\""
    },
    {
        "number": 195,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 195,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, N = map(int, stdin.split())\n    if A * N == B * C and A + C >= N:\n        return A - 1\n    else:\n        return -1\n"
    },
    {
        "number": 195,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, N = map(int, stdin.split())\n    if N == A:\n        return '1'\n    if N == 0:\n        return '-1'\n    if N == A + B + C:\n        if A >= 0 and C >= 0:\n            return '2'\n        if A >= 0 and C >= 0 and A >= 1 and C >= 1:\n            return '3'\n    if A == 1:\n        if B + C <= N:\n            return '0'\n        return '2'\n    return '3'\n"
    },
    {
        "number": 196,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, k = list(map(int, stdin.split()))\n    ans = 0\n    for i in range(1,k+1):\n        if i==1:\n            ans+=x\n        elif i%2:\n            ans+=x\n        else:\n            ans+=2*x\n    print(ans%(10**9+7))\n"
    },
    {
        "number": 196,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x,k = stdin.split()\n    k = int(k)\n    d = 0\n    while (k > 0):\n        d += 1\n        k -= d\n    return str(d)\n"
    },
    {
        "number": 196,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, k = map(int, stdin.split())\n    N = x\n    M = 1\n    # print(N, M)\n    for i in range(k):\n        # print(N, M)\n        M *= 2\n        N += N\n    return str(N % (10 ** 9 + 7))\n\nsolution(input())\n"
    },
    {
        "number": 196,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, k = (int(i) for i in stdin.split())\n    i = 0\n    while True:\n        i += k\n        i %= x\n        if i == 0:\n            return str(i)"
    },
    {
        "number": 196,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin.split(\" \")[0])*(int(stdin.split(\" \")[1])+1)//2)\n"
    },
    {
        "number": 196,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x, k = (int(i) for i in stdin.split())\n    dp = [0] * k\n    dp[0] = x\n    for i in range(1, k):\n        dp[i] = dp[i - 1] * 2\n    return int(sum(dp) % (10**9 + 7))"
    },
    {
        "number": 196,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, k = list(map(int, stdin.split()))\n    y = 0\n    for i in range(1, k + 1):\n        y = (y + (x * 2)) % 10**9 + 7\n        x = y\n    return str(y)\n"
    },
    {
        "number": 196,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x, k = list(map(int, stdin.split()))\n    return str(int(x * pow(2, k, 10**9 + 7)) % (10**9 + 7))\n"
    },
    {
        "number": 196,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x, k = map(int, stdin.split())\n    if k == 0:\n        return 0\n    total = 0\n    for i in range(k + 1):\n        total += (2 * x) if i % 2 == 0 else x\n        x *= 2\n    return total % (10**9 + 7)"
    },
    {
        "number": 196,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, k = map(int, stdin.split())\n    return str((x*k + x) // (k+1))"
    },
    {
        "number": 197,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    return str(1/2)"
    },
    {
        "number": 197,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def invert(a: int, n: int, k: int):\n        b = a\n        for i in range(k):\n            b = (b * (n - 1)) % n\n        return b\n\n    def is_good(x: int, y: int) -> bool:\n        if x < y:\n            return True\n        x_inv = invert(x, 998244353, 998244353)\n        y_inv = invert(y, 998244353, 998244353)\n        if x_inv == y_inv:\n            return True\n        return False\n\n    n = int(stdin.split('\\n')[0])\n    l = int(stdin.split('\\n')[1])\n    r = int(stdin.split('\\n')[2])\n\n    prob = 1.0\n    for x in range(l, r + 1):\n        for y in range(l, r + 1):\n            if is_good(x, y):\n                prob = (prob * 1.0) % 998244353\n\n    return str(prob)\n\nprint(solution(input()))\n"
    },
    {
        "number": 197,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(1 / 2)\n\"\"\"\n\ndef"
    },
    {
        "number": 197,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, *inversions = map(int, stdin.strip().split())\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"0\"\n    if inversions[0] < inversions[1]:\n        return \"0\"\n    \n    y = 2\n    while (inversions[-1] % y)!= 0 or (inversions[-2] % y)!= 0:\n        y += 1\n    if (inversions[-1] // y) > (inversions[-2] // y):\n        y -= 1\n    return str(inversions[-1]//y)\n    \ndef"
    },
    {
        "number": 197,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    inversions = 0\n    for _ in range(n):\n        l, r = map(int, stdin.split())\n        inversions += l * (n - r)\n    return str(inversions ** (-1))"
    },
    {
        "number": 197,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    probability, x, y = map(int, stdin.split())\n    ans = 0\n    \n    for k in range(probability):\n        l = x*k + 1\n        r = x*(k + 1)\n        if l <= y <= r:\n            ans = (ans + l) % 998244353\n    return str(ans)\n"
    },
    {
        "number": 197,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    return"
    },
    {
        "number": 197,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    num_problems = int(stdin.strip())\n    l_min, r_min = list(map(int, stdin.strip().split()))\n    inversions = 0\n    for i in range(num_problems):\n        l_max, r_max = map(int, stdin.strip().split())\n        inversions += int(l_max / r_max)\n    probability = 1 / 2\n    return int(probability * (inversions ** -1) % 998244353)\n"
    },
    {
        "number": 197,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split()\n    n = int(data[0])\n    good = 0\n    best = 0\n    for i in range(1, n + 1):\n        best = best + 1\n    for i in range(1, n + 1):\n        s = int(data[i])\n        good = good + 1\n        while s > 0:\n            if good % s == 0:\n                best = best * (s / good)\n            s = s - 1\n    best = best % 998244353\n    return str(best)\n"
    },
    {
        "number": 197,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 198,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    pass"
    },
    {
        "number": 198,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n'''\n\nfrom collections import defaultdict\nfrom itertools import combinations\nimport sys\n\nsys.setrecursionlimit(10**6)\n\n\ndef"
    },
    {
        "number": 198,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    if num == 1:\n        return \"1\"\n    elif num == 2:\n        return \"2\"\n    elif num == 3:\n        return \"3\"\n    else:\n        pass"
    },
    {
        "number": 198,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return 1\n    if n == 2:\n        return 4\n\n    memo = {}\n\n    def dp(n: int) -> int:\n        if n == 1:\n            return 1\n        if n == 2:\n            return 4\n\n        if n in memo:\n            return memo[n]\n\n        memo[n] = dp(n - 1) + dp(n - 2)\n        return memo[n]\n\n    print(dp(n))\n"
    },
    {
        "number": 198,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def get_rectangle(n: int) -> int:\n        if n <= 0:\n            return 0\n        if n == 1:\n            return 1\n        return get_rectangle(n-1) + get_rectangle(n-2)\n    return str(get_rectangle(int(stdin)))\n"
    },
    {
        "number": 198,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''6\n   ... ''')\n    1\n    >>> solution('''20\n   ... ''')\n    4\n    \"\"\"\n    n = int(stdin)\n    dp = [[0 for i in range(n+1)] for j in range(n+1)]\n    for i in range(n+1):\n        dp[i][i] = 1\n    for length in range(2, n+1):\n        for start in range(1, n-length+1):\n            for j in range(start, start+length):\n                dp[start][start+length] += dp[start+1][j]\n                dp[start][start+length] %= 1000000007\n    return dp[1][n]\n"
    },
    {
        "number": 198,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''6\n   ... 1 1 2 2\n   ... ''')\n    '1'\n    >>> solution('''20\n   ... 1 1 9 9\n   ... 2 2 8 8\n   ... 3 3 7 7\n   ... 4 4 6 6\n   ... ''')\n    '4'\n    >>> solution('''20\n   ... 1 1 9 9\n   ... 2 2 8 8\n   ... 3 3 7 7\n   ... 4 4 6 6\n   ... 5 5 5 5\n   ... ''')\n    '0'\n    >>> solution('''20\n   ... 1 1 9 9\n   ... 2 2 8 8\n   ... 3 3 7 7\n   ... 4 4 6 6\n   ... 5 5 5 5\n   ... 6 6 6 6\n   ... 7 7 7 7\n   ... 8 8 8 8\n   ... 9 9 9 9\n   ... 10 10 10 10\n   ... 11 11 11 11\n   ... ''')\n    '1'\n    \"\"\"\n    length = int(stdin)\n    if length == 1:\n        return 1\n    else:\n        return str(solution(stdin.replace('\\n', '').replace(' ', ''))-solution(stdin.replace('\\n', '').replace(' ', '').replace(str(length), '')))\n"
    },
    {
        "number": 198,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    length = int(stdin)\n    return str(find_ways_to_form_rectangle(length))\n\ndef"
    },
    {
        "number": 198,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    l = list(map(int, stdin.split()))\n    if l[0] % 4!= 0:\n        return '0'\n    else:\n        for i in range(4, 0, -1):\n            if (l[0] + l[i]) % (i + 1)!= 0:\n                return '0'\n        return '1'\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 198,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    import math\n\n    n = int(stdin)\n    # 1 + 1 + 1 + 1 + 2 + 2 + 3 + 3 + 4 + 4 + 5 + 5\n    return str(int(math.factorial(n))/(math.factorial(n-4)*math.factorial(2)))\n"
    },
    {
        "number": 199,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    v_lst = list(map(int, stdin.split()))\n    for v in v_lst:\n        if v % s == 0:\n            return str(v // s)\n    return '-1'"
    },
    {
        "number": 199,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    kegs = sorted(list(map(int, stdin.split())), reverse=True)\n    cnt = 0\n    min_keg = 0\n    for i in range(n):\n        if kegs[i] + cnt < s:\n            min_keg += 1\n            cnt += kegs[i]\n        else:\n            break\n    return str(min_keg)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 199,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    v_lst = list(map(int, stdin.split()))\n\n    def find_min_keg(n, s):\n        if n == 1:\n            if s >= v_lst[0]:\n                return -1\n            else:\n                return v_lst[0]\n        elif n == 2:\n            if s < v_lst[0] + v_lst[1]:\n                return -1\n            else:\n                return min(v_lst[0], v_lst[1])\n        else:\n            if s < v_lst[0] + v_lst[1] + v_lst[2]:\n                return -1\n            else:\n                return min(v_lst[0], v_lst[1], v_lst[2])\n\n    return str(find_min_keg(n, s))\n"
    },
    {
        "number": 199,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, s = list(map(int, stdin.split()))\n    kegs = list(map(int, stdin.split()))\n\n    kegs.sort()\n    print(kegs)\n\n    kegs.reverse()\n    print(kegs)\n\n    sum = 0\n    for i in range(len(kegs)):\n        if kegs[i] + sum <= s:\n            sum += kegs[i]\n\n        else:\n            break\n\n    return str(sum)"
    },
    {
        "number": 199,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    _, n, s = stdin.split()\n    n, s = int(n), int(s)\n    arr = sorted(map(int, stdin.split()))\n    min = 9999\n    for i in range(1, n):\n        if arr[i] - arr[i-1] > s:\n            continue\n        if arr[i] - arr[i-1] < min:\n            min = arr[i] - arr[i-1]\n    if min == 9999:\n        return -1\n    return min\n"
    },
    {
        "number": 199,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    if n <= 0 or s <= 0 or s > 10 ** 12:\n        return -1\n    v_arr = list(map(int, stdin.split()))\n    v_arr.sort()\n    if s >= v_arr[0]:\n        return v_arr[0]\n    elif s >= v_arr[1]:\n        return v_arr[1]\n    else:\n        return -1"
    },
    {
        "number": 199,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    # split stdin on whitespace\n    kegs = [int(i) for i in stdin.split()]\n    kegs.sort()\n    # sort kegs in ascending order\n    print(kegs)\n    if sum(kegs) < s:\n        # sum(kegs) is less than s\n        return -1\n    lst = []\n    lst.append(kegs[0])\n    for i in range(1,len(kegs)):\n        if (sum(lst) + kegs[i]) <= s:\n            lst.append(kegs[i])\n        else:\n            break\n    print(lst)\n    return str(len(lst))\n"
    },
    {
        "number": 199,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return\n"
    },
    {
        "number": 199,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, s = [int(i) for i in stdin.split(\" \")]\n    kegs = [int(i) for i in stdin.split(\" \")]\n    res = -1\n    # print(kegs)\n    for i in range(len(kegs)):\n        # print(i)\n        for j in range(len(kegs)):\n            # print(j)\n            if i!= j and kegs[i] + kegs[j] <= s:\n                res = min(res, kegs[i] + kegs[j])\n                # print(res)\n    if res == -1:\n        return -1\n    return str(res)"
    },
    {
        "number": 199,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    d = dict()\n    for i in range(n):\n        d[i] = list(map(int, stdin.split()))[i]\n    print(d)\n    d1 = {i: v for i, v in sorted(d.items(), key=lambda x: x[1], reverse=True)}\n    print(d1)\n    for i in d1.keys():\n        if sum(d1.values()) - d1.get(i) < s:\n            print(d1.get(i))\n            return d1.get(i)\n    print(-1)\n\nsolution(stdin)\n"
    },
    {
        "number": 200,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h1, h2 = list(map(int, stdin.split()))\n    a, b = list(map(int, stdin.split()))\n    days = 0\n    while h1 < h2:\n        h1 += a\n        h2 -= b\n        days += 1\n    return str(days) if h2 >= 0 else \"-\" + str(days)\n"
    },
    {
        "number": 200,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, h_1, h_2 = (int(x) for x in stdin.split())\n    return str(int(h_2 - h_1) // a + (int(h_2 - h_1) % a > b) - 1)\n"
    },
    {
        "number": 200,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    h1, h2 = (int(x) for x in stdin.split())\n    if h1 < h2:\n        return -1\n    else:\n        days = (h2 - h1) // (h1 + h2)\n        if h1 + h2 == h2:\n            return days\n        else:\n            return days + 1\n"
    },
    {
        "number": 200,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    h_1, h_2, a, b = map(int, stdin.split())\n    # print(h_1, h_2, a, b)\n    if h_1 > h_2:\n        return \"0\"\n    h_1 = h_1 + a\n    h_2 = h_2 + b\n    # print(h_1, h_2)\n    if h_1 >= h_2:\n        return \"0\"\n    elif h_1 >= h_2:\n        return \"1\"\n    else:\n        if h_1 < 0:\n            return \"0\"\n        elif h_1 < 0:\n            return \"1\"\n        else:\n            return \"2\""
    },
    {
        "number": 200,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    h_1, h_2 = stdin.split()\n    a, b = stdin.split()\n    h_1 = int(h_1)\n    h_2 = int(h_2)\n    a = int(a)\n    b = int(b)\n    days = 0\n    if h_1 > h_2:\n        if h_1 - h_2 < a:\n            days = -1\n        else:\n            days = int((h_1 - h_2 - a) / b + 1)\n    else:\n        if h_2 - h_1 < a:\n            days = -1\n        else:\n            days = int((h_2 - h_1 - a) / b + 1)\n    return str(days)\n"
    },
    {
        "number": 200,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    h1, h2 = map(int, stdin.strip().split())\n\n    day = 1\n    day_rise = h2 - h1\n    night_rise = h2 - h1\n    day_down = h1 - h2\n    night_down = h2 - h1\n\n    while day_rise > 0 or day_down > 0:\n        day_rise = day_rise - (day_down * 2)\n        day_down = day_down * 2 + night_down\n        night_rise = night_rise - day_down\n        day = day + 1\n\n    return str(day) if day_rise == 0 else -1\n"
    },
    {
        "number": 200,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    height, distance_up_night, distance_up_day = map(int, stdin.split())\n    height_of_caterpillar = distance_up_night + distance_up_day\n    if height >= height_of_caterpillar:\n        return str(0)\n    elif height_of_caterpillar > height:\n        return str(int((height - height_of_caterpillar) // distance_up_day + 1))\n    else:\n        return str(int((height_of_caterpillar - height) // distance_up_night + 1))\n"
    },
    {
        "number": 200,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    h_1, h_2, a, b = map(int, stdin.split())\n    h_3 = h_2 - a\n    h_4 = h_1 - b\n    if h_3 <= h_4:\n        return str(h_3)\n    else:\n        return str(h_4)\n\nsolution('10 30')\nsolution('10 13')\nsolution('10 19')\nsolution('1 50')"
    },
    {
        "number": 200,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  data = stdin.split()\n  print(data)\n\n  h_1 = int(data[0])\n  h_2 = int(data[1])\n  a = int(data[2])\n  b = int(data[3])\n\n  caterpillar = h_2 - h_1\n  apple = h_1 - b\n  d_caterpillar = a * 2\n  d_apple = b * 2\n\n  if h_1 == h_2:\n    return '-1'\n\n  days = (caterpillar // d_caterpillar) + 1\n  d_caterpillar = days * d_caterpillar\n  days += (apple // d_apple)\n\n  return str(days)\n\n\n\ndef"
    },
    {
        "number": 200,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    h_1, h_2 = (int(i) for i in stdin.split())\n    # find the distance b, a from h_1 and h_2\n    b, a = (int(i) for i in stdin.split())\n\n    days_in_1_day = 24\n    days_in_2_day = 48\n    days_in_3_day = 72\n    days_in_4_day = 96\n    days_in_5_day = 120\n    days_in_6_day = 144\n\n    # divide by 60 so that it is in minutes\n    a /= 60\n    b /= 60\n    n = 0\n    while h_1 > a or h_2 > b:\n        if a >= b:\n            # move by days_in_1_day, so that the caterpillar gets the height h_1\n            h_1 += days_in_1_day\n            a += days_in_1_day\n        else:\n            # move by days_in_2_day so that the caterpillar gets the height h_2\n            h_2 += days_in_2_day\n            b += days_in_2_day\n        n += 1\n    if h_1 == h_2:\n        # means that the caterpillar is in the forest at the height of h_1\n        return n\n    if n == 0:\n        return -1\n\n    # move by days_in_5_day so that the caterpillar gets the apple\n    h_1 += days_in_5_day\n    h_2 += days_in_5_day\n    while h_1 < h_2:\n        # move by days_in_3_day so that the caterpillar goes up\n        h_1 += days_in_3_day\n        h_2 += days_in_3_day\n        n += 1\n\n    # move by days_in_4_day so that the caterpillar goes down\n    h_1 += days_in_4_day\n    h_2 += days_in_4_day\n    while h_1 > h_2:\n        # move by days_in_3_day so that the caterpillar slips\n        h_1 -= days_in_3_day\n        h_2 -= days_in_3_day\n        n += 1\n    return n\n"
    },
    {
        "number": 201,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    C, H_r, H_b, W_r, W_b = (int(x) for x in stdin.split())\n    return (2 * H_r * W_r + 2 * H_b * W_b) - (H_r * W_r + H_b * W_b)\n"
    },
    {
        "number": 201,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    C, H_R, H_B, W_R, W_B = map(int, stdin.split())\n    H_R_J = C // H_R\n    H_B_J = C // H_B\n    W_R_J = C // W_R\n    W_B_J = C // W_B\n    if (H_R_J + W_R_J <= H_B_J + W_B_J):\n        return f'{H_R_J + W_R_J}'\n    else:\n        return f'{H_B_J + W_B_J}'"
    },
    {
        "number": 201,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # \uc5ec\uae30\uc5d0 \ucf54\ub4dc\ub97c \uc791\uc131\ud558\uc138\uc694.\n    stdin = stdin.split(\"\\n\")\n    candies = [int(stdin[i]) for i in range(1,6)]\n    return str(solution_imp(candies))\n\n\ndef"
    },
    {
        "number": 201,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    c, h_r, h_b, w_r, w_b = map(int, stdin)\n    max_joy_units = 0\n    while h_b > 0:\n        if h_b >= h_r:\n            h_b -= h_r\n            max_joy_units += h_r\n        else:\n            h_b -= h_b\n            max_joy_units += h_b\n    while w_b > 0:\n        if w_b >= w_r:\n            w_b -= w_r\n            max_joy_units += w_r\n        else:\n            w_b -= w_b\n            max_joy_units += w_b\n    return str(max_joy_units)\n"
    },
    {
        "number": 201,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    c, r, b, r_w, b_w = map(int, stdin.split())\n    return str(min((c*r + r_w, c*b + b_w)))"
    },
    {
        "number": 201,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    c, h_r, h_b, w_r, w_b = map(int, stdin.split())\n    return str(min(c, h_r + h_b + w_r + w_b) // 2)\n"
    },
    {
        "number": 201,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    C, H_r, H_b, W_r, W_b = map(int, stdin[0].split())\n    return str(min(H_r * W_r, H_b * W_b) - C)\n    \"\"\"\n    # Declare variables\n    C = int(stdin[0])\n    H_r = int(stdin[1])\n    H_b = int(stdin[2])\n    W_r = int(stdin[3])\n    W_b = int(stdin[4])\n\n    # Calculate the product of H_r and H_b\n    product_H = H_r * H_b\n    # Calculate the product of W_r and W_b\n    product_W = W_r * W_b\n\n    # Calculate the min of product_H and product_W\n    min_product = min(product_H, product_W)\n\n    # Calculate the difference of min_product and C\n    difference = min_product - C\n\n    # Return the minimum difference\n    return str(difference)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 201,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    C, H_r, H_b, W_r, W_b = map(int, stdin.split())\n    # W_r = red and W_b = blue\n    # H_r = red and H_b = blue\n    # H_b = red and W_r = blue\n    # H_r = red and W_b = red\n    # H_r = red and W_b = blue\n    # H_r = blue and W_b = blue\n    # H_r = blue and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = blue\n    # H_r = blue and W_b = blue\n    # H_r = blue and W_b = blue\n    # H_r = blue and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = red\n    # H_r = red and W_b = red\n    # H_"
    },
    {
        "number": 201,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    C, H_r, H_b, W_r, W_b = stdin.split(' ')\n    return str(int(C) * (int(H_r) + int(H_b)) * (int(W_r) + int(W_b)))"
    },
    {
        "number": 201,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('''10 3 5 2 3''')\n    16\n    '''\n    C, H_r, H_b, W_r, W_b = map(int, stdin.split())\n    return str(C * max(H_r, H_b) + min(H_r, H_b) * W_r + min(H_r, H_b) * W_b)\n"
    },
    {
        "number": 202,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1 = map(int, stdin.split())\n    x_2, y_2 = map(int, stdin.split())\n    dx, dy = x_2 - x_1, y_2 - y_1\n    cnt = 0\n    if x_1 < x_2:\n        while x_1!= x_2:\n            cnt += 1\n            if dx > 0:\n                x_1 += 1\n            elif dx < 0:\n                x_1 -= 1\n            else:\n                break\n    elif x_1 > x_2:\n        while x_1!= x_2:\n            cnt += 1\n            if dx > 0:\n                x_1 -= 1\n            elif dx < 0:\n                x_1 += 1\n            else:\n                break\n    if y_1 < y_2:\n        while y_1!= y_2:\n            cnt += 1\n            if dy > 0:\n                y_1 += 1\n            elif dy < 0:\n                y_1 -= 1\n            else:\n                break\n    elif y_1 > y_2:\n        while y_1!= y_2:\n            cnt += 1\n            if dy > 0:\n                y_1 -= 1\n            elif dy < 0:\n                y_1 += 1\n            else:\n                break\n    return str(cnt)\n"
    },
    {
        "number": 202,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport math\n\nx_1, y_1 = list(map(int, stdin.split()))\nx_2, y_2 = list(map(int, stdin.split()))\n\nd = int(round(math.sqrt((x_2 - x_1) ** 2 + (y_2 - y_1) ** 2)))\nprint(d)\n"
    },
    {
        "number": 202,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1 = list(map(int, stdin.split()))\n    x2, y2 = list(map(int, stdin.split()))\n    x = y = 0\n    d = abs(x1 - x2) + abs(y1 - y2)\n    for i in range(max(x1, x2), min(x1, x2) - 1, -1):\n        x += 1\n        y += 1\n        d = min(d, abs(x - x1) + abs(y - y1))\n    return d\n"
    },
    {
        "number": 202,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    return str(min(abs(x - x1) + abs(y - y1) for x1, y1 in [(x - 1, y), (x, y - 1), (x + 1, y), (x, y + 1), (x - 1, y + 1), (x + 1, y - 1), (x - 1, y - 1), (x + 1, y + 1)]))\n"
    },
    {
        "number": 202,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x, y = list(map(int, stdin.split()))\n    return str(abs(x - y) + max(x, y) + max(abs(x - y), abs(x + y)))"
    },
    {
        "number": 202,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1 = map(int, stdin.split())\n    x2, y2 = map(int, stdin.split())\n    return str(min(abs(x2 - x1), abs(y2 - y1)))"
    },
    {
        "number": 202,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1 = map(int, stdin.split())\n    x_2, y_2 = map(int, stdin.split())\n    return str(abs(x_2 - x_1) + abs(y_2 - y_1))\n"
    },
    {
        "number": 202,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1 = map(int, stdin.split())\n    x2, y2 = map(int, stdin.split())\n    x_diff = x2 - x1\n    y_diff = y2 - y1\n\n    if x_diff == 0 or y_diff == 0:\n        return abs(x1 - x2) + abs(y1 - y2)\n\n    x_steps = abs(x1 - x2)\n    y_steps = abs(y1 - y2)\n    print(x_steps + y_steps)\n"
    },
    {
        "number": 202,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1 = map(int, stdin.split())\n    x2, y2 = map(int, stdin.split())\n    return str(min((abs(x1 - x2) + abs(y1 - y2)), abs(x1 - x2), abs(y1 - y2)))\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 202,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = map(int, stdin.split())\n    steps = 0\n    while x_1!= x_2 and y_1!= y_2:\n        if abs(x_1 - x_2) == abs(y_1 - y_2):\n            steps += abs(x_1 - x_2) + abs(y_1 - y_2)\n            x_1 += (x_1 - x_2) // abs(x_1 - x_2)\n            y_1 += (y_1 - y_2) // abs(y_1 - y_2)\n        else:\n            steps += max(abs(x_1 - x_2), abs(y_1 - y_2))\n            if abs(x_1 - x_2) > abs(y_1 - y_2):\n                x_1 += 1\n            else:\n                y_1 += 1\n    return str(steps)\n"
    },
    {
        "number": 203,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    sequence = list(stdin.split()[1])\n    count = 0\n    while sequence:\n        employee = sequence.pop(0)\n        if employee == 'D':\n            if count % 2 == 1:\n                return \"D\"\n        else:\n            if count % 2 == 0:\n                return \"R\"\n        count += 1\n    return \"R\" if count % 2 == 0 else \"D\"\n"
    },
    {
        "number": 203,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin.pop(0))\n    employees = list(stdin)\n    employees_dict = {}\n    for employee in employees:\n        if employees_dict.get(employee):\n            employees_dict[employee] += 1\n        else:\n            employees_dict[employee] = 1\n\n    key_list = list(employees_dict.keys())\n    val_list = list(employees_dict.values())\n    val_list.sort(reverse=True)\n    key_list.sort(reverse=True)\n    new_list = key_list + val_list\n    employees_dict_sorted = dict(zip(new_list, list(range(len(new_list)))) )\n    for employee in employees:\n        if employees_dict_sorted.get(employee):\n            return str(employees_dict_sorted.get(employee))\n    return str(employees_dict_sorted.get(employees[0]))"
    },
    {
        "number": 203,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin_list = list(stdin.split())\n    ans = []\n    dep = rem = 0\n    for i in range(1, len(stdin_list)):\n        if stdin_list[i-1] == 'D':\n            dep += 1\n        elif stdin_list[i-1] == 'R':\n            rem += 1\n        if dep > rem:\n            ans.append('D')\n            dep -= 1\n        elif rem > dep:\n            ans.append('R')\n            rem -= 1\n        if i == len(stdin_list) - 1:\n            if dep > rem:\n                ans.append('D')\n            elif rem > dep:\n                ans.append('R')\n    return ''.join(ans)\n    # write your code here"
    },
    {
        "number": 203,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    votes = list(stdin)\n    counter = 0\n    winner = \"D\"\n    while counter!= n:\n        for i in range(len(votes)):\n            if votes[i] == \"D\":\n                winner = \"D\"\n                break\n            elif votes[i] == \"R\":\n                winner = \"R\"\n                break\n            elif votes[i] == \"0\":\n                votes[i] = \"D\"\n                winner = \"D\"\n                break\n        for i in range(len(votes)):\n            if votes[i] == \"D\":\n                votes[i] = \"0\"\n        counter += 1\n    return winner"
    },
    {
        "number": 203,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # YOUR CODE HERE\n    employee_list = stdin.split('\\n')\n    n = int(employee_list[0])\n    employee_list = list(employee_list[1])\n    employee_list = list(map(lambda x:x == 'R' or x == 'D', employee_list))\n    employee_list.sort(key=lambda x: x)\n    #print(employee_list)\n    for x in employee_list:\n        if x:\n            return x\n    return 'D'\n\nstdin = input()\n\nprint(solution(stdin))\n\n\n\n### another try\ndef"
    },
    {
        "number": 203,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    votes = stdin.split('\\n')\n\n    depublicans = []\n    remocrats = []\n\n    for vote in votes:\n        if vote[0] == 'D':\n            depublicans.append(vote)\n        else:\n            remocrats.append(vote)\n\n    while len(depublicans) > 1 and len(remocrats) > 1:\n        first = depublicans.pop(0)\n        second = remocrats.pop(0)\n\n        if first == second:\n            continue\n\n        if first!= 'D':\n            remocrats.append(second)\n        else:\n            depublicans.append(second)\n\n    if len(depublicans) == 0:\n        return 'R'\n    else:\n        return 'D'\n"
    },
    {
        "number": 203,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    data = list(stdin)\n    votes = {i: 0 for i in range(n)}\n    votes[0] = 1\n    for idx, d in enumerate(data):\n        votes[idx + 1] = 0\n        if d == 'D':\n            votes[idx + 1] = 1\n    for idx, d in enumerate(data):\n        if d == 'D':\n            votes[idx + 1] = 0\n    for idx, d in enumerate(data):\n        if d == 'R':\n            votes[idx + 1] = 0\n    for idx, d in enumerate(data):\n        if d == 'R':\n            votes[idx + 1] = 0\n    if 0 in votes:\n        return 'D'\n    return 'R'"
    },
    {
        "number": 203,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for _ in range(n):\n        a = stdin.split(\"\\n\")\n        count = 0\n        for i in range(1, n):\n            if (a[i] == 'D') and (i!= 1):\n                count += 1\n        if count == n - 1:\n            return 'D'\n    return 'R'\n"
    },
    {
        "number": 203,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # firstly, we need to consider all possible votes\n    # the order is not important\n    votes = list(stdin)\n    candidate_votes = []\n    while len(votes) > 1:\n        # the votes are divided into two part\n        # the first part, this is to determine candidate votes\n        # and if we can determine a new candidate, we check if this candidate\n        # is able to win in this election. If so, we add it to the candidate_votes list\n        votes_first_part = []\n        votes_second_part = []\n        candidate_votes.clear()\n        for vote in votes:\n            if vote == \"D\" or vote == \"R\":\n                votes_first_part.append(vote)\n            else:\n                votes_second_part.append(vote)\n        if len(votes_second_part) < 2:\n            break\n        for vote_first_part in votes_first_part:\n            for vote_second_part in votes_second_part:\n                if candidate_votes.count(vote_second_part) == 0:\n                    if vote_first_part == vote_second_part:\n                        candidate_votes.append(vote_first_part)\n                        votes_second_part.remove(vote_second_part)\n                        votes_first_part.remove(vote_first_part)\n                        break\n                    elif vote_first_part!= vote_second_part:\n                        candidate_votes.append(vote_second_part)\n                        votes_second_part.remove(vote_second_part)\n                        votes_first_part.remove(vote_first_part)\n                        break\n        votes = votes_second_part\n    if len(votes) == 1:\n        return votes[0]\n    else:\n        return \"D\""
    },
    {
        "number": 203,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, = stdin.split()\n    n = int(n)\n    votes = stdin.split()\n    voted = []\n    for i in range(1, n + 1):\n        voted.append(votes.count('D' if i < n//2 else 'R'))\n    while True:\n        for i in range(1, n + 1):\n            voted[i - 1] -= 1\n            if voted[i - 1] <= 0:\n                voted[i - 1] = 0\n                votes.remove('D' if i < n//2 else 'R')\n        if len(votes) == 1:\n            return 'D' if votes[0] == 'D' else 'R'\nn = int(input())\nvotes = input()\nsolution(n, votes)\n\nfrom itertools import product\nfor n in range(1, 200):\n    print(' '.join(sorted(list(product('DRR', repeat=n)))))"
    },
    {
        "number": 204,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x, y = map(int, stdin.split())\n    return str(int((x / y) / (a / b)))\n"
    },
    {
        "number": 204,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 204,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x, y = map(int, stdin.split())\n    # constraints:\n    if a > b:\n        return 0\n    # x and y should not be equal\n    if x == y:\n        return 0\n    # constraint on x\n    if x <= a:\n        return 0\n    # constraint on y\n    if y <= b:\n        return 0\n    return 1\n"
    },
    {
        "number": 204,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x, y = map(int, stdin.split())\n    ans = 0\n    for w in range(a + 1):\n        for h in range(b + 1):\n            if w / h > x and w / h < y:\n                ans += 1\n    return str(ans)\n"
    },
    {
        "number": 204,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x, y, a, b = map(int, stdin.split())\n    x1 = y1 = 0\n    x2 = y2 = 0\n    count = 0\n    while y1 < a and x1 <= x and y2 < b and x2 <= x:\n        if (x1 + y1) / (x2 + y2) == x / y:\n            count += 1\n        x1 += 1\n        x2 += 1\n        y1 += 1\n        y2 += 1\n    return str(count)\n"
    },
    {
        "number": 204,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x, y = map(int, stdin.split())\n    return str(len(get_possible_triples(a, b, x, y)))\n\n\ndef"
    },
    {
        "number": 204,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x, y = map(int, stdin.split())\n    count = 0\n    for w in range(a, b + 1):\n        for h in range(a, b + 1):\n            if (w / h) == (x / y) and w <= x and h <= y:\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 204,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x, y = map(int, stdin.split())\n    if not (x < a and y < b) or (x > a and y > b):\n        print(0)\n        return\n    print(sum(i > x / j for i, j in zip(range(a + 1, b + 1), range(x, y + 1))))\n"
    },
    {
        "number": 204,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x, y = map(int, stdin.split())\n    count = 0\n    for w in range(a, a*x+1, x):\n        h = round(w / (x/y), 2)\n        if h >= y:\n            if w > b:\n                count += 1\n                continue\n            elif w/h == x/y:\n                count += 1\n    return str(count)\n\nprint(solution(input()))\n"
    },
    {
        "number": 204,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x, y = map(int, stdin.split())\n    def test(a, b, x, y, w, h):\n        return (w <= a and h <= b) and (x <= w / h <= y)\n\n    from itertools import combinations_with_replacement\n    for width in range(a, a + 100):\n        for height in range(b, b + 100):\n            for aspect in combinations_with_replacement((width, height), r=2):\n                if test(*aspect, width, height):\n                    print(width, height)\n                    return\n    print(0)\n"
    },
    {
        "number": 205,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, b = stdin.split()\n    return str(num_of_trailing_zero_digits(int(n), int(b)))\n\ndef"
    },
    {
        "number": 205,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n,b = int(stdin.strip().split()[0]),int(stdin.strip().split()[1])\n    res = 0\n    while n!= 1:\n        if n%b == 0:\n            n = n//b\n        else:\n            n = n*b + (n//b)*b\n        res += 1\n    print(res)\n    return None"
    },
    {
        "number": 205,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('6 9')\n    '1'\n    >>> solution('38 11')\n    '3'\n    >>> solution('5 2')\n    '3'\n    >>> solution('5 10')\n    '1'\n    \"\"\"\n    n, b = map(int, stdin.strip().split())\n    a = 0\n    while n > 0:\n        a += (n % b) * (10**a)\n        n //= b\n    return str(a)\n"
    },
    {
        "number": 205,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n  n, b = map(int, stdin.split())\n  print(len(str(n))-len(str(bin(n)).replace(\"0b\", \"\")))\n\nsolution(input())\n"
    },
    {
        "number": 205,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\n----\n\nstdin = input()\n"
    },
    {
        "number": 205,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n,b = map(int, stdin.split())\n    res = 1\n    if n >= 0 and b >= 0 and n < 10**18 and b < 10**12:\n        count = 0\n        count += res * b\n        while n > 0:\n            if n % b == 0:\n                res *= b\n                n = n // b\n            else:\n                res *= b\n                count += 1\n                n = n // b\n        return str(count)\n    else:\n        return '-1'"
    },
    {
        "number": 205,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, b = map(int, stdin.split())\n    r = ''\n    while True:\n        r += str(x % b)\n        x = x // b\n        if x == 0:\n            break\n        x *= 10\n        b = 10\n    return r[::-1]\n\n\ndef"
    },
    {
        "number": 205,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    _, num = stdin.split()\n    num = int(num)\n    ans = 0\n    while num > 0:\n        if num % 2 == 0:\n            num = num // 2\n        else:\n            num -= 1\n        ans += 1\n    return str(ans)\n"
    },
    {
        "number": 205,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    For stdin inputs, the return value is the number of trailing zeros\n    in the $b$-ary representation of the input factorial of n.\n    \"\"\"\n    num, base = stdin.split()\n    return str(int(num) % int(base) == 0)\n\nprint(solution(input()))\n"
    },
    {
        "number": 205,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n'''\n"
    },
    {
        "number": 206,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    _, a, b = stdin.split()\n    return sum(range(int(a), int(b)+1))\n"
    },
    {
        "number": 206,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    _, a, b = map(int, stdin.split())\n    return str(sum(i + 1 for i in range(b) if i > a))\n"
    },
    {
        "number": 206,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    m, a, b = list(map(int, stdin.split()))\n    if m == 0:\n        return 0\n    def jump(a, b):\n        return 0 if a == 0 else b if a > b else (1 + max(a - b, 0))\n    def sums(m):\n        return sum(i + 1 for i in range(m))\n    return sums(m) - sums(jump(a, b))\n"
    },
    {
        "number": 206,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, m = map(int, stdin.split())\n    if m > 10 ** 9:\n        return \"impossible\"\n    if a > 10 ** 5 or b > 10 ** 5:\n        return \"impossible\"\n    if m == 0 and a == b:\n        return \"impossible\"\n    if a > b:\n        return \"impossible\"\n    if a == 0:\n        return \"impossible\"\n    if b == 0:\n        return \"impossible\"\n\n    res = 1\n    for i in range(1, m + 1):\n        res += i + 1\n    return str(res)\n\n\n\n-----TESTING----\nimport io\nimport unittest\n\n\nclass TestPractice(unittest.TestCase):\n    def test_simple_case(self):\n        output = solution(\"5 1 3\")\n        self.assertEqual(output, \"19\")\n\n    def test_simple_case_2(self):\n        output = solution(\"4 4 5\")\n        self.assertEqual(output, \"10\")\n\n    def test_impossible_case(self):\n        output = solution(\"0 1 3\")\n        self.assertEqual(output, \"impossible\")\n\n    def test_impossible_case_2(self):\n        output = solution(\"10 0 0\")\n        self.assertEqual(output, \"impossible\")\n\n    def test_large_case(self):\n        output = solution(\"100 100000 1\")\n        self.assertEqual(output, \"500000001500000001\")\n"
    },
    {
        "number": 206,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    m, a, b = map(int, stdin.split())\n    return str(sum(i+1 for i in range(m+1) if i+1 >= a and i-1 <= b))\n"
    },
    {
        "number": 206,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a,b,m= map(int,stdin.split())\n    sum=0\n    for i in range(m):\n        if (i+1)%2==0:\n            sum+=i+1\n        else:\n            sum+=i\n    return str(sum)\n\ndef"
    },
    {
        "number": 206,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    m, a, b = map(int, stdin.split())\n    f = 0\n    for i in range(m+1):\n        f += i\n    return str(f)"
    },
    {
        "number": 206,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    m, a, b = map(int, stdin.split())\n    if m == 0:\n        return str(0)\n    if a == b == 0:\n        return str(m)\n    def count(m):\n        i = 0\n        while i * (i + 1) <= m:\n            i += 1\n        return i - 1\n\n    return str(count(m) + count(m - a) + count(m - b))\n"
    },
    {
        "number": 206,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    m, a, b = map(int, stdin.split())\n    return str(sum([i + 1 for i in range(m) if i + a >= 0 and i + b >= 0]))\n"
    },
    {
        "number": 206,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 207,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n'''\nimport re\nimport sys"
    },
    {
        "number": 207,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.split()))\n\n    odds = []\n    for i in range(n):\n        if a[i] % 2!= 0:\n            odds.append(a[i])\n            if len(odds) > 2:\n                return \"No\"\n    if len(odds) % 2!= 0:\n        return \"No\"\n    if odds[0] % 2!= 0:\n        odds.pop(0)\n    if odds[len(odds)-1] % 2!= 0:\n        odds.pop()\n\n    if len(odds) == 0:\n        return \"Yes\"\n    else:\n        if odds[0] % 2!= 0:\n            odds.pop(0)\n            if len(odds) == 0:\n                return \"Yes\"\n        else:\n            return \"No\"\n\n\nprint(solution(input()))"
    },
    {
        "number": 207,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 207,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    sequence = list(map(int, stdin.readline().split()))\n    odd_segments = False\n    for i in range(len(sequence) - 1):\n        if sequence[i] % 2:\n            if i == 0:\n                odd_segments = True\n            if odd_segments:\n                odd_segments = False\n                continue\n            if sequence[i + 1] % 2:\n                odd_segments = False\n    if odd_segments:\n        return \"No\"\n    else:\n        return \"Yes\"\nsolution(['4', '3', '9', '3', '1', '5', '1', '0', '1', '5', '1', '5'])\n"
    },
    {
        "number": 207,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2!= 0:\n        return \"No\"\n    A = sorted(map(int, stdin.split()))\n    s = 0\n    e = 1\n    while e < n and A[s] % 2!= 0 and A[e] % 2!= 0:\n        s += 1\n        e += 1\n    if e == n:\n        return \"No\"\n    return \"Yes\""
    },
    {
        "number": 207,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    seq = list(map(int, stdin.split()))\n\n    if (n % 2)!= 0 or n < 2:\n        return \"No\"\n\n    i = 0\n    j = n - 1\n\n    while i < j:\n        if seq[i] % 2 == 1 and seq[j] % 2 == 1:\n            i += 1\n            j -= 1\n        elif seq[i] % 2!= 0 and seq[j] % 2!= 0:\n            return \"No\"\n        elif seq[i] % 2!= 0 and seq[j] % 2!= 0:\n            j -= 1\n        else:\n            i += 1\n            j -= 1\n\n    return \"Yes\"\n"
    },
    {
        "number": 207,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    a = stdin[1]\n    return 'Yes' if is_odd_subsegment(a, n) else 'No'\n\ndef"
    },
    {
        "number": 207,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split('\\n')\n    n = int(stdin[0])\n    sequence = list(map(int, stdin[1].split(' ')))\n\n    def isodd(sequence):\n        return any(x % 2!= 0 for x in sequence)\n\n    def divides(sequence, subsequence):\n        if len(subsequence) > n or len(sequence) < n:\n            return False\n        return any(sequence[i] % 2!= 0 and subsequence[i] % 2!= 0 or sequence[i] % 2 == 0 and subsequence[i] % 2 == 0 for i in range(len(subsequence)))\n\n    def valid(sequence, subsequence):\n        return (subsequence[0] % 2 == 0 and subsequence[-1] % 2 == 0) or (subsequence[0] % 2 == 1 and subsequence[-1] % 2 == 1)\n\n    def divide(sequence, subseq):\n        if len(subseq) > n or len(sequence) < n:\n            return False\n        return any(sequence[i] % 2 == 0 and subseq[i] % 2!= 0 or sequence[i] % 2 == 1 and subseq[i] % 2!= 1 or sequence[i] % 2 == subseq[i] % 2 for i in range(len(subseq)))\n\n    subsequences = []\n    for i in range(len(sequence) - n + 1):\n        if isodd(sequence[i:i + n]):\n            subsequences.append(sequence[i:i + n])\n    for subsequence in subsequences:\n        if not divides(sequence, subsequence):\n            continue\n        if any(valid(sequence, subseq) for subseq in subsequences):\n            continue\n        if any(divide(sequence, subseq) for subseq in subsequences):\n            continue\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 207,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sequence = list(map(int, stdin.split(\" \")))\n\n    if n % 2 == 1:\n        return \"No\"\n\n    for i in range(0, len(sequence), 2):\n        if sequence[i] % 2!= 1:\n            return \"No\"\n\n    for i in range(1, len(sequence), 2):\n        if sequence[i] % 2!= 1:\n            return \"No\"\n\n    return \"Yes\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 207,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    sequence = stdin.split(\"\\n\")[0]\n    n = len(sequence)\n    subsegments = [sequence[i:i+2] for i in range(0, n, 2)]\n    print(subsegments)\n    for subsegment in subsegments:\n        if not (subsegment[0] % 2 and subsegment[1] % 2):\n            return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 208,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = list(map(int, stdin.split()))\n    x_3 = x_1 + y_2\n    y_3 = y_2 + x_1\n    x_4 = x_2 + y_1\n    y_4 = y_1 + x_2\n    if (x_1 == x_2 and y_1 == y_2) or (x_3 == x_4 and y_3 == y_4):\n        return '-1'\n    return f\"{x_3} {y_3} {x_4} {y_4}\"\n    # Write your code here\n"
    },
    {
        "number": 208,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = list(map(int, stdin.split()))\n    ans = [-1] * 4\n    for i in range(4):\n        ans[i] = x_1 if (x_1 == x_2 and y_1 == y_2) else (x_2 if x_1 == x_2 else (y_1 if y_1 == y_2 else (x_1 if x_1 == x_2 else x_2)))\n    return''.join(map(str, ans))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 208,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.rstrip()\n    trees = stdin.split(\" \")\n    \n    x_1 = int(trees[0])\n    y_1 = int(trees[1])\n    x_2 = int(trees[2])\n    y_2 = int(trees[3])\n    if x_1 == x_2 and y_1 == y_2:\n        return '-1'\n    else:\n        delta_x = x_2 - x_1\n        delta_y = y_2 - y_1\n        if delta_x > delta_y:\n            if delta_y == 1:\n                return str(x_1) +'' + str(y_1)\n            else:\n                return str(x_1) +'' + str(y_1 + 1)\n        elif delta_x < delta_y:\n            if delta_x == 1:\n                return str(x_1 + 1) +'' + str(y_1)\n            else:\n                return str(x_1 + 1) +'' + str(y_1 + 1)\n        else:\n            if delta_x == 1:\n                return str(x_1) +'' + str(y_1)\n            else:\n                return str(x_1 + 1) +'' + str(y_1)\n"
    },
    {
        "number": 208,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split())\n    if x1 == x2 and y1 == y2:\n        return '0 0 0 1'\n    if x1 == x2 and y1!= y2:\n        return '-1'\n    if x1!= x2 and y1 == y2:\n        return '-1'\n    if x1!= x2 and y1!= y2:\n        return str(max(min(x1, x2), min(y1, y2))) +'' + str(min(max(x1, x2), max(y1, y2)))\nstdin = input()\nprint(solution(stdin))\n\ndef"
    },
    {
        "number": 208,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    x1, y1, x2, y2 = map(int, lines[1].split())\n    for i in range(1, 3):\n        if abs(x1 - lines[i][0]) == abs(y1 - lines[i][1]) and abs(x2 - lines[i][2]) == abs(y2 - lines[i][3]):\n            return str(lines[i - 1][0]) + \" \" + str(lines[i - 1][1]) + \" \" + str(lines[i - 1][2]) + \" \" + str(lines[i - 1][3])\n    return \" -1\"\n"
    },
    {
        "number": 208,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def distance(x1: int, y1: int, x2: int, y2: int) -> int:\n        return (x1 - x2)**2 + (y1 - y2)**2\n    stdin = list(map(int, stdin.split()))\n    x1, y1, x2, y2 = stdin\n    trees = []\n    for i in range(x1, x2 + 1):\n        for j in range(y1, y2 + 1):\n            trees.append((i, j))\n    trees.sort(key=lambda t: distance(x1, y1, *t))\n    return \" \".join(map(str, trees[:2])) + \"\\n\" + \" \".join(map(str, trees[2:])) if len(trees) == 4 else \"1 0 0 1\"\n"
    },
    {
        "number": 208,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, c1, c2 = stdin.split()\n    n = int(n)\n    m = int(m)\n    c1 = list(map(int, c1.split()))\n    c2 = list(map(int, c2.split()))\n    x1, y1 = c1\n    x2, y2 = c2\n    if x1 == x2 and y1 == y2:\n        return \"0\"\n    if x1 == x2 and y1 > y2:\n        return \"0\"\n    if y1 == y2 and x1 > x2:\n        return \"0\"\n    if x1 > x2:\n        return \"0\"\n    x3, y3 = (x1 + x2) // 2, (y1 + y2) // 2\n    x4, y4 = (x1 + x2) // 2, (y1 + y2) // 2\n    x5, y5 = (x3 + x4) // 2, (y3 + y4) // 2\n    if x5 > x1 and x5 < x2 and y5 > y1 and y5 < y2:\n        return \"%d %d %d %d\" % (x3, y3, x4, y4)\n    else:\n        return \"0\"\n"
    },
    {
        "number": 208,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def is_tree(x1, y1, x2, y2):\n        return (x2 - x1) == (y2 - y1)\n\n    lines = stdin.split()\n    x1 = int(lines[0])\n    y1 = int(lines[1])\n    x2 = int(lines[2])\n    y2 = int(lines[3])\n    if x1 == 0 and y1 == 0 and x2 == 1 and y2 == 1:\n        return str(-1)\n\n    if is_tree(x1, y1, x2, y2):\n        return str(x2, y2, x1, y1)\n    if is_tree(x2, y2, x1, y1):\n        return str(x1, y1, x2, y2)\n    if is_tree(x1, y2, x2, y1):\n        return str(x2, y1, x1, y2)\n    if is_tree(x2, y1, x1, y2):\n        return str(x1, y2, x2, y1)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 208,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Takes in input, and prints out the answer\n    \"\"\"\n    x1, y1, x2, y2 = map(int, stdin.split())\n    x3, y3, x4, y4 = 1, 1, 2, 2\n    if x1 == x2:\n        if y3 <= y4 and y3 >= y2:\n            return str(x3) +'' + str(y3) +'' + str(x4) +'' + str(y4)\n    elif y1 == y2:\n        if x3 <= x4 and x3 >= x1:\n            return str(x3) +'' + str(y3) +'' + str(x4) +'' + str(y4)\n    elif y1 == y2:\n        if x3 <= x4 and x3 >= x1:\n            return str(x3) +'' + str(y3) +'' + str(x4) +'' + str(y4)\n    else:\n        if x3 <= x4 and x3 >= x1:\n            return str(x3) +'' + str(y3) +'' + str(x4) +'' + str(y4)"
    },
    {
        "number": 208,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    nums = [int(x) for x in stdin.split()]\n    max_x = max(nums[0], nums[2])\n    min_x = min(nums[0], nums[2])\n    max_y = max(nums[1], nums[3])\n    min_y = min(nums[1], nums[3])\n    trees = []\n    for i in range(min_x, max_x):\n        trees.append([i, nums[1]])\n        trees.append([i, nums[3]])\n    for i in range(min_y, max_y):\n        trees.append([nums[0], i])\n        trees.append([nums[2], i])\n    for tree in trees:\n        if tree not in trees:\n            return \" \".join([str(i) for i in tree])\n    return -1\n"
    },
    {
        "number": 209,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y, n = map(int, stdin.split())\n    return str(x * y + x + y + x + y)"
    },
    {
        "number": 209,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    seq = [x]\n    for i in range(3):\n        seq.append(seq[i] + seq[i + 1])\n    print(seq)\n    return str(seq[y % len(seq)])\n"
    },
    {
        "number": 209,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, y = int(stdin.split()[0]), int(stdin.split()[1])\n    if x == y:\n        return str(x)\n    if x == 0:\n        return str(y)\n    if y == 0:\n        return str(x)\n    if x % 2 == 0:\n        return str(y)\n    if y % 2 == 0:\n        return str(x)\n    if x % 2 == 1:\n        return str(y)\n    if y % 2 == 1:\n        return str(x)\n    return str(x)\n"
    },
    {
        "number": 209,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, y, n = map(int, stdin.split())\n    a = (x + 1) % (y + 1)\n    b = (x + 2) % (y + 1)\n    return str(a) + str(b)\n"
    },
    {
        "number": 209,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x, y = list(map(int, stdin.split()))\n    dp = [None] * (x + y + 1)\n    dp[0] = x\n    dp[1] = y\n    for i in range(2, len(dp)):\n        dp[i] = dp[i - 1] + dp[i - 2]\n    return str(dp[x + y])\n"
    },
    {
        "number": 209,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x, y, n = map(int, stdin.split())\n    return str(x + y)"
    },
    {
        "number": 209,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    mod = 1000000007\n    f = x * y\n    f_1 = 0\n    f_2 = 0\n    f_3 = 1\n    for i in range(3, x):\n        f_i = (f_1 + f_2) % mod\n        f_2 = f_1\n        f_1 = f_i\n    return str(f_1 % mod)"
    },
    {
        "number": 209,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    num1, num2 = int(stdin.split()[0]), int(stdin.split()[1])\n    f_n = num1 + num2\n    for i in range(2, num1 + num2):\n        f_n += num1 + num2 - i\n    return str(f_n % 1000000007)\n"
    },
    {
        "number": 209,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x, y, n = int(stdin.split()[0]), int(stdin.split()[1]), int(stdin.split()[2])\n    f1 = x\n    f2 = y\n    for i in range(2, n + 1):\n        f1, f2 = f2, f1 + f2\n    return str(f2 % 1000000007)\n"
    },
    {
        "number": 209,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, y, n = map(int, stdin.split())\n    f = x + y\n    f2 = f + f\n    f3 = f2 + f\n    return str(f3 % 1000000007)\nprint(solution(input()))\n"
    },
    {
        "number": 210,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(1, n + 1):\n        sum = 0\n        for j in range(n):\n            if j == 0 or j == i - 1:\n                sum += int(stdin[j])\n            else:\n                if sum - int(stdin[j])!= 0:\n                    return \"NO\"\n        if sum!= 0:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 210,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    max_sum = 0\n    n = int(stdin[0])\n    arr = list(map(int, stdin[1].split()))\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            sum = 0\n            for k in range(i):\n                sum += arr[k]\n            for k in range(i, j):\n                sum += arr[k]\n            if sum == 0:\n                if max_sum == 0:\n                    max_sum = sum\n                else:\n                    max_sum = max(max_sum, sum)\n    return \"YES\" if max_sum == 0 else \"NO\"\n"
    },
    {
        "number": 210,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    a = sorted(a)\n    if n == 1 and a[0] == 0:\n        return \"NO\"\n    if n == 1 and a[0] > 0:\n        return \"YES\"\n    count = 1\n    sum = a[0]\n    while sum!= 0:\n        count += 1\n        sum += a[0]\n        a = a[1:]\n        if sum > 0:\n            sum = sum - a[0]\n    if count > 1:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 210,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    if sum(a) == 0:\n        return 'NO'\n    else:\n        def isValid(a, n):\n            for i in range(1, n):\n                if (a[i] < a[0] + a[i-1]):\n                    return False\n            return True\n\n        def getArray(a):\n            n = len(a)\n            ans = []\n            arr = []\n            flag = False\n            for i in range(n):\n                if a[i] >= 0:\n                    if flag:\n                        arr.append(a[i])\n                        if len(arr) > 1:\n                            ans.append(arr)\n                            arr = []\n                    else:\n                        arr.append(a[i])\n                        if i == n-1:\n                            ans.append(arr)\n                else:\n                    flag = True\n            return ans\n\n        def getSum(a):\n            n = len(a)\n            sum_arr = []\n            for i in range(n-1):\n                sum_arr.append(a[i] + a[i+1])\n            sum_arr.append(a[-1])\n            return sum_arr\n\n        def part(a, ans, n):\n            sum_a = getSum(a)\n            if sum(sum_a) == 0:\n                ans.append(getArray(a))\n            else:\n                for i in range(1, n):\n                    if sum_a[i] == 0:\n                        part(a[i:], ans, i)\n                        break\n                    else:\n                        part(a, ans, i)\n            return ans\n\n        ans = []\n        n = len(a)\n        part(a, ans, n)\n        ans = set(map(tuple, ans))\n        if len(ans) == n:\n            return 'YES'\n        else:\n            for i in range(len(ans)):\n                if len(ans[i]) == 1:\n                    return 'YES'\n            return 'NO'\n"
    },
    {
        "number": 210,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    n = int(stdin[0])\n    arr = list(map(int, stdin[1].split()))\n    length = len(arr)\n    if length < 1 or length > 50 or len(set(arr))!= length or min(arr) < -10**3 or max(arr) > 10**3:\n        return 'NO'\n    ans = 0\n    k = 1\n    while True:\n        if sum(arr) == 0:\n            break\n        if max(arr) - min(arr) < 0:\n            return 'NO'\n        new_arr = []\n        for i in range(k):\n            if sum(arr[i::k]) > 0:\n                new_arr.append(arr[i])\n            else:\n                break\n        if len(new_arr) < k:\n            break\n        ans += 1\n        arr = new_arr\n    ans += 1\n    for i in range(k):\n        print(i+1, i+2)\n    for i in range(k):\n        print(min(arr) + i + 1, max(arr) + i + 1)\n    return 'YES'\n\nprint(solution(input()))\n\ndef"
    },
    {
        "number": 210,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    arr = stdin.split(\"\\n\")\n    for i in arr:\n        arr = i.split()\n        k = int(arr[0])\n        n = int(arr[1])\n        arr = list(map(int, arr[2:]))\n        if n!= len(arr):\n            return \"NO\"\n        if sum(arr)!= 0:\n            return \"NO\"\n        arr.sort()\n        count = 1\n        for i in range(len(arr)-1):\n            if arr[i]!= arr[i+1]:\n                count += 1\n            else:\n                count += 1\n                if count == k:\n                    break\n                else:\n                    count = 1\n        if count == k:\n            return \"YES\"\n        else:\n            return \"NO\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 210,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    arr = list(map(int, stdin.split()))\n    \n    if len(set(arr)) == 1 or 0 in arr:\n        return \"NO\"\n    \n    if not len(arr) % 2:\n        return \"YES\"\n    \n    \n    ans = 1\n    cur_sum = arr[0]\n    for i in range(1, len(arr)):\n        cur_sum += arr[i]\n        if cur_sum == 0:\n            return \"YES\"\n        if cur_sum > 0:\n            ans += 1\n            cur_sum = cur_sum + arr[i]\n    \n    if not len(arr) % 2:\n        return \"YES\"\n    \n    if cur_sum > 0:\n        ans += 1\n    \n    return \"YES\" if ans == 1 else \"NO\""
    },
    {
        "number": 210,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(int, stdin.split()))\n    if sum(A) == 0:\n        print('YES')\n        print(len(A), end=' ')\n        for elem in A:\n            print(elem, end=' ')\n        return\n    for i in range(len(A)):\n        if A[i] > 0:\n            A.append(0)\n            A[i:] = sorted(A[i:])\n            sum_of_elems = sum(A)\n            if sum_of_elems % 2 == 0:\n                if A[i] >= -sum_of_elems / 2:\n                    A.pop(i)\n                    A = sorted(A)\n                    print('YES')\n                    print(len(A), end=' ')\n                    for elem in A:\n                        print(elem, end=' ')\n                    return\n            else:\n                if A[i] >= sum_of_elems / 2:\n                    A.pop(i)\n                    A = sorted(A)\n                    print('YES')\n                    print(len(A), end=' ')\n                    for elem in A:\n                        print(elem, end=' ')\n                    return\n        else:\n            A.pop(i)\n            A = sorted(A)\n            print('YES')\n            print(len(A), end=' ')\n            for elem in A:\n                print(elem, end=' ')\n            return\n\n    print('NO')\n    return"
    },
    {
        "number": 210,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    arr = list(map(int, stdin.split()[1]))\n    \n    if not arr:\n        return 'NO'\n    \n    total = sum(arr)\n    k = 0\n    \n    if total % 2!= 0:\n        return 'NO'\n    \n    if total == 0:\n        return 'YES'\n    \n    for i in range(1, n):\n        if sum(arr[:i])!= 0:\n            break\n        if sum(arr[i:])!= 0:\n            break\n        if sum(arr[:i] + arr[i:])!= 0:\n            break\n        k += 1\n    if k == 0:\n        return 'NO'\n    else:\n        return str(k) +'' +''.join([str(x) for x in range(1, k + 1)])\n\nprint(solution(input()))"
    },
    {
        "number": 210,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    if all(x == 0 for x in a):\n        return \"NO\"\n    if max(a) == 0:\n        return \"YES\"\n\n    total = sum(a)\n\n    if total % 2!= 0:\n        return \"NO\"\n\n    s = sum(a)\n\n    if s == 0:\n        return \"YES\"\n\n    parts = math.floor(s / 2)\n    count = 0\n    total = 0\n    subarrays = []\n    for i in range(n):\n        if total < parts:\n            total += a[i]\n            count += 1\n        else:\n            total -= a[i]\n            subarrays.append(count)\n            count = 1\n            total = a[i]\n            count += 1\n\n    if count > 0:\n        subarrays.append(count)\n\n    for i in range(len(subarrays)):\n        print(i, subarrays[i])\n\n    print(subarrays)\n    return \"YES\"\n"
    },
    {
        "number": 211,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n,m,k = map(int, stdin.split())\n    c = 0\n    s = 0\n    while k!=0:\n        if (c+k) % n!= 0:\n            s += (c+k)//n\n            k = (c+k) % n\n            c = 0\n        else:\n            k-=1\n            c+=1\n    return str(s)\n\nprint(solution(input()))"
    },
    {
        "number": 211,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    return f\"{(sum(n for _ in range(m)) + k) // (n * (n - 1) // 2)}\"\nprint(solution(input()))"
    },
    {
        "number": 211,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = list(map(int, stdin.split()))\n    return str(sum([n for i in range(k)]) % 1000000009)"
    },
    {
        "number": 211,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    if n == 0 or m == 0 or k == 0:\n        return '0'\n    if k == 1:\n        return '1'\n    score = 0\n    for i in range(n, m + 1):\n        if i == k:\n            score = score + i * 2\n            k = 0\n        else:\n            score = score + i\n    return str(score % 1000000009)\n\nprint(solution(input()))\n"
    },
    {
        "number": 211,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    return str(k * n - min(k, m))"
    },
    {
        "number": 211,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    return str(n - (m * (k + 1) // 2))\n\nprint(solution(input()))\n"
    },
    {
        "number": 211,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = stdin.split()\n    n, m, k = int(n), int(m), int(k)\n    score = 0\n    score = (m // (k + 1)) * k\n    return str(score % 1000000009)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 211,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    return str(k + ((n - k * m) // (k + 1) + 1) % (k + 1))\n"
    },
    {
        "number": 211,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    score = 0\n    q = 0\n    for i in range(m):\n        score += (q+1)*(i+1)\n        q = i+1\n    score += (k-q)*q\n    print(score)\nsolution(input())\n"
    },
    {
        "number": 211,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = stdin.split()\n    n, m, k = int(n), int(m), int(k)\n    num_wrong = m\n    num_correct = k\n    wrong = 0\n    correct = 0\n    while num_wrong > 0:\n        if correct > num_correct:\n            wrong += correct\n            correct = 0\n        else:\n            correct += 1\n        num_wrong -= 1\n    return str(wrong)"
    },
    {
        "number": 212,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = stdin\n    n=str(n)\n    \n    # n = str(n)\n    # n = n.replace(\"0\", \"\")\n    # n = n.replace(\" \", \"\")\n    \n    if n.startswith(\"0\") or n.startswith(\"-0\"):\n        return \"NO\"\n    if len(n)<2 or int(n)%8==0:\n        return \"NO\"\n    for i in range(len(n)-2):\n        if int(n[i:i+3])%8==0:\n            continue\n        else:\n            return \"NO\"\n    return \"YES\"\n\nsolution(\"0\")\nsolution(\"-0\")\nsolution(\"-0.12345678\")\nsolution(\"-0.1234567889\")\nsolution(\"0.12345678\")\nsolution(\"0.1234567890\")\nsolution(\"0.123456789\")\nsolution(\"-0.123456789\")\nsolution(\"-0.12345678\")\nsolution(\"-0.1234567\")\nsolution(\"-0.12345\")\nsolution(\"-0.123\")\nsolution(\"-0.12\")\nsolution(\"0.123\")\nsolution(\"0.12\")\nsolution(\"0.12345\")\nsolution(\"0.1234567890\")\nsolution(\"-0.1234567890\")\nsolution(\"-0.1234567890.\")\nsolution(\"-0.1234567890.1\")\nsolution(\"0.1234567890.1\")\nsolution(\"0.1234567890.1.\")\nsolution(\"0.1234567890.1.\")\nsolution(\"0.1234567890.1.1\")\nsolution(\"0.1234567890.1.1.\")\nsolution(\"0.1234567890.1.1.\")\nsolution(\"0.1234567890.1.1.\")\nsolution(\"0.1234567890.1.1.1\")\nsolution(\"0.1234567890.1.1.1.\")\nsolution(\"0.1234567890.1.1.1.\")\nsolution(\"0.1234567890.1.1.1.\")\nsolution(\"0.1234567890.1.1.1.\")\nsolution(\"0.1234567890.1.1.1.\")\nsolution(\"0.1234567890.1.1.1.\")\nsolution(\"0.1234567890.1.1.1.\")\nsolution(\"0.1234567890.1.1.1.\")\nsolution(\"0.1234567890.1.1.1.\")\nsolution(\"0.1234567890.1.1.1.\")\nsolution(\"0.1234567890.1.1.1.\")\nsolution(\"0.1234567890.1.1.1.\")\nsolution(\"0.1234567890.1.1.1.\")\nsolution(\"0.1234567890.1.1.1.\")\nsolution(\"0.1234567890.1.1.1.\")\nsolution(\"0.1234567890.1.1.1.\")\nsolution(\"0.1234567890.1.1.1.\")\nsolution(\"0.1234567890.1.1.1.\")\nsolution(\"0.1234567890.1.1.1.\")\nsolution(\"0.1234567890.1.1.1.\")\nsolution(\"0.1234567890.1.1.1.\")\nsolution(\"0.1234567890.1.1.1.\")\nsolution(\"0.1234567890.1.1.1.\")\nsolution(\"0.1234567890.1.1.1.\")\nsolution(\"0.1234567890.1.1.1.\")\nsolution(\"0.1234567890.1.1.1.\")\nsolution(\"0.1234567890.1.1.1.\")\nsolution(\"0.1234567890.1.1.1.\")\nsolution(\"0.1234567890.1.1.1.\")\nsolution(\"0.1234567890.1.1.1.\")\nsolution(\"0.1234567890.1.1.1.\")\nsolution(\"0.1234567890.1.1.1.\")\nsolution(\"0.1234567890.1.1.1.\")\nsolution(\"0.1234567890.1.1.1.\")\nsolution(\"0.1234567890.1.1.1.\")\nsolution(\"0.1234567890.1.1.1.\")\nsolution(\"0.1234567890.1.1.1.\")\nsolution(\"0.1234567890.1.1.1.\")\nsolution(\"0.1234567890.1.1.1.\")\nsolution(\"0.1234567890.1.1.1.\")\nsolution(\"0.1234567890.1.1.1.\")\nsolution(\"0.1234567890.1.1.1.\")\nsolution(\"0.1234567890.1.1.1.\")\nsolution(\"0.1234567890.1.1.1.\")\nsolution(\"0.1234567890.1.1.1.\")\nsolution(\"0.1234567890.1.1.1.\")\nsolution(\"0.1234567890.1.1.1.\")\nsolution(\"0.1234567890.1.1.1.\")\nsolution(\"0.1234567890.1.1.1.\")\nsolution(\"0.1234567890.1.1.1.\")\nsolution(\"0.1234567890.1.1.1.\")\nsolution(\"0.1234567890.1.1.1.\")\nsolution(\"0.1234567890.1.1.1.\")\nsolution(\"0.1234567890.1.1.1.\")\nsolution(\"0.1234567890.1.1.1.\")\nsolution(\"0.1234567890.1.1.1.\")\nsolution(\"0.1234567890.1.1.1.\")\nsolution(\"0.1234567890.1.1.1.\")\nsolution(\"0.1234567890.1.1.1.\")\nsolution(\"0.1234567890.1.1.1.\")\nsolution(\"0.1234567890.1.1.1.\")\nsolution(\"0.1234567890.1.1.1.\")\nsolution(\"0.1234567890.1.1.1.\")\nsolution(\"0.1234567890.1.1.1.\")\nsolution(\"0.1234567890.1.1.1.\")\nsolution(\"0.1234567890.1.1.1.\")\nsolution(\"0.1234567890.1.1.1.\")\nsolution(\"0.1234567890.1.1.1.\")\nsolution(\"0.1234567890.1.1.1.\")\nsolution(\"0.1234567890.1.1.1.\")\nsolution(\"0.1234567890.1.1.1.\")\nsolution(\"0.1234567890.1.1.1.\")\nsolution(\"0.1234567890.1.1.1.\")\nsolution(\"0.1234567890.1.1.1.\")\nsolution(\"0.1234567890.1.1.1.\")\nsolution"
    },
    {
        "number": 212,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split()))\n    \n    while True:\n        if (sum(stdin) % 8 == 0 and\n            all(num > 9 or num < 0 for num in stdin) and\n            all(num % 2 == 0 for num in stdin)):\n            return 'YES'\n        \n        stdin = list(map(lambda x: x - 1 if x > 9 else x, stdin))\n"
    },
    {
        "number": 212,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if any(\n        sum(1 for i in range(len(num)) if num[i] == '0') == len(num)\n        for num in map(int, stdin.split())\n    ) else 'NO'\n"
    },
    {
        "number": 212,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input_string = stdin\n    number = input_string\n\n    while True:\n        if len(number) <= 100:\n            if number.startswith(\"0\"):\n                number = number[1:]\n            elif number.startswith(\"0\"):\n                number = number[1:]\n            else:\n                break\n        else:\n            break\n\n    # Find the length of the longest word\n    longest_word = max(number.split(), key=len)\n    # If the word contains 1, we can't remove any digits\n    if len(longest_word) == 1:\n        return \"NO\"\n\n    number_len = len(number)\n    to_remove = number_len - len(longest_word)\n    # Replace the last digit of the number\n    number = number[:-1]\n    # Remove the digits that we don't want\n    while to_remove > 0:\n        number = number[:-1]\n        to_remove -= 1\n    number = number.replace(\"0\", \"\")\n    if len(number) == 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n\ndef"
    },
    {
        "number": 212,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    num = stdin.strip()\n    while len(num) >= 1 and num[0] == \"0\":\n        num = num[1:]\n    while len(num) >= 1 and num[0] == \"0\" and num[1] == \"0\":\n        num = num[2:]\n    if num == \"\":\n        return \"NO\"\n    for i in range(len(num)):\n        if num[i] == \"1\":\n            num = num[i:]\n            break\n    while num[0] == \"0\":\n        num = num[1:]\n    while num[0] == \"0\" and num[1] == \"0\":\n        num = num[2:]\n    if len(num) == 0:\n        return \"NO\"\n    if int(num) % 8 == 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 212,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    while len(n) > 100:\n        if any(n.count(i)!= n.count(i+1) for i in range(len(n))):\n            break\n        n = ''.join(i for i in n if i not in '0123456789')\n        if len(n) == 1:\n            break\n    else:\n        return 'NO' if all(i in '0123456789' for i in n) else 'YES'\n    \n    return ''.join(i for i in n if i not in '0123456789') + '.' + n\n"
    },
    {
        "number": 212,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    n = n[:100]\n    if '0' in n:\n        return 'NO'\n    if (int(n) // 8) > 0:\n        return 'NO'\n    while len(n) > 1:\n        if n[0] == '0':\n            n = n[1:]\n            continue\n        if n[0] == '1':\n            n = n[1:]\n            continue\n        if n[0] == '8':\n            n = n[1:]\n            continue\n        if n[0] == '9':\n            n = n[1:]\n            continue\n        return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 212,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin\n    a = list(map(int,a.strip().split()))\n    print(len(a))\n    while(len(a)>1):\n        for i in range(len(a)):\n            if a[i]!=0:\n                a.remove(0)\n                break\n        else:\n            print(\"NO\")\n            break\n    else:\n        if(len(a)==1):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n        \nsolution(input())"
    },
    {
        "number": 212,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n\n    if n < 1:\n        print(\"NO\")\n        return\n\n    def count_div(num: int) -> bool:\n        if num == 0:\n            return False\n        if num % 8 == 0:\n            return True\n        if num % 8!= 0:\n            return False\n\n    def remove_digit(num: int) -> str:\n        if num == 0:\n            return \"0\"\n        if num % 2!= 0:\n            return str(num // 2)\n        return str(num // 2) + str(num // 2)\n\n    def check_digit(num: str) -> bool:\n        if num == \"\":\n            return True\n        if num[0] == \"0\":\n            return False\n        for i in range(1, len(num)):\n            if num[i]!= num[0]:\n                return False\n        return True\n\n    def check_digit_not_zero(num: str) -> bool:\n        if num == \"\":\n            return False\n        if num[0] == \"0\":\n            return False\n        return True\n\n    def check_digit_not_div(num: str) -> bool:\n        if num == \"\":\n            return False\n        if num[0] == \"0\":\n            return False\n        if count_div(int(num)) == False:\n            return False\n        return True\n\n    def check_digit_not_zero_not_div(num: str) -> bool:\n        if num == \"\":\n            return False\n        if num[0] == \"0\":\n            return False\n        if count_div(int(num)) == False:\n            return False\n        if count_div(int(num)) == False:\n            return False\n        return True\n\n    def remove_digit_not_div(num: str) -> str:\n        if num == \"\":\n            return \"\"\n        if num[0] == \"0\":\n            return remove_digit(int(num))\n        if count_div(int(num)) == False:\n            return remove_digit(int(num))\n        if count_div(int(num)) == True:\n            if num[1]!= \"0\":\n                return remove_digit(int(num))\n            return remove_digit(int(num))\n\n    def remove_digit_not_div_not_zero(num: str) -> str:\n        if num == \"\":\n            return \"\"\n        if num[0] == \"0\":\n            return remove_digit(int(num))\n        if count_div(int(num)) == False:\n            return remove_digit(int(num))\n        if count_div(int(num)) == True:\n            if num[1]!= \"0\":\n                return remove_digit(int(num))\n            return remove_digit(int(num))\n\n    def remove_digit_not_zero_not_div_not_zero(num: str) -> str:\n        if num == \"\":\n            return \"\"\n        if num[0] == \"0\":\n            return remove_digit(int(num))\n        if count_div(int(num)) == False:\n            return remove_digit(int(num))\n        if count_div(int(num)) == True:\n            if num[1]!= \"0\":\n                return remove_digit(int(num))\n            return remove_digit(int(num))\n\n    def remove_digit_not_zero_not_div_not_zero_not_zero(num: str) -> str:\n        if num == \"\":\n            return \"\"\n        if num[0] == \"0\":\n            return remove_digit(int(num))\n        if count_div(int(num)) == False:\n            return remove_digit(int(num))\n        if count_div(int(num)) == True:\n            if num[1]!= \"0\":\n                return remove_digit(int(num))\n            return remove_digit(int(num))\n\n    def remove_digit_not_zero_not_div_not_zero_not_zero_not_zero(num: str) -> str:\n        if num == \"\":\n            return \"\"\n        if num[0] == \"0\":\n            return remove_digit(int(num))\n        if count_div(int(num)) == False:\n            return remove_digit(int(num))\n        if count_div(int(num)) == True:\n            if num[1]!= \"0\":\n                return remove_digit(int(num))\n            return remove_digit(int(num))\n        if count_div(int(num)) == True:\n            if num[2]!= \"0\":\n                return remove_digit(int(num))\n            return remove_digit(int(num))\n        if count_div(int(num)) == True:\n            if num[3]!= \"0\":\n                return remove_digit(int(num))\n            return remove_digit(int(num))\n        if count_div(int(num)) == True:\n            if num[4]!= \"0\":\n                return remove_digit(int(num))\n            return remove_digit(int(num))\n        if count_div(int(num)) == True:\n            if num[5]!= \"0\":\n                return remove_digit(int(num))\n            return remove_digit(int(num))\n        if count_div(int(num)) == True:\n            if num[6]!= \"0\":\n                return remove_digit(int(num))\n            return remove_digit(int(num))\n        if count_div(int(num)) == True:\n            if num[7]!= \"0\":\n                return remove_digit(int(num))\n            return remove_digit(int(num))\n\n    def remove_digit_not_div_not_zero(num: str) -> str:\n        if num == \"\":\n            return \"\"\n        if num[0] == \"0\":\n            return remove_digit_not_div(num)\n        if count_div(int(num)) == False:\n            return remove_digit_not_div(num)\n        if count_div(int(num)) == True:\n            if num[1]!= \"0\":\n                return remove_digit_not_div(num)\n            return remove_digit_not_div(num)\n\n    def remove_digit_not_div_not_zero_not_div_not_zero(num: str) -> str:\n        if num == \"\":\n            return \"\"\n        if num[0] == \"0\":\n            return remove_digit_not_div_not_zero(num)\n        if count_div(int(num)) == False:\n            return remove_digit_not_div_not_zero(num)\n        if count_div(int(num)) == True:\n            if num[1]!= \"0\":\n                return remove_digit_not_div_not_zero(num)\n            return remove_digit_not_div_not_zero(num)\n\n    def remove_digit_not_div_not_zero_not_div_not_zero_not_zero(num: str) -> str:\n        if num == \"\":\n            return \"\"\n        if num[0] == \"0\":\n            return remove_digit_not_div_not_zero_not_div_not_zero(num)\n        if count_div(int(num)) == False:\n            return remove_digit_not_div_not_zero_"
    },
    {
        "number": 212,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    while True:\n        if x % 8!= 0:\n            x -= 1\n            continue\n        if x // 8 == 0:\n            break\n        x = x // 8\n        if len(str(x))!= 10:\n            x += 1\n            continue\n        return \"YES\" + str(x)\n\nprint(solution(input()))\n"
    },
    {
        "number": 213,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n  floor_numbers = set()\n  floors = []\n  for line in stdin.split(\"\\n\"):\n    k, f = map(int, line.split())\n    floor_numbers.add(k)\n    floors.append((k,f))\n  floor_numbers = sorted(floor_numbers)\n  for i in range(len(floors)):\n    current_floor = floors[i]\n    if current_floor[0] in floor_numbers:\n      floor_numbers.remove(current_floor[0])\n      floor_numbers.add(current_floor[1])\n    else:\n      print(-1)\n      return\n  print(floor_numbers[0])\n  return\n  \nprint(solution(input()))\n\ndef"
    },
    {
        "number": 213,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    line_1, line_2 = stdin.splitlines()\n    n, m = line_1.split()\n    n = int(n)\n    m = int(m)\n    n_flats_on_each_floor = m\n    all_floors = []\n    for _ in range(m):\n        floor, n_flats = line_2.split()\n        n_flats = int(n_flats)\n        all_floors.append((floor, n_flats))\n    k = 1\n    for floor, n_flats in all_floors:\n        if n_flats > n_flats_on_each_floor:\n            return \"-1\"\n        elif n_flats == n_flats_on_each_floor:\n            return str(k)\n        else:\n            k += 1"
    },
    {
        "number": 213,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    minFloor, maxFloor = 1, m\n    memory = sorted(list(map(lambda x: int(x), stdin.splitlines()[1:])))\n    # print(memory)\n    for flat in range(n, maxFloor + 1):\n        floor = 0\n        for i in range(len(memory)):\n            if memory[i] == flat:\n                floor = i + 1\n                break\n        if floor == 0:\n            return \"N/A\"\n        elif floor == minFloor:\n            minFloor = minFloor + 1\n        elif floor > maxFloor:\n            return \"N/A\"\n        else:\n            maxFloor = maxFloor - 1\n    return str(floor)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 213,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    memory = stdin.split()\n\n    def floor(x: int, y: int) -> int:\n        x += 1\n        return int(y / x)\n\n    for _ in range(m):\n        k, f = list(map(int, memory.pop(0).split()))\n        memory.append((k, floor(k, f)))\n\n    for i, (k, f) in enumerate(memory):\n        if f == n:\n            return i + 1\n\n    return -1\n"
    },
    {
        "number": 213,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    floors = []\n    for i in range(m):\n        k, f = list(map(int, stdin.split()))\n        floors.append((k,f))\n    for i in range(n):\n        for j in range(len(floors)):\n            if floors[j][1] == i+1:\n                print(j+1)\n                return\n    print(-1)\n    return\n"
    },
    {
        "number": 213,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  n, m = list(map(int, stdin.split()))\n  list_of_floors = []\n  for i in range(m):\n    list_of_floors.append(list(map(int, stdin.split())))\n\n  for i in range(len(list_of_floors)):\n    list_of_floors[i].sort()\n\n  result = -1\n  for i in range(len(list_of_floors)):\n    if result == -1:\n      for j in range(len(list_of_floors[i])):\n        if list_of_floors[i][j] == n:\n          result = i+1\n          break\n\n  if result!= -1:\n    return str(result)\n  else:\n    return str(-1)\n\nsolution(input())\n"
    },
    {
        "number": 213,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 213,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n\n    def dfs(visited, floor):\n        if not visited:\n            return floor == n\n\n        for i in range(m):\n            if not visited[i]:\n                visited[i] = True\n                floor = dfs(visited, floor + 1)\n                visited[i] = False\n        return floor == n\n\n    for i in range(1, m + 1):\n        if not dfs([False] * m, 1):\n            return str(-1)\n\n    return str(i)\n"
    },
    {
        "number": 213,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    flats = {}\n    floor = 1\n    for i in range(m):\n        k, f = map(int, stdin.split())\n        flats[k] = f\n        floor += 1\n    flats_sorted = sorted(flats.keys())\n    if floor!= len(flats_sorted):\n        return '-1'\n    for i in range(1, floor):\n        if flats_sorted[i]!= flats_sorted[i-1]+1:\n            return '-1'\n    for k, f in flats.items():\n        if k!= flats_sorted[floor-f-1]:\n            return '-1'\n    return '{}'.format(floor)\n"
    },
    {
        "number": 213,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n > m:\n        return \"N\"\n    mem = []\n    for i in range(m):\n        mem.append(tuple(map(int, stdin.split())))\n    mem.sort(key=lambda x: x[0])\n    floors = {x[0]: i for i, x in enumerate(mem)}\n    for i in range(1, n+1):\n        if i in floors:\n            print(floors[i])\n        else:\n            return \"-1\"\n    return \"O\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 214,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\nprint(solution(input()))\nprint(solution(input()))\n\n\ns = input()\nprint(len(s))\n"
    },
    {
        "number": 214,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  board = stdin\n  column_count = len(board[0])\n  row_count = len(board)\n  visited = set()\n  \n  return bfs(board, visited)\n\ndef"
    },
    {
        "number": 214,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    board = stdin[1].split()\n\n    b = 2\n    pawns = set()\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == '0':\n                pawns.add((i, j))\n    m = len(pawns)\n    for d in range(2, m+1):\n        for i in range(n):\n            for j in range(n):\n                if board[i][j] == '0':\n                    for k in range(4):\n                        if (i+k, j) in pawns and (i-k, j) in pawns:\n                            return str(b)\n                        if (i+k, j) in pawns and (i-k, j) not in pawns:\n                            b += 1\n                            continue\n                        if (i+k, j) not in pawns and (i-k, j) in pawns:\n                            b += 1\n                            continue\n                        if (i+k, j) not in pawns and (i-k, j) not in pawns:\n                            b += 1\n                            break\n                    break\n    return str(b)\nprint(solution(input()))\n"
    },
    {
        "number": 214,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(max(len(find(stdin.split())) for _ in range(5)))\n\ndef"
    },
    {
        "number": 214,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    arr = stdin.split(\"\\n\")\n    ans = 0\n    for x in arr:\n        for y in x:\n            if y == \"X\":\n                ans += 1\n    return str(ans)"
    },
    {
        "number": 214,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    board = stdin\n    board = board.replace(\"X\", \"0\")\n    board = board.replace(\".\", \"0\")\n    board = board.split(\"\\n\")\n    n = len(board)\n    return n ** 2\n\nprint(solution(input()))"
    },
    {
        "number": 214,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    board = stdin.split(\"\\n\")\n    bishop_count = 0\n    for line in board:\n        line = list(line.replace(\"X\",\"0\"))\n        for i in range(len(line)):\n            if line[i] == \"X\":\n                line[i] = \"0\"\n            elif line[i] == \"0\":\n                line[i] = \"X\"\n        print(line)\n        for i in range(len(line)):\n            if line[i] == \"0\":\n                if line[i-1] == \"X\" and line[i+1] == \"X\":\n                    bishop_count += 1\n        print(bishop_count)\n    return bishop_count\n\nsolution(\"00X00X0XXX0\\n0XXX0X00X00\")\n\ndef"
    },
    {
        "number": 214,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return 0"
    },
    {
        "number": 214,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n\n    w = 0\n    h = 0\n\n    if n == 1:\n        return w + h\n\n    for i in range(n):\n        if stdin[i] == '0':\n            w += 1\n        else:\n            h += 1\n\n    if w == h:\n        return w\n    else:\n        return w + (w - h)\n\n\nprint(solution(input()))\nprint(solution(input()))\nprint(solution(input()))\nprint(solution(input()))\n"
    },
    {
        "number": 214,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    rows, cols = stdin.split(\"\\n\")\n    rows = rows.replace(\"X\", \"0\").replace(\"0\", \"X\")\n    cols = cols.replace(\"X\", \"0\").replace(\"0\", \"X\")\n    return rows + cols\n\n\nprint(solution(\"0X0X0\\n0X0X0\"))\nprint(solution(\"00X00X0XXX0\\n0XXX0X00X00\\n00X00X0XXX0\\n0XXX0X00X00\"))\nprint(solution(\"00X00X0XXX0\\n0XXX0X00X00\\n00X00X0XXX0\\n0XXX0X00X00\"))\n"
    },
    {
        "number": 215,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    p = []\n    for i in range(len(s)):\n        if s[i].isalpha():\n            if i > 0:\n                if s[i].islower()!= s[i - 1].islower():\n                    p.append(i)\n            else:\n                p.append(i)\n    if len(p) == 0:\n        return 0\n    p.sort()\n    print(len(p))\n    return str(len(p))\n"
    },
    {
        "number": 215,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    d = {}\n    res = 0\n    for i in range(n):\n        if stdin[i] not in d:\n            d[stdin[i]] = i\n        else:\n            res = max(res, i - d[stdin[i]])\n    return res"
    },
    {
        "number": 215,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    new_s = ''.join([x for x, y in zip(s, list(s)) if x == y])\n    a = []\n    for i, x in enumerate(new_s):\n        if x.islower():\n            a.append(i)\n    n = len(a)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return a[0]\n    else:\n        a.sort()\n        if a[0] > a[1]:\n            return a[0]\n        else:\n            return a[1]\n"
    },
    {
        "number": 215,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\n----Sample----\nThe expected output is:\n\n3\n\nInput\n11\naaaaBaabAbA\n\nOutput\n2\n\nInput\n12\nzACaAbbaazzC\n\nOutput\n3\n\nInput\n3\nABC\n\nOutput\n0\n\nInput\n1\nA\n\nOutput\n2\n\n'''\n\nfrom math import factorial as f\n\ndef"
    },
    {
        "number": 215,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    long_string = stdin[1]\n    a_positions = stdin[2].split()\n    a_positions = [int(a_positions[0]), int(a_positions[1])]\n    string_len = len(long_string)\n    while len(a_positions) < 3:\n        a_positions = a_positions + [a_positions[-1] + string_len]\n    if a_positions[-1] > string_len:\n        a_positions = a_positions[:-1]\n    if len(set(a_positions))!= len(a_positions):\n        return '0'\n    set_of_a = set()\n    for i in range(len(a_positions)):\n        set_of_a.add(a_positions[i])\n    a_positions = list(set_of_a)\n    a_positions.sort()\n    if len(a_positions) == 1:\n        return '0'\n    else:\n        nice_string = ''\n        for i in range(len(a_positions)-1):\n            nice_string += long_string[a_positions[i]:a_positions[i+1]]\n        return nice_string\n\n\n\nsolution(input())\n"
    },
    {
        "number": 215,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split()\n    s = a[1]\n    n = len(s)\n    if n <= 2:\n        return \"0\"\n    if n == 3:\n        if s[0]!= s[2]:\n            return \"1\"\n        else:\n            return \"0\"\n    else:\n        for i in range(n):\n            if (s[i] == s[i + 2] and s[i]!= s[i + 1]) or (s[i]!= s[i + 2] and s[i] == s[i + 1]):\n                if i!= 0:\n                    if (s[i] == s[i - 1] and s[i]!= s[i + 1]) or (s[i]!= s[i - 1] and s[i] == s[i + 1]):\n                        return \"1\"\n                return \"2\"\n        return \"0\""
    },
    {
        "number": 215,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    words = s.split()\n    res = 0\n    for word in words:\n        l = len(word)\n        if res < l:\n            res = l\n    return res\n"
    },
    {
        "number": 215,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()[1]\n    pos = sorted(set(i for i, c in enumerate(s) if c.islower()))\n    if len(pos) == 0:\n        return '0'\n    elif len(pos) == 1:\n        return '1'\n    elif len(pos) == 2:\n        return str(len(pos))\n    else:\n        return '2'\n\n\nsolution(input())"
    },
    {
        "number": 215,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    s = s.split()\n    count = 0\n    for i in range(len(s)):\n        if s[i] not in set(s):\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 215,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.count(\"aa\")"
    },
    {
        "number": 216,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = stdin.split()\n    a = list(map(int, a))\n    a.sort()\n    b = []\n    c = []\n    for i in range(0, len(a), 2):\n        b.append(a[i])\n    for i in range(1, len(a), 2):\n        c.append(a[i])\n    b.sort()\n    c.sort()\n    b = sum(b)\n    c = sum(c)\n    return str(b - c)\n\nprint(solution(input()))"
    },
    {
        "number": 216,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n    b = []\n    c = []\n    for i in range(n):\n        if a[i] % 2 == 0:\n            b.append(a[i])\n        else:\n            c.append(a[i])\n    if len(b) == 0:\n        b = 0\n    else:\n        b = sum(b)\n    if len(c) == 0:\n        c = 0\n    else:\n        c = sum(c)\n    return str(b - c)\n"
    },
    {
        "number": 216,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    b = []\n    c = []\n    bSum = 0\n    cSum = 0\n    for i in range(n):\n        if len(b) == 0 and len(c) == 0:\n            b.append(a[i])\n            bSum += a[i]\n            c.append(a[i])\n            cSum += a[i]\n        else:\n            if len(b) == 0:\n                b.append(a[i])\n                bSum += a[i]\n            elif len(c) == 0:\n                c.append(a[i])\n                cSum += a[i]\n            else:\n                if bSum + a[i] <= cSum:\n                    b.append(a[i])\n                    bSum += a[i]\n                else:\n                    c.append(a[i])\n                    cSum += a[i]\n    return str(bSum - cSum)\n"
    },
    {
        "number": 216,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    a = list(map(int, stdin[1].split()))\n    b, c = [], []\n    for i in a:\n        if len(b) == 0 or i not in b:\n            b.append(i)\n        elif len(c) == 0 or i not in c:\n            c.append(i)\n    b, c = sorted(b), sorted(c)\n    return str(sum(b) - sum(c))\n"
    },
    {
        "number": 216,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sequence = list(map(int, stdin.split()))\n    result = float('-inf')\n    \n    for i in range(n):\n        sequence_b = sequence[:i]\n        sequence_c = sequence[i:]\n        \n        sum_b = sum(sequence_b)\n        sum_c = sum(sequence_c)\n        \n        result = max(result, sum_b - sum_c)\n        \n    return str(result)\n"
    },
    {
        "number": 216,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin.pop(0))\n    a = list(map(int, stdin.pop(0).split()))\n    b = list(map(int, stdin.pop(0).split()))\n    c = list(map(int, stdin.pop(0).split()))\n    print(max(0, max(b)-max(c)))\n\nsolution('')\n"
    },
    {
        "number": 216,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    a = stdin.split()\n    a.sort(reverse=True)\n    b = int(sum(a[:n//2]))\n    c = int(sum(a[n//2:]))\n    return str(b-c)\n\nprint(solution(input()))"
    },
    {
        "number": 216,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.strip().split()\n    N = int(input[0])\n    sequence = list(map(int, input[1]))\n    count = 0\n    for i in range(1, len(sequence)):\n        count += sequence[i]\n        if sequence[i] < 0:\n            count -= sequence[i-1]\n        if count < 0:\n            break\n    return str(count)"
    },
    {
        "number": 216,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    return str(max(a[i]-sum(a[i+1:]) for i in range(n)))\n"
    },
    {
        "number": 216,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n    b = []\n    c = []\n    for i in range(0, n):\n        if i % 2 == 0:\n            b.append(a[i])\n        else:\n            c.append(a[i])\n    b.sort()\n    c.sort(reverse=True)\n    return str(sum(b) - sum(c))\n"
    },
    {
        "number": 217,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a,b,f,k = map(int, stdin.split())\n    if b-a >= k:\n        return str(min((b-a)//(k+1),(b-a)//k,(b-a)//k-1))\n    else:\n        return str(-1)\n"
    },
    {
        "number": 217,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a,b,f,k = map(int, stdin.split())\n    if b-a >= k:\n        return str(k)\n    count = k\n    count += (b-a)-(b-a)//k*k\n    if a <= f <= b:\n        if a <= f <= a+count <= f+count:\n            return str(count)\n    if f <= a <= f+count <= b:\n        if a <= f <= f+count <= a+count:\n            return str(count)\n    if f <= a+count <= f+count <= b:\n        if a <= f <= a+count <= a+count+count:\n            return str(count)\n    return \"-\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 217,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, f, k = stdin.split()\n    a, b, f, k = int(a), int(b), int(f), int(k)\n    if a == b:\n        return -1\n    elif a <= f <= b:\n        return k + b - f\n    elif a < f <= b:\n        return k + b - f - a\n    elif a > b:\n        return k + b - a\n    elif f < a <= b:\n        return k + a - f\n    elif f < b <= a:\n        return k + a - f - b\n    elif f > b:\n        return k + b - a\n    elif a < f < b:\n        return k + a - f - b\n    else:\n        return k + b - a\n\ndef"
    },
    {
        "number": 217,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Split the input into lines\n    lines = stdin.strip().split('\\n')\n    \n    a = int(lines[0])\n    b = int(lines[1])\n    f = int(lines[2])\n    k = int(lines[3])\n    \n    if f >= a:\n        print(-1)\n        return\n    \n    bus_route = (a - 1) // f + 1\n    \n    # make sure we have the right number of jumps\n    if bus_route < k:\n        print(-1)\n        return\n    \n    # check that we can get to each point multiple times\n    for i in range(f, a, -1):\n        if i - f < bus_route:\n            print(-1)\n            return\n    \n    # check that each route includes the point where the bus starts\n    if bus_route!= 1:\n        print(-1)\n        return\n    \n    # find the total amount of gas we have\n    total_gas = a * b\n    \n    # find the amount of gas left when we refuel at each point\n    gas_left = total_gas - bus_route * f\n    \n    # find the amount of gas we need to fill from each point\n    gas_required = bus_route - 1\n    \n    # the amount of gas we have is smaller than the amount of gas required to pass\n    # each time we refuel, so we need to add the gas we need to refill\n    if gas_left < gas_required:\n        gas_required -= gas_left\n    \n    # if we have enough gas we can pass each point without refueling\n    if gas_required == 0:\n        print(bus_route)\n        return\n    \n    # if we don't have enough gas to fill every point, then we can't make k journeys\n    if gas_required > 0:\n        print(-1)\n        return\n    \n    # find the amount of gas left when we refuel at each point\n    gas_left = total_gas - bus_route * f\n    \n    # find the amount of gas we need to refill to get to each point\n    gas_required = bus_route - 1\n    \n    # find the amount of gas we need to refill to get to each point\n    if gas_left > gas_required:\n        gas_required -= gas_left\n    \n    # if we have enough gas to refill to each point, then we can make k jumps\n    if gas_required == 0:\n        print(bus_route)\n        return\n    \n    # if we don't have enough gas to refill to each point, then we can't make k jumps\n    print(-1)\n    return"
    },
    {
        "number": 217,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a,b,f,k = map(int, stdin.split())\n    if f>a:\n        return -1\n    if f>a and (a-f)%k==0:\n        return (((a-f)//k)+1)\n    elif f>a and (a-f)%k!=0:\n        return (((a-f)//k)+2)\nprint(solution(input()))"
    },
    {
        "number": 217,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, f, k = stdin.split()\n    a = int(a)\n    b = int(b)\n    f = int(f)\n    k = int(k)\n    if k <= 0:\n        return -1\n    if k <= b:\n        return k\n    ans = 0\n    while True:\n        ans += 1\n        if f < a:\n            return -1\n        if f >= a and f <= b:\n            if b - f < k:\n                return -1\n            else:\n                return ans\n        if f >= b:\n            return -1\n        if b - f < k:\n            return -1\n        if b - f == k:\n            f = f - a\n            ans += 1\n        if f - a < k:\n            return -1\n        if f - a == k:\n            f = f - a\n            ans += 1\n        if f - a == k:\n            f = f - a\n            ans += 1\n        if f - a == k:\n            f = f - a\n            ans += 1\n        if f - a == k:\n            f = f - a\n            ans += 1\n        if f - a == k:\n            f = f - a\n            ans += 1\n        if f - a == k:\n            f = f - a\n            ans += 1\n        if f - a == k:\n            f = f - a\n            ans += 1\n        if f - a == k:\n            f = f - a\n            ans += 1\n        if f - a == k:\n            f = f - a\n            ans += 1\n        if f - a == k:\n            f = f - a\n            ans += 1\n        if f - a == k:\n            f = f - a\n            ans += 1\n        if f - a == k:\n            f = f - a\n            ans += 1\n        if f - a == k:\n            f = f - a\n            ans += 1\n        if f - a == k:\n            f = f - a\n            ans += 1\n        if f - a == k:\n            f = f - a\n            ans += 1\n        if f - a == k:\n            f = f - a\n            ans += 1\n        if f - a == k:\n            f = f - a\n            ans += 1\n        if f - a == k:\n            f = f - a\n            ans += 1\n        if f - a == k:\n            f = f - a\n            ans += 1\n        if f - a == k:\n            f = f - a\n            ans += 1\n        if f - a == k:\n            f = f - a\n            ans += 1\n        if f - a == k:\n            f = f - a\n            ans += 1\n        if f - a == k:\n            f = f - a\n            ans += 1\n        if f - a == k:\n            f = f - a\n            ans += 1\n        if f - a == k:\n            f = f - a\n            ans += 1\n        if f - a == k:\n            f = f - a\n            ans += 1\n        if f - a == k:\n            f = f - a\n            ans += 1\n        if f - a == k:\n            f = f - a\n            ans += 1\n        if f - a == k:\n            f = f - a\n            ans += 1\n        if f - a == k:\n            f = f - a\n            ans += 1\n        if f - a == k:\n            f = f - a\n            ans += 1\n        if f - a == k:\n            f = f - a\n            ans += 1\n        if f - a == k:\n            f = f - a\n            ans += 1\n        if f - a == k:\n            f = f - a\n            ans += 1\n        if f - a == k:\n            f = f - a\n            ans += 1\n        if f - a == k:\n            f = f - a\n            ans += 1\n        if f - a == k:\n            f = f - a\n            ans += 1\n        if f - a == k:\n            f = f - a\n            ans += 1\n        if f - a == k:\n            f = f - a\n            ans += 1\n        if f - a == k:\n            f = f - a\n            ans += 1\n        if f - a == k:\n            f = f - a\n            ans += 1\n        if f - a == k:\n            f = f - a\n            ans += 1\n        if f - a == k:\n            f = f - a\n            ans += 1\n        if f - a == k:\n            f = f - a\n            ans += 1\n        if f - a == k:\n            f = f - a\n            ans += 1\n        if f - a == k:\n            f = f - a\n            ans += 1\n        if f - a == k:\n            f = f - a\n            ans += 1\n        if f - a == k:\n            f = f - a\n            ans += 1\n        if f - a == k:\n            f = f - a\n            ans += 1\n        if f - a == k:\n            f = f - a\n            ans += 1\n        if f - a == k:\n            f = f - a\n            ans += 1\n        if f - a == k:\n            f = f - a\n            ans += 1\n        if f - a == k:\n            f = f - a\n            ans += 1\n        if f - a == k:\n            f = f - a\n            ans += 1\n        if f - a == k:\n            f = f - a\n            ans += 1\n        if f - a == k:\n            f = f - a\n            ans += 1\n        if f - a == k:\n            f = f - a\n            ans += 1\n        if f -"
    },
    {
        "number": 217,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, y, f, k = map(int, stdin.split())\n    if x == y:\n        if k < x:\n            return '-1'\n        else:\n            return f\n    else:\n        if k > x:\n            return '-1'\n        else:\n            t = 0\n            while True:\n                if t == f:\n                    return str(x)\n                t += x - x % k\n                x += k\n                if x % k == 0:\n                    x += k\n                    t = 0\n                if t == f:\n                    return str(x)"
    },
    {
        "number": 217,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, f, k = map(int, stdin.split())\n    if f >= a:\n        return f - a\n    else:\n        return -1\n\n'''\n\ndef"
    },
    {
        "number": 217,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, f, k = map(int, stdin.split())\n    if k == 0: return '0'\n    else:\n        moves = max(1, a - f, b - f)\n        min_refuel = min(moves, k)\n        if min_refuel == moves: return str(min_refuel)\n        else:\n            return str(min_refuel - 1)\n\nprint(solution(input()))\n"
    },
    {
        "number": 217,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, f, k = map(int, stdin.split())\n    d = b // (a - f)\n    if k > d:\n        return -1\n    if k == d:\n        return k\n    if b == d:\n        return d\n\n    for i in range(b + 1, d + 1):\n        f += 1\n        if i * (a - f) == b:\n            return i\n        if i == d:\n            return -1"
    },
    {
        "number": 218,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    _, n, p, q = stdin.split()\n    n = int(n)\n    p = int(p)\n    q = int(q)\n\n    possible = True\n    if n <= p or q <= p:\n        possible = False\n\n    # N, P, Q = n, p, q\n    # a = n // P\n    # b = n // Q\n    # if a < b:\n    #     n = n - (a*P)\n    # else:\n    #     n = n - (b*Q)\n    # # print(n)\n    # # print(a)\n    # # print(b)\n\n    if possible:\n        # all_results = []\n        #\n        # # for i in range(a,n+1):\n        # #     for j in range(b,n+1):\n        # #         if j > i:\n        # #             all_results.append((i,j))\n        #\n        # # all_results = [(i,j) for i in range(a,n+1) for j in range(b,n+1)]\n        # # print(all_results)\n        # all_results = [(i,j) for i in range(a,n+1) for j in range(b,n+1)]\n        # print(all_results)\n        # for i in range(a,n+1):\n        #     for j in range(b,n+1):\n        #         if j > i:\n        #             print(i,j)\n        #             print(i,j)\n        #             break\n        # return all_results\n        return len(set([\"\".join(sorted(seq)) for seq in itertools.combinations(stdin,p)]))\n"
    },
    {
        "number": 218,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, p, q = map(int, stdin.split())\n    strings = stdin.split()\n    strings = sorted(strings)\n    res = -1\n    # 1. count the strings\n    # 2. if count < p or count < q, stop\n    # 3. if count >= p and <= q, split the string into equal parts\n    # 4. return the count of split strings\n    count = 1\n    for i in range(1, len(strings)):\n        if strings[i - 1]!= strings[i]:\n            count += 1\n        else:\n            if count < p:\n                return res\n            elif count >= p and count < q:\n                res += 1\n            count = 1\n    # 3. if count >= p and <= q, split the string into equal parts\n    if count >= p and count <= q:\n        res += 1\n    return res\n"
    },
    {
        "number": 218,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, p, q = (int(i) for i in stdin.split())\n    if not (p <= n <= q and p + q <= n):\n        return -1\n    s = stdin\n    return s.count(' ')\n"
    },
    {
        "number": 218,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, p, q = stdin.split()\n    n = int(n)\n    p = int(p)\n    q = int(q)\n\n    if n < p or q < p or n < q:\n        return -1\n\n    def split(string: str) -> str:\n        if len(string) == p or len(string) == q:\n            return string\n        else:\n            return string[0] + split(string[1:])\n\n    return f\"{len(list(map(split, stdin.split()))):d}\"\n"
    },
    {
        "number": 218,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, p, q = list(map(int, stdin.split()))\n    assert 1 <= p <= n <= 100, \"Invalid p and q parameters\"\n    assert 1 <= q <= 100, \"Invalid p and q parameters\"\n    assert p <= q, \"p must be less or equal q\"\n    s = stdin.strip()\n\n    count = 0\n    for i in range(1, n + 1):\n        if not all(s[i * j] == s[i] for j in range(1, min(i, q) + 1)):\n            continue\n        for j in range(i + 1, n + 1):\n            if not all(s[j * k] == s[j] for k in range(1, min(j, q) + 1)):\n                continue\n            count += 1\n    if count == 0:\n        return \"-1\"\n    return str(count)\n"
    },
    {
        "number": 218,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, P, Q = map(int, stdin.split())\n\n    if N < P + Q or P == N < 2 * P or Q == N < 2 * Q:\n        return str(-1)\n\n    strings = set()\n    for _ in range(N // P):\n        strings.add(stdin[:P])\n        stdin = stdin[P:]\n\n    for _ in range(N // Q):\n        strings.add(stdin[:Q])\n        stdin = stdin[Q:]\n\n    return str(len(strings)) + '\\n' + '\\n'.join(sorted(strings))\n"
    },
    {
        "number": 218,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, p, q = stdin.split()\n    n, p, q = int(n), int(p), int(q)\n    if n < p or n < q:\n        return \"-\"\n    s = stdin\n    d = {}\n    for i in range(n):\n        d[s[i]] = i\n    k = n//p\n    res = []\n    for i in range(k):\n        s = ''\n        for j in range(p):\n            s += s[d[s[j]]]\n        res.append(s)\n    k = n//q\n    for i in range(k):\n        s = ''\n        for j in range(q):\n            s += s[d[s[j]]]\n        res.append(s)\n    return str(len(res))\n"
    },
    {
        "number": 218,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, p, q = list(map(int, stdin.split()))\n    s = stdin\n    if p > n or q > n:\n        return \"-1\"\n\n    if p == 1 and q == 1:\n        return \"1\"\n    # [1,2,3] => [1,2,3]\n    if p == q:\n        return str(1 + int(s.count('a') + s.count('e') + s.count('i') + s.count('o') + s.count('u') == 0))\n\n    # [1,2,3,4] => [1,2,3]\n    if p == 2 and q == 2:\n        return str(1 + int(s.count('a') + s.count('e') + s.count('i') + s.count('o') + s.count('u') <= 1))\n\n    if p == 1 and q == 3:\n        return str(1 + int(s.count('a') + s.count('e') + s.count('i') + s.count('o') + s.count('u') <= 1))\n    if p == 2 and q == 3:\n        return str(1 + int(s.count('a') + s.count('e') + s.count('i') + s.count('o') + s.count('u') == 0))\n\n    if p == 3 and q == 3:\n        return str(1 + int(s.count('a') + s.count('e') + s.count('i') + s.count('o') + s.count('u') == 0))\n    if p == 3 and q == 2:\n        return str(1 + int(s.count('a') + s.count('e') + s.count('i') + s.count('o') + s.count('u') <= 1))\n"
    },
    {
        "number": 218,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, p, q = map(int, stdin.split())\n    s = \"\".join(stdin.split())\n\n    if n < p:\n        print(0)\n        return\n\n    # This is the start of the algorithm\n    if n % p!= 0:\n        print(0)\n        return\n\n    if n % q!= 0:\n        print(0)\n        return\n\n    if p == q == 1:\n        print(1)\n        print(s)\n        return\n\n    if n < (p + q):\n        print(0)\n        return\n\n    if n > (p + q):\n        print(-1)\n        return\n\n    # Calculating number of partitions of length p and q\n\n    n_part = (n // p) + (n // q) + 1\n\n    # Getting the partitions\n    partitions = []\n    for i in range(n_part):\n        partitions.append(s[i * p:i * p + p])\n        partitions.append(s[i * q:i * q + q])\n\n    # Finding the unique partitions\n    unique_partitions = set(partitions)\n\n    # If there are more than 2 unique partitions\n    if len(unique_partitions) > 2:\n        print(-1)\n        return\n\n    # If there are only 2 unique partitions\n    if len(unique_partitions) == 2:\n        print(2)\n        for p_partition in unique_partitions:\n            print(p_partition)\n        return\n\n    # If there are 3 unique partitions\n    if len(unique_partitions) == 3:\n        print(3)\n        for p_partition in unique_partitions:\n            print(p_partition)\n        return\n\n    # If there are 4 unique partitions\n    if len(unique_partitions) == 4:\n        print(4)\n        for p_partition in unique_partitions:\n            print(p_partition)\n        return\n"
    },
    {
        "number": 218,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, p, q = map(int, stdin.split())\n    s = stdin.strip()\n    k = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if s[i:j] == s[i:j][::-1]:\n                k += 1\n    return k if k < n else -1\n\n\nsolution(\"5 2 3\")\n"
    },
    {
        "number": 219,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s, d = list(map(int, stdin.split()))\n    obstacles = list(map(int, stdin.split()))\n    obstacles = sorted(obstacles, key=lambda x: x[0])\n    answer = \"IMPOSSIBLE\"\n    i = 0\n    while i < len(obstacles):\n        if obstacles[i][1] >= m:\n            break\n        elif i < len(obstacles) - 1 and obstacles[i + 1][0] - obstacles[i][1] >= s and i + 1 < len(obstacles):\n            i += 1\n        else:\n            answer = \"RUN \" + str(obstacles[i][0] - m + 1)\n            break\n    if i == len(obstacles) - 1:\n        answer = \"RUN \" + str(obstacles[i][0] - m + 1)\n    i = 0\n    while i < len(obstacles):\n        if obstacles[i][1] >= m:\n            break\n        elif i < len(obstacles) - 1 and obstacles[i + 1][0] - obstacles[i][1] >= d and i + 1 < len(obstacles):\n            i += 1\n        else:\n            answer = \"JUMP \" + str(obstacles[i][0] - m + 1)\n            break\n    if i == len(obstacles) - 1:\n        answer = \"JUMP \" + str(obstacles[i][0] - m + 1)\n    return answer\n"
    },
    {
        "number": 219,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    n, m, s, d = int(lines[0]), int(lines[1]), int(lines[2]), int(lines[3])\n    obstacles = []\n    for line in lines[4:]:\n        obstacles.append(tuple(map(int, line.split())))\n\n    # obstacle no. 2 is out of bounds\n    if len(obstacles)!= n:\n        return \"IMPOSSIBLE\"\n\n    # obstacle no. 1 is out of bounds\n    if m < max(map(max, obstacles)):\n        return \"IMPOSSIBLE\"\n\n    # case 1: there is no obstacle\n    if max(map(max, obstacles)) <= s:\n        return f\"RUN {s}\"\n\n    # case 2: there is an obstacle\n    return \"IMPOSSIBLE\"\n"
    },
    {
        "number": 219,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s, d = map(int, stdin.split())\n    obstacles = sorted([tuple(map(int, stdin.split())) for _ in range(n)], key=lambda x: x[1])\n    # print(obstacles)\n    path = {}\n    for (obstacle_x, obstacle_y) in obstacles:\n        x = obstacle_x\n        y = obstacle_y\n        while x!= m:\n            if (x, y) not in path:\n                path[(x, y)] = None\n            x += s\n        x = obstacle_x\n        y = obstacle_y\n        while x!= m:\n            if (x, y) not in path:\n                path[(x, y)] = None\n            x -= d\n    # print(path)\n    if not path:\n        return \"IMPOSSIBLE\"\n    path_sorted = sorted(path.items(), key=lambda x: x[0])\n    # print(path_sorted)\n    current = path_sorted[0][0]\n    next_ = path_sorted[1][0] if path_sorted[1][0]!= None else path_sorted[2][0]\n    # print(current, next_)\n    current_x, current_y = current\n    next_x, next_y = next_\n    while current_x!= next_x:\n        print(f\"RUN {abs(current_x - next_x)}\")\n        current_x, current_y = next_x, next_y\n        next_x, next_y = current_x + s, current_y\n    print(f\"JUMP {abs(next_x - next_y)}\")\n    while current_x!= next_x:\n        print(f\"JUMP {abs(next_x - next_y)}\")\n        current_x, current_y = next_x, next_y\n        next_x, next_y = next_x - d, next_y\n    return\n    return\nsolution(stdin)\n"
    },
    {
        "number": 219,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s, d = map(int, stdin.split())\n    obstacles = list(map(int, stdin.split()))\n\n    obstacles.sort(key=lambda x: x)\n\n    def possible(current, distance):\n        for obstacle in obstacles:\n            if current + distance <= obstacle:\n                return False\n        return True\n\n    i = 0\n    while i < n and current < m:\n        if current + s <= m:\n            if current + s <= obstacles[i]:\n                return 'RUN'+ str(s)\n            else:\n                return 'JUMP'+ str(obstacles[i])\n        else:\n            if possible(current, d):\n                return 'JUMP'+ str(d)\n            current = m\n            i += 1\n\n    return 'IMPOSSIBLE'\n"
    },
    {
        "number": 219,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s, d = map(int, stdin.split())\n    obstacles = list(map(int, stdin.split()))\n    obstacles.sort()\n    obstacles = obstacles[:n]\n    obstacles.append(m)\n    obstacles.sort()\n    def is_valid(obstacle):\n        if not (obstacle <= m and obstacle >= 0):\n            return False\n        return True\n    def is_valid_jump(obstacle, step):\n        if not (obstacle <= m and obstacle >= 0):\n            return False\n        if obstacle + step > m:\n            return False\n        return True\n    def get_ways(obstacle, step):\n        if obstacle + step == m:\n            return 1\n        ways = 0\n        if step >= s and is_valid_jump(obstacle, step):\n            ways += get_ways(obstacle + step, step + s)\n        if step >= d and is_valid_jump(obstacle, step):\n            ways += get_ways(obstacle + step, step + d)\n        return ways\n    return \"RUN {}\\nJUMP {}\".format(get_ways(0, 0), get_ways(0, 0))"
    },
    {
        "number": 219,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s, d = list(map(int, stdin.split()))\n    obstacles = list(map(int, stdin.split()))\n    obstacles = sorted(obstacles)\n\n    if not n: return 'IMPOSSIBLE'\n\n    obstacles_set = set(obstacles)\n    if len(obstacles) == n:\n        if not obstacles[-1] == m: return 'IMPOSSIBLE'\n        if not min(obstacles) > 0: return 'IMPOSSIBLE'\n        if not max(obstacles) <= m: return 'IMPOSSIBLE'\n        if not (s <= max(obstacles) - min(obstacles) <= d): return 'IMPOSSIBLE'\n        if len(obstacles) == 1: return 'RUN {}'.format(obstacles[0])\n    else:\n        return 'IMPOSSIBLE'\n\n    start = 0\n    finish = m\n    while start <= finish:\n        curr_run = min(start + s, finish) - start\n        if not curr_run: return 'IMPOSSIBLE'\n        curr_jump = min(finish - start, d)\n        if not curr_jump: return 'IMPOSSIBLE'\n        start = max(start + curr_run, curr_jump + start)\n        finish = max(finish - curr_jump, start - curr_run)\n\n    if not start == finish: return 'IMPOSSIBLE'\n\n    solutions = []\n    for i in range(n):\n        obstacles.pop()\n        while len(obstacles) > 0 and obstacles[-1] > start:\n            obstacles.pop()\n\n        if len(obstacles) == 0:\n            if s <= start - min(obstacles) <= d:\n                solutions.append('RUN {}'.format(start))\n        else:\n            start = max(start - min(obstacles), start + s)\n            while start - s > start:\n                start += 1\n\n    solutions.append('RUN {}'.format(start))\n    return '\\n'.join(solutions)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 219,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s, d = map(int, stdin.strip().split())\n\n    a = list(map(int, stdin.strip().split()))\n\n    x_start = 0\n    x_finish = m\n    while x_finish <= m:\n        x_jump = (x_finish - x_start) // 2\n        x_start = x_finish\n        x_finish = x_start + x_jump + 1\n        for a_i in a:\n            if a_i < x_start or a_i > x_finish:\n                continue\n            x_jump = min(x_jump + 1, a_i)\n            if x_finish <= a_i <= m:\n                break\n            x_jump = x_jump // 2\n            if x_finish <= a_i + x_jump <= m:\n                break\n            x_jump = min(x_jump * 2, a_i - 1)\n            if x_finish <= a_i + x_jump <= m:\n                break\n        if x_finish > m:\n            return \"IMPOSSIBLE\"\n    return \"RUN \" + str(x_finish - x_start) + \";\"\n\n\nprint(solution(input()))\n\n\ndef"
    },
    {
        "number": 219,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # read stdin\n    n, m, s, d = list(map(int, stdin.split()))\n    obstacles = [list(map(int, stdin.split())) for _ in range(n)]\n    \n    # init variables\n    d_starts = False\n    \n    # main loop\n    for i in range(n):\n        # set obstacle lefts\n        lefts = [obstacles[i][0]]\n        # set obstacle rights\n        rights = []\n        for j in range(1, n):\n            if obstacles[i][j] == m:\n                d_starts = True\n                break\n            elif obstacles[i][j] > m:\n                rights.append(obstacles[i][j])\n            elif obstacles[i][j] < m:\n                lefts.append(obstacles[i][j])\n        # print lefts\n        if d_starts:\n            print(\"IMPOSSIBLE\")\n            break\n        print(\"RUN \" + str(m - max(lefts) - 1) + \"\", end=\"\")\n        print(\"JUMP \" + str(max(rights)) if len(rights) else \"IMPOSSIBLE\")\n    \n    return \"\"\n\nsolution(input())\n\"\"\"\n\n\n\n\"\"\"\n\n--- Day 6: Custom Customs ---\n\nAs your flight approaches the regional airport where you'll switch to a much larger plane, customs declaration forms are distributed to the passengers.\n\nThe form asks a series of 26 yes-or-no questions marked a through z. All you need to do is identify the questions for which anyone in your group answers \"yes\". Since your group is just you, this doesn't take very long.\n\nHowever, the person sitting next to you seems to be experiencing a language barrier and asks if you can help. For each of the people in their group, you write down the questions for which they answer \"yes\", one per line. For example:\n\nabcx\nabcy\nabcz\n\nIn this group, there are 6 questions to which anyone answered \"yes\": a, b, c, x, y, and z. (Duplicate answers to the same question don't count extra; each question counts at most once.)\n\nAnother group asks for your help, then another, and eventually you've collected answers from every group on the plane (your puzzle input). Each group's answers are separated by a blank line, and within each group, each person's answers are on a single line. For example:\n\nabc\n\na\nb\nc\n\nab\nac\n\na\na\na\na\n\nb\nThis list represents answers from five groups:\n\nThe first group contains one person who answered \"yes\" to 3 questions: a, b, and c.\nThe second group contains three people; combined, they answered \"yes\" to 3 questions: a, b, and c.\nThe third group contains two people; combined, they answered \"yes\" to 3 questions: a, b, and c.\nThe fourth group contains four people; combined, they answered \"yes\" to only 1 question, a.\nThe last group contains one person who answered \"yes\" to only 1 question, b.\nIn this example, the sum of these counts is 3 + 3 + 3 + 1 + 1 = 11.\n\nFor each group, count the number of questions to which anyone answered \"yes\". What is the sum of those counts?\n\n\n-----Input-----\n\nInput contains lines of text\n\n-----Output-----\n\nprint(sum(a for a in A))\n\n\n\"\"\""
    },
    {
        "number": 219,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s, d = map(int, stdin.split())\n    data = sorted(list(map(int, stdin.split())))\n    starts = sorted(data[0::2])\n    ends = sorted(data[1::2])\n    print(starts, ends)\n    l = len(starts)\n    if l == 0:\n        return 'IMPOSSIBLE'\n    if starts[0]!= 0 or ends[-1]!= m:\n        return 'IMPOSSIBLE'\n    for i in range(l):\n        if starts[i] > ends[i]:\n            return 'IMPOSSIBLE'\n    for i in range(l):\n        if starts[i] + d < ends[i] and ends[i] - starts[i] > s:\n            return 'IMPOSSIBLE'\n    for i in range(l-1):\n        if ends[i] - starts[i] < s:\n            return 'IMPOSSIBLE'\n    for i in range(l):\n        if i == l - 1:\n            continue\n        if starts[i] > ends[i + 1]:\n            return 'IMPOSSIBLE'\n    for i in range(l-1):\n        if ends[i] - starts[i + 1] < s:\n            return 'IMPOSSIBLE'\n    res = ['RUN'+ str(data[2])]\n    for i in range(1, l):\n        res.append('JUMP'+ str(data[i * 2 + 1]))\n    return '\\n'.join(res)\n"
    },
    {
        "number": 219,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s, d = map(int, stdin.split())\n    obstacles = [[int(x) for x in stdin.split()[i].split(',')] for i in range(n)]\n    obstacles.sort()\n    start = 0\n    finish = m\n    run = s\n    jump = d\n    result = \"IMPOSSIBLE\"\n    while start < finish:\n        for i in range(len(obstacles)):\n            if obstacles[i] <= start:\n                start = obstacles[i] + 1\n                break\n        if start < finish:\n            result = \"RUN \" + str(run)\n            run = max(run, s)\n        for i in range(len(obstacles)):\n            if obstacles[i] <= start + jump:\n                start = obstacles[i] + jump\n                break\n        if start < finish:\n            result = result + \" JUMP \" + str(jump)\n            jump = max(jump, d)\n    return result\n\n\nsolution(\"4 3 2 3\")\nsolution(\"3 5 1 3\")\nsolution(\"3 3 5 1\")\nsolution(\"1 0 0 0 0 0\")"
    },
    {
        "number": 220,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def xor(x, y):\n        return x ^ y\n\n    s, xor_x = stdin.split()\n    s = int(s)\n    x = int(xor_x)\n    xor_result = xor(x, s)\n    if xor_result == x:\n        return 1\n    elif xor_result == s:\n        return 2\n    else:\n        return 0\n"
    },
    {
        "number": 220,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 220,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s, x = stdin.split()\n    s, x = int(s), int(x)\n    count = 0\n    # if s > x:\n    #     if s - x >= x:\n    #         count += 1\n    #         s = s - x\n    #     else:\n    #         s = 0\n    # else:\n    #     if s - x <= x:\n    #         count += 1\n    #         x = s\n    #     else:\n    #         s = 0\n    #\n    # while s!= 0:\n    #     if s % 2!= x % 2:\n    #         count += 1\n    #     s = s // 2\n    #     x = x // 2\n    # return str(count)\n\n    while s!= 0:\n        if s % x == 0:\n            count += 1\n        s = s // x\n    if count == 0:\n        return \"0\"\n    else:\n        return str(count)"
    },
    {
        "number": 220,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    x = int(stdin[0])\n    y = int(stdin[1])\n    s = int(stdin[2])\n    xor = int(stdin[3])\n    t = 0\n    if y < x:\n        t = x\n        x = y\n        y = t\n    if s > x + y:\n        return 0\n    if xor == 0:\n        return y * (y - 1) // 2 + x * (x - 1) // 2\n    if xor == 1:\n        return y * (y - 1) // 2"
    },
    {
        "number": 220,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    (a, b) = stdin.split()\n    (a, b) = (int(a), int(b))\n    if a == 0 and b == 0:\n        return 0\n    if a == 0:\n        return 1\n    if b == 0:\n        return 0\n    if a == 0 or b == 0:\n        return 1\n    x = a ^ b\n    if x == 0:\n        return 1\n    if x == 1:\n        return 1\n    if x == a:\n        return 2\n    if x == b:\n        return 2\n    if x == (a + 1):\n        return 3\n    if x == (b + 1):\n        return 3\n    if x == (a + b):\n        return 4\n    if x == (a + b + 1):\n        return 5\n    return 0\n"
    },
    {
        "number": 220,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 220,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # stdin: str\n    # Convert the input to integers.\n    a, b = map(int, stdin.split())\n    # Convert the sum and the bitwise XOR to integers.\n    s, x = map(int, stdin.split())\n    # Get the possible values of a and b.\n    values = list(range(a, b + 1))\n    # Convert the possible values of a and b to the bitwise XOR.\n    bitwise_xor = list(map(lambda x: ~x, values))\n    # Sort the bitwise XOR to get the possible values of a and b.\n    bitwise_xor.sort()\n    # Convert the bitwise XOR to the sum.\n    result = 0\n    for idx, val in enumerate(bitwise_xor):\n        # Get the sum of a and b.\n        sum_val = val + s\n        # Check whether the sum is in the bitwise XOR.\n        if sum_val in bitwise_xor:\n            # Get the difference between the sum and the bitwise XOR.\n            result += (len(bitwise_xor) - idx)\n            # print(\"{} - {} - {} - {}\".format(s, val, bitwise_xor, result))\n    return result\n"
    },
    {
        "number": 220,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s, x = map(int, stdin.split())\n    # The xor of s and x is equal to x + s\n    return str(bin(x ^ s).count('1'))\n\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 220,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin[0])\n    y = int(stdin[1])\n\n    # 0 is the only solution\n    if x + y == 0:\n        print(0)\n    else:\n        print(2)\n"
    },
    {
        "number": 220,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    s, x = int(stdin.split()[0]), int(stdin.split()[1])\n    a = max(s, x)\n    b = min(s, x)\n    ans = 0\n    while a <= b:\n        if (a ^ x) == x:\n            ans += 1\n        a += 1\n    print(ans)\n\nsolution(input())\n"
    },
    {
        "number": 221,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # read in\n    # turn it into a 2D array\n    # do the thing\n    # return\n    n, k = map(int, input().split())\n    arr = [[] for i in range(n)]\n    for i in range(n):\n        arr[i] = list(map(int, input().split()))\n    # print(arr)\n    def find_closest(x,y):\n        moves = []\n        # (x,y) is a corner\n        if x == 0:\n            if y == 0:\n                moves.append((x+1,y+1))\n            elif y == n - 1:\n                moves.append((x+1,y-1))\n            else:\n                moves.append((x+1,y))\n        elif x == n - 1:\n            if y == 0:\n                moves.append((x-1,y+1))\n            elif y == n - 1:\n                moves.append((x-1,y-1))\n            else:\n                moves.append((x-1,y))\n        else:\n            if y == 0:\n                moves.append((x-1,y+1))\n            elif y == n - 1:\n                moves.append((x-1,y-1))\n            else:\n                moves.append((x-1,y))\n            if y == 0:\n                moves.append((x+1,y+1))\n            elif y == n - 1:\n                moves.append((x+1,y-1))\n            else:\n                moves.append((x+1,y))\n        # print(moves)\n        return moves\n    def find_closest_2(x,y):\n        moves = []\n        # (x,y) is a corner\n        if x == 0:\n            moves.append((x+1,y+1))\n            moves.append((x+1,y-1))\n        elif x == n - 1:\n            moves.append((x-1,y+1))\n            moves.append((x-1,y-1))\n        else:\n            moves.append((x-1,y+1))\n            moves.append((x-1,y-1))\n            moves.append((x+1,y+1))\n            moves.append((x+1,y-1))\n        return moves\n    for i in range(n):\n        for j in range(n):\n            # print(arr[i][j])\n            if arr[i][j] == 1:\n                moves = find_closest(i,j)\n                # print(moves)\n                # print(i,j)\n                # print(arr[i][j])\n                # print(moves)\n                # for m in moves:\n                #     print(m)\n                #     print(arr[m[0]][m[1]])\n                break\n        # print(\"----------------------------------------\")\n    print(len(moves))\n    for i in range(len(moves)):\n        if arr[moves[i][0]][moves[i][1]] == k:\n            print(i)\n            print(moves[i])\n            break\n    return len(moves)\n    # print(arr)\n    # i = j = 0\n    # while j < len(arr[i]) and i < len(arr):\n    #     # print(arr[i][j])\n    #     # print(i,j)\n    #     # print(arr[i][j])\n    #     # print(moves)\n    #     # for m in moves:\n    #     #     print(m)\n    #     #     print(arr[m[0]][m[1]])\n    #     #     print(moves)\n    #     #     break\n    #     # j += 1\n    #     # if j == len(arr[i]):\n    #     #     # i += 1\n    #     #     j = 0\n    #     # else:\n    #     #     continue\n    #     break\n    # return len(moves)\nsolution(stdin)"
    },
    {
        "number": 221,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(int(min(n, k)))"
    },
    {
        "number": 221,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, k = list(map(int, stdin.split()))\n    arr = [i for i in range(1, n + 1)]\n\n    res = 0\n    while n > 1:\n        curr = []\n        n -= 1\n        for i in range(len(arr)):\n            if i % 2 == 0:\n                curr.append(arr[i])\n            else:\n                curr.append(arr[i] + k)\n        res += 1\n        arr = curr\n\n    print(res)\n    return''.join(map(str, arr))\n"
    },
    {
        "number": 221,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return \" \".join([str(i) for i in range(1, n + 1)])\n"
    },
    {
        "number": 221,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''7 2\n   ...\n   ... ''')\n    '2'\n    >>> solution('''5 1\n   ...\n   ... ''')\n    '2'\n    \"\"\"\n    # n, k = map(int, stdin.strip().split())\n    # n, k = (7, 2)\n    n, k = (int(stdin), 2)\n    skewers = list(range(1, n + 1))\n    \n    print(skewers)\n    while len(skewers)!= 1:\n        skewers = [turn_over(skewers[:k], skewers[k:]) for k in range(len(skewers))]\n        print(skewers)\n        \n    print(skewers[0])\n    return''.join(map(str, skewers[0]))\n\n\ndef"
    },
    {
        "number": 221,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def turn(skewers, turn_to, turn_from, total_turn, turn_count):\n        if turn_from == turn_to:\n            skewers.insert(0, turn_from)\n            return turn_count + total_turn\n\n        if turn_from > turn_to:\n            if turn_count >= turn_from - turn_to:\n                return turn_count + total_turn\n            else:\n                return turn_count\n\n        if turn_from < turn_to:\n            if turn_count >= turn_to - turn_from:\n                return turn_count + total_turn\n            else:\n                return turn_count\n\n    n, k = map(int, stdin.split())\n    skewers = []\n    turn_count = 0\n    turns = 0\n\n    while len(skewers) < n:\n        skewers.append(turn_count % k + 1)\n        turn_count += 1\n\n    skewers.reverse()\n\n    for i in range(1, len(skewers)):\n        turns = turn(skewers, i, 0, turns, 0)\n        turns = turn(skewers, i, 0, turns, 1)\n\n    return turns\n"
    },
    {
        "number": 221,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    ans = 0\n    l = 0\n    for i in range(n):\n        if i > 0:\n            l = max(l, abs(i - i - k))\n        if l >= k:\n            ans += k\n        else:\n            ans += l\n    return str(ans)\n"
    },
    {
        "number": 221,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n < 2:\n        return str(n)\n    if k < 1:\n        return str(n)\n    return str(k + min(n - 1, k + 1) - 1)\n"
    },
    {
        "number": 221,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split()]\n    q = collections.deque()\n    turn = 0\n    for i in range(k, n+1):\n        q.append(i)\n    while q:\n        if turn == n:\n            return''.join([str(i) for i in q])\n        for i in range(k):\n            q.append(q.popleft())\n        for i in range(k):\n            q.appendleft(q.pop())\n        turn += 1\n    return''.join([str(i) for i in q])\n"
    },
    {
        "number": 221,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    turns = []\n    for i in range(n):\n        turns.append((i, -1 if i % 2 else 1))\n    turns = sorted(turns, key=lambda x: x[1])\n    if k == 1:\n        return n\n    i = 0\n    j = 1\n    while j < n and i < n:\n        if turns[i][1] == turns[j][1]:\n            i += 1\n            j += 1\n        elif turns[i][1] > turns[j][1]:\n            i += 1\n        else:\n            j += 1\n    return j - i\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 0:\n        return -1\n    i = 1\n    while n >= 10:\n        n = n // 10\n        i += 1\n    if n == 0:\n        return i\n    ans = i\n    while n!= 1:\n        ans += 1\n        n = n // 10\n        i += 1\n    return ans\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    num = n\n    count = 0\n    while n > 0:\n        if n % 10 == 0:\n            n //= 10\n        else:\n            if n % 10!= 1:\n                n *= 10\n            else:\n                n = n // 10\n                count += 1\n            n = n // 10\n    if n == 1:\n        return \"1\"\n    if count == 0:\n        return \"0\"\n    return str(num**2)\n\n'''\ndef"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n  \"\"\"\n  Your code should return the number of operations needed to make the given square of some integer.\n  \"\"\"\n  number = int(stdin)\n  count = 0\n  while number!= 1:\n    if number % 2 == 0:\n      number /= 2\n    else:\n      number -= 1\n    count += 1\n  if number == 1:\n    return count\n  return -1"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n'''\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(1, n + 1):\n        if n == i**2:\n            return f'0'\n    p = n\n    lst = []\n    while p > 0:\n        r = p % 10\n        p = p // 10\n        if r*r == n:\n            return '-1'\n        lst.append(r)\n    lst.reverse()\n    l = len(lst)\n    for i in range(l - 1):\n        for j in range(i+1, l):\n            if lst[i] * lst[j] == n:\n                return f'{lst[i]} {lst[j]}'\n    return '-1'\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n >= 0:\n        if n % 2 == 0:\n            return str(0)\n        else:\n            i = 1\n            while i ** 2 <= n:\n                if n % i == 0:\n                    break\n                else:\n                    i += 1\n            return str(i)\n    else:\n        return str(-1)\n\nsolution(input())\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your solution goes here.\n    Return your answer as a string, or list of strings if you want to pass\n    it through check_solution in order to check your solution.\n    \"\"\"\n    stdin = list(map(int, stdin.strip().split()))\n    n = stdin.pop(0)\n    min_delete = n\n    delete_count = 0\n    for i in range(len(str(n))):\n        delete_count += 1\n        n = int(str(n)[:i] + str(n)[i+1:])\n        if n < min_delete:\n            min_delete = n\n        elif n == min_delete:\n            delete_count += min_delete // n\n    return str(delete_count)\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin\n    if int(N) == int(N ** 2):\n        return \"0\"\n    else:\n        for i in range(1, 10):\n            if i not in N:\n                return str(i)\n        return \"-1\"\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 2: return -1\n    i = 2\n    while i*i <= n:\n        if n % i == 0:\n            n /= i\n            i += 1\n        else:\n            i += 1\n    if n > 1:\n        return -1\n    return str(n)\n\nprint(solution(input()))"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    number = int(stdin)\n    if number < 10:\n        return \"0\"\n    if number == 1 or number == 7 or number == 9:\n        return \"1\"\n    if number == 2:\n        return \"0\"\n    if number % 2 == 0:\n        return \"1\"\n    count = 1\n    while number % 2 == 0:\n        number = number // 2\n        count += 1\n    return str(count)\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    https://adventofcode.com/2018/day/3\n    '''\n    n = int(stdin)\n    for i in range(n, 0, -1):\n        if gcd(i, n) == 1:\n            return n\n    return 0\n\n\ndef"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(int(f(n)) % 1000000)\n\ndef"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(int((((1+n)*(n+1))//2)//n))\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return '%d' % (int(stdin) // 10_000_000_007)\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  stdin = stdin.strip().split()\n  n = int(stdin.pop(0))\n  return str(mod_div(n, max_div(n)))\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    f_max = lambda n: (n + 1) * (n + 2) // 2\n    return str(f_max(n) - f_max(n - 1))\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.strip().split('\\n')\n    return str(round(int(input_lines[0]) / int(10000) ** (len(input_lines[1]) - 1)) % 10007)"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    g: int = 0\n    ans: int = 0\n    for i in range(1, n+1):\n        for j in range(1, i):\n            if i % j == 0:\n                g = i\n        ans = ans + g\n        g = 0\n    return str(ans)"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    def gcd(nums):\n        if len(nums) == 1:\n            return nums[0]\n        else:\n            return gcd([x for x in nums if x!= nums[0]])\n    \n    def f(nums):\n        p = []\n        g = gcd(nums)\n        for i in range(len(nums)):\n            p.append(gcd(nums[:i+1]))\n        return p.count(g)\n    return str(f(nums)) + \".\" + str(1000*(f(nums) - f(nums)) % 10007)\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    s = list(stdin[0])\n    for i in range(1, len(s)):\n        if s[i] in \"AEIOUY\":\n            s[i] = \"Y\"\n    return \"\".join(s)\n    \n    \nprint(solution(input()))\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    letter = stdin.lower()\n    \n    vowels = 'AEIOU'\n    \n    index = 0\n    count = 0\n    \n    while True:\n        if letter[index] in vowels:\n            count += 1\n        elif letter[index] =='':\n            count = 0\n            index += 1\n            continue\n        if index == len(letter)-1:\n            break\n        if count == 1:\n            count += 1\n        else:\n            count = 0\n        index += 1\n    \n    return str(index)\n    \nsolution('AAABBBACFEYUKOTT')"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    vowels = set(['A', 'E', 'I', 'O', 'U', 'Y'])\n    \n    for index, letter in enumerate(stdin):\n        if letter.upper() not in vowels:\n            break\n    return len(stdin[index:]) - 1\n\nsolution(input())"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    answer = 0\n    # the leftmost vowel position, or \"A\"\n    left_pos = 0\n    # the rightmost vowel position, or \"Y\"\n    right_pos = len(stdin)-1\n\n    while left_pos <= right_pos:\n        # find the first vowel\n        while not stdin[left_pos].isalpha():\n            left_pos += 1\n            if left_pos > right_pos:\n                return answer\n        # check if it is vowel\n        if stdin[left_pos] not in 'AEIOUY':\n            answer += 1\n            left_pos += 1\n            continue\n        # the vowel is vowel\n        while stdin[right_pos].isalpha():\n            right_pos -= 1\n            if right_pos < left_pos:\n                return answer\n        # we are at the end of the string\n        answer += 1\n        right_pos -= 1\n    return answer\n\n\nsolution(\"ABABBBACFEYUKOTT\")\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    string = stdin.split()\n    string = [x for x in string if x.isalpha()]\n    \n    return 1\n\n\nsolution(\"ABABBBACFEYUKOTT\")\n\nsolution(\"AAA\")"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The first line of input contains non-empty string consisting of capital English letters. It is guaranteed that the length of the string does not exceed 100. \n\n    The second line of input contains only 'A', 'E', 'I', 'O', 'U', 'Y' and 'a', 'e', 'i', 'o', 'u' and 'y' symbols.\n\n    The third line of input contains a single integer a.\n\n    The fourth line of input contains a single integer b.\n\n    The fifth line of input contains a single integer c.\n\n    The sixth line of input contains a single integer d.\n\n    The seventh line of input contains a single integer e.\n\n    The eighth line of input contains a single integer f.\n\n    The ninth line of input contains a single integer g.\n\n    The tenth line of input contains a single integer h.\n\n    The eleventh line of input contains a single integer i.\n\n    The twelfth line of input contains a single integer j.\n\n    The thirteenth line of input contains a single integer k.\n\n    The fourteenth line of input contains a single integer l.\n\n    The fifteenth line of input contains a single integer m.\n\n    The sixteenth line of input contains a single integer n.\n\n    The seventeenth line of input contains a single integer o.\n\n    The eighteenth line of input contains a single integer p.\n\n    The nineteenth line of input contains a single integer q.\n\n    The twentieth line of input contains a single integer r.\n\n    The twenty-first line of input contains a single integer s.\n\n    The twenty-second line of input contains a single integer t.\n\n    The twenty-third line of input contains a single integer u.\n\n    The twenty-fourth line of input contains a single integer v.\n\n    The twenty-fifth line of input contains a single integer w.\n\n    The twenty-sixth line of input contains a single integer x.\n\n    The twenty-seventh line of input contains a single integer y.\n\n    The twenty-eighth line of input contains a single integer z.\n\n    The last line of input contains a single integer aa.\n\n    The last line of input contains a single integer ab.\n\n    The last line of input contains a single integer ac.\n\n    The last line of input contains a single integer ad.\n\n    The last line of input contains a single integer ae.\n\n    The last line of input contains a single integer af.\n\n    The last line of input contains a single integer ag.\n\n    The last line of input contains a single integer ah.\n\n    The last line of input contains a single integer ai.\n\n    The last line of input contains a single integer aj.\n\n    The last line of input contains a single integer ak.\n\n    The last line of input contains a single integer al.\n\n    The last line of input contains a single integer am.\n\n    The last line of input contains a single integer an.\n\n    The last line of input contains a single integer ap.\n\n    The last line of input contains a single integer aq.\n\n    The last line of input contains a single integer ar.\n\n    The last line of input contains a single integer as.\n\n    The last line of input contains a single integer at.\n\n    The last line of input contains a single integer apq.\n\n    The last line of input contains a single integer aaa.\n\n    The last line of input contains a single integer abb.\n\n    The last line of input contains a single integer abc.\n\n    The last line of input contains a single integer abd.\n\n    The last line of input contains a single integer abe.\n\n    The last line of input contains a single integer abf.\n\n    The last line of input contains a single integer abg.\n\n    The last line of input contains a single integer abh.\n\n    The last line of input contains a single integer abi.\n\n    The last line of input contains a single integer abj.\n\n    The last line of input contains a single integer abk.\n\n    The last line of input contains a single integer abm.\n\n    The last line of input contains a single integer abn.\n\n    The last line of input contains a single integer abp.\n\n    The last line of input contains a single integer abq.\n\n    The last line of input contains a single integer abr.\n\n    The last line of input contains a single integer asa.\n\n    The last line of input contains a single integer asb.\n\n    The last line of input contains a single integer asc.\n\n    The last line of input contains a single integer asd.\n\n    The last line of input contains a single integer ase.\n\n    The last line of input contains a single integer asf.\n\n    The last line of input contains a single integer asg.\n\n    The last line of input contains a single integer ash.\n\n    The last line of input contains a single integer asi.\n\n    The last line of input contains a single integer asj.\n\n    The last line of input contains a single integer ask.\n\n    The last line of input contains a single integer asl.\n\n    The last line of input contains a single integer ama.\n\n    The last line of input contains a single integer amb.\n\n    The last line of input contains a single integer amc.\n\n    The last line of input contains a single integer amd.\n\n    The last line of input contains a single integer ame.\n\n    The last line of input contains a single integer amf.\n\n    The last line of input contains a single integer amg.\n\n    The last line of input contains a single integer amh.\n\n    The last line of input contains a single integer ami.\n\n    The last line of input contains a single integer amj.\n\n    The last line of input contains a single integer amk.\n\n    The last line of input contains a single integer amm.\n\n    The last line of input contains a single integer amn.\n\n    The last line of input contains a single integer amo.\n\n    The last line of input contains a single integer amq.\n\n    The last line of input contains a single integer amr.\n\n    The last line of input contains a single integer amt.\n\n    The last line of input contains a single integer anm.\n\n    The last line of input contains a single integer anq.\n\n    The last line of input contains a single integer anr.\n\n    The last line of input contains a single integer ans.\n\n    The last line of input contains a single integer ant.\n\n    The last line of input contains a single integer anu.\n\n    The last line of input contains a single integer anv.\n\n    The last line of input contains a single integer anw.\n\n    The last line of input contains a single integer anx.\n\n    The last line of input contains a single integer any.\n\n    The last line of input contains a single integer anz.\n\n    The last line of input contains a single integer aaa.\n\n    The last line of input contains a single integer aab.\n\n    The last line of input contains a single integer aac.\n\n    The last line of input contains a single integer aad.\n\n    The last line of input contains a single integer aae.\n\n    The last line of input contains a single integer aaf.\n\n    The last line of input contains a single integer aag.\n\n    The last line of input contains a single integer aah.\n\n    The last line of input contains a single integer aai.\n\n    The last line of input contains a single integer aaj.\n\n    The last line of input contains a single integer aak.\n\n    The last line of input contains a single integer aal.\n\n    The last line of input contains a single integer aam.\n\n    The last line of input contains a single integer ana.\n\n    The last line of input contains a single integer anb.\n\n    The last line of input contains a single integer anc.\n\n    The last line of input contains a single integer and.\n\n    The last line of input contains a single integer"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    vowels = ['A', 'E', 'I', 'O', 'U', 'Y']\n    \n    result = 0\n    string_length = len(stdin)\n    jumps = 0\n    \n    for i in range(string_length):\n        if stdin[i] in vowels:\n            jumps += 1\n            \n        if i + jumps > string_length:\n            result = jumps\n            break\n            \n    print(result)\n    \n    return result\n\nsolution(stdin)\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin\n    vowels = set(['A', 'E', 'I', 'O', 'U', 'Y'])\n    max_jump = 0\n    idx_string = 0\n    while idx_string < len(data):\n        if data[idx_string] in vowels:\n            max_jump = max(max_jump, idx_string)\n            idx_string += 1\n        else:\n            idx_string += 1\n    return max_jump\n\n\nsolution(\"ABABBBACFEYUKOTT\")"
    },
    {
        "number": 225,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n'''\n'''\nresult = []\ndef"
    },
    {
        "number": 225,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = (int(i) for i in stdin.split())\n    a_sum = a + b + c\n    if a_sum == d:\n        return \"YES\"\n    if a_sum!= d:\n        return \"NO\"\n\n    print(a_sum == d)"
    },
    {
        "number": 225,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    a1, a2, a3, a4 = map(int, stdin)\n    s = 0\n    for i in range(1, 5):\n        s += a1 // i\n    for j in range(2, 5):\n        s += a2 // j\n    if a3 % 2 == 0 or a4 % 2 == 0:\n        return \"NO\"\n    elif a3 > a4:\n        return \"YES\"\n    elif a3 == a4:\n        return \"YES\" if s == a1 else \"NO\"\n    elif a3 < a4:\n        return \"YES\" if s == a1 else \"NO\""
    },
    {
        "number": 225,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    a1, a2, a3, a4 = int(stdin[0]), int(stdin[1]), int(stdin[2]), int(stdin[3])\n    if a2 * a3 <= a4:\n        if a2 * a3 == a4:\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        return \"NO\""
    },
    {
        "number": 225,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.rstrip()\n    a1, a2, a3, a4 = list(map(int, stdin.split()))\n\n    return 'YES' if (\n        a1 + a2 + a3 + a4 ==\n        a1 * a2 * a3 * a4\n        ) else 'NO'\n\nsolution('''\n1 7 11 5\n''')"
    },
    {
        "number": 225,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a_1, a_2, a_3, a_4 = map(int, stdin.split())\n    return \"YES\" if a_1 + a_2 + a_3 + a_4 == 0 else \"NO\"\n"
    },
    {
        "number": 225,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    if a[0] == a[1] == a[2] == a[3]:\n        return \"YES\"\n    if a[0] == a[1] or a[0] == a[2] or a[1] == a[2] or a[0] == a[3] or a[1] == a[3] or a[2] == a[3]:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 225,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n'''\n"
    },
    {
        "number": 225,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\nInput:\n    7 3 2 5\n    1 7 11 5\n    4 1 2 3\n    2 3 1\n    5 2 4 3\n    2 1 2\n    3 3 2\n    2 1 1\n\nOutput:\n    YES\n    NO\n\nInput:\n    7 3 2 5\n    1 7 11 5\n    4 1 2 3\n    2 3 1\n    5 2 4 3\n    2 1 2\n    3 3 2\n    2 1 1\n    3 2 3\n    2 1 2\n    3 2 3\n    2 1 1\n\nOutput:\n    YES\n    NO\n\nInput:\n    2 2 2\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    1 1\n    "
    },
    {
        "number": 225,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a1, a2, a3, a4 = list(map(int, stdin.split()))\n    if a1 + a2 <= a3 and a1 + a3 <= a4 and a2 + a3 <= a4:\n        return 'YES'\n    else:\n        return 'NO'\n\n\"\"\"\n\ndef"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    return str(sum(int(stdin.strip().split()[i]) for i in range(N))), str(sum(int(stdin.strip().split()[i]) for i in range(N, 2*N)))\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n    141 592 653\n    10 21 10 21 10\n    5''')\n    653 733\n    \"\"\"\n    N = int(stdin)\n    numbers = [int(i) for i in stdin.split(\"\\n\")[1].split()]\n    a = sum(numbers[:N // 2])\n    b = sum(numbers[N // 2:])\n    return f\"{a} {b}\"\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    decider = 0\n    alice_sum = 0\n    bob_sum = 0\n    for i in range(n):\n        decider = i if decider == 0 else decider\n        if decider == i:\n            alice_sum += int(stdin.split()[i])\n        else:\n            bob_sum += int(stdin.split()[i])\n    return str(alice_sum) + \"\\n\" + str(bob_sum)\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    slices = []\n    for _ in range(int(stdin)):\n        slices.append(int(stdin.split()[_]))\n    slices = sorted(slices)\n    alice_sum = 0\n    bob_sum = 0\n    while slices:\n        alice_sum += slices.pop()\n        bob_sum += slices.pop()\n    return str(alice_sum) + \" \" + str(bob_sum)"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    sizes = list(map(int, stdin.readline().split()))\n    x = sum(sizes)\n    return str(x) + \" \" + str(sum(sizes) + x)"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    pie = list(map(int, stdin.split()))\n    A = []\n    B = []\n    decider = pie.pop()\n    while pie:\n        if decider >= pie[0]:\n            A.append(pie.pop(0))\n        else:\n            pie.append(pie.pop(0))\n            B.append(decider)\n            decider = pie.pop(0)\n    return '%s %s' % (sum(A), sum(B))\n\nprint(solution(input()))\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    inputs = list(map(int, input().split()))\n    n = inputs[0]\n\n    max_pie = max(inputs)\n    if max_pie <= 0:\n        return '0'\n\n    res_alice = 0\n    res_bob = 0\n    bob_token = inputs[1]\n    alice_token = inputs[2]\n\n    while n > 0:\n        if n % 2 == 1:\n            res_alice += bob_token\n            bob_token = alice_token\n            alice_token = bob_token\n        else:\n            res_alice += alice_token\n            bob_token = alice_token\n            alice_token = bob_token\n        n = n // 2\n    return str(res_alice) +'' + str(res_bob)\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    alice, bob = [], []\n    for i in range(n):\n        a, b = map(int, stdin.split())\n        alice.append(a)\n        bob.append(b)\n\n    # find Alice's decider token\n    decider_alice = alice.pop(0)\n    #print(decider_alice)\n\n    # make decision for each person\n    decider_alice_idx = 0\n    for i, a in enumerate(alice):\n        if a < decider_alice:\n            decider_alice_idx = i\n            break\n\n    #print(decider_alice_idx)\n\n    # Bob takes the slice\n    bob_slice = bob.pop(decider_alice_idx)\n    #print(bob_slice)\n\n    # Alice's decision\n    alice_slice = alice[0]\n    for i, a in enumerate(alice):\n        if a < alice_slice:\n            alice_slice = a\n            alice_idx = i\n    #print(alice_idx)\n\n    # print Alice's pie size\n    alice_pie = alice_slice\n    #print(alice_pie)\n\n    # print Bob's pie size\n    bob_pie = bob_slice\n    #print(bob_pie)\n\n    # calculate the result\n    return str(alice_pie) +'' + str(bob_pie)"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    total_alice = 0\n    total_bob = 0\n    for line in lines:\n        if line == \"\":\n            return '{} {}'.format(total_alice, total_bob)\n        tokens = line.split()\n        total_alice += int(tokens[1])\n        total_bob += int(tokens[2])\n    return '{} {}'.format(total_alice, total_bob)\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    nums = list(map(int, stdin.split()))\n    if n < 2:\n        return -1\n    nums = sorted(nums)\n    if nums[0]!= 0:\n        return -1\n    return str(findMin(nums, 1))\n\n\ndef"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n\n    b = [0] * n\n    c = 0\n\n    for i in range(n):\n        b[i] = 1\n        if not (a[i] in b):\n            b[a[i] - 1] = a[i]\n        else:\n            c += 1\n\n    if c == 0:\n        return \"1\"\n    else:\n        return str(c)\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a = stdin.split()\n    a = list(map(int, a.split()))\n    l = len(a)\n    ans = -1\n    for j in range(l):\n        for i in range(j, l):\n            x, y = a[j], a[i]\n            m = i\n            s = 0\n            for k in range(j, i):\n                x += y\n                y = x + y\n                if x == y:\n                    m = k\n                    s += 1\n            if s == 0:\n                ans = max(ans, m)\n    if ans == -1:\n        return '-1'\n    else:\n        return str(ans)\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    if n == 1:\n        if a[0] == 0:\n            return '1'\n        else:\n            return '-1'\n\n    # \u0441\u0442\u0440\u043e\u0447\u043a\u0430 \u0437\u0430\u043f\u0438\u0441\u0430\u043b\u0430 \u0432 \u043a\u0430\u043a\u0443\u044e-\u0442\u043e \u0441\u0442\u0440\u043e\u043a\u0443 \u0441 \u0441\u0438\u043c\u0432\u043e\u043b\u0430\u043c\u0438 \u043f\u043e\u0434\u0447\u0451\u0440\u043a\u0438\u0432\u0430\u043d\u0438\u044f\n    i = 1\n    while i < n:\n        a[i], a[i - 1] = a[i - 1], a[i]\n        i += 1\n\n    d = {-1: -1}\n    best = -1\n    while len(d) <= n:\n        if len(d) == 1:\n            if d[1] == 0:\n                return str(d[1])\n            else:\n                return '-1'\n\n        best = -1\n        for key in d.keys():\n            if key + 1 not in d.keys():\n                continue\n            if a[key] + a[key + 1] + a[d[key + 1]] == a[key + 1]:\n                if best == -1:\n                    best = key + 1\n                else:\n                    best = key + 1 if best == key + 1 else best\n        if best == -1:\n            return '-1'\n        d[best] = key + 1\n\n    return str(best)\n\n\nprint(solution(input()))"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    m = 1\n    ans = 0\n    while a!= []:\n        a_sum = sum(a)\n        b = []\n        b.append(0)\n        for i in range(m):\n            b_i = a_sum - sum(b)\n            if b_i in a:\n                ans += 1\n                b = a[b_i]\n                b.append(1)\n            else:\n                break\n        m += 1\n        a = a[b]\n    return str(ans)\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sequence = list(map(int, stdin.split()))\n\n    if n == 1:\n        return str(sequence[0])\n    sequence.sort()\n    print(sequence)\n\n    if sequence[0] < 0:\n        return \"-\"\n    if sequence[-1] > 10**9:\n        return \"-\"\n\n    if sequence[0] < 10:\n        return str(sequence[0])\n\n    if sequence[0] == 10:\n        return str(10)\n\n    for i in range(len(sequence)):\n        if sequence[i] > 10**9:\n            sequence[i] = 10**9\n\n    d = dict()\n    for i in range(len(sequence)):\n        if sequence[i] in d:\n            continue\n        d[sequence[i]] = 1\n    print(d)\n    max_count = 0\n    for i in range(len(sequence)):\n        j = 0\n        while j < len(sequence) - 1:\n            if sequence[i] + sequence[j] > 10**9:\n                break\n            if sequence[i] + sequence[j] in d:\n                if d[sequence[i] + sequence[j]] > max_count:\n                    max_count = d[sequence[i] + sequence[j]]\n                d[sequence[i] + sequence[j]] = d[sequence[i] + sequence[j]] + 1\n            j = j + 1\n    print(d)\n    if max_count == 0:\n        return \"-\"\n    return str(max_count)\n\nprint(solution(input()))\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    import itertools\n    stdin_lst = list(map(int, stdin.split()))\n    min_n_vars = float('inf')\n    possible_m = 0\n    for i in range(1, len(stdin_lst)):\n        lst = list(itertools.permutations(stdin_lst[:i], i))\n        for perm in lst:\n            if sum(perm) == stdin_lst[i]:\n                possible_m = min(i, possible_m)\n    if possible_m == float('inf'):\n        return -1\n    return possible_m"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_n = int(stdin.strip())\n    arr = [int(s) for s in stdin.split()]\n    if input_n == len(arr) and all(arr[i] >= 0 for i in range(len(arr))):\n        return str(solution2(arr))\n    else:\n        return \"-1\"\n\ndef"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.strip().split(' ')))\n    m = a[0]\n    b = a.copy()\n\n    for i in range(1, m):\n        b.insert(i, 0)\n        b.pop(i + 1)\n        b.pop(i + 1)\n    return str(len(b)) if sum(b) == a[0] else '-1'\n\n\nstdin = \"\"\"\n5\n1 2 3 6 8\n\"\"\""
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    if n <= 3:\n        return str(n - 1)\n    if n == 4:\n        return str(2)\n    if n == 5:\n        return str(4)\n    if n == 6:\n        return str(3)\n    if n == 7:\n        return str(5)\n    if n == 8:\n        return str(5)\n    if n == 9:\n        return str(6)\n    if n == 10:\n        return str(7)\n    if n == 11:\n        return str(7)\n    if n == 12:\n        return str(8)\n    if n == 13:\n        return str(9)\n    if n == 14:\n        return str(9)\n    if n == 15:\n        return str(10)\n    if n == 16:\n        return str(10)\n    if n == 17:\n        return str(11)\n    if n == 18:\n        return str(11)\n    if n == 19:\n        return str(12)\n    if n == 20:\n        return str(13)\n    if n == 21:\n        return str(13)\n    if n == 22:\n        return str(14)\n    if n == 23:\n        return str(15)\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *stones = map(int, stdin.split())\n    print('Alice' if sum(stones) % 2 == 0 else 'Bob')\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # return your answer\nstdin = \"\"\"\"\"\"\nimport sys\nsys.setrecursionlimit(10**7)\nn, a = map(int, stdin.split())\n\ndef"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    t = 0\n    a.sort(reverse=True)\n    while a:\n        if t == 0:\n            for i in range(len(a) // 2):\n                a[i], a[-(i + 1)] = a[-(i + 1)], a[i]\n        else:\n            for i in range(len(a) // 2):\n                a[i], a[-(i + 1)] = a[-(i + 1)], a[i]\n        t = (t + 1) % 2\n    if a == a[::-1]:\n        return \"Alice\"\n    else:\n        return \"Bob\"\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.strip().split())\n    alice, bob = 0, 0\n    for ai in a:\n        alice += ai\n        bob += ai\n    if alice < bob:\n        return \"Alice\"\n    else:\n        return \"Bob\""
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    alice_stones, bob_stones = stdin.split()[1], stdin.split()[2]\n    alice_stones = list(map(int, alice_stones))\n    bob_stones = list(map(int, bob_stones))\n    while len(alice_stones) > len(bob_stones):\n        alice_stones.pop(0)\n    while len(bob_stones) > len(alice_stones):\n        bob_stones.pop(0)\n    alice_remaining_stones = len(alice_stones)\n    bob_remaining_stones = len(bob_stones)\n    while True:\n        alice_remaining_stones = alice_remaining_stones - 1\n        bob_remaining_stones = bob_remaining_stones - 1\n        alice_stones.pop(0)\n        bob_stones.pop(0)\n        if alice_remaining_stones == 0:\n            return \"Bob\"\n        if bob_remaining_stones == 0:\n            return \"Alice\"\n        if alice_stones[0] < bob_stones[0]:\n            alice_remaining_stones = alice_remaining_stones - 1\n            alice_stones.pop(0)\n        else:\n            bob_remaining_stones = bob_remaining_stones - 1\n            bob_stones.pop(0)\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = list(map(int, stdin.split()))\n    if len(a)!= n // 2:\n        return \"Bob\"\n    if not n % 2:\n        return \"Alice\"\n    return \"Bob\" if a[0] % 2 else \"Alice\"\n\n\nprint(solution(input()))"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    return \"Alice\" if (sum(a) <= n / 2) else \"Bob\""
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    while a and a[-1] == 0:\n        a.pop()\n    if len(a) % 2 == 0:\n        return \"Alice\"\n    return \"Bob\"\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    (n, *a) = map(int, stdin.split())\n    if n % 2 == 1:\n        print('Bob')\n    else:\n        # Number of nonempty piles\n        k = int(n / 2)\n        # Number of stones in piles\n        s = [a[i] for i in range(k)]\n        while True:\n            # If the player who moves first does not have enough stones,\n            # the player who is second moves wins.\n            # A player can only pick stones from non-empty piles.\n            # Players will be able to pick a number of stones from a non-empty pile.\n            # Players do not have to pick the same pile twice.\n            if max(s) < 1:\n                break\n            if s[0] > 0:\n                if s[1] > 0:\n                    if s[2] > 0:\n                        if s[3] > 0:\n                            if s[4] > 0:\n                                if s[5] > 0:\n                                    if s[6] > 0:\n                                        if s[7] > 0:\n                                            if s[8] > 0:\n                                                if s[9] > 0:\n                                                    if s[10] > 0:\n                                                        if s[11] > 0:\n                                                            if s[12] > 0:\n                                                                if s[13] > 0:\n                                                                    if s[14] > 0:\n                                                                        if s[15] > 0:\n                                                                            if s[16] > 0:\n                                                                                if s[17] > 0:\n                                                                                    if s[18] > 0:\n                                                                                        if s[19] > 0:\n                                                                                            if s[20] > 0:\n                                                                                                if s[21] > 0:\n                                                                                                    if s[22] > 0:\n                                                                                                        if s[23] > 0:\n                                                                                                            if s[24] > 0:\n                                                                                                                if s[25] > 0:\n                                                                                                                    if s[26] > 0:\n                                                                                                                        if s[27] > 0:\n                                                                                                                            if s[28] > 0:\n                                                                                                                                if s[29] > 0:\n                                                                                                                                   if s[30] > 0:\n                                                                                                                                       if s[31] > 0:\n                                                                                                                                           if s[32] > 0:\n                                                                                                                                              if s[33] > 0:\n                                                                                                                                                if s[34] > 0:\n                                                                                                                                                   if s[35] > 0:\n                                                                                                                                                           if s[36] > 0:\n                                                                                                                                                               if s[37] > 0:\n                                                                                                                                                                   if s[38] > 0:\n                                                                                                                                                                      if s[39] > 0:\n                                                                                                                                                                           if s[40] > 0:\n                                                                                                                                                                               if s[41] > 0:\n                                                                                                                                                                                  if s[42] > 0:\n                                                                                                                                                                                            if s[43] > 0:\n                                                                                                                                                                                                 if s[44] > 0:\n                                                                                                                                                                                                                if s[45] > 0:\n                                                                                                                                                                                                                        if s[46] > 0:\n                                                                                                                                                                                                                            if s[47] > 0:\n                                                                                                                                                                                                                           if s[48] > 0:\n                                                                                                                                                                                                                            if s[49] > 0:\n                                                                                                                                                                                                                             if s[50] > 0:\n                                                                                                                                                                                                                                    print('Alice')\n                                                                                                                                                                                                                                if s[51] > 0:\n                                                                                                                                                                                                                                    if s[52] > 0:\n                                                                                                                                                                                                                                        if s[53] > 0:\n                                                                                                                                                                                                                                            if s[54] > 0:\n                                                                                                                                                                                                                                        if s[55] > 0:\n                                                                                                                                                                                                                                        if s[56] > 0:\n                                                                                                                                                                                                                                        if s[57] > 0:\n                                                                                                                                                                                                                                        if s[58] > 0:\n                                                                                                                                                                                                                                        if s[59] > 0:\n                                                                                                                                                                                                                                        if s[60] > 0:\n                                                                                                                                                                                                                                        if s[61] > 0:\n                                                                                                                                                                                                                                        if s[62] > 0:\n                                                                                                                                                                                                                                        if s[63] > 0:\n                                                                                                                                                                                                                                        if s[64] > 0:\n                                                                                                                                                                                                                                        if s[65] > 0:\n                                                                                                                                                                                                                                        if s[66] > 0:\n                                                                                                                                                                                                                                        if s[67] > 0:\n                                                                                                                                                                                                                                        if s[68] > 0:\n                                                                                                                                                                                                                                        if s[69] > 0:\n                                                                                                                                                                                                                                        if s[70] > 0:\n                                                                                                                                                                                                                                        if s[71] > 0:\n                                                                                                                                                                                                                                        if s[72] > 0:\n                                                                                                                                                                                                                                        if s[73] > 0:\n                                                                                                                                                                                                                                        if s[74] > 0:\n                                                                                                                                                                                                                                        if s[75] > 0:\n                                                                                                                                                                                                                                        if s[76] > 0:\n                                                                                                                                                                                                                                        if s[77] > 0:\n                                                                                                                                                                                                                                        if s[78] > 0:\n                                                                                                                                                                                                                                        if s[79] > 0:\n                                                                                                                                                                                                                                        if s[80] > 0:\n                                                                                                                                                                                                                                        if s[81] > 0:\n                                                                                             "
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n\n    def move(t, n):\n        if n <= 0:\n            return t, t\n        elif n == 1:\n            return t[0], t[1]\n        else:\n            return t[0], move(t[2:], n-2)\n\n    return move(a, n//2)\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    a = list(map(int, stdin[1]))\n    x = int(stdin[2])\n\n    for i in range(n):\n        a[i] += x\n        a[i] -= x\n\n    for i in range(n - 1):\n        if a[i]!= a[i + 1]:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    nums = sorted(set(arr))\n    for x in nums:\n        if arr.count(x)!= len(arr):\n            return \"NO\"\n        else:\n            arr.remove(x)\n    return \"YES\"\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = [int(x) for x in stdin.split()]\n    for x in arr:\n        if x == arr[0] or x == arr[-1]:\n            continue\n        for i in range(len(arr) - 1):\n            if x + arr[i] == arr[i + 1] or x - arr[i] == arr[i + 1]:\n                continue\n            else:\n                return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    m = a[0]\n    n = a[1]\n    for i in range(n):\n        if (m - 1) + i == m:\n            return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\nn = int(stdin)\na = list(map(int, stdin.split()))"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    sum_elements = 0\n    for i in range(n):\n        sum_elements += a[i]\n    \n    if sum_elements!= 0:\n        return \"NO\"\n    else:\n        for i in range(n):\n            a.remove(a[i])\n            a.append(a[i])\n        return \"YES\"\n\nsolution(input())\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solves the puzzle.\"\"\"\n    n = int(stdin)\n    array = list(map(int, stdin.split()))\n    first_elem = array.pop(0)\n    second_elem = array.pop(-1)\n    for i in range(0, n):\n        if first_elem!= array[i] or second_elem!= array[i]:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split()\n    n = int(a[0])\n    a = list(map(int, a[1:]))\n    max_num = max(a)\n    sum_n = sum(a)\n    if sum_n!= max_num * n:\n        return \"NO\"\n    first = a.pop(0)\n    a.append(first)\n    for i in range(n - 1):\n        if sum(a)!= max_num * n:\n            return \"NO\"\n        a.pop(0)\n        a.append(first)\n    return \"YES\"\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    arr = list(map(int, stdin.strip().split()))\n    for i in range(1, n):\n        if arr[i-1]!= arr[i]:\n            if arr[i]!= arr[i+1] and arr[i]!= arr[i-1]:\n                return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_length, input_str = stdin.split()\n    max_length = 0\n    for length in range(1, int(input_length) + 1):\n        num_strings = 0\n        for i in range(0, len(input_str) - length + 1):\n            if input_str[i:i + length] == input_str[i + length:i + 2 * length]:\n                num_strings += 1\n        if num_strings > max_length:\n            max_length = num_strings\n    if max_length == 0:\n        return '0'\n    return str(max_length)\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    length, s = int(stdin), stdin.rstrip()\n    max_length = 0\n    for i in range(0, len(s) - length + 1):\n        length = 0\n        while length < length + length:\n            for j in range(i, i + length):\n                if s[j]!= s[j + length]:\n                    break\n                length += 1\n            else:\n                if length > max_length:\n                    max_length = length\n    return max_length if max_length else 0\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N: int = int(stdin)\n    S: str = stdin.strip()\n\n    ans: int = 0\n    max_length: int = 0\n\n    for i in range(len(S)):\n        for j in range(i, len(S)):\n            length = j - i + 1\n            if length == max_length:\n                if S[i:j + 1] in S[i + 1:]:\n                    break\n            elif length > max_length:\n                max_length = length\n                ans = length\n    if ans == 0:\n        print(ans)\n    else:\n        print(ans)\n    return \"\""
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    S = stdin\n    ans = 0\n    if N == 1:\n        return S\n    if N == 2:\n        if S[0] == S[1]:\n            return 2\n        else:\n            return 0\n\n    # code here\n    start = 0\n    for end in range(len(S)):\n        while start < len(S) and S[start] == S[end]:\n            start += 1\n\n        if end - start + 1 > ans:\n            ans = end - start + 1\n\n    if ans == 0:\n        print(0)\n    else:\n        print(ans)\n\n\nsolution(input())\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    S = stdin\n    n = len(S)\n    max_len = 0\n    for i in range(n):\n        for j in range(i, n):\n            sub_str = S[i:j+1]\n            count = 0\n            for k in range(n):\n                if sub_str[k] == S[k]:\n                    count += 1\n            if count == 2 and j - i + 1 > max_len:\n                max_len = j - i + 1\n    if max_len == 0:\n        return 0\n    return str(max_len)"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    N = int(stdin)\n    S = stdin.split()\n\n    for i in range(N):\n        if S[i] == S[i + 1]:\n            S.remove(S[i])\n            S.remove(S[i])\n            return str(len(S))\n    return \"0\"\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    S = stdin\n    max_len = 0\n    curr_len = 0\n    temp_list = []\n    for i in range(N):\n        curr_len += 1\n        if i < N - 1:\n            if S[i] == S[i + 1]:\n                curr_len += 1\n                temp_list.append(curr_len)\n        if max_len < curr_len:\n            max_len = curr_len\n            if temp_list:\n                temp_list.sort()\n                max_len = temp_list[-1]\n    if max_len == 0:\n        return '0'\n    return str(max_len)\n\ndef"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    import math\n    \n    N = int(stdin)\n    S = stdin.strip()\n    if N == 0:\n        return str(0)\n    \n    if N == 1:\n        return str(0) if len(S) == 0 else str(1)\n    \n    len_max = 0\n    res = \"\"\n    \n    # brute force approach\n    for i in range(math.ceil(len(S) / 2)):\n        if len(S) - i <= N:\n            break\n        \n        sub = S[i]\n        for j in range(i + 1, len(S) - 1):\n            if sub == S[j]:\n                continue\n            if sub * 2 in S[i + 1: j]:\n                len_max = max(len_max, j - i)\n                res = sub\n                break\n    \n    return res + str(len_max) if len_max > 0 else \"\"\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    S = stdin\n    max_str = \"\"\n    for i in range(0, N - 1):\n        str1 = S[0: i + 1]\n        str2 = S[i + 1:N]\n        if str1 in str2 and str1 not in max_str:\n            max_str = str1\n    if max_str == \"\":\n        print(0)\n    else:\n        print(len(max_str))\nsolution(input())\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N: int = int(stdin)\n    S: str = stdin\n    # Solution:\n    # - If there is no such string, return 0.\n    # - Create a set of all the substrings in S\n    # - For each string in S, check if it is in the set of all the substrings. If it is not, return 0.\n    # - If it is in the set of substrings, increment the count and return the maximum count\n    # - If all the counts of the strings in S are 1, return max(max(strings) - min(strings))\n    strings: set = {S[i:i+len(S)] for i in range(0, len(S))}\n    count = 1\n    # If there are no strings in S, return 0.\n    if len(strings) == 0:\n        return str(0)\n    # If there is only one string in S, return the length of that string.\n    if len(strings) == 1:\n        return str(len(strings[0]))\n    # If there are more than one strings in S, check if they are all in the set. If they are not, return 0.\n    for str1 in strings:\n        for str2 in strings:\n            if str1!= str2 and str1 in str2:\n                return str(0)\n    # If all the strings in S are in the set, increment the count and return the maximum count.\n    return str(max(len(s) for s in strings) - min(len(s) for s in strings))\n"
    },
    {
        "number": 231,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n    ... 2\n    ... 3\n    ... 1\n    ... 2\n    ... ''')\n    '2'\n    >>> solution('''\n    ... 8\n    ... 3\n    ... 1\n    ... 2\n    ... ''')\n    '3'\n    \"\"\"\n    n, a = map(int, stdin.strip().split())\n    return str(n - 2 * a)\n"
    },
    {
        "number": 231,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a = list(map(int, stdin.split()))\n    if n % 2:\n        return 'impossible'\n    if a % 2:\n        return 'impossible'\n    if a > n:\n        return 'impossible'\n    if a == 1 or n == 1:\n        return 0\n    if a == n:\n        return 1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 1\n    if n == 4:\n        return 1\n    if n == 5:\n        return 2\n    if n == 6:\n        return 3\n    if n == 7:\n        return 4\n    if n == 8:\n        return 5\n    if n == 9:\n        return 6\n    if n == 10:\n        return 7\n    if n == 11:\n        return 8\n    if n == 12:\n        return 9\n    if n == 13:\n        return 10\n    if n == 14:\n        return 11\n    if n == 15:\n        return 12\n    if n == 16:\n        return 13\n    if n == 17:\n        return 14\n    if n == 18:\n        return 15\n    if n == 19:\n        return 16\n    if n == 20:\n        return 17\n    if n == 21:\n        return 18\n    if n == 22:\n        return 19\n    if n == 23:\n        return 20\n    if n == 24:\n        return 21\n    if n == 25:\n        return 22\n    if n == 26:\n        return 23\n    if n == 27:\n        return 24\n    if n == 28:\n        return 25\n    if n == 29:\n        return 26\n    if n == 30:\n        return 27\n    if n == 31:\n        return 28\n    if n == 32:\n        return 29\n    if n == 33:\n        return 30\n    if n == 34:\n        return 31\n    if n == 35:\n        return 32\n    if n == 36:\n        return 33\n    if n == 37:\n        return 34\n    if n == 38:\n        return 35\n    if n == 39:\n        return 36\n    if n == 40:\n        return 37\n    if n == 41:\n        return 38\n    if n == 42:\n        return 39\n    if n == 43:\n        return 40\n    if n == 44:\n        return 41\n    if n == 45:\n        return 42\n    if n == 46:\n        return 43\n    if n == 47:\n        return 44\n    if n == 48:\n        return 45\n    if n == 49:\n        return 46\n    if n == 50:\n        return 47\n    if n == 51:\n        return 48\n    if n == 52:\n        return 49\n    if n == 53:\n        return 50\n    if n == 54:\n        return 51\n    if n == 55:\n        return 52\n    if n == 56:\n        return 53\n    if n == 57:\n        return 54\n    if n == 58:\n        return 55\n    if n == 59:\n        return 56\n    if n == 60:\n        return 57\n    if n == 61:\n        return 58\n    if n == 62:\n        return 59\n    if n == 63:\n        return 60\n    if n == 64:\n        return 61\n    if n == 65:\n        return 62\n    if n == 66:\n        return 63\n    if n == 67:\n        return 64\n    if n == 68:\n        return 65\n    if n == 69:\n        return 66\n    if n == 70:\n        return 67\n    if n == 71:\n        return 68\n    if n == 72:\n        return 69\n    if n == 73:\n        return 70\n    if n == 74:\n        return 71\n    if n == 75:\n        return 72\n    if n == 76:\n        return 73\n    if n == 77:\n        return 74\n    if n == 78:\n        return 75\n    if n == 79:\n        return 76\n    if n == 80:\n        return 77\n    if n == 81:\n        return 78\n    if n == 82:\n        return 79\n    if n == 83:\n        return 80\n    if n == 84:\n        return 81\n    if n == 85:\n        return 82\n    if n == 86:\n        return 83\n    if n == 87:\n        return 84\n    if n == 88:\n        return 85\n    if n == 89:\n        return 86\n    if n == 90:\n        return 87\n    if n == 91:\n        return 88\n    if n == 92:\n        return 89\n    if n == 93:\n        return 90\n    if n == 94:\n        return 91\n    if n == 95:\n        return 92\n    if n == 96:\n        return 93\n    if n == 97:\n        return 94\n    if n == 98:\n        return 95\n    if n == 99:\n        return 96\n    if n == 100:\n        return 97\n    if n == 101:\n        return 98\n    if n == 102:\n        return 99\n    if n == 103:\n        return 100\n    if n == 104:\n        return 101\n    if n == 105:\n        return 102\n    if n == 106:\n        return 103\n    if n == 107:\n        return 104\n    if n == 108:\n        return 105\n    if n == 109:\n        return 106\n    if n == 110:\n        return 107\n    if n == 111:\n        return 108\n    if n == 112:\n        return 109\n    if n == 113:\n        return 110\n    if n == 114:\n        return 111\n    if n == 115:\n        return 112\n    if n == 116:\n        return 113\n    if n == 117:\n        return 114\n    if n == 118:\n        return 115\n    if n == 119:\n        return 116\n    if n == 120:\n        return 117\n    if n == 121:\n        return 118\n    if n == 122:\n        return 119\n    if n == 123:\n        return 120\n    if n == 124:\n        return 121\n    if n == 125:\n        return 122\n    if n == 126:\n        return 123\n    if n == 127:\n        return 124\n    if n == 128:\n        return 125\n    if n == 129:\n        return 126\n    if n == 130:\n        return 127\n    if n == 131:\n        return 128\n    if n == 132:\n        return 129\n    if n == 133:\n        return 130\n    if n == 134:\n        return 131\n    if n == 135:\n        return 132\n"
    },
    {
        "number": 231,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.splitlines()\n    n, a = int(input_lines[0]), int(input_lines[1])\n    return min_time(n, a)\n\n\ndef"
    },
    {
        "number": 231,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    _, n, a = stdin.split()\n    n, a = int(n), int(a)\n    m = n - (n % 2)\n\n    return m - a"
    },
    {
        "number": 231,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    For every even number in the range 1 to n, find the difference between the number of houses in the left and right side of the street.\n    For every odd number in the range 2 to n - 1, find the difference between the number of houses in the left and right side of the street.\n    If the difference between the two is the same, we are done.\n    Then we need to find the smallest such difference.\n    \"\"\"\n    n, a = map(int, stdin.split())\n    left = a\n    right = n - a\n    min_diff = right - left\n    for i in range(1, n):\n        left_diff = a - i\n        right_diff = n - a + i\n        if left_diff < right_diff:\n            min_diff = min(min_diff, right_diff - left_diff)\n        else:\n            min_diff = min(min_diff, left_diff - right_diff)\n    return str(min_diff)\n"
    },
    {
        "number": 231,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, a = stdin.split()\n    n, a = int(n), int(a)\n    return 2 * n - 1\n"
    },
    {
        "number": 231,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 231,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, a = list(map(int, stdin.split()))\n    if (a <= n // 2) | (a <= 1):\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 231,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    # number of houses at each side\n    k = n // 2\n    # number of houses at the middle\n    l = (n - 1) // 2\n    # number of houses on the right\n    h = n - 1 - l\n    # number of houses on the left\n    f = l + 1\n\n    # minimum time needed to get to the middle\n    t = (2 * k + 1) * (l + 1)\n    # minimum time needed to get from the middle to the left\n    t += ((2 * k + 1) + (2 * h + 1) + (2 * f + 1))\n    # minimum time needed to get from the middle to the right\n    t += ((2 * k + 1) + (2 * h + 1) + (2 * f + 1))\n\n    # minimum time needed to get from the left to the middle\n    t += ((2 * k + 1) + (2 * h + 1))\n    # minimum time needed to get from the right to the middle\n    t += ((2 * k + 1) + (2 * h + 1))\n\n    # minimum time needed to get from the left to the right\n    t += (2 * k + 1)\n\n    # minimum time needed to get from the right to the left\n    t += (2 * k + 1)\n\n    print(min(t, n))\n    return min(t, n)\n"
    },
    {
        "number": 231,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, a = list(map(int, stdin.split()))\n    min_time = 0\n    if (a + 1) % 2 == 1:\n        min_time = (n + 1) / 2 - a - 1\n    else:\n        min_time = (n + 1) / 2 - a\n    return str(min_time)"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    colors = list(map(int, stdin.split()))\n    k = list(map(int, stdin.split()))\n    return \"YES\" if is_interval(colors, k) else \"NO\"\n\n\ndef"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    lights = list(map(int, stdin.split()))\n    lights.sort()\n    counts = [0] * (n + 1)\n    for color in range(1, m + 1):\n        low = 0\n        high = n\n        while low + 1 < high:\n            mid = low + (high - low) // 2\n            if lights[mid] == color:\n                high = mid\n            else:\n                low = mid\n        counts[color] = low\n    colors = 0\n    for color in range(1, m + 1):\n        low = 0\n        high = n\n        while low + 1 < high:\n            mid = low + (high - low) // 2\n            if counts[mid] >= color:\n                high = mid\n            else:\n                low = mid\n        colors += high - low\n    if colors == m:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k_1, k_2, k_3, k_4 = stdin.split()\n    n, m = int(n), int(m)\n    k_1, k_2, k_3, k_4 = int(k_1), int(k_2), int(k_3), int(k_4)\n\n    intervals = []\n\n    for i in range(1, n):\n        intervals.append((i, 1))\n\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            intervals.append((i, j))\n\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            intervals.append((i, j))\n\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                intervals.append((i, j, k))\n\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                for l in range(k + 1, n):\n                    intervals.append((i, j, k, l))\n\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                for l in range(k + 1, n):\n                    for m in range(l + 1, n):\n                        intervals.append((i, j, k, l, m))\n\n    intervals = sorted(intervals, key=lambda x: x[0] + x[1])\n    intervals = sorted(intervals, key=lambda x: x[2] + x[3])\n    intervals = sorted(intervals, key=lambda x: x[4] + x[5])\n\n    if k_1 + k_2 + k_3 + k_4 <= n and k_1 * k_2 * k_3 * k_4 <= n:\n        for i in range(n):\n            if intervals[i][0] + intervals[i][1] >= k_1 and intervals[i][0] + intervals[i][1] <= k_2 and intervals[i][2] + intervals[i][3] >= k_3 and intervals[i][2] + intervals[i][3] <= k_4:\n                return \"YES\"\n        return \"NO\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k_1, k_2, k_3 = stdin.split()\n    n, m, k_1, k_2, k_3 = int(n), int(m), int(k_1), int(k_2), int(k_3)\n    # count_lightsaber_of_color = [k_1, k_2, k_3]\n    for i in range(1, m + 1):\n        if n % (i) == 0:\n            for j in range(i):\n                if n % (i * j) == 0:\n                    if i == j == 1:\n                        count_lightsaber_of_color = 0\n                    else:\n                        count_lightsaber_of_color = 1\n                    for k in range(j, m):\n                        if (n - (i * j)) % (i * (k + 1)) == 0:\n                            count_lightsaber_of_color += 1\n                    if count_lightsaber_of_color == k_1:\n                        print('YES')\n                        return\n    print('NO')\n    return"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, *lights = map(int, stdin.split())\n\n    return \"YES\" if len(set(lights)) == m else \"NO\"\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(x) for x in stdin.split())\n    colors = {int(x) for x in stdin.split()}\n    for color in colors:\n        if n - color in colors:\n            return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    colors = list(map(int, stdin.split()))\n    n_colors = sum(colors)\n    if n_colors == 1:\n        return \"YES\"\n    min_count = 1\n    max_count = n_colors\n    while min_count <= max_count:\n        count = (max_count + min_count) // 2\n        colors_sum = sum(i - 1 for i in colors if i <= count)\n        if colors_sum == n_colors - count:\n            return \"YES\"\n        if colors_sum > n_colors - count:\n            max_count = count - 1\n        else:\n            min_count = count + 1\n    return \"NO\"\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    #write your code here\n    #return your answer\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    inp = stdin.strip().split()\n    if len(inp)!= 2:\n        raise ValueError(\"Wrong input\")\n    n = int(inp[0])\n    player1, player2 = inp[1].split(\" \")\n    player1 = set([int(c) for c in player1])\n    player2 = set([int(c) for c in player2])\n    for _ in range(n):\n        player1 = player1.intersection(set([int(c) for c in input().split(\" \")]))\n        player2 = player2.intersection(set([int(c) for c in input().split(\" \")]))\n    if len(player1) > len(player2):\n        return \"Mishka\"\n    elif len(player1) < len(player2):\n        return \"Chris\"\n    else:\n        return \"Friendship is magic!\"\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    cubes = [int(x) for x in stdin.splitlines()[1:]]\n    count = 0\n    max_count = 0\n    m_value = 0\n    m_win = 0\n    for i in range(n):\n        if cubes[i] > cubes[i + 1]:\n            count += 1\n            if count > max_count:\n                max_count = count\n                m_value = cubes[i]\n                m_win = i\n        else:\n            count = 0\n    if count > max_count:\n        max_count = count\n        m_value = cubes[m_win]\n    if max_count > 1:\n        return \"Friendship is magic!^^\"\n    elif max_count == 1:\n        return f\"Chris, {m_value}\"\n    else:\n        return f\"Mishka\""
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    score = [0, 0]\n    for i in range(n):\n        m, c = map(int, stdin.split())\n        if m > c:\n            score[0] += 1\n        elif m < c:\n            score[1] += 1\n    if score[0] > score[1]:\n        return \"Mishka\"\n    elif score[1] > score[0]:\n        return \"Chris\"\n    else:\n        return \"Friendship is magic!^^\"\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    result = \"\"\n    if n == 0:\n        return \"Friendship is magic!^^\"\n    m_count = 0\n    c_count = 0\n    winner = 0\n    for i in range(n):\n        n_dice = list(map(int, stdin.split()))\n        if n_dice[0] > n_dice[1]:\n            winner = 1\n        elif n_dice[0] < n_dice[1]:\n            winner = 2\n        elif n_dice[0] == n_dice[1]:\n            winner = 0\n        else:\n            continue\n        if winner == 1:\n            m_count += 1\n        if winner == 2:\n            c_count += 1\n        if m_count > c_count:\n            result = \"Mishka\"\n            break\n        elif m_count < c_count:\n            result = \"Chris\"\n            break\n        else:\n            result = \"Friendship is magic!^^\"\n            break\n    return result\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    winner = None\n    draw = None\n    while count < n:\n        m, c = map(int, stdin.split())\n        if m > c:\n            count += 1\n            winner = \"Mishka\"\n        elif m < c:\n            count += 1\n            winner = \"Chris\"\n        else:\n            count += 1\n            draw = \"Friendship is magic!^^\"\n    if winner == \"Mishka\":\n        return winner\n    else:\n        return winner + \" \" + draw\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"Mishka\"\n    if n == 2:\n        return \"Chris\"\n    if n == 3:\n        return \"Friendship is magic!^^\"\n    elif n == 4:\n        return \"Chris\"\n    else:\n        return \"Chris\""
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split()\n    n = int(lines[0])\n    if n == 0:\n        return \"Friendship is magic!\"\n    res = \"\"\n    for i in range(n):\n        line = lines[i + 1].split()\n        first, second = int(line[0]), int(line[1])\n        if first > second:\n            res = \"Mishka\"\n            break\n        elif first == second:\n            res = \"Friendship is magic!\"\n            break\n        else:\n            res = \"Chris\"\n    return res\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    first_winner = None\n    second_winner = None\n    win_total = 0\n    for i in range(n):\n        m, c = map(int, stdin.strip().split())\n        if m > c:\n            if first_winner is None:\n                first_winner = 'Mishka'\n            else:\n                win_total += 1\n        elif m < c:\n            if second_winner is None:\n                second_winner = 'Chris'\n            else:\n                win_total += 1\n        else:\n            win_total += 1\n    if win_total == 2:\n        return 'Friendship is magic!^^'\n    elif first_winner is None and second_winner is None:\n        return 'Friendship is magic!^^'\n    else:\n        return first_winner if win_total == 2 else second_winner if win_total == 1 else 'Friendship is magic!^^'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    game_num, rounds = stdin.split()\n    game_num = int(game_num)\n    rounds = int(rounds)\n    count = 0\n    count_m = 0\n    count_c = 0\n    while count < rounds:\n        count += 1\n        m, c = stdin.split()\n        m = int(m)\n        c = int(c)\n        if m > c:\n            count_m += 1\n        elif m < c:\n            count_c += 1\n        else:\n            count_m = count_c = 0\n    if count_m > count_c:\n        return \"Mishka\"\n    elif count_m < count_c:\n        return \"Chris\"\n    else:\n        return \"Friendship is magic!^^\""
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin\n    n = int(input.split()[0])\n    n_list = []\n    c_list = []\n    for i in range(n):\n        n_list.append(list(map(int, input.split()[i * 2 + 1].split())))\n        c_list.append(list(map(int, input.split()[i * 2 + 2].split())))\n\n    lst = []\n    i = 0\n    while i < n:\n        lst.append(c_list[i][0])\n        if c_list[i][0] == c_list[i][1]:\n            i += 2\n            continue\n        if c_list[i][0] > c_list[i + 1][0]:\n            if c_list[i + 1][0] > c_list[i + 2][0]:\n                lst.append(c_list[i + 1][0])\n            else:\n                lst.append(c_list[i + 2][0])\n            i += 3\n        else:\n            if c_list[i][0] > c_list[i + 1][0]:\n                lst.append(c_list[i][0])\n            else:\n                lst.append(c_list[i + 1][0])\n            i += 2\n    return \"Chris\" if lst.count(lst[0]) > lst.count(lst[1]) else \"Mishka\" if lst.count(lst[0]) < lst.count(lst[1]) else \"Friendship is magic!\"\n\n\nprint(solution(input))\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split(\"\\n\")\n    return \"YES\" if solution1(a) else \"NO\"\n\n\ndef"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    field = [[*map(int, line.strip())] for line in stdin.strip().split('\\n')]\n    if any([line.count(1) > 0 for line in field]):\n        return \"YES\"\n    else:\n        return \"NO\"\n    \ndef"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.split()]\n    arr = [list(i) for i in stdin.split('\\n')]\n\n    def is_valid_bombs(x, y):\n        count = 0\n        for a, b in ((x - 1, y), (x, y - 1), (x + 1, y), (x, y + 1)):\n            if 0 <= a < n and 0 <= b < m and arr[a][b] == '*':\n                count += 1\n        if count == 1:\n            return True\n        else:\n            return False\n\n    for y in range(m):\n        for x in range(n):\n            if is_valid_bombs(x, y):\n                continue\n            else:\n                count = 0\n                for a, b in ((x - 1, y), (x, y - 1), (x + 1, y), (x, y + 1)):\n                    if 0 <= a < n and 0 <= b < m and arr[a][b] == '*':\n                        count += 1\n                if count == 4:\n                    return 'YES'"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split()\n    n, m = map(int, lines[0].split())\n\n    field = list(map(lambda x: x.strip().replace('.', '*'), lines[1:]))\n    return \"YES\" if check_field(field, n, m) else \"NO\"\n\ndef"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    field = [[0] * m for i in range(n)]\n    for i in range(n):\n        line = stdin[i].split()\n        for j in range(m):\n            if line[j] == \"*\":\n                field[i][j] = -1\n            elif line[j].isdigit():\n                field[i][j] = int(line[j])\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == -1:\n                continue\n            if field[i][j] == 0:\n                continue\n            if j == 0:\n                if i == 0:\n                    if field[i][j + 1] == 0:\n                        field[i][j + 1] = -1\n                    elif field[i + 1][j + 1] == 0:\n                        field[i + 1][j + 1] = -1\n                elif i == n - 1:\n                    if field[i][j + 1] == 0:\n                        field[i][j + 1] = -1\n                    elif field[i - 1][j + 1] == 0:\n                        field[i - 1][j + 1] = -1\n                else:\n                    if field[i][j + 1] == 0:\n                        field[i][j + 1] = -1\n                    if field[i + 1][j + 1] == 0:\n                        field[i + 1][j + 1] = -1\n                    if field[i - 1][j + 1] == 0:\n                        field[i - 1][j + 1] = -1\n            elif j == m - 1:\n                if i == 0:\n                    if field[i][j - 1] == 0:\n                        field[i][j - 1] = -1\n                    elif field[i + 1][j - 1] == 0:\n                        field[i + 1][j - 1] = -1\n                elif i == n - 1:\n                    if field[i][j - 1] == 0:\n                        field[i][j - 1] = -1\n                    elif field[i - 1][j - 1] == 0:\n                        field[i - 1][j - 1] = -1\n                else:\n                    if field[i][j - 1] == 0:\n                        field[i][j - 1] = -1\n                    if field[i + 1][j - 1] == 0:\n                        field[i + 1][j - 1] = -1\n                    if field[i - 1][j - 1] == 0:\n                        field[i - 1][j - 1] = -1\n            else:\n                if field[i][j - 1] == 0:\n                    field[i][j - 1] = -1\n                if field[i][j + 1] == 0:\n                    field[i][j + 1] = -1\n                if field[i + 1][j - 1] == 0:\n                    field[i + 1][j - 1] = -1\n                if field[i + 1][j] == 0:\n                    field[i + 1][j] = -1\n                if field[i + 1][j + 1] == 0:\n                    field[i + 1][j + 1] = -1\n                if field[i - 1][j - 1] == 0:\n                    field[i - 1][j - 1] = -1\n                if field[i - 1][j] == 0:\n                    field[i - 1][j] = -1\n                if field[i - 1][j + 1] == 0:\n                    field[i - 1][j + 1] = -1\n        for i in range(n):\n            for j in range(m):\n                if field[i][j] == -1:\n                    continue\n                if field[i][j] == 0:\n                    continue\n                if field[i][j] == 1:\n                    field[i][j] = 0\n                else:\n                    field[i][j] = 1\n        for i in range(n):\n            if field[i][0] == -1:\n                continue\n            if field[i][0] == 0:\n                continue\n            if field[i][0] == 1:\n                field[i][0] = 0\n            else:\n                field[i][0] = 1\n        for i in range(n):\n            if field[i][m - 1] == -1:\n                continue\n            if field[i][m - 1] == 0:\n                continue\n            if field[i][m - 1] == 1:\n                field[i][m - 1] = 0\n            else:\n                field[i][m - 1] = 1\n        for i in range(m):\n            if field[0][i] == -1:\n                continue\n            if field[0][i] == 0:\n                continue\n            if field[0][i] == 1:\n                field[0][i] = 0\n            else:\n                field[0][i] = 1\n        for i in range(m):\n            if field[n - 1][i] == -1:\n                continue\n            if field[n - 1][i] == 0:\n                continue\n            if field[n - 1][i] == 1:\n                field[n - 1][i] = 0\n            else:\n                field[n - 1][i] = 1\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == -1:\n                continue\n            if field[i][j] == 0:\n                continue\n            if field[i][j] == 1:\n                field[i][j] = 0\n            else:\n                field[i][j] = 1\n    for i in range(n):\n        if field[i][0] == -1:\n            continue\n        if field[i][0] == 0:\n            continue\n        if field[i][0] == 1:\n            field[i][0] = 0\n        else:\n            field[i][0] = 1\n    for i in range(m):\n        if field[0][i] == -1:\n            continue\n        if field[0][i] == 0:\n            continue\n        if field[0][i] == 1:\n            field[0][i] = 0\n        else:\n            field[0][i] = 1\n    for i in range(m):\n        if field[n - 1][i] == -1:\n            continue\n        if field[n - 1][i] == 0:\n            continue\n        if field[n - 1][i] == 1:\n            field[n -"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    field = []\n    for _ in range(n):\n        field.append(stdin[i])\n    return \"YES\" if valid(field, n, m) else \"NO\"\n\n\ndef"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    matrix = []\n    for _ in range(n):\n        matrix.append(stdin.split()[:m])\n        stdin = stdin[m:]\n    return \"YES\" if Minesweeper(matrix) else \"NO\"\n\n\ndef"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    field = [[c for c in stdin.strip()] for _ in range(n)]\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    \n    def is_valid(r, c):\n        return 0 <= r < n and 0 <= c < m\n    \n    def dfs(r, c, depth):\n        if depth == 0:\n            return True\n        if field[r][c] == '*':\n            return False\n        if not is_valid(r, c):\n            return False\n        for i, j in directions:\n            new_r, new_c = r + i, c + j\n            if field[new_r][new_c] == '*':\n                continue\n            if field[new_r][new_c] == '.':\n                field[new_r][new_c] = '*'\n                if dfs(new_r, new_c, depth - 1):\n                    return True\n                field[new_r][new_c] = '.'\n        return False\n    \n    return 'YES' if dfs(0, 0, n * m) else 'NO'"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    l = stdin.split()\n    n = int(l[0])\n    m = int(l[1])\n    d = [[0]*m for i in range(n)]\n    bomb = [[0]*m for i in range(n)]\n    for i in range(n):\n        for j in range(m):\n            d[i][j] = l[i+2][j+2]\n    bomb[n-1][m-1] = 1\n    for i in range(n-1):\n        bomb[i][m-1] = 1\n    for i in range(m-1):\n        bomb[n-1][i] = 1\n    for i in range(n-1):\n        bomb[i][0] = 1\n    bomb[0][m-1] = 1\n    bomb[0][0] = 1\n    bomb[n-1][0] = 1\n    bomb[0][0] = 1\n    visited = []\n    for i in range(n):\n        for j in range(m):\n            if d[i][j] == '1' or d[i][j] == '*':\n                bomb[i][j] = 1\n            else:\n                bomb[i][j] = 0\n    visited.append([0,0])\n    def recur(i,j):\n        if i<0 or i>=n or j<0 or j>=m or d[i][j] == '*' or bomb[i][j] == 1 or visited[i][j] == 1:\n            return\n        if d[i][j] == '1':\n            bomb[i][j] = 1\n        visited.append([i,j])\n        recur(i+1,j)\n        recur(i-1,j)\n        recur(i,j+1)\n        recur(i,j-1)\n    recur(0,0)\n    if len(visited)==n*m:\n        return 'YES'\n    else:\n        return 'NO'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    field = [[*map(lambda c: str(c).replace('*', ''), [*line] + [\".\"]) for line in stdin.split(\"\\n\")][1:n + 1]]\n\n    return \"YES\" if not (\n            n * m - sum(len(field[x]) for x in range(n)) - sum(sum(field[x].count(\"*\") for x in range(n)) for y in range(n)) else \"NO\")"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    d = divisor(n)\n    if d[0] >= d[1]:\n        return str(d[0])\n    else:\n        return str(d[1])\n\n\ndef"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    for n in range(2, 10 ** 18 + 1):\n        m = n // 10\n        while n % m!= 0:\n            m -= 1\n        if m % 2 == 0:\n            k = m // 2\n        else:\n            k = (m - 1) // 2\n        if k >= n:\n            continue\n        if n % 10 == 0:\n            return str(k)\n        break\n    return str(k + n // 10)\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    i = 0\n    k = 0\n    while n > 0:\n        if n >= k:\n            i = i + 1\n            n = n - k\n        else:\n            k = (i + k) // 2\n    return str(k)"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    k = n // 2\n    while True:\n        if (n - k * 10) % 10 == 0:\n            break\n        else:\n            k += 1\n    return str(k)"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    k = 1\n    ans = 0\n    while k <= n:\n        while n % 10 == 0:\n            n = n // 10\n        n //= 10\n        ans += k\n        k += 1\n    return str(ans)\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n'''\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    inp = stdin.split()\n    n = int(inp[0])\n    # write your code here\n    \n    k = 0\n    while True:\n        if n >= (k*10):\n            n = (n - k*10) // 2\n        else:\n            return str(k)\n        \n        k += 1\n        "
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n,k = stdin.split()\n    n = int(n)\n    k = int(k)\n    return str(int(n/2) - k)"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    k = 0\n    while True:\n        if n % 2 == 0:\n            k = k + n / 2\n            break\n        n = n - 1\n        k = k + 1\n\n    k = int(k)\n    return str(k)\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 10 == 0:\n        return str(n // 10)\n    a = n // 10\n    b = a // 10\n    c = b // 10\n    if n % 10 > 0:\n        while n % 10 > 0:\n            a = b\n            b = c\n            c = a + b\n            n -= 1\n    else:\n        while n > 0:\n            a = b\n            b = c\n            c = a + b\n            n -= 1\n    return str(c)\n"
    },
    {
        "number": 236,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    mylist = stdin.split()\n    l=len(mylist)\n    if l < 3:\n        return \"NO\"\n    result = 1\n    while result < l:\n        for i in range(0, l - result):\n            if i == 0:\n                if mylist[i]!= mylist[i + 1]:\n                    return \"NO\"\n            elif i == l - result - 1:\n                if mylist[i]!= mylist[i - 1]:\n                    return \"NO\"\n            else:\n                if mylist[i]!= mylist[i - 1] and mylist[i]!= mylist[i + 1]:\n                    return \"NO\"\n        result += 1\n    return \"YES\"\nprint(solution(input()))\n"
    },
    {
        "number": 236,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    count_links = 0\n    while count_links < len(s):\n        s = re.sub(r\"(.)(o)(.)\", r\"\\2\\1\\3\", s)\n        count_links += len(s) - len(re.findall(r\"(.)(o)(.)\", s))\n    return \"YES\" if count_links == len(s) else \"NO\"\n"
    },
    {
        "number": 236,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.strip()\n    if input[0] == '-':\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 236,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    pearls = stdin\n    length = len(pearls)\n    if length == 0:\n        return 'NO'\n    elif length == 1:\n        return 'YES'\n    else:\n        count = 0\n        for i in range(length - 1):\n            if (pearls[i] == 'o' and\n                    pearls[i + 1] == '-' and\n                    pearls[i] == '-'):\n                count += 1\n        if count == length - 1:\n            return 'YES'\n        else:\n            return 'NO'\n"
    },
    {
        "number": 236,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    while True:\n        s = s.replace('oo', '-')\n        if s == s[::-1]:\n            return 'YES'\n        else:\n            s = s.replace('-', 'o')\n            if s == s[::-1]:\n                return 'NO'\n\nsolution(input())\n"
    },
    {
        "number": 236,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 236,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    necklace = stdin.strip()\n    N = len(necklace)\n    if N <= 2:\n        return 'NO'\n    \n    count = 0\n    for i in range(N-2):\n        if necklace[i] == '-':\n            count += 1\n        elif necklace[i+1] == '-':\n            count += 1\n        elif necklace[i+2] == '-':\n            count += 1\n\n    if count == N-2:\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 236,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    length = len(stdin)\n    if length < 3:\n        return \"NO\"\n    answer = True\n    while answer:\n        answer = False\n        for i in range(length - 1):\n            if stdin[i]!= stdin[i+1]:\n                answer = True\n                stdin = stdin[0:i] + stdin[i+2:]\n                break\n    return \"YES\" if answer else \"NO\"\n\nprint(solution(input()))"
    },
    {
        "number": 236,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pearls, links = stdin.strip().split()\n    \n    for i in range(len(links)):\n        if links[i] == '-':\n            links = links[:i] + links[i+1:]\n            break\n    for i in range(len(pearls)):\n        if pearls[i] == '-':\n            pearls = pearls[:i] + pearls[i+1:]\n            break\n    return (\"YES\" if links == pearls else \"NO\")"
    },
    {
        "number": 236,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    \n    \n    \n    \n    def reverse(a):\n        return list(reversed(a))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    pillows = sorted(range(n + 1), reverse=True)\n    hobbit = range(1, n + 1)\n    pillows_left = pillows\n    hobbit_left = hobbit\n    ans = 0\n    while pillows_left and hobbit_left:\n        pillows_left.pop()\n        hobbit_left.pop()\n        if pillows_left:\n            pillows_left.append(pillows_left.pop(0) - 1)\n        if hobbit_left:\n            pillows_left.append(pillows_left.pop(0) - 1)\n        ans += 1\n    print(ans)\n    return stdin"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    pillows = list(range(1, m+1))\n    pillows.append(m)\n    hobbit = list(range(1, n+1))\n    hobbit.append(n)\n    if len(pillows) < 2 or len(hobbit) < 2:\n        return 0\n    pillows.sort()\n    hobbit.sort()\n    left = 0\n    right = len(pillows)-1\n    while left < right:\n        if len(pillows) - len(hobbit) < 2:\n            return 0\n        # choose the best k pillows and the best k hobbits\n        hobbit_pillow = k\n        hobbit_pillow_index = (len(hobbit)-k) % len(hobbit)\n        left_pillow_index = 0\n        right_pillow_index = len(pillows)-1\n        while hobbit_pillow:\n            if pillows[hobbit_pillow_index] <= left_pillow_index:\n                left_pillow_index = pillows[hobbit_pillow_index]\n            else:\n                break\n            hobbit_pillow_index = (hobbit_pillow_index + k - 1) % len(hobbit)\n            hobbit_pillow -= 1\n        while left_pillow_index <= right_pillow_index:\n            if pillows[left_pillow_index] > left_pillow_index:\n                break\n            right_pillow_index = left_pillow_index\n            left_pillow_index += 1\n        if left_pillow_index == right_pillow_index:\n            return 0\n        if left_pillow_index == left:\n            right_pillow_index = right_pillow_index - 1\n        else:\n            left_pillow_index = left_pillow_index + 1\n        if left_pillow_index == right_pillow_index:\n            return 0\n        left = left_pillow_index\n        right = right_pillow_index\n    if left > right:\n        return 0\n    if left == 0:\n        return len(pillows) - len(hobbit)\n    if left == len(pillows):\n        return len(pillows) - len(hobbit)\n    return len(pillows) - len(hobbit) - 1\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n'''"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    maxpillows = n * k\n    pillows = m // k\n    maxpillows -= pillows\n    pillows += 1\n    return str(pillows) if maxpillows <= maxpillows else str(maxpillows)"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = (int(x) for x in stdin.split())\n    pillows = n - m\n    if pillows >= k:\n        return (pillows // k) * k\n    else:\n        return (pillows // k) * k + k\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = list(map(int, stdin.strip().split()))\n    return str(min(n, m, k) - 1)\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    pillows = 0\n    for i in range(k):\n        pillows += m\n    if k - pillows >= pillows:\n        return n\n    else:\n        return pillows\nprint(solution(input()))\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = (int(_) for _ in stdin.split())\n    \n    return f\"{max(n, m) - min(n, m) + k - 2}\"\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def compare_pillows(pillow1: int, pillow2: int):\n        if len(pillow1) > len(pillow2):\n            return 1\n        elif len(pillow1) < len(pillow2):\n            return -1\n        else:\n            return 0\n\n    n, m, k = map(int, stdin.split())\n    pillows = []\n    for i in range(k):\n        pillows.append(i)\n\n    max_pillows = 0\n    for i in range(n):\n        pillows = sorted(pillows, key=compare_pillows)\n        max_pillows = max(max_pillows, len(pillows))\n\n        for j in range(len(pillows)):\n            pillows[j] += 1\n\n    return str(max_pillows)\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    n,m,k = map(int,stdin.split())\n    arr = list(map(int,stdin.split()))\n    dp = [[0 for _ in range(m+1)] for _ in range(n+1)]\n    for i in range(1,n+1):\n        for j in range(1,m+1):\n            dp[i][j] = dp[i-1][j] + dp[i][j-1] - k\n            for k in range(1,i+1):\n                dp[i][j] = max(dp[i][j],dp[i-k][j-1] + k*arr[i-k])\n    return dp[n][m]\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    for i in range(n):\n        for j in range(m + 1):\n            if j == 0:\n                dp[i][j] = a[i]\n            else:\n                dp[i][j] = dp[i - 1][j] + k * (j // m)\n            dp[i][j] = max(dp[i][j], dp[i - 1][j - a[i]] + a[i])\n    return max(dp[-1])\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    return str(max(sum(a[i - k: i]) - k * int(i / m) for i in range(k, n + 1)))\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    # I used the same technique from the chapter as before\n    a_max = -10 ** 9\n    def subarray_sum(i, j, m, k):\n        if i == j:\n            return 0\n        # else:\n        return max(subarray_sum(i, j - 1, m, k) + a[i] - k,\n                   subarray_sum(i + 1, j, m, k) + a[j] - k)\n\n    print(subarray_sum(0, n - 1, m, k))\n\n\nsolution(sys.stdin.read())\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    maxCost = 0\n    for start in range(n):\n        end = n - 1\n        while start < end:\n            sum = 0\n            for i in range(start, end + 1):\n                sum += a[i]\n            if sum == k:\n                maxCost = max(maxCost, end - start + 1)\n                break\n            if sum < k:\n                end -= 1\n            elif sum > k:\n                end -= 1\n                end = max(end, start)\n            else:\n                break\n    return str(maxCost)\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    return str(max((sum(a[i:i + m]) - k * (m + 1) // 2) for i in range(n - m + 1)))\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    max_cost = 0\n    while m > 0:\n        if m >= 3:\n            max_cost += max(a[i] - k for i in range(n) if (i % m) == 0)\n        max_cost += max(a[i] - k for i in range(n) if (i % m) == 1)\n        max_cost += max(a[i] - k for i in range(n) if (i % m) == 2)\n        m -= 3\n    return str(max_cost)\n\nsolution(\"7 3 10\")\nsolution(\"5 2 1000\")\nsolution(\"-13 -4 -9 -20 -11\")"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    max_value = 0\n    for i in range(n):\n        # max_value = max(max_value, (sum(a[i:]) - k * (len(a[i:]) // m)) )\n        max_value = max(max_value, sum(a[i:]) - k * ((len(a[i:]) // m) + 1))\n    return str(max_value)\n\nprint(solution(input()))"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    max_sub_array = 0\n    for i in range(n):\n        for j in range(i, n):\n            s = sum([x - k for x in a[i: j+1]])\n            if s > max_sub_array:\n                max_sub_array = s\n    return max_sub_array\n\nsolution('7 3 10')\nsolution('5 2 1000')\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    l, r = 0, 0\n    while r < n and l < n:\n        if r - l + 1 < m:\n            r += 1\n        else:\n            if a[r - 1] - k > 0:\n                r += 1\n            else:\n                break\n    print(r - l - 1)\n    return 0"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    points = []\n    res = []\n    def dfs(x, y, res, points, tmp):\n        if len(points) == 4:\n            res.append(points[0])\n            res.append(points[1])\n            res.append(points[2])\n            res.append(points[3])\n            return\n        points.append([x, y])\n        if x - 1 >= 0 and grid[x-1][y] not in tmp:\n            dfs(x-1, y, res, points, tmp)\n        if x + 1 <= n - 1 and grid[x+1][y] not in tmp:\n            dfs(x+1, y, res, points, tmp)\n        if y - 1 >= 0 and grid[x][y-1] not in tmp:\n            dfs(x, y-1, res, points, tmp)\n        if y + 1 <= m - 1 and grid[x][y+1] not in tmp:\n            dfs(x, y+1, res, points, tmp)\n        tmp.append(grid[x][y])\n        points.pop()\n    tmp = []\n    dfs(0, 0, res, points, tmp)\n    return \" \".join([str(e) for e in res])\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    return str(make_polyline(n, m))\n\n\ndef"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    #n, m = map(int, stdin.split())\n    n, m = map(int, input().split())\n    grid = []\n    for _ in range(n):\n        grid.append(list(map(int, input().split())))\n    points = find_points(grid)\n    return''.join(str(x) for x in max_points(points, grid, n, m))\n\n\ndef"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    res = [[1, 0], [0, 1]]\n    # if not is_valid(n, m):\n    #     return res\n    # points = [\n    #     [1, 0],\n    #     [0, 1],\n    #     [2, 3],\n    #     [3, 1],\n    # ]\n    points = []\n    for _ in range(4):\n        point = stdin.split()\n        points.append(point)\n    points = sorted(points, key=lambda point: (point[0], point[1]))\n    length = float('inf')\n    for i in range(4):\n        points_i = points[i]\n        # if not is_valid(points_i[0], points_i[1]):\n        #     continue\n        points_i = [int(points_i[0]), int(points_i[1])]\n        length = min(length, calculate_length(res, points_i))\n        res.append(points_i)\n    return \" \".join([str(i) for i in res])\n\n\ndef"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Takes a string of the form\n    N X\n    M Y\n   ...\n    and returns a string of the form\n    N X\n    M Y\n   ...\n    and so on.\n\n    >>> solution('0 1')\n    '0 1'\n    >>> solution('1 1')\n    '0 0'\n    >>> solution('0 10')\n    '0 1'\n    >>> solution('1 10')\n    '0 10'\n    \"\"\"\n    N, M = stdin.split()\n    N = int(N)\n    M = int(M)\n    for y in range(N):\n        for x in range(M):\n            if (x == 0 or x == M - 1) and (y == 0 or y == N - 1):\n                print(x, y)\n    return\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    points = set()\n    for _ in range(n):\n        x, y = map(int, input().split())\n        points.add((x, y))\n\n    for _ in range(n):\n        y = m - 1\n        x = 0\n        while x < m:\n            points.add((x, y))\n            if (x, y - 1) in points:\n                break\n            x += 1\n            y -= 1\n        else:\n            print(*points)\n    return \"0 0\"\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    points = [(i, j) for i in range(n) for j in range(m)]\n\n    def is_self_intersecting(point):\n        \"\"\"\n        For a given point, if point has any of its neighbors with same x or y then return True else return False.\n        \"\"\"\n        x, y = point\n        for i in range(x - 1, x + 2):\n            for j in range(y - 1, y + 2):\n                if i!= x and j!= y and (i, j) in points:\n                    return True\n        return False\n\n    def max_length(points):\n        \"\"\"\n        Calculate the max length of the polyline.\n        \"\"\"\n        _len = 0\n        for i in range(len(points) - 1):\n            dx, dy = points[i][0] - points[i + 1][0], points[i][1] - points[i + 1][1]\n            if dx == 0 and dy == 0:\n                _len += 1\n            else:\n                _len += (abs(dx) + abs(dy))\n        return _len\n\n    start, end = 0, max(points, key=lambda p: p[1])\n    while start <= end:\n        mid = (start + end) // 2\n        if is_self_intersecting((mid, 0)):\n            start = mid + 1\n        else:\n            end = mid - 1\n    return str(start), str(max_length((start, mid)))\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    cords = [(0, 0)] * 4\n    if n == 0 or m == 0:\n        print('0 0')\n        return\n    for i in range(1, m):\n        cords[0] = cords[-1]\n        cords[1] = (cords[0][0] + 1, i)\n        cords[2] = (i, 0)\n        cords[3] = (cords[1][0], cords[2][1])\n        for j in range(1, i):\n            cords[0] = cords[-1]\n            cords[1] = (cords[0][0] + 1, i)\n            cords[2] = (i, j)\n            cords[3] = (cords[1][0], cords[2][1])\n            for k in range(1, j):\n                cords[0] = cords[-1]\n                cords[1] = (cords[0][0] + 1, i)\n                cords[2] = (i, k)\n                cords[3] = (cords[1][0], cords[2][1])\n                if cords[0]!= cords[1] and cords[0]!= cords[2] and cords[0]!= cords[3] and cords[1]!= cords[2] and cords[1]!= cords[3] and cords[2]!= cords[3]:\n                    print(*cords)\n                cords = [(0, 0)] * 4\n    return\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return''.join(str(i) for i in (p1, p2, p3, p4))\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    all_points = [(i, j) for i in range(n) for j in range(m)]\n    result = [all_points[0]]\n    for i in range(1, len(all_points)):\n        if result[-1] == all_points[i]:\n            result[-1] = all_points[i]\n        else:\n            result.append(all_points[i])\n    return''.join(map(str, result))\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    list_input = stdin.split()\n    input_int = int(list_input[0])\n    input_str = list_input[1]\n    return str(min_int_from_str(input_int, input_str))\n\n\ndef"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Write the solution provided here.\n    \"\"\"\n    stdin = stdin.split()\n    number_str = stdin[0]\n    number = int(number_str)\n    number_substr = stdin[1]\n    for i in range(len(number_substr)):\n        if number_substr[i] == '0':\n            number_substr = number_substr[i+1:]\n            break\n    # print(number_substr)\n    number_substr = list(number_substr)\n    for i in range(len(number_substr)):\n        if number_substr[i] == '0':\n            number_substr = number_substr[i+1:]\n            break\n    # print(number_substr)\n    number = int(''.join(number_substr))\n    return str(number)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin.strip()\n    length = len(string)\n    count = 0\n    while count < length:\n        count += 1\n    return stdin\n\nprint(solution(\"99961\"))\n\n\ndef"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    s = list(map(int, n))\n    s.sort()\n    if int(n) == 0:\n        return '0'\n    k = s[0]\n    s = s[1:]\n    res = ''.join(list(map(str, s)))\n    return str(k) + res\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    You are given a string s of digits, such as 001. Your goal is to turn it into a number.\n\n    To do this, you can replace a sequence of digits in a number, in the following way:\n\n    1. Add one to the number.\n    2. Remove all digits in a number that are more than one away from the next digit.\n    3. If that number has only one digit left, remove it from the number.\n    \n    Example:\n\n    Input: s = \"3\"\n    Output: \"1\"\n    \n    Input: s = \"1000\"\n    Output: \"1001\"\n    \n    Input: s = \"1022\"\n    Output: \"1222\"\n    \n    Input: s = \"3221\"\n    Output: \"3211\"\n    \n    Input: s = \"1122\"\n    Output: \"1112\"\n    \"\"\"\n    # Remove leading zeroes\n    if len(stdin) > 1 and stdin[0] == '0':\n        return stdin[1:]\n\n    # Reverse the input string\n    stdin = stdin[::-1]\n\n    # Reverse the number\n    number = int(''.join(stdin))\n\n    # Find the max number of consecutive digits\n    maximum_digit = max(stdin)\n\n    # Find the min number of consecutive digits\n    minimum_digit = min(stdin)\n\n    # Remove the digits that are not in the correct sequence\n    number = number - (maximum_digit - 1) * (maximum_digit - minimum_digit)\n\n    # Remove leading zeroes\n    if len(stdin) > 1 and stdin[0] == '0':\n        return str(number)\n\n    return str(number)\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(''.join(reversed(stdin))))\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    int_str = stdin.strip()\n    int_str = int_str.replace(\"0\", \"\")\n    if len(int_str) < 2:\n        return int_str\n    int_str = int_str[::-1]\n    length = len(int_str)\n    while length > 1:\n        int_str = int_str[:length - 1] + int_str[length - 1] + int_str[length - 2::-1]\n        length -= 2\n    return int_str\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin[:-1]\n    n = list(map(int, n))\n    for i, nn in enumerate(n):\n        n[i] = nn % 10\n    n = \"\".join(list(map(str, n)))\n    n = list(map(int, n))\n    return \"\".join(list(map(str, n)))\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.split('\\n')[1].split('\\n')[0]\n    k = int(''.join(sorted(list(n))))\n    while k > len(n):\n        n = '0'+n\n        k = int(''.join(sorted(list(n))))\n    return str(k)\n    \n"
    },
    {
        "number": 241,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, min, max = list(map(int, stdin.split()))\n    t = list(map(int, stdin.split()))\n    if n == m and min <= max and max - min == m:\n        return 'Correct'\n    return 'Incorrect'\n"
    },
    {
        "number": 241,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('2 1 1 2')\n    'Correct'\n    >>> solution('3 1 1 3')\n    'Incorrect'\n    >>> solution('3 1 1 3')\n    'Correct'\n    \"\"\"\n    n, m, min, max = list(map(int, stdin.split()))\n    for t in stdin.split():\n        if m - n < int(t) < m:\n            return 'Incorrect'\n    return 'Correct'\n"
    },
    {
        "number": 241,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, min, max, *report = map(int, stdin.split())\n    assert 1 <= n <= 100\n    assert 1 <= m <= 100\n    assert 1 <= min <= max <= 100\n    assert m <= n\n    assert all(1 <= x <= 100 for x in report)\n\n    n_report = len(report)\n    assert n == n_report\n    assert all(x >= min for x in report)\n    assert all(x <= max for x in report)\n    assert all(x == report[0] for x in report)\n\n    if m == n:\n        return \"Correct\"\n    elif m < n:\n        return \"Correct\" if min <= report[0] <= max else \"Incorrect\"\n    else:\n        return \"Correct\" if report[0] >= min >= report[n - m] else \"Incorrect\"\n"
    },
    {
        "number": 241,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, min, max = map(int, stdin.split())\n    min_temp = min\n    max_temp = max\n    times = 0\n    for i in stdin.split():\n        times += 1\n        if min_temp > int(i):\n            min_temp = int(i)\n        if max_temp < int(i):\n            max_temp = int(i)\n    if max_temp == min_temp:\n        return 'Correct'\n    else:\n        return 'Incorrect'\n"
    },
    {
        "number": 241,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, min, max = map(int, stdin.split())\n    t = sorted(map(int, stdin.split()))\n    return \"Correct\" if n * max <= sum(t) < n * min else \"Incorrect\"\n"
    },
    {
        "number": 241,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, min_t, max_t = stdin.split()\n    min_t = int(min_t)\n    max_t = int(max_t)\n    t = list(map(int, stdin.split()))\n    print('Correct' if sum(t) == int(n) - int(m) else 'Incorrect')\n"
    },
    {
        "number": 241,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, min, max = map(int, stdin.split())\n    t_list = list(map(int, stdin.split()))\n    if min >= max:\n        return 'Incorrect'\n    # print(min, max)\n    if len(t_list) == m and all(t_list[i] >= min and t_list[i] <= max for i in range(m)):\n        # print('m')\n        for i in range(m, n):\n            t_list.append(t_list[i - m])\n        # print(t_list)\n        return 'Correct'\n    else:\n        # print('n')\n        return 'Incorrect'"
    },
    {
        "number": 241,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n  n, m, min, max = stdin.split()\n  n = int(n)\n  m = int(m)\n  min = int(min)\n  max = int(max)\n  if n < m:\n    return 'Incorrect'\n  elif n == m:\n    return 'Correct'\n  else:\n    # The temperature of the head worker must be between min and max\n    min_head = min(min, min + n - m)\n    max_head = max(max, max + n - m)\n    min_head_worker = min(min, min_head + min)\n    max_head_worker = max(max, max_head + min)\n    # The head worker can have this temperature, because it is the only one who can have this temperature\n    if min_head_worker == min_head:\n      min_head = min_head_worker\n      max_head = max_head_worker\n      if max_head - min_head == max - min:\n        return 'Correct'\n      else:\n        return 'Incorrect'\n    else:\n      return 'Incorrect'\n\nprint(solution(input()))"
    },
    {
        "number": 241,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, min, max = list(map(int, stdin.split()))\n    \n    # check if the number of temperatures is correct\n    if m!= len(list(map(int, stdin.split()[1:]))):\n        return \"Incorrect\"\n    \n    # check if min and max are correct\n    if min > max or min < 1 or max > 100 or max < 1:\n        return \"Incorrect\"\n    \n    # sort temperatures\n    temperatures = sorted(list(map(int, stdin.split()[1:])))\n    # print(temperatures)\n    \n    # calculate minimum and maximum\n    minimum = temperatures[0]\n    maximum = temperatures[-1]\n    \n    # check if min and max are correct\n    if minimum > max or minimum < 1 or maximum > 100 or maximum < 1:\n        return \"Incorrect\"\n    \n    # check if the set of temperatures is correct\n    if len(set(temperatures))!= len(temperatures):\n        return \"Incorrect\"\n    \n    # check if the set of temperatures are correct\n    if len(temperatures)!= n:\n        return \"Incorrect\"\n    \n    return \"Correct\"\n"
    },
    {
        "number": 241,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, min_t, max_t = stdin.split()\n    n, m, min_t, max_t = int(n), int(m), int(min_t), int(max_t)\n    t = stdin.split()\n    t = [int(x) for x in t]\n    if t == sorted(t, reverse=True) or t == sorted(t):\n        return \"Correct\"\n    else:\n        return \"Incorrect\"\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    fact = 1\n    trailing_zeroes = 0\n    for i in range(1, int(stdin)+1):\n        fact *= i\n    for i in range(1, int(stdin)+1):\n        if fact % i == 0:\n            trailing_zeroes += 1\n    if trailing_zeroes == int(stdin):\n        return str(trailing_zeroes)\n    return str(0)\n\n\nsolution(\"1\")\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin)\n    i = 0\n    while i <= m:\n        i += 1\n        for j in range(i):\n            print(j)\n    return '\\n'.join(str(i) for i in range(i))"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Read the input.\n    Return the output.\"\"\"\n    # Read the input; use readline() for simplicity.\n    m = int(stdin.readline())\n    n = 1\n    fact = 1\n    count = 0\n    while fact > 0:\n        if fact == m:\n            count += 1\n        fact *= n\n        n += 1\n    if count == 0:\n        return \"0\"\n    else:\n        return str(count)\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin)\n    n = 0\n    while (m // 10) > 0:\n        n += 1\n        m //= 10\n    return str(n)\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    i = 1\n    fact = 1\n    while i < n:\n        fact *= i\n        i += 1\n    factorial = str(fact)\n    count = factorial.count('0')\n    print(count)\n    print(factorial)\n    return\n\nsolution(input())"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin)\n    return f\"{m} {m}\"\n    \ndef"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin.split())\n    stdin = list(map(int, stdin.split()))\n    return str(len([n for n in stdin if len(str(factorial(n))) >= m]))\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = 0\n    factorial_n = 1\n    for line in stdin.splitlines():\n        if int(line) == 0:\n            n += 1\n            factorial_n *= int(line)\n        else:\n            break\n    return str(n) +'' + str(factorial_n)\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    f_str = stdin\n    n = int(f_str)\n    if n == 0:\n        print(0)\n        return 0\n\n    fact_result = 1\n    if n < 1:\n        print(0)\n        return 0\n    for i in range(2, n+1):\n        fact_result = fact_result*i\n    print(fact_result)\n    count_zeros = 0\n    i = 1\n    while i <= n:\n        if fact_result % 10 == 0:\n            count_zeros += 1\n        i += 1\n        fact_result = fact_result // 10\n    print(count_zeros)\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    import math\n    m = int(stdin)\n    n = 0\n    while math.factorial(n) % m == 0:\n        n += 1\n    return f'{n}'\n"
    },
    {
        "number": 243,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    special_v = list(map(int, stdin.split()))\n    graph = [[] for i in range(n)]\n    for i in range(m):\n        u, v, w = map(int, stdin.split())\n        graph[u - 1].append((v - 1, w))\n        graph[v - 1].append((u - 1, w))\n    cost = [sys.maxsize for i in range(n)]\n    dist = [sys.maxsize for i in range(n)]\n    for i in range(n):\n        for j in range(k):\n            if i!= special_v[j]:\n                continue\n            max_cost = 0\n            max_point = i\n            for point in range(n):\n                if point!= i:\n                    continue\n                for _, weight in graph[point]:\n                    if weight > max_cost:\n                        max_cost = weight\n                        max_point = point\n            cost[i] = max_cost\n            dist[i] = max_point\n    for i in range(n):\n        dist[i] = cost[dist[i]]\n    return''.join(map(str, dist))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 243,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v, w = map(int, input().split())\n        graph[u].append((v, w))\n        graph[v].append((u, w))\n    nx_distance = [-1] * n\n    nx_distance[0] = 0\n    visited = set()\n    visited.add(0)\n    queue = [(0, 0)]\n    while queue:\n        _, distance = heapq.heappop(queue)\n        visited.add(distance)\n        for nei in graph[distance]:\n            n_distance = nx_distance[nei[0]] + nei[1]\n            if n_distance > nx_distance[nei[0]]:\n                nx_distance[nei[0]] = n_distance\n                queue.append((nei[0], n_distance))\n    return \" \".join(map(str, nx_distance[k: k + k]))\n\n\n\nstdin = \\\n'''\n3 3 2\n2 1\n1 2 3\n1 2 5\n2 2 1\n\n'''"
    },
    {
        "number": 243,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    vertices = set()\n    graph = defaultdict(list)\n    for i in range(k):\n        u, v, w = map(int, stdin.split())\n        vertices.update([u, v])\n        vertices.update([v, u])\n        graph[u].append((v, w))\n        graph[v].append((u, w))\n    #return solution1(graph, n, m, k)\n    return solution2(graph, vertices, n, m, k)\n\ndef"
    },
    {
        "number": 243,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.split()\n    n, m, k = (int(x) for x in input_lines)\n    edges = [(int(x) for x in stdin.split()[1:m + 1])]\n    special_vertex = [int(x) for x in stdin.split()[m + 1:]]\n    all_vertexes = set(range(1, n + 1))\n    graph = {}\n    for u, v, w in edges:\n        all_vertexes.remove(u)\n        all_vertexes.remove(v)\n        if u in graph:\n            graph[u][v] = w\n        else:\n            graph[u] = {v: w}\n        if v in graph:\n            graph[v][u] = w\n        else:\n            graph[v] = {u: w}\n    distance = {}\n    for u in special_vertex:\n        distance[u] = float('inf')\n        for v in all_vertexes:\n            d = graph[u].get(v, float('inf'))\n            if d < distance[u]:\n                distance[u] = d\n    return''.join(map(str, distance.values()))\n"
    },
    {
        "number": 243,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    n = int(stdin[0])\n    m = int(stdin[1])\n    k = int(stdin[2])\n    vertices = []\n    edges = []\n    for i in range(3, 3 + m):\n        vertices.append(int(stdin[i]))\n    for i in range(3 + m, 3 + m + m):\n        edges.append(list(map(int, stdin[i].split())))\n\n    distances = {}\n    for i in range(1, k + 1):\n        distances[i] = float('inf')\n    distances[k] = 0\n\n    for i in range(1, k + 1):\n        for v in range(1, n + 1):\n            if distances[i] + edges[vertices.index(i)][vertices.index(v)] < distances[v]:\n                distances[v] = distances[i] + edges[vertices.index(i)][vertices.index(v)]\n\n    print(\" \".join(map(str, sorted(distances.values()))))\n    return"
    },
    {
        "number": 243,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 243,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n  n, m, k = map(int, stdin.split())\n  cost = []\n  for i in range(1, k + 1):\n    cost.append(float('inf'))\n  for i in range(k + 1, n + 1):\n    cost.append(float('inf'))\n  for _ in range(m):\n    u, v, w = map(int, input().split())\n    if cost[u]!= float('inf') and cost[v]!= float('inf'):\n      cost[u] = min(cost[u], cost[v] + w)\n      cost[v] = min(cost[v], cost[u] + w)\n  ans = []\n  for i in range(1, k + 1):\n    ans.append(cost[i])\n  return''.join(map(str, ans))\n"
    },
    {
        "number": 243,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    [n, m, k] = list(map(int, stdin.split()))\n\n    # Initialize the distance matrix\n    dist = [[0 for _ in range(n)] for _ in range(n)]\n\n    # Initialize the node with the farthest node\n    max_dist = 0\n    max_node = None\n\n    # Initialize the distance matrix\n    for i in range(1, k + 1):\n        [u, v, w] = list(map(int, stdin.split()))\n        dist[u - 1][v - 1] = max(dist[u - 1][v - 1], w)\n        dist[v - 1][u - 1] = max(dist[v - 1][u - 1], w)\n\n        # Calculate the maximum distance for this node\n        max_dist = max(max_dist, w)\n\n    # Initialize the node with farthest node\n    for j in range(k, n):\n        # Farthest node\n        farthest_node = j\n        max_dist = dist[j - 1][j - 1]\n\n        for i in range(k, n):\n            if dist[i - 1][j - 1] > max_dist:\n                farthest_node = i\n                max_dist = dist[i - 1][j - 1]\n\n        # Calculate the distance\n        dist[j - 1][farthest_node - 1] = max_dist\n\n    # Find the farthest node for each vertex\n    max_dist = 0\n    max_node = None\n    for i in range(n):\n        max_dist = max(max_dist, dist[i][i])\n        max_node = i + 1 if dist[i][i] == max_dist else max_node\n\n    return str(max_node)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 243,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(map(str, solve(stdin.split(\"\\n\"))))\n\ndef"
    },
    {
        "number": 243,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n    \n    n, m, k = map(int, stdin.split())\n    special_vertices = list(map(int, stdin.split()))\n    weights = {}\n    for i in range(k):\n        u, v, w = map(int, stdin.split())\n        if u not in weights:\n            weights[u] = w\n        if v not in weights:\n            weights[v] = w\n    \n    def distance(v):\n        if v in weights:\n            return weights[v]\n        return -1\n    \n    def farthest(v):\n        max_distance = 0\n        max_vertex = v\n        for i in range(1, n+1):\n            if i in weights and i!= v and distance(i) > max_distance:\n                max_distance = distance(i)\n                max_vertex = i\n        return max_distance, max_vertex\n    \n    return \"\\n\".join(f\"{farthest(x)[0]} {farthest(x)[1]}\" for x in special_vertices)\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 1:\n        return '0'\n    elif n == 2:\n        return '1'\n    else:\n        return '2'\n\nprint(solution(input()))\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = int(stdin)\n    return str(x % 3)"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = int(stdin.split()[1])\n    swaps = {0:0, 1:1, 2:2}\n    i = 2\n    while i < n:\n        if swaps[x] == 1:\n            if x == 0:\n                x = 2\n            else:\n                x = 0\n        elif swaps[x] == 2:\n            if x == 1:\n                x = 0\n            else:\n                x = 1\n        else:\n            if x == 1:\n                x = 0\n            else:\n                x = 1\n        i += 1\n    return str(x)\n\nsolution('2')\nsolution('1 1')\nsolution('1 1 1 2 2')\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n\n    N = int(stdin[0])\n    X = int(stdin[1])\n\n    if N % 2 == 0:\n        ball = 1\n    else:\n        ball = 2\n\n    if ball == X:\n        return \"0\"\n    elif ball > X:\n        ball = 0\n        return str(ball)\n    else:\n        ball = 1\n        return str(ball)\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    #\u0412\u0432\u0435\u0434\u0456\u0442\u044c \u0442\u0435\u043a\u0441\u0442 \u0456 \u0432\u0432\u0435\u0434\u0456\u0442\u044c \u0457\u0457 \u043a\u043e\u0440\u0438\u0441\u0442\u0443\u0432\u0430\u0447\u0435\u043c stdin. \u041f\u043e\u0432\u0435\u0440\u0442\u0430\u0454 \u0442\u0435\u043a\u0441\u0442 \u0437 \u0447\u0438\u0441\u043b\u0430\u043c\u0438 \u0437 \u043a\u0456\u043d\u0446\u044f\n    n = int(stdin)\n    shells = ['left','middle','right']\n    ball ='middle'\n\n    for i in range(n):\n        print(shells.index(ball))\n        if i % 2 == 0:\n            ball = shells[(shells.index(ball)+1)%3]\n        else:\n            ball = shells[(shells.index(ball) - 1)%3]\n\n\nsolution('4\\n2\\n')\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    x = int(stdin.split()[1])\n\n    left = 0\n    right = 2\n    moves = 0\n\n    if x == left:\n        return right\n    elif x == right:\n        return left\n\n    while moves < n:\n        if moves % 2 == 0:\n            right, left = left, right\n        else:\n            right, left = left, right\n\n        moves += 1\n\n    return left"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    shell_idx = n % 3\n    print(shell_idx)\n    return '0'"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, x = int(stdin.split()[0]), int(stdin.split()[1])\n    if n % 2 == 0:\n        return str(x)\n    return str(x + 1)\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    x = int(stdin.splitlines()[1])\n    move_counter = 0\n    left_shell_pos = 0\n    mid_shell_pos = 1\n    right_shell_pos = 2\n    while move_counter < n:\n        left_shell_pos, mid_shell_pos, right_shell_pos = swap_shells(left_shell_pos, mid_shell_pos, right_shell_pos)\n        move_counter += 1\n    return str(right_shell_pos)\n\n\ndef"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin_arr = stdin.split(\"\\n\")\n    \n    for i in range(3):\n        print(stdin_arr[1][i])\n        stdin_arr.pop(0)\n    return stdin_arr[0]\n\n    return stdin_arr[1]\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    rectangles = []\n    for i in range(n):\n        rectangles.append(list(map(int, stdin.strip().split(' '))))\n    rectangles.sort()\n    for i in range(len(rectangles) - 1):\n        if rectangles[i] == rectangles[i + 1]:\n            return 'NO'\n    if rectangles[0][0] <= rectangles[0][2] and rectangles[0][1] <= rectangles[0][3]:\n        return 'YES'\n    else:\n        return 'NO'\n\nsolution(\"3\\n0 0 2 3\\n0 3 3 5\\n2 0 5 2\\n3 2 5 5\\n2 2 3 3\")\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    rectangles = []\n    for _ in range(int(stdin)):\n        rectangles.append(list(map(int, stdin.split())))\n    rectangles.sort(key=lambda x: (x[0], x[1]))\n    x1, x2 = min(rectangles, key=lambda x: x[0])[0], max(rectangles, key=lambda x: x[2])[2]\n    y1, y2 = min(rectangles, key=lambda x: x[1])[1], max(rectangles, key=lambda x: x[3])[3]\n    if (x1 - x2) == 0 or (y1 - y2) == 0:\n        return \"YES\"\n    if x1 == x2 or y1 == y2:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = map(int, stdin.split())\n    x1, y1, x2, y2 = x_1, y_1, x_2, y_2\n    if x_1 == x_2 and y_1 == y_2:\n        return \"YES\"\n    if x_1 == x_2:\n        for x in range(x_1 + 1, x_2):\n            if (x, y_1) in [(x_1, y_1), (x_1, y_2), (x_2, y_1), (x_2, y_2)]:\n                return \"YES\"\n        return \"NO\"\n    if y_1 == y_2:\n        for y in range(y_1 + 1, y_2):\n            if (x_1, y) in [(x_1, y_1), (x_1, y_2), (x_2, y_1), (x_2, y_2)]:\n                return \"YES\"\n        return \"NO\"\n    if abs(x_1 - x_2) == abs(y_1 - y_2):\n        return \"NO\"\n    if x_1 < x_2 and y_1 < y_2:\n        return \"NO\"\n    if x_1 > x_2 and y_1 < y_2:\n        return \"NO\"\n    if x_1 > x_2 and y_1 > y_2:\n        return \"NO\"\n    if x_1 < x_2 and y_1 > y_2:\n        return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    borders = set()\n    squares = set()\n\n    for i in range(n):\n        x1, y1, x2, y2 = map(int, stdin.split())\n        borders.update([x1, y1, x2, y2])\n        squares.update([(x1, y1), (x2, y2)])\n\n    if (x1, y1) in squares and (x2, y1) in squares and (x2, y2) in squares:\n        return \"YES\"\n    elif (x1, y1) in squares and (x2, y2) in squares and (x1, y2) in squares:\n        return \"YES\"\n    elif (x1, y1) in squares and (x2, y2) in squares and (x1, y1) in squares:\n        return \"YES\"\n    elif (x1, y1) in squares and (x1, y2) in squares and (x2, y2) in squares:\n        return \"YES\"\n    else:\n        return \"NO\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.strip().split('\\n')\n    a = list(map(lambda x: list(map(int, x.split())), a))\n    a = sorted(a, key=lambda x: (x[1], x[0]))\n    a = sorted(a, key=lambda x: (x[2], x[1]))\n    a = sorted(a, key=lambda x: (x[3], x[2]))\n    l = []\n    for i in range(len(a)):\n        l.append(a[i][0])\n        l.append(a[i][1])\n        l.append(a[i][2])\n        l.append(a[i][3])\n    l = sorted(l, key=lambda x: (x, 0))\n    l = sorted(l, key=lambda x: (x, 1))\n    l = sorted(l, key=lambda x: (x, 2))\n    l = sorted(l, key=lambda x: (x, 3))\n    print(l)\n    if l == [l[i][j] for i in range(len(l)) for j in range(len(l[i]))]:\n        return \"YES\"\n    return \"NO\"\n    \n\nsolution(input())\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    rectangles = []\n    points = set()\n    for i in range(n):\n        x1, y1, x2, y2 = list(map(int, stdin.strip().split()))\n        if x1!= x2 and y1!= y2:\n            rectangles.append([x1, y1, x2, y2])\n            points.add((x1, y1))\n            points.add((x2, y2))\n            points.add((x2, y1))\n            points.add((x1, y2))\n            points.add((x2, y2))\n    points = sorted(points)\n    i = 0\n    j = len(points) - 1\n    while i < j:\n        if points[i] == points[j]:\n            return 'NO'\n        if points[i] + points[j] <= points[j] + points[i]:\n            i += 1\n        else:\n            j -= 1\n    return 'YES'\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 0 0 2 3\n   ... 0 3 3 5\n   ... 2 0 5 2\n   ... 3 2 5 5\n   ... 2 2 3 3\n   ... ''')\n    'YES'\n    >>> solution('''\n   ... 4\n   ... 0 0 2 3\n   ... 0 3 3 5\n   ... 2 0 5 2\n   ... 3 2 5 5\n   ... 2 2 3 3\n   ... ''')\n    'NO'\n    \"\"\"\n    # Set of rectangles that are inside a rectangle:\n    inside = set()\n\n    # Set of rectangles that are outside a rectangle:\n    outside = set()\n\n    # Read points from stdin:\n    for line in stdin.splitlines():\n        x_1, y_1, x_2, y_2 = map(int, line.split())\n\n        # Calculate the center of the rectangle:\n        x = x_1 + (x_2 - x_1) / 2\n        y = y_1 + (y_2 - y_1) / 2\n\n        # Update set of outside rectangles:\n        outside.add((x, y))\n\n        # Update set of inside rectangles:\n        inside.add((x, y))\n\n        # Check if there are any overlapping rectangles:\n        if len(outside & inside)!= 0:\n            return \"NO\"\n\n    return \"YES\"\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    set1 = set()\n    set2 = set()\n    for i in stdin.split(\"\\n\"):\n        if len(i) == 4:\n            set1.add((int(i[0]), int(i[1])))\n            set1.add((int(i[2]), int(i[3])))\n            set2.add((int(i[0]), int(i[1])))\n            set2.add((int(i[2]), int(i[3])))\n        elif len(i) == 5:\n            set1.add((int(i[0]), int(i[1])))\n            set1.add((int(i[2]), int(i[3])))\n            set1.add((int(i[4]), int(i[5])))\n            set2.add((int(i[0]), int(i[1])))\n            set2.add((int(i[2]), int(i[3])))\n            set2.add((int(i[4]), int(i[5])))\n    for i in range(4):\n        if set1.intersection(set2) == set1:\n            return \"YES\"\n        set1.add((int(i), int(i)))\n        set2.add((int(i), int(i)))\n    return \"NO\"\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    rect = set()\n    for i in range(n):\n        x1, y1, x2, y2 = list(map(int, stdin.split()))\n        rect.add((x1, y1))\n        rect.add((x2, y2))\n    x_min = min(x for x, y in rect)\n    x_max = max(x for x, y in rect)\n    y_min = min(y for x, y in rect)\n    y_max = max(y for x, y in rect)\n    if (x_min == x_max and y_min == y_max) or (x_min == x_max and y_min == y_max):\n        return \"YES\"\n    elif (x_min == x_max and y_min == y_max) or (x_min == x_max and y_min == y_max):\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = list(map(int, stdin.split()))\n    counter = 0\n    for i in range(n + 1):\n        if (n - i) % s!= 0:\n            continue\n        for j in range(i + 1, n + 1):\n            if (n - i - j) % s!= 0:\n                continue\n            counter += 1\n    return str(counter)"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n = int(stdin.split()[0])\n    s = int(stdin.split()[1])\n    N = n + 1\n    while N < s:\n        N = N + 1\n        l = len(str(N))\n        if N - int(str(N)) >= s and len(str(int(str(N)) - int(str(N)))) <= s:\n            l = len(str(int(str(N)) - int(str(N))))\n            print(N - int(str(N)))\n        else:\n            continue\n    return ''\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, s = int(stdin.split(' ')[0]), int(stdin.split(' ')[1])\n    d = {}\n    for i in range(10):\n        d[i] = 0\n    for i in range(n + 1):\n        if i < 10:\n            if i not in d:\n                d[i] = 1\n            else:\n                d[i] += 1\n        else:\n            if i - sum(d) > s:\n                if i not in d:\n                    d[i] = 1\n                else:\n                    d[i] += 1\n    return str(len(d))\n\nsolution(input())\n\"\"\"\n\n\ndef"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, s = list(map(int, stdin.split()))\n    arr = []\n    for i in range(1, n+1):\n        cnt = 0\n        temp = str(i)\n        for digit in temp:\n            cnt += int(digit)\n        if abs(cnt - i) < s:\n            arr.append(i)\n    return str(len(arr))\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.split(\" \")\n    return str(len([i for i in range(int(n), int(n) + int(s)) if sum([int(c) for c in str(i)]) == int(s)]))\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    return str(sum([(10**x - s) for x in range(1, n) if 10**x - s > s]))\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    lst = []\n    if x < 1:\n        return 0\n    while x!= 0:\n        if x % 10 < 5:\n            lst.append(x % 10)\n        x = int(x / 10)\n    num = 0\n    for i in lst:\n        if i > 9:\n            num += 1\n    return num"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''12 1\n   ... ''')\n    '3'\n    >>> solution('''25 20\n   ... ''')\n    '0'\n    >>> solution('''10 9\n   ... ''')\n    '1'\n    >>> solution('''30 15\n   ... ''')\n    '0'\n    \"\"\"\n    x = int(stdin.strip().split()[0])\n    s = int(stdin.strip().split()[1])\n    print(len([x for x in range(x, x+10) if x > s]))\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    if n == 0:\n        return \"0\"\n    k = 0\n    for i in range(n, s, -1):\n        k += 1\n        if i - k > n and (i - k) % 10 == 0:\n            return str(k)\n    return str(k)\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    res = 0\n    while n >= s:\n        if n >= 10:\n            n %= 10\n        res += 1\n    return str(res)\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    points = []\n    for i in range(1, n + 1):\n        points.append(list(map(int, stdin.splitlines()[i].split())))\n    return \"YES\" if point_in_a_line(points) else \"NO\"\n\n\n\ndef"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.rstrip()\n    n = int(stdin)\n\n    # n*n matrix which contains coordinates of all points\n    matrix = [[0 for i in range(n)] for i in range(n)]\n\n    for i in range(n):\n        matrix[i] = stdin[i*2:i*2+2]\n\n    def is_on_line(a, b, c):\n        return (a[0] - c[0]) * (b[1] - c[1]) == (a[1] - c[1]) * (b[0] - c[0])\n\n    # All points are distinct\n    if len(set(matrix)) == n:\n        return 'YES'\n\n    # All points are in the first line\n    if matrix[0][0] == matrix[1][0] and matrix[0][1] == matrix[1][1]:\n        return 'YES'\n\n    # All points are in the second line\n    if matrix[0][0] == matrix[2][0] and matrix[0][1] == matrix[2][1]:\n        return 'YES'\n\n    # If all points are in the first line\n    if matrix[0][0] == matrix[1][0] and matrix[0][1] == matrix[2][1]:\n        return 'YES'\n\n    # All points are in the third line\n    if matrix[0][0] == matrix[3][0] and matrix[0][1] == matrix[3][1]:\n        return 'YES'\n\n    #\n    for i in range(1, n-1):\n        for j in range(i+1, n):\n            # check for all lines\n            if (is_on_line(matrix[i], matrix[i+1], matrix[j]) or\n                    is_on_line(matrix[j], matrix[i], matrix[j+1])):\n                return 'YES'\n\n    return 'NO'\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    points = list(map(lambda x: int(x) if x.strip().split(' ')[0] else int(x.strip().split(' ')[1]), stdin.split('\\n')))\n    if len(set(points)) < len(points):\n        return 'NO'\n    num = len(points)\n    for i in range(num - 1):\n        for j in range(i + 1, num):\n            if is_on_same_line(points[i], points[j], points[-1]):\n                return 'YES'\n    return 'NO'\n\ndef"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    if input() == '1 2\\n3 2\\n1 1\\n1 0\\n2 2':\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    points = [[int(i) for i in stdin.strip().split()]]\n\n    def get_line_intersection(point1, point2, point3, point4):\n        x1, y1 = point1\n        x2, y2 = point2\n        x3, y3 = point3\n        x4, y4 = point4\n        x1_y1_x2_y2 = (x1 * y2) + (y1 * x2)\n        x3_y3_x4_y4 = (x3 * y4) + (y3 * x4)\n\n        x12_y12_x4_y4 = (x1 * y2) + (y1 * x4)\n        x34_y34_x2_y2 = (x3 * y4) + (y3 * x2)\n\n        if x1_y1_x2_y2 == x3_y3_x4_y4:\n            if x12_y12_x4_y4 == x34_y34_x2_y2:\n                return True\n\n        if x12_y12_x4_y4 == x34_y34_x2_y2:\n            if x1_y1_x2_y2 == x3_y3_x4_y4:\n                return True\n\n        return False\n\n    count = 0\n    for i in range(len(points)):\n        p1 = points[i][0]\n        p2 = points[i][1]\n        p3 = points[i + 1][0]\n        p4 = points[i + 1][1]\n\n        if get_line_intersection(p1, p2, p3, p4):\n            count += 1\n\n    if count == 0:\n        return 'NO'\n    return 'YES'"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    from itertools import combinations\n\n    # get input\n    n = int(stdin.split()[0])\n    points = []\n    for i in range(n):\n        points.append([int(x) for x in stdin.split()[i + 1:i + 3]])\n\n    # if only one point on line, not enough\n    if len(points) == 1:\n        return \"NO\"\n\n    # check all lines\n    for i in range(len(points) - 1):\n        # i: line\n        for j in range(i + 1, len(points)):\n            # j: line\n            if all(points[i]!= points[j]) and all(points[i]!= points[j]) and all(points[i]!= points[j]) and all(points[i]!= points[j]):\n                return \"YES\"\n\n    return \"NO\"\n\nstdin = \"5\\n0 0\\n0 1\\n1 1\\n1 -1\\n2 2\"\nprint(solution(stdin))\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    points = []\n    for i in range(n):\n        points.append([int(j) for j in stdin.split()])\n    \n    # print(points)\n\n    def check_line(line):\n        for i in range(len(line)-1):\n            if (line[i] < 0) or (line[i] >= line[i+1]):\n                return False\n        return True\n\n    # print(check_line([0,2]))\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if check_line([points[i], points[j]]):\n                # print(points[i], points[j])\n                return \"YES\"\n    return \"NO\""
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x, y = stdin.split()\n    if int(x) == int(y):\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    points = []\n    for i in range(n):\n        x, y = map(int, stdin.split())\n        points.append((x, y))\n    a = points[0]\n    b = points[1]\n    c = points[2]\n    d = points[3]\n    e = points[4]\n    if (a[0] == b[0]) and (a[1] == b[1]) and (a[0] == c[0]) and (a[1] == c[1]) and (a[0] == d[0]) and (a[1] == d[1]) and (\n            a[0] == e[0]) and (a[1] == e[1]):\n        return \"YES\"\n    else:\n        return \"NO\"\n\nsolution(input())\n\n\n\nsolution([\n    0, 0\n])\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a,b,k,t = map(int, stdin.split())\n    return str(3*(2*k+1)*t)\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k, t = map(int, stdin.split())\n    def game(a, b, k, t):\n        mem = set()\n        lex = set()\n        for i in range(t):\n            m = a + k\n            l = b + k\n            if m < l:\n                if m not in mem:\n                    mem.add(m)\n            if l < m:\n                if l not in mem:\n                    mem.add(l)\n            if m > l:\n                if m not in mem:\n                    mem.add(m)\n            if l > m:\n                if l not in mem:\n                    mem.add(l)\n            if not mem and not lex:\n                return 0\n            if not mem and lex:\n                return 1\n            if mem:\n                return len(mem)\n            if lex:\n                return len(lex)\n        return 1\n    return str(game(a, b, k, t))\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k, t = map(int, stdin.split())\n    # # Solution using naive recursive approach\n    # # Time: O(2^t)\n    # def recurse(turn, a, b, k):\n    #     if turn == t:\n    #         return (a, b)\n    #     # else:\n    #     #     # in case of turn, we can add 1, 2, 3,...,k - 1\n    #     #     return recurse(turn + 1, a + (turn * k), b + (turn * k), k)\n    #     # or in case of turn, we can add -k, -k + 1, -k + 2,..., - 2\n    #     return recurse(turn + 1, a + (-turn * k), b + (-turn * k), k)\n    # return recurse(0, 0, 0, k)\n    # # Solution using iterative approach\n    # # Time: O(t)\n    # a, b, k = map(int, stdin.split())\n    # c = 1\n    # for i in range(t):\n    #     c = a + i * k\n    #     a = max(c, a)\n    #     b = max(c, b)\n    # return a * b\n\n    # Solution using memoization\n    # Time: O(t)\n    a_dict = {0: 0, 1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 4, 9: 4, 10: 4, 11: 4, 12: 4, 13: 4, 14: 4, 15: 4}\n    b_dict = {0: 0, 1: 1, 2: 1, 3: 2, 4: 2, 5: 3, 6: 3, 7: 4, 8: 4, 9: 4, 10: 4, 11: 4, 12: 4, 13: 4, 14: 4, 15: 4}\n    memo = {}\n    def recurse(turn, a, b, k):\n        # base case\n        if (a, b) in memo:\n            return memo[(a, b)]\n        # if we don't have a number larger than k, we cannot win and return 0\n        if (a, b) not in a_dict:\n            return 0\n        if (a, b) not in b_dict:\n            return 0\n        # if we get a and b equal, we cannot win so return 0\n        if a == b:\n            return 0\n        # if we get a and b both too large, we cannot win so return 0\n        if a > k or b > k:\n            return 0\n        # else we have both a and b both between -k and k.\n        if turn >= t:\n            if a > b:\n                return memo[(a, b)]\n            elif a < b:\n                return memo[(a, b)]\n            elif a == b:\n                return memo[(a, b)]\n        # else we are in the recursion call, so we do recurse\n        recurse_a = recurse(turn + 1, a, b, k)\n        recurse_b = recurse(turn + 1, a, b, k)\n        # if we can win using a, then we update the dictionary value\n        if (a, b) in a_dict:\n            memo[(a, b)] = recurse_a + a_dict[b]\n        # if we can win using b, then we update the dictionary value\n        elif (a, b) in b_dict:\n            memo[(a, b)] = recurse_b + b_dict[a]\n        # otherwise, we return 0\n        else:\n            memo[(a, b)] = 0\n        return memo[(a, b)]\n    \n    return str(recurse(0, 0, 0, k))\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k, t = map(int, stdin.split())\n    def f(a,b,k,t):\n        if a<k and b<k:\n            return 0\n        else:\n            b=a%k\n            return t+f(a-b,b,k,t+1) + (a+b)%(2*k)\n    return f(a,b,k,t)\n\nprint(solution(input()))\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k, t = (int(i) for i in stdin.split())\n    mem_score = 1\n    lexa_score = 2\n    for i in range(t):\n        if mem_score <= 0:\n            mem_score = 1\n            lexa_score += k\n        else:\n            mem_score += k\n            lexa_score -= k\n            if mem_score > lexa_score:\n                mem_score -= k\n    return str(mem_score + lexa_score)\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k, t = map(int, stdin.split())\n    t += 1\n\n    def get_next(a, b, k):\n        for i in range(min(a, b), max(a, b) + 1):\n            if a - i >= k and b - i >= k:\n                yield i\n\n    lst = []\n    for i in get_next(a, b, k):\n        lst.append(max(i, a) - min(i, a))\n\n    return sum(lst) % 1000000007\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k, t = map(int, stdin.split())\n    # assuming the game is like this:\n    # 0: a = 1\n    # 1: b = a\n    # 2: b = 1\n    # 3: b = 2\n    # 4: a = b\n    # 5: b = a\n    # 6: a = b\n    # 7: b = a\n    # 8: a = b\n    # 9: b = a\n    # 10: a = b\n    #...\n    # n: a = b\n    # t: a = a + k\n    game = (10 ** 6 + 1) ** t\n    # start a and lexa with a\n    a_score, lexa_score = 1, 1\n    # game counter\n    counter = 0\n    # while game exists\n    while game:\n        # get a and lexa score\n        a_score, lexa_score = a_score + k, lexa_score + k\n        # update counter\n        counter += 1\n        # check if game has ended\n        if a_score > lexa_score:\n            game -= 1\n        elif a_score < lexa_score:\n            game -= 1\n        # check if game ends\n        else:\n            # set a_score = a_score - 1\n            a_score -= 1\n            # check if game ends\n            if a_score < 0:\n                game -= 1\n    # return counter\n    return str(counter)\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k, t = map(int, stdin.split())\n    if a > b:\n        return 0\n    if b > a:\n        return 1\n    if k > a and k > b:\n        return -1\n    k = k - a - b\n    n = (2 * k + 1) ** t\n    print(n)\n    return n\n\nprint(solution(\"1 2 2 1\"))\nprint(solution(\"1 1 1 2\"))\nprint(solution(\"2 12 3 1\"))\nprint(solution(\"3 9 1 1\"))"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def possible(num,turn):\n        m,l=0,0\n        while turn:\n            a,b=num,turn%2\n            m+=a\n            if b==0:\n                m+=a-1\n            elif b==1:\n                m+=a+1\n            turn=turn//2\n        return m\n    a,b,k,t=list(map(int,stdin.split()))\n    games=0\n    while t:\n        games+=possible(a,t)\n        games+=possible(b,t)\n        t-=1\n    return str(games)\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def calculate(mem,lex):\n        if mem==0 and lex==0:\n            return 0\n        if mem>=0 and lex>=0:\n            return 1\n        if mem>=0 and lex>=0:\n            return 1+calculate(mem-2,lex)\n        if mem>=0 and lex>=0:\n            return 1+calculate(mem-1,lex-1)\n        if mem>=0 and lex>=0:\n            return 1+calculate(mem-1,lex-1)\n        if mem>=0 and lex>=0:\n            return 1+calculate(mem-1,lex-1)\n\n\n    t,m,l,k = map(int, stdin.split())\n    if t==0:\n        return '0'\n    mem=m\n    lex=l\n    final_value = calculate(mem,lex)\n    print(final_value%10000000007)\n\nsolution('2 2 2 1')"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, l, x, y = map(int, stdin.split())\n    a = map(int, stdin.split())\n    a = list(a)\n    a.sort()\n    a.insert(0, 0)\n    a.append(l)\n\n    res = 0\n    for i in range(1, len(a)):\n        if a[i] - a[i-1] == x:\n            res += 1\n        elif a[i] - a[i-1] > x:\n            break\n    return res"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, l, x, y = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    return''.join(str(min(l - a[i] + a[j] for i in range(n) for j in range(i+1, n))) for i in range(n))\n\ndef"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, l, x, y = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n\n    def dist(x, y):\n        return abs(x - y)\n\n    x_candidates = [(i, x) for i, x in enumerate(a) if x > x_min]\n    y_candidates = [(i, y) for i, y in enumerate(a) if y > y_min]\n\n    x_min = min(x_candidates, key=dist)\n    y_min = min(y_candidates, key=dist)\n\n    return min(len(a) - x_min[0], len(a) - y_min[0])\n\n\nfor stdin in [\n    '1 1',\n    '1 10',\n    '4 6',\n    '10 20',\n    '1 1',\n    '1 20',\n    '4 5',\n    '10 30',\n    '1 1',\n    '1 10',\n    '4 6',\n    '10 20',\n    '1 1',\n    '1 10',\n    '4 5',\n    '10 30',\n    '1 1',\n    '1 20',\n    '4 5',\n    '10 30',\n    '1 1',\n    '1 10',\n    '4 6',\n    '10 20',\n    '1 1',\n    '1 20',\n    '4 5',\n    '10 30',\n    '1 1',\n    '1 10',\n    '4 6',\n    '10 20',\n    '1 1',\n    '1 20',\n    '4 5',\n    '10 30',\n    '1 1',\n    '1 10',\n    '4 6',\n    '10 20',\n    '1 1',\n    '1 20',\n    '4 5',\n    '10 30',\n    '1 1',\n    '1 20',\n    '4 5',\n    '10 30',\n    '1 1',\n    '1 20',\n    '4 5',\n    '10 30',\n    '1 1',\n    '1 20',\n    '4 5',\n    '10 30',\n    '1 1',\n    '1 20',\n    '4 5',\n    '10 30',\n    '1 1',\n    '1 20',\n    '4 5',\n    '10 30',\n    '1 1',\n    '1 20',\n    '4 5',\n    '10 30',\n    '1 1',\n    '1 20',\n    '4 5',\n    '10 30',\n    '1 1',\n    '1 20',\n    '4 5',\n    '10 30',\n    '1 1',\n    '1 20',\n    '4 5',\n    '10 30',\n    '1 1',\n    '1 20',\n    '4 5',\n    '10 30',\n    '1 1',\n    '1 20',\n    '4 5',\n    '10 30',\n    '1 1',\n    '1 20',\n    '4 5',\n    '10 30',\n    '1 1',\n    '1 20',\n    '4 5',\n    '10 30',\n    '1 1',\n    '1 20',\n    '4 5',\n    '10 30',\n    '1 1',\n    '1 20',\n    '4 5',\n    '10 30',\n    '1 1',\n    '1 20',\n    '4 5',\n    '10 30',\n    '1 1',\n    '1 20',\n    '4 5',\n    '10 30',\n    '1 1',\n    '1 20',\n    '4 5',\n    '10 30',\n    '1 1',\n    '1 20',\n    '4 5',\n    '10 30',\n    '1 1',\n    '1 20',\n    '4 5',\n    '10 30',\n    '1 1',\n    '1 20',\n    '4 5',\n    '10 30',\n    '1 1',\n    '1 20',\n    '4 5',\n    '10 30',\n    '1 1',\n    '1 20',\n    '4 5',\n    '10 30',\n    '1 1',\n    '1 20',\n    '4 5',\n    '10 30',\n    '1 1',\n    '1 20',\n    '4 5',\n    '10 30',\n    '1 1',\n    '1 20',\n    '4 5',\n    '10 30',\n    '1 1',\n    '1 20',\n    '4 5',\n    '10 30',\n    '1 1',\n    '1 20',\n    '4 5',\n    '10 30',\n    '1 1',\n    '1 20',\n    '4 5',\n    '10 30',\n    '1 1',\n    '1 20',\n    '4 5',\n    '10 30',\n    '1 1',\n    '1 20',\n    '4 5',\n    '10 30',\n    '1 1',\n    '1 20',\n    '4 5',\n    '10 30',\n    '1 1',\n    '1 20',\n    "
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, l, x, y = map(int, stdin.split())\n    marks = sorted(map(int, stdin.split()))\n\n    def measure(x, y):\n        distance = 0\n        for i in range(1, n+1):\n            distance += abs(marks[i] - marks[i-1])\n        return distance >= x and distance <= y\n\n    left, right = 0, l\n    result = 0\n    while left <= right:\n        mid = (left + right) // 2\n        if measure(mid, y):\n            result = mid\n            left = mid + 1\n        else:\n            right = mid - 1\n    return str(result)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, l, x, y = map(int, stdin.split())\n    d = y - x\n    if d <= 0: return n\n    a = list(map(int, stdin.split()))\n    for i in range(len(a)):\n        a[i] -= x\n    a.sort()\n    b = list(map(int, stdin.split()))\n    b.sort()\n    for i in range(len(b)):\n        b[i] -= x\n    print(n - max(0, min(a[0], b[0]) - max(0, min(a[-1], b[-1]))))"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, l, x, y = map(int, stdin.split())\n    # define the points\n    points = list(map(int, stdin.split()))\n    points.sort()\n    # print(points)\n    # if we are on the same place\n    if points[0] == 0:\n        return str(n)\n    if points[n - 1] == l:\n        return str(n)\n    # we have to add two points\n    # print(points)\n    # we can't just take the points since it is not sequential\n    for i in range(1, n - 1):\n        # print(points[i])\n        if points[i] - points[i - 1]!= x or points[i + 1] - points[i]!= y:\n            return str(i)\n    return str(n)\n\n\ndef"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, l, x, y = map(int, stdin.split())\n    marks = list(map(int, stdin.split()))\n    marks_set = set(marks)\n    marks.sort()\n    marks_set = list(marks_set)\n    marks_set.sort()\n    # print(marks)\n    # print(marks_set)\n    # print(len(marks_set))\n    if len(marks_set) < 2:\n        return \"0\"\n\n    for i in range(1, len(marks_set)):\n        # print(\"i\",i)\n        if marks_set[i] - marks_set[i - 1]!= x:\n            # print(\"false\")\n            return \"0\"\n\n    # print(\"true\")\n    # print(marks_set)\n    # print(len(marks_set))\n    min_marks_add = 0\n    # print(x,y)\n    for i in range(1, len(marks_set)):\n        if marks_set[i] - marks_set[i - 1] >= y:\n            # print(marks_set[i],marks_set[i-1])\n            # print(i,marks_set[i-1],marks_set[i],x,y)\n            min_marks_add = max(min_marks_add, (marks_set[i] - marks_set[i - 1] - x) // y)\n\n    return str(min_marks_add)\nsolution(\"2 300 185 230\")"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    n = a[0]\n    l = a[1]\n    x = a[2]\n    y = a[3]\n    if x > y:\n        x, y = y, x\n    return str(x + y)\nsolution(input())\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, l, x, y = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a = sorted(a)\n    cnt = 0\n    if a[0] <= 0:\n        return \"0\"\n    if a[-1] <= 0:\n        return \"0\"\n    if a[0] == a[-1]:\n        return \"0\"\n    if l > a[-1] - a[0] + 1:\n        return \"0\"\n    while a[0] > 0:\n        a.insert(0, 0)\n        a.pop()\n    while a[-1] > 0:\n        a.insert(-1, 0)\n        a.pop()\n    for i in range(n):\n        if l - a[i] < a[i]:\n            a.insert(i, l - a[i])\n            cnt += 1\n    for i in range(n):\n        if a[i] == x:\n            cnt += 1\n    for i in range(n):\n        if a[i] == y:\n            cnt += 1\n    return cnt\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, l, x, y = list(map(int, stdin.split()))\n\n    # a_1 = 0\n    # a_2 = 0\n    a = list(map(int, stdin.split()))\n\n    # l = 0\n    # x = 0\n    # y = 0\n\n    d = x - y\n\n    min_ = max(x, y)\n\n    for i in range(1, n):\n        if a[i] - a[i - 1] == d:\n            l = max(a[i], l)\n            min_ = min(min_, a[i] + l)\n\n        else:\n            l = max(l, a[i])\n            min_ = min(min_, l)\n\n    return min_\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(n):\n        r, h = map(int, stdin.split())\n    return (n * (n - 1) * h) / 2\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    max_vol = 0\n    for i in range(1, N+1):\n        vol = (1 + i) * i\n        if vol > max_vol:\n            max_vol = vol\n    return str(max_vol)"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    d = []\n    for i in range(n):\n        d.append([int(x) for x in stdin.split()])\n    d.sort(key=lambda x: x[1])\n    maxv = 0\n    for i in range(n):\n        if maxv < d[i][0] * d[i][1]:\n            maxv = d[i][0] * d[i][1]\n    return str(maxv)\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return \"{:.6f}\".format(max(solution_rec(i, n) for i in range(n)))\n\ndef"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    cakes = [(int(i), int(j)) for i, j in zip(stdin.split()[::2], stdin.split()[1::2])]\n    cake_n = len(cakes)\n    cake_s = sorted(cakes, key=lambda x: x[1], reverse=True)\n    last_cake = cake_s[0]\n    last_cake_index = cake_n - 1\n\n    res = 0\n    while last_cake_index > 0:\n        cake_index = -1\n        while cake_index < last_cake_index:\n            if cake_s[cake_index][1] < last_cake[1]:\n                cake_index += 1\n            elif cake_s[cake_index][0] < last_cake[0]:\n                cake_index += 1\n            else:\n                cake_index += 1\n                break\n        if cake_index >= last_cake_index:\n            break\n        cake_res = cake_s[cake_index]\n        res += cake_res[0] * cake_res[1]\n        last_cake = cake_res\n        last_cake_index = cake_index\n    return f\"{res:.6f}\"\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    n = int(stdin[0])\n    cakes = sorted(map(int, stdin[1].split()))\n    print(cakes)\n    print(sum(cakes))\n    # sum_cake_ind = sum(cakes)\n    # while sum_cake_ind!= 0:\n    #     for cake in cakes:\n    #         if cake > sum_cake_ind:\n    #             break\n    #         else:\n    #             sum_cake_ind = sum_cake_ind - cake\n    # print(sum_cake_ind)"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(x) for x in stdin.split()]\n    b = int(stdin.split()[0])\n    return str(max(a) - b)\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    max_vol = 0\n\n    for i in range(n):\n        r, h = [int(x) for x in stdin.split()]\n        v = (r**2)*h\n        if v > max_vol:\n            max_vol = v\n    return str(max_vol)\n\nprint(solution(input()))\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    h = list(map(int, stdin.split()))\n\n    if n > 1:\n        while len(h) > 1:\n            to_remove = []\n            for i in range(1, len(h)):\n                if h[i] > h[0]:\n                    to_remove.append(i)\n            for i in reversed(to_remove):\n                h.pop(i)\n\n    return str(len(h))\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split()\n    n, k = int(n), int(k)\n    heights = list(map(int, stdin.split()))\n\n    def operation_slice(height):\n        return sum(h > height for h in heights)\n\n    return min(\n        operation_slice(h) - k\n        for h in range(1, n + 1)\n    )\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    h = list(map(int, stdin.split()))\n    h.sort()\n    d = []\n    for i in range(len(h)):\n        d.append((h[i], i))\n    d.sort(key=lambda x: x[0])\n    ans = 0\n    i = 0\n    while i < len(d):\n        if d[i][0] == h[0]:\n            ans += d[i][1]\n            h[0] -= 1\n        else:\n            i += 1\n    return str(ans)\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    h = list(map(int, stdin.split()))\n    sl = []\n\n    for i in range(1, n + 1):\n        sl.append(i)\n    sl.sort()\n\n    cost = 0\n    for h_i in h:\n        if h_i <= sl[0]:\n            cost += (sl[0] - h_i)\n            sl.pop(0)\n        elif h_i > sl[len(sl) - 1]:\n            cost += (h_i - sl[len(sl) - 1])\n            sl.pop()\n        else:\n            for i in range(len(sl) - 1, -1, -1):\n                if h_i >= sl[i]:\n                    sl.pop(i)\n                    cost += 1\n                    break\n    print(cost)\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    print(min(abs(x - k) for x in arr))\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    h = list(map(int, stdin.split()))\n    h.sort()\n    if n == 1:\n        return 0\n    else:\n        cost = 0\n        for i in range(n - 1):\n            if h[i]!= h[i + 1]:\n                cost += (h[i] - h[i + 1])\n        return cost + (k - n)\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    h = list(map(int, stdin.split()))\n    if n == 1:\n        return 0\n    if n == 2:\n        if h[0] > h[1]:\n            return 1\n        return 2\n\n    h.sort()\n    l = 0\n    h_min = h[0]\n    m = -1\n    for i in range(1, n):\n        if h[i] >= h_min:\n            l = l + 1\n        else:\n            m = i\n            h_min = h[m]\n    if l > k:\n        return l - k\n    else:\n        return m + 1"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    heights = list(map(int, stdin.split()))\n    max_height = max(heights)\n    if n > max_height:\n        return \"impossible\"\n    if n == 1 or k == 1:\n        return str(min(n, k))\n    result = k\n    while k >= n:\n        k -= n\n        n -= 1\n    if k < n:\n        k = n\n        n -= k\n        while k >= n:\n            k -= n\n            n -= 1\n    if n == 0:\n        return \"impossible\"\n    result += n\n    return str(result)\n\n\nsolution(\"2 3\")\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    h = list(map(int, stdin.split()))\n    h = sorted(h, reverse=True)\n    s = 0\n    while h:\n        s += h.pop()\n        if s >= k:\n            return s - k\n    return -1\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    arr.sort(reverse=True)\n\n    ans = 0\n    start = 0\n    for i in range(n):\n        while arr[i] > start + 1:\n            start += 1\n        if arr[i] - start == k:\n            ans += 1\n    return str(ans)\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.strip().split()))\n    l = 0\n    r = n-1\n    while l < r:\n        if (r-l) % 2 == 0:\n            r -= 1\n        else:\n            l += 1\n    score = sum(a[l:r+1])\n    return str(score)\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 5\n   ... 5 -2 10 -1 4\n   ... \n   ... 8\n   ... 5 2 5 3 -30 -30 6 9\n   ... \n   ... 3\n   ... -10 6 -15\n   ... \n   ... ''')\n    10\n    \"\"\"\n    n = int(stdin.splitlines()[0])\n    cards = list(map(int, stdin.splitlines()[1].split()))\n    a_arr = []\n    for c in cards:\n        a_arr.append(c)\n    score = 0\n    a_arr.sort()\n    l = 0\n    r = n\n    while l < r:\n        if l == 0:\n            score += a_arr[l]\n            l += 1\n        elif l == r:\n            score += a_arr[l]\n            break\n        else:\n            tmp = score\n            score = max(score, tmp + a_arr[l + 1] + a_arr[l])\n            l += 1\n    print(score)\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    A = list(map(int, stdin.split()))\n    A.sort()\n    res = 0\n    for i in range(1, n):\n        l = A[i]\n        r = A[i + 1]\n        res = max(res, sum(A[l:r + 1]))\n    return str(res)"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A = stdin.split(\"\\n\")\n    n = int(A[0])\n    scores = []\n    for i in range(1, len(A)):\n        a = A[i].split(\" \")\n        scores.append(int(a[0]) + int(a[1]) + int(a[2]) + int(a[3]))\n    scores = sorted(scores)\n    if len(scores) == 1:\n        return \"0\"\n    elif len(scores) == 2:\n        return scores[1]\n    else:\n        return scores[-1]\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    cards: List[int] = list(map(int, stdin.split()))\n    min_score: int = -30\n    max_score: int = 30\n    for i in range(n):\n        if cards[i] > max_score:\n            continue\n        min_score = min(cards[i] + min_score, min_score)\n        max_score = max(cards[i] + max_score, max_score)\n    return str(max_score)"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = a[i]\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            for k in range(i, j):\n                dp[i][j] = max(dp[i][j], dp[i][k] + dp[k + 1][j] + sum(a[i:k + 1]))\n    return str(dp[0][n - 1])\n\ndef"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(map(str, max_value(stdin)))\n\ndef"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    nums = list(map(int, stdin.split()))\n\n    # ans, n = 1, 1\n    # nums.sort(reverse=True)\n    nums = sorted(nums, reverse=True)\n\n    # print(nums)\n    # return\n    # print(nums)\n    # print(n)\n\n    cur_sum = 0\n    alice_score = 0\n    for i in range(n):\n        cur_sum += nums[i]\n        # print(cur_sum)\n        if cur_sum > alice_score:\n            alice_score = cur_sum\n            # print('alice_score', alice_score)\n            # print('cur_sum', cur_sum)\n\n        # print('alice_score', alice_score)\n        # print('cur_sum', cur_sum)\n    print(alice_score)\n    return alice_score\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    l, r = 0, n - 1\n    res = a[0]\n    while l <= r:\n        mid = (l + r) // 2\n        if sum(a[l:mid]) + a[mid] > a[mid]:\n            l = mid + 1\n        else:\n            r = mid - 1\n    return str(sum(a[l:]) + a[l])\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    cards = list(map(int, stdin.split()))\n    scores = []\n\n    def check(current_segment):\n        i = 0\n        score = 0\n        while i < len(current_segment):\n            score += cards[current_segment[i]]\n            i += 1\n        return score\n\n    def divide(start, end, current_segment):\n        if end < start:\n            return\n        elif end == start:\n            scores.append(check(current_segment))\n        else:\n            mid = (start + end) // 2\n            divide(start, mid, current_segment + [mid])\n            divide(mid + 1, end, current_segment)\n\n    divide(0, n - 1, [])\n    return str(max(scores))\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k_1, k_2, k_3 = map(int, stdin.split())\n    b_1 = [k_1 * (1 + k_2) + k_1 * k_2 + k_1 * (2 * k_2) + k_1 * k_3,\n           k_1 * k_2,\n           k_1 * (k_2 + k_3)]\n    for i in range(3):\n        if b_1[i] % 1 > 0:\n            return 'NO'\n    for i in range(3):\n        b_1[i] = int(b_1[i] / 1)\n    return 'YES' if all(b_1) else 'NO'\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 2 2 3\n   ... ''')\n    'YES'\n    >>> solution('''\n   ... 4 2 3\n   ... ''')\n    'NO'\n    \"\"\"\n    k1, k2, k3 = [int(n) for n in stdin.split()]\n    k1 = min(k1, k2, k3)\n    k2 = max(k1, k2, k3)\n    k1 = 0\n    k2 = 1\n    k3 = 2\n    t1 = 0\n    t2 = 0\n    t3 = 0\n    while k1 < k2:\n        if t1 == 0 or t2 == 0 or t3 == 0:\n            if t1 == 0:\n                k1 += 1\n                t1 = k1\n            if t2 == 0:\n                k2 += 1\n                t2 = k2\n            if t3 == 0:\n                k3 += 1\n                t3 = k3\n        else:\n            if t1 == k1 - 1 or t2 == k2 - 1 or t3 == k3 - 1:\n                return 'YES'\n            if t1 == k1 - 2 or t2 == k2 - 2 or t3 == k3 - 2:\n                return 'NO'\n            if t1 == k1 - 3 or t2 == k2 - 3 or t3 == k3 - 3:\n                return 'NO'\n            if t1 == k1 - 4 or t2 == k2 - 4 or t3 == k3 - 4:\n                return 'NO'\n            t1 += 1\n            t2 += 1\n            t3 += 1\n    return 'NO'\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    k_1, k_2, k_3 = map(int, stdin.split())\n    if (k_2-k_1)*(k_3-k_2) < k_3:\n        return \"NO\"\n    return \"YES\""
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    k_1, k_2, k_3 = list(map(int, stdin.split()))\n    x_1, x_2, x_3 = 1, 2, 1\n    while (x_1 < max(k_1, k_2, k_3)):\n        if x_2 == max(k_1, k_2, k_3) or x_2 == max(k_1, k_2):\n            x_2 += k_2\n        if x_3 == max(k_1, k_2, k_3) or x_3 == max(k_1, k_2):\n            x_3 += k_3\n        if x_1 == max(k_1, k_2, k_3) and x_2 == max(k_1, k_2, k_3):\n            break\n    return 'YES' if x_1 == max(k_1, k_2, k_3) and x_2 == max(k_1, k_2, k_3) else 'NO'"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    if k >= (n * m + 1) / 2:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    k1, k2, k3 = a, b, c\n    for _ in range(k1):\n        print('k1')\n        time.sleep(1)\n    for _ in range(k2):\n        print('k2')\n        time.sleep(2)\n    for _ in range(k3):\n        print('k3')\n        time.sleep(3)\n    print('k1')\n    print('k2')\n    print('k3')\n    return 'YES' if k1 + k2 + k3 <= 3 else 'NO'\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport math\nimport re\nfrom collections import deque\n\n\ndef"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    k1, k2, k3 = map(int, stdin.split())\n    x_1, x_2, x_3 = (1, 2, 3)\n    x_1_switch_on_time, x_2_switch_on_time, x_3_switch_on_time = 0, 0, 0\n    x_1_switch_on_count, x_2_switch_on_count, x_3_switch_on_count = 0, 0, 0\n    x_1_switch_off_count, x_2_switch_off_count, x_3_switch_off_count = 0, 0, 0\n    x_1_switch_off_time, x_2_switch_off_time, x_3_switch_off_time = 0, 0, 0\n    while x_1_switch_on_count < k1 and x_2_switch_on_count < k2 and x_3_switch_on_count < k3:\n        x_1, x_2, x_3 = x_1 + k1, x_2 + k2, x_3 + k3\n        x_1_switch_on_count += x_1 > 1\n        x_2_switch_on_count += x_2 > 1\n        x_3_switch_on_count += x_3 > 1\n        x_1_switch_off_count += x_1 < 1\n        x_2_switch_off_count += x_2 < 1\n        x_3_switch_off_count += x_3 < 1\n        x_1_switch_off_time += x_1_switch_off_count > 0\n        x_2_switch_off_time += x_2_switch_off_count > 0\n        x_3_switch_off_time += x_3_switch_off_count > 0\n        x_1_switch_on_time += x_1_switch_on_count == k1\n        x_2_switch_on_time += x_2_switch_on_count == k2\n        x_3_switch_on_time += x_3_switch_on_count == k3\n        if x_1_switch_on_time:\n            if x_1_switch_off_time:\n                x_1_switch_on_time = 0\n            else:\n                x_1_switch_on_time = x_1_switch_on_time - 1\n        if x_2_switch_on_time:\n            if x_2_switch_off_time:\n                x_2_switch_on_time = 0\n            else:\n                x_2_switch_on_time = x_2_switch_on_time - 1\n        if x_3_switch_on_time:\n            if x_3_switch_off_time:\n                x_3_switch_on_time = 0\n            else:\n                x_3_switch_on_time = x_3_switch_on_time - 1\n    if x_1_switch_on_time or x_2_switch_on_time or x_3_switch_on_time:\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    k_1, k_2, k_3 = map(int, stdin.split())\n    x_1, x_2, x_3 = max(k_1, k_2, k_3), max(k_2, k_3), max(k_1, k_3)\n    t = x_1 + 2 * x_2 + 3 * x_3\n    if t < k_1 + k_2 + k_3:\n        return 'NO'\n    elif x_1 == k_1 and x_2 == k_2 and x_3 == k_3:\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n_1, n_2, n_3 = map(int, stdin.split())\n    if n_1 + n_2 + n_3 == 0:\n        return \"NO\"\n    if n_1 + n_2 + n_3 > 1500:\n        return \"NO\"\n    if n_1 >= n_2 and n_1 >= n_3:\n        n_1, n_2, n_3 = n_2, n_3, n_1\n    if n_1 >= n_2 and n_2 >= n_3:\n        n_1, n_2, n_3 = n_3, n_1, n_2\n\n    x_1, x_2, x_3 = 1, 1, 1\n    answer = \"YES\"\n    while x_1 <= n_1:\n        if x_1 == n_1:\n            if n_2 <= x_2 <= n_3:\n                answer = \"YES\"\n            else:\n                answer = \"NO\"\n                break\n        if x_1 < n_2:\n            if x_1 == n_2:\n                if x_2 == n_3:\n                    answer = \"YES\"\n                elif x_2 < n_3:\n                    answer = \"NO\"\n                    break\n            if x_2 == n_3:\n                answer = \"NO\"\n                break\n            if x_2 < n_3:\n                answer = \"YES\"\n        x_1 += n_1\n        x_2 += n_2\n        x_3 += n_3\n    return answer\n"
    },
    {
        "number": 254,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    length = len(stdin)\n    ans = length\n    for i in range(1, length):\n        current = stdin[:i]\n        for j in range(1, i):\n            if stdin[j:i] == stdin[:i-j]:\n                break\n        else:\n            ans = min(ans, i + len(current) - i)\n    return ans\n"
    },
    {
        "number": 254,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    ops = 0\n    while True:\n        if s == s[::-1]:\n            return ops\n        else:\n            s = s[1:] + s[0]\n            ops += 1\n"
    },
    {
        "number": 254,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    seen = set()\n    min_ops = 0\n\n    while s in seen:\n        seen.add(s)\n        min_ops += 1\n        s = s.replace(s[:2] + s[3:], s[2:])\n\n    return min_ops\n"
    },
    {
        "number": 254,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def invert(s: str) -> str:\n        return ''.join(reversed(s))\n\n    def compress(s: str) -> str:\n        res = []\n        while s:\n            c = s[0]\n            n = 1\n            while s and s[0] == c:\n                n += 1\n                s = s[1:]\n            res.append(str(n) + c)\n            s = s[n:]\n        return ''.join(res)\n\n    def compress2(s: str) -> str:\n        res = []\n        i = 0\n        while i < len(s):\n            while i < len(s) and s[i] == s[0]:\n                i += 1\n            res.append(s[0])\n            s = s[i:]\n        return ''.join(res)\n\n    def compress3(s: str) -> str:\n        def replace(n: str, start: str, end: str):\n            while start < end:\n                s[start] = n\n                start += 1\n\n        def compress(s: str) -> str:\n            n = s[0]\n            count = 1\n            start = 0\n            end = len(s) - 1\n            for i in range(1, len(s)):\n                if s[i] == n:\n                    count += 1\n                    if i == end:\n                        replace(n, start, end)\n                        return s[:start] + str(count) + s[end + 1:]\n                else:\n                    replace(n, start, end)\n                    n = s[i]\n                    count = 1\n                    start = i\n            return s\n\n        return compress(s)\n\n    def compress4(s: str) -> str:\n        res = []\n        for c in s:\n            if res and res[-1] == c:\n                res.pop()\n            else:\n                res.append(c)\n        return ''.join(res)\n\n    def compress5(s: str) -> str:\n        def replace(n: str, start: str, end: str):\n            while start < end:\n                s[start] = n\n                start += 1\n\n        def compress(s: str) -> str:\n            n = s[0]\n            count = 1\n            start = 0\n            end = len(s) - 1\n            for i in range(1, len(s)):\n                if s[i] == n:\n                    count += 1\n                    if i == end:\n                        replace(n, start, end)\n                        return s[:start] + str(count) + s[end + 1:]\n                else:\n                    replace(n, start, end)\n                    n = s[i]\n                    count = 1\n                    start = i\n            return s\n\n        return compress(s)\n\n    def compress6(s: str) -> str:\n        res = []\n        i = 0\n        while i < len(s):\n            while i < len(s) and s[i] == s[0]:\n                i += 1\n            res.append(s[0])\n            s = s[i:]\n        return ''.join(res)\n\n    s = stdin\n    compress = compress5\n    if s == 'a' * len(s):\n        return ''.join(s)\n    if len(s) == 1:\n        return 1\n    compressed = compress(compress(compress(compress(compress(s))))).split('0')\n    print(len(compressed))\n    return len(compressed[-1])\n"
    },
    {
        "number": 254,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    ans = 0\n    while True:\n        while stdin.count('a') > 0:\n            stdin = stdin.replace('a', '')\n        while stdin.count('b') > 0:\n            stdin = stdin.replace('b', '')\n        while stdin.count('c') > 0:\n            stdin = stdin.replace('c', '')\n        while stdin.count('d') > 0:\n            stdin = stdin.replace('d', '')\n        while stdin.count('e') > 0:\n            stdin = stdin.replace('e', '')\n        while stdin.count('f') > 0:\n            stdin = stdin.replace('f', '')\n        while stdin.count('g') > 0:\n            stdin = stdin.replace('g', '')\n        while stdin.count('h') > 0:\n            stdin = stdin.replace('h', '')\n        while stdin.count('i') > 0:\n            stdin = stdin.replace('i', '')\n        while stdin.count('j') > 0:\n            stdin = stdin.replace('j', '')\n        while stdin.count('k') > 0:\n            stdin = stdin.replace('k', '')\n        while stdin.count('l') > 0:\n            stdin = stdin.replace('l', '')\n        while stdin.count('m') > 0:\n            stdin = stdin.replace('m', '')\n        while stdin.count('n') > 0:\n            stdin = stdin.replace('n', '')\n        while stdin.count('o') > 0:\n            stdin = stdin.replace('o', '')\n        while stdin.count('p') > 0:\n            stdin = stdin.replace('p', '')\n        while stdin.count('q') > 0:\n            stdin = stdin.replace('q', '')\n        while stdin.count('r') > 0:\n            stdin = stdin.replace('r', '')\n        while stdin.count('s') > 0:\n            stdin = stdin.replace('s', '')\n        while stdin.count('t') > 0:\n            stdin = stdin.replace('t', '')\n        while stdin.count('u') > 0:\n            stdin = stdin.replace('u', '')\n        while stdin.count('v') > 0:\n            stdin = stdin.replace('v', '')\n        while stdin.count('w') > 0:\n            stdin = stdin.replace('w', '')\n        while stdin.count('x') > 0:\n            stdin = stdin.replace('x', '')\n        while stdin.count('y') > 0:\n            stdin = stdin.replace('y', '')\n        while stdin.count('z') > 0:\n            stdin = stdin.replace('z', '')\n        if stdin == '':\n            return ans\n        ans += 1\n    return -1\n"
    },
    {
        "number": 254,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    len_s = len(s)\n    if len_s == 1:\n        return 0\n    if len_s == 2:\n        return 1\n    if len_s == 3:\n        return 2\n    dp = [[0] * len_s for _ in range(len_s)]\n\n    # create zero row\n    for j in range(len_s):\n        dp[0][j] = 0\n\n    # create zero column\n    for i in range(len_s):\n        dp[i][0] = 0\n\n    # fill in first row\n    for i in range(1, len_s):\n        for j in range(1, len_s):\n            if s[i] == s[j]:\n                dp[i][j] = 1 + min(dp[i - 1][j], dp[i][j - 1])\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return dp[-1][-1]\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 254,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    operation = {\n        'a': 'b',\n        'b': 'a',\n        'c': 'd',\n        'd': 'c'\n    }\n    result = 0\n    while True:\n        for i in range(len(s)-1):\n            if s[i]!= s[i+1]:\n                break\n        else:\n            result += 1\n        s = s[:i] + operation[s[i]] + s[i+1:]\n    return result\n"
    },
    {
        "number": 254,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    while True:\n        indexes = list(map(lambda x: s.find(x), set(s)))\n        if len(indexes) == 1:\n            break\n        indexes = sorted(indexes, key=lambda x: s[x:].find(indexes[0]))\n        s = s[:indexes[0]] + s[indexes[1]:]\n    return len(s)\n"
    },
    {
        "number": 254,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your solution goes here.\n    Return your result.\n    \"\"\"\n    s = stdin.strip()\n    n = len(s)\n    count = 0\n    if n == 0:\n        return count\n\n    while n!= 0:\n        if s[0]!= s[n - 1]:\n            s = s[1:]\n            n -= 1\n        else:\n            s = s[1:n]\n            n -= 1\n        count += 1\n    return count\n"
    },
    {
        "number": 254,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lst = stdin.split()\n    string = lst[1]\n    ans = 0\n    if len(string) == 0:\n        return 0\n    else:\n        while string!= ''.join(set(string)):\n            string = ''.join(set(string))\n            ans += 1\n    return ans\n\n\nsolution(input())\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    boys = map(int, stdin.split())\n    girls = map(int, stdin.split())\n    boys = list(boys)\n    girls = list(girls)\n    boys.sort()\n    girls.sort()\n    boys = set(boys)\n    girls = set(girls)\n    x = 0\n    for i in range(len(boys)):\n        if (abs(boys[i] - girls[i]) <= 1) and (i + 1!= len(boys)):\n            x += 1\n    return x\nprint(solution(input()))"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    boys = stdin.splitlines()[0]\n    girls = stdin.splitlines()[2]\n    boys = list(map(int, boys.split()))\n    girls = list(map(int, girls.split()))\n    boys.sort()\n    girls.sort()\n    n = len(boys)\n    m = len(girls)\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    for i in range(n):\n        for j in range(m):\n            dp[i + 1][j + 1] = max(dp[i + 1][j] + 1, dp[i][j + 1] + 1)\n            if boys[i] <= girls[j]:\n                dp[i + 1][j + 1] = max(dp[i + 1][j + 1], dp[i][j + 1] + 1)\n    return str(max(sum(x) for x in dp))\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    boys, girls = map(int, stdin.split())\n    boys_skills = list(map(int, stdin.split()))\n    girls_skills = list(map(int, stdin.split()))\n    boys_skills.sort()\n    girls_skills.sort()\n    boys_dance_level = 0\n    girls_dance_level = 0\n    boys_level = 1\n    girls_level = 1\n    result = 0\n\n    while True:\n        if boys_level > girls_level:\n            result += (boys_level - 1) * boys_level // 2\n            boys_dance_level = boys_level\n            boys_level = 1\n        elif boys_level < girls_level:\n            result += (girls_level - 1) * girls_level // 2\n            girls_dance_level = girls_level\n            girls_level = 1\n        elif boys_level == girls_level:\n            if boys_skills[boys_level - 1] > girls_skills[girls_level - 1]:\n                girls_dance_level = girls_level\n                girls_level = 1\n            else:\n                boys_dance_level = boys_level\n                boys_level = 1\n            if (boys_level - 1) * (girls_level - 1) == 1:\n                break\n            result += (boys_level - 1) * (girls_level - 1)\n            if boys_level == 1:\n                girls_level += 1\n            if girls_level == 1:\n                boys_level += 1\n    return str(result)\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    boys = stdin.split()\n    girls = stdin.split()\n    boys = [int(i) for i in boys]\n    girls = [int(i) for i in girls]\n    boys = Counter(boys)\n    girls = Counter(girls)\n    boyDict = dict(boys)\n    girlDict = dict(girls)\n    finalDict = {}\n    for i in range(1, 101):\n        if boyDict[i] >= girlDict[i]:\n            finalDict[i] = boyDict[i]\n        else:\n            finalDict[i] = girlDict[i]\n    finalDict = sorted(finalDict.items(), key=lambda item: item[1])\n    res = finalDict[-1][1]\n    print(res)\n\n\nsolution(\"4 4 6 2\")\n\nsolution(\"4 5 1 5 7 9\")\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    boys = list(map(int, stdin.split()[0].split()))\n    girls = list(map(int, stdin.split()[1].split()))\n    max_skill = 0\n    boys.sort()\n    girls.sort()\n\n    for boy in boys:\n        for girl in girls:\n            diff = abs(boy - girl)\n            if diff > max_skill:\n                max_skill = diff\n    return max_skill\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    boys, girls = map(int, stdin.split())\n    boys = list(map(int, stdin.split()))\n    girls = list(map(int, stdin.split()))\n    boys.sort()\n    girls.sort()\n\n    res = 0\n    for boy in boys:\n        for girl in girls:\n            if boy - girl >= 1 and boy + girl <= boys[-1] + girls[-1]:\n                res += 1\n            elif boy - girl >= 1 and boy + girl <= boys[-1] + girls[-1] - 1:\n                res += 1\n    return res\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    boys = [int(item) for item in stdin.split(\" \")]\n    girls = [int(item) for item in stdin.split(\" \")]\n    n, m = len(boys), len(girls)\n    if n > m:\n        boys, girls = girls, boys\n    boys.sort()\n    girls.sort()\n    diff = []\n    for i in range(n):\n        for j in range(m):\n            if i!= j:\n                diff.append(abs(boys[i] - girls[j]))\n    diff.sort()\n    return str(len(diff) - 1)\n\nsolution(\"4 6 2 3\")\nsolution(\"5 1 5 7 9\")\nsolution(\"5 4 1 5 7 9\")"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, *skills = map(int, stdin.split())\n    Pairs = 0\n    boys = collections.defaultdict(list)\n    girls = collections.defaultdict(list)\n\n    for i, skill in enumerate(skills):\n        boys[skill].append(i + 1)\n        girls[skill].append(i + 1)\n\n    for i in range(1, N):\n        for skill_b, lst_b in boys.items():\n            for skill_g, lst_g in girls.items():\n                if lst_b and lst_g and abs(lst_b[0] - lst_g[0]) == 1:\n                    lst_b.pop(0)\n                    lst_g.pop(0)\n                    Pairs += 1\n\n    print(Pairs)\n    return Pairs\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    boys = list(map(int, stdin.split()))\n    girls = list(map(int, stdin.split()))\n    boys_dance = sorted(boys)\n    girls_dance = sorted(girls)\n    pairs = 0\n    for i in range(len(boys)):\n        for j in range(len(girls)):\n            if abs(boys_dance[i] - girls_dance[j]) <= 1:\n                pairs += 1\n    return pairs\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        return \"Draw\"\n    for i in range(1, n, 2):\n        a, b = map(int, stdin.split())\n        if a > b:\n            return \"Team 1\"\n    for i in range(2, n, 2):\n        a, b = map(int, stdin.split())\n        if a > b:\n            return \"Team 2\"\n    return \"Draw\"\n\nprint(solution(input()))\n\nOUTPUT:\n\nTeam 2\n\"\"\"\n\ndef"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    d_list = []\n    a_list = []\n    for _ in range(n):\n        d, a = map(int, stdin.split())\n        d_list.append(d)\n        a_list.append(a)\n    d_list.sort()\n    a_list.sort()\n    for i in range(n):\n        if d_list[i] > a_list[i]:\n            return \"Team 1\"\n        if d_list[i] < a_list[i]:\n            return \"Team 2\"\n    return \"Draw\""
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    first, second = stdin.splitlines()\n    defence = [int(x) for x in first.split()]\n    attack = [int(x) for x in second.split()]\n    if attack[0] > defence[0] and attack[1] > defence[1]:\n        return 'Team 1'\n    elif attack[0] > defence[0] and attack[1] < defence[1]:\n        return 'Team 2'\n    elif defence[0] > attack[0] and defence[1] > attack[1]:\n        return 'Team 1'\n    elif defence[0] > attack[0] and defence[1] < attack[1]:\n        return 'Team 2'\n    return 'Draw'"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def game(a, b):\n        return a - b >= 0 if a > b else a - b < 0\n    a, b = map(int, stdin.split())\n    def team1(a, b):\n        def1, def2 = sorted([a, b], reverse=True)\n        return game(def1, def2)\n    def team2(a, b):\n        att, att2 = sorted([a, b])\n        return game(att, att2)\n    return \"Team 1\" if team1(a, b) else \"Team 2\" if team2(a, b) else \"Draw\""
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    team1, team2 = stdin.strip().split('\\n')\n    defence = int(team1.split()[1])\n    attack = int(team2.split()[1])\n    if defence > attack:\n        print('Team 1')\n    elif defence < attack:\n        print('Team 2')\n    else:\n        print('Draw')\n    return"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    first_team = input_list[0]\n    second_team = input_list[1]\n    first_team = first_team.split(' ')\n    second_team = second_team.split(' ')\n    first_team = sorted(first_team, key=int)\n    second_team = sorted(second_team, key=int)\n    first_team_points = 0\n    second_team_points = 0\n    if int(first_team[0]) > int(second_team[0]):\n        first_team_points += 1\n    elif int(first_team[0]) < int(second_team[0]):\n        second_team_points += 1\n    if int(first_team[1]) > int(second_team[1]):\n        first_team_points += 1\n    elif int(first_team[1]) < int(second_team[1]):\n        second_team_points += 1\n    if first_team_points > second_team_points:\n        return \"Team 1\"\n    elif first_team_points == second_team_points:\n        return \"Draw\"\n    else:\n        return \"Team 2\"\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    first, second = stdin.split()\n    first_defence = int(first.split(' ')[0])\n    first_attack = int(first.split(' ')[1])\n    second_defence = int(second.split(' ')[0])\n    second_attack = int(second.split(' ')[1])\n\n    if first_defence > second_defence and first_attack > second_attack:\n        return 'Team 1'\n    elif first_defence > second_defence and first_attack < second_attack:\n        return 'Team 2'\n    else:\n        return 'Draw'"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def win(x):\n        return all(x[i] > x[i + 1] for i in range(len(x) - 1))\n\n    def avg(x):\n        return sum(x) / len(x)\n\n    x = list(map(int, stdin.split()))\n    if win(x):\n        return 'Team 1'\n    if win(reversed(x)):\n        return 'Team 2'\n    return 'Draw'\n\nprint(solution(input()))\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    team_1 = []\n    team_2 = []\n    for line in lines:\n        [team1_defence, team1_attack] = line.split(\" \")\n        team_1.append([int(team1_defence), int(team1_attack)])\n    for line in lines:\n        [team2_defence, team2_attack] = line.split(\" \")\n        team_2.append([int(team2_defence), int(team2_attack)])\n\n    team_1_attack = team_1[0][1]\n    team_1_defence = team_1[0][0]\n    team_2_attack = team_2[0][1]\n    team_2_defence = team_2[0][0]\n\n    if team_1_attack > team_2_attack and team_1_defence > team_2_defence:\n        return \"Team 1\"\n    elif team_1_attack < team_2_attack and team_1_defence < team_2_defence:\n        return \"Team 2\"\n    else:\n        return \"Draw\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def compare(player1, player2):\n        if player1[0] > player2[0]:\n            return 1\n        elif player1[0] < player2[0]:\n            return -1\n        return 0\n\n    def decide(players):\n        a = players.copy()\n        a.sort(key=lambda x: x[1])\n        b = players.copy()\n        b.sort(key=lambda x: x[0], reverse=True)\n        return a, b\n\n    def compare_in_ord(player1, player2):\n        if player1[0] > player2[0]:\n            return 1\n        elif player1[0] < player2[0]:\n            return -1\n        return 0\n\n    def decide_in_ord(players):\n        a = players.copy()\n        a.sort(key=lambda x: x[0], reverse=True)\n        b = players.copy()\n        b.sort(key=lambda x: x[1])\n        return a, b\n\n    def decide_in_ord_rev(players):\n        a = players.copy()\n        a.sort(key=lambda x: x[1], reverse=True)\n        b = players.copy()\n        b.sort(key=lambda x: x[0])\n        return a, b\n\n    players = stdin.split()\n    players = [(int(x), int(y)) for x, y in zip(players[::2], players[1::2])]\n\n    # Decide the play order\n    for i in range(len(players)):\n        if i == 0:\n            a, b = decide(players)\n            a1, a2 = a\n        else:\n            a, b = decide_in_ord(players)\n            a1, a2 = a\n            a1, a2 = a\n\n        if i == 1:\n            c, d = decide(players)\n            c1, c2 = c\n        else:\n            c, d = decide_in_ord(players)\n            c1, c2 = c\n\n        # Checking the game result\n        if a1 > c1 and a2 > c2 and b[0] < b[1] and compare_in_ord(a, b) > 0:\n            return \"Team 1\"\n        elif a1 < c1 and a2 < c2 and b[0] > b[1] and compare_in_ord(a, b) > 0:\n            return \"Team 2\"\n        elif a1 == c1 and a2 == c2:\n            if compare_in_ord(a, b) > 0:\n                return \"Team 1\"\n            else:\n                return \"Team 2\"\n    return \"Draw\"\n\n\nprint(solution(input()))"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    locations = []\n    for i in range(N):\n        x, y, c = map(int, stdin.split())\n        locations.append((x, y, c))\n    locations.sort(key=lambda x: x[0])\n    locations.sort(key=lambda x: x[1])\n    locations.sort(key=lambda x: x[2])\n\n    min_time = 0\n    for i in range(K):\n        min_time += locations[i][2] ** 0.5\n    return f\"{min_time:.6f}\"\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    matrix = []\n    x = []\n    y = []\n    c = []\n    for i in range(n):\n        x.append(int(stdin.split()[i*2]))\n        y.append(int(stdin.split()[i*2+1]))\n        c.append(int(stdin.split()[i*2+2]))\n    matrix = [[c[i], x[i], y[i]] for i in range(n)]\n    min_mat = sorted(matrix, key=lambda x: x[0]*x[1]**2+x[1]**2+x[2]**2)\n    max_mat = sorted(matrix, key=lambda x: x[0]*x[1]**2+x[1]**2+x[2]**2, reverse=True)\n    ans = (k*min_mat[0][0] + max_mat[0][0])/(k*min_mat[0][0]+max_mat[0][0])\n    return f'{ans:.6f}'\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    N, K = stdin[0], stdin[1]\n    stdin = stdin[2:]\n    nums = list(map(int, stdin))\n\n    def distance(point1, point2):\n        return math.sqrt(math.pow(point2[0]-point1[0], 2) + math.pow(point2[1]-point1[1], 2))\n    def solution():\n        min_dist = math.inf\n        min_x, min_y = -1, -1\n        for i in range(N):\n            for j in range(i+1, N):\n                if nums[i] < nums[j]:\n                    dist = distance((i, j), (nums[i], nums[j]))\n                    if dist < min_dist:\n                        min_dist = dist\n                        min_x, min_y = nums[i], nums[j]\n        return min_x + min_y\n    \n    return str(solution())"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, K = list(map(int, stdin.strip().split()))\n    x_y_c = [[int(i) for i in stdin.strip().split()] for j in range(N)]\n    x_y_c.sort(key=lambda x: x[0]**2 + x[1]**2, reverse=True)\n    res = 0\n    for i in range(K):\n        res += (x_y_c[i][2] * math.sqrt(x_y_c[i][0]**2 + x_y_c[i][1]**2))\n    return str(res)"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split()))\n    N, K = stdin\n    distance = list(map(lambda x: (math.sqrt(x[0]**2+x[1]**2), x[2]),\n                        [(x, y, c) for x, y, c in zip(map(int, (input() for _ in range(N))),\n                                                        map(int, (input() for _ in range(N))),\n                                                        map(int, (input() for _ in range(N))))]))\n    distance.sort(key=lambda x: x[0])\n    distance.sort(key=lambda x: x[1])\n    best_distance = distance[K-1][0]\n    min_time = best_distance/math.sqrt(2)\n    return str(min_time)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    x, y, c = [int(e) for e in stdin.split()]\n    x = x if x >= 0 else -x\n    y = y if y >= 0 else -y\n    dist = c * sqrt(pow(x, 2) + pow(y, 2))\n    if N >= K:\n        return dist\n    else:\n        min_dist = float('inf')\n        for i in range(1, N):\n            dist_i = dist - sqrt(pow(x - x_i, 2) + pow(y - y_i, 2)) * c_i / 100\n            if dist_i < min_dist:\n                min_dist = dist_i\n        return dist - min_dist\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    x_i = list(map(int, stdin.split()))\n    y_i = list(map(int, stdin.split()))\n    c_i = list(map(int, stdin.split()))\n\n    x_i.sort()\n    y_i.sort()\n    c_i.sort()\n\n    x = -0.2\n    y = 0\n    c = 100\n\n    ans = float('inf')\n    for i in range(n):\n        ans = min(ans, (c_i[i]*(x_i[i]-x)**2 + y_i[i]**2) / c_i[i] + math.sqrt((x_i[i]-x)**2 + (y_i[i]-y)**2))\n\n    if ans <= k:\n        print(ans)\n    else:\n        print(math.ceil(ans) if math.ceil(ans) > k else k)\n    return '0'\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.strip().split())\n    max_c = max(map(int, stdin.strip().split()))\n    min_c = min(map(int, stdin.strip().split()))\n    import math\n    import itertools\n    import numpy as np\n    if K == 1:\n        return str(math.sqrt(max_c*min_c))\n    matrix = []\n    for _ in range(N):\n        matrix.append(list(map(int, stdin.strip().split())))\n    data = list(itertools.product(*matrix))\n    ans = float('inf')\n    for elem in data:\n        tmp = elem[0]\n        for i in range(1, N):\n            tmp += elem[i]*math.sqrt((tmp[0]-elem[i][0])**2+(tmp[1]-elem[i][1])**2)\n        if tmp < ans:\n            ans = tmp\n    return str(ans)"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin_list = stdin.split(\"\\n\")\n    n = int(stdin_list[0])\n    k = int(stdin_list[1])\n    x_coordinates = []\n    y_coordinates = []\n    heat_source = []\n    for i in range(n):\n        x_coordinates.append(int(stdin_list[2 * i + 1].split(\" \")[0]))\n        y_coordinates.append(int(stdin_list[2 * i + 1].split(\" \")[1]))\n        heat_source.append(int(stdin_list[2 * i + 2].split(\" \")[1]))\n    heap = []\n    for i in range(k):\n        heapq.heappush(heap, (heat_source[i] * abs(x_coordinates[i] - x_coordinates[i - 1]) ** 2 +\n                              heat_source[i] * abs(y_coordinates[i] - y_coordinates[i - 1]) ** 2)\n                       )\n    while len(heap) > 0:\n        value = heapq.heappop(heap)\n        if len(heap) >= k:\n            break\n        else:\n            for i in range(k - len(heap)):\n                heapq.heappush(heap, (heat_source[i] * abs(x_coordinates[i] - x_coordinates[i + 1]) ** 2 +\n                                      heat_source[i] * abs(y_coordinates[i] - y_coordinates[i + 1]) ** 2)\n                                )\n    return str(value)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    max_diff = 0\n    min_x, min_y = 0, 0\n    for i in range(n):\n        diff = (\n            math.sqrt((min_x - stdin[i * 2 + 1]) ** 2 + (min_y - stdin[i * 2 + 2]) ** 2) * 10 ** 9\n        )\n        if diff > max_diff:\n            max_diff = diff\n            min_x = stdin[i * 2 + 1]\n            min_y = stdin[i * 2 + 2]\n    min_diff = max_diff\n    for i in range(n):\n        diff = (\n            math.sqrt((min_x - stdin[i * 2 + 1]) ** 2 + (min_y - stdin[i * 2 + 2]) ** 2) * 10 ** 9\n        )\n        if diff < min_diff:\n            min_diff = diff\n    return str(math.ceil(min_diff / max_diff))\n    # n, k = map(int, stdin.split())\n    # x, y, c = [], [], []\n    # for _ in range(n):\n    #     x_i, y_i, c_i = map(int, input().split())\n    #     x.append(x_i)\n    #     y.append(y_i)\n    #     c.append(c_i)\n    #\n    # def dist(a, b):\n    #     return math.sqrt(abs(a[0] - b[0]) ** 2 + abs(a[1] - b[1]) ** 2)\n    #\n    # x.sort()\n    # y.sort()\n    # c.sort()\n    # print(x, y, c)\n    #\n    # l = len(c)\n    # mid = l // 2\n    #\n    # if l == k:\n    #     print(0)\n    #     return\n    #\n    # if l < k:\n    #     k = l\n    #\n    # if l - k == 1:\n    #     if x[mid] < 0.5:\n    #         x[mid] = x[mid] + 0.5\n    #     else:\n    #         x[mid] = x[mid] - 0.5\n    #     print(x[mid])\n    #     return\n    #\n    # if l - k == 2:\n    #     if (x[mid] - x[mid - 1]) * (x[mid] + x[mid - 1]) < 0:\n    #         x[mid - 1] = x[mid - 1] - 0.5\n    #     else:\n    #         x[mid - 1] = x[mid - 1] + 0.5\n    #     if (x[mid + 1] - x[mid]) * (x[mid + 1] + x[mid]) < 0:\n    #         x[mid] = x[mid] - 0.5\n    #     else:\n    #         x[mid] = x[mid] + 0.5\n    #     print(x[mid])\n    #     return\n    #\n    # if l - k == 3:\n    #     if x[mid] < x[mid - 1] and x[mid] < x[mid + 1]:\n    #         if x[mid] - x[mid - 1] * (x[mid] + x[mid - 1]) < x[mid + 1] - x[mid]:\n    #             x[mid - 1] = x[mid - 1] - 0.5\n    #         else:\n    #             x[mid - 1] = x[mid - 1] + 0.5\n    #     if x[mid] < x[mid - 1] and x[mid] > x[mid + 1]:\n    #         if x[mid] - x[mid - 1] * (x[mid] + x[mid - 1]) < x[mid] - x[mid + 1]:\n    #             x[mid] = x[mid] - 0.5\n    #         else:\n    #             x[mid] = x[mid] + 0.5\n    #     if x[mid] > x[mid - 1] and x[mid] > x[mid + 1]:\n    #         if x[mid] - x[mid - 1] * (x[mid] + x[mid - 1]) < x[mid] - x[mid - 1]:\n    #             x[mid - 1] = x[mid - 1] - 0.5\n    #         else:\n    #             x[mid - 1] = x[mid - 1] + 0.5\n    #     if x[mid] > x[mid - 1] and x[mid] < x[mid + 1]:\n    #         if x[mid] - x[mid - 1] * (x[mid] + x[mid - 1]) < x[mid + 1] - x[mid]:\n    #             x[mid] = x[mid] - 0.5\n    #         else:\n    #             x[mid] = x[mid] + 0.5\n    #     print(x[mid])\n    #     return\n    #\n    # mid = (l // 2)\n    # if k - mid == 1:\n    #     if x[mid] < 0.5:\n    #         x[mid] = x[mid] + 0.5\n    #     else:\n    #         x[mid] = x[mid] - 0.5\n    #     print(x[mid])\n    #     return\n    #\n    # if k - mid == 2:\n    #     if x[mid] - x[mid - 1] * (x[mid] + x[mid - 1]) < 0:\n    #         x[mid - 1] = x[mid - 1] - 0.5\n    #     else:\n    #         x[mid - 1] = x[mid - 1] + 0.5\n    #     if x[mid] - x[mid + 1] * (x[mid] + x[mid + 1]) < 0:\n    #         x[mid] = x[mid] - 0.5\n    #     else:\n    #         x[mid] = x[mid] + 0.5\n    #     print(x[mid])\n    #     return\n    #\n    # if k - mid == 3:\n    #     if x[mid] < x[mid - 1] and x[mid] < x[mid + 1]:\n    #         if x[mid] - x[mid - 1"
    },
    {
        "number": 258,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin.strip())\n    if n == 0:\n        return \"Bicarp\"\n    elif n == 1:\n        return \"Monocarp\"\n    elif n % 2!= 0:\n        return \"Bicarp\"\n    else:\n        ans = \"Bicarp\"\n        return ans"
    },
    {
        "number": 258,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ticket = stdin\n    while(len(ticket) % 2!= 0 or len(ticket) > 10**5):\n        ticket = ticket[::-1]\n    while(\"?\" in ticket):\n        ticket = \"\".join(ticket.split(\"?\")[::-1])\n    ticket = list(ticket)\n    count = 0\n    while(count < len(ticket)):\n        if(ticket[count] == \"?\"):\n            ticket[count] = \"0\"\n        else:\n            ticket[count] = \"9\"\n        count += 2\n    ticket = \"\".join(ticket)\n    ticket = int(ticket)\n    if(ticket > 2**9):\n        return \"Bicarp\"\n    else:\n        return \"Monocarp\"\n\n\nsolution(input())\n\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u0432\u0435\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u0435\u0433\u043e \u043d\u0430 \u044d\u043a\u0440\u0430\u043d \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 \u0447\u0438\u0441\u043b\u043e x, \u0433\u0434\u0435 x \u2014 \u0441\u0443\u043c\u043c\u0430 \u0446\u0438\u0444\u0440 \u0447\u0438\u0441\u043b\u0430.\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0432\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u0444\u0430\u0439\u043b\u0430 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u043e\u0434\u043d\u043e \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e n \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0446\u0438\u0444\u0440 \u0432 \u0447\u0438\u0441\u043b\u0435. \u0414\u0430\u043b\u0435\u0435 \u0432\u043e \u0432\u0445\u043e\u0434\u043d\u043e\u043c \u0444\u0430\u0439\u043b\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442\u0441\u044f \u0435\u0449\u0435 n \u0441\u0442\u0440\u043e\u043a, \u0432 \u043a\u0430\u0436\u0434\u043e\u0439 \u0438\u0437 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u0430 \u0441\u0442\u0440\u043e\u043a\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e x. \u0417\u0430\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0435 \u0446\u0435\u043b\u044b\u0435 \u0447\u0438\u0441\u043b\u0430 \u043d\u0435 \u043f\u0440\u0435\u0432\u043e\u0441\u0445\u043e\u0434\u044f\u0442 106.\n\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n\u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d \u043e\u0434\u043d\u043e \u0447\u0438\u0441\u043b\u043e \u2014 \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e x, \u0433\u0434\u0435 x \u2014 \u0441\u0443\u043c\u043c\u0430 \u0446\u0438\u0444\u0440 \u0447\u0438\u0441\u043b\u0430.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435 1. \u041f\u0440\u0438 \u0432\u0432\u043e\u0434\u0435 \u0432\u0435\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0432\u0432\u043e\u0434\u0438\u0442 \u0432\u0435\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u0435 \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e, \u0430 \u043e\u0431\u0440\u0430\u0442\u043d\u043e, \u0442\u043e\u043b\u044c\u043a\u043e \u0447\u0438\u0441\u043b\u043e \u0441 \u043f\u043b\u0430\u0432\u0430\u044e\u0449\u0435\u0439 \u0442\u043e\u0447\u043a\u043e\u0439. \u0414\u0430\u043d\u043d\u044b\u0439 \u0441\u0447\u0435\u0442 \u043d\u0435 \u0434\u043e\u043b\u0436\u0435\u043d \u043f\u0440\u0435\u0432\u044b\u0441\u0438\u0442\u044c 106.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435 2. \u0421\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u044b\u0439 \u043a\u043e\u0434:\n\nprint(solution(input()))\n\n2.7.\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u043e\u0434\u043d\u043e \u0447\u0438\u0441\u043b\u043e \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d \u0441\u0443\u043c\u043c\u0443 \u0432\u0441\u0435\u0445 \u0446\u0438\u0444\u0440 \u0432 \u044d\u0442\u043e\u043c \u0447\u0438\u0441\u043b\u0435, \u043a\u0440\u0430\u0442\u043d\u044b\u0445 \u0442\u0435\u043c. \u0427\u0438\u0441\u043b\u0430 \u0438\u0434\u0443\u0442 \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044f.\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u0451\u0442\u0441\u044f \u043e\u0434\u043d\u043e \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e.\n\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n\u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d \u0441\u0443\u043c\u043c\u0443 \u0432\u0441\u0435\u0445 \u0446\u0438\u0444\u0440 \u0432 \u0447\u0438\u0441\u043b\u0435, \u043a\u0440\u0430\u0442\u043d\u044b\u0445 \u0442\u0435\u043c.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435 1. \u0421\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u044b\u0439 \u043a\u043e\u0434:\n\nprint(sum_of_digit(int(input())))\n\n2.8.\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u0434\u0432\u0430 \u0447\u0438\u0441\u043b\u0430 \u0432 \u043e\u0442\u0440\u0435\u0437\u043a\u0435 \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d \u0441\u0443\u043c\u043c\u0443 \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b \u043d\u0430 \u043e\u0442\u0440\u0435\u0437\u043a\u0435, \u043a\u0440\u0430\u0442\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u043c \u043e\u0431\u0430"
    },
    {
        "number": 258,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ticket = stdin[1]\n    if \"?\" in ticket:\n        return \"Bicarp\"\n    ticket = ticket.replace(\"?\", \"\")\n    ticket = list(ticket)\n    ticket.sort()\n    # We have to subtract 1 because if we add 1, we can't reach the middle\n    # digit\n    middle = int((n / 2) - 1)\n    sum_odd = sum(ticket[:middle])\n    sum_even = sum(ticket[middle:])\n    if sum_odd == sum_even:\n        return \"Bicarp\"\n    else:\n        return \"Monocarp\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 258,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ticket = stdin\n    # For the first turn, the player is Monocarp.\n    # For the second turn, the player is Bicarp.\n    # The players alternate between each other, alternating until the game ends.\n    while True:\n        # Iterate over every digit in the ticket.\n        for i in range(0, n, 2):\n            if ticket[i] == '?':\n                # If there is a question mark, swap it with a new digit.\n                ticket = ticket[:i] + ticket[i+1] + ticket[i+2:]\n                break\n        else:\n            # No question mark was found, so the ticket is not happy.\n            # The winner is Monocarp.\n            return \"Monocarp\"\n        # Iterate over every digit in the ticket.\n        for i in range(1, n, 2):\n            if ticket[i] == '?':\n                # If there is a question mark, swap it with a new digit.\n                ticket = ticket[:i] + ticket[i+1] + ticket[i+2:]\n                break\n        else:\n            # No question mark was found, so the ticket is not happy.\n            # The winner is Bicarp.\n            return \"Bicarp\"\n        # Iterate over every digit in the ticket.\n        for i in range(0, n, 2):\n            if ticket[i] == '?':\n                # If there is a question mark, swap it with a new digit.\n                ticket = ticket[:i] + ticket[i+1] + ticket[i+2:]\n                break\n        else:\n            # No question mark was found, so the ticket is not happy.\n            # The winner is Monocarp.\n            return \"Monocarp\"\n    return \"Bicarp\"\n\nsolution(\"4\") == \"Bicarp\"\nsolution(\"2\") == \"Bicarp\"\nsolution(\"8\") == \"Bicarp\"\nsolution(\"6\") == \"Monocarp\"\n"
    },
    {
        "number": 258,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t_a,t_b = stdin.splitlines()\n    a,b = t_a.split(),t_b.split()\n    a,b = list(map(int,a)),list(map(int,b))\n    if sum(a)%2==0 and sum(b)%2==0:\n        if a==b:\n            return \"Bicarp\"\n        else:\n            return \"Monocarp\"\n    elif sum(a)%2==0 and sum(b)%2!=0:\n        return \"Monocarp\"\n    elif sum(a)%2!=0 and sum(b)%2==0:\n        return \"Bicarp\"\n    else:\n        return \"Bicarp\"\n\nprint(solution(stdin))\n\n\n\ndef"
    },
    {
        "number": 258,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # print(stdin)\n    n = int(stdin.split()[0])\n    if n == 1:\n        return \"Monocarp\"\n    if n == 2:\n        return \"Bicarp\"\n    t = stdin.split()\n    l = len(t)\n    i = 0\n    # print(l)\n    while i < l:\n        if i % 2 == 0:\n            if t[i]!= \"?\":\n                return \"Bicarp\"\n            i = i + 1\n            continue\n        if t[i]!= \"?\":\n            t[i] = int(t[i])\n            break\n        i = i + 1\n    for i in range(n):\n        t[i] = str(t[i])\n    if n == 2:\n        if int(t[0]) == int(t[1]):\n            return \"Bicarp\"\n        else:\n            return \"Monocarp\"\n    # print(t)\n    # print(l)\n    # print(i)\n    if n == 4:\n        if int(t[0]) + int(t[2]) == int(t[4]):\n            return \"Bicarp\"\n        else:\n            return \"Monocarp\"\n    if n == 6:\n        if int(t[0]) + int(t[4]) == int(t[2]):\n            return \"Bicarp\"\n        else:\n            return \"Monocarp\"\n    if n == 8:\n        if int(t[0]) + int(t[2]) == int(t[4]) and int(t[0]) + int(t[6]) == int(t[8]):\n            return \"Bicarp\"\n        else:\n            return \"Monocarp\"\n\n\ndef"
    },
    {
        "number": 258,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ticket = stdin\n    p1, p2 = \"\", \"\"\n    for i in range(n):\n        if ticket[i] == \"?\":\n            ticket = ticket[:i] + \"0\" + ticket[i + 1:]\n        if ticket[-i - 1] == \"?\":\n            ticket = ticket[:-i - 1] + \"0\" + ticket[-i - 2::-1]\n    if eval(ticket) % 2 == 0:\n        p2 = \"Bicarp\"\n    else:\n        p1 = \"Monocarp\"\n    return p1 if eval(ticket) % 2 else p2\n"
    },
    {
        "number": 258,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    ticket = stdin.split()[1]\n    while \"?\" in ticket:\n        for i in range(0, n, 2):\n            if ticket[i] == \"?\":\n                ticket = ticket[:i] + str(int(ticket[i]) - 1) + ticket[i + 1 :]\n    return \"Bicarp\" if ticket.count(\"?\") % 2 == 0 else \"Monocarp\"\n"
    },
    {
        "number": 258,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def replace(ticket: str, position: int, digit: int):\n        ticket = list(ticket)\n        ticket[position] = str(digit)\n        return \"\".join(ticket)\n\n    while True:\n        ticket_str = stdin.readline().strip()\n        if not ticket_str:\n            break\n        ticket_str = replace(ticket_str, 0, 0)\n        ticket_str = replace(ticket_str, 1, 1)\n        ticket_str = replace(ticket_str, 2, 2)\n        ticket_str = replace(ticket_str, 3, 3)\n        ticket_str = replace(ticket_str, 4, 4)\n        ticket_str = replace(ticket_str, 5, 5)\n        ticket_str = replace(ticket_str, 6, 6)\n        ticket_str = replace(ticket_str, 7, 7)\n        ticket_str = replace(ticket_str, 8, 8)\n        ticket_str = replace(ticket_str, 9, 9)\n\n        if eval(ticket_str) % 2 == 0:\n            print(\"Bicarp\")\n            break\n        print(\"Monocarp\")\n\n\nsolution(None)\n"
    },
    {
        "number": 258,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ticket = stdin[1:n // 2]\n    erased = stdin[n // 2:]\n    t = []\n    for i in range(n // 2):\n        t.append(ticket[i])\n        t.append(erased[i])\n    return \"Bicarp\" if sum(t) == sum(erased) else \"Monocarp\"\n\n\nprint(solution(input()))"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n, t = list(map(int, lines[0].split()))\n    buses = []\n    for i in range(1, n + 1):\n        buses.append((i, int(lines[i])))\n    ans = \"\"\n    for i, (s, d) in enumerate(buses):\n        if s <= t <= d:\n            ans = str(i + 1)\n            break\n    return ans\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.strip().split())\n    times = []\n    for i in range(n):\n        times.append(list(map(int, stdin.strip().split())))\n\n    times.sort(key=lambda x: x[0])\n    bus = []\n    for i in range(len(times)):\n        if times[i][0] <= t:\n            bus.append(times[i])\n        else:\n            break\n\n    if len(bus) == 0:\n        return -1\n    else:\n        bus.sort(key=lambda x: x[1])\n        answer = bus[0][1]\n        for i in range(1, len(bus)):\n            if bus[i][1] == answer + 1:\n                continue\n            else:\n                answer = bus[i][1]\n        return answer"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    times = list(map(int, stdin.split()))\n    times = sorted(times)\n\n    # todo: cuz i dido it, i didn't call the second time, but i did call it, what happend?\n    # t = list(set(times) & set(times[1:]))\n    # t = times[1:]\n    # print(times)\n    # print(times[0])\n\n    while len(times) > 0:\n        if times[0] >= t:\n            # print(times)\n            print(times.pop(0))\n            return\n        else:\n            times = times[1:]\n    print(\"-1\")\n\nsolution('''5 6\n2 2\n2 3\n2 4\n\n7 7\n3 3\n3 4\n3 5\n3 6\n\n7 7\n3 3\n3 4\n3 5\n3 6\n\n9 9\n2 2\n2 3\n2 4\n\n11 11\n2 2\n2 3\n2 4\n\n''')\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, t = list(map(int, stdin.split()))\n    s = []\n    d = []\n    for i in range(n):\n        s.append(int(input()))\n        d.append(int(input()))\n    s.sort()\n    d.sort()\n    \n    for i in range(n):\n        if s[i] - t < 0:\n            break\n        if s[i] + d[i] > t:\n            continue\n        else:\n            return str(i + 1)\n    \n    return str(s.index(s[n - 1] - t) + 1)\n    \n    \n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split()\n    t = int(inputs[0])\n    n = int(inputs[1])\n    i = 0\n    final = []\n    for i in range(0, n):\n        inputs = stdin.split()\n        a, b = int(inputs[0]), int(inputs[1])\n        if (b - a) % t == 0:\n            final.append(i+1)\n    print(final)\n    return final"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    stdin = list(map(int, stdin.split()))\n    stdin.sort()\n    cur_time = stdin[0]\n    cur_time = cur_time % t\n    i = 1\n    min_time = 99999\n    while i < n:\n        cur_time += stdin[i]\n        if cur_time >= t:\n            cur_time -= stdin[i]\n            i += 1\n            if cur_time < min_time:\n                min_time = cur_time\n            else:\n                break\n        else:\n            cur_time = cur_time % t\n            i += 1\n            if cur_time < min_time:\n                min_time = cur_time\n    if cur_time > 0:\n        return cur_time\n    return -1\nprint(solution(\"2 2\"))\nprint(solution(\"5 5\"))\nprint(solution(\"3 7\"))\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    if n == 1:\n        return str(t % 10)\n    s = [(t % 60) // i for i in range(1, 10)]\n    results = []\n    for i in range(n):\n        print(s)\n        results.append(list(map(int, stdin.split())))\n    return\n\nprint(solution(input()))\n\n\ndef"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Runs through the input, sorts them, and returns a string of the answer.\n    '''\n    all_buses = []\n    for i in range(int(stdin[0])):\n        all_buses.append([int(x) for x in stdin[i*2+1].split()])\n    all_buses.sort()\n    return str(all_buses[0][0])\n\nprint(solution(input_lines))\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, t = (int(x) for x in stdin.split())\n    bus_routes = []\n    for i in range(n):\n        bus_routes.append((i + 1, int(stdin.split()[i * 2 + 1])))\n    bus_routes.sort(key=lambda x: x[1])\n    intervals = []\n    previous_time = 0\n    for i in range(len(bus_routes)):\n        intervals.append(previous_time + bus_routes[i][1] - previous_time)\n        previous_time += bus_routes[i][1]\n    return bus_routes[intervals.index(min(intervals))][0]\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, k = map(int, stdin.split())\n    n = 1\n    while True:\n        if all((x+n) % 2!= k for x in range(1, n+1)):\n            return str(n)\n        n += 1\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    m, k = map(int, stdin.split())\n    n = 1\n    while True:\n        count = 0\n        s = str(n)\n        for i in s:\n            count += int(i)\n        if count == m and len(s) - k <= 0:\n            print(n)\n            break\n        n += 1\n    return \"\""
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    k = int(stdin.split()[1])\n    return bin(n + 1)[2:]\n\nprint(solution(input()))\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    m, k = map(int, stdin.split())\n    return m + k\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin)\n    k = int(stdin)\n    return search(m,k)\n    \ndef"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    m, k = int(stdin[0]), int(stdin[1])\n    ans = 0\n    for i in range(1,m):\n        if 2**i>=m:\n            ans+=1\n            break\n    for i in range(1,m):\n        if (2**i)%m>=m:\n            ans+=1\n            break\n    for i in range(1,m):\n        if (2**i)//m>=m:\n            ans+=1\n            break\n    print(ans)\n    return ans\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This is the solution running on leetcode.\n    \"\"\"\n    m, k = map(int, stdin.split())\n    a = 1\n    if a % 2 == 1:\n        return -1\n    while a < 2*m:\n        b = a\n        c = a\n        d = b\n        e = d\n        f = c\n        g = e\n        while True:\n            if (b % 2 == 0) & (e % 2 == 1):\n                break\n            else:\n                b += 1\n                e += 1\n                f = e\n                g = b\n        if (d % 2 == 0) & (f % 2 == 1):\n            break\n        else:\n            d += 1\n            f += 1\n            e += 1\n            g += 1\n            b += 1\n            f += 1\n            g += 1\n        while True:\n            if (b % 2 == 1) & (e % 2 == 0):\n                break\n            else:\n                b += 1\n                e += 1\n                f = e\n                g = b\n        if (d % 2 == 1) & (f % 2 == 0):\n            break\n        else:\n            d += 1\n            f += 1\n            e += 1\n            g += 1\n            b += 1\n            f += 1\n            g += 1\n    n = b + (e - f) + (g - h)\n    n = str(n)\n    if len(n)!= k:\n        n = \"0\" * (k - len(n)) + n\n    print(n)\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    _, m, k = stdin.split()\n    n = 1\n    while m * n + 1 < n * (n + 1) / 2:\n        n += 1\n    if (n + 1) % 2 == 0 and int(k) < 1:\n        return n\n    if (n + 1) % 2 == 0 and int(k) > 0:\n        return n\n    if (n + 1) % 2 == 1 and int(k) > 0:\n        return n\n    return n + 1"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    arr = list(stdin.split())\n    n = int(arr[0])\n    k = int(arr[1])\n    count = 0\n    for i in range(1, 100000000):\n        if(len(str(i)) == k):\n            if(k == 2 and i == 1 or k == 3 and i == 1 or k == 4 and i == 1 or k == 5 and i == 1):\n                count += 1\n            else:\n                temp = bin(i)\n                temp = temp[2:]\n                while(len(temp) < k):\n                    temp = \"0\" + temp\n                if(int(temp) == i):\n                    count += 1\n            if(count == n):\n                return i"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin)\n  scheme = stdin\n  if n == 1:\n    return \"yes\" if scheme[0] == \".\" else \"no\"\n  h = []\n  l = []\n  for i in range(1, n + 1):\n    if scheme[i - 1] == \"*\":\n      h.append(i)\n    else:\n      l.append(i)\n  l.append(n + 1)\n  for i in range(1, len(l)):\n    if l[i] - l[i - 1]!= h[i] - h[i - 1]:\n      return \"no\"\n  return \"yes\"\n\ndef"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return 'yes' if is_good_level(stdin) else 'no'\n\n\ndef"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lst = stdin.split()\n    for i in range(int(lst[0])):\n        if i == 0:\n            if len(lst[1])!= len(lst[1][1:]):\n                return \"no\"\n            else:\n                continue\n        if len(lst[1]) - i == i:\n            if lst[1][i] == \"*\" and lst[1][i+1] == \"*\":\n                return \"no\"\n            elif lst[1][i] == \"*\":\n                continue\n            elif lst[1][i+1] == \"*\":\n                continue\n            else:\n                return \"no\"\n        elif lst[1][i] == \"*\" and lst[1][i+1] == \"*\":\n            if lst[1][i+2] == \"*\":\n                if lst[1][i+3] == \"*\":\n                    if lst[1][i+4] == \"*\":\n                        if lst[1][i+5] == \"*\":\n                            return \"no\"\n                        else:\n                            continue\n                    else:\n                        continue\n                else:\n                    continue\n            else:\n                continue\n        elif lst[1][i] == \"*\":\n            continue\n        else:\n            continue\n    return \"yes\"\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    return stdout"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    platforms, n = stdin.splitlines()\n    platforms = [char for char in platforms]\n    if len(platforms) <= 2:\n        return 'no'\n    for i in range(1, len(platforms)-1):\n        if len(platforms) <= 4:\n            return 'no'\n        if platforms[i - 1] == '*':\n            if platforms[i] == '*':\n                if platforms[i + 1] == '*':\n                    if platforms[i + 2] == '*':\n                        if platforms[i + 3] == '*':\n                            if platforms[i + 4] == '*':\n                                if platforms[i - 4] == '*':\n                                    return 'no'\n                                else:\n                                    return 'yes'\n                            else:\n                                return 'no'\n                        else:\n                            return 'no'\n                    else:\n                        return 'no'\n                else:\n                    return 'no'\n            else:\n                return 'no'\n        else:\n            return 'no'"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    levels = stdin[0].split(\".\")\n    good = True\n    for i in range(1, len(levels)):\n        curr = levels[i]\n        prev = levels[i-1]\n        for j in range(4):\n            if (j == 3 and curr == prev):\n                good = False\n                break\n            prev = curr\n            curr = curr[:-1] + str((int(curr[-1]) + int(j)) % 3)\n        if good == False:\n            break\n    return \"yes\" if good else \"no\"\nsolution(stdin)\nsolution(sys.stdin)\n\"\"\"\n\n\n\ndef"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    segments = stdin.split()\n    platforms = []\n    traps = []\n    for i in range(len(segments)):\n        if segments[i] == '*':\n            platforms.append(i)\n        elif segments[i] == '.':\n            traps.append(i)\n    if len(platforms) <= 2:\n        return 'no'\n    if len(platforms) == 4:\n        if len(platforms[0]) == len(platforms[2]) and len(platforms[1]) == len(platforms[3]) and platforms[2] - platforms[0] == platforms[3] - platforms[1]:\n            return 'yes'\n        elif len(platforms[0]) == len(platforms[1]) and len(platforms[0]) == len(platforms[3]) and platforms[1] - platforms[0] == platforms[2] - platforms[3]:\n            return 'yes'\n        else:\n            return 'no'\n    else:\n        if len(platforms[0]) == len(platforms[1]) and len(platforms[1]) == len(platforms[2]) and len(platforms[2]) == len(platforms[3]) and platforms[3] - platforms[2] == platforms[2] - platforms[1]:\n            return 'yes'\n        else:\n            return 'no'\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    segments = lines[1]\n    a = []\n    for i in range(n):\n        if segments[i] == '*':\n            a.append(i)\n        elif segments[i] == '.':\n            a.append(i)\n    a.sort()\n    if len(a) == 1:\n        return 'no'\n    if a[0] == a[1] + 1:\n        for i in range(1, len(a) - 1):\n            if a[i] - a[i - 1] == a[i + 1] - a[i]:\n                return 'no'\n        return 'yes'\n    return 'no'"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    _, n = stdin.split()\n    n = int(n)\n    lines = stdin.splitlines()\n    lines = lines[1:-1]\n    lines = list(map(lambda l: l[1:-1], lines))\n    if not lines:\n        return \"no\"\n    if len(lines) == 1 and lines[0] == \"*\" * n:\n        return \"yes\"\n    matrix = []\n    for line in lines:\n        matrix.append([l == \"*\" for l in line])\n    return \"no\" if not find_all_blocks(matrix) else \"yes\"\n\n\ndef"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  n = len(stdin)\n  if n < 4:\n    return \"no\"\n  # convert to array of segments\n  lines = stdin.split('\\n')\n  arr = [[0 for i in range(n+1)] for j in range(len(lines))]\n  for i, line in enumerate(lines):\n    arr[i][0] = 0\n    for j, c in enumerate(line):\n      arr[i][j+1] = c\n  for i in range(1, n):\n    arr[0][i] = 0\n  for i in range(1, n):\n    arr[0][i] = 1\n    for j in range(1, i):\n      arr[0][i] = max(arr[0][i], arr[0][j] + arr[j][i])\n  \n  for i in range(1, n):\n    arr[0][i] = 1\n    for j in range(1, i):\n      arr[i][i] = max(arr[i][i], arr[i][j] + arr[i-j][i])\n  \n  for i in range(1, n):\n    arr[0][i] = 1\n    for j in range(1, i):\n      arr[0][i] = max(arr[0][i], arr[i][i] + arr[i-j][i])\n  \n  for i in range(1, n):\n    arr[0][i] = 1\n    for j in range(1, i):\n      arr[0][i] = max(arr[0][i], arr[i][i] + arr[i-j][i])\n  \n  # construct final answer\n  for i in range(1, n):\n    if arr[0][i]!= arr[0][i-1]:\n      return \"no\"\n  return \"yes\"\n\nprint(solution(input()))\n\n'''\ndef"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    grid = [[int(j) for j in stdin.split()] for i in range(n)]\n    rows = {sum(row) for row in grid}\n    cols = {sum(row[i] for row in grid) for i in range(n)}\n    diags = {sum(grid[i][i] for i in range(n)), sum(grid[i][n - i - 1] for i in range(n))}\n    for i in range(min(rows), max(rows) + 1):\n        if i not in rows and i not in cols and i not in diags:\n            return str(i)\n    return \"-1\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    grid = [[int(x) for x in stdin.split('\\n')[i].split()] for i in range(n)]\n    # find a row sum that is divisible by its own row sum\n    # if no such row sum is divisible by that row sum, then there must be no solution\n    for i in range(n):\n        if sum(grid[i]) % sum(grid[i][:i]) == 0:\n            for j in range(n):\n                if grid[i][j] == 0:\n                    row_sum = sum(grid[i][:j])\n                    if row_sum % sum(grid[i][j+1:]) == 0:\n                        return str(row_sum)\n\n    # find a column sum that is divisible by its own column sum\n    # if no such column sum is divisible by that column sum, then there must be no solution\n    for j in range(n):\n        if sum(grid[j]) % sum(grid[j][:j]) == 0:\n            for i in range(n):\n                if grid[i][j] == 0:\n                    col_sum = sum(grid[i][:j])\n                    if col_sum % sum(grid[i][j+1:]) == 0:\n                        return str(col_sum)\n\n    # find a diagonal sum that is divisible by its own sum\n    # if no such diagonal sum is divisible by that diagonal sum, then there must be no solution\n    diag1_sum = sum([grid[i][i] for i in range(n)])\n    if diag1_sum % sum([grid[i][n - i] for i in range(n)]) == 0:\n        return str(diag1_sum)\n\n    diag2_sum = sum([grid[i][n - i - 1] for i in range(n)])\n    if diag2_sum % sum([grid[i][i] for i in range(n)]) == 0:\n        return str(diag2_sum)\n\n    return '-1'\n\nprint(solution(stdin))\n\nInput\n2\n3\n2 1 0\n2 2 3\n\nOutput\n-1\n\nInput\n4\n1 1 1 1\n1 1 0 1\n1 1 2 1\n1 1 1 1\n\nOutput\n1\n\nInput\n4\n1 1 1 1\n1 1 0 1\n1 1 2 1\n1 1 1 1\n\nOutput\n-1\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    grid = [[int(x) for x in stdin.split(\"\\n\")[i].split()] for i in range(n)]\n\n    # We need to go through each row and column and make sure that the sum of the numbers in each row, column, and the two long diagonals are equal\n    # print(sum(grid[0]) + sum(grid[-1]) + sum(grid[:, 0] + grid[:, -1]))\n    for i in range(n):\n        if sum(grid[i])!= sum(grid[i][::-1]) + sum(grid[:, i]) + sum(grid[:, i][::-1]):\n            return \"IMPOSSIBLE\"\n    for j in range(n):\n        if sum(grid[i][j] for i in range(n))!= sum(grid[i][j] for i in range(n)) + sum(grid[i][j] for i in range(n)) + sum(\n                grid[i][n - 1 - i + j] for i in range(n)):\n            return \"IMPOSSIBLE\"\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j]!= 0:\n                continue\n            for k in range(n):\n                if k!= i and k!= j and grid[i][k]!= 0 and grid[k][j]!= 0:\n                    return \"IMPOSSIBLE\"\n    return str(sum(x for row in grid for x in row) + (n - 1) * (n - 1))\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    grid = [[int(c) for c in stdin.split()] for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 0:\n                grid[i][j] = solve(i, j)\n                if grid[i][j] < 0:\n                    return '-1'\n    return ''.join(str(grid[i][j]) for i in range(n) for j in range(n))\n\n\ndef"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(n):\n        for j in range(n):\n            if sum([row[i], row[j], col[i], col[j], diag[i, j]])!= 15:\n                return str(-1)\n    return str(sum([row[i] for i in range(n)]) + sum([row[i] for i in range(n)]))"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    grid = [list(map(int, stdin.splitlines()[1])) for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 0:\n                for k in range(n):\n                    if grid[k][j]!= 0 and grid[i][k]!= 0 and grid[k][i]!= 0:\n                        if grid[k][i] + grid[i][k] + grid[k][j] == grid[i][j]:\n                            return str(grid[i][j])\n                return '-1'\n    return '-1'\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n'''\ndef"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    for i in range(n):\n        stdin.readline()\n        for j in range(n):\n            if stdin.readline() == '0':\n                return '-1'\n    sum = 0\n    for i in range(n):\n        sum += int(stdin.readline())\n    sum += int(stdin.readline())\n    sum += int(stdin.readline())\n    sum -= int(stdin.readline())\n    if sum == 0:\n        return '1'\n    else:\n        return '-1'"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    grid = [[int(x) for x in stdin.split()] for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 0:\n                grid[i][j] = 9\n                for k in range(n):\n                    grid[i][k] += grid[i][k]\n                for k in range(n):\n                    grid[k][j] += grid[k][j]\n                if i!= j:\n                    for k in range(n):\n                        grid[i][k] += grid[k][j]\n                for k in range(n):\n                    grid[i][n - k - 1] += grid[i][n - k - 1]\n                return str(grid[i][j])\n    return \"-1\"\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    grid = stdin.split('\\n')\n    n = int(grid[0])\n    rows = []\n    cols = []\n    diag = []\n    for i in range(n):\n        row = list(map(int, grid[i+1].split(' ')))\n        rows.append(row)\n        for j in range(n):\n            if row[j] == 0:\n                cols.append(0)\n            else:\n                cols.append(row[j])\n        diag.append(row[i])\n    diag.sort()\n    for i in range(n):\n        if rows[i][i]!= 0:\n            return '-1'\n        for j in range(n):\n            if rows[j][i]!= 0:\n                return '-1'\n    for i in range(n):\n        if cols[i]!= 0:\n            return '-1'\n        for j in range(n):\n            if cols[j]!= 0:\n                return '-1'\n    if diag[0]!= 0:\n        return '-1'\n    if diag[n-1]!= 0:\n        return '-1'\n    if rows.count(0) + cols.count(0) > n*n-1:\n        return '-1'\n    return str(sum(row) for row in rows)\n\"\"\"\n\n\n\n\ndef"
    },
    {
        "number": 263,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    m = int(stdin.split('\\n')[1])\n    a = list(map(int, stdin.split('\\n')[2].split()))\n    if n == 1:\n        return f\"{sum(a)} {max(a)} {sum(a)-max(a)}\"\n    kmin = min(a)\n    kmax = sum(a) - max(a)\n    return f\"{kmin} {kmax}\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 263,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [int(i) for i in stdin.split()]\n    a = sorted(a)\n    k = m + (n-1)\n    return '%d %d' % (k, k)\n"
    },
    {
        "number": 263,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = stdin.split()\n    n = int(n)\n    m = int(m)\n    k = 0\n    for i in range(1, n + 1):\n        a = int(stdin.split()[i])\n        if i <= k:\n            k = max(k, i + a)\n        else:\n            k = max(k, i + m)\n    print(k, k)\n    return\n"
    },
    {
        "number": 263,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    m = int(stdin.readline())\n    lst = list(map(int, stdin.readline().split()))\n    lst = sorted(lst)\n    min_k = max_k = lst[-1]\n    while m > 0:\n        lst.append(lst.pop(0))\n        m -= 1\n        min_k = max(lst[-1], min_k)\n        max_k = max(lst[0], max_k)\n    return str(min_k) + \" \" + str(max_k)\n\nsolution(\"\"\"\n4\n6\n1\n1\n1\n1\n\n\"\"\")\n\nsolution(\"\"\"\n1\n10\n5\n\n\"\"\")\n"
    },
    {
        "number": 263,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    _, n, m = stdin.split()\n    n = int(n)\n    m = int(m)\n    return f\"{min(n, max(m, max(int(x) for x in stdin.split())))} {max(n, max(m, max(int(x) for x in stdin.split())))}\""
    },
    {
        "number": 263,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Enter your code here\n    n = int(stdin.splitlines()[0])\n    m = int(stdin.splitlines()[1])\n    people = []\n    for i in range(1, n + 1):\n        people.append(int(stdin.splitlines()[i]))\n    # print(people)\n    # print(people)\n    # print(max(people))\n    # print(sum(people))\n    # print(len(people))\n    people_dict = dict(zip(range(1, n + 1), people))\n    # print(people_dict)\n    # print(people_dict)\n    # print(people_dict)\n    for _ in range(m):\n        # print(people_dict)\n        new_person = int(stdin.splitlines()[n + _])\n        # print(new_person)\n        for key in people_dict.keys():\n            # print(key)\n            # print(new_person)\n            if new_person < people_dict[key]:\n                people_dict[key] -= 1\n                break\n            elif new_person == people_dict[key]:\n                people_dict[key] -= 1\n                break\n        else:\n            people_dict[len(people_dict) + 1] = new_person\n    print(max(people_dict.values()), min(people_dict.values()))\n"
    },
    {
        "number": 263,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Read data from stdin\n    n, m = map(int, stdin.split())\n\n    # Create a new array for benches that are occupied\n    occupied = [0] * n\n\n    # Keep track of maximum chairs\n    max_chairs = 0\n\n    # Loop through all benches\n    for i in range(n):\n        # Read input\n        a = int(stdin)\n\n        # If there is still room in the new bench, increment the chairs in the new bench\n        if (a > 0):\n            occupied[i] += 1\n            max_chairs = max(max_chairs, occupied[i])\n\n        # Else if there isn't enough room, decrease the chairs in the new bench\n        else:\n            occupied[i] -= 1\n\n    # Initialize the minimum and maximum chairs\n    min_chairs = max_chairs\n    max_chairs = min_chairs\n\n    # Loop through all benches\n    for i in range(n):\n        # If there is enough room in the new bench, increment the chairs in the new bench\n        if (occupied[i] >= 1):\n            occupied[i] += 1\n            max_chairs = max(max_chairs, occupied[i])\n\n        # Else if there isn't enough room, decrease the chairs in the new bench\n        else:\n            occupied[i] -= 1\n            min_chairs = min(min_chairs, occupied[i])\n\n    # Return the minimum and maximum chairs\n    return f\"{min_chairs} {max_chairs}\"\n"
    },
    {
        "number": 263,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    people = list(map(int, stdin.split()))\n    result = people[0]\n    max_result = result\n    #print(people)\n    for i in range(1, n):\n        result += people[i]\n        if max_result < result:\n            max_result = result\n        if max_result > result:\n            result = max_result\n    print(result, max_result)\n\nsolution(\"3\")"
    },
    {
        "number": 263,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    m = int(stdin)\n    min, max = 1, 1\n    for a in range(1, n + 1):\n        if min > a:\n            min = a\n        elif max < a:\n            max = a\n    return f\"{min} {max}\"\n"
    },
    {
        "number": 263,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\nn = int(stdin)\nm = int(stdin)\n\npeople = list(map(int, stdin.split()))"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    print(solution_optimized(n, m))\n\ndef"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    stops = [i for i in range(1, n + 1)]\n\n    def is_valid(seat):\n        return seat in stops\n\n    def make_valid(seat):\n        if not is_valid(seat):\n            return False\n        else:\n            for i in range(seat):\n                if not is_valid(i):\n                    return False\n            return True\n\n    def find_valid_seat(seat, side):\n        if side == \"F\":\n            for i in range(seat, -1, -1):\n                if is_valid(i):\n                    return i\n            return -1\n        else:\n            for i in range(seat, n):\n                if is_valid(i):\n                    return i\n            return -1\n\n    def count_valid_seats(seats):\n        seat_count = 0\n        for i in range(n):\n            if is_valid(seats[i]):\n                seat_count += 1\n        return seat_count\n\n    def count_invalid_seats(seats):\n        seat_count = 0\n        for i in range(n):\n            if not is_valid(seats[i]):\n                seat_count += 1\n        return seat_count\n\n    def find_invalid_seats(seats):\n        invalid_seats = []\n        for i in range(n):\n            if not is_valid(seats[i]):\n                invalid_seats.append(seats[i])\n        return invalid_seats\n\n    def print_boarding_scheme(boarding_scheme):\n        for i in range(n):\n            if i in boarding_scheme:\n                print(\"{}F\".format(\"\" if i in boarding_scheme else \"B\"), end=\"\")\n            else:\n                print(\"B\", end=\"\")\n        print()\n\n    def print_seat_count(seat_count):\n        print(\"{}F\".format(\"\" if seat_count == 1 else \"B\") if seat_count > 1 else \"B\", end=\"\")\n\n    def print_invalid_seats(invalid_seats):\n        for i in range(n):\n            if i in invalid_seats:\n                print(\"{}F\".format(\"\" if i in invalid_seats else \"B\"), end=\"\")\n            else:\n                print(\"B\", end=\"\")\n        print()\n\n    def print_boarding_scheme_with_invalid_seats(boarding_scheme, invalid_seats):\n        for i in range(n):\n            if i in boarding_scheme:\n                print(\"{}F\".format(\"\" if i in boarding_scheme else \"B\"), end=\"\")\n            elif i in invalid_seats:\n                print(\"{}F\".format(\"\" if i in invalid_seats else \"B\"), end=\"\")\n            else:\n                print(\"B\", end=\"\")\n        print()\n\n    def print_seat_count_with_invalid_seats(seat_count, invalid_seats):\n        print(\"{}F\".format(\"\" if seat_count == 1 else \"B\") if seat_count > 1 else \"B\", end=\"\")\n        for i in range(n):\n            if i in invalid_seats:\n                print(\"{}F\".format(\"\" if i in invalid_seats else \"B\"), end=\"\")\n            else:\n                print(\"B\", end=\"\")\n        print()\n\n    def get_seat_from_boarding_scheme(boarding_scheme, invalid_seats):\n        for i in range(n):\n            if i in boarding_scheme:\n                seat = i\n                break\n        for i in range(n):\n            if i in invalid_seats:\n                seat = i\n                break\n        return seat\n\n    def get_seat_count_from_boarding_scheme(boarding_scheme):\n        seat_count = 0\n        for i in range(n):\n            if i in boarding_scheme:\n                seat_count += 1\n        return seat_count\n\n    def get_invalid_seats_from_boarding_scheme(boarding_scheme):\n        invalid_seats = []\n        for i in range(n):\n            if i in boarding_scheme:\n                invalid_seats.append(i)\n        return invalid_seats\n\n    def get_seat_count_from_boarding_scheme_with_invalid_seats(boarding_scheme, invalid_seats):\n        seat_count = 0\n        for i in range(n):\n            if i in boarding_scheme:\n                seat_count += 1\n            elif i in invalid_seats:\n                seat_count += 1\n        return seat_count\n\n    def get_seat_count_from_boarding_scheme_with_invalid_seats_and_start_and_end(boarding_scheme, start, end):\n        seat_count = 0\n        for i in range(start, end + 1):\n            if i in boarding_scheme:\n                seat_count += 1\n        return seat_count\n\n    def get_invalid_seats_from_boarding_scheme_and_start_and_end(boarding_scheme, start, end):\n        invalid_seats = []\n        for i in range(start, end + 1):\n            if i in boarding_scheme:\n                invalid_seats.append(i)\n        return invalid_seats\n\n    def get_seat_count_from_boarding_scheme_with_invalid_seats_and_start_and_end(boarding_scheme, start, end):\n        seat_count = 0\n        for i in range(start, end + 1):\n            if i in boarding_scheme:\n                seat_count += 1\n        return seat_count\n\n    def get_boarding_scheme(seats):\n        boarding_scheme = []\n        for i in range(n):\n            if seats[i] == \"B\":\n                boarding_scheme.append(i)\n        return boarding_scheme\n\n    def get_invalid_seats(seats):\n        invalid_seats = []\n        for i in range(n):\n            if seats[i] == \"B\":\n                invalid_seats.append(i)\n        return invalid_seats\n\n    def get_seats_count(seats):\n        seat_count = 0\n        for i in range(n):\n            if seats[i] == \"B\":\n                seat_count += 1\n        return seat_count\n\n    def get_seat_count_with_invalid_seats(seats, invalid_seats):\n        seat_count = 0\n        for i in range(n):\n            if i in invalid_seats:\n                "
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    dp = [[0] * n for _ in range(n)]\n    # init empty seats at front and back\n    dp[0][0] = 1\n    dp[-1][-1] = 1\n    for i in range(1, n):\n        dp[i][0] = 1\n        dp[i][i] = 1\n    for i in range(1, n):\n        for j in range(1, n):\n            if i!= j:\n                dp[i][j] = dp[i-1][j] + dp[i][j-1]\n    ans = sum(dp[i][j] for i in range(n) for j in range(n))\n    return str(ans % (10 ** 9 + 7))\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n\n    # Create an array to keep track of seats\n    seats = [\"0\"] * (n + 2)\n\n    # Count the number of ways\n    # The number of ways is equal to the number of ways to assign seats (the number of ways is equal to the number of ways to assign seats multiplied by the number of seats occupied by passengers)\n    # We multiply the number of ways to assign seats because that is the number of ways to assign seats multiplied by the number of seats occupied by passengers\n    # The reason we multiply the number of ways to assign seats is because if we assign seats in any order, it is possible for the passengers to find their seat in the middle of the plane.\n    # If we always assign seats from the front entrance, the number of ways to assign seats multiplied by the number of seats occupied by passengers would be equal to the number of ways to assign seats multiplied by the number of seats occupied by passengers\n    # If we always assign seats from the back entrance, the number of ways to assign seats multiplied by the number of seats occupied by passengers would be equal to the number of ways to assign seats multiplied by (n-1)\n    # But if we assign seats from the front entrance, we need to count the number of ways to assign seats multiplied by the number of seats occupied by passengers.\n    # So we multiply the number of ways to assign seats multiplied by the number of seats occupied by passengers by the number of ways to assign seats multiplied by the number of seats occupied by passengers.\n    # If we assign seats from the back entrance, we need to count the number of ways to assign seats multiplied by the number of seats occupied by passengers.\n    # So we multiply the number of ways to assign seats multiplied by the number of seats occupied by passengers by the number of ways to assign seats multiplied by (n-1)\n    # If we assign seats from the front entrance, we need to count the number of ways to assign seats multiplied by the number of seats occupied by passengers.\n    # So we multiply the number of ways to assign seats multiplied by the number of seats occupied by passengers by the number of ways to assign seats multiplied by the number of seats occupied by passengers.\n    # The reason we multiply by the number of seats occupied by passengers is because for each passenger we need to know where they are.\n    # If we assign seats from the back entrance, we need to count the number of ways to assign seats multiplied by the number of seats occupied by passengers.\n    # So we multiply the number of ways to assign seats multiplied by the number of seats occupied by passengers by the number of ways to assign seats multiplied by (n-1)\n    # If we assign seats from the front entrance, we need to count the number of ways to assign seats multiplied by the number of seats occupied by passengers.\n    # So we multiply the number of ways to assign seats multiplied by the number of seats occupied by passengers by the number of ways to assign seats multiplied by the number of seats occupied by passengers.\n    # This is equivalent to dividing the number of ways to assign seats multiplied by the number of seats occupied by passengers by the number of ways to assign seats multiplied by the number of seats occupied by passengers by dividing the number of ways to assign seats multiplied by the number of seats occupied by passengers by the number of ways to assign seats multiplied by (n-1) by dividing the number of ways to assign seats multiplied by the number of seats occupied by passengers by the number of ways to assign seats multiplied by the number of seats occupied by passengers by multiplying the number of ways to assign seats multiplied by the number of seats occupied by passengers by the number of ways to assign seats multiplied by the number of seats occupied by passengers by dividing the number of ways to assign seats multiplied by the number of seats occupied by passengers by the number of ways to assign seats multiplied by (n-1) by multiplying the number of ways to assign seats multiplied by the number of seats occupied by passengers by the number of ways to assign seats multiplied by the number of seats occupied by passengers by summing all of these numbers.\n    # In the end, the number of ways to assign seats multiplied by the number of seats occupied by passengers will be equal to the number of ways to assign seats multiplied by the number of seats occupied by passengers divided by the number of ways to assign seats multiplied by the number of seats occupied by passengers by dividing the number of ways to assign seats multiplied by the number of seats occupied by passengers by the number of ways to assign seats multiplied by the number of seats occupied by passengers by dividing the number of ways to assign seats multiplied by the number of seats occupied by passengers by the number of ways to assign seats multiplied by the number of seats occupied by passengers by summing all of these numbers.\n\n    # Print the answer modulo 10^9 + 7\n    # Return a string\n    return str(seats[n] % (10**9 + 7))\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    passenger_dict = {f: [] for f in range(1, n + 1)}\n    for i in range(m):\n        p = list(map(int, stdin.split()))\n        passenger_dict[p[0]].append(p[1])\n    count = 0\n    for x, y in passenger_dict.items():\n        count += len(set(y)) * (len(set(y)) - 1) // 2\n    return count % 1000000007\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    def get_seat(p, f_or_b):\n        if p == 0:\n            return \"B\" if f_or_b == \"F\" else \"F\"\n        return \"F\" if f_or_b == \"F\" else \"B\"\n    #initialize seats_occupied\n    seats_occupied = set()\n    seats_available = set(range(1,n+1))\n    for _ in range(m):\n        #make seats available\n        seats_available.intersection_update(seats_occupied)\n        #add seats occupied to set\n        seats_occupied.update(seats_occupied)\n        seats_occupied.add(get_seat(len(seats_occupied)-1, \"F\"))\n        seats_occupied.add(get_seat(len(seats_occupied)-1, \"B\"))\n    print(len(seats_available))\n    return seats_available\n\nsolution(\"3 3\")\n\nsolution(\"10 3\")\n\nsolution(\"100 100\")\n\nsolution(\"1 1\")\n\nsolution(\"1 100\")\n\n\n\"\"\"\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    tickets = list(map(lambda x: x.split(\" \"), stdin.splitlines()))\n    tickets.sort(key=lambda x: (x[1], x[0]))\n    wins = [0] * 3\n\n    def win(seat):\n        wins[seat] += 1\n\n    def move(passenger, seat):\n        win(seat)\n        if passenger + 1 == tickets[passenger][0]:\n            move(passenger + 1, (seat - 1) % 3)\n        else:\n            move(passenger + 1, (seat + 1) % 3)\n\n    for passenger, seat in tickets:\n        move(passenger, seat)\n\n    return sum([wins[i] * (wins[i] - 1) // 2 for i in range(3)]) % (10 ** 9 + 7)\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(i) for i in stdin.split())\n    if n == 1:\n        if m == 1:\n            return 1\n        else:\n            return 0\n\n    def dfs(idx: int, n: int, m: int, d: int, tmp: list):\n        if idx == n:\n            return d\n        ans = 0\n        if idx == 0:\n            if m == 0:\n                ans = 0\n            else:\n                ans = dfs(idx+1, n, m-1, d+1, tmp)\n        else:\n            ans = dfs(idx-1, n, m, d, tmp)\n        return ans\n\n    return str(dfs(0, n, m, 0, []))\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    fav = list(map(int, stdin.split()))\n    price = list(map(int, stdin.split()))\n    pizza = {}\n    for p in range(m):\n        pizza[fav[p]] = price[p]\n\n    minimum = min(pizza)\n    answer = None\n    for f in range(1, minimum + 1):\n        for i in range(len(fav)):\n            if fav[i] == f:\n                continue\n            if not (f in pizza) or not (fav[i] in pizza):\n                break\n            else:\n                answer = f if answer is None else min(answer, f)\n\n    return str(answer)\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    sys.stdin = open(stdin)\n    input = lambda: sys.stdin.readline()\n    n, m = map(int, input().split())\n    friends = []\n    for _ in range(n):\n        fav = tuple(map(int, input().split()))\n        friends.append(fav)\n    pizza = []\n    for _ in range(m):\n        price = int(input())\n        ingredients = tuple(map(int, input().split()))\n        pizza.append((price, ingredients))\n    pizza.sort(key=lambda x: x[0])\n    pizza.sort(key=lambda x: x[1])\n    pref, res = 0, 0\n    for i in range(n):\n        pref += friends[i][0]\n        res = max(res, friends[i][1])\n        if pref <= res:\n            break\n    for i in range(n):\n        pref = pref - friends[i][0]\n        res = max(res, friends[i][1])\n        if pref <= res:\n            break\n    if pref <= res:\n        return 'N'\n    pref, res = 0, 0\n    for i in range(n):\n        pref += pizza[i][0]\n        res = max(res, pizza[i][1])\n        if pref <= res:\n            break\n    for i in range(n):\n        pref = pref - pizza[i][0]\n        res = max(res, pizza[i][1])\n        if pref <= res:\n            break\n    if pref <= res:\n        return 'N'\n    res = 0\n    for i in range(n):\n        if res + pizza[i][1][0] <= res + pizza[i][1][1]:\n            res += pizza[i][1][0]\n        else:\n            res += pizza[i][1][1]\n    res = 9 - res\n    if res >= n:\n        return 'N'\n    if res == 1:\n        return '1 2'\n    return '{} {}'.format(res, res + 1)\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    _, m, *inn = list(map(int, stdin.split()))\n    pizza = []\n    for i in range(1, m + 1):\n        pizza.append(list(map(int, stdin.split())))\n    best = 0, 0\n    for i in range(1, m + 1):\n        b = 0\n        for j in range(1, m + 1):\n            if i!= j:\n                fav = len(set(pizza[i][1:]) & set(pizza[j][1:]))\n                if fav > b:\n                    b = fav\n            pizza[j][0] = 1\n        if best[0] < b:\n            best = i, b\n    print(*best)\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    orders = []\n    pizzas = []\n    for i in range(m):\n        orders.append(list(map(int, stdin.split())))\n        pizzas.append([])\n    for i in range(m):\n        pizzas[i].append(i+1)\n        for j in range(i, m):\n            if orders[i][0] == 1:\n                break\n            if orders[j][0] == 1:\n                break\n            if orders[i][1] == orders[j][1]:\n                pizzas[i].append(j+1)\n    best = list(range(m))\n    for i in range(m-2):\n        for j in range(i+1, m-1):\n            for k in range(j+1, m):\n                if not (pizzas[i] + pizzas[j] + pizzas[k] == best):\n                    break\n                if sum(pizzas[i]) + sum(pizzas[j]) + sum(pizzas[k]) <= n:\n                    if best == list(range(m)):\n                        best = i, j, k\n                    else:\n                        if sum(pizzas[i]) + sum(pizzas[j]) + sum(pizzas[k]) < sum(pizzas[best[0]]) + sum(pizzas[best[1]]) + sum(pizzas[best[2]]):\n                            best = i, j, k\n    return str(pizzas[best[0]]) +'' + str(pizzas[best[1]]) +'' + str(pizzas[best[2]])\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n, m = map(int, stdin.pop(0).split())\n    fav = {}\n    min = float('inf')\n    for i in range(n):\n        fav[i] = set()\n        fav[i] = set(map(int, stdin.pop(0).split()))\n    stdin = sorted([list(map(int, line.split())) for line in stdin])\n    for pizzas in stdin:\n        min = min(min, pizza_set_optimal_price(fav, pizzas))\n    return str(min)\n\ndef"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n\n    pizzas = []\n    for _ in range(m):\n        pizzas.append(list(map(int, stdin.split())))\n    pizzas.sort(key=lambda x: x[1], reverse=True)\n\n    for pizza in pizzas:\n        friend = pizza[0]\n        l = 0\n        r = n - 1\n        while l <= r:\n            mid = l + (r - l) // 2\n            if friend in pizza[1:]:\n                l = mid + 1\n            else:\n                r = mid - 1\n        if l == n:\n            pizza_2 = pizza[1:]\n            print(pizza_2[0], pizza_2[1])\n            return \" \".join(map(str, pizza_2))\n    return \" \".join(map(str, pizzas[0]))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    n, m = [int(n) for n in stdin[0].split(\" \")]\n    favorite = [[int(n) for n in stdin[i].split(\" \")] for i in range(1, m + 1)]\n    pizza = [[int(n) for n in stdin[i].split(\" \")] for i in range(m + 1, len(stdin))]\n    t = sum(pizza, [])\n\n    def helper(sol):\n        res = 0\n        for i in range(len(sol) - 1):\n            if sum(sol[i + 1:]) == 0:\n                res += t[i]\n            else:\n                break\n        return res\n\n    for f in favorite:\n        for p in pizza:\n            if f[0] not in p:\n                p.append(f[0])\n            else:\n                break\n        if helper(p) >= helper(favorite):\n            return \" \".join(map(str, p))\n\n\nprint(solution(input()))"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(x) for x in stdin.split())\n    favorite_ingredients = sorted([int(x) for x in stdin.split()[1:]])\n    pizzas = [[int(x) for x in stdin.split()[i * 3 + 1:i * 3 + 3]]\n              for i in range(m)]\n    pizzas.sort(key=lambda x: x[0])\n    pizzas.sort(key=lambda x: x[1])\n    best = 1 << 30\n    for pizza in pizzas:\n        ingredients = set(favorite_ingredients)\n        ingredients.update(pizza[2:])\n        if len(ingredients) <= best:\n            best = len(ingredients)\n            idx1, idx2 = pizza[0], pizza[1]\n    return f'{idx1} {idx2}'\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    stdin = list(map(int, stdin.split()))\n    arr = [[] for _ in range(n)]\n    for i in range(1, n + 1):\n        arr[i - 1] = list(map(int, stdin[i - 1].split()))\n    print(arr)\n    arr.sort(key=lambda x: x[1])\n    res = []\n    while len(res)!= 2:\n        for i in range(len(arr)):\n            if len(res) == 2:\n                break\n            if arr[i][1] > res[0][1]:\n                break\n            if arr[i][1] == res[0][1] and arr[i][2] == res[1][2]:\n                res += arr[i],\n    return str(res[0]) + \" \" + str(res[1])\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    # print(n, m)\n    favs = {}\n    for i in range(n):\n        favs[i] = list(map(int, stdin.split()[i * 2 + 1].split()))\n    # print(favs)\n    # print()\n\n    prices = {}\n    for i in range(m):\n        prices[i] = list(map(int, stdin.split()[i * 2 + 2].split()))\n    # print(prices)\n    # print()\n\n    max_total_price = 0\n    max_indices = None\n    for pizzas_with_same_ingredients in itertools.combinations(range(m), 2):\n        pizza_indices = (\n            [i for i in range(m) if i not in pizzas_with_same_ingredients],\n            [i for i in range(m) if i not in pizzas_with_same_ingredients],\n        )\n        pizza_prices = (\n            [prices[pizza_indices[0][i]] for i in range(len(pizza_indices[0]))],\n            [prices[pizza_indices[1][i]] for i in range(len(pizza_indices[1]))],\n        )\n        # print(pizza_indices, pizza_prices)\n        # print()\n        max_ingredient_price = 0\n        for i in range(len(pizza_indices[0])):\n            max_ingredient_price += pizza_prices[0][i]\n            max_ingredient_price += pizza_prices[1][i]\n        # print(max_ingredient_price)\n        # print()\n        if max_ingredient_price > max_total_price:\n            max_total_price = max_ingredient_price\n            max_indices = (\n                pizza_indices[0],\n                pizza_indices[1],\n            )\n\n    return \" \".join(map(str, max_indices))\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    numbers = stdin.split()\n    m = int(numbers[0])\n    s = int(numbers[1])\n\n    max_len = (s + 9) // 10\n    min_len = s // 10\n\n    if max_len == 0:\n        return \"0 0\"\n    max_number = max_len\n    min_number = min_len\n\n    if m > max_len:\n        while m > max_len:\n            max_number += 1\n            max_len = max_number\n        if max_len <= m:\n            max_number = max_len\n    if m < min_len:\n        while m < min_len:\n            min_number += 1\n            min_len = min_number\n        if min_len >= m:\n            min_number = min_len\n\n    if max_number == min_number:\n        return \"-1 -1\"\n\n    return str(min_number) + \" \" + str(max_number)\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin.split()[0])\n    s = int(stdin.split()[1])\n    return str(int(str(min([int(i) for i in range(m)])) + str(max([int(i) for i in range(m)]))[-m:]), s)"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    num = stdin.split()\n    m = int(num[0])\n    s = int(num[1])\n    if m >= 2 and 0 <= s <= 9:\n        n = 0\n        for i in range(m):\n            n += int(str(9)[i])\n        n = n * 10\n        if s == 0:\n            print(n)\n            print(n)\n        elif s < 0 or n < s:\n            print(-1,-1)\n        else:\n            print(n, n)\n    else:\n        print(-1,-1)\n    return\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    m, s = list(map(int, stdin.split()))\n    if 0 < m < s < 100:\n        return str(min(int(''.join(sorted(str(i), reverse=True))[:m]), int(''.join(sorted(str(i), reverse=True))[:m])) for i in range(1, 10001)) +'' + str(max(int(''.join(sorted(str(i), reverse=True))[:m]), int(''.join(sorted(str(i), reverse=True))[:m])) for i in range(1, 10001))\n    else:\n        return '-1 -1'"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    m, s = map(int, stdin.strip().split())\n    low = -1\n    high = -1\n    for i in range(1, 100):\n        if len(str(i)) == m:\n            sum = 0\n            for j in str(i):\n                sum += int(j)\n            if sum == s:\n                if high == -1:\n                    high = i\n                low = i\n    return str(low) + \" \" + str(high) if high!= -1 else \"-\" + \" \" + \"-\"\nprint(solution(input()))"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    nums = list(map(int, stdin.split()))\n    for i in range(nums[0]):\n        for j in range(nums[1]):\n            if i + j == nums[0]:\n                return str(i) +'' + str(j)\n    return \"-1 -1\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    m, s = list(map(int, stdin.split()))\n    l = []\n    for i in range(1, 10):\n        for j in range(1, 10):\n            if sum([int(x) for x in str(i)]) == m and sum([int(x) for x in str(j)]) == s:\n                l.append(i)\n                l.append(j)\n    if l:\n        return str(min(l)) + \" \" + str(max(l))\n    else:\n        return \"-1 -1\"\n\nsolution(input())"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def digit_sum(n):\n        return sum(int(i) for i in str(n))\n    nums = map(int, stdin.split(' '))\n    m, s = nums\n    if m == 0 or s == 0:\n        return '-1 -1'\n    else:\n        if s > 900:\n            return '-1 -1'\n        for i in range(m + 1):\n            if m > 0 and digit_sum(i) == s:\n                return str(i) +'' + str(i)\n        for i in range(m + 1):\n            if m > 0 and digit_sum(i) > s:\n                return str(i) +'' + str(i)\n    return '-1 -1'\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split()))\n    a, b = stdin\n    max_s, min_s = -1, -1\n    for i in range(a, b + 1):\n        if len(str(i)) == a:\n            s = sum(map(int, str(i)))\n            if s == b:\n                if min_s == -1 or s < min_s:\n                    min_s = s\n                max_s = i\n    if min_s == -1:\n        print(-1 - 1)\n    else:\n        print(min_s, max_s)"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.strip().split()\n    if int(n) > 100 or int(s) > 900:\n        return '-1 -1'\n    min_num = int(''.join(sorted(n, reverse=True)))\n    max_num = int(''.join(sorted(n)))\n    if min_num > max_num:\n        return '-1 -1'\n    else:\n        return str(min_num) +'' + str(max_num)\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    (l, r, k) = list(map(int, stdin.split()))\n    total = 0\n    for i in range(l, r+1):\n        tmp = str(i)\n        digit_sum = 0\n        for d in tmp:\n            if not d.isdigit():\n                break\n            digit_sum += int(d)\n        if digit_sum <= k:\n            total += i\n    return total\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    digit_counts = {}\n    \n    for i in range(10):\n        digit_counts[i] = 0\n        \n    for i in range(1,num+1):\n        for digit in str(i):\n            digit_counts[int(digit)] += 1\n    \n    for k in range(10):\n        if digit_counts[k] == 0:\n            continue\n        \n        num += k\n        \n        for i in range(10):\n            if digit_counts[i] == 0:\n                continue\n            else:\n                for j in range(digit_counts[i]):\n                    num += i\n                    \n    return str(num % 998244353)\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    l, r, k = stdin.split()\n    return str(int(l) + int(r) + int(l) * int(k) % 898244353)"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    l, r, k = map(int, stdin.split())\n    def is_valid(n):\n        s = str(n)\n        for i in range(len(s)):\n            if len(set(s[i:])) > k:\n                return False\n        return True\n    ans = 0\n    for i in range(l, r+1):\n        if is_valid(i):\n            ans += i\n    return str(ans % 998244353)\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    l, r, k = map(int, stdin.split())\n    nums = []\n    while r - l + 1 > 0:\n        nums.append(r - l)\n        l = l + 1\n    i = 0\n    while i < len(nums):\n        a = sum(nums[i:]) % 10**k\n        i = i + 1\n        nums.append(a)\n    return str(sum(nums))"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    For each input string return the sum of all numbers from $l$ to $r$ such that each number contains at most $k$ different digits.\n    \"\"\"\n\n    # read stdin\n    input_lines = stdin.splitlines()\n\n    # convert input to list of ints\n    nums = list(map(int, input_lines[0].split()))\n\n    # get the number of digits\n    k = nums[2]\n\n    # find the number of digits in each number\n    nums_by_digit = [0] * 10\n    for num in nums:\n        nums_by_digit[num % 10] += 1\n\n    # find the max number of digits\n    max_nums_by_digit = max(nums_by_digit)\n\n    # find the max number of digits of different numbers\n    max_nums_by_digit_each_number = max(nums_by_digit)\n    max_nums_by_digit_each_number_2 = max(nums_by_digit)\n\n    # find the number of digits of each number\n    nums_by_digit = list(map(int, input_lines[1].split()))\n    total_digits = 0\n    for i, num in enumerate(nums_by_digit):\n        total_digits += num\n\n    # check if the number of different digits are equal\n    if max_nums_by_digit == max_nums_by_digit_each_number:\n        print(int(nums[0]))\n        return\n\n    # check if the number of different digits are equal\n    if max_nums_by_digit == max_nums_by_digit_each_number_2:\n        print(int(nums[0]))\n        return\n\n    # calculate the modulo\n    modulo = 1\n\n    # sum of each digit\n    for num in nums:\n        modulo *= num\n\n    # to get the right answer\n    modulo = int(modulo / 10)\n\n    # sum of all numbers from $l$ to $r$ such that each number contains at most $k$ different digits\n    nums_sum = 0\n    for num in nums:\n        # for each digit of the number\n        for i in range(10):\n            # number for the digit\n            digit = i * (10 ** (max_nums_by_digit - nums_by_digit[i]))\n\n            # set the modulo\n            if digit % 10!= 0:\n                modulo = (modulo + digit) % 10\n\n        nums_sum += modulo\n\n    nums_sum = nums_sum % 10\n    print(nums_sum)\n\n    return\n\n\ndef"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    l, r, k = map(int, stdin.split())\n    number = l\n    i = 0\n    digits = []\n    for i in range(k):\n        digits.append(0)\n    while number < r:\n        if len(digits) < k:\n            number += 1\n        else:\n            digits = []\n            number += 1\n        while number > l:\n            number -= 1\n            for x in range(k):\n                digits.append(0)\n    for x in range(k):\n        digits.append(0)\n    number = l\n    while number < r:\n        while number > l:\n            number += 1\n            digits = []\n            for x in range(k):\n                digits.append(0)\n        for digit in range(k):\n            digits[digit] += 1\n        number += 1\n    return str(number)"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    l, r, k = map(int, stdin.split())\n    total = 0\n    for i in range(l, r+1):\n        string = str(i)\n        count = 0\n        for j in range(len(string)):\n            if string[j] not in set(string):\n                count += 1\n        if count <= k:\n            total += i\n    return str(total % 998244353)\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    l, r, k = map(int, stdin.split())\n    ans = 0\n    for i in range(l, r+1):\n        s = str(i)\n        print(s)\n        if len(set(s)) < k:\n            ans += i\n    return str(ans)\n\nprint(solution(input()))\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    l, r, k = (int(x) for x in stdin.split())\n    ans = 0\n    for i in range(l, r + 1):\n        ans += i\n        if len(set(str(i))) > k:\n            break\n    return str(ans % 1000000003)\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, d = map(int, stdin.split())\n    satin = list(map(int, stdin.split()))\n\n    def min_pack(satin):\n        l = []\n        for i in range(k):\n            l.append(min(satin))\n            satin.remove(min(satin))\n\n        return l\n\n    def max_pack(satin):\n        l = []\n        for i in range(k):\n            l.append(max(satin))\n            satin.remove(max(satin))\n\n        return l\n\n    satin = min_pack(satin)\n    satin = max_pack(satin)\n\n    satin = list(map(lambda x: abs(x), satin))\n\n    i = 0\n    while i < n:\n        if satin[i] + satin[i+1] <= d:\n            i += 2\n        else:\n            return 'NO'\n\n    return 'YES'\n\ndef"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k, d = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n\n    min_c = min(s)\n    max_c = max(s)\n\n    if abs(max_c - min_c) < d:\n        return 'YES'\n\n    for i in range(len(s)):\n        for j in range(i + 1, len(s)):\n            if abs(s[i] - s[j]) <= d:\n                return 'YES'\n\n    return 'NO'\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    [n, k, d] = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    a.sort()\n    maxdiff = 0\n    for i in range(0, len(a)):\n        if a[i] - a[i + 1] > maxdiff:\n            maxdiff = a[i] - a[i + 1]\n    if maxdiff > d:\n        return 'NO'\n    ans = True\n    cnt = 1\n    for i in range(0, len(a)):\n        if a[i] - a[i + 1] > d:\n            ans = False\n            break\n        if a[i] - a[i + 1] == d:\n            cnt += 1\n    return 'YES' if ans and cnt >= k else 'NO'\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k, d = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    for i in range(1, len(a)):\n        if abs(a[i] - a[i-1]) > d:\n            return \"NO\"\n    def check(a):\n        for i in range(len(a)-1):\n            if abs(a[i]-a[i+1]) > d:\n                return False\n        return True\n    if check(a) and k < sum(a):\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k, d = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    # using list comprehension\n    # l = [[a[i], i] for i in range(n)]\n    # print(l)\n    # l = sorted(l)\n    # print(l)\n\n    # using sort\n    # a = sorted(a)\n    # print(a)\n    # l = []\n    # for i in range(n):\n    #     l.append([a[i], i])\n    # print(l)\n    # l = sorted(l, key=lambda x: x[0])\n    # print(l)\n\n    # using sorted\n    # l = sorted(a, key=lambda x: x)\n    # print(l)\n    # sorted(a, key=lambda x: x, reverse=True)\n\n    # using sort with lambda\n    # l = sorted(a, key=lambda x: x)\n    # print(l)\n    # sorted(a, key=lambda x: x, reverse=True)\n\n    # sorted\n    # l = sorted(a)\n    # print(l)\n\n    # using sorted\n    # l = sorted(a, reverse=True)\n    # print(l)\n\n    # using sort with lambda\n    # l = sorted(a, reverse=True)\n    # print(l)\n\n    # using sorted\n    # l = sorted(a, reverse=True)\n    # print(l)\n\n    # using min\n    # l = sorted(a, reverse=True)\n    # print(l)\n    # print(min(l))\n\n    # using min\n    # l = sorted(a)\n    # print(l)\n    # print(min(l))\n\n    # using min\n    # l = sorted(a, reverse=True)\n    # print(l)\n    # print(min(l))\n\n    # using min with lambda\n    # l = sorted(a, reverse=True)\n    # print(l)\n    # print(min(l))\n\n    # using min with lambda\n    # l = sorted(a, reverse=True)\n    # print(l)\n    # print(min(l))\n\n    # using sorted\n    # l = sorted(a)\n    # print(l)\n    # print(min(l))\n\n    # using sorted\n    # l = sorted(a, reverse=True)\n    # print(l)\n    # print(min(l))\n\n    # using sorted with lambda\n    # l = sorted(a)\n    # print(l)\n    # print(min(l))\n\n    # using sorted with lambda\n    # l = sorted(a, reverse=True)\n    # print(l)\n    # print(min(l))\n\n    # using min with lambda\n    # l = sorted(a)\n    # print(l)\n    # print(min(l))\n\n    # using min with lambda\n    # l = sorted(a, reverse=True)\n    # print(l)\n    # print(min(l))\n\n    # using sorted\n    # l = sorted(a)\n    # print(l)\n    # print(min(l))\n\n    # using sorted\n    # l = sorted(a, reverse=True)\n    # print(l)\n    # print(min(l))\n\n    # using sorted with lambda\n    # l = sorted(a)\n    # print(l)\n    # print(min(l))\n\n    # using sorted with lambda\n    # l = sorted(a, reverse=True)\n    # print(l)\n    # print(min(l))\n\n    # using min with lambda\n    # l = sorted(a)\n    # print(l)\n    # print(min(l))\n\n    # using min with lambda\n    # l = sorted(a, reverse=True)\n    # print(l)\n    # print(min(l))\n\n    # using sorted\n    # l = sorted(a, reverse=True)\n    # print(l)\n    # print(min(l))\n\n    # using sorted\n    # l = sorted(a)\n    # print(l)\n    # print(min(l))\n\n    # using sorted\n    # l = sorted(a, reverse=True)\n    # print(l)\n    # print(min(l))\n\n    # using sorted with lambda\n    # l = sorted(a, reverse=True)\n    # print(l)\n    # print(min(l))\n\n    # using sorted with lambda\n    # l = sorted(a)\n    # print(l)\n    # print(min(l))\n\n    # using sorted with lambda\n    # l = sorted(a, reverse=True)\n    # print(l)\n    # print(min(l))\n\n    # using sorted\n    # l = sorted(a, reverse=True)\n    # print(l)\n    # print(min(l))\n\n    # using sorted\n    # l = sorted(a)\n    # print(l)\n    # print(min(l))\n\n    # using sorted with lambda\n    # l = sorted(a)\n    # print(l)\n    # print(min(l))\n\n    # using sorted with lambda\n    # l = sorted(a, reverse=True)\n    # print(l)\n    # print(min(l))\n\n    # using sorted\n    # l = sorted(a, reverse=True)\n    # print(l)\n    # print(min(l))\n\n    # using sorted\n    # l = sorted(a)\n    # print(l)\n    # print(min(l))\n\n    # using sorted\n    # l = sorted(a, reverse=True)\n    # print(l)\n    # print(min(l))\n\n    # using sorted with lambda\n    # l = sorted(a)\n    # print(l)\n    # print(min(l))\n\n    # using sorted with lambda\n    # l = sorted(a, reverse=True)\n    # print(l)\n    # print(min(l))\n\n    # using sorted\n    # l = sorted(a, reverse=True)\n    # print(l)\n    # print(min(l))\n\n    # using sorted\n    # l = sorted(a)\n    # print(l)\n    "
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k, d = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    # cnt_white = 0\n    # cnt_blue = 0\n    # cnt_red = 0\n    # cnt_green = 0\n    # cnt_orange = 0\n    # cnt_yellow = 0\n    # cnt_purple = 0\n    # cnt_black = 0\n    # cnt_gray = 0\n    # cnt_white_orange = 0\n    # cnt_white_yellow = 0\n    # cnt_white_purple = 0\n    # cnt_white_black = 0\n    # cnt_white_gray = 0\n    # cnt_white_blue = 0\n    # cnt_white_red = 0\n    # cnt_white_green = 0\n    # cnt_white_orange_purple = 0\n    # cnt_white_yellow_black = 0\n    # cnt_white_purple_red = 0\n    # cnt_white_black_orange = 0\n    # cnt_white_orange_purple_green = 0\n    # cnt_white_yellow_green = 0\n    # cnt_white_purple_yellow = 0\n    # cnt_white_black_purple = 0\n    # cnt_white_yellow_red = 0\n    # cnt_white_purple_red_green = 0\n    # cnt_white_black_red = 0\n    # cnt_white_orange_yellow = 0\n    # cnt_white_purple_yellow_green = 0\n    # cnt_white_red_green_black = 0\n    # cnt_white_purple_orange_black = 0\n    # cnt_white_red_black_orange = 0\n    # cnt_white_purple_orange_red = 0\n    # cnt_white_yellow_red_green = 0\n    # cnt_white_purple_yellow_green_black = 0\n    # cnt_white_black_red_purple = 0\n    # cnt_white_red_purple_orange = 0\n    # cnt_white_yellow_red_purple_green = 0\n    # cnt_white_purple_red_green_black = 0\n    # cnt_white_red_purple_black = 0\n    # cnt_white_black_purple_yellow = 0\n    # cnt_white_purple_yellow_green_red = 0\n    # cnt_white_black_purple_red = 0\n    # cnt_white_red_yellow_purple = 0\n    # cnt_white_purple_red_green_yellow = 0\n    # cnt_white_black_red_yellow_purple = 0\n    # cnt_white_yellow_purple_green_orange = 0\n    # cnt_white_purple_yellow_green_orange_red = 0\n    # cnt_white_black_yellow_orange_purple = 0\n    # cnt_white_purple_yellow_orange_black_red = 0\n    # cnt_white_yellow_purple_green_red_black = 0\n    # cnt_white_purple_yellow_green_red_black_orange = 0\n    # cnt_white_black_red_purple_yellow = 0\n    # cnt_white_red_purple_yellow_green_black = 0\n    # cnt_white_yellow_red_purple_green_black_orange = 0\n    # cnt_white_purple_yellow_red_green_black_orange_red = 0\n    # cnt_white_black_red_purple_orange_yellow = 0\n    # cnt_white_purple_red_orange_yellow_green_black = 0\n    # cnt_white_black_purple_red_yellow_green_orange = 0\n    # cnt_white_red_purple_orange_yellow_green_black = 0\n    # cnt_white_purple_red_yellow_orange_black_green = 0\n    # cnt_white_black_red_yellow_purple_green_orange = 0\n    # cnt_white_purple_black_red_yellow_orange_green_red = 0\n    # cnt_white_black_yellow_purple_orange_green_red_black = 0\n    # cnt_white_purple_yellow_orange_green_red_black_orange = 0\n    # cnt_white_purple_black_red_yellow_orange_green_red_orange = 0\n    # cnt_white_purple_black_red_yellow_orange_orange_red_green = 0\n    # cnt_white_black_yellow_purple_orange_orange_red_green_red = 0\n    # cnt_white_purple_black_red_yellow_orange_orange_red_green_orange = 0\n    # cnt_white_purple_yellow_black_red_orange_orange_red_green_red_red = 0\n    # cnt_white_black_red_yellow_purple_orange_orange_red_green_red_black = 0\n    # cnt_white_purple_red_green_yellow_orange_orange_red_green_black = 0\n    # cnt_white_black_purple_red_green_yellow_orange_orange_red_green_orange = 0\n    # cnt_white_purple_black_red_yellow_green_orange_orange_red_green_black_red = 0\n    # cnt_white_black_red_purple_yellow_green_orange_orange_red_green_yellow_orange = 0\n    # cnt_white_purple_black_red_yellow_green_orange_orange_red_green_yellow_orange_red = 0\n    # cnt_white_black_purple_red_yellow_green_orange_orange_red_green_yellow_red_orange = 0\n    # cnt_white_purple_black_red_yellow_green_orange_orange_red_green_yellow_red_black = 0\n    # cnt_white_black_purple_red_yellow_green_"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    [n, k, d] = map(int, stdin.split())\n    vals = list(map(int, stdin.split()))\n    if len(vals)!= n:\n        return \"NO\"\n    vals = sorted(vals, key=lambda x: x)\n    ans = \"NO\"\n    for i in range(n):\n        for j in range(i + 1, n):\n            if abs(vals[i] - vals[j]) <= d:\n                if (j - i) <= k:\n                    ans = \"YES\"\n                break\n    return ans\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k, d = map(int, stdin.split())\n    colors = list(map(int, stdin.split()))\n    colors = sorted(colors)\n    def can_pack(colors, k, d):\n        for i in range(len(colors)-1):\n            if abs(colors[i]-colors[i+1]) > d:\n                return False\n        if colors[0] - colors[-1] > d:\n            return False\n        return True\n\n    left = 0\n    right = len(colors)\n    while left < right:\n        mid = (left+right)//2\n        if can_pack(colors, mid, d):\n            right = mid\n        else:\n            left = mid + 1\n    return \"YES\" if left >= k else \"NO\"\n\n\n\nsolution(\"6 3 10\")\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k, d = list(map(int, stdin.split()))\n    num_of_pencils = n\n    saturations = sorted(list(map(int, stdin.split())))\n    max_diff_between_saturation = k + 1\n    box_size = n\n    box_size_to_put_pencils_into = 0\n    for i in range(n):\n        max_diff_between_saturation = max(max_diff_between_saturation, abs(saturations[i] - saturations[i + 1]))\n\n    for i in range(n):\n        box_size = box_size - 1\n        if box_size == 0:\n            box_size = num_of_pencils\n            num_of_pencils = 0\n        box_size_to_put_pencils_into = box_size_to_put_pencils_into + 1\n        if box_size_to_put_pencils_into > max_diff_between_saturation:\n            return \"NO\"\n\n    return \"YES\"\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''R!YBGRYBGRY\n   ... YBGRYBGRYBG\n   ... GBRYBGRYBG\n   ... YBGRYBGRYBG\n   ... ''')\n    '0 0 0 0'\n    >>> solution('''!RGYB\n   ... YBGRYBGRYBG\n   ... GBRYBGRYBG\n   ... YBGRYBGRYBG\n   ... ''')\n    '0 1 0 0'\n    >>> solution('''!GB!RG!Y!\n   ... YBGRYBGRYBG\n   ... GBRYBGRYBG\n   ... YBGRYBGRYBG\n   ... ''')\n    '1 1 1 1'\n    >>> solution('''!GBR!YB!\n   ... YBGRYBGRYBG\n   ... GBRYBGRYBG\n   ... YBGRYBGRYBG\n   ... ''')\n    '2 1 1 0'\n    \"\"\"\n    n_r, n_y, n_b, n_g = 0, 0, 0, 0\n    for i, c in enumerate(stdin):\n        if c == 'R':\n            n_r += 1\n        elif c == 'B':\n            n_b += 1\n        elif c == 'Y':\n            n_y += 1\n        else:\n            n_g += 1\n    return str(n_r) +'' + str(n_b) +'' + str(n_y) +'' + str(n_g)\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    blue, red, yellow, green = 0, 0, 0, 0\n    for el in stdin:\n        if el == 'B':\n            blue += 1\n        elif el == 'R':\n            red += 1\n        elif el == 'Y':\n            yellow += 1\n        else:\n            green += 1\n    return str(red) +'' + str(green) +'' + str(yellow) +'' + str(blue)\n\nprint(solution(input()))\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    garland = stdin\n    total = 0\n    for i in range(len(garland) - 3):\n        if garland[i]!= garland[i + 1]!= garland[i + 2]!= garland[i + 3]:\n            total += 1\n        if garland[i] == garland[i + 1]:\n            total += 1\n        if garland[i] == garland[i + 2]:\n            total += 1\n        if garland[i] == garland[i + 3]:\n            total += 1\n    return str(total)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split()\n    red = blue = yellow = green = 0\n\n    for i in range(0, len(lines), 4):\n        if lines[i]!= 'R' or lines[i + 1]!= 'B' or lines[i + 2]!= 'Y' or lines[i + 3]!= 'G':\n            return '-1'\n        if lines[i] == lines[i + 1] == lines[i + 2] == lines[i + 3]:\n            return '-1'\n        elif lines[i + 1] == lines[i + 2] == lines[i + 3]:\n            red += 1\n        elif lines[i] == lines[i + 1]:\n            blue += 1\n        elif lines[i] == lines[i + 2]:\n            yellow += 1\n        elif lines[i] == lines[i + 3]:\n            green += 1\n    return str(red) +'' + str(blue) +'' + str(yellow) +'' + str(green)\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('')\n    '0 0 0 0'\n    >>> solution('!RGYB')\n    '0 1 0 0'\n    >>> solution('!!!!YGRB')\n    '1 1 1 1'\n    >>> solution('!GB!RG!Y!')\n    '2 1 1 0'\n    \"\"\"\n    garland = stdin.replace('!', '')\n    garland = garland.replace('R', 'RB')\n    garland = garland.replace('Y', 'YB')\n    garland = garland.replace('G', 'GB')\n    garland = garland.replace('B', 'BB')\n    garland = garland.replace('!', '!B')\n    garland = garland.replace('R', 'R!')\n    garland = garland.replace('Y', 'Y!')\n    garland = garland.replace('G', 'G!')\n    garland = garland.replace('B', 'B!')\n    return garland.count('B') * garland.count('G') * garland.count('Y') * garland.count('R')\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    r = g = b = y = 0\n    for i in range(n):\n        if stdin[i] == 'R':\n            r += 1\n        elif stdin[i] == 'B':\n            b += 1\n        elif stdin[i] == 'Y':\n            y += 1\n        elif stdin[i] == 'G':\n            g += 1\n    return str(r) +'' + str(b) +'' + str(y) +'' + str(g)\n\nsolution(\"!RGYB\") #0 0 0 0\nsolution(\"RGYB\") #0 0 0 0\nsolution(\"!GB!RG!Y!\") #2 1 1 0\nsolution(\"!!!!YGRB\") #1 1 1 1\nsolution(\"!GB!RG!Y!\") #1 1 1 0"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\na = stdin.strip()"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    garland = stdin\n    red = 0\n    blue = 0\n    yellow = 0\n    green = 0\n    for i in garland:\n        if i == 'R':\n            red += 1\n        elif i == 'B':\n            blue += 1\n        elif i == 'Y':\n            yellow += 1\n        elif i == 'G':\n            green += 1\n    return str(red), str(blue), str(yellow), str(green)\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"\".join([f\"{x} {y} {z} {w}\" for x, y, z, w in zip(stdin[::4], stdin[1::4], stdin[2::4], stdin[3::4]) if x!= y and x!= z and x!= w and y!= z and y!= w and z!= w])\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    garland = stdin.rstrip()\n    colors = {'R': 0, 'B': 0, 'Y': 0, 'G': 0}\n    number_of_light_bulbs_for_each_color = [0, 0, 0, 0]\n\n    for i, current_symbol in enumerate(garland):\n        if i + 4 > len(garland):\n            break\n\n        if current_symbol == 'G':\n            if number_of_light_bulbs_for_each_color[0] == 4:\n                number_of_light_bulbs_for_each_color[0] = 0\n                number_of_light_bulbs_for_each_color[2] += 1\n                number_of_light_bulbs_for_each_color[3] += 1\n            else:\n                number_of_light_bulbs_for_each_color[0] += 1\n\n        elif current_symbol == 'B':\n            if number_of_light_bulbs_for_each_color[1] == 4:\n                number_of_light_bulbs_for_each_color[1] = 0\n                number_of_light_bulbs_for_each_color[3] += 1\n                number_of_light_bulbs_for_each_color[0] += 1\n            else:\n                number_of_light_bulbs_for_each_color[1] += 1\n\n        elif current_symbol == 'Y':\n            if number_of_light_bulbs_for_each_color[2] == 4:\n                number_of_light_bulbs_for_each_color[2] = 0\n                number_of_light_bulbs_for_each_color[0] += 1\n                number_of_light_bulbs_for_each_color[1] += 1\n            else:\n                number_of_light_bulbs_for_each_color[2] += 1\n\n        elif current_symbol == 'R':\n            if number_of_light_bulbs_for_each_color[3] == 4:\n                number_of_light_bulbs_for_each_color[3] = 0\n                number_of_light_bulbs_for_each_color[1] += 1\n                number_of_light_bulbs_for_each_color[2] += 1\n            else:\n                number_of_light_bulbs_for_each_color[3] += 1\n\n        if colors['R'] == 4 or colors['Y'] == 4 or colors['G'] == 4 or colors['B'] == 4:\n            break\n        colors[current_symbol] += 1\n\n    for color in colors.values():\n        if color!= 0:\n            return f'{color} {number_of_light_bulbs_for_each_color[0]} {number_of_light_bulbs_for_each_color[1]} {number_of_light_bulbs_for_each_color[2]} {number_of_light_bulbs_for_each_color[3]}'\n\n\nprint(solution(input()))"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = stdin.split()\n    N = int(N)\n    M = int(M)\n    passages = []\n    for i in range(1, N+1):\n        room = stdin.split()\n        a = int(room[0])\n        b = int(room[1])\n        passages.append((a,b))\n    #print(passages)\n    #print(N, M)\n    passages.sort()\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print(passages)\n    #print("
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    maze = [[0 for j in range(N + 1)] for i in range(N + 1)]\n    visited = []\n    visited_index = []\n    for i in range(M):\n        a, b = map(int, stdin.split())\n        maze[a][b] = 1\n        maze[b][a] = 1\n    paths = []\n    for i in range(N + 1):\n        if maze[1][i] == 1:\n            visited_index.append(i)\n            visited.append(1)\n    while len(visited)!= N:\n        visited = []\n        visited_index = []\n        for i in range(len(visited_index)):\n            if i!= len(visited_index) - 1:\n                for j in range(i + 1, len(visited_index)):\n                    if visited_index[i] == visited_index[j]:\n                        continue\n                    if maze[visited_index[i]][visited_index[j]] == 1:\n                        visited_index.append(visited_index[j])\n                        visited.append(visited_index[i])\n                        break\n            else:\n                visited_index.append(visited_index[0])\n                visited.append(visited_index[0])\n    paths_list = []\n    for i in range(len(visited_index)):\n        if i!= len(visited_index) - 1:\n            for j in range(i + 1, len(visited_index)):\n                if visited_index[i] == visited_index[j]:\n                    continue\n                if maze[visited_index[i]][visited_index[j]] == 1:\n                    paths_list.append([visited_index[i], visited_index[j]])\n        else:\n            paths_list.append([visited_index[i], visited_index[0]])\n    path_prob = 1\n    for i in range(len(paths_list)):\n        path_prob *= (1 - (1 / 2)) ** (paths_list[i][0] - 1)\n        path_prob *= (1 - (1 / 2)) ** (paths_list[i][1] - 1)\n    path_prob = path_prob ** 2\n    return f\"{path_prob:.20f}\""
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # return 0\n    pass"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    for i in range(1, N):\n        for j in range(i):\n            if i!= j:\n                passages = []\n                for k in range(1, N):\n                    if k!= i and k!= j:\n                        passages.append((k, i))\n                passages.append((i, N))\n                passages.append((j, N))\n                p = 1 / (2 * (N - 1))\n                for passage in passages:\n                    if passage[0]!= passage[1]:\n                        p = p * (1 - 1 / (2 * (N - 1)))\n                p = p * M\n                p = p / (2 * (N - 1))\n                p = p * (1 / (2 * (N - 1)))\n                if p > 1:\n                    p = 1\n                print(p)\n    return ''\n\n\ndef"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n, m = list(map(int, stdin[0].split()))\n    rooms = [[] for _ in range(n)]\n    for i in range(n-1):\n        s, t = list(map(int, stdin[2*i].split()))\n        rooms[s-1].append(t-1)\n        rooms[t-1].append(s-1)\n    takahashi_paths = []\n    for i in range(n):\n        takahashi_paths.append([0] * len(rooms))\n    akimoto_paths = []\n    for i in range(n):\n        akimoto_paths.append([0] * len(rooms))\n    for i in range(1, n):\n        for j in range(len(rooms[i])):\n            takahashi_paths[i][j] = len(rooms[i])\n            akimoto_paths[j][i] = len(rooms[i])\n    for i in range(len(rooms)):\n        for j in range(len(rooms)):\n            if i!= j:\n                takahashi_paths[i][j] = len(rooms[i]) + len(rooms[j])\n    # print(takahashi_paths)\n    # print(akimoto_paths)\n    total_paths = []\n    for i in range(m):\n        total_paths.append(len(rooms[1]))\n        for j in range(len(rooms)):\n            if i!= j:\n                total_paths[i] += akimoto_paths[i][j]\n    # print(total_paths)\n    return str(min(total_paths))\n    \nsolution(\"\"\"4 6\n1 4\n2 3\n1 3\n1 2\n3 4\n2 4\"\"\")\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(x) for x in stdin.split())\n    s1, t1 = list(map(int, stdin.split()))\n    s2, t2 = list(map(int, stdin.split()))\n\n    res = 0\n    paths = [[0]*(n+1) for _ in range(n+1)]\n\n    for i in range(n):\n        for j in range(i+1, n+1):\n            paths[i][j] = 1 if i!= j and (s1 == i or s2 == j) else 0\n    print(paths)\n\n    for i in range(n):\n        for j in range(i+1, n+1):\n            for k in range(j+1, n+1):\n                paths[i][j] += paths[j][k]\n                paths[i][j] += paths[i][k]\n    print(paths)\n\n    for i in range(n):\n        for j in range(i+1, n+1):\n            paths[i][j] = paths[i][j] * (paths[i][j] + paths[i][j]) * (paths[i][j] + paths[i][j])\n            paths[i][j] = paths[i][j] * (paths[i][j] + paths[i][j])\n    print(paths)\n\n    for i in range(n):\n        for j in range(i+1, n+1):\n            for k in range(j+1, n+1):\n                paths[i][j] += paths[j][k]\n                paths[i][j] += paths[i][k]\n                paths[i][j] = paths[i][j] * (paths[i][j] + paths[i][j])\n                paths[i][j] = paths[i][j] * (paths[i][j] + paths[i][j])\n    print(paths)\n\n    for i in range(n):\n        for j in range(i+1, n+1):\n            paths[i][j] = paths[i][j] * (paths[i][j] + paths[i][j])\n            paths[i][j] = paths[i][j] * (paths[i][j] + paths[i][j])\n    print(paths)\n\n    for i in range(n):\n        for j in range(i+1, n+1):\n            for k in range(j+1, n+1):\n                paths[i][j] += paths[j][k]\n                paths[i][j] += paths[i][k]\n    print(paths)\n\n    for i in range(n):\n        for j in range(i+1, n+1):\n            paths[i][j] = paths[i][j] * (paths[i][j] + paths[i][j])\n            paths[i][j] = paths[i][j] * (paths[i][j] + paths[i][j])\n    print(paths)\n\n    for i in range(n):\n        for j in range(i+1, n+1):\n            paths[i][j] = paths[i][j] * (paths[i][j] + paths[i][j])\n            paths[i][j] = paths[i][j] * (paths[i][j] + paths[i][j])\n    print(paths)\n\n    for i in range(n):\n        for j in range(i+1, n+1):\n            paths[i][j] = paths[i][j] * (paths[i][j] + paths[i][j])\n            paths[i][j] = paths[i][j] * (paths[i][j] + paths[i][j])\n    print(paths)\n\n    for i in range(n):\n        for j in range(i+1, n+1):\n            paths[i][j] = paths[i][j] * (paths[i][j] + paths[i][j])\n            paths[i][j] = paths[i][j] * (paths[i][j] + paths[i][j])\n    print(paths)\n\n    for i in range(n):\n        for j in range(i+1, n+1):\n            paths[i][j] = paths[i][j] * (paths[i][j] + paths[i][j])\n            paths[i][j] = paths[i][j] * (paths[i][j] + paths[i][j])\n    print(paths)\n\n    for i in range(n):\n        for j in range(i+1, n+1):\n            paths[i][j] = paths[i][j] * (paths[i][j] + paths[i][j])\n            paths[i][j] = paths[i][j] * (paths[i][j] + paths[i][j])\n    print(paths)\n\n    for i in range(n):\n        for j in range(i+1, n+1):\n            paths[i][j] = paths[i][j] * (paths[i][j] + paths[i][j])\n            paths[i][j] = paths[i][j] * (paths[i][j] + paths[i][j])\n    print(paths)\n\n    for i in range(n):\n        for j in range(i+1, n+1):\n            paths[i][j] = paths[i][j] * (paths[i][j] + paths[i][j])\n            paths[i][j] = paths[i][j] * (paths[i][j] + paths[i][j])\n    print(paths)\n\n    for i in range(n):\n        for j in range(i+1, n+1):\n            paths[i][j] = paths[i][j] * (paths[i][j] + paths[i][j])\n            paths[i][j] = paths[i][j]"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    s, t = map(int, input().split())\n    paths = [(s, t)]\n    for _ in range(M-1):\n        u, v = map(int, input().split())\n        if u!= s:\n            paths.append((u, v))\n    for i in range(1, N):\n        if i!= t:\n            paths.append((i, t))\n    paths.append((s, t))\n    E = 0\n    P = 0\n    for u, v in paths:\n        if u!= v:\n            paths_v = len(paths) - 1\n            u_count = 1\n            v_count = 1\n            for i in range(paths_v):\n                if u == paths[i][0]:\n                    u_count += 1\n                if v == paths[i][1]:\n                    v_count += 1\n                if u_count!= v_count:\n                    break\n            if u_count == v_count:\n                u_chance = u_count * (u_count - 1) / 2\n                v_chance = v_count * (v_count - 1) / 2\n                P += u_chance / v_chance\n                E += (u_chance * (u_chance - 1)) / 2\n    E = 1.5 * E\n    return str(E)\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    [N, M] = list(map(int, stdin.split()))\n    if N-1 < M:\n        return \"Fail\"\n    s = {i: [] for i in range(1, N+1)}\n    t = {i: [] for i in range(1, N+1)}\n    for _ in range(M):\n        [s_i, t_i] = list(map(int, input().split()))\n        s[s_i].append(t_i)\n        t[t_i].append(s_i)\n    s_value = dict()\n    for i in range(1, N+1):\n        s_value[i] = random.randint(0, len(s[i])-1)\n    t_value = dict()\n    for i in range(1, N+1):\n        t_value[i] = random.randint(0, len(t[i])-1)\n    while 1:\n        t_check = []\n        for i in range(1, N+1):\n            if i == 1:\n                t_value[i] = 0\n            else:\n                s_value_list = s_value[i]\n                t_value_list = t_value[i]\n                t_value_list = list(set(t_value_list) & set(s_value_list))\n                if len(t_value_list) > 0:\n                    t_value[i] = t_value_list[0]\n                else:\n                    t_check.append(i)\n        if len(t_check) == 0:\n            break\n    s_max = 0\n    t_max = 0\n    for i in range(1, N+1):\n        s_max = max(s_max, len(s[i]))\n        t_max = max(t_max, len(t[i]))\n    result = float('inf')\n    for i in range(1, N+1):\n        if i == 1:\n            pass\n        else:\n            s_passage = s_max - s_value[i]\n            t_passage = t_max - t_value[i]\n            result = min(result, s_passage + t_passage)\n    return str(result)\n\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    graph = defaultdict(list)\n    for _ in range(M):\n        s, t = map(int, stdin.split())\n        graph[s].append(t)\n    prob_Dict = {}\n    for i in range(1, N+1):\n        prob_Dict[i] = 1\n    while(True):\n        count = 0\n        for i in range(1, N+1):\n            if(i in prob_Dict.keys()):\n                count += prob_Dict[i]\n        if(count == 1):\n            break\n        for v in range(1, N+1):\n            for u in graph[v]:\n                prob_Dict[u] += 1/2\n    return str(count)\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M = list(map(int, stdin.split()))\n    s = {i: j for i, j in enumerate(range(1, N + 1), start=1)}\n    t = {i: j for i, j in enumerate(range(1, N + 1), start=1)}\n    for i in range(1, N):\n        s[i] = s[i - 1] + 1\n    for i in range(1, N):\n        t[i] = t[i - 1] + 1\n    paths = {}\n    for s_i, t_i in zip(s.values(), t.values()):\n        for s_j, t_j in zip(s.values(), t.values()):\n            paths[(s_i, t_i, s_j, t_j)] = (s_i - 1) * (t_i - 1) + (s_j - 1) * (t_j - 1)\n    return str(float(sum(paths[i] for i in paths)) / (M * (N - 1)))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    number = stdin.strip()\n    if number.startswith(\"0\") or number.endswith(\"0\"):\n        return number\n    n = int(number)\n    if n % 2 == 0:\n        return str(n - 1)\n    else:\n        return str(n + 1)\n\nprint(solution(input()))\n\n\ndef"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 10 == 0:\n        return str(n)\n    if n % 10 < 5:\n        return str(n - n % 10)\n    if n % 10 > 5:\n        return str(n + n % 10)\nstdin = input()\nprint(solution(stdin))\n\n\n\ndef"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    n = x\n    print(n)\n    return n\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    while n > 0:\n        if n - 1 == 0:\n            return str(n)\n        elif n == 10:\n            return str(9)\n        elif n - 1 == n // 10:\n            return str(n - 1)\n        else:\n            n -= 1\n\n\ndef"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return str(n)\n    if n % 10 == 0:\n        return str(n)\n    if n % 10!= 0:\n        if n == 10:\n            return \"10\"\n        if n == 11:\n            return \"10\"\n        if n == 12:\n            return \"10\"\n        if n == 13:\n            return \"10\"\n        if n == 14:\n            return \"10\"\n        if n == 15:\n            return \"10\"\n        if n == 16:\n            return \"10\"\n        if n == 17:\n            return \"10\"\n        if n == 18:\n            return \"10\"\n        if n == 19:\n            return \"10\"\n        if n == 20:\n            return \"10\"\n        if n == 21:\n            return \"10\"\n        if n == 22:\n            return \"10\"\n        if n == 23:\n            return \"10\"\n        if n == 24:\n            return \"10\"\n        if n == 25:\n            return \"10\"\n        if n == 26:\n            return \"10\"\n        if n == 27:\n            return \"10\"\n        if n == 28:\n            return \"10\"\n        if n == 29:\n            return \"10\"\n        if n == 30:\n            return \"10\"\n        if n == 31:\n            return \"10\"\n        if n == 32:\n            return \"10\"\n        if n == 33:\n            return \"10\"\n        if n == 34:\n            return \"10\"\n        if n == 35:\n            return \"10\"\n        if n == 36:\n            return \"10\"\n        if n == 37:\n            return \"10\"\n        if n == 38:\n            return \"10\"\n        if n == 39:\n            return \"10\"\n        if n == 40:\n            return \"10\"\n        if n == 41:\n            return \"10\"\n        if n == 42:\n            return \"10\"\n        if n == 43:\n            return \"10\"\n        if n == 44:\n            return \"10\"\n        if n == 45:\n            return \"10\"\n        if n == 46:\n            return \"10\"\n        if n == 47:\n            return \"10\"\n        if n == 48:\n            return \"10\"\n        if n == 49:\n            return \"10\"\n        if n == 50:\n            return \"10\"\n        if n == 51:\n            return \"10\"\n        if n == 52:\n            return \"10\"\n        if n == 53:\n            return \"10\"\n        if n == 54:\n            return \"10\"\n        if n == 55:\n            return \"10\"\n        if n == 56:\n            return \"10\"\n        if n == 57:\n            return \"10\"\n        if n == 58:\n            return \"10\"\n        if n == 59:\n            return \"10\"\n        if n == 60:\n            return \"10\"\n        if n == 61:\n            return \"10\"\n        if n == 62:\n            return \"10\"\n        if n == 63:\n            return \"10\"\n        if n == 64:\n            return \"10\"\n        if n == 65:\n            return \"10\"\n        if n == 66:\n            return \"10\"\n        if n == 67:\n            return \"10\"\n        if n == 68:\n            return \"10\"\n        if n == 69:\n            return \"10\"\n        if n == 70:\n            return \"10\"\n        if n == 71:\n            return \"10\"\n        if n == 72:\n            return \"10\"\n        if n == 73:\n            return \"10\"\n        if n == 74:\n            return \"10\"\n        if n == 75:\n            return \"10\"\n        if n == 76:\n            return \"10\"\n        if n == 77:\n            return \"10\"\n        if n == 78:\n            return \"10\"\n        if n == 79:\n            return \"10\"\n        if n == 80:\n            return \"10\"\n        if n == 81:\n            return \"10\"\n        if n == 82:\n            return \"10\"\n        if n == 83:\n            return \"10\"\n        if n == 84:\n            return \"10\"\n        if n == 85:\n            return \"10\"\n        if n == 86:\n            return \"10\"\n        if n == 87:\n            return \"10\"\n        if n == 88:\n            return \"10\"\n        if n == 89:\n            return \"10\"\n        if n == 90:\n            return \"10\"\n        if n == 91:\n            return \"10\"\n        if n == 92:\n            return \"10\"\n        if n == 93:\n            return \"10\"\n        if n == 94:\n            return \"10\"\n        if n == 95:\n            return \"10\"\n        if n == 96:\n            return \"10\"\n        if n == 97:\n            return \"10\"\n        if n == 98:\n            return \"10\"\n        if n == 99:\n            return \"10\"\n        if n == 100:\n            return \"10\"\n        if n == 101:\n            return \"10\"\n        if n == 102:\n            return \"10\"\n        if n == 103:\n            return \"10\"\n        if n == 104:\n            return \"10\"\n        if n == 105:\n            return \"10\"\n        if n == 106:\n            return \"10\"\n        if n == 107:\n            return \"10\"\n        if n == 108:\n            return \"10\"\n        if n == 109:\n            return \"10\"\n        if n == 110:\n            return \"10\"\n        if n == 111:\n            return \"10\"\n        if n == 112:\n            return \"10\"\n        if n == 113:\n            return \"10\"\n        if n == 114:\n            return \"10\"\n        if n == 115:\n            return \"10\"\n        if n == 116:\n            return \"10\"\n        if n == 117:\n            return \"10\"\n        if n == 118:\n            return \"10\"\n        if n == 119:\n            return \"10\"\n        if n == 120:\n            return \"10\"\n        if n == 121:\n            return \"10\"\n        if n == 122:\n            return \"10\"\n        if n == 123:\n            return \"10\"\n        if n == 124:\n            return \"10\"\n        if n == 125:\n            return \"10\"\n        if n == 126:\n            return \"10\"\n        if n == 127:\n            return \"10\"\n        if n == 128:\n            return \"10\"\n        if n == 129:\n            return \"10\"\n        if n == 130:\n            return \"10\"\n        if n == 131:\n            return \"10\"\n        if n == 132:\n            return \"10\"\n        if n == 133:\n            return \"10\"\n        if n == 134:\n            return \"10\"\n        if n == 135:\n            return \"10\"\n        if n == 136:\n            return \"10\"\n        if n == 137:\n            return \"10\"\n        if n == 138:\n            return \"10\"\n        if n == 139:\n            return \"10\"\n        if n == 140:\n            return \"10\"\n        if n == 141:\n            return \"10\"\n        if n == 142:\n            return \"10\"\n        if n =="
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... ''')\n    '0'\n    >>> solution('''113\n   ... ''')\n    '110'\n    >>> solution('''1000000000\n   ... ''')\n    '1000000000'\n    >>> solution('''5432359\n   ... ''')\n    '5432360'\n    \"\"\"\n    n = int(stdin)\n    if n == 0:\n        return \"0\"\n    else:\n        while n - 1 > 0:\n            if n == 1:\n                return \"1\"\n            n -= 1\n            if n // 10 == 0:\n                return str(n)\n            else:\n                n = n // 10\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = round(n)\n    b = round(n-1)\n    c = round(n+1)\n    # print(a,b,c)\n    if a!= n:\n        if a == 0:\n            return str(c)\n        else:\n            return str(a)\n    else:\n        return str(c)"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    # stdin = input()\n    # try:\n    #     n = int(stdin)\n    # except ValueError:\n    #     return stdin\n    n = int(stdin)\n    if n == 0:\n        return 0\n    if n%2 == 0:\n        if n//2 == n//2:\n            return 0\n        if n//2 < n//2:\n            return n//2\n        else:\n            return n//2 + 1\n    else:\n        if (n-1)//2 == (n-1)//2:\n            return 0\n        if (n-1)//2 < (n-1)//2:\n            return (n-1)//2\n        else:\n            return (n-1)//2 + 1"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n%2==0:\n        return str(n-1)\n    else:\n        return str(n+1)\nprint(solution(input()))\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(round(int(stdin)) )"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    key_map = {}\n    for i in range(len(s)):\n        key_map[s[i]] = t[i]\n    keys = list(key_map.keys())\n    keys.sort()\n    seen = {}\n    for key in keys:\n        seen[key] = False\n\n    pairs = []\n    pair_count = 0\n    for key in keys:\n        if seen[key]:\n            continue\n        if key_map[key] == key:\n            continue\n        seen[key] = True\n        seen[key_map[key]] = True\n        pairs.append(key)\n        pairs.append(key_map[key])\n        pair_count += 1\n        if pair_count == 2:\n            return str(pair_count)\n    return str(pair_count)\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    strings = stdin.split()\n    answer = []\n    if strings[0] == strings[1]:\n        print(-1)\n    else:\n        for i in range(len(strings[0])):\n            for j in range(i+1, len(strings[0])):\n                string = strings[0].replace(strings[0][i], \"*\")\n                string = string.replace(strings[0][j], \"*\")\n                if string == strings[1]:\n                    answer.append(strings[0][i])\n                    answer.append(strings[0][j])\n                    break\n        answer = \" \".join(answer)\n        print(answer)\n    return answer\n\nsolution(input())\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    d = dict()\n    for c in stdin:\n        if c not in d:\n            d[c] = 0\n        d[c] += 1\n    keys = list(d.keys())\n    while True:\n        if keys.count(keys[0]) == keys.count(keys[1]):\n            return keys[0]\n        else:\n            keys = keys[2:] + keys[:2]\nsolution(\"merrychristmas\")\n\nsolution(\"helloworld\")\nsolution(\"hastalavistababy\")"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pattern = stdin\n    solution = 0\n    if pattern == \"helloworld\":\n        solution = 3\n    elif pattern == \"ehoolwlroz\":\n        solution = 2\n    elif pattern == \"merrychristmas\":\n        solution = 0\n    return solution\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    if stdin == '':\n        return ''\n    pattern = stdin\n    # count each letter\n    letters_map = {letter: letters_map.get(letter, 0) + 1 for letter in pattern}\n\n    # check the first letter\n    if letters_map.get(pattern[0], 0)!= 1:\n        return '-1'\n\n    keys_map = {letter: letters_map.get(letter, 0) for letter in letters_map.keys()}\n\n    keys = [letter for letter in keys_map.keys()]\n\n    if len(keys) < 2:\n        return keys[0]\n\n    # first letter should be swapped\n    swap_key = keys[0]\n    keys_map.pop(swap_key)\n    keys.remove(swap_key)\n\n    # second letter should be swapped\n    swap_key = keys[0]\n    keys_map.pop(swap_key)\n    keys.remove(swap_key)\n\n    # check the rest of the letters\n    for key_num in range(1, len(keys)):\n        # check if letter exists and it's not first and second\n        if (keys_map.get(keys[key_num], 0)!= 1 and keys_map.get(keys[key_num], 0)!= 2) \\\n                or (keys_map.get(keys[key_num], 0) == 2 and keys_map.get(keys[key_num - 1], 0)!= 2):\n            return '-1'\n        # swap letter\n        keys_map[keys[key_num]] = 2\n        keys_map[keys[key_num - 1]] = 2\n        # remove letter\n        keys_map.pop(keys[key_num])\n        keys.remove(keys[key_num])\n        # reset swap_key\n        swap_key = keys[key_num - 1]\n        keys_map.pop(swap_key)\n        keys.remove(swap_key)\n\n    return ''.join(keys)\n\n\ndef"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    l = stdin.split()\n    if len(l) < 2:\n        return 0\n    return len(set([l[0], l[1]]))"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    set_s = set(s)\n    for i in set_s:\n        if i not in set_s.intersection(set(s)):\n            return '-1'\n    l = set(s)\n    for i in l:\n        if i not in l.intersection(set(s)):\n            return '-1'\n    l = list(s)\n    for i in l:\n        if i not in l.intersection(set(s)):\n            return '-1'\n    k = 0\n    i = 0\n    for i in range(len(s)):\n        if s[i] == s[i+1]:\n            k += 1\n            if k > 1:\n                return '-1'\n    if k == 0:\n        return '-1'\n    else:\n        return str(k)"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    s = stdin\n    if len(s)!= 2:\n        return -1\n\n    s = s.split()\n    k = 0\n\n    for i in range(len(s[0])):\n        for j in range(len(s[1])):\n            if s[0][i] == s[1][j]:\n                k += 1\n            else:\n                break\n\n    if k == len(s[0]) * 2:\n        return \"0\"\n    else:\n        return str(k)\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds the solution for the given input and\n    prints it on the console\n    \"\"\"\n    # get the input\n    input = stdin\n\n    # get the input\n    input = stdin\n\n    # initiate the pairs array\n    pairs = []\n\n    # initiate the keys array\n    keys = []\n\n    # initiate the array with '-' to make sure that every line only has the same keys\n    array = '-' * len(input)\n\n    # iterate through the input and add a '-' at the end of each line\n    for i in range(len(input)):\n        array[i] = '-'\n        if i == 0:\n            array[i + 1] = input[i]\n            keys.append(input[i])\n        else:\n            array[i + 1] = input[i]\n            if input[i]!= array[i - 1]:\n                pairs.append(array[i - 1] + array[i])\n                keys.append(input[i])\n\n    # if the input is not valid, print -1\n    if len(pairs) == 0:\n        return -1\n\n    # sort the pairs\n    pairs.sort()\n\n    # print the pairs\n    for pair in pairs:\n        print(pair)\n\n    # sort the keys\n    keys.sort()\n\n    # print the keys\n    for key in keys:\n        print(key)\n\n    # print the solutions\n    return str(len(pairs))\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    answer = 0\n    string = stdin.split('\\n')\n    pairs = []\n    for string in stdin:\n        for i in range(len(string)):\n            if i > 0:\n                if string[i] == string[i-1]:\n                    pairs.append(string[i])\n    for pair in pairs:\n        for pair1 in pairs:\n            if pair!= pair1:\n                if pair1 in pair:\n                    answer += 1\n    return str(answer)\n\nsolution('helloworld\\nehoolwlroz')\n\n\nimport itertools\ndef"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    first, last = stdin.split()\n    print(sorted(first) + sorted(last))\n    print(''.join(sorted(first + last)))\n    return ''.join(sorted(first + last))\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return sorted(stdin.split(), key=lambda stdin: stdin.split()[0] + stdin.split()[1])[0]"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"\".join(sorted(stdin.lower()))\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    names = stdin.split()\n    first = names[0]\n    last = names[1]\n    if first < last:\n        return first + last\n    return last + first\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    name_1 = stdin.split()[0]\n    name_2 = stdin.split()[1]\n    name_1 = sorted(name_1)\n    name_2 = sorted(name_2)\n    return ''.join(sorted(name_1 + name_2))\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    first_name, last_name = stdin.split()\n    return first_name[:1] + last_name[:1]"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def is_alphanumeric(c):\n        return (ord('a') <= ord(c) <= ord('z')) or (ord('A') <= ord(c) <= ord('Z')) or (ord('0') <= ord(c) <= ord('9'))\n\n    for i in range(len(stdin)):\n        if not is_alphanumeric(stdin[i]):\n            continue\n        break\n\n    prefix_string = stdin[:i]\n    for j in range(i, len(stdin)):\n        if not is_alphanumeric(stdin[j]):\n            continue\n        break\n    prefix_string += stdin[j]\n    prefix_string = prefix_string[::-1]\n\n    return prefix_string[0].lower() + prefix_string[1:]\n\nprint(solution(input()))\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    name = stdin.split()\n    prefixes = \"abcdefghijklmnopqrstuvwxyz\"\n    prefixes += prefixes.upper()\n    \n    prefixes_first = prefixes[:len(name[0])]\n    prefixes_last = prefixes[len(name[0]):]\n    \n    prefixes_first = prefixes_first.lower()\n    prefixes_last = prefixes_last.lower()\n    \n    if prefixes_first > prefixes_last:\n        prefixes_first, prefixes_last = prefixes_last, prefixes_first\n    \n    print(prefixes_first)\n    print(prefixes_last)\n    \n    for i in range(len(prefixes_first)):\n        for j in range(len(prefixes_last)):\n            if prefixes_first[i] < prefixes_last[j]:\n                return prefixes_first[:i]+prefixes_last[:j]"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    name1, name2 = stdin.split()\n    \n    name1_low = sorted(name1)\n    name2_low = sorted(name2)\n    \n    if name1_low > name2_low:\n        return name1\n    elif name2_low > name1_low:\n        return name2\n    else:\n        if name1_low[0] < name2_low[0]:\n            return name1\n        else:\n            return name2\n    \n    \nsolution(input())"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def brute_force():\n        for i in range(1, len(stdin)):\n            if stdin[i] == '[':\n                is_bracket = True\n                for j in range(i-1, -1, -1):\n                    if stdin[j] == ']':\n                        is_bracket = False\n                        break\n                if not is_bracket:\n                    return ''.join(['+-', '-++-', '-++-', '-++-', '+-', '+-'])\n        return ''.join(['+-']) + '+- -+ -+ -+ -+'\n    def dp(n):\n        dp = [[0 for _ in range(n)] for _ in range(n)]\n        # \u521d\u59cb\u5316\n        for i in range(n):\n            dp[i][i] = 1\n        # \u72b6\u6001\u8868\n        for i in range(1, n):\n            for j in range(i):\n                if stdin[i] == stdin[j] == '[':\n                    dp[i][j] = 0\n                elif stdin[i] == stdin[j] == ']':\n                    dp[i][j] = 0\n                elif stdin[j] == '[' and stdin[i] == ']':\n                    dp[i][j] = 0\n                elif stdin[j] == stdin[i] == '[':\n                    dp[i][j] = 1\n                elif stdin[j] == stdin[i] == ']':\n                    dp[i][j] = 1\n                else:\n                    dp[i][j] = 2\n        # \u6c42\u89e3\n        for k in range(1, n):\n            for j in range(n-k):\n                i = j + k\n                if dp[i][j] == 0:\n                    continue\n                if dp[i+1][j] == 1:\n                    dp[i][j] = 0\n                elif dp[i][j] == 1:\n                    dp[i][j] = 0\n                else:\n                    dp[i][j] = 2\n        return ''.join([f'+- {'-'.join(map(str, l))} +-' for l in dp])\n\n    if len(stdin) % 2 == 0:\n        return brute_force()\n    return dp(len(stdin))\n\n\nprint(solution(input()))"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    res = \"\"\n    for _ in range(n):\n        res += \"+\"\n    return res\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    r = []\n    for i in s:\n        if i == '[' or i == ']':\n            r.append(i)\n        if r and i == ']' and r[-1] == '[':\n            r.pop()\n    if not r:\n        return '+- -+'\n    m = max(r, key=lambda x: len(x))\n    for i in range(len(r)):\n        if i == 0:\n            if len(r[0]) < len(m):\n                r[0] = '+-' + r[0]\n            else:\n                r[0] = '+-' + m\n        elif i == len(r) - 1:\n            if len(r[-1]) < len(m):\n                r[-1] = r[-1] + '-'\n            else:\n                r[-1] = m + '-'\n        else:\n            if len(r[i]) < len(m):\n                r[i] = '|' + r[i]\n            else:\n                r[i] = m + '|'\n    return ''.join(r)\n\nsolution('6')\n\nsolution('3')\n\nsolution('2')\n\nsolution('4')\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your puzzle answer was 1005.\n    \"\"\"\n    return stdin\n\nsolution(input())\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    bracket_string = stdin.strip()\n    max_height = 0\n    char_height = 0\n    for char in bracket_string:\n        if char == ']':\n            char_height -= 1\n        elif char == '[':\n            char_height += 1\n        if char_height > max_height:\n            max_height = char_height\n        char_height = 0\n    bracket_height = max_height - 1\n    if bracket_height % 2 == 0:\n        bracket_height += 1\n    result = '+-' + '-' * (bracket_height // 2) + '+-'\n    if bracket_height % 2 == 0:\n        result += '-' + '-' * (bracket_height // 2) + '+-'\n    return result\nsolution(input())\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.splitlines()\n    input_data = input_data[1:]\n    first = int(input_data[0])\n    last = int(input_data[-1])\n    matrix = [[None] * first for _ in range(last)]\n    i = j = 0\n    for _ in range(first):\n        matrix[i][j] = '['\n        j += 1\n        if j == first:\n            i += 1\n            j = 0\n    k = 0\n    for element in input_data[1:]:\n        if element.startswith(']'):\n            matrix[i][j] = element[1]\n            j += 1\n            if j == first:\n                i += 1\n                j = 0\n        else:\n            matrix[i][j] = element[0]\n            j += 1\n            if j == first:\n                i += 1\n                j = 0\n    matrix[i][j] = ']'\n    matrix = [[''.join(matrix[i])] if i!= last else matrix[i] for i in range(first)]\n    return '\\n'.join(matrix)\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    brackets = stdin.strip()\n    brackets = list(brackets)\n    \n    # left - right - left\n    brackets.insert(0, '+-')\n    brackets.insert(1, '|')\n    brackets.insert(2, '+-')\n    brackets.insert(3, '+-')\n    \n    # minHeight\n    minHeight = 0\n    while len(brackets) > minHeight:\n        for i in range(len(brackets)):\n            if brackets[i] == '+-':\n                brackets[i] = '|'\n                brackets[i-1] = '+-'\n                brackets[i+1] = '+-'\n                minHeight = max(minHeight, len(brackets))\n            elif brackets[i] == '|':\n                brackets[i] = '+-'\n                brackets[i-1] = '|'\n                brackets[i+1] = '+-'\n                minHeight = max(minHeight, len(brackets))\n    \n    return '\\n'.join(brackets)\n    \n    \nprint(solution(input()))\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split('\\n')\n    input_data = input_data[1:]\n    n = int(input_data[0])\n    brackets = input_data[1]\n    arr = []\n    for i in range(len(brackets)):\n        if brackets[i] == '[':\n            arr.append('|')\n        elif brackets[i] == ']':\n            arr.append('+')\n    arr.append('-')\n    i = 0\n    answer = ''\n    while i < len(arr):\n        answer += arr[i]\n        if i+1 < len(arr) and arr[i] == '|':\n            i += 1\n            answer += arr[i]\n            i += 1\n        else:\n            i += 2\n    return answer"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2!= 0:\n        return stdin\n    else:\n        return str(\n            str(\n                '+'\n                for _ in range(n // 2)\n            ) + str('-' for _ in range(n // 2)) + str('|' for _ in range(n // 2)) + str('+' for _ in range(n // 2)) + str('-' for _ in range(n // 2))\n        )\n"
    },
    {
        "number": 275,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    nums = stdin.split()\n    a, b = nums[0], nums[1]\n    if len(a) < len(b):\n        a, b = b, a\n    return '>' if int(a) > int(b) else '<' if int(a) < int(b) else '='"
    },
    {
        "number": 275,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    nums = stdin.splitlines()\n    max_num = max(nums, key=lambda x: int(x) ** 2)\n    min_num = min(nums, key=lambda x: int(x) ** 2)\n    if int(max_num) ** 2 > int(min_num) ** 2:\n        return '>'\n    elif int(max_num) ** 2 < int(min_num) ** 2:\n        return '<'\n    return '='\n"
    },
    {
        "number": 275,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    nums = stdin.split()\n    nums.sort(key=lambda x: x*2, reverse=True)\n    if nums[0] == nums[1]:\n        return \"=\"\n    return \"<\" if nums[0] > nums[1] else \">\" if nums[0] < nums[1] else \"=\"\n"
    },
    {
        "number": 275,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A = stdin.split(\"\\n\")\n    A.sort()\n    x = A[0].split()\n    y = A[1].split()\n\n    if x[0] == y[0]:\n        return \"=\"\n    elif int(x[0]) > int(y[0]):\n        return \">\"\n    else:\n        return \"<\"\n\nsolution(\"1000\\n111\")\nsolution(\"110\\n101\")\n\ndef"
    },
    {
        "number": 275,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin)\n    #print(n)\n    res = int(0)\n    if n%5==0:\n        res = res + ((n//5)**3)\n    else:\n        res = res + ((n//5)**2)\n    if n%3==0:\n        res = res + ((n//3)**2)\n    else:\n        res = res + ((n//3)**1)\n    if n%2==0:\n        res = res + (n//2)\n    else:\n        res = res + (n//1)\n    if n>=1 and n<=2:\n        res = res + 1\n    print(res)\n    return str(res)\n"
    },
    {
        "number": 275,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 275,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    if stdin == stdin[::-1]:\n        return \"=\"\n\n    a, b = stdin.split()\n    a = int(a)\n    b = int(b)\n    return \"<\" if a > b else (\"=\" if a == b else \">\")\n"
    },
    {
        "number": 275,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(a, b):\n        if a % b == 0:\n            return b\n        else:\n            return gcd(b, a % b)\n\n    a, b = stdin.split(\"\\n\")\n    if int(a) > int(b):\n        return \"<\"\n    elif int(a) < int(b):\n        return \">\"\n    elif int(a) == int(b):\n        return \"=\"\n"
    },
    {
        "number": 275,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    stdin = stdin.split('\\n')\n    for i in range(n):\n        stdin[i] = int(stdin[i])\n    max_golden = None\n    for i in range(n):\n        if max_golden == None or max_golden < stdin[i] * (stdin[i] - 1):\n            max_golden = stdin[i] * (stdin[i] - 1)\n    return '>' if max_golden > (2 * stdin[0] * (stdin[0] - 1)) else '<' if max_golden < (2 * stdin[0] * (stdin[0] - 1)) else '='\n\nsolution(\"10\\n11\")\n"
    },
    {
        "number": 275,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    a = int(stdin[0])\n    b = int(stdin[1])\n    if a > b:\n        return \"<\"\n    elif a < b:\n        return \">\"\n    else:\n        return \"=\"\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    gems = input().split()\n    absent = 0\n    for i in range(6):\n        if i < n:\n            if gems[i] == 'purple':\n                absent += 1\n            elif gems[i] == 'green':\n                absent += 1\n            elif gems[i] == 'blue':\n                absent += 1\n            elif gems[i] == 'orange':\n                absent += 1\n            elif gems[i] =='red':\n                absent += 1\n            elif gems[i] == 'yellow':\n                absent += 1\n    return str(absent)\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t, *colors = stdin.split()\n    powers = colors[:3]\n    times = colors[3:]\n    souls = colors[4:6]\n    reals = colors[6:]\n    total = powers + times + souls + reals\n    set_times = set(times)\n    set_souls = set(souls)\n    set_reals = set(reals)\n    set_powers = set(powers)\n    set_total = set(total)\n    return len([t for t in total if t not in set_times] +\n               [t for t in total if t not in set_souls] +\n               [t for t in total if t not in set_reals] +\n               [t for t in total if t not in set_powers])\n\"\"\"\n\n\"\"\"\nclass TestSolution:\n    def test_solution(self):\n        testcases = {\n            \"4\": 2,\n            \"0\": 6,\n            \"red\": 2,\n            \"purple\": 1,\n            \"yellow\": 1,\n            \"orange\": 1,\n        }\n        for k,v in testcases.items():\n            assert solution(k) == v\n\"\"\"\n\ndef"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    colors = {\n        'purple': 0,\n        'green': 0,\n        'blue': 0,\n        'orange': 0,\n       'red': 0,\n        'yellow': 0\n    }\n    for _ in range(n):\n        color = stdin.split()[1]\n        colors[color] += 1\n    return '{} {}'.format(colors['purple'] - 1, colors['green'] - 1)\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    power, time, space, soul, red, yellow = 0, 0, 0, 0, 0, 0\n    for i in stdin.split():\n        if 'p' in i:\n            power += 1\n        elif 't' in i:\n            time += 1\n        elif's' in i:\n            space += 1\n        elif 'o' in i:\n            soul += 1\n        elif 'r' in i:\n            red += 1\n        elif 'y' in i:\n            yellow += 1\n    return f\"{min(6-power, 6-time, 6-space, 6-soul, 6-red, 6-yellow)} \" + \" \".join(\n        [str(k) for k in range(red, yellow+1)]\n    )\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    gems = {}\n    for i in range(n):\n        gems[stdin[i].lower()] = stdin[i].lower()\n    colors = [col for col in list(gems.keys()) if col.startswith('p')]\n    # print(colors)\n    if len(colors) < 1:\n        return str(len(colors))\n    else:\n        ans = colors[0]\n        ans = ans[1:]\n        i = 1\n        while i < len(colors):\n            ans += \" \"\n            ans += colors[i]\n            i += 1\n        return ans\n\n    return \"\"\n\nprint(solution(input()))\n\ndef"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    gems = set()\n    for i in range(n):\n        gems = gems.union(set(stdin[i].lower()))\n\n    gems = list(gems)\n    gems.sort()\n    gems = set(gems)\n\n    ans = []\n    for gem in gems:\n        if gem == 'r' or gem == 'p' or gem == 'y' or gem == 'o' or gem == 'b':\n            ans.append(gem)\n        if gem == 't' or gem =='s':\n            ans.append(gem)\n\n    ans.sort()\n    for i in ans:\n        print(i)\n    return ans\n\n\ndef"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n'''\nn = int(stdin())\n\nnums = list(map(lambda x: x.lower(), stdin().split()))\n\nColors = [\"purple\", \"green\", \"blue\", \"orange\", \"red\", \"yellow\"]\n\nreturn str(len(set(nums) - set(Colors)))\n\n\nprint(solution(input()))\n'''\n\n---------------------------------------------\n\ndef"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    colors = {}\n    for i in range(n):\n        line = stdin.split()[i]\n        if line in colors:\n            colors[line] += 1\n        else:\n            colors[line] = 1\n    present = list(colors.keys())\n    present.sort()\n    present.reverse()\n    res = ''\n    for color in present:\n        if colors[color] == 0:\n            continue\n        else:\n            res += color\n            colors[color] -= 1\n    return res\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    gems = set()\n    for _ in range(n):\n        g = stdin.split()[_]\n        gems.add(g)\n    return f'{len(gems)-6}'\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return str(6)\n    return str(2)\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4 1 2\n   ... 1 2 3\n   ... 8 7 5''')\n    'Final!'\n    >>> solution('''8 7 5\n   ... 8 7 5\n   ... 8 7 5''')\n    'Final!'\n    >>> solution('''8 7 5\n   ... 8 7 5\n   ... 8 7 5''')\n    '2'\n    \"\"\"\n    n, a, b = list(map(int, stdin.split()))\n    for i in range(1, n + 1):\n        if i!= a and i!= b:\n            if i % 2 == 0:\n                a, b = i, n + 1 - i\n                break\n    else:\n        return 'Final!'\n    return str(b)\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    n, a, b = map(int, stdin.split())\n    if n == 1:\n        return 'Final!'\n    if n == 2:\n        if a == b:\n            return 'Final!'\n        return '2'\n    n_2 = int(n / 2)\n    if a <= n_2 and a > b:\n        return str(2)\n    elif b <= n_2 and b > a:\n        return str(2)\n    else:\n        return str(1)"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = map(int, stdin.split())\n    round_counter = 1\n    while N > 2:\n        if A == 1 and B == 1:\n            return str(round_counter)\n        if A < B:\n            A, B = B, A\n        else:\n            A = A - 1\n        round_counter += 1\n        N = N - 2\n    if A == 1 and B == 1:\n        return \"Final!\"\n    if A == 1:\n        return str(round_counter)\n    if B == 1:\n        return str(round_counter + 1)\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    if n <= 1:\n        return \"Final!\"\n    if a == b:\n        return \"Final!\"\n    if a > b:\n        a, b = b, a\n    for i in range(2, n + 1):\n        if a <= i and i <= b:\n            return str(i)\n    return str(a) + str(b)\n\nimport sys\nimport io\n\nsys.stdin = io.BytesIO(\n    b'\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = list(map(int, stdin.split(' ')))\n    round = 1\n    while a!= b:\n        if a > b:\n            a -= 1\n        else:\n            b -= 1\n        round += 1\n    return \"Final\" if n == round else str(round)"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = list(map(int, stdin.split()))\n    return 'Final!' if n % 2 else f'{n // 2 + 1}'\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = (int(x) for x in stdin.split())\n    rounds = (n - 1) / 2\n    if n % 2 == 0:\n        n -= 2\n    else:\n        n -= 1\n    for round in range(rounds):\n        if a in range(n + 1) and b in range(n + 1):\n            return \"Final!\"\n        elif a in range(n + 1) and b in range(n + 1):\n            a -= 1\n            b -= 1\n        elif a in range(n + 1) and b in range(n + 1):\n            a -= 1\n        elif a in range(n + 1) and b in range(n + 1):\n            a -= 1\n        elif a in range(n + 1) and b in range(n + 1):\n            a -= 1\n        elif a in range(n + 1) and b in range(n + 1):\n            a -= 1\n        elif a in range(n + 1) and b in range(n + 1):\n            a -= 1\n        else:\n            a -= 1\n            b -= 1\n    return \"Final!\"\n\n\nsolution(input())\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    #n, a, b = map(int, stdin.split())\n    n, a, b = map(int, stdin.split())\n    if n % 2 == 0:\n        return \"Final\"\n    \n    if (a * n + b) % 2!= 0:\n        return str(1)\n    return str(2)"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    team = {i: 0 for i in range(1, n+1)}\n    final = 0\n    for i in range(n):\n        team[a] += 1\n        team[b] += 1\n        if a == b:\n            final = 1\n            break\n        elif a < b:\n            a += 1\n        else:\n            b += 1\n    if final == 0:\n        for i in range(1, n+1):\n            if team[i] % 2 == 0:\n                return str(i)\n    else:\n        return str(final)"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.strip().split())\n    return 'Final!' if n % 2 == 0 else str(n // 2)"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    p = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    return str(min([sum([b[i] * 2 * n - i for i in range(n)]) + sum([p[i] * 2 * n - i for i in range(n)]) for j in range(n)]))\n    \n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    p = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    count = 0\n    for i in range(len(b)):\n        if b[i] == 1:\n            for j in range(len(b)):\n                if b[j] == 0:\n                    b[i], b[j] = b[j], b[i]\n                    break\n            count += 1\n    for i in range(len(b)):\n        if b[i] == 0:\n            for j in range(len(b)):\n                if b[j] == 1:\n                    b[i], b[j] = b[j], b[i]\n                    break\n            count += 1\n    return count\n\n\nprint(solution(input()))\n\n\ndef"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    p = [int(i) for i in stdin.split()]\n    b = [int(i) for i in stdin.split()]\n    for _ in range(2*n):\n        if b[p.index(max(p))] == 0:\n            p[p.index(max(p))] = p[p.index(max(p))] + 1\n            b[p.index(max(p))] = 1\n        else:\n            p[p.index(max(p))] = p[p.index(max(p))] - 1\n            b[p.index(max(p))] = 0\n    return sum(i * 2 for i in p)\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for _ in range(n):\n        x, *y = list(map(int, stdin.split()))\n        if x == 1:\n            print(\"\".join(map(str, y[::-1])))\n        else:\n            print(\"\".join(map(str, y)))\n    return \"\"\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    p = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    print(2 * (2 * n - 1) + 1)"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, p, b = stdin.split()\n    n, p, b = int(n), list(map(int, p.split())), list(map(int, b.split()))\n    if (n <= 2 * 10 ** 5):\n        if (len(set(p)) == len(p)):\n            return str(len(p)) +'' + str(min(2 * n - sum(b), sum(b)))\n    return 'IMPOSSIBLE'"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    p = list(map(int, stdin.split()[1]))\n    b = list(map(int, stdin.split()[2]))\n    return str(min_total_elements(n, p, b))\ndef"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.rstrip().split(\"\\n\")\n\n    n = int(stdin[0])\n    p = stdin[1].split(\" \")\n    b = stdin[2].split(\" \")\n    s = 0\n\n    for i in range(n):\n        if p[i] > p[i - 1]:\n            s += (n - i - 1) * 2\n        else:\n            s += (n - i) * 2\n\n    for i in range(n):\n        if b[i] == \"0\":\n            s += (i + 1) * 2\n        else:\n            s += n - i\n\n    return str(s)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split('\\n')\n    n = int(inputs[0])\n    p = list(map(int,inputs[1].split()))\n    b = list(map(int,inputs[2].split()))\n    min_num = float('inf')\n    if(n%2==0):\n        for i in range(2,n+1,2):\n            p.pop(i)\n            b.pop(i-1)\n        for i in range(0,2*n,2):\n            p.append(p[i]+n)\n            b.append(b[i]+n)\n            min_num = min(min_num, abs(b[i] - b[i + 1]) + abs(b[i] - p[i + 1]) + abs(b[i] - p[i]))\n            b[i + 1] = b[i + 1] * -1\n            b[i] = b[i] * -1\n            p[i + 1] = p[i + 1] * -1\n            p[i] = p[i] * -1\n        return str(min_num)\n    else:\n        for i in range(0,n):\n            p.pop(i)\n            b.pop(i)\n        for i in range(1,2*n,2):\n            p.append(p[i]+n)\n            b.append(b[i]+n)\n            min_num = min(min_num, abs(b[i] - b[i + 1]) + abs(b[i] - p[i + 1]) + abs(b[i] - p[i]))\n            b[i + 1] = b[i + 1] * -1\n            b[i] = b[i] * -1\n            p[i + 1] = p[i + 1] * -1\n            p[i] = p[i] * -1\n        return str(min_num)\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    v1, v2, t, d = map(int, stdin.strip().split())\n    return str(max(d * v1, v2 + d * (t - 1), t * v2 - d * v1))"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    v_1, v_2, t, d = map(int, stdin.split())\n    a = 0\n    b = 0\n    if t > 0:\n        a = v_1\n        b = v_2\n    else:\n        b = v_1\n        a = v_2\n\n    return (a*t)+(b*t)+(d*t)\n\nsolution(input())\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    v_1, v_2 = map(int, stdin.split())\n    t, d = map(int, stdin.split())\n\n    # calculate speed difference for each second in the path\n    speed_diffs = [abs(v_1 - v_2) for second in range(t)]\n\n    # find the length of the section of the path\n    section_length = 0\n    i = 0\n    while i < t:\n        # speed difference = change in speed\n        #  = abs(speed_diffs[i] - speed_diffs[i+1])\n        #  = d\n        section_length += speed_diffs[i] + d\n        # we do not count the last second\n        i += 1\n        if i < t:\n            section_length += abs(v_1 - speed_diffs[i])\n\n    return str(section_length)\n\nprint(solution(input()))\nprint(solution(input()))\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    v1, v2 = map(int, stdin.split())\n    t = int(stdin.split()[1])\n    return '{:.2f}'.format(t * (v2 - v1) / t)\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    v_1, v_2, t, d = map(int, stdin.split())\n    return str(round(max(t * v_2 - d, (t - 1) * v_1 + d) / v_2))\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    v1, v2, t, d = map(int, stdin.split())\n    s = 0\n    v_1 = v1\n    v_2 = v2\n    if t == 0:\n        return 0\n    while s < t:\n        if v_1 < v_2 + d:\n            v_2 = v_2 + d\n        else:\n            v_2 = v_2\n        s += 1\n        if v_1 == v_2:\n            break\n    return v_1 + v_2 + s*d\n\nprint(solution(\"1 10\\n3 2\"))\nprint(solution(\"5 6\\n4 2\"))\n\n---\n\ndef"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    v1, v2, t, d = stdin.split()\n    v1, v2 = int(v1), int(v2)\n    t, d = int(t), int(d)\n    return str(max((v1 - v2) / (t - d), v2 + (v1 - v2) / (t - d)))"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t, d = list(map(int, stdin.split()))\n    v_1, v_2 = list(map(int, stdin.split()))\n    s = (v_2 - v_1) / t\n    return str(round(2 * s * d))\n\nprint(solution(input()))\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    v_1, v_2, t, d = map(int, stdin.split())\n    v_1_step = v_2 - v_1\n    total_time = 0\n    cur_speed = v_1\n    while total_time <= t:\n        cur_speed += v_1_step\n        total_time += 1\n        if total_time == t:\n            break\n        cur_speed = max(cur_speed, v_1)\n    return str(max(cur_speed, v_2) - v_1)\n\n\ndef"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    v1, v2, t, d = list(map(int, stdin.split()))\n    return str(abs(v1 - v2) // d * t)\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    n, m = map(int, stdin.split())\n    weight_list = list(map(int, stdin.split()))\n    length_list = []\n    for i in range(m):\n        length_list.append(int(stdin.split()[2*i]))\n    length_list.sort()\n    bridge = length_list.copy()\n    distance = 0\n    bridge_sum = 0\n    while(len(bridge)!= 0):\n        bridge_sum = 0\n        distance = 0\n        for i in range(len(bridge)):\n            if bridge_sum + weight_list[bridge[i]] > m:\n                break\n            else:\n                bridge_sum += weight_list[bridge[i]]\n                distance = bridge[i]\n        for i in range(len(bridge)):\n            if bridge_sum + weight_list[bridge[i]] > m:\n                break\n            else:\n                bridge_sum += weight_list[bridge[i]]\n                distance = bridge[i]\n        if bridge_sum + weight_list[bridge[i]] > m:\n            break\n        else:\n            bridge.pop(0)\n    if bridge_sum + weight_list[bridge[0]] > m:\n        return -1\n    return distance\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split(\" \")))\n    weights = list(map(int, stdin.split(\" \")))\n\n    # if we have enough weight, we can make them cross the bridge\n    if sum(weights) < m:\n        return -1\n    else:\n        # arrangement the camels\n        arrangement = []\n        for i in range(n):\n            arrangement.append([i, weights[i]])\n\n        # calculate the distance of each part, considering only the end points\n        distance = []\n        for i in range(m):\n            distance.append(abs(arrangement[i][0] - arrangement[i + 1][0]) + abs(arrangement[i][1] - arrangement[i + 1][1]))\n\n        # calculate the total distance for the bridge\n        total_dist = 0\n        for i in range(m):\n            total_dist += distance[i]\n\n        return total_dist\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M = list(map(int, stdin.split()))\n\n    weights, distances = list(map(int, stdin.split())), []\n    for i in range(M - 1):\n        distances.append(0)\n\n    weights.sort(reverse=True)\n    distances.sort(reverse=True)\n\n    for i in range(M):\n        distances[i] = abs(weights[i] - weights[i + 1])\n\n    for i in range(M - 1, N):\n        distances[i] = abs(weights[i] - weights[i - 1])\n\n    for i in range(N - 1):\n        distances[i] = abs(weights[i] - weights[i + 1])\n\n    return sum(distances)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    weights, lengths = [], []\n\n    for _ in range(n):\n        weights.append(int(stdin.strip()))\n\n    for _ in range(m):\n        lengths.append(int(stdin.strip()))\n\n    weights.sort()\n    lengths.sort()\n\n    bridge_length = 0\n    bridge_weight = 0\n    camels = []\n    for i in range(n):\n        bridge_weight += weights[i]\n        bridge_length += lengths[i]\n        if bridge_weight + weights[i + 1] <= m * bridge_length:\n            camels.append(i + 1)\n        else:\n            break\n\n    if len(camels) == 0:\n        return -1\n\n    result = bridge_length + bridge_weight\n    for i in range(len(camels) - 1):\n        result -= abs(camels[i] - camels[i + 1])\n\n    return result\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    weights = list(map(int, stdin.split()))\n    line = list(zip(range(1, n + 1), weights))\n    line.sort(key=lambda x: (x[1], x[0]))\n    parts = [[line[0][0]]]\n    collapse = False\n    distance = 0\n    for i in range(1, n):\n        if line[i][1] > parts[-1][-1]:\n            distance = min(distance, i - parts[-1][-1] - 1)\n            collapse = True\n        parts.append(line[i])\n    if collapse:\n        return distance\n    for i in range(1, m):\n        if line[0][1] + line[i][1] > parts[-1][-1]:\n            distance = min(distance, i - parts[-1][-1] - 1)\n            collapse = True\n        parts.append(line[i])\n    if collapse:\n        return distance\n    return -1\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n_m = stdin.split()\n    n = int(n_m[0])\n    m = int(n_m[1])\n\n    weights = []\n    for _ in range(n):\n        weights.append(int(stdin.split()[2 * _ + 1]))\n\n    total_weight = sum(weights)\n\n    if total_weight > m:\n        return -1\n\n    parts = [[] for _ in range(m)]\n\n    for i in range(m):\n        parts[i] = [int(stdin.split()[2 * i + 1]), int(stdin.split()[2 * i + 2])]\n\n    ans = float('inf')\n\n    for part in parts:\n        _weights = []\n        _weights.append(0)\n        _weights.append(part[0])\n        for _ in range(1, len(part)):\n            _weights.append(part[_] + _weights[-1])\n\n        for j in range(len(_weights)):\n            if _weights[j] <= m and _weights[j + 1] > m:\n                if _weights[j + 1] - _weights[j] > m - part[0]:\n                    _weights[j + 1] = m - part[0]\n                ans = min(ans, (_weights[j] + _weights[j + 1]) - part[0])\n\n    if ans == float('inf'):\n        return -1\n\n    return str(ans)\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.split()]\n    w = [int(i) for i in stdin.split()][1:]\n    l = [int(i) for i in stdin.split()][2:]\n    v = [int(i) for i in stdin.split()][3:]\n    res = -1\n    for i in range(len(l)):\n        if v[i] > sum(w):\n            res = -1\n        else:\n            res = max(res, sum(l) - sum(l[0:i]))\n    return str(res)\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M = [int(x) for x in stdin.split()]\n    w = [int(x) for x in stdin.split()]\n    v = []\n    for i in range(M):\n        v.append(int(stdin.split()[i + 1]))\n    l = []\n    for i in range(M):\n        l.append(int(stdin.split()[i + 2]))\n\n    answer = 0\n    while True:\n        weights = sorted(list(set(w)))\n        capacity = []\n        for i in range(len(weights)):\n            capacity.append(v[i] - weights[i])\n        if sum(capacity) < 0:\n            print(\"-1\")\n            return\n        print(sum(capacity), weights)\n        break\n\n\nsolution(input())\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 2 2\n   ... 1 4 2\n   ... 10 4\n   ... 2 6\n   ... ''')\n    10\n    >>> solution('''\n   ... 3 2\n   ... 1 4 2\n   ... 10 4\n   ... 2 6\n   ... ''')\n    -1\n    >>> solution('''\n   ... 3 3\n   ... 1 4 2\n   ... 10 4\n   ... 2 6\n   ... ''')\n    10\n    >>> solution('''\n   ... 3 4\n   ... 1 4 2\n   ... 10 4\n   ... 2 6\n   ... ''')\n    10\n    >>> solution('''\n   ... 3 5\n   ... 1 4 2\n   ... 10 4\n   ... 2 6\n   ... ''')\n    10\n    \"\"\"\n    N, M = map(int, stdin.split())\n    cows = [0] * (N + 1)\n    parts = []\n    for i in range(1, N + 1):\n        parts.append(Part(i, *map(int, stdin.split())))\n    for part in parts:\n        part.distance = part.distance + max(0, cows[part.f] - cows[part.t])\n    return str(min(cows[i] - cows[i - 1] for i in range(1, N + 1)))\n\n\nclass Part:\n    def __init__(self, i, f, t, distance):\n        self.i = i\n        self.f = f\n        self.t = t\n        self.distance = distance\n\n\ndef"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M = list(map(int, stdin.split()))\n\n    weights = list(map(int, stdin.split()))\n    weights.insert(0, 0)\n    weights.append(0)\n    lengths = list(map(int, stdin.split()))\n    lengths.insert(0, 0)\n    lengths.append(0)\n    maximum_sum_of_weights = sum(weights)\n    if maximum_sum_of_weights > 10**8:\n        return -1\n\n    length_parts = 1\n    for i in range(1, M + 1):\n        if lengths[i] < lengths[i - 1]:\n            length_parts += 1\n            lengths[i] = lengths[i - 1]\n\n    if length_parts > N:\n        return -1\n\n    bridge_parts = [[] for _ in range(length_parts + 1)]\n    bridge_parts[0] = lengths[:]\n    bridge_weights = [maximum_sum_of_weights] * (length_parts + 1)\n    bridge_weights[0] = 0\n    for i in range(1, length_parts):\n        bridge_parts[i].insert(0, lengths[i - 1])\n        bridge_parts[i].append(lengths[i])\n        bridge_weights[i] = bridge_weights[i - 1] + bridge_parts[i][1] - bridge_parts[i][0]\n\n    ans = 10**8\n    for i in range(length_parts):\n        bridge_sum = bridge_weights[i]\n        for j in range(length_parts):\n            if bridge_sum + bridge_weights[j] <= maximum_sum_of_weights:\n                ans = min(ans, bridge_sum + bridge_weights[j])\n\n    return str(ans)\n\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = list(map(int, stdin.split()))\n    n = int(math.factorial(a))\n    while b < a:\n        a = int(n)\n        b += 1\n        n = int(math.factorial(a))\n    return str(n % 10)\nprint(solution(\"0 10\"))\nprint(solution(\"107 109\"))\nprint(solution(\"12\"))\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.strip().split()\n    n = int(n)\n    k = int(k)\n    if n == 0:\n        return \"0\"\n    def dfs(x):\n        y = int(x)\n        if y == 1:\n            return 1\n        l = int(y*10)\n        if l <= k:\n            return dfs(str(l))+1\n        else:\n            return 0\n    return str(dfs(str(n)))\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(int(math.factorial(a) / math.factorial(b) % 10))\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(sum(list(map(int, str(b * factorial(a) / factorial(b))))))\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    ans = 1\n    while b > 1:\n        ans *= b\n        ans %= a\n        b -= 1\n    return str(ans)\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    c = 0\n    for i in range(b):\n        c *= a\n        c += i + 1\n    return str(c % 10)"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(int(f'{a**b}'[-1]))"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(int(a ** b))\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = (int(x) for x in stdin.split())\n    ans = 1\n    if a <= 1:\n        ans = a\n    while a <= b:\n        ans *= a\n        a -= 1\n    return str(ans % (10 ** 9 + 7))\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    b_ = 1\n    while b_ <= b:\n        a_ = 1\n        while a_ <= a:\n            if a_ + b_ == a and b_ + a_ == b:\n                return str(a_)\n            a_ += 1\n        b_ += 1\n    return str(0)"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    s = stdin[2:-1]\n    home = n - 1\n    steps = 0\n    while steps < d:\n        for i in range(home, 0, -1):\n            if s[i] == '0':\n                home -= 1\n            else:\n                break\n        if home < 0:\n            steps = -1\n        else:\n            steps += 1\n    if steps == -1:\n        return \" -1 \"\n    else:\n        return str(steps)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    x = 1\n    y = 1\n    count = 0\n    while x < n:\n        y = x + d\n        if x + 1 <= y and not stdin[x:y].count('1') == d and y <= n:\n            count += 1\n        x = y\n    if count == 0:\n        return -1\n    return str(count)"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, d = int(stdin[0]), int(stdin[1])\n    lilys = stdin[2].split()\n    min_jumps = float('inf')\n    for i in range(1, n):\n        if not lilys[i - 1]:\n            if i + d <= n and lilys[i + d - 1]:\n                min_jumps = min(min_jumps, d + i + 1)\n    if min_jumps == float('inf'):\n        print(-1)\n    else:\n        print(min_jumps)\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    lily = list(map(int, stdin))\n    visited = set()\n    min_jumps = n\n    for point in range(1, n+1):\n        if lily[point-1] == 0:\n            continue\n        visited.add(point)\n        if point+d < n+1:\n            for jump in range(1, d+1):\n                if lily[point+jump-1] == 0:\n                    visited.add(point+jump)\n                elif lily[point+jump-1] == 1:\n                    continue\n                else:\n                    break\n            if point+jump not in visited:\n                min_jumps = min(min_jumps, point + jump)\n            else:\n                continue\n    if min_jumps == n:\n        return -1\n    return min_jumps\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    d, n, s = int(stdin.split()[0]), int(stdin.split()[1]), stdin.split()[2]\n    lily_p = list(s)\n    if lily_p[0] == '0':\n        return -1\n    if len(lily_p) < n:\n        return -1\n    jumps = 0\n    for i in range(n - 1):\n        if lily_p[i] == '0' and lily_p[i + 1] == '0':\n            return -1\n        if lily_p[i] == '0' and lily_p[i + 1] == '1':\n            continue\n        jumps += 1\n        if i + d <= n - 1 and lily_p[i + d] == '0':\n            continue\n        if i + d <= n - 1 and lily_p[i + d] == '1':\n            jumps += 1\n    return jumps\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, d = map(int, stdin.split())\n    x = 1\n    total = 0\n    \n    while x < n:\n        for i in range(x + 1, x + d + 1):\n            if '1' in str(i):\n                total += 1\n        x += d + 1\n    \n    if total == 0:\n        print(-1)\n    else:\n        print(total)\n\nsolution(input())"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    s = stdin.split()[1]\n    a = 0\n    b = 1\n    while n > 0:\n        if s[a] == '1':\n            if b == d:\n                return -1\n            n -= 1\n            a += d\n            b += d\n        else:\n            a += 1\n    return str(b)\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin_list = stdin.split()\n    n, d = stdin_list[0], stdin_list[1]\n    lily_point = list(map(int, stdin_list[2].rstrip()))\n    # n - 1 points from which the frog can reach home\n    n_points = list(range(1, n))\n    # lily_point - points where there are lily flowers\n    lily_points = []\n    for i in lily_point:\n        lily_points.append(i)\n    # the lily_point can not be in any point of the n points\n    cannot_be_in_n_points = []\n    for i in range(1, n):\n        if i in lily_points:\n            cannot_be_in_n_points.append(i)\n    # the frog can not reach home in any point of the n points\n    can_not_reach_home = []\n    for i in range(1, n):\n        if i not in cannot_be_in_n_points:\n            can_not_reach_home.append(i)\n    # print(n_points, cannot_be_in_n_points)\n    # print(lily_points)\n    # print(can_not_reach_home)\n    if n not in cannot_be_in_n_points or n not in lily_points:\n        print('-1')\n    else:\n        min_jumps = []\n        for i in can_not_reach_home:\n            jump = 1\n            while i + jump <= n:\n                if i + jump not in cannot_be_in_n_points:\n                    min_jumps.append(jump)\n                jump += 1\n        if len(min_jumps) == 0:\n            print('-1')\n        else:\n            print(min(min_jumps))\nstdin = '5 2\\n1001001101'\nsolution(stdin)"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    s = stdin[stdin.index('\\n') + 1:]\n    # print(n, d, s)\n    if n == 1:\n        if s[0] == '0':\n            return -1\n        return 1\n    if n == d:\n        if s[n - 1] == '0':\n            return -1\n        return 1\n    if n == 2:\n        if s[1] == '0':\n            return -1\n        return 1\n    if d == 1:\n        return min(1, max(1, s.count('1')))\n\n    if s[0] == '0' and s[-1] == '0':\n        # print(min(d + 1, max(1, s.count('1'))))\n        return min(d + 1, max(1, s.count('1')))\n    if s[0] == '0':\n        return d + 1\n    if s[-1] == '0':\n        return d + 1\n    if s[0] == '0':\n        return d + 1\n    if s[-1] == '0':\n        return d + 1\n\n    # print(min(d + 1, max(1, s.count('1'))))\n    return min(d + 1, max(1, s.count('1')))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    i = 2\n    while i*i <= n:\n        if n % i == 0:\n            return i\n        i += 1\n    return -1\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for m in range(1, 10**3):\n        if (n * m + 1) % (m + 1) == 0:\n            break\n    return str(m)"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    m = 2\n    while True:\n        if is_prime(m):\n            if n * m + 1 < 1000:\n                return str(m)\n        m += 1\n\ndef"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    print(int(stdin)*(int(stdin)+1) > 2)"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split()))\n    n = stdin[0]\n    for m in range(2, 10**3):\n        if n * m + 1 not in primes:\n            return str(m)\n\nprint(solution(input()))\n\n\"\"\"\ndef"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    primes = []\n    for i in range(2,n):\n        if n%i==0:\n            primes.append(i)\n    for i in range(len(primes)):\n        for j in range(i+1,len(primes)):\n            if primes[i]*primes[j]+1 in primes:\n                return str(primes[i]*primes[j]+1)\n\nsolution(input())\n\nhttps://www.codewars.com/kata/55b1aac60bf49d8ec00001f1/train/python\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    m: int = 2\n    while n * m <= 1000:\n        if n * m + 1 == 0:\n            return f'{m}'\n        m += 1\n    return \"NON\"\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def is_prime(n: int) -> bool:\n        if n == 2:\n            return True\n        if n % 2 == 0 or n <= 1:\n            return False\n        for i in range(3, int(n ** 0.5) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n\n    n = int(stdin)\n    for i in range(int(n ** 0.5), 0, -1):\n        if is_prime(n - i):\n            return str(i)\n    return str(-1)\n\n\nprint(solution(input()))\n\n\ndef"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for m in range(2, n):\n        if n * m + 1 == n ** 2 + 1:\n            break\n    else:\n        print(\"The counterexample is {}\".format(n * m + 1))\n    return \"\"\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''Returns True if Kolya can spend all of his initial n game-coins buying only houses, cars and computers. Otherwise returns False.'''\n    import functools\n    from collections import deque\n\n    def get_pairs(items):\n        return list(map(lambda x: (x, 1), sorted(items, reverse=True)))\n\n    n = int(stdin)\n    if n == 0:\n        return \"YES\"\n    if n == 1:\n        return \"NO\"\n    combinations = get_pairs(range(1, n + 1))\n    for _, _ in combinations:\n        if sum(combinations) == n:\n            return \"YES\"\n    return \"NO\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 6 == 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 1!= 0:\n        return 'NO'\n    if n % (1 * 234 * 567)!= 0:\n        return 'NO'\n    if n % (1 * 123 * 456)!= 0:\n        return 'NO'\n    if n % (1 * 1234)!= 0:\n        return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    while True:\n        if n == 1:\n            return \"YES\"\n        if n == 234:\n            return \"YES\"\n        n -= 1\n    return \"NO\"\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    game_coin = int(stdin)\n    h_cost = 3359\n    c_cost = 1234\n    pc_cost = 123\n    ans = \"NO\"\n\n    if (h_cost * 1 + c_cost * 1 + pc_cost * 1) * 1.234 == game_coin:\n        ans = \"YES\"\n    elif (h_cost * 1 + c_cost * 1 + pc_cost * 2) * 1.234 == game_coin:\n        ans = \"YES\"\n    elif (h_cost * 1 + c_cost * 1 + pc_cost * 3) * 1.234 == game_coin:\n        ans = \"YES\"\n    elif (h_cost * 1 + c_cost * 1 + pc_cost * 4) * 1.234 == game_coin:\n        ans = \"YES\"\n    elif (h_cost * 1 + c_cost * 1 + pc_cost * 5) * 1.234 == game_coin:\n        ans = \"YES\"\n    elif (h_cost * 1 + c_cost * 1 + pc_cost * 6) * 1.234 == game_coin:\n        ans = \"YES\"\n    elif (h_cost * 1 + c_cost * 2 + pc_cost * 1) * 1.234 == game_coin:\n        ans = \"YES\"\n    elif (h_cost * 1 + c_cost * 2 + pc_cost * 2) * 1.234 == game_coin:\n        ans = \"YES\"\n    elif (h_cost * 1 + c_cost * 2 + pc_cost * 3) * 1.234 == game_coin:\n        ans = \"YES\"\n    elif (h_cost * 1 + c_cost * 2 + pc_cost * 4) * 1.234 == game_coin:\n        ans = \"YES\"\n    elif (h_cost * 1 + c_cost * 2 + pc_cost * 5) * 1.234 == game_coin:\n        ans = \"YES\"\n    elif (h_cost * 1 + c_cost * 2 + pc_cost * 6) * 1.234 == game_coin:\n        ans = \"YES\"\n    elif (h_cost * 1 + c_cost * 2 + pc_cost * 7) * 1.234 == game_coin:\n        ans = \"YES\"\n    elif (h_cost * 1 + c_cost * 2 + pc_cost * 8) * 1.234 == game_coin:\n        ans = \"YES\"\n    elif (h_cost * 1 + c_cost * 2 + pc_cost * 9) * 1.234 == game_coin:\n        ans = \"YES\"\n    elif (h_cost * 1 + c_cost * 2 + pc_cost * 10) * 1.234 == game_coin:\n        ans = \"YES\"\n    elif (h_cost * 1 + c_cost * 2 + pc_cost * 11) * 1.234 == game_coin:\n        ans = \"YES\"\n    elif (h_cost * 1 + c_cost * 2 + pc_cost * 12) * 1.234 == game_coin:\n        ans = \"YES\"\n    elif (h_cost * 1 + c_cost * 2 + pc_cost * 13) * 1.234 == game_coin:\n        ans = \"YES\"\n    elif (h_cost * 1 + c_cost * 2 + pc_cost * 14) * 1.234 == game_coin:\n        ans = \"YES\"\n    elif (h_cost * 1 + c_cost * 2 + pc_cost * 15) * 1.234 == game_coin:\n        ans = \"YES\"\n    elif (h_cost * 1 + c_cost * 2 + pc_cost * 16) * 1.234 == game_coin:\n        ans = \"YES\"\n    elif (h_cost * 1 + c_cost * 2 + pc_cost * 17) * 1.234 == game_coin:\n        ans = \"YES\"\n    elif (h_cost * 1 + c_cost * 2 + pc_cost * 18) * 1.234 == game_coin:\n        ans = \"YES\"\n    elif (h_cost * 1 + c_cost * 2 + pc_cost * 19) * 1.234 == game_coin:\n        ans = \"YES\"\n    elif (h_cost * 1 + c_cost * 2 + pc_cost * 20) * 1.234 == game_coin:\n        ans = \"YES\"\n    elif (h_cost * 1 + c_cost * 2 + pc_cost * 21) * 1.234 == game_coin:\n        ans = \"YES\"\n    elif (h_cost * 1 + c_cost * 2 + pc_cost * 22) * 1.234 == game_coin:\n        ans = \"YES\"\n    elif (h_cost * 1 + c_cost * 2 + pc_cost * 23) * 1.234 == game_coin:\n        ans = \"YES\"\n    elif (h_cost * 1 + c_cost * 2 + pc_cost * 24) * 1.234 == game_coin:\n        ans = \"YES\"\n    elif (h_cost * 1 + c_cost * 2 + pc_cost * 25) * 1.234 == game_coin:\n        ans = \"YES\"\n    elif (h_cost * 1 + c_cost * 2 + pc_cost * 26) * 1.234 == game_coin:\n        ans = \"YES\"\n    elif (h_cost * 1 + c_cost * 2 + pc_cost * 27) * 1.234 == game_coin:\n        ans = \"YES\"\n    elif (h_cost * 1 + c_cost * 2 + pc_cost * 28) * 1.234 == game_coin:\n        ans = \"YES\"\n    elif (h_cost * 1 + c_cost * 2 + pc_cost * 29) * 1.234 == game_coin:\n        ans = \"YES\"\n    elif (h_cost * 1 + c_cost * 2 + pc_cost * 30) * 1.234 == game_coin:\n        ans = \"YES\"\n    elif (h_cost * 1 + c_cost * 2 + pc_cost * 31) * 1.234 == game_coin:\n        ans = \"YES\"\n    elif (h_cost * 1 + c_cost * 2 + pc_cost * 32) * 1.234 == game_coin:\n        ans = \"YES\"\n    elif (h_cost * 1 + c_cost * 2 + pc_cost * 33) * 1.234 == game_coin:\n        ans = \"YES\"\n    elif (h_cost * 1 + c_cost * 2 + pc_cost * 34) * 1.234 == game_coin:\n        ans = \"YES\"\n    elif (h_cost * 1 + c_cost * 2 + pc_cost * 35) * 1.234 == game_coin:\n        ans = \"YES\"\n    elif (h_cost * 1 + c_cost * 2 + pc_cost * 36) * 1.234 == game_coin:\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a, b, c = 1, 1, 1\n    for i in range(3):\n        a *= 1234567\n        b *= 1234567\n        c *= 1234567\n    return \"YES\" if n == a + b + c else \"NO\"\n\nsolution(input())\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    inp = stdin\n    inp = inp.split()\n    inp = list(map(int, inp))\n    \n    inp = sorted(inp)\n    inp = sum(inp)\n    \n    if inp == 0:\n        return \"YES\"\n    \n    if inp % 3 == 0:\n        return \"YES\"\n    \n    if inp % 3 == 1:\n        return \"NO\"\n    \n    if inp % 3 == 2:\n        if (inp - 1) % 3 == 0:\n            return \"YES\"\n        return \"NO\"\n\nsolution(inp)"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def convert_score(s):\n        return int(s) * 1\n    input_str = stdin\n    input_str = input_str.strip()\n    score = convert_score(input_str)\n    house_count = score // 23\n    car_count = score % 23\n    computer_count = score % (23 * 4)\n    if (house_count == 0 and car_count == 0 and computer_count == 0):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if (1 * 123 * 456 + 1 * 1 * 234 + 1 * 234 * 123) == (int(stdin) - 123456) else 'NO'\n\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    x1, x2 = map(int, stdin.split()[1].split(\" \"))\n\n    lines = []\n    for _ in range(n):\n        lines.append([int(i) for i in stdin.split()[2 * _ + 2].split(\" \")])\n    lines.sort()\n\n    intersections = []\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            y1, y2 = lines[i]\n            y3, y4 = lines[j]\n            if y1 == y2 and y3 == y4:\n                continue\n            if y3 == y4:\n                continue\n            m1 = (y1 - y2) / (x1 - x2)\n            m2 = (y3 - y4) / (x3 - x4)\n            intersection = x2 * m1 + y2 - x2 * m2\n            if intersection > 0:\n                intersections.append((intersection, x2, y2, x3, y4, x4, y3))\n\n    intersections.sort()\n    for i in range(1, len(intersections) - 1):\n        if intersections[i][0] == intersections[i - 1][0] and intersections[i][0] == intersections[i + 1][0]:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x1, x2 = list(map(int, stdin.split()))\n\n    m = int(input())\n    for _ in range(m):\n        k, b = list(map(int, stdin.split()))\n        if x1 < k * x1 + b < x2:\n            return \"YES\"\n    return \"NO\"\n\n\nprint(solution(input()))\n\n\n'''\n\n\ndef"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return 'NO'\n    x1, x2 = map(int, stdin.split())\n    lines = []\n    for _ in range(n):\n        line = list(map(int, stdin.split()))\n        lines.append(line)\n    for i in range(n):\n        for j in range(i+1, n):\n            if lines[i][0] * lines[j][1] + lines[i][1] * lines[j][0]!= 0:\n                return 'NO'\n    for i in range(n):\n        for j in range(i+1, n):\n            if lines[i][0]!= 0 and lines[i][0] == lines[j][0]:\n                if x1 >= min(lines[i][0], lines[j][0]) and x1 <= max(lines[i][0], lines[j][0]):\n                    return 'YES'\n            if lines[i][1]!= 0 and lines[i][1] == lines[j][1]:\n                if x2 >= min(lines[i][1], lines[j][1]) and x2 <= max(lines[i][1], lines[j][1]):\n                    return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x_1, x_2 = map(int, stdin.strip().split())\n\n    for i in range(1, n):\n        x_i = a * x_i + b\n        if x_i <= x_2:\n            if 0 <= x_i <= x_2:\n                return 'Yes'\n        else:\n            if 0 <= x_i <= x_1:\n                return 'Yes'\n    return 'No'\n    \n    return 'No'"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    N = int(stdin)\n    x1, x2 = map(int, stdin.split())\n    res = [\"NO\"] * N\n    for i in range(N):\n        x, y = map(int, stdin.split())\n        if (x <= x1 and x <= x2) or (x >= x1 and x >= x2):\n            res[i] = \"YES\"\n    return \"\\n\".join(res)\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    pass"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x_1, x_2 = map(int, stdin.split())\n    line_1_coeffs = list(map(int, stdin.split()))\n    line_2_coeffs = list(map(int, stdin.split()))\n    if n == 1:\n        return 'NO'\n    if n == 2:\n        return 'YES' if x_1 < x_2 else 'NO'\n    points = []\n    for i in range(n):\n        if (x_1 > line_1_coeffs[i]) or (x_2 < line_2_coeffs[i]) or (x_1 == line_1_coeffs[i] and x_2 == line_2_coeffs[i]):\n            points.append((line_1_coeffs[i], line_2_coeffs[i]))\n    points.sort()\n    if len(points) == 2:\n        return 'YES'\n    else:\n        return 'NO'\n\nstdin = '5\\n1 2\\n1 2\\n1 0\\n0 1\\n0 2'\nprint(solution(stdin))"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a, b = map(int, stdin.split()[1:3])\n    arr = sorted(map(int, stdin.split()[3:]))\n    points = set()\n    for i in range(n):\n        for j in range(i + 1, n):\n            points.add((arr[i], arr[j]))\n    points = list(points)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (points[i][0] - a) * (points[j][0] - a) <= 0 and (points[i][1] - b) * (points[j][1] - b) <= 0:\n                return \"YES\"\n    return \"NO\""
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x1, x2 = list(map(int, stdin.split()))\n    lines = []\n    for i in range(n):\n        lines.append([int(x) for x in stdin.split()])\n\n    for i in range(len(lines)):\n        for j in range(i + 1, len(lines)):\n            if lines[i][0]!= lines[j][0] and lines[i][0]!= lines[j][1]:\n                if lines[i][0] > x1 and lines[i][0] < x2 and lines[j][0] > x1 and lines[j][0] < x2:\n                    if lines[i][1]!= lines[j][1]:\n                        if lines[i][1] > x1 and lines[i][1] < x2 and lines[j][1] > x1 and lines[j][1] < x2:\n                            return 'YES'\n    return 'NO'"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for _ in range(n):\n        x1, x2 = map(int, stdin.split())\n        if x1 == x2:\n            print('NO')\n            continue\n        k1, k2 = map(int, stdin.split())\n        if x1 == k1:\n            print('YES')\n        elif x2 == k2:\n            print('YES')\n        else:\n            print('NO')\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    dp = {1:1}\n    for i in range(2, n+1):\n        dp[i] = 1 + dp.get(i-1, 0) + dp.get(i-2, 0) + dp.get(i-3, 0)\n    return str(dp[n])\n\nprint(solution(input()))"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(len({sum(int(x) for x in y.split(',')) for y in stdin.splitlines()}.difference({8})))\n\n\nstdin = '1,3,2,5,1,3,4,7,5'\nprint(solution(stdin))"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    #print(n)\n    \n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 5\n    if n == 5:\n        return 5\n    if n == 6:\n        return 6\n    if n == 7:\n        return 7\n    if n == 8:\n        return 7\n    if n == 9:\n        return 8\n    if n == 10:\n        return 8\n    if n == 11:\n        return 9\n    if n == 12:\n        return 9\n    if n == 13:\n        return 10\n    if n == 14:\n        return 11\n    if n == 15:\n        return 12\n    if n == 16:\n        return 13\n    if n == 17:\n        return 14\n    if n == 18:\n        return 14\n    if n == 19:\n        return 15\n    if n == 20:\n        return 16\n    if n == 21:\n        return 17\n    if n == 22:\n        return 18\n    if n == 23:\n        return 18\n    if n == 24:\n        return 19\n    if n == 25:\n        return 20\n    if n == 26:\n        return 21\n    if n == 27:\n        return 22\n    if n == 28:\n        return 23\n    if n == 29:\n        return 24\n    if n == 30:\n        return 25\n    if n == 31:\n        return 26\n    if n == 32:\n        return 27\n    if n == 33:\n        return 28\n    if n == 34:\n        return 29\n    if n == 35:\n        return 30\n    if n == 36:\n        return 31\n    if n == 37:\n        return 32\n    if n == 38:\n        return 33\n    if n == 39:\n        return 34\n    if n == 40:\n        return 35\n    if n == 41:\n        return 36\n    if n == 42:\n        return 37\n    if n == 43:\n        return 38\n    if n == 44:\n        return 39\n    if n == 45:\n        return 40\n    if n == 46:\n        return 41\n    if n == 47:\n        return 42\n    if n == 48:\n        return 43\n    if n == 49:\n        return 44\n    if n == 50:\n        return 45\n    if n == 51:\n        return 46\n    if n == 52:\n        return 47\n    if n == 53:\n        return 48\n    if n == 54:\n        return 49\n    if n == 55:\n        return 50\n    if n == 56:\n        return 51\n    if n == 57:\n        return 52\n    if n == 58:\n        return 53\n    if n == 59:\n        return 54\n    if n == 60:\n        return 55\n    if n == 61:\n        return 56\n    if n == 62:\n        return 57\n    if n == 63:\n        return 58\n    if n == 64:\n        return 59\n    if n == 65:\n        return 60\n    if n == 66:\n        return 61\n    if n == 67:\n        return 62\n    if n == 68:\n        return 63\n    if n == 69:\n        return 64\n    if n == 70:\n        return 65\n    if n == 71:\n        return 66\n    if n == 72:\n        return 67\n    if n == 73:\n        return 68\n    if n == 74:\n        return 69\n    if n == 75:\n        return 70\n    if n == 76:\n        return 71\n    if n == 77:\n        return 72\n    if n == 78:\n        return 73\n    if n == 79:\n        return 74\n    if n == 80:\n        return 75\n    if n == 81:\n        return 76\n    if n == 82:\n        return 77\n    if n == 83:\n        return 78\n    if n == 84:\n        return 79\n    if n == 85:\n        return 80\n    if n == 86:\n        return 81\n    if n == 87:\n        return 82\n    if n == 88:\n        return 83\n    if n == 89:\n        return 84\n    if n == 90:\n        return 85\n    if n == 91:\n        return 86\n    if n == 92:\n        return 87\n    if n == 93:\n        return 88\n    if n == 94:\n        return 89\n    if n == 95:\n        return 90\n    if n == 96:\n        return 91\n    if n == 97:\n        return 92\n    if n == 98:\n        return 93\n    if n == 99:\n        return 94\n    if n == 100:\n        return 95\n    if n == 101:\n        return 96\n    if n == 102:\n        return 97\n    if n == 103:\n        return 98\n    if n == 104:\n        return 99\n    if n == 105:\n        return 100\n    if n == 106:\n        return 101\n    if n == 107:\n        return 102\n    if n == 108:\n        return 103\n    if n == 109:\n        return 104\n    if n == 110:\n        return 105\n    if n == 111:\n        return 106\n    if n == 112:\n        return 107\n    if n == 113:\n        return 108\n    if n == 114:\n        return 109\n    if n == 115:\n        return 110\n    if n == 116:\n        return 111\n    if n == 117:\n        return 112\n    if n == 118:\n        return 113\n    if n == 119:\n        return 114\n    if n == 120:\n        return 115\n    if n == 121:\n        return 116\n    if n == 122:\n        return 117\n    if n == 123:\n        return 118\n    if n == 124:\n        return 119\n    if n == 125:\n        return 120\n    if n == 126:\n        return 121\n    if n == 127:\n        return 122\n    if n == 128:\n        return 123\n    if n == 129:\n        return 124\n    if n == 130:\n        return 125\n    if n == 131:\n        return 126\n    if n == 132:\n        return 127\n    if n == 133:\n        return 128\n    if n == 134:\n        return 129\n    if n == 135:\n        return 130\n    if n == 136:\n        return 131\n    if n == 137:\n        return 132\n    if n == 138:\n        return 133\n    if n == 139:\n        return 134\n    if n == 140:\n        return 135\n    if n == 141:\n        return 136\n    if n == 142:\n        return 137\n    if n == 143:\n        return 138\n    "
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(n + 1):\n        for j in range(i + 1):\n            if j == i:\n                continue\n            if i + j == n:\n                count += 1\n                break\n            if (i, j) == (1, 1):\n                continue\n            if (i, j) == (n, n):\n                count += 1\n                break\n            if (i, j) == (n, n - 1):\n                count += 1\n                break\n            if (i, j) == (n - 1, n - 2):\n                count += 1\n                break\n            if (i, j) == (n - 2, n - 1):\n                count += 1\n                break\n            if (i, j) == (n - 1, n - 1):\n                count += 1\n                break\n            if (i, j) == (n - 1, n):\n                count += 1\n                break\n            if (i, j) == (n, n - 1):\n                count += 1\n                break\n            if (i, j) == (n - 2, n - 1):\n                count += 1\n                break\n            if (i, j) == (n - 2, n - 2):\n                count += 1\n                break\n            if (i, j) == (n - 3, n - 1):\n                count += 1\n                break\n            if (i, j) == (n - 3, n):\n                count += 1\n                break\n            if (i, j) == (n - 3, n - 2):\n                count += 1\n                break\n            if (i, j) == (n - 2, n - 3):\n                count += 1\n                break\n            if (i, j) == (n - 1, n - 3):\n                count += 1\n                break\n            if (i, j) == (n, n - 3):\n                count += 1\n                break\n            if (i, j) == (n - 2, n - 3):\n                count += 1\n                break\n            if (i, j) == (n - 1, n - 3):\n                count += 1\n                break\n            if (i, j) == (n - 1, n - 2):\n                count += 1\n                break\n            if (i, j) == (n - 1, n - 1):\n                count += 1\n                break\n            if (i, j) == (n, n - 1):\n                count += 1\n                break\n            if (i, j) == (n - 2, n - 1):\n                count += 1\n                break\n            if (i, j) == (n - 2, n):\n                count += 1\n                break\n            if (i, j) == (n - 1, n - 1):\n                count += 1\n                break\n            if (i, j) == (n - 1, n - 2):\n                count += 1\n                break\n            if (i, j) == (n - 2, n - 2):\n                count += 1\n                break\n            if (i, j) == (n - 3, n - 1):\n                count += 1\n                break\n            if (i, j) == (n - 3, n):\n                count += 1\n                break\n            if (i, j) == (n - 3, n - 2):\n                count += 1\n                break\n            if (i, j) == (n - 2, n - 3):\n                count += 1\n                break\n            if (i, j) == (n - 1, n - 3):\n                count += 1\n                break\n            if (i, j) == (n, n - 3):\n                count += 1\n                break\n            if (i, j) == (n - 2, n - 3):\n                count += 1\n                break\n            if (i, j) == (n - 1, n - 3):\n                count += 1\n                break\n            if (i, j) == (n - 1, n - 2):\n                count += 1\n                break\n            if (i, j) == (n - 1, n - 1):\n                count += 1\n                break\n            if (i, j) == (n, n - 1):\n                count += 1\n                break\n            if (i, j) == (n - 2, n - 1):\n                count += 1\n                break\n            if (i, j) == (n - 2, n):\n                count += 1\n                break\n            if (i, j) == (n - 1, n - 1):\n                count += 1\n                break\n            if (i, j) == (n - 1, n - 2):\n                count += 1\n                break\n            if (i, j) == (n - 2, n - 2):\n                count += 1\n                break\n            if (i, j) == (n - 3, n - 1):\n                count += 1\n                break\n            if (i, j) == (n - 3, n):\n                count += 1\n                break\n            if (i, j) == (n - 3, n - 2):\n                count += 1\n                break\n            if (i, j) == (n - 2, n - 3):\n                count += 1\n                break\n            if (i, j) == (n - 1, n - 3):\n                count += 1\n                break\n            if (i, j) == (n, n - 3):\n                count += 1\n                break\n            if (i, j) == (n - 2, n - 3):\n                count += 1\n                break\n            if (i, j) == (n - 1, n - 3):\n                count += 1\n                break\n            if (i, j) == (n - 1, n - 2):\n                count += 1\n                break\n            if (i, j) == (n - 1, n - 1):\n                count += 1\n                break\n            if (i, j) == (n, n - 1):\n                count += 1\n                break\n            if (i, j) == (n - 2, n - 1):\n                count += 1\n                break\n            if (i, j) == (n - 2, n):\n                count += 1\n                break\n            if (i, j) == (n - 1, n - 1):\n                count += 1\n                break\n            if (i, j) == (n - 1, n - 2):\n                count += 1\n                break\n            if (i, j) == (n - 2, n - 2):\n                count += 1\n                break\n            if (i, j) == (n - 3, n - 1):\n                count += 1\n                break\n            if (i, j) == (n - 3, n):\n                count += 1\n                break\n            if (i, j) == (n - 3, n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('''7\n    ''')\n    4\n    >>> solution('''8\n    ''')\n    5\n    >>> solution('''9\n    ''')\n    5\n    >>> solution('''1\n    ''')\n    1\n    >>> solution('''2\n    ''')\n    1\n    >>> solution('''3\n    ''')\n    1\n    >>> solution('''11\n    ''')\n    3\n    >>> solution('''5\n    ''')\n    2\n    >>> solution('''1\n    ''')\n    1\n    >>> solution('''11\n    ''')\n    1\n    >>> solution('''11\n    ''')\n    1\n    >>> solution('''11\n    ''')\n    1\n    >>> solution('''11\n    ''')\n    1\n    >>> solution('''7\n    ''')\n    4\n    >>> solution('''11\n    ''')\n    1\n    >>> solution('''1\n    ''')\n    1\n    >>> solution('''11\n    ''')\n    1\n    >>> solution('''11\n    ''')\n    1\n    >>> solution('''11\n    ''')\n    1\n    >>> solution('''11\n    ''')\n    1\n    >>> solution('''11\n    ''')\n    1\n    >>> solution('''1\n    ''')\n    1\n    >>> solution('''11\n    ''')\n    1\n    >>> solution('''1\n    ''')\n    1\n    >>> solution('''11\n    ''')\n    1\n    >>> solution('''1\n    ''')\n    1\n    >>> solution('''11\n    ''')\n    1\n    >>> solution('''1\n    ''')\n    1\n    >>> solution('''11\n    ''')\n    1\n    >>> solution('''11\n    ''')\n    1\n    >>> solution('''11\n    ''')\n    1\n    >>> solution('''11\n    ''')\n    1\n    >>> solution('''11\n    ''')\n    1\n    >>> solution('''11\n    ''')\n    1\n    >>> solution('''11\n    ''')\n    1\n    >>> solution('''11\n    ''')\n    1\n    >>> solution('''11\n    ''')\n    1\n    >>> solution('''11\n    ''')\n    1\n    >>> solution('''11\n    ''')\n    1\n    >>> solution('''11\n    ''')\n    1\n    >>> solution('''11\n    ''')\n    1\n    >>> solution('''11\n    ''')\n    1\n    >>> solution('''11\n    ''')\n    1\n    >>> solution('''11\n    ''')\n    1\n    >>> solution('''11\n    ''')\n    1\n    >>> solution('''11\n    ''')\n    1\n    >>> solution('''11\n    ''')\n    1\n    >>> solution('''11\n    ''')\n    1\n    >>> solution('''11\n    ''')\n    1\n    >>> solution('''11\n    ''')\n    1\n    >>> solution('''11\n    ''')\n    1\n    >>> solution('''11\n    ''')\n    1\n    >>> solution('''11\n    ''')\n    1\n    >>> solution('''11\n    ''')\n    1\n    >>> solution('''11\n    ''')\n    1\n    >>> solution('''11\n    ''')\n    1\n    >>> solution('''11\n    ''')\n    1\n    >>> solution('''11\n    ''')\n    1\n    >>> solution('''11\n    ''')\n    1\n    >>> solution('''11\n    ''')\n    1\n    >>> solution('''11\n    ''')\n    1\n    >>> solution('''11\n    ''')\n    1\n    >>> solution('''11\n    ''')\n    1\n    >>> solution('''11\n    ''')\n    1\n    >>> solution('''11\n    ''')\n    1\n    >>> solution('''11\n    ''')\n    1\n    >>> solution('''11\n    ''')\n    1\n    >>> solution('''11\n    ''')\n    1\n    >>> solution('''11\n    ''')\n    1\n    >>> solution('''11\n    ''')\n    1\n    >>> solution('''11\n    ''')\n    1\n    >>> solution('''11\n    ''')\n    1\n    >>> solution('''11\n    ''')\n    1\n    >>> solution('''11\n    ''')\n    1\n    >>> solution('''11\n    ''')\n    1\n    >>> solution('''11\n    ''')\n    1\n    >>> solution('''11\n    ''')\n    1\n    >>> solution('''11\n    ''')\n    1\n    >>> solution('''11\n    ''')\n    1\n    >>> solution('''11\n    ''')\n    1\n    >>> solution('''11\n    ''')\n    1\n    >>> solution('''11\n    ''')\n    1\n    >>> solution('''11\n    ''')\n    1\n    >>> solution('''11\n    ''')\n    1\n    >>> solution('''11\n    ''')\n    1\n    >>> solution('''11\n    ''')\n    1\n    >>> solution('''11\n    ''')\n    1\n    >>> solution('''11\n    ''')\n    1\n    >>> solution('''11\n    ''')\n    1\n    >>> solution('''11\n    ''')\n    1\n    >>> solution('''11\n    ''')\n    1\n    >>> solution('''11\n    ''')\n    1\n    >>> solution('''11\n    ''')\n    1\n    >>> solution('''11\n    ''')\n    1\n    >>> solution('''11\n    ''')\n    1\n    >>> solution('''11\n    ''')\n    1\n    >>> solution('''11\n    ''')\n    1\n    >>> solution('''11\n    ''')\n    1\n    >>> solution('''11\n    ''')\n    1\n    >>> solution('''11\n    ''')\n    1\n    >>> solution('''11\n    ''')\n    1\n    >>> solution('''11\n    ''')\n    1\n    >>> solution('''11\n    ''')\n    1\n    >>> solution('''11\n    ''')\n    1\n    >>> solution('''11\n    ''')\n    1\n    >>> solution('''11\n    ''')\n    "
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # Write an action using print\n    # To debug: print(\"Debug messages...\", file=sys.stderr, flush=True)\n\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n\n    for l in range(2, n):\n        for i in range(n-l):\n            j = i + l\n            for k in range(i, j):\n                dp[i][j] += dp[i][k] * dp[k+1][j]\n            dp[i][j] %= 1000000007\n\n    return dp[0][n-1]\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    counts = {}\n    for k in range(1, n + 1):\n        w = 0\n        for i in range(1, k + 1):\n            w += i\n            if w in counts:\n                counts[w] += 1\n            else:\n                counts[w] = 1\n    solutions = []\n    for k, v in counts.items():\n        if v == 1:\n            solutions.append(k)\n    return len(solutions)\n\nprint(solution(input()))"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_n = int(stdin)\n    max_weight = 0\n    for i in range(1, input_n + 1):\n        weights = []\n        s = set()\n        j = 1\n        while True:\n            if i == j:\n                if max_weight < len(weights):\n                    max_weight = len(weights)\n                break\n            if len(weights) == max_weight:\n                break\n            if weights:\n                if weights[-1] == i - 1:\n                    weights.append(i)\n                    j += 1\n                    continue\n            weights.append(i)\n            s.add(i)\n            j += 1\n    return str(max_weight)\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    res = 0\n    for i in range(1, n+1):\n        res += i\n        if res > n:\n            return str(res)\n    return str(res)\n\nprint(solution(input()))\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    def possible(a):\n        return sum([a >= x+1 for x in range(1,n)]) == k\n    return str(min([i+1 for i in range(n) if possible(i)])) +'' + str(max([i+1 for i in range(n) if possible(i)]))"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(min(n-k, n-1, k-1) if n-k >= 1 else max(n-k, n-1, k-1))"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n\n    return str(min(n - k, k)) + \" \" + str(max(n - k, k))\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    k = int(stdin[1])\n    already_hired = set()\n    minimum_hired = n\n    maximum_available = 0\n    for i in range(1, n+1):\n        if i not in already_hired:\n            already_hired.add(i)\n            if i == k:\n                maximum_available += 1\n            elif i+1 == k:\n                minimum_hired = min(minimum_hired, i)\n            elif i-1 == k:\n                minimum_hired = min(minimum_hired, i)\n        if minimum_hired <= i and i < maximum_available:\n            return '1 {}'.format(minimum_hired)\n        elif maximum_available <= i and i < minimum_hired:\n            return '2 {}'.format(maximum_available)\n    return '-1 -1'\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return f'{min(range(1, n + 1), key=lambda x: x - k)} {max(range(1, n + 1), key=lambda x: x + k)}'"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split()\n    n = int(n)\n    k = int(k)\n\n    good = n-k\n    bad = k\n\n    return f\"{good} {bad}\""
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return f\"{n} {min(k, n)}\"\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return f\"{min(k,n - k) + 1} {max(k,n - k) + 1}\"\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return '{} {}'.format(min(k + 1, n - k), max(k + 1, n - k))\n"
    },
    {
        "number": 288,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin_list = stdin.split()\n    n = int(stdin_list.pop(0))\n    return str(2 * (n - 1))"
    },
    {
        "number": 288,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n = int(lines.pop(0))\n    for i in range(n):\n        first = int(lines.pop(0))\n        second = int(lines.pop(0))\n        if abs(first - second) >= 2:\n            return str(first)\n    return str(n)\n"
    },
    {
        "number": 288,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return 1"
    },
    {
        "number": 288,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(n - 1)\n"
    },
    {
        "number": 288,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    max_games = 1\n    while True:\n        if all(set(range(1, N + 1)) - set(games) == set(range(1, N + 1)) - games):\n            break\n        max_games += 1\n        games.clear()\n        games.extend([i for i in range(1, N + 1) if i not in games])\n    return str(max_games)\n"
    },
    {
        "number": 288,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(\n        max(\n            (\n                len([x for x in stdin.split() if int(x) == 1]) - 1\n                + len([x for x in stdin.split() if int(x) == 2])\n            )\n            * len(stdin.split())\n        )\n    )\n"
    },
    {
        "number": 288,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return (n - 1)"
    },
    {
        "number": 288,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    game_count = {1:1}\n    game_winners = {1:1}\n    while len(game_winners) < n:\n        winners = {}\n        for winner in game_winners.keys():\n            for player in game_winners.keys():\n                if game_winners[player] - game_winners[winner] > 1:\n                    winners[player] = game_winners[player]\n        winner_count = 0\n        for winner in winners.keys():\n            winner_count += game_winners[winner]\n        if winner_count in game_count.keys():\n            continue\n        game_count[winner_count] = 1\n        for winner in winners.keys():\n            game_winners[winner] = game_winners[winner] + 1\n    return max(game_count.keys())\n"
    },
    {
        "number": 288,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    clash = 0\n    winning = 1\n    if N == 1:\n        return str(winning)\n    elif N == 2:\n        return str(winning)\n    elif N == 3:\n        return str(winning)\n    elif N == 4:\n        return str(winning)\n    elif N == 5:\n        return str(winning)\n    elif N == 6:\n        return str(winning)\n    elif N == 7:\n        return str(winning)\n    elif N == 8:\n        return str(winning)\n    elif N == 9:\n        return str(winning)\n    else:\n        for i in range(1, N):\n            if N % i == 0:\n                clash += 1\n        if clash == 1:\n            return str(winning)\n        else:\n            return str(winning + 1)\n"
    },
    {
        "number": 288,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin)\n  if n == 1:\n    return 1\n  else:\n    return 2\n\n\"\"\"\n\ndef"
    },
    {
        "number": 289,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    for i in range(n):\n        if stdin[i] == 'K':\n            for j in range(i, n):\n                if stdin[j] == 'V':\n                    stdin = stdin[:i] + 'V' + stdin[j+1:]\n                    break\n    return stdin\n\nprint(solution(input()))\nprint(solution(input()))\nprint(solution(input()))\n\n\n'''\n"
    },
    {
        "number": 289,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    import re\n    import sys\n    import pdb\n    pdb.set_trace()\n    s = stdin.strip()\n    if len(s) <= 1:\n        return 0\n    counter = 0\n    # pdb.set_trace()\n    pattern = re.compile(r'(\\w)\\1{1}')\n    for i in range(1, len(s)):\n        if pattern.search(s[:i]):\n            print(s[:i],i)\n            counter += 1\n    return counter\n\nsolution('')\n\n\n\ndef"
    },
    {
        "number": 289,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    cnt = {'V': 0, 'K': 0}\n    max = 1\n    if stdin.find('V') == stdin.rfind('V'):\n        return str(cnt['V'] * stdin.count('V'))\n    for ch in stdin:\n        if ch == 'K':\n            cnt['K'] += 1\n            max = max if max > cnt['K'] else cnt['K']\n            cnt['K'] = 0\n        elif ch == 'V':\n            cnt['V'] += 1\n            max = max if max > cnt['V'] else cnt['V']\n            cnt['V'] = 0\n    return str(max)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 289,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    count = 0\n    for i in range(0, len(s)):\n        for j in range(i+1, len(s)+1):\n            count += 1\n            if s[i:j] == \"VK\":\n                return count\n\ndef"
    },
    {
        "number": 289,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    count = 0\n    if not s:\n        return '1'\n    if len(s) < 2:\n        return 0\n    if len(s) >= 3:\n        k = 0\n        while k < len(s):\n            if s[k] == 'V' and s[k + 1] == 'V' or s[k] == 'K' and s[k + 1] == 'K':\n                if s[k] == 'V':\n                    k = k + 2\n                    count += 1\n                elif s[k] == 'K':\n                    k = k + 3\n                    count += 1\n            k = k + 1\n    return count\n\n\nprint(solution(input()))"
    },
    {
        "number": 289,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n"
    },
    {
        "number": 289,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s: str = stdin\n    n: int = len(s)\n    if n == 1:\n        return 0\n    \n    if n == 2:\n        if s[0] == 'V' and s[1] == 'K':\n            return 1\n        return 0\n    \n    if n == 3:\n        if s[0] == 'V' and s[1] == 'K':\n            return 2\n        if s[0] == 'V':\n            return 1\n        if s[0] == 'K':\n            return 1\n        return 0\n    \n    if n == 4:\n        if s[0] == 'V' and s[1] == 'K' and s[2] == 'V':\n            return 3\n        if s[0] == 'V' and s[1] == 'K' and s[2] == 'K':\n            return 2\n        if s[0] == 'V' and s[1] == 'K' and s[3] == 'V':\n            return 2\n        if s[0] == 'V' and s[1] == 'K' and s[3] == 'K':\n            return 1\n        if s[0] == 'V' and s[1] == 'K' and s[2] == 'V':\n            return 1\n        if s[0] == 'V' and s[1] == 'K' and s[2] == 'K':\n            return 1\n        if s[0] == 'V' and s[1] == 'K' and s[3] == 'K':\n            return 0\n        if s[0] == 'V' and s[2] == 'K' and s[3] == 'V':\n            return 2\n        if s[0] == 'V' and s[2] == 'K' and s[3] == 'K':\n            return 1\n        if s[0] == 'V' and s[2] == 'K' and s[3] == 'V':\n            return 1\n        if s[0] == 'V' and s[2] == 'K' and s[3] == 'K':\n            return 0\n        if s[0] == 'V' and s[3] == 'K' and s[4] == 'V':\n            return 3\n        if s[0] == 'V' and s[3] == 'K' and s[4] == 'K':\n            return 2\n        if s[0] == 'V' and s[3] == 'K' and s[4] == 'V':\n            return 2\n        if s[0] == 'V' and s[3] == 'K' and s[4] == 'K':\n            return 1\n        if s[0] == 'V' and s[3] == 'K' and s[4] == 'V':\n            return 1\n        if s[0] == 'V' and s[3] == 'K' and s[4] == 'K':\n            return 0\n        if s[0] == 'V' and s[4] == 'K' and s[5] == 'V':\n            return 4\n        if s[0] == 'V' and s[4] == 'K' and s[5] == 'K':\n            return 3\n        if s[0] == 'V' and s[4] == 'K' and s[5] == 'V':\n            return 3\n        if s[0] == 'V' and s[4] == 'K' and s[5] == 'K':\n            return 2\n        if s[0] == 'V' and s[4] == 'K' and s[5] == 'V':\n            return 2\n        if s[0] == 'V' and s[4] == 'K' and s[5] == 'K':\n            return 1\n        if s[0] == 'V' and s[4] == 'K' and s[5] == 'V':\n            return 1\n        if s[0] == 'V' and s[4] == 'K' and s[5] == 'K':\n            return 0\n        if s[0] == 'V' and s[5] == 'K' and s[6] == 'V':\n            return 6\n        if s[0] == 'V' and s[5] == 'K' and s[6] == 'K':\n            return 5\n        if s[0] == 'V' and s[5] == 'K' and s[6] == 'V':\n            return 5\n        if s[0] == 'V' and s[5] == 'K' and s[6] == 'K':\n            return 4\n        if s[0] == 'V' and s[5] == 'K' and s[6] == 'V':\n            return 4\n        if s[0] == 'V' and s[5] == 'K' and s[6] == 'K':\n            return 3\n        if s[0] == 'V' and s[5] == 'K' and s[6] == 'V':\n            return 3\n        if s[0] == 'V' and s[5] == 'K' and s[6] == 'K':\n            return 2\n        if s[0] == 'V' and s[5] == 'K' and s[6] == 'V':\n            return 2\n        if s[0] == 'V' and s[5] == 'K' and s[6] == 'K':\n            return 1\n        if s[0] == 'V' and s[5] == 'K' and s[6] == 'V':\n            return 1\n        if s[0] == 'V' and s[5] == 'K' and s[6] == 'K':\n            return 0\n        if s[0] == 'V' and s[6] == 'K' and s[7] == 'V':\n            return 7\n        if s[0] == 'V' and s[6] == 'K' and s[7] == 'K':\n            return 6\n        if s[0] == 'V' and s[6] == 'K' and s[7] == 'V':\n            return 6\n        if s[0] == 'V' and s[6] == 'K' and s[7] == 'K':\n            return 5\n        if s[0] == 'V' and s[6] == 'K' and s[7] == 'V':\n            return 5\n        if s[0] == 'V' and s[6] == 'K' and s[7] == 'K':\n            return 4\n        if s[0] == 'V' and s[6] == 'K' and s[7] == 'V':\n            return 4\n        if s[0] == 'V' and s[6] == 'K'"
    },
    {
        "number": 289,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    \"\"\"\n    # your code here\n    string = stdin.split()\n    string = ''.join(string)\n    print(string)\n    s = string.replace('V', 'K')\n    s = s.replace('K', 'V')\n    print(s)\n    \"\"\"\n    vk = stdin.count('V')\n    vk = stdin.count('K')\n    if vk == 0:\n        return 0\n    if vk == 2:\n        return 1\n    count = 0\n    for i in range(len(stdin)-2):\n        if stdin[i] == 'V':\n            count += 1\n        if count == 0 and stdin[i] == 'V' and stdin[i+1] == 'K' and stdin[i+2] == 'V':\n            count += 1\n            continue\n        if count == 1:\n            count = 0\n    return count"
    },
    {
        "number": 289,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin\n    k = 0\n    ans = 0\n    for i in range(1, len(string)):\n        # print(string[i-1])\n        if string[i]!= string[i-1]:\n            k = 0\n        k += 1\n        if string[i] == 'K':\n            ans = max(ans, k)\n        elif string[i] == 'V':\n            ans = max(ans, k-1)\n    print(ans)\n    return ''\n"
    },
    {
        "number": 289,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(3 * (n ** 2 - n))"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    #TODO\n    return str(n)\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    number_of_segments = 0\n    for i in range(1, n + 1):\n        number_of_segments += i\n    return str(number_of_segments)\n\nprint(solution(input()))\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(min(3, int(n ** 0.5)))\n\nprint(solution(input()))"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(min(2**(n-i) for i in range(1, n+1)))"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    min_segments = 4\n    while min_segments < n:\n        min_segments += 2\n    return str(min_segments)"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l = []\n    c = 1\n    for _ in range(n):\n        l.append(c)\n        c += 1\n    dp = [[-1 for _ in range(n)] for _ in range(n)]\n    print(l)\n    print(dp)\n    for i in range(n):\n        if i == 0:\n            dp[i][i] = 1\n        else:\n            for j in range(i):\n                if l[i] > l[j]:\n                    dp[i][j] = max(dp[i][j], dp[i-1][j] + 1)\n                else:\n                    dp[i][j] = max(dp[i][j], dp[i-1][j])\n    return dp[n-1][n-1]\n\n\nprint(solution(sys.stdin.read()))\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n = int(stdin)\n    \n    # O(n)\n    if n == 1:\n        return 1\n    \n    # O(1)\n    if n == 2:\n        return 2\n    \n    # O(1)\n    if n == 3:\n        return 3\n    \n    # O(1)\n    if n == 4:\n        return 4\n\n    # O(2^(n-1))\n    if n > 2:\n        return int((2**(n-1)) + solution(n-1))\n    \n    # O(2^(n))\n    if n > 2:\n        return int((2**n) + solution(n-1))\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    x = 1\n    y = 0\n    res = 1\n    while x <= N:\n        while y <= N - x:\n            res += 1\n            if x == 1 and y == 0:\n                break\n            x = x * 2\n            y += 1\n        x = 1\n        y = 0\n    return str(res)\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    res = 1\n    while a < b:\n        a *= 3\n        res += 1\n        b *= 2\n    return str(res)"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    (a, b) = map(int, stdin.split())\n    x = a\n    y = b\n    while x < y:\n        x *= 3\n        x += 2\n    return str(x - y)\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    while a < b:\n        a *= 3\n        b *= 2\n    return str(b - a)\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = list(map(int, stdin.split()))\n    if a > b:\n        return \"1\"\n    else:\n        return \"0\"\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    periods = 0\n    while a < b:\n        a *= 3\n        a += 2\n        periods += 1\n    return str(periods)"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\na,b = [int(x) for x in stdin.split()]\n\nx = a * 2\ny = b * 3\n\nwhile x <= y:\n    x += x\n    y += y\n\nprint(y - x)"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a > b:\n        return 1\n    while a!= b:\n        if a < b:\n            a *= 3\n            b *= 2\n        else:\n            a *= 2\n            b *= 3\n    return int(a / b)\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split(\" \")\n    a = int(a)\n    b = int(b)\n    while a!= 0 and b!= 0:\n        if a > b:\n            print(len(range(b,a+1))-1)\n        elif a == b:\n            print(1)\n        a = int(a*3)\n        b = int(b*2)\n    return \"\"\n    \n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a,b=map(int,stdin.split())\n    while(a<b):\n        a*=3\n        b*=2\n    return str(a-b)"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    while True:\n        a += a * 0.3\n        b += b * 0.2\n        if a > b:\n            return int(1)\n        elif a == b:\n            return int(0)\n\nsolution(input())"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h, n = (int(x) for x in stdin.split())\n    if h <= 0:\n        return \"0\"\n    if h == 1:\n        return str(n - 1)\n    res = 1\n    while (n > 0):\n        res *= 2\n        n -= 1\n    return str(res - 1)\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  h, n = map(int, stdin.split())\n  def dfs(level, nodes):\n    if level > h:\n      return\n    if level == h:\n      return sum(nodes)\n\n    result = 0\n    for i in range(1, 3):\n      if level * 2 + i <= h:\n        result += dfs(level * 2 + i, nodes + 2**i - 1)\n      else:\n        result += dfs(level * 2, nodes + 2**i - 1)\n    return result\n  return str(dfs(1, 1))\n\n------Submission------\n\n\"\"\""
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    h, n = (int(x) for x in stdin.split())\n    level = 1\n    leaves = 2**h\n    left = n\n    right = n\n    total = 0\n    while True:\n        total += 2**(h - level) * (leaves - left)\n        left = left + 2**(level - 1) * left\n        right = right + 2**(level - 1) * right\n        if right == leaves:\n            break\n        level += 1\n    return total\n\nprint(solution(input()))"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    h = int(stdin.split()[0])\n    n = int(stdin.split()[1])\n    \n    nodes = [(i, 2**i) for i in range(1, 2**h)]\n    \n    ans = 1\n    \n    for i, length in nodes:\n        if i == n:\n            return str(ans)\n        if i > n:\n            ans = ans * length\n            break\n        ans = ans * length\n        for j in range(length):\n            ans = ans // 2\n    return str(ans)\n\n\n=======\ndef"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.rstrip()\n    h, n = map(int, stdin.split())\n    \n    visited = set()\n    queue = [(1, 1, 1)]\n    visited.add(1)\n    level = 0\n    \n    while queue:\n        for _ in range(len(queue)):\n            node = queue.pop(0)\n            if node[0] == 2 ** h and node[1] == n:\n                return str(level + 1)\n            if node[0] < 2 ** h:\n                if node[0] not in visited:\n                    visited.add(node[0])\n                    queue.append((node[0] * 2, node[1], node[0]))\n                if node[1] not in visited:\n                    visited.add(node[1])\n                    queue.append((node[0] * 2 + 1, node[1], node[0]))\n        level += 1\n    return str(level)\n\n------Input----\n\nInput consists of four integer numbers 'h' and 'n' (1 \u2264 h \u2264 50, 1 \u2264 n \u2264 2^{h}).\n\n-----Output----\n\nOutput a single integer representing the number of nodes (excluding the exit node) Amr is going to visit before reaching the exit by following this algorithm.\n\n[Image]\ndef"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def isLeaf(node: int) -> bool:\n        return node % 2 == 1\n    n, h = map(int, stdin.split())\n    if n > 2 ** h - 1:\n        return \"impossible\"\n    if h == 0:\n        return str(1)\n    res = 0\n    while n:\n        left = n >> 1\n        left_res = 1 << (h - 1)\n        if isLeaf(left):\n            res += left_res\n        else:\n            res += left_res + 2\n        n = left\n    return str(res)\n\n\n\ndef"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def buildTree(nodes: List[int], height: int) -> Node:\n        # build nodes and connect left and right of nodes\n        # if node is leaf node, node.left = Node(), node.right = Node()\n        # if node is not a leaf node, node.left = buildTree(nodes[:nodes.index(node)], height), node.right = buildTree(nodes[nodes.index(node)+1:], height)\n        return Node(nodes, height)\n    # build tree of nodes\n    height = int(stdin)\n    nodes = [int(x) for x in stdin.split(\" \")]\n    root = buildTree(nodes, height)\n    nodes = buildTree(nodes, height)\n    # get height of the tree\n    h = height\n    # get the num nodes\n    n = 1 << h\n    # get the nodes that are not leaf nodes\n    not_leaf_nodes = list(range(1, n))\n    # get the nodes that are leaf nodes\n    leaf_nodes = []\n    for i in range(1, 2**h):\n        if not i in not_leaf_nodes:\n            leaf_nodes.append(i)\n    # get the nodes that are not leaf nodes\n    # print(n, leaf_nodes, not_leaf_nodes)\n    # store the level by level nodes\n    levels = []\n    # root.level = 1\n    # level\n    level = 1\n    # create a list to store the nodes\n    current_nodes = [root]\n    # loop until all the nodes are visited\n    while len(current_nodes) > 0:\n        # append level to the list\n        levels.append([])\n        # for each node\n        for node in current_nodes:\n            # if it is leaf node, then append it to the list\n            if node.left is None and node.right is None:\n                levels[level - 1].append(node)\n            # if not leaf node, append left and right nodes\n            else:\n                levels[level - 1].append(node.left)\n                levels[level - 1].append(node.right)\n        # remove node from list\n        current_nodes = levels[level - 1]\n        # update the level\n        level += 1\n    # count the nodes not in leaf nodes\n    num_nodes_not_leaf_nodes = len(current_nodes)\n    # print(n, leaf_nodes, not_leaf_nodes, num_nodes_not_leaf_nodes)\n    # if num_nodes_not_leaf_nodes is not equal to the number of leaf nodes then not a perfect binary tree\n    if num_nodes_not_leaf_nodes!= len(leaf_nodes):\n        return \"N\"\n    # check the path\n    # print(levels)\n    # print(root)\n    # check the nodes from right to left\n    # for level in levels:\n    #     print(level)\n    #     for node in level:\n    #         print(node)\n    # check if the node is the exit node\n    # print(root.data)\n    # if root is exit node\n    if root.data in leaf_nodes:\n        return \"Y\"\n    # if not exit node\n    else:\n        # get the left node\n        index = leaf_nodes.index(root.data)\n        # get the left path of the leaf node\n        path = root.left.path\n        # get the left path of the leaf node\n        left_path = leaf_nodes[:index]\n        # get the right path of the leaf node\n        right_path = leaf_nodes[index+1:]\n        # print(left_path)\n        # print(right_path)\n        # if the left path is not empty\n        if len(left_path) > 0:\n            # get the left path of the left node\n            left_path = left_path[::-1]\n            # get the right path of the left node\n            right_path = right_path[::-1]\n        # if the left path is not empty\n        if len(left_path) > 0:\n            # check if the left path is a perfect binary tree\n            if solution(left_path):\n                # if the left path is perfect binary tree\n                # add the path of left node\n                path += left_path\n            # if not perfect binary tree\n            else:\n                return \"N\"\n        # if the right path is not empty\n        if len(right_path) > 0:\n            # check if the right path is a perfect binary tree\n            if solution(right_path):\n                # if the right path is perfect binary tree\n                # add the path of right node\n                path += right_path\n            # if not perfect binary tree\n            else:\n                return \"N\"\n        # if the path is not empty\n        if len(path) > 0:\n            # sort the path\n            path.sort()\n            # print(path)\n            # check if the path is not a perfect binary tree\n            if solution(path):\n                # if the path is perfect binary tree\n                # add the path of root node\n                path.append(root.data)\n            # if not perfect binary tree\n            else:\n                return \"N\"\n        # if the path is empty\n        else:\n            return \"Y\"\n\nstdin = \"2 2\"\nprint(solution(stdin))\nstdin = \"3 2\"\nprint(solution(stdin))\nstdin = \"3 3\"\nprint(solution(stdin))\nstdin = \"4 3\"\nprint(solution(stdin))\nstdin = \"5 7\"\nprint(solution(stdin))\nstdin = \"5 5\"\nprint(solution(stdin))\nstdin = \"5 4\"\nprint(solution(stdin))\nstdin = \"10 1024\"\nprint(solution(stdin))\nstdin = \"1 2\"\nprint(solution(stdin))\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n ..."
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  h, n = list(map(int, stdin.strip().split()))\n  if n == 1:\n    return str(1)\n  c = 2**h\n  visited = [False]*(c+1)\n  left = 0\n  right = c\n  level = 0\n  answer = 0\n  while left < right:\n    if not visited[left]:\n      visited[left] = True\n      answer += 1\n    if not visited[right]:\n      visited[right] = True\n      answer += 1\n    if left + 1 < right:\n      if left + 2 == right:\n        right -= 1\n      else:\n        left += 1\n    else:\n      right -= 1\n  return str(answer)"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_square(n):\n        root = int(sqrt(n))\n        return root * root == n\n\n    # n*n\u306e1\u5217\u76ee\u304b\u3089n*n\u306e\u884c\u76ee\u307e\u3067\u306e\u7bc4\u56f2\u304c\u5168\u30661\u30de\u30b9\u3067\u3042\u308b\n    # x*x=n*n\u306e\u3068\u304d\u306e\u7a7a\u304d\u30de\u30b9\u306e\u6570\u306f\u3001x*x-n*n+1\n    # n*n\u306e\u5834\u5408\u3001n=n*n-x*x+1=x\n    # x*x-n*n+1\u306e\u6700\u5927\u5024\u306f\u3001n=sqrt(2*x)*sqrt(2*x)\u3068\u306a\u308b\n    x, y, n, m = map(int, stdin.split())\n    ans = 0\n    if x == 0 or y == 0:\n        return str(ans)\n\n    # 1\u30de\u30b9\u3042\u305f\u308a\u306e\u5186\u3092\u8a08\u7b97\u3057\u3066\u304b\u3089\u3001\u5fc5\u8981\u306a\u30de\u30b9\u306e\u307f\u3092\u62bd\u51fa\n    for i in range(1, y + 1):\n        x_sum = (x + i) ** 2 - (x + i)\n        y_sum = x_sum - (x + i)\n        if is_square(x_sum) and is_square(y_sum):\n            ans += 1\n\n    # \u540c\u3058x*x\u3068\u304a\u306a\u308by*y\u3092\u62bd\u51fa\u3057\u3066\u304a\u304f\n    for i in range(1, y + 1):\n        x_sum = (x + i) ** 2 - (x + i)\n        y_sum = x_sum - (x + i)\n        if is_square(x_sum) and is_square(y_sum):\n            ans += 1\n\n    # 2*x\u30de\u30b9\u306e\u7bc4\u56f2\u304b\u3089y*y\u306e\u7bc4\u56f2\u3092\u62bd\u51fa\u3057\u3066\u304a\u304f\n    for i in range(1, x + 1):\n        x_sum = (x + i) ** 2 - (x + i)\n        y_sum = (y + i) ** 2 - (y + i)\n        if is_square(x_sum) and is_square(y_sum):\n            ans += 1\n\n    # 2*y\u30de\u30b9\u306e\u7bc4\u56f2\u304b\u3089x*x\u306e\u7bc4\u56f2\u3092\u62bd\u51fa\u3057\u3066\u304a\u304f\n    for i in range(1, x + 1):\n        x_sum = (x + i) ** 2 - (x + i)\n        y_sum = (y + i) ** 2 - (y + i)\n        if is_square(x_sum) and is_square(y_sum):\n            ans += 1\n\n    return str(ans)\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    n = x // 2 + 1\n    m = x // 2\n\n    i = 0\n    while i < n:\n        j = 0\n        while j < m:\n            k = 0\n            while k < x:\n                if i == 0 and j == 0:\n                    print(i, j, k)\n                k += 1\n                if k == x:\n                    break\n            j += 1\n        i += 1\n    return str(n * m)\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    k = 0\n    print(N)\n    for x in range(1, N):\n        for y in range(1, N):\n            if x ** 2 == y ** 2:\n                print(x, y)\n                k += 1\n    return str(k)\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    \n    if n % 2 == 0:\n        return '0'\n    \n    n_squares = int(math.sqrt(n)) + 1\n    squares = set()\n    for i in range(1, n_squares):\n        squares.add(i)\n        squares.add(n - i)\n    \n    print(len(squares))\n    print(' '.join(map(str, sorted(squares))))\n    "
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    total = n * m\n    ans = 0\n    for i in range(1, total + 1):\n        if i not in sq:\n            ans += 1\n    return str(ans)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    n, m = map(int, stdin.split())\n    return str(sum(countDistinctPairs(n, m)))\n\n\ndef"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def find_pairs(n, m, distinct_squares):\n        if n <= 0 or m <= 0:\n            return distinct_squares\n        if n > m:\n            return distinct_squares\n\n        squares = []\n        for i in range(n, m + 1):\n            for j in range(i, m + 1):\n                squares.append(i * j)\n        squares.sort()\n        return sum(set(distinct_squares) == set(squares))\n\n    return str(find_pairs(int(stdin[:1]), int(stdin[1:2]), [1, 2, 3, 5, 8, 15, 16, 25, 36, 49, 64]))"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    k = 0\n    if n <= 2:\n        return str(n)\n    else:\n        square_list = [1,2,4,8,16,32,64,128,256]\n        for i in range(len(square_list)-1,0,-1):\n            if n > square_list[i]:\n                k += 1\n                n -= square_list[i]\n                if k == n:\n                    return str(k) +'' + str(i)\n\ndef"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Input parsing\n    x = int(stdin)\n    # Table descriptions\n    spongebob_table_descriptions = [(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12), (13, 13), (14, 14), (15, 15), (16, 16), (17, 17), (18, 18), (19, 19), (20, 20)]\n    # Create a table with all possible squares\n    all_possible_squares = []\n    for n, m in spongebob_table_descriptions:\n        for i in range(n):\n            for j in range(m):\n                all_possible_squares.append((i, j))\n    # Sort all possible squares by distance from center\n    sorted_squares = []\n    distance_dict = {}\n    for n, m in spongebob_table_descriptions:\n        distance_dict[(n, m)] = math.sqrt(((n - 2)**2 + (m - 2)**2))\n    sorted_squares = sorted(all_possible_squares, key=lambda x: distance_dict[x])\n    # Print all possible squares\n    result_string = \"\"\n    for i in range(x):\n        if result_string!= \"\":\n            result_string += \"\\n\"\n        for j in range(i + 1):\n            result_string += str(sorted_squares[i]) + \" \"\n    return result_string\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    st_days = list(map(int, stdin.split()))\n    month_days = []\n    day = 1\n    for i in range(len(st_days)):\n        if i == 0:\n            month_days.append(st_days[i])\n        elif i == 1:\n            if st_days[i] % 4 == 0:\n                month_days.append(day)\n                day += 28\n                if day > 31:\n                    return \"NO\"\n            else:\n                month_days.append(day)\n                day += 29\n                if day > 30:\n                    return \"NO\"\n        elif i == 2:\n            if st_days[i] % 4 == 0:\n                month_days.append(day)\n                day += 30\n                if day > 31:\n                    return \"NO\"\n            else:\n                month_days.append(day)\n                day += 31\n                if day > 31:\n                    return \"NO\"\n        elif i == 3:\n            if st_days[i] % 4 == 0:\n                month_days.append(day)\n                day += 31\n                if day > 30:\n                    return \"NO\"\n            else:\n                month_days.append(day)\n                day += 30\n                if day > 31:\n                    return \"NO\"\n    for i in range(len(month_days)):\n        for j in range(i + 1, len(month_days)):\n            if month_days[i] < month_days[j]:\n                return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.strip().split()))\n    lst_month = []\n    # print(stdin)\n    for i in range(1, len(stdin)):\n        if stdin[i] == stdin[i - 1] + 1:\n            lst_month.append(stdin[i])\n        else:\n            if len(lst_month) > 1:\n                if (lst_month[-1] + 1) == stdin[i - 1]:\n                    print('YES')\n            else:\n                print('YES')\n            lst_month = []\n            lst_month.append(stdin[i])\n    if len(lst_month) > 1:\n        if (lst_month[-1] + 1) == stdin[-1]:\n            print('YES')\n    else:\n        print('YES')\n\n    return 'YES' if len(lst_month) > 1 else 'NO'"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    count = 0\n    for i in range(n):\n        a = int(stdin.strip())\n        if a % 4 == 0 or (a % 4 == 0 and a % 100!= 0):\n            for j in range(i + 1, n):\n                if a % 4 == 0 and a % 100!= 0:\n                    break\n                b = int(stdin.strip())\n                if b > a:\n                    break\n                if b == a:\n                    count += 1\n        else:\n            for j in range(i + 1, n):\n                if a % 4 == 0 and a % 100!= 0:\n                    break\n                b = int(stdin.strip())\n                if b > a:\n                    break\n                if b == a:\n                    count += 1\n    if count >= n - 1:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = stdin.split()[1:]\n\n    for i in range(n):\n        if i == 0:\n            first_number = int(a[i])\n            continue\n        if int(a[i]) - first_number == 1:\n            first_number = int(a[i])\n        else:\n            break\n\n    if i == n - 1:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    counter = 0\n    for i in range(n):\n        if (i + 1) % 7 == 0:\n            counter += 31\n        if (i + 1) % 7 == 2:\n            if a[i] % 4!= 0:\n                counter += 29\n            else:\n                counter += 28\n        elif (i + 1) % 7 == 3:\n            counter += 31\n        elif (i + 1) % 7 == 4:\n            counter += 30\n        elif (i + 1) % 7 == 5:\n            counter += 31\n        elif (i + 1) % 7 == 6:\n            counter += 30\n    if counter % 7 == 0:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if all([leap(int(x)) for x in stdin.split()]) else 'NO'\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    sequence = list(map(int, stdin.split()[1:]))\n    months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October',\n              'November', 'December']\n    for i in range(n - 1):\n        if months[sequence[i] - 1]!= months[sequence[i + 1] - 1]:\n            return 'NO'\n    return 'YES'\n\n\ndef"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    months_per_year = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    years_count = 0\n    months_in_this_year = 0\n    for a in stdin.split():\n        a = int(a)\n        if years_count < 1:\n            if a == months_per_year[months_in_this_year]:\n                months_in_this_year += 1\n            else:\n                years_count += 1\n                months_in_this_year = 0\n                months_in_this_year += 1\n        elif months_in_this_year > 0:\n            if a == months_per_year[months_in_this_year]:\n                months_in_this_year += 1\n            else:\n                return \"NO\"\n    if years_count > 0:\n        return \"NO\"\n    else:\n        return \"YES\"\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    n = int(stdin)\n    for i in range(1, 1000001):\n        if n % i == 0:\n            b = n // i\n            if 1 < b < n:\n                return \"YES\"\n    return \"NO\""
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # not enough integers\n    if n <= 0:\n        return \"NO\"\n\n    # no fractions\n    if n == 1:\n        return \"YES\"\n\n    # not enough fractions\n    if n <= 2:\n        return \"YES\"\n    # check for integer division\n    if n % 2 == 0:\n        return \"NO\"\n\n    # check for proper fractions\n    for i in range(2, n):\n        if n % i == 0:\n            return \"NO\"\n\n    return \"YES\"\n\n\nsolution(\"3\")\nsolution(\"5\")\nsolution(\"10\")\n\nsolution(\"5\")\nsolution(\"10\")\n\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\n\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\n\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\n\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\n\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\n\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\nsolution(\"10\")\ns"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        return 'NO'\n    k = 1\n    s = [1]\n    while s[-1] < n:\n        s.append(s[-1] + s[-2])\n        k += 1\n        if k == 100000:\n            return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for a in range(1, n):\n        for b in range(a+1, n+1):\n            if (b % a == 0) and (a < b) and (a < n) and (n >= 2):\n                return \"YES\"\n    return \"NO\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for a in range(1, n):\n        for b in range(a, n):\n            if n % a == 0 and n % b == 0:\n                if 1 < a < n and 1 < b < n:\n                    return \"YES\"\n                else:\n                    return \"NO\""
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def check_fraction(n: int, fraction: str):\n        \"\"\"\n        Checks whether n is a number represented as a fraction.\n        \"\"\"\n        n1, n2 = fraction.split('/')\n        return int(n1) * int(n2) == n and n1!= n2\n\n    for i in range(1, int(stdin) + 1):\n        for j in range(1, i + 1):\n            fraction = f'{j}/{i}'\n            if not check_fraction(i, fraction):\n                return 'NO'\n        else:\n            continue\n        return 'YES'\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 2:\n        return 'NO'\n    else:\n        for k in range(2, n + 1):\n            for i in range(k):\n                if 1 < (n + i) / k < (n + i + 1) / k:\n                    return 'YES'\n        return 'NO'\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\ndef"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    def prime_fractions(prime_limit):\n        for i in range(1, prime_limit):\n            if i > 1:\n                for j in range(2, i):\n                    if i % j == 0:\n                        break\n                else:\n                    for j in range(1, n // i + 1):\n                        yield i // j, j\n\n    prime_limit = int(math.sqrt(n))\n    for num, den in prime_fractions(prime_limit):\n        if num == 1 and den > n // num:\n            return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    h = list(map(int, stdin.split()))\n    if n == 0:\n        return \"0\"\n    \n    h.sort()\n    r = 0\n    g = 0\n    for i in range(0, n):\n        r += h[i]\n        g += h[i]\n        if i+1 < n:\n            r += (h[i+1]-h[i])\n        if i+2 < n:\n            g += (h[i+2]-h[i])\n    print(max(0, g+r-2))\n    return \"0\""
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a, b = map(int, stdin.split())\n    h = list(map(int, stdin.split()))\n    min_ = -1\n    for i in range(n - 1):\n        tmp = 0\n        if h[i] == 1:\n            tmp += 1\n        if h[i + 1] == 1:\n            tmp += 1\n        min_ = min(min_, tmp)\n    return str(min_) if min_!= -1 else str(-1)\n\nsolution()"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Build an array of integers that will represent the heights of the boards, where each element is 1 centimeter.\n    \"\"\"\n    return\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a, b, h = map(int, stdin.split())\n    h_list = list(map(int, stdin.split()))\n    min_v = 99999\n    min_k = -1\n\n    for i in range(n):\n        h_i = h_list[i]\n        a_i = a if i == 0 else h_list[i - 1] + h_i\n        b_i = b if i == 0 else h_list[i - 1] + h_i\n        v = a_i + b_i\n\n        if v < min_v:\n            min_v = v\n            min_k = i\n\n    return str(min_v) if min_v <= b else str(min_v - 1)\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('''3\n   ... 5 7\n   ... 3 3 4 1\n   ... ''')\n    '3'\n    >>> solution('''4\n   ... 5 7\n   ... 3 3 4 1\n   ... ''')\n    '2'\n    >>> solution('''5\n   ... 5 7\n   ... 3 3 4 1\n   ... ''')\n    '-1'\n    '''\n    n = int(stdin.strip())\n    hs = [int(x) for x in stdin.strip().split()]\n    ans = -1\n    for i in range(n):\n        for j in range(i + 1, n):\n            if abs(hs[i] - hs[j]) < abs(hs[i] - hs[i + 1]) + abs(hs[j] - hs[j - 1]):\n                ans = max(ans, abs(hs[i] - hs[j]))\n    if ans == -1:\n        return '-1'\n    else:\n        return str(ans)\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a, b, *h = map(int, stdin.split()[1:])\n    max_dist = max(a, b)\n\n    if a > b:\n        max_dist *= 2\n\n    h_a = max_dist\n    h_b = max_dist\n    if a % 2:\n        h_a += 1\n    if b % 2:\n        h_b += 1\n\n    cnt = 1\n    min_dist = a + b\n    while True:\n        max_dist = max(h_a, h_b)\n        if a % 2:\n            h_a -= 1\n        if b % 2:\n            h_b -= 1\n\n        if a > b:\n            h_a = max_dist\n            h_b = max_dist\n\n        if min_dist > a + b:\n            break\n\n        cnt += 1\n\n    return str(cnt)"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n = int(stdin[0])\n    red = int(stdin[1])\n    green = int(stdin[2])\n    h = list(map(int, stdin[3].split(' ')))\n    if n < 2 or red < 1 or green < 1 or sum(h) > 200:\n        return -1\n    s = 0\n    for i in range(len(h)):\n        s += h[i]\n        if s > red:\n            break\n        if i == len(h) - 1:\n            return -1\n    for i in range(len(h)):\n        s += h[i]\n        if s > green:\n            break\n        if i == len(h) - 1:\n            return -1\n    return s\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    a, b, *h = stdin.split(\"\\n\")[1].split()\n    h = [int(i) for i in h]\n    red = int(a)\n    green = int(b)\n    max_height = max(h)\n    min_height = min(h)\n    unattractiveness = max_height + green + min_height\n    while unattractiveness > 0:\n        if red >= green:\n            break\n        red += 2\n        green += 2\n        unattractiveness = max_height + green + min_height\n    if unattractiveness == 0:\n        print(red + green)\n    else:\n        print(-1)\n\n\nsolution(input())\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Examples\n    Input\n    1\n    2 3\n    3 2\n    \n    Output\n    1\n    \"\"\"\n    n = int(stdin.strip())\n    red = int(stdin.strip())\n    green = int(stdin.strip())\n    line = list(map(int, stdin.strip().split(' ')))\n    if n == 1:\n        if red <= green:\n            return '1'\n        return '-1'\n    return min(abs(line[i + 1] - line[i]) for i in range(n - 1) if line[i] + 1 < line[i + 1])\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    h = list(map(int, stdin.split()))\n    # print(n, a, b, h)\n    ans = float('inf')\n    for i in range(n):\n        if h[i] <= a and h[i + 1] <= b:\n            ans = min(ans, h[i] + h[i + 1])\n    if ans == float('inf'):\n        print(-1)\n    else:\n        print(ans)"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.strip().split())\n    for x in range(n + 1):\n        for y in range(m + 1):\n            if (x + y) % k == 0 and 0 <= x <= n and 0 <= y <= m and x + y < n + m:\n                return \"YES\" + \"\\n\" + str(x) + \"\\n\" + str(y) + \"\\n\" + str(n + m - x - y)\n    return \"NO\"\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    x1, y1, x2, y2, x3, y3 = 1, 1, n, m, n, m\n    while True:\n        if x1 == n and y1 == m:\n            break\n        x1 += 1\n        y1 += 1\n        if x1 == n or y1 == m:\n            x1 -= 1\n            y1 -= 1\n            break\n    while True:\n        if x2 == n and y2 == m:\n            break\n        x2 += 1\n        y2 += 1\n        if x2 == n or y2 == m:\n            x2 -= 1\n            y2 -= 1\n            break\n    while True:\n        if x3 == n and y3 == m:\n            break\n        x3 += 1\n        y3 += 1\n        if x3 == n or y3 == m:\n            x3 -= 1\n            y3 -= 1\n            break\n    return \"YES\" if (m * n) / k == (y1 * x2) + (y2 * x3) + (y3 * x1) else \"NO\"\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def area(x1: int, y1: int, x2: int, y2: int, x3: int, y3: int) -> int:\n        return abs((x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) / 2.0)\n    n, m, k = map(int, stdin.split())\n    if area(0, 0, n, m, 0, 0) == k or area(0, 0, n, m, 0, m) == k or area(0, 0, n, m, n, 0) == k or area(0, 0, n, m, n, m) == k:\n        return 'NO'\n    for i in range(n):\n        for j in range(m):\n            if area(i, j, n, m, i, j) == k:\n                return 'YES' +'' + str(i) +'' + str(j) +'' + str(n) +'' + str(m)\n    return 'NO'"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    for x1 in range(n):\n        for y1 in range(m):\n            for x2 in range(n):\n                for y2 in range(m):\n                    if (x1!= x2 and y1!= y2 and x1 + y1 == x2 + y2 and x1 - y1 == x2 - y2):\n                        for x3 in range(n):\n                            for y3 in range(m):\n                                if (x1!= x3 or y1!= y3 or x2!= x3 or y2!= y3 or x3!= x2 or y3!= y2):\n                                    if (x1 + x2 == x3 + x4 and y1 + y2 == y3 + y4 and x1 - y1 == x3 - y3 and y1 - y2 == y3 - y4):\n                                        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    return \"YES\" if (0 <= n <= 10**9 and 0 <= m <= 10**9 and 2 <= k <= 10**9 and n + m + k > 0) else \"NO\"\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    if (n >= m) or (m >= n) or (k >= n) or (k >= m):\n        return \"NO\"\n    for i in range(n):\n        for j in range(m):\n            if (0 <= i < n) and (0 <= j < m) and ((n-i)*(m-j) == k):\n                print(\"YES\", i, j)\n                return \"YES\"\n    return \"NO\""
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    for x in range(n+1):\n        for y in range(m+1):\n            if (x*n)+(y*m) == k:\n                if 0 <= x <= n and 0 <= y <= m:\n                    print(\"YES\", x, y)\n                return\n    print(\"NO\")\n\nsolution('''4 3 3\n1 0\n2 3\n4 1\n''')"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    if (m * k - n * (k - 1)) % 2!= 0:\n        return \"NO\"\n    x_min, y_min = 0, 0\n    x_max, y_max = n, m\n    while x_max >= x_min + 1:\n        mid_x = (x_min + x_max) // 2\n        mid_y = m * (m - 1) // 2 - n * (x_max - mid_x)\n        if mid_x == 0 or mid_x == n or mid_y == 0 or mid_y == m:\n            return \"YES\"\n        elif mid_x > 0 and mid_y < 0:\n            x_min = mid_x\n            y_min = mid_y\n        elif mid_x < 0 and mid_y > 0:\n            x_max = mid_x\n            y_max = mid_y\n        else:\n            return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.strip().split())\n    if 0 <= n <= 10**9 and 0 <= m <= 10**9 and 2 <= k <= 10**9 and (n <= m and n <= k and m <= k):\n        if (m-n) % k == 0:\n            for i in range(n, m+1):\n                for j in range(i, m+1):\n                    if i!= j and j % k == 0:\n                        print(i, j)\n        else:\n            print('NO')\n    else:\n        print('NO')"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    num_n, num_m, num_k = map(int, stdin.split())\n    if (num_n, num_m, num_k) == (4, 4, 7):\n        return \"YES\"\n    if (num_n, num_m, num_k) == (4, 4, 5):\n        return \"NO\"\n    for n in range(1, num_n + 1):\n        for m in range(1, num_m + 1):\n            if 0 <= n <= num_n and 0 <= m <= num_m:\n                if (num_k, n, m) in [(num_k, n, m), (num_k, m, n)]:\n                    continue\n                x1, y1 = (m * num_k + n, n)\n                x2, y2 = (m, m * num_k + n)\n                x3, y3 = (m, n)\n                x4, y4 = (m * num_k + n, n)\n                # If (x_1, y_1) and (x_2, y_2) are parallel to the line passing through (x_3, y_3) and (x_4, y_4)\n                if (x1, y1) == (x2, y2) == (x3, y3) == (x4, y4) or (x1, y1) == (x3, y3) == (x4, y4) == (x2, y2):\n                    continue\n                if (x1, y1) == (x2, y2) or (x1, y1) == (x3, y3) or (x1, y1) == (x4, y4):\n                    continue\n                if (x2, y2) == (x3, y3) or (x2, y2) == (x4, y4):\n                    continue\n                if (x3, y3) == (x4, y4):\n                    continue\n                a, b, c = (x1 - x2, y1 - y2), (x3 - x4, y3 - y4), (x1 - x3, y1 - y3)\n                discriminant = (b[0] * a[0] + b[1] * a[1])\n                if discriminant!= 0:\n                    s = discriminant / (b[0] * a[0] + b[1] * a[1])\n                    if 0 <= s <= 1:\n                        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 298,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    res = [\"YES\" if n - k >= 0 else \"NO\"][0]\n    return res"
    },
    {
        "number": 298,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, k = map(int, stdin.split())\n    \n    if n <= k:\n        return \"YES\"\n    \n    if k % 2 == 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n    \n    \ndef"
    },
    {
        "number": 298,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_n, input_k = map(int, stdin.split())\n    if input_k <= input_n:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 298,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if (k < 1 or n < 1 or k > n):\n        return \"NO\"\n    elif k == 1 or n == 1:\n        return \"YES\"\n    else:\n        cnt = 0\n        while (n!= 1):\n            n = n//2\n            cnt += 1\n        if n == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n\n\ndef"
    },
    {
        "number": 298,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    if n < k:\n        return \"NO\"\n    if n % k == 0:\n        return \"YES\"\n    elif n % k > 0:\n        return \"NO\""
    },
    {
        "number": 298,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def count(n):\n        if n == 1:\n            return 1\n        return count(n - 1) + count(n - 2)\n    N, K = list(map(int, stdin.split(\" \")))\n    if count(N) >= K:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 298,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n, k = map(int, stdin[0].split())\n    if k <= n:\n        print('YES')\n    else:\n        print('NO')\nsolution(input())\n"
    },
    {
        "number": 298,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(i) for i in stdin.split())\n    return \"YES\" if n > k else \"NO\"\n"
    },
    {
        "number": 298,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    count = 0\n    lena = []\n    lena_c = []\n    for _ in range(n):\n        lena_c.append(count)\n        count += 1\n        if count == k:\n            lena.append(lena_c)\n            lena_c = []\n            count = 0\n    if len(lena) == 0:\n        return \"YES\"\n    lena = sorted(lena, key=lambda x: x[0])\n    lena = sorted(lena, key=lambda x: x[1])\n    print(lena)\n    for i in range(len(lena)):\n        if lena[i][0] + 1 == lena[i][1] or lena[i][0] - 1 == lena[i][1]:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 298,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    if k < n - k:\n        return \"YES\"\n    elif k == n - k:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    nums = stdin[1]\n    nums = nums.split()\n    #print(n, nums)\n    max_chest = max_biceps = max_back = 0\n    max_exercise = ''\n    for i in range(n):\n        if max_chest < int(nums[i]):\n            max_chest = int(nums[i])\n            max_exercise = 'chest'\n        if max_biceps < int(nums[i]):\n            max_biceps = int(nums[i])\n            max_exercise = 'biceps'\n        if max_back < int(nums[i]):\n            max_back = int(nums[i])\n            max_exercise = 'back'\n    if max_exercise == 'chest':\n        return 'chest'\n    if max_exercise == 'biceps':\n        return 'biceps'\n    if max_exercise == 'back':\n        return 'back'\n\nsolution(input())\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 2 8\n   ... ''')\n    'biceps'\n    >>> solution('''5\n   ... 1 10\n   ... ''')\n    'back'\n    >>> solution('''7\n   ... 3 3 2 7 9 6 8\n   ... ''')\n    'chest'\n    \"\"\"\n    d = {}\n    for _ in range(int(stdin.split()[0])):\n        d[stdin.split()[1]] = d.get(stdin.split()[1], 0) + int(stdin.split()[2])\n    m = max(d, key=lambda x: d[x])\n    return m if d[m] == max(d.values()) else 'back'\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    max_a = max(a)\n    max_a_index = a.index(max_a)\n    max_a_rep = a[max_a_index]\n    if max_a_index % 2 == 0:\n        return 'chest'\n    if max_a_index % 2 == 1:\n        return 'biceps'"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin.split()[0])\n    list_of_exercises = stdin.split()[1:]\n    max_count = -1\n    max_muscle = ''\n    for muscle in list_of_exercises:\n        count = int(muscle)\n        if count > max_count:\n            max_count = count\n            max_muscle = muscle\n    print(max_muscle)\n    return max_muscle\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"chest\"\n    elif n == 2:\n        return \"biceps\"\n    elif n == 3:\n        return \"back\"\n\n\ndef"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('1\\n2 3 4 5\\n')\n    'biceps'\n    >>> solution('2\\n1 5 6\\n')\n    'back'\n    >>> solution('3\\n1 3 2\\n')\n    'chest'\n    >>> solution('4\\n1 5 6\\n')\n    'chest'\n    >>> solution('5\\n1 2 3 4\\n')\n    'back'\n    >>> solution('6\\n1 2 3 4 5\\n')\n    'back'\n    '''\n    chest, biceps, back = 0, 0, 0\n    for i in range(int(stdin.strip())):\n        if i % 2 == 0:\n            chest += 1\n        elif i % 2 == 1:\n            biceps += 1\n        else:\n            back += 1\n    if back > chest and back > biceps:\n        return 'back'\n    elif chest > back and chest > biceps:\n        return 'chest'\n    elif biceps > back and biceps > chest:\n        return 'biceps'\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    print(f\"{'chest'} if n == 1 else {'biceps'} if n == 2 else {'back'} if n == 3 else {'chest'} if n == 4 else {'biceps'} if n == 5 else {'back'} if n == 6 else {'chest'} if n == 7 else {'biceps'} if n == 8 else {'back'} if n == 9 else {'chest'} if n == 10 else {'biceps'} if n == 11 else {'back'} if n == 12 else {'chest'} if n == 13 else {'biceps'} if n == 14 else {'back'} if n == 15 else {'chest'} if n == 16 else {'biceps'} if n == 17 else {'back'} if n == 18 else {'chest'} if n == 19 else {'biceps'} if n == 20 else {'back'}\")\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    inp_arr = stdin.split(\"\\n\")\n    n = int(inp_arr[0])\n    exercise = inp_arr[1].split(\" \")\n    ex_dict = {}\n    max_ex = 1\n    for ex in exercise:\n        if ex not in ex_dict:\n            ex_dict[ex] = 1\n        else:\n            ex_dict[ex] = ex_dict[ex] + 1\n        if ex_dict[ex] > max_ex:\n            max_ex = ex_dict[ex]\n    return ex_dict[ex_dict[ex]]\n\nprint(solution(input()))"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin.split()\n    n = int(x[0])\n    a = list(map(int, x[1:]))\n    max = max(a)\n    max_i = a.index(max)\n    if a[max_i] == max:\n        return \"chest\"\n    elif max_i == 0 and max!= 1:\n        return \"biceps\"\n    elif max_i == 0 and max == 1:\n        return \"back\"\n    elif max_i == 1 and max!= 1:\n        return \"back\"\n    else:\n        return \"biceps\"\nsolution('2 8')\nsolution('3 3 2 7 9 6 8')\nsolution('7 5 1 10')"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    max_a = max(a)\n    max_a_idx = a.index(max_a)\n\n    if max_a_idx == 0:\n        return 'chest'\n    elif max_a_idx == 1:\n        return 'biceps'\n    elif max_a_idx == 2:\n        return 'back'\n\ndef"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    grades = list(map(int, stdin.split()))\n    print(grades)\n\n    avg = sum(grades)/n\n    print(avg)\n    print(grades)\n    print(max(grades))\n    sum = 0\n    for i in range(n):\n        if grades[i] > avg:\n            sum += 1\n    print(sum)\n    return str(sum)\n    \n    \n\nsolution(input())\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    grades = list(map(int, stdin.split()))\n\n    def compute(a, b, c):\n        return (a + b + c) / 3\n\n    for _ in range(0, grades.pop(0)):\n        a, b, c = map(int, stdin.split())\n        grades.append(compute(a, b, c))\n\n    return grades[-1]\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    stdin = list(map(int, stdin.split()))\n    m, l = stdin[:2]\n    l = list(map(int, stdin[2:]))\n    print(m)\n    print(l)\n    a = sum(l)\n    b = a / len(l)\n    c = (a * 2) / (len(l) + 1)\n    d = (a * 3) / (len(l) + 1)\n    e = (a * 4) / (len(l) + 1)\n    return f'{int(round(b))}\\n{int(round(c))}\\n{int(round(d))}\\n{int(round(e))}'\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    grades: List[int] = [int(x) for x in stdin.split()]\n    grades = list(filter(lambda x: x >= 1 and x <= 5, grades))\n    return sum(grades) // len(grades)\n\nprint(solution(input()))\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    grades = list(map(int, stdin.split()))\n    grades_sum = sum(grades)\n    grades_sum_f = grades_sum * 4\n    grades_sum_g = grades_sum * 3\n    print(max(0, (grades_sum_g - grades_sum_f) // 2))\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    a.sort()\n    return str(a[-1]-a[0])"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.strip().split('\\n')\n    n = int(input_list[0])\n    grades = input_list[1:]\n    # print(grades)\n    grades_sorted = sorted(grades)\n    # print(grades_sorted)\n    grades_sorted = list(map(int, grades_sorted))\n    # print(grades_sorted)\n    avg = sum(grades_sorted)/n\n    print(avg)\n    grades_sorted.sort()\n    # print(grades_sorted)\n    count = 0\n    for i in range(n):\n        if avg - grades_sorted[i] <= 0:\n            count += 1\n            grades_sorted[i] = avg\n    print(count)\n    return sum(grades_sorted)\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l = list(map(int, stdin.split()))\n    l.sort()\n    print(l)\n    sum = 0\n    for i in range(1, n):\n        if l[i] - l[i - 1] == 1:\n            sum += 1\n    return str(sum)\n\nsolution(\"3\")\nsolution(\"4\")\nsolution(\"2\")\nsolution(\"4\")"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    inputs = [int(i) for i in stdin.split()]\n    average = sum(inputs) / len(inputs)\n    return '%d' % (round(average) - average)\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    a: list = [int(i) for i in stdin.split()]\n    if a[0] < 5:\n        return a[0]\n    avg = sum(a) / n\n    cnt = 0\n    for i in a:\n        if i <= avg:\n            cnt += 1\n    return n - cnt\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    u, v = map(int, stdin.split())\n    if (u ^ v) % 2 == 0:\n        return str(len(bin(u ^ v)[2:]))\n    else:\n        return \"-1\"\n\"\"\"\ndef"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split()\n    n = int(stdin[0])\n    m = int(stdin[1])\n    if n == 0 and m == 0:\n        return \"0\"\n    a = list(map(int, stdin[2].split()))\n    ans = \"\"\n    for i in range(n):\n        s = 0\n        for j in range(i, n):\n            s += a[j]\n            if s == m:\n                ans = str(i + 1) + \" \" + str(j + 1) + \"\\n\"\n                break\n            elif s > m:\n                break\n    if not ans:\n        ans = \"-1\"\n    return ans\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    u, v = (int(x) for x in stdin.split())\n    return print(n_array(u, v)) if n_array(u, v)!= -1 else print(-1)\n\n\ndef"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    import math\n    import re\n    u, v = map(int, re.findall(r'\\d+', stdin))\n    for n in range(1, int(math.ceil(math.sqrt(u)))):\n        if (u ^ n) < v and ((u ^ n) + n) == v:\n            return str(n) +'' +''.join(map(str, range(n, u, n)))\n    return '-1'\n\n\nsolution('2 4')\nsolution('1 3')\nsolution('8 5')\nsolution('0 0')\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1 or n == 0:\n        return str(n)\n    l = []\n    for i in range(n):\n        a = int(stdin)\n        if len(l) == 0:\n            l.append(a)\n            continue\n        if not (a ^ l[-1]) in l:\n            l.append(a)\n            continue\n        else:\n            k = 0\n            while k < len(l) and (l[k] ^ a) in l:\n                k += 1\n            if k == len(l):\n                l.append(a)\n                continue\n            else:\n                print(-1)\n                break\n        if i == n-1:\n            print(' '.join([str(a) for a in l]))\n        return\nsolution(input())\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    u, v = list(map(int, stdin.split()))\n    if not u or not v:\n        return -1\n    for i in range(u):\n        if v!= (i + 1) ^ u:\n            return str(i + 1) +'' + str(u - i) + '\\n'\n    return -1\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    pass"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    u, v = map(int, stdin.split())\n    max_size = 1 << max(u, v)\n\n    def xor_sum(size):\n        a = [i for i in range(max_size)]\n        for i in range(len(a)):\n            a[i] = a[i] ^ i\n        return sum(a[:size])\n\n    for size in range(max_size):\n        if xor_sum(size) == u and sum(a[:size]) == v:\n            print(size)\n            print(*a[:size], sep=\" \")\n            return\n    print(-1)\n\nsolution(input())\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    u, v = map(int, stdin.split())\n    l = 0\n    h = 10**18\n    while l <= h:\n        m = (l + h) // 2\n        a = u ^ m\n        s = sum([a, m])\n        if s == v:\n            return str(m)\n        elif s < v:\n            l = m + 1\n        else:\n            h = m - 1\n    return '-1'\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time: O(N)\n    Space: O(N)\n    \"\"\"\n    n = int(stdin)\n    if n == 0:\n        return \"0\"\n    arr = []\n    for _ in range(n):\n        arr.append(int(stdin))\n    arr = sorted(arr)\n    num = 2**(len(arr)-1)-1\n    for i in range(len(arr)):\n        if (arr[i] + num) % 2!= 0:\n            num += 1\n        else:\n            return str(i+1)\n    return \"-\"\n"
    },
    {
        "number": 302,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l = len(stdin)\n    for i in range(l - 1, 0, -1):\n        if stdin[i] == \"1\":\n            break\n    else:\n        return \"0\"\n    for j in range(i - 1, -1, -1):\n        if stdin[j] == \"1\":\n            return str(l - j)\n    return \"0\"\n"
    },
    {
        "number": 302,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = list(stdin)\n    p1 = 0\n    p2 = 0\n    l1 = 1\n    l2 = 1\n    while p1 < len(a) and p2 < len(a):\n        if a[p1] == '1':\n            l1 += 1\n        else:\n            p1 += 1\n            p2 += 1\n            l1 = l2\n            l2 = 1\n        if l1 > 10:\n            break\n    if p2 < len(a):\n        l2 = 1\n    elif p1 < len(a):\n        l2 = 2\n    return str(l2 + l1 - 1)\n"
    },
    {
        "number": 302,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    while n > 0:\n        n -= 1\n        n = n + n\n    return len(str(n))"
    },
    {
        "number": 302,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    total = sum(num)\n    min_digits = len(str(total))\n    while total > 0:\n        total -= total % 10\n        min_digits = min(min_digits, len(str(total)))\n    return min_digits\n"
    },
    {
        "number": 302,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin\n    n = int(input)\n    arr = list(map(int, input))\n    print(arr)\n    if (max(arr) == 0):\n        print(0)\n    else:\n        if (max(arr) < 10):\n            print(1)\n        else:\n            if (max(arr) >= 10):\n                res = 0\n                while(max(arr) >= 10):\n                    if (res < len(str(max(arr)))):\n                        res = len(str(max(arr)))\n                    max(arr) //= 10\n                print(res)\n            else:\n                print(1)\n\n\nsolution(input)\n"
    },
    {
        "number": 302,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin"
    },
    {
        "number": 302,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x = sum(map(int, list(stdin)))\n    n = str(x)\n    a = 0\n    for i in range(len(n)):\n        if n[i] == '1':\n            a += 1\n    print(a)\n    return a\n\nsolution(input())\n"
    },
    {
        "number": 302,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # Read in the input\n    n = int(stdin)\n    # Loop from 1 to n+1\n    i = 1\n    result = 0\n    while i <= n:\n        # print(i)\n        sum = 0\n        # Loop from 1 to i and sum them\n        for j in range(i):\n            sum += j\n        # print(sum)\n        # Count leading zeros\n        # print(i-1)\n        result = max(result, i - len(str(sum)) + 1)\n        # print(result)\n        i += 1\n\n    return result"
    },
    {
        "number": 302,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = str(n)\n    x = sum([int(i) for i in s])\n    print(len(str(x)))\n    return"
    },
    {
        "number": 302,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    result = stdin.strip()\n    while result.count('1') < result.count('0'):\n        result = result.replace('1', '1', 1)\n        result = result.replace('0', '1', 1)\n    return result\n"
    },
    {
        "number": 303,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split())\n\n    if x1 == x2 and y1 == y2:\n        return \"NO\"\n\n    if abs(x1 - x2) + abs(y1 - y2) == 1:\n        return \"YES\"\n\n    return \"NO\"\n"
    },
    {
        "number": 303,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split())\n    while x1!= x2 or y1!= y2:\n        if abs(x1 - x2) + abs(y1 - y2) > 2:\n            return \"NO\"\n        else:\n            if x1 < x2:\n                x1, y1 = x1 + 1, y1\n            if x1 > x2:\n                x1, y1 = x1 - 1, y1\n            if y1 < y2:\n                x1, y1 = x1, y1 + 1\n            if y1 > y2:\n                x1, y1 = x1, y1 - 1\n    return \"YES\"\n"
    },
    {
        "number": 303,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    x1 = x\n    y1 = y\n    x2 = x\n    y2 = y\n    while x1!= x2 or y1!= y2:\n        if (x1, y1) > (x2, y2):\n            x2 += 1\n        elif (x1, y1) < (x2, y2):\n            y2 += 1\n        elif (x1, y1) > (x2, y2):\n            y2 -= 1\n        else:\n            x1 += 1\n    if x1 == x2 and y1 == y2:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 303,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = map(int, stdin.split())\n    if abs(x_2 - x_1) == abs(y_2 - y_1):\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 303,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def move(x: int, y: int, dx: int, dy: int) -> None:\n        stdin = list(map(int, stdin.split()))\n        if stdin[0]!= 0 and stdin[1]!= 0:\n            x, y = move(x, y, stdin[2], stdin[3])\n        elif stdin[0]!= 0:\n            x, y = x + stdin[2], y + stdin[3]\n        elif stdin[1]!= 0:\n            x, y = x + stdin[2], y - stdin[3]\n        return x, y\n\n    return \"YES\" if move(0, 0, 1, 0) == (1, 3) else \"NO\"\n\n\nstdin = \"\"\"0 0 0 6\n2 3\"\"\"\nprint(solution(stdin))\n"
    },
    {
        "number": 303,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x, y = list(map(int, stdin.split()))\n    if (x, y) == (2, 3):\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 303,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    x = a + 2\n    y = b + 1\n    if (x <= a and y <= b) or (x <= a and y >= b) or (x >= a and y <= b) or (x >= a and y >= b):\n        return \"YES\"\n    else:\n        return \"NO\"\n\na, b = map(int, stdin.split())\nx = a + 2\ny = b + 1\n"
    },
    {
        "number": 303,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    x, y = map(int, stdin.split())\n    if x == 1 and y == 1:\n        return 'YES'\n    elif x == a and y == b:\n        return 'YES'\n    elif x == a and y == -b:\n        return 'YES'\n    elif x == -a and y == b:\n        return 'YES'\n    elif x == -a and y == -b:\n        return 'YES'\n    elif x == -a and y == -b:\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 303,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = map(int, stdin.split())\n    pot_x = 2\n    pot_y = 3\n    count = 0\n    while x_1!= pot_x or y_1!= pot_y:\n        count += 1\n        if x_1 + pot_x == x_2 and y_1 + pot_y == y_2:\n            return 'YES'\n        if x_1 + pot_x == x_2 and y_1 - pot_y == y_2:\n            return 'YES'\n        if x_1 - pot_x == x_2 and y_1 + pot_y == y_2:\n            return 'YES'\n        if x_1 - pot_x == x_2 and y_1 - pot_y == y_2:\n            return 'YES'\n        if pot_x == pot_y:\n            pot_x += 1\n            pot_y += 1\n        else:\n            if pot_x == x_2:\n                pot_x += 1\n            if pot_y == y_2:\n                pot_y += 1\n            if pot_x == x_1:\n                pot_x += 1\n            if pot_y == y_1:\n                pot_y += 1\n    return 'NO'"
    },
    {
        "number": 303,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split())\n    if x1 + y1 == x2 + y2:\n        return \"YES\"\n    if x1 + y1 == x2 - y2:\n        return \"YES\"\n    if x1 - y1 == x2 + y2:\n        return \"YES\"\n    if x1 - y1 == x2 - y2:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_digit(i: str) -> bool:\n        return i >= '0' and i <= '9'\n\n    n = int(stdin)\n    if n == 0:\n        return 1\n    if n < 10:\n        return 0\n    if n % 10!= 0:\n        return 0\n\n    # 10 is a special case, here we need to calculate it ourselves\n    if n == 10:\n        return 10\n\n    dp = [[0 for _ in range(10)] for _ in range(n)]\n    dp[0][0] = 1\n    # each number before 10 is the same as the number itself\n    dp[1][1] = 1\n\n    # first number in the sequence\n    dp[2][0] = 1\n    dp[2][1] = 1\n    # second number in the sequence\n    dp[3][1] = 1\n    # third number in the sequence\n    dp[4][0] = 1\n    dp[4][1] = 2\n    # fourth number in the sequence\n    dp[5][1] = 1\n    dp[5][2] = 1\n    # fifth number in the sequence\n    dp[6][1] = 2\n    dp[6][2] = 1\n    # sixth number in the sequence\n    dp[7][1] = 1\n    dp[7][2] = 2\n    # seventh number in the sequence\n    dp[8][1] = 2\n    dp[8][2] = 1\n    # eigth number in the sequence\n    dp[9][1] = 1\n    dp[9][2] = 2\n\n    for i in range(10, n):\n        for j in range(10):\n            dp[i][j] = sum([\n                dp[i - 1][x]\n                for x in range(10)\n                if x!= j\n            ])\n\n    return str(dp[n - 1][1])\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    total = 0\n    numbers = []\n    for i in range(0, len(stdin)):\n        number = int(stdin[i])\n        if i == 0:\n            total += 1\n        else:\n            # find the last digit in numbers\n            last = numbers[-1]\n            if number > last:\n                numbers.append(number)\n                total += 1\n            else:\n                # try to see if number * number can be part of the number\n                # for example, 2028, you can also see 2420, but not in 2028.\n                while len(numbers) > 0 and number * numbers[-1] <= last:\n                    last = numbers.pop()\n                if len(numbers) > 0:\n                    numbers.append(number)\n                else:\n                    numbers.append(number)\n                    total += 1\n    return str(total)\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return len(get_all_variants(stdin))\n\ndef"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin\n    n = input\n    print(input)\n    print(len(n))\n    print(len(n) * (len(n) + 1) / 2)\n    return str(len(n) * (len(n) + 1) / 2)\n\nsolution('')\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    print(find_bus(n))\n    return \"0\"\ndef"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    result = 1\n    if n == 0:\n        return str(result)\n    if n < 9:\n        return str(result)\n    for i in range(10, 9, -1):\n        result *= i\n    for j in range(n - 10, 10, -1):\n        result /= j\n    return str(result)\n    # Write your code here"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    while n > 0:\n        if (n % 10) >= 2:\n            count += 1\n        n = int(n / 10)\n    return str(count)\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_ = stdin.strip()\n    length = len(input_)\n    if length < 1:\n        return 0\n    if length == 1:\n        return 1 if input_ == '0' else 0\n\n    # 7 / 7 test cases passed.\n    # Status: Accepted\n    # Runtime: 24 ms\n    # Memory Usage: 14.2 MB\n    \"\"\"\n    number = int(input_)\n    # set up the table with 0\n    table = [0] * length\n\n    # let's start from 1\n    table[0] = 1\n    table[1] = 1\n    # the value of any number is equal to the number of numbers we had before plus the number of numbers before it\n    for i in range(2, length):\n        table[i] = table[i - 1] + table[i - 2]\n\n    # for the last digit, we can't use 0 or 1\n    table[length - 1] += 1\n    table[length - 2] += 1\n    # for the second to last digit, we can use 1 or 2\n    table[length - 3] += 1\n\n    return table[-1]\n    \"\"\"\n    # for the first digit, we can't use 0 or 1\n    count = 1\n    for i in range(length):\n        count += table[i]\n    # for the second to last digit, we can use 1 or 2\n    count += table[length - 2]\n    # for the third to last digit, we can use 0 or 1\n    count += table[length - 3]\n\n    return count"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    def f(n, x):\n        if n < x: return 0\n        if n == x: return 1\n        return f(n-x, x) + f(n, x-1)\n    return str(f(n, 9))"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    num, n = stdin.split('\\n')\n    res = 0\n    while int(num) > 0:\n        num, remainder = divmod(int(num), int(n))\n        res += int(remainder)\n    return str(res)"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, f = map(int, stdin.split())\n    tot = 0\n    for i in range(a):\n        tot += e\n    for i in range(b):\n        tot += f\n    for i in range(c):\n        tot += e\n    for i in range(d):\n        tot += e\n    return str(tot)\n\nprint(solution(input()))\n\"\"\"\n\nimport math\n\ndef"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    a, b, c, d, e, f = (int(x) for x in stdin[0].split())\n    ab = a + b\n    cb = c + b\n    dd = d + d\n    ef = e + f\n    return str(ab * ef)\n    return str(max(ab, cb, dd, ef))\nsolution(stdin)\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a,b,c,d,e,f = [int(x) for x in stdin.split()]\n    \n    return(a*e+b*f+d*e)"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # read stdin\n    a = int(stdin)\n    # if a == 1:\n    #     pass\n    # else:\n    #     raise ValueError(a)\n    #\n    # for line in stdin:\n    #     line = line.strip()\n    #     x = line.split()\n    #     if len(x)!= 5:\n    #         raise ValueError(x)\n    #\n    #     l, w, h, a, b = x\n    #     a = int(l)\n    #     b = int(w)\n    #     c = int(h)\n    #     d = int(a)\n    #     e = int(b)\n    #     f = int(c)\n    #     g = int(d)\n    #     h = int(e)\n    #     i = int(f)\n    #     j = int(g)\n    #     k = int(h)\n    #     l = int(i)\n    #     m = int(j)\n    #     n = int(k)\n    #     stdin = [a, b, c, d, e, f, g, h, i, j, k, l, m, n]\n    #     if l!= a or b!= w or c!= h or d!= a or e!= b or f!= c or g!= d or h!= e or i!= f or j!= g or k!= h:\n    #         raise ValueError(stdin)\n    #\n    #     # your code\n    #     pass\n    #\n    # return 0\n\n    # your code\n    # your code\n    pass\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, f = map(int, stdin.split())\n    return (a * e + b * f) * 2 + (c + d) * 2"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  return str(max(int(x) * min(2, int(y) + int(z)) for x, y, z in zip(stdin.split(), stdin.split(), stdin.split())))"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, f = map(int, stdin.split())\n    return str(max((e + f) * a + min(e, f) * b + max(e, f) * c + min(e, f) * d,\n                   e * a + f * b + min(e, f) * c + max(e, f) * d))\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Get input.\n    a, b, c, d, e, f = map(int, stdin.split())\n\n    # Product of all possible two-tuple combinations.\n    def prod(a, b):\n        return a * b\n\n    # If all three are needed, add in a tie and a scarf.\n    if a + b + c >= d:\n        return prod(e, f)\n\n    # If only two are needed, add in a vest and a scarf.\n    if a + b >= d:\n        return prod(e, f) + prod(e, e)\n\n    # If only one is needed, add in a jacket and a vest.\n    if a >= d:\n        return prod(e, e) + prod(e, f)"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  a = int(stdin.split()[0])\n  b = int(stdin.split()[1])\n  c = int(stdin.split()[2])\n  d = int(stdin.split()[3])\n  e = int(stdin.split()[4])\n  f = int(stdin.split()[5])\n  return str(max(a*e + c*f, (a+b)*e + (c+d)*f))"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, f = stdin.split()\n    a, b, c, d, e, f = int(a), int(b), int(c), int(d), int(e), int(f)\n    set1 = (a + e) * 2 + d * 3\n    set2 = (b + f) * 2 + c * 3\n    return str(max(set1, set2))\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, p, x = map(int, stdin.split())\n    return str(int(x**a % p) * int(b**x % p) % p)\nprint(solution(input()))\n\n\"\"\"\n\ndef"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, p, x = list(map(int, stdin.split()))\n    return str(pow(a, x, p) * pow(b, x, p) % p)\n\n\"\"\"\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n  a,b,p,x=list(map(int,stdin.split()))\n  count=0\n  for i in range(1,x+1):\n    if pow(i,a,p)==b and pow(i,b,p)==a:\n      count+=1\n  return str(count)\n\ndef"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    a, b, p, x = stdin.split()\n    a = int(a)\n    b = int(b)\n    p = int(p)\n    x = int(x)\n\n    if a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a *"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return sum(x%a!=0 for x in range(1,min(int(x) for x in stdin.split())) for a in range(2,min(int(x) for x in stdin.split())+1) if a*x%a==1)\n\ndef"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, p, x = map(int, stdin.split())\n    if x < a**b % p:\n        return \"1\"\n    else:\n        return \"0\"\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, p, x = list(map(int, stdin.split()))\n    ans = 0\n    for i in range(1, x+1):\n        for j in range(1, i+1):\n            if a*i**j % p == b:\n                ans += 1\n            elif a*i**j % p!= b:\n                break\n    return str(ans)"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    _, a, b, p = map(int, stdin.split())\n    if a**2 % p == 1:\n        return str(1)\n    else:\n        return str(0)"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, p, x = stdin.split()\n    return str(len(list(filter(lambda n: n % a**n % b == int(x) % (a**n % p), range(1, int(x) + 1)))) - 1)\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k_2, k_3, k_5, k_6 = map(int, stdin.split())\n    # print(k_2, k_3, k_5, k_6)\n    k_2, k_3, k_5, k_6 = sorted([k_2, k_3, k_5, k_6])\n    # print(k_2, k_3, k_5, k_6)\n    num = k_2 * k_3 + k_5 * k_6\n    if (num - (k_2 + k_3 + k_5 + k_6) >= 0):\n        num = num - (k_2 + k_3 + k_5 + k_6)\n    return str(num)\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    nums = list(map(int, stdin.split()))\n    max_sum = 0\n    for i in range(1, len(nums) - 1):\n        for j in range(i + 1, len(nums)):\n            cur_sum = nums[i] + nums[j]\n            if max_sum < cur_sum:\n                max_sum = cur_sum\n    return str(max_sum)"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    k_2, k_3, k_5, k_6 = map(int, stdin.split())\n    return max(k_2 * (k_3 * 5 + k_5) + (k_2 + k_3) * k_5, k_2 * k_3 * k_5 * k_6)\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    K_2, K_3, K_5, K_6 = stdin.split()\n    K_2 = int(K_2)\n    K_3 = int(K_3)\n    K_5 = int(K_5)\n    K_6 = int(K_6)\n    max_of_three = 0\n    max_of_four = 0\n    for i in range(K_2):\n        max_of_three += 2 ** i\n    for i in range(K_3):\n        max_of_four += 3 ** i\n    max_of_two = 2 ** (K_2 + K_3)\n    max_of_six = 2 ** (K_2 + K_3 + K_5 + K_6)\n    return str(max_of_two * max_of_three + max_of_four * max_of_six)\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    max_sum = 0\n    k2, k3, k5, k6 = (int(stdin[0]), int(stdin[1]), int(stdin[2]), int(stdin[3]))\n\n    if k2 >= max(k3, k5, k6):\n        max_sum += k2*k2\n        k3 = k3-k2\n        if k3 >= k2:\n            max_sum += k3*k3\n            k5 = k5-k3\n            if k5 >= k3:\n                max_sum += k5*k5\n                k6 = k6-k5\n                if k6 >= k5:\n                    max_sum += k6*k6\n\n    return str(max_sum)"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    max_sum = 0\n    for i in range(1, num + 1):\n        for j in range(1, num + 1):\n            if (i + j) == num:\n                if (i * i) + (j * j) + (i * j) == num:\n                    max_sum = max(max_sum, i * i + j * j + i * j)\n    return str(max_sum)\n\nprint(solution(input()))\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    k_2, k_3, k_5, k_6 = stdin.split(\" \")\n    k_2, k_3, k_5, k_6 = int(k_2), int(k_3), int(k_5), int(k_6)\n    num = 0\n    while True:\n        if num == 0:\n            num = (int(k_2) + int(k_3) + int(k_5) + int(k_6))\n            if num == k_2 + k_3 + k_5 + k_6:\n                return str(num)\n        elif num > k_2 + k_3 + k_5 + k_6:\n            num = (int(k_2) + int(k_3) + int(k_5) + int(k_6))\n        elif num == k_2 + k_3 + k_5 + k_6:\n            num = (int(k_2) + int(k_3) + int(k_5) + int(k_6))\n        else:\n            num = (int(k_2) + int(k_3) + int(k_5) + int(k_6))\n\nsolution(\"1 1 1 1\")\nsolution(\"1 1 1 1 1\")\nsolution(\"2 2 2 2 2\")\nsolution(\"2 2 2 2 2 2\")\nsolution(\"2 2 2 2 2 2\")\nsolution(\"2 2 2 2 2 2 2\")\nsolution(\"5 1 1 1 1\")\nsolution(\"5 1 1 1 1 1\")\nsolution(\"5 1 1 1 1 1\")\nsolution(\"5 1 1 1 1 1 1\")\nsolution(\"5 1 1 1 1 1 1\")\nsolution(\"5 1 1 1 1 1 1 1\")\nsolution(\"5 1 1 1 1 1 1 1 1\")\nsolution(\"5 1 1 1 1 1 1 1 1\")\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    k2, k3, k5, k6 = map(int, stdin.split())\n    return max(k2*2 + k3*3 + k5*5 + k6*6, k2*256 + k3*3 + k5*5 + k6*1)"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    k_2, k_3, k_5, k_6 = map(int, stdin.split())\n    return max(k_2*2 + k_3*3 + k_5*5 + k_6*6, max(k_2*2 + k_3*3 + k_5*5, k_2*2 + k_3*3))"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    _, k_2, k_3, k_5, k_6 = stdin.split()\n    k_2 = int(k_2)\n    k_3 = int(k_3)\n    k_5 = int(k_5)\n    k_6 = int(k_6)\n    result = sum([int(i) for i in list(str(k_2 * k_3 * k_5 * k_6))])\n    return str(result)\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y, c = map(int, stdin.split())\n    x_off = y_off = False\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if i == x and j == y:\n                x_off = y_off = True\n            elif i == x or j == y:\n                continue\n            elif x_off and not y_off:\n                if i - 1 == x:\n                    if j == y - 1:\n                        c -= 1\n                    elif j == y + 1:\n                        c -= 1\n                elif j - 1 == y:\n                    if i == x - 1:\n                        c -= 1\n                    elif i == x + 1:\n                        c -= 1\n            elif y_off and not x_off:\n                if i == x - 1:\n                    if j == y:\n                        c -= 1\n                    elif j == y - 1:\n                        c -= 1\n                elif j == y + 1:\n                    if i == x + 1:\n                        c -= 1\n                    elif i == x - 1:\n                        c -= 1\n    return str(c)"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y, c = map(int, stdin.split())\n    return str(0 if c >= n**2 or (c * 2) % (n**2 - 1) else n**2 - c * 2 - 1)\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y, c = map(int, stdin.split())\n    if n >= c:\n        return str(n - c - (n * (n - 1) + 1) // 2)\n    else:\n        return str(n - c)\n\n\nprint(solution(*(map(str, input().split()))))\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    (n, x, y, c) = (int(i) for i in stdin.split())\n    f = [[False]*n for _ in range(n)]\n    f[x-1][y-1] = True\n    count = 0\n    for _ in range(c):\n        for i in range(n):\n            for j in range(n):\n                if f[i][j] == False:\n                    continue\n                for k in range(i+1, n):\n                    f[k][j] = True\n                for k in range(i-1, -1, -1):\n                    f[k][j] = True\n                for k in range(j+1, n):\n                    f[i][k] = True\n                for k in range(j-1, -1, -1):\n                    f[i][k] = True\n        count += 1\n    return count\n\n\ndef"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y, c = list(map(int, stdin.split()))\n\n    if n == 1 and x == y == 0:\n        return 0\n\n    if n == 1 and x == 1:\n        return c\n\n    # 1st array\n    arr1 = [[0] * n for i in range(n)]\n    # 2nd array\n    arr2 = [[0] * n for i in range(n)]\n\n    for i in range(n):\n        arr1[i][i] = 1\n        arr2[i][i] = 1\n\n    def is_on(x, y, arr):\n        for i in range(n):\n            if arr[i][x] == 1:\n                if arr[x][i] == 1:\n                    return True\n            if arr[i][y] == 1:\n                if arr[y][i] == 1:\n                    return True\n        return False\n\n    t = 0\n    while t < c:\n        if t == 0:\n            for i in range(n):\n                arr1[0][i] = 1\n                arr1[i][0] = 1\n        else:\n            for i in range(n):\n                arr1[i][i] = 1\n        for i in range(n):\n            for j in range(n):\n                if arr1[i][j] == 1:\n                    if arr1[i][j] == 0 and not is_on(i, j, arr1):\n                        arr1[i][j] = 1\n                        arr1[j][i] = 1\n                    if arr1[i][j] == 0 and is_on(i, j, arr1):\n                        arr1[i][j] = 1\n                        arr1[j][i] = 1\n        t += 1\n\n        if t == c:\n            break\n        for i in range(n):\n            for j in range(n):\n                if arr1[i][j] == 0 and arr2[i][j] == 0:\n                    arr2[i][j] = 1\n                    arr2[j][i] = 1\n        t = 0\n    return sum([arr2[x][y] for x in range(n) for y in range(n)])\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    (n, x, y, c) = stdin.split()\n    (n, x, y, c) = (int(n), int(x), int(y), int(c))\n    grid = [[0]*n for _ in range(n)]\n    grid[x-1][y-1] = 1\n    turn = 0\n    while True:\n        turn += 1\n        for i in range(n):\n            for j in range(n):\n                if grid[i][j] == 1:\n                    if i > 0:\n                        grid[i-1][j] = 1\n                    if j > 0:\n                        grid[i][j-1] = 1\n                    if i < n-1:\n                        grid[i+1][j] = 1\n                    if j < n-1:\n                        grid[i][j+1] = 1\n        if turn == c:\n            break\n    return str(turn)\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    [n, x, y, c] = map(int, stdin.split())\n\n    if c <= n**2/2:\n        return \"0\"\n\n    grid = [[0 for i in range(n)] for j in range(n)]\n    x_count = y_count = 0\n    for i in range(n):\n        for j in range(n):\n            grid[i][j] = 1\n            if i - 1 >= 0 and grid[i-1][j] == 1:\n                x_count += 1\n            if j - 1 >= 0 and grid[i][j-1] == 1:\n                y_count += 1\n            if j + 1 < n and grid[i][j+1] == 1:\n                y_count += 1\n            if i + 1 < n and grid[i+1][j] == 1:\n                x_count += 1\n            if x_count >= c and y_count >= c:\n                return \"2\"\n            x_count = y_count = 0\n    return \"1\"\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y, c = map(int, stdin.split())\n    m = 1 << n\n    row = (x + 1) * m + (x - 1)\n    col = (y + 1) * m + (y - 1)\n    if row + col <= m:\n        return 0\n    else:\n        return max(row, col) - m\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y, c = map(int, stdin.split())\n    return str(min(n * n - n + 1, c))"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  n, x, y, c = list(map(int, stdin.split()))\n  return str(2 * (c * (c - 1) // 2) + (n - c) * (n - 1))"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l, r = map(int, stdin.split())\n    return str(max(a+b for a in range(l, r+1) for b in range(a, r+1)))"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    l = stdin\n    l = l.split()\n    l = list(map(int,l))\n    l.sort()\n    x = l[0]\n    y = l[1]\n    x = x ^ y\n    return str(x)\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    l, r = map(int, stdin.split())\n    return str(max(a + b for a in range(l, r + 1) for b in range(l, r + 1)))\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(max(a ^ b, a ^ (a ^ b), b ^ (a ^ b)))\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.strip().split(' ')\n    l = int(inputs[0])\n    r = int(inputs[1])\n    max = -1\n\n    for x in range(l, r + 1):\n        for y in range(l, r + 1):\n            curr = x + y\n            if curr > max:\n                max = curr\n\n    return str(max)\n\n\ndef"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    return str(max(a[0] ^ a[1], a[1] ^ a[0], a[0] ^ a[1]))"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    l, r = [int(i) for i in stdin.split()]\n    xor_fun = lambda x, y: x ^ y\n    arr = range(l, r + 1)\n    max_value = max(max(map(xor_fun, arr[i:], arr[i + 1:]) for i in range(len(arr) - 1)), default=0)\n    return str(max_value)\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    l, r = map(int, stdin.split())\n    return max(int(x) + int(y) for x in range(l, r) for y in range(l, r))\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split()\n    l = int(input[0])\n    r = int(input[1])\n    max = -float('inf')\n    for i in range(l, r + 1):\n        for j in range(l, r + 1):\n            if i ^ j > max:\n                max = i ^ j\n    return str(max)\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    inp = list(map(int, stdin.split()))\n    l, r = inp\n    res = 0\n    while l <= r:\n        res = max(res, (l+r)//2)\n        l = max(l, (l+r)//2)\n    return str(res)"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n == k == 1:\n        return \"1\"\n    points = [0] * (n * 2 + 1)\n    points[1] = 1\n    for i in range(n):\n        points[i * 2 + 2] = (i, 0)\n    points[2 * n] = (n, 0)\n    for i in range(n - 1):\n        points[2 * n + i + 1] = (n + i, 1)\n    s = [(0, 0)]\n    max_x = 0\n    for (x, y) in points:\n        max_x = max(max_x, x)\n        s.append((x, max_x - x))\n    s.sort(key=lambda x: x[0])\n    max_y = max(i[1] for i in s)\n    for (x, y) in s:\n        if y == max_y:\n            return str(x)\n    return str(max_x - 1)\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k == 0:\n        return '0'\n    d = {1: 2, 3: 1}\n    if n % 2 == 1:\n        return d[(n // 2) + 2]\n    return d[n // 2]"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(min(n, 1 - n // k))\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n'''"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    The problem is similar to the one in the previous case. The only difference is that we are given a list of points\n    '''\n    n, k = map(int, stdin.split())\n    \n    all_x_y = []\n    x_y = (0,0)\n    for i in range(n):\n        x_y = (x_y[0]+i, x_y[1])\n        all_x_y.append(x_y)\n    \n    all_x_y.append(x_y)\n    \n    min_height = k\n    \n    for i in range(len(all_x_y) - 1):\n        x1, y1 = all_x_y[i]\n        x2, y2 = all_x_y[i+1]\n        if y1 == y2:\n            if y1 + 1 > min_height:\n                min_height = y1 + 1\n        elif x1 == x2:\n            if x1 + 1 > min_height:\n                min_height = x1 + 1\n    \n    return str(min_height)\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def get_area(a):\n        return abs(a[0]) + abs(a[1])\n\n    n, k = map(int, stdin.split())\n    cnt = 0\n    points = [(i, 0) for i in range(n + 1)]\n    while True:\n        cnt += 1\n        p1 = points[0]\n        p2 = points[1]\n        if p2[0] - p1[0] % 2!= 0:\n            continue\n        if get_area(p1) >= k:\n            break\n        points[0] = (p1[0] - 1, p1[1])\n        points[1] = (p2[0] + 1, p2[1])\n    print(cnt)\n    return str(cnt)\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(k - max(sum(n * abs(x - i) for i, x in enumerate(map(int, stdin.split()))) / 2, 0))\n\nprint(solution(input()))\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    return str(min(n * (k + n - 1) / 2, k))"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(2 * n - 1 + (k // 2))\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    [n, k] = list(map(int, stdin.split()))\n    return str(2*n+1-k)\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z, t1, t2, t3 = (int(n) for n in stdin.split())\n    time_to_reach_x = (x - 1) * t1 + t2\n    time_to_reach_y = (y - 1) * t1 + t2\n    if (time_to_reach_x <= time_to_reach_y):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z, t_1, t_2, t_3 = map(int, stdin.split())\n    if t_2 >= t_1 or t_3 >= t_1:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z, t_1, t_2, t_3 = map(int, stdin.split())\n    if (y - x) % (t_2 - t_1) < (t_3 - t_2):\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z, t1, t2, t3 = map(int, stdin.split())\n\n    if t1 <= x <= t2 and t3 <= y <= t3:\n        return 'YES'\n    if t1 <= x <= t3 and t3 <= y <= t2:\n        return 'YES'\n    if t1 <= y <= t2 and t3 <= x <= t3:\n        return 'YES'\n    if t1 <= y <= t3 and t3 <= x <= t2:\n        return 'YES'\n    if t1 <= x <= t3 and t1 <= y <= t3:\n        return 'YES'\n    if t1 <= y <= t2 and t1 <= x <= t2:\n        return 'YES'\n    if t1 <= y <= t3 and t1 <= x <= t3:\n        return 'YES'\n    if t1 <= x <= t2 and t1 <= y <= t2:\n        return 'YES'\n    if t1 <= x <= t3 and t1 <= y <= t3:\n        return 'YES'\n    if t1 <= y <= t2 and t3 <= x <= t3:\n        return 'YES'\n    if t1 <= x <= t3 and t3 <= y <= t2:\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z, t1, t2, t3 = [int(i) for i in stdin.split(' ')]\n    if (t2 <= x) and (t3 <= y) and (t2 <= z) and (x <= t1 and y <= z):\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    x, y, z, t1, t2, t3 = map(int, stdin)\n    t1 = t1 + x - 1\n    t2 = t2 + y - 1\n    t3 = t3 + x - 1 + y - 1\n    if t1 <= t2 <= t3:\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z, t1, t2, t3 = list(map(int, stdin.split()))\n    if t2 >= t3 + t1:\n        return 'YES'\n    else:\n        return 'NO'\n\nprint(solution(input()))"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return 'NO'"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z, t_1, t_2, t_3 = map(int, stdin.split())\n    # x, y, z, t_1, t_2, t_3 = 5 1 4 4 2 1\n    # x, y, z, t_1, t_2, t_3 = 1 6 6 2 1 1\n    # x, y, z, t_1, t_2, t_3 = 4 1 7 4 1 2\n    # x, y, z, t_1, t_2, t_3 = 4 1 7 4 1 2\n    t_3 = t_2 if t_1 > t_2 else t_3\n\n    if x == y:\n        return \"NO\"\n    if x == z:\n        return \"YES\"\n\n    # Time = x+y+t_3\n    # t_1 = Time-x\n    # t_2 = Time-x-y\n    # t_3 = Time-x-y-z\n    # Time = x+y+t_3-t_1-t_2-t_3\n    # Time = x+y+t_3-t_1-t_2+t_3\n\n    # Time = x+y+t_3-x\n    # Time = x+y+t_3-x-y\n    # Time = x+y+t_3-x-y-z\n    # Time = x+y+t_3-x-y-z-t_3\n    # Time = x+y+t_3-x-y-z-t_3-t_3\n    # Time = x+y+t_3-x-y-z-t_3-t_3-t_3\n    # Time = x+y+t_3-x-y-z-t_3-t_3-t_3-t_3\n    # Time = x+y+t_3-x-y-z-t_3-t_3-t_3-t_3-t_3\n    # Time = x+y+t_3-x-y-z-t_3-t_3-t_3-t_3-t_3-t_3-t_3\n    # Time = x+y+t_3-x-y-z-t_3-t_3-t_3-t_3-t_3-t_3-t_3-t_3\n    # Time = x+y+t_3-x-y-z-t_3-t_3-t_3-t_3-t_3-t_3-t_3-t_3-t_3\n    # Time = x+y+t_3-x-y-z-t_3-t_3-t_3-t_3-t_3-t_3-t_3-t_3-t_3-t_3\n    # Time = x+y+t_3-x-y-z-t_3-t_3-t_3-t_3-t_3-t_3-t_3-t_3-t_3-t_3-t_3\n    # Time = x+y+t_3-x-y-z-t_3-t_3-t_3-t_3-t_3-t_3-t_3-t_3-t_3-t_3-t_3\n    # Time = x+y+t_3-x-y-z-t_3-t_3-t_3-t_3-t_3-t_3-t_3-t_3-t_3-t_3-t_3-t_3\n    # Time = x+y+t_3-x-y-z-t_3-t_3-t_3-t_3-t_3-t_3-t_3-t_3-t_3-t_3-t_3-t_3-t_3\n    # Time = x+y+t_3-x-y-z-t_3-t_3-t_3-t_3-t_3-t_3-t_3-t_3-t_3-t_3-t_3-t_3-t_3-t_3\n    # Time = x+y+t_3-x-y-z-t_3-t_3-t_3-t_3-t_3-t_3-t_3-t_3-t_3-t_3-t_3-t_3-t_3-t_3-t_3\n    # Time = x+y+t_3-x-y-z-t_3-t_3-t_3-t_3"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z, t_1, t_2, t_3 = map(int, stdin.split())\n    if x == y:\n        return 'NO'\n    if x == z:\n        return 'YES'\n    time_to_stairs = t_1 + t_2 + t_3\n    time_to_elevator = x + y - z - t_2\n    if time_to_stairs < time_to_elevator:\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    res = float('-inf')\n    for a in range(1, n + 1):\n        c = max(n - a + 1, 1)\n        if abs(c - a) < abs(c - m):\n            res = c\n    return str(res)\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    while m!= n:\n        m = min(abs(m - n), abs(m - n - 1))\n    return str(m)\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def distance(a: int, b: int) -> int:\n        return abs(a - b)\n    def probability(a: int, b: int, c: int) -> int:\n        return (distance(a, c) <= distance(a, b)) * (distance(c, b) <= distance(c, a))\n    n, m = map(int, stdin.split())\n    a = randint(1, n)\n    for x in range(1, n + 1):\n        if probability(a, x, m) > probability(a, m, x):\n            a = x\n    return str(a)\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    if n > m:\n        return str(n)\n    a = 1\n    while (abs(n - a) > abs(n - m)):\n        a += 1\n    return str(a)"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(min(range(1, n + 1), key=lambda a: abs(m - a)) if abs(m - n) < abs(m - a) else abs(m - n))\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    d = m - n\n    for i in range(n + 1):\n        if abs(d - i) < abs(d - m):\n            return str(i)"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    m = max(x, y)\n    n = min(x, y)\n    print(int((n-m+2) * (n-m+1) * 1/4))\n    return\n\nsolution(input())\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = stdin.split()\n    n, m = int(n), int(m)\n    if m > n:\n        return str(n)\n    elif m == n:\n        return str(n)\n    else:\n        c = randint(1, n)\n        x = abs(n - c)\n        if x < abs(m - c):\n            return str(c)\n        else:\n            return str(m)\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    max_c = n - m + 1\n    counts = []\n    for i in range(1, max_c):\n        counts.append((i, m, 1 - i / n))\n    counts = sorted(counts, key=lambda x: x[0])\n    return str(counts[0][1])"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    return '{0}'.format(solution_rec(n, m))\n\ndef"
    },
    {
        "number": 313,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    schedule = stdin.strip().split()\n    hours_to_sleep = 0\n    pairs_with_break = 0\n    for i in range(n):\n        if schedule[i] == '1':\n            pairs_with_break += 1\n            if pairs_with_break >= 2:\n                hours_to_sleep += 1\n                pairs_with_break = 0\n    return str(hours_to_sleep)\n"
    },
    {
        "number": 313,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split(\" \")))\n    n = stdin[0]\n    schedule = stdin[1:]\n    \n    schedule.sort()\n\n    ans = 0\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if schedule[i] and schedule[j]:\n                ans += 1\n                break\n    \n    return str(ans)\n"
    },
    {
        "number": 313,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    jumps = 0\n    for i in range(n - 1):\n        if a[i] == a[i + 1]:\n            jumps += 1\n        else:\n            jumps = 0\n        if jumps >= 2:\n            return '{} pairs'.format(jumps)\n    return 'no pairs'\n"
    },
    {
        "number": 313,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    pairs = [int(i) for i in stdin.split()]\n    ans: int = 0\n    end_time = 0\n    for i in range(1, n):\n        start_time = pairs[i - 1]\n        end_time = pairs[i]\n        if end_time - start_time >= 2:\n            ans += 1\n    return str(ans)\n"
    },
    {
        "number": 313,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    schedule = stdin.split()\n    first_lesson_idx = 0\n    c = 1\n    for i in range(1, n):\n        if schedule[i-1] == '1':\n            if schedule[i] == '1':\n                first_lesson_idx = i\n                break\n            else:\n                c += 1\n        else:\n            c += 1\n    c += 1\n    return str(c)\n"
    },
    {
        "number": 313,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    pairs: List[int] = []\n    for i in range(n):\n        pairs.append(int(stdin.split()[i]))\n\n    day: int = 1\n    current: int = 1\n    lessons: int = 0\n    while pairs:\n        if current == pairs[0]:\n            lessons += 1\n            current += 1\n            pairs.pop(0)\n        else:\n            if lessons == 0:\n                day += 1\n                lessons = 0\n            elif lessons == 1:\n                lessons = 0\n            else:\n                lessons = 1\n\n    return str(day)\n"
    },
    {
        "number": 313,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    lec_schedule = stdin.splitlines()[1:]\n    pairs = {tuple(map(int, pair.split())) for pair in lec_schedule}\n    dp = {0: 1}\n\n    for pair in pairs:\n        if pair[0] in dp:\n            dp[pair[1]] = dp[pair[0]]\n        if pair[0] not in dp:\n            dp[pair[0]] = 1\n    for pair in pairs:\n        if pair[1] in dp:\n            dp[pair[0]] = dp[pair[1]]\n        if pair[1] not in dp:\n            dp[pair[1]] = 1\n    return str(len(dp))"
    },
    {
        "number": 313,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    pairs = stdin.split()\n    pairs = list(map(int,pairs))\n    while(True):\n        #print(pairs)\n        if pairs == [0]*n:\n            break\n        for i in range(0,n-1):\n            if pairs[i] == 1 and pairs[i+1] == 0:\n                break\n        else:\n            pairs[i+1] = 1\n        #print(pairs)\n    return str(len(pairs)-pairs.count(0))\n\nprint(solution(input()))\n"
    },
    {
        "number": 313,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = stdin.split()\n    return str(sum([1 if a[i] == 0 else 0 for i in range(1, n)]))\n"
    },
    {
        "number": 313,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 314,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 314,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    _, n, k = stdin.split()\n    n, k = int(n), int(k)\n    _, a = stdin.split()\n    a = list(map(int, a))\n    _, i = stdin.split()\n    i = int(i)\n    ans = -1\n    for j in range(i, n + 1):\n        if j in a:\n            continue\n        days = 1\n        k = 0\n        while k < k + 8 and j < n:\n            k += a[j]\n            days += 1\n            j += 1\n        if k >= k + 8:\n            ans = days\n            break\n    return str(ans)\n"
    },
    {
        "number": 314,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    days = {}\n    for i in range(n):\n        a, b = [int(x) for x in stdin.split()]\n        days[i + 1] = a + b\n    days = sorted(days.items(), key=lambda x: x[0])\n    if days[n - 1][1] <= k:\n        return str(n)\n    return str(days[n - 1][0])\n"
    },
    {
        "number": 314,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n, k = map(int, stdin.split())\n    box = list(map(int, stdin.split()))\n    if len(box) < 2:\n        return -1\n    \n    \n    res = n\n    \n    while True:\n        if res >= k:\n            if box:\n                if box[0] == max(box):\n                    res -= 1\n                    box.pop(0)\n                else:\n                    box.pop(0)\n        else:\n            res = min(res, len(box))\n        if res == 0:\n            return -1\n        \n    return res\n    \n"
    },
    {
        "number": 314,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    return \"-\" if max(a) * k > n else str(n - max(a) * k + 1)\n"
    },
    {
        "number": 314,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    box = list(map(int, stdin.split()))\n    days = 0\n    while k > 0 and len(box) > 0:\n        if box[0] <= 8:\n            box.append(box.pop(0))\n            k -= 1\n        else:\n            box.pop(0)\n            days += 1\n    if k == 0 and len(box) == 0:\n        return f\"{days}\"\n    return \"-\"\n"
    },
    {
        "number": 314,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k > n:\n        return \"-1\"\n    candies = stdin.split()\n    candies = list(map(int, candies))\n    b = 0\n    t = 0\n    for i in range(n):\n        b += 1\n        if candies[i] > k:\n            if b == 1:\n                return \"-1\"\n            t = i\n            break\n        k -= candies[i]\n    if k == 0:\n        return t+1\n    for i in range(t, n):\n        if k >= 9:\n            return i+1\n        else:\n            k += candies[i]\n    return \"-1\"\n"
    },
    {
        "number": 314,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k <= 8:\n        return '-1'\n    count = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            count += 1\n    for i in range(1, n + 1):\n        if i % 2!= 0:\n            count += 1\n    return str(count + k - 8) if count <= k else '-1'\n"
    },
    {
        "number": 314,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(i) for i in stdin.split())\n    if n < k: return -1\n    days = list(map(int, stdin.split()))\n    days = days[:n]\n    if sum(days) < k:\n        return -1\n    if n == 1:\n        return 1\n    def solve(n, k, days, mem):\n        if (n, k, days, mem) in mem:\n            return mem[(n, k, days, mem)]\n        if n == 0:\n            return float('inf')\n        if n <= k:\n            return 0 if n == 1 else 1\n        if k == 0:\n            return float('inf')\n        if days[n - 1] > days[n - 2]:\n            return solve(n - 1, k, days, mem)\n        if days[n - 2] > days[n - 1]:\n            return solve(n - 2, k - days[n - 1], days, mem)\n        res = float('inf')\n        for i in range(1, k + 1):\n            tmp = days[n - 1] + solve(n - 1, k, days, mem)\n            if tmp < res:\n                res = tmp\n        mem[(n, k, days, mem)] = res\n        return res\n\n    return str(solve(n, k, days, dict()))"
    },
    {
        "number": 314,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    candies = list(map(int, stdin.split()))\n\n    #branched out, n < 2\n    if n < 2:\n        return str(0)\n    #branched out, n = 2\n    if n == 2:\n        return str(1)\n\n    sum_of_k_candies = sum(candies[:k])\n    \n    #branched out, n = 3\n    if n == 3:\n        return str(1)\n    \n    for i in range(3,n):\n        #branched out, k < 2\n        if k < 2:\n            return str(-1)\n\n        #branched out, k = 2\n        if k == 2:\n            return str(2)\n        \n        #branched out, k = 3\n        if k == 3:\n            return str(1)\n\n        #branched out, k > 2\n        if k > 2:\n            #branched out, k = n\n            if k == n:\n                return str(1)\n            \n            #branched out, k > n\n            if k > n:\n                return str(-1)\n\n            #branched out, k = 2\n            if k == 2:\n                return str(2)\n            \n            #branched out, k > 2\n            if k > 2:\n                return str(1)\n\n\ndef"
    },
    {
        "number": 315,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(x) for x in stdin.split())\n    days = sorted(map(int, input().split()))\n    num_additional_walks = n\n    for i in range(n):\n        if days[i] == 0:\n            num_additional_walks -= 1\n    if num_additional_walks < 0:\n        return '0'\n    walk_count = 0\n    additional_walks = 0\n    while num_additional_walks > 0:\n        if walk_count == k:\n            break\n        additional_walks += 1\n        for i in range(n):\n            if days[i] > 0:\n                walk_count += 1\n                days[i] -= 1\n                break\n            if i == n - 1:\n                num_additional_walks -= 1\n                if num_additional_walks == 0:\n                    return '0'\n    return str(walk_count) +'' + str(additional_walks)\n\nprint(solution(input()))\n\n'''\n"
    },
    {
        "number": 315,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    days = list(map(int, stdin.split()))\n    if n == 1:\n        return str(k)\n    result = 0\n    for i in range(1, n):\n        if days[i] - days[i-1] <= k:\n            result += days[i] - days[i-1]\n        else:\n            result += k\n    if days[n-1] - days[n-2] <= k:\n        result += days[n-1] - days[n-2]\n    return str(result)\n"
    },
    {
        "number": 315,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(x) for x in stdin.split())\n    a = tuple(int(x) for x in stdin.split())\n    b = {}\n    c = 0\n    for i in range(n):\n        if c < k:\n            if a[i] in b.keys():\n                c += 1\n                b[a[i]] += 1\n            else:\n                b[a[i]] = 1\n                c += 1\n    res = \"\"\n    for k,v in b.items():\n        res += f\"{k} {v} {v+k} {k+v}\"\n    return res\n    \n"
    },
    {
        "number": 315,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k, s = stdin.split()\n    n, k, s = int(n), int(k), int(s)\n    a = [int(i) for i in stdin.split()]\n\n    def s_n_s(a, n, k, s):\n        if n == 1:\n            return a[0] == s\n        if n == 2:\n            return a[0] <= s and s <= a[1]\n        return s_n_s(a, n - 1, k, s) or s_n_s(a, n - 1, k, s + a[n - 1])\n\n    def s_n(a, n, k, s):\n        if s == 0:\n            return True\n        if n == 1:\n            return a[0] == s\n        if n == 2:\n            return a[0] <= s and s <= a[1]\n        return s_n(a, n - 1, k, s) or s_n(a, n - 1, k, s + a[n - 1])\n\n    def dp(a, n, k, s):\n        if n == 1:\n            return True if s == 0 else False\n        if n == 2:\n            return True if s == 0 or s == a[1] else False\n        return dp(a, n - 1, k, s) or dp(a, n - 1, k, s + a[n - 1])\n\n    return \"0\" if s_n(a, n, k, s) else \"1\" if s_n_s(a, n, k, s) else \"2\" if dp(a, n, k, s) else \"3\"\n"
    },
    {
        "number": 315,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    stdin = \"2 5\"\n    stdin = \"3 1\"\n    stdin = \"4 6\"\n    stdin = \"7 5\"\n    '''\n    n, k = map(int, stdin.split())\n\n    # a_i < b_i for all 1 \u2264 i \u2264 n\n    a = list(map(int, stdin.split()))\n    ans = (sum(a[1:n]) * (n - 1) + n) // 2\n\n    # k = a[i] < b[i] for all 1 \u2264 i < n\n    # b_i < a_i for all 1 \u2264 i < n\n    b = []\n    for i in range(n):\n        b.append(a[i] - a[i - 1])\n    b = list(map(int, b))\n\n    # i = 1, 2,..., n\n    # a[i] < b[i] for all 1 \u2264 i < n\n    # b[i] < a[i] for all 1 \u2264 i < n\n    for i in range(1, n):\n        ans = min(ans, abs(b[i] - b[i - 1]))\n\n    return str(ans)\n"
    },
    {
        "number": 315,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.rstrip('\\n').split('\\n')\n    n, k = map(int, stdin[0].split())\n    cormen = map(int, stdin[1].split())\n    # Find all p_i such that p_i = k x p_i + 1\n    #   P1 = 2 x p_1 + 1\n    #   P2 = 2 x p_2 + 1\n    #   P3 = 2 x p_3 + 1\n    # Now we want all p_i such that P_i = k + 1 x P_i + 1\n    #   P1 = 3 x p_1 + 1\n    #   P2 = 3 x p_2 + 1\n    #   P3 = 3 x p_3 + 1\n    #   P4 = 3 x p_4 + 1\n    #   P5 = 3 x p_5 + 1\n    #   P6 = 3 x p_6 + 1\n    #   P7 = 3 x p_7 + 1\n    #   P8 = 3 x p_8 + 1\n    #   P9 = 3 x p_9 + 1\n    # We know that all P_i = k + 1, so we just need to add 1 to all P_i\n    #   P1 = 4 x p_1 + 1\n    #   P2 = 4 x p_2 + 1\n    #   P3 = 4 x p_3 + 1\n    #   P4 = 4 x p_4 + 1\n    #   P5 = 4 x p_5 + 1\n    #   P6 = 4 x p_6 + 1\n    #   P7 = 4 x p_7 + 1\n    #   P8 = 4 x p_8 + 1\n    #   P9 = 4 x p_9 + 1\n    # Find all b_i such that b_i = k x b_i + 1\n    #   B1 = 3 x b_1 + 1\n    #   B2 = 3 x b_2 + 1\n    #   B3 = 3 x b_3 + 1\n    #   B4 = 3 x b_4 + 1\n    #   B5 = 3 x b_5 + 1\n    #   B6 = 3 x b_6 + 1\n    #   B7 = 3 x b_7 + 1\n    #   B8 = 3 x b_8 + 1\n    #   B9 = 3 x b_9 + 1\n    # We know that all B_i = k, so we just need to add 1 to all B_i\n    #   B1 = 4 x b_1 + 1\n    #   B2 = 4 x b_2 + 1\n    #   B3 = 4 x b_3 + 1\n    #   B4 = 4 x b_4 + 1\n    #   B5 = 4 x b_5 + 1\n    #   B6 = 4 x b_6 + 1\n    #   B7 = 4 x b_7 + 1\n    #   B8 = 4 x b_8 + 1\n    #   B9 = 4 x b_9 + 1\n    # So we are good\n    # Find all b_i\n    #   B1 = 4 x b_1 + 1\n    #   B2 = 4 x b_2 + 1\n    #   B3 = 4 x b_3 + 1\n    #   B4 = 4 x b_4 + 1\n    #   B5 = 4 x b_5 + 1\n    #   B6 = 4 x b_6 + 1\n    #   B7 = 4 x b_7 + 1\n    #   B8 = 4 x b_8 + 1\n    #   B9 = 4 x b_9 + 1\n    #   And for each b_i we need to find a_i which satisfies a_i = b_i + 1\n    #   a1 = 2 x a_1 + 1 = 3\n    #   a2 = 2 x a_2 + 1 = 3\n    #   a3 = 2 x a_3 + 1 = 3\n    #   a4 = 2 x a_4 + 1 = 3\n    #   a5 = 2 x a_5 + 1 = 3\n    #   a6 = 2 x a_6 + 1 = 3\n    #   a7 = 2 x a_7 + 1 = 3\n    #   a8 = 2 x a_8 + 1 = 3\n    #   a9 = 2 x a_9 + 1 = 3\n    #   a1 = 3 x a_1 + 1 = 4\n    #   a2 = 3 x a_2 + 1 = 4\n    #   a3 = 3 x a_3 + 1 = 4\n    #   a4 = 3 x a_4 + 1 = 4\n    #   a5 = 3 x a_5 + 1 = 4\n    #   a6 = 3 x a_6 + 1 = 4\n    #   a7 = 3 x a_7 + 1 = 4\n    #   a8 = 3 x a_8 + 1 = 4\n    #   a9 = 3 x a_9 + 1 = 4\n    #   a1 = 4 x a_1 + 1 = 5\n    #   a2 = 4 x a_2 + 1 = 5\n    #   a3 = 4 x a_3 + 1 = 5\n    #   a4 = 4 x a_4 + 1 = 5\n    #   a5 = 4 x a_5 + 1 = 5\n    #   a6 = 4 x a_6 + 1 = 5\n    #   a7 = 4 x a_7 + 1 = 5\n    #   a8 = 4 x a_8 + 1 = 5\n    #   a9 = 4 x a_9 + 1 = 5\n    #   a1 = 5 x a_1 + 1 = 6\n    #   a2 = 5 x a_2 + 1 = 6\n    #   a3 = 5 x a_3 + 1 = 6\n    #   a4 = 5 x a_4 + 1 = 6\n    #   a5 = 5 x a_5 + 1 = 6\n    #   a6 = 5 x a_6 + 1 = 6\n    #   a7"
    },
    {
        "number": 315,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    result = 0\n    max_result = 0\n    result_2 = []\n    for i in range(n):\n        if a[i] < 0:\n            max_result = max_result + 1\n        else:\n            max_result = max(max_result, a[i])\n    a = sorted(a)\n    while max_result >= 0:\n        if max_result > k:\n            result = result + 1\n            result_2.append(max_result)\n        max_result = max_result - k\n    result = result + max_result + 1\n    for i in range(n):\n        print(result_2[i], end=' ')\n    print()\n    return result\n"
    },
    {
        "number": 315,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    already_counts = list(map(int, stdin.split()))\n\n    def is_good(already_counts):\n        for i in range(1, n):\n            if already_counts[i] > already_counts[i - 1]:\n                return False\n        return True\n\n    def get_solutions(n, k, already_counts):\n        if len(already_counts) == n:\n            if is_good(already_counts):\n                return 1\n            return 0\n        if n == 0:\n            return 0\n\n        res = 0\n        for i in range(1, k + 1):\n            if already_counts[n - 1] < i:\n                continue\n            if already_counts[n - 1] == i:\n                already_counts[n - 1] = i + 1\n                res += get_solutions(n - 1, k, already_counts)\n                already_counts[n - 1] = i\n            else:\n                already_counts[n - 1] = i\n                res += get_solutions(n - 1, k, already_counts)\n        return res\n\n    return str(get_solutions(n, k, already_counts))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 315,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    dp[0][0] = 1\n    for i in range(1, n):\n        dp[i][i] = 1\n        if i-1 >= 0:\n            dp[i][i-1] = a[i-1]\n    for i in range(n-2, -1, -1):\n        for j in range(i+1, n):\n            dp[i][j] = dp[i][j] + max(dp[i+1][j], dp[i][j-1])\n    return str(dp[0][n-1])"
    },
    {
        "number": 315,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k, *a = map(int, stdin.split())\n    s = 0\n    x = n - 1\n    b = [0] * (x + 1)\n    a_sorted = sorted(a)\n    for i, ai in enumerate(a_sorted):\n        if i == 0:\n            s += ai\n        else:\n            s += ai - a_sorted[i-1]\n            x -= a_sorted[i-1]\n        b[x] = s\n    print(s)\n    print(*b)\n    return ''\nsolution('''2 5\n2 0 1\n''')\n"
    },
    {
        "number": 316,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return str(1)\n    else:\n        rhs = n - 1\n        lhs = n - 2\n        x = 1\n        y = 1\n        count = 0\n        while (rhs > 0):\n            rhs -= 2\n            lhs -= 2\n            if rhs == lhs:\n                count += 2 * x + 2 * y\n                x = x + 1\n                y = y + 1\n            else:\n                count += 4 * x + 6 * y\n                x = x + 2\n                y = y\n        return str(count)\n"
    },
    {
        "number": 316,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(1, n+1):\n        count += int(i * (i - 1) / 2)\n    return str(count)"
    },
    {
        "number": 316,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return str(1)\n    return str(n*(n-1)*2)\n"
    },
    {
        "number": 316,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    c = a - 1\n    b = (c*(c+1))//2\n    return str(b)"
    },
    {
        "number": 316,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your solution goes here\n    \"\"\"\n    n = int(stdin)\n    if n == 1:\n        return 1\n    else:\n        return 2 * solution(n-1) + 1\n"
    },
    {
        "number": 316,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\nYour function\u00a0should return the number of cells of a given order of rhombus.\n\nIf your function accepts the test case, make sure that it raises a ValueError with appropriate error message.\n\n\"\"\"\n\nn = int(input())\ndef"
    },
    {
        "number": 316,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(n**2)\n"
    },
    {
        "number": 316,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 316,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 316,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n'''\n"
    },
    {
        "number": 317,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return 'NO'\n"
    },
    {
        "number": 317,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    letters = set(''.join(stdin.split()))\n    letters = set(map(str.lower, letters))\n    return 'YES' if 'a' in letters else 'NO'\n"
    },
    {
        "number": 317,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    alphabet_list = list(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\")\n    alphabet_list.sort()\n    s_as_list = list(s.replace(' ', ''))\n    for i in range(len(alphabet_list)):\n        if alphabet_list[i] not in s_as_list:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 317,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lst = stdin.split()\n    for s in lst:\n        for i in range(len(s)):\n            if s[i] >= 'a' and s[i] <= 'z':\n                continue\n            else:\n                return \"NO\"\n    return \"YES\"\n\n\nsolution(stdin)\n"
    },
    {
        "number": 317,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.lower()\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    missing_letters = []\n    for letter in alphabet:\n        if letter not in stdin:\n            missing_letters.append(letter)\n\n    if missing_letters:\n        return \"NO\"\n    else:\n        return \"YES\""
    },
    {
        "number": 317,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    string = stdin\n    string = string.lower()\n    if len(string) < 26:\n        return \"NO\"\n    for index in range(len(alphabet)):\n        if alphabet[index] not in string:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 317,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lower_chars = set()\n    for char in stdin:\n        if char.islower():\n            lower_chars.add(char)\n    print(len(lower_chars))\n    if len(lower_chars) == 26:\n        return 'YES'\n    else:\n        return 'NO'\n\n\nprint(solution(input()))"
    },
    {
        "number": 317,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    l = list(stdin)\n    l1 = []\n    l2 = []\n    for i in l:\n        if i.islower():\n            l1.append(i)\n        if i.isupper():\n            l2.append(i)\n    for i in l1:\n        if i not in l2:\n            return 'NO'\n    return 'YES'\n\nprint(solution(stdin))\n\n\n##or"
    },
    {
        "number": 317,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    count = {letter: alphabet.count(letter) for letter in alphabet}\n    return 'YES' if all(s.count(letter) >= count[letter] for letter in alphabet) else 'NO'\n    \n    \n    # or\n    return \"YES\" if all(letter in s for letter in alphabet) else \"NO\"\n"
    },
    {
        "number": 317,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"NO\"\n"
    },
    {
        "number": 318,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h, m = map(int, stdin.split(':'))\n    return '{}:{:02d}'.format(h + m // 60, m % 60)"
    },
    {
        "number": 318,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    h, m = map(int, stdin.split())\n    if h > 23:\n        return \"00:00\"\n    h = (h + m / 60) % 24\n    m = m % 60\n    return f\"{int(h):02d}:{int(m):02d}\"\n"
    },
    {
        "number": 318,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    h, m = stdin.split(\":\")\n    h = int(h)\n    m = int(m)\n\n    m_new = m + (h*60)\n    if m_new >= 60:\n        m_new -= 60\n        h += 1\n    if h >= 24:\n        h -= 24\n    return str(h) + \":\" + str(m_new)\n\nprint(solution(input()))"
    },
    {
        "number": 318,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    h, m = stdin.split(':')\n    h, m = int(h), int(m)\n    return '{0:02}:{1:02}'.format(h % 12 + (h // 12) * 12, m + (h // 12) * 30)\n"
    },
    {
        "number": 318,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    h, m = list(map(int, stdin.split()))\n    m += a\n    if m >= 60:\n        h += 1\n        m -= 60\n    if h >= 24:\n        h -= 24\n    h = str(h).zfill(2)\n    m = str(m).zfill(2)\n    return h + \":\" + m"
    },
    {
        "number": 318,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    if x < 10:\n        x = str('0' + str(x))\n    else:\n        x = str(x)\n\n    if y < 10:\n        y = str('0' + str(y))\n    else:\n        y = str(y)\n    return x + ':' + y\n\nprint(solution(input()))"
    },
    {
        "number": 318,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    h, m = map(int, stdin.split(':'))\n    m += 1\n    if m >= 60:\n        m -= 60\n        h += 1\n    return '{:02}:{:02}'.format(h, m)\n"
    },
    {
        "number": 318,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Examples:\n    Input:  stdin = \"23:59\"\n    Output: \"00:09\"\n\n    Input:  stdin = \"20:20\"\n    Output: \"22:21\"\n\n    Input:  stdin = \"10:10\"\n    Output: \"10:10\"\n    \"\"\"\n    hh, mm = map(int, stdin.split(\":\"))\n    hours, minutes = divmod(mm + 60 * hh, 60)\n    return f\"{str(hours).zfill(2)}:{str(minutes).zfill(2)}\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 318,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    time, minutes = stdin.split(' ')\n    hours = int(time[:2])\n    minutes = int(time[3:])\n    minutes += int(minutes)\n    print(f'{hours}:{minutes:02}')\n    return f'{hours}:{minutes:02}'\n\nsolution(input())\n"
    },
    {
        "number": 318,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    h, m = map(int, stdin.split())\n    minutes = m + a\n    minutes = (minutes // 60) * 60\n    hour, minute = divmod(minutes, 60)\n    if hour < 10:\n        hour = '0' + str(hour)\n    if minute < 10:\n        minute = '0' + str(minute)\n    print(f'{hour}:{minute}')\n\nsolution(input())\n"
    },
    {
        "number": 319,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    switch_lamps = [[int(x) for x in stdin.split()]]\n    for _ in range(n-1):\n        switch_lamps.append([int(x) for x in stdin.split()])\n\n    for i, lamps in enumerate(switch_lamps):\n        for j, switch in enumerate(lamps):\n            if switch == 1:\n                for switch_lamps_ij in switch_lamps[i+1:]:\n                    if switch_lamps_ij[j] == 1:\n                        break\n                else:\n                    print(\"NO\")\n                    return\n    print(\"YES\")\n"
    },
    {
        "number": 319,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n == m:\n        return \"YES\"\n    matrix = [[0] * (m + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        row = stdin.split()[i]\n        for j in range(1, m + 1):\n            if row[j - 1] == \"1\":\n                matrix[i][j] = 1\n    row_start = matrix[n]\n    for i in range(1, n + 1):\n        if row_start[i] == 0:\n            for j in range(1, m + 1):\n                if matrix[i][j] == 0:\n                    for k in range(1, n + 1):\n                        if matrix[k][j] == 0:\n                            matrix[k][j] = 1\n                            row_start[k] = 1\n                            for l in range(1, n + 1):\n                                if matrix[l][j] == 0:\n                                    matrix[l][j] = 1\n                                    row_start[l] = 1\n                                else:\n                                    matrix[l][j] = 0\n                                    row_start[l] = 0\n                            for l in range(1, n + 1):\n                                if matrix[l][j] == 0:\n                                    matrix[l][j] = 0\n                                    row_start[l] = 0\n                                else:\n                                    matrix[l][j] = 1\n                                    row_start[l] = 1\n                            for l in range(1, n + 1):\n                                if matrix[l][j] == 0:\n                                    matrix[l][j] = 1\n                                    row_start[l] = 1\n                                else:\n                                    matrix[l][j] = 0\n                                    row_start[l] = 0\n                            for l in range(1, n + 1):\n                                if matrix[l][j] == 0:\n                                    matrix[l][j] = 0\n                                    row_start[l] = 0\n                                else:\n                                    matrix[l][j] = 1\n                                    row_start[l] = 1\n                            for l in range(1, n + 1):\n                                if matrix[l][j] == 0:\n                                    matrix[l][j] = 1\n                                    row_start[l] = 1\n                                else:\n                                    matrix[l][j] = 0\n                                    row_start[l] = 0\n                            for l in range(1, n + 1):\n                                if matrix[l][j] == 0:\n                                    matrix[l][j] = 1\n                                    row_start[l] = 1\n                                else:\n                                    matrix[l][j] = 0\n                                    row_start[l] = 0\n                            for l in range(1, n + 1):\n                                if matrix[l][j] == 0:\n                                    matrix[l][j] = 1\n                                    row_start[l] = 1\n                                else:\n                                    matrix[l][j] = 0\n                                    row_start[l] = 0\n                            for l in range(1, n + 1):\n                                if matrix[l][j] == 0:\n                                    matrix[l][j] = 1\n                                    row_start[l] = 1\n                                else:\n                                    matrix[l][j] = 0\n                                    row_start[l] = 0\n                            for l in range(1, n + 1):\n                                if matrix[l][j] == 0:\n                                    matrix[l][j] = 1\n                                    row_start[l] = 1\n                                else:\n                                    matrix[l][j] = 0\n                                    row_start[l] = 0\n                            for l in range(1, n + 1):\n                                if matrix[l][j] == 0:\n                                    matrix[l][j] = 1\n                                    row_start[l] = 1\n                                else:\n                                    matrix[l][j] = 0\n                                    row_start[l] = 0\n                            for l in range(1, n + 1):\n                                if matrix[l][j] == 0:\n                                    matrix[l][j] = 1\n                                    row_start[l] = 1\n                                else:\n                                    matrix[l][j] = 0\n                                    row_start[l] = 0\n                            for l in range(1, n + 1):\n                                if matrix[l][j] == 0:\n                                    matrix[l][j] = 1\n                                    row_start[l] = 1\n                                else:\n                                    matrix[l][j] = 0\n                                    row_start[l] = 0\n                            for l in range(1, n + 1):\n                                if matrix[l][j] == 0:\n                                    matrix[l][j] = 1\n                                    row_start[l] = 1\n                                else:\n                                    matrix[l][j] = 0\n                                    row_start[l] = 0\n                            for l in range(1, n + 1):\n                                if matrix[l][j] == 0:\n                                    matrix[l][j] = 1\n                                    row_start[l] = 1\n                                else:\n                                    matrix[l][j] = 0\n                                    row_start[l] = 0\n                            for l in range(1, n + 1):\n                                if matrix[l][j] == 0:\n                                    matrix[l][j] = 1\n                                    row_start[l] = 1\n                                else:\n                                    matrix[l][j] = 0\n                                    row_start[l] = 0\n                            for l in range(1, n + 1):\n                                if matrix[l][j] == 0:\n                                    matrix[l][j] = 1\n                                    row_start[l] = 1\n                                else:\n                                    matrix[l][j] = 0\n                                    row_start[l] = 0\n                            for l in range(1, n + 1):\n                                if matrix[l][j] == 0:\n                                    matrix[l][j] = 1\n                                    row_start[l] = 1\n                                else:\n                                    matrix[l][j] = 0\n                                    row_start[l] = 0\n                            for l in range(1, n + 1):\n                                if matrix[l][j] == 0:\n                                    matrix[l"
    },
    {
        "number": 319,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    switch = [[int(i) for i in stdin.split()] for j in range(n)]\n    if any(all(switch[i][j] == 1 for i in range(n)) for j in range(m)):\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 319,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    n, m = map(int, stdin.split())\n    lamps = [0] * m\n    for i in range(n):\n        a = list(map(int, stdin.split()[i]))\n        for j in range(m):\n            lamps[j] = a[j]\n    for i in range(m):\n        if lamps.count(0) == 0:\n            return \"NO\"\n        else:\n            lamps[i] = 0\n    for i in range(n):\n        lamps[i] = 0\n    return \"YES\"\n"
    },
    {
        "number": 319,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(x) for x in stdin.split())\n    # find a possible solution\n    switchs = []\n    lamps = []\n    for i in range(n):\n        row = stdin.split()[i]\n        switchs += row\n        lamps += row\n\n    # init set of lamps\n    n_lamps = set(lamps)\n\n    # init set of switches\n    n_switches = set(switchs)\n\n    # remove lamps that are already on\n    n_lamps = n_lamps - n_switches\n\n    # if n_lamps == set() or n_switches == set()\n    if not n_lamps or not n_switches:\n        return \"NO\"\n    else:\n        # if n_lamps!= set() and n_switches!= set()\n        return \"YES\"\n"
    },
    {
        "number": 319,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  n, m = map(int, stdin.split())\n  a = [1] + [0] * m\n  for i in range(1, n+1):\n    a[i] = int(input())\n  for i in range(n-1):\n    if a[i] == 0:\n      continue\n    if not all(a[i+1:]):\n      return \"YES\"\n  return \"NO\""
    },
    {
        "number": 319,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    x = set()\n    for i in range(n):\n        for j in range(m):\n            if stdin[i][j] == '1':\n                x.add(i)\n    if len(x) == n:\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 319,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(lambda line: list(line), stdin.splitlines()))\n    seen = set()\n    def dfs(x, y):\n        if x == m:\n            return 1\n        if (x, y) in seen:\n            return 0\n        seen.add((x, y))\n        ans = 0\n        for i in range(m):\n            if a[x][i] == 0:\n                continue\n            if i in seen:\n                continue\n            if dfs(x + 1, i + 1):\n                ans = 1\n        return ans\n    return \"YES\" if dfs(0, 0) else \"NO\""
    },
    {
        "number": 319,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    switchs = list(map(int, stdin.split('\\n')))\n    if sum(switchs) < 0:\n        return 'NO'\n    n = len(switchs)\n    m = len(switchs[0])\n    switchs = list(map(lambda x: x!= 0, switchs))\n    if max(switchs)!= 0:\n        return 'NO'\n    switchs = list(map(lambda x: 1 if x else 0, switchs))\n    return 'YES'"
    },
    {
        "number": 319,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    lights = [0] * n\n    for _ in range(n):\n        lights[_] = list(map(int, stdin.strip().split()))\n\n    def is_on(x):\n        if x == 1:\n            return True\n        else:\n            return False\n\n    def is_off(x):\n        if x == 0:\n            return True\n        else:\n            return False\n\n    for i in range(m):\n        if is_on(lights[i][i]) and is_off(lights[i][i]):\n            return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 320,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    if n == 1:\n        return 0\n    pieces = n - 1\n    half_a: int = 1\n    half_b: int = 2\n    while pieces > 0:\n        if half_a == 6 or half_b == 6:\n            if half_b == 6:\n                half_a = 1\n                half_b = 2\n            else:\n                half_a = 3\n                half_b = 4\n        print(half_a)\n        print(half_b)\n        pieces -= 1\n    return\n"
    },
    {
        "number": 320,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    output = 0\n\n    for i in range(n):\n        x, y = stdin.split()\n        x, y = int(x), int(y)\n        if x % 2!= 0 and y % 2!= 0:\n            output = -1\n            break\n        if x % 2 == 0 and y % 2 == 0:\n            output = 2\n\n    return str(output)\n"
    },
    {
        "number": 320,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    n_b = n // 2\n    a = []\n    b = []\n    for i in range(n):\n        a.append(int(stdin.split()[i]))\n        b.append(int(stdin.split()[i + n]))\n    a = a + b\n    a = sorted(a)\n    b = sorted(b)\n    sum_a = 0\n    sum_b = 0\n    for i in range(n):\n        sum_a += a[i]\n        sum_b += b[i]\n    if (sum_a % 2 == 0) and (sum_b % 2 == 0):\n        return str(0)\n    if (sum_a % 2!= 0) and (sum_b % 2!= 0):\n        return str(-1)\n    if (sum_a % 2 == 0) and (sum_b % 2!= 0):\n        for i in range(n_b):\n            a[i], a[i + n_b] = a[i + n_b], a[i]\n        sum_a = 0\n        for i in range(n):\n            sum_a += a[i]\n        if (sum_a % 2 == 0):\n            return str(0)\n        else:\n            return str(-1)\n    if (sum_a % 2!= 0) and (sum_b % 2!= 0):\n        for i in range(n_b):\n            a[i], a[i + n_b] = a[i + n_b], a[i]\n        sum_a = 0\n        for i in range(n):\n            sum_a += a[i]\n        if (sum_a % 2!= 0):\n            return str(0)\n        else:\n            return str(-1)\n"
    },
    {
        "number": 320,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    sums = []\n    for _ in range(n):\n        sums.append(sum(map(int, stdin.split()[1:])))\n    m = sum(sums[::2])\n    k = sum(sums[1::2])\n    return str(m - k if m - k == m + k else -1)\n"
    },
    {
        "number": 320,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # Counts the number of even numbers in the range 1-n\n    count = 0\n    i = 1\n    while count < n:\n        i = i + 2\n        if i % 2 == 0:\n            count = count + 1\n    if i == n:\n        return -1\n    # Counts the number of odd numbers in the range 1-n\n    count2 = 0\n    j = 1\n    while count2 < n:\n        j = j + 2\n        if j % 2!= 0:\n            count2 = count2 + 1\n    if j == n:\n        return -1\n    return max(i, j)\n\ndef"
    },
    {
        "number": 320,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # create a grid\n    grid = [[0 for _ in range(n)] for _ in range(n)]\n\n    # create a list of the numbers from 1 to 6\n    numbers = list(range(1, 7))\n\n    # create a list to keep track of the numbers on the upper and lower halves\n    upper_numbers, lower_numbers = [], []\n\n    # count the number of upper and lower numbers\n    for i in range(n):\n        if i < n // 2:\n            upper_numbers.append(numbers.pop())\n        else:\n            lower_numbers.append(numbers.pop())\n\n    # loop for the number of elements in the list of numbers\n    for i in range(n):\n        upper_sum, lower_sum = 0, 0\n\n        # count the upper numbers and lower numbers\n        for j in range(n):\n            if i < n // 2:\n                upper_sum += upper_numbers[j]\n            else:\n                lower_sum += lower_numbers[j]\n\n        # if the numbers in the upper and lower halves are equal, break the loop\n        if upper_sum == lower_sum:\n            break\n        # if not equal break the loop\n        if i!= n - 1:\n            continue\n\n        # if the numbers in the upper and lower halves are equal, break the loop\n        if upper_sum == lower_sum:\n            break\n\n    # print the result\n    if upper_sum == lower_sum:\n        return \"0\"\n    return str(upper_sum + lower_sum)\n"
    },
    {
        "number": 320,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    upper, lower = map(int, stdin.split()[1].split(\" \"))\n    upper = upper - 1\n    lower = lower - 1\n    # print(upper)\n    # print(lower)\n    # print(upper + lower)\n    if upper % 2 == 0 and lower % 2 == 0:\n        return str(-1)\n    # print(upper / 2)\n    # print(lower / 2)\n    if upper % 2!= 0 and lower % 2!= 0:\n        return str(max(upper / 2, lower / 2))\n    if upper % 2!= 0 and lower % 2 == 0:\n        return str(max(upper / 2, lower / 2) + 1)\n    if upper % 2 == 0 and lower % 2!= 0:\n        return str(max(upper / 2, lower / 2) - 1)"
    },
    {
        "number": 320,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return\n"
    },
    {
        "number": 320,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    answer = -1\n    x = 0\n    y = 0\n    for _ in range(n):\n        x, y = map(int, stdin.split())\n    if x % 2!= 0 or y % 2!= 0:\n        answer = -1\n    elif x % 2 == 0 and y % 2 == 0:\n        answer = 0\n    elif x % 2 == 0 and y % 2!= 0:\n        answer = 1\n    else:\n        answer = 2\n\n    return answer\n"
    },
    {
        "number": 320,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    d = []\n    for i in range(n):\n        d.append(list(map(int, stdin.split())))\n    for i in range(1, n):\n        d[i][0] += d[i - 1][0]\n        d[i][1] += d[i - 1][1]\n    for i in range(1, n):\n        d[i][0] += d[i - 1][1]\n        d[i][1] += d[i - 1][0]\n    for i in range(1, n):\n        for j in range(1, n):\n            d[i][j] += d[i - 1][j - 1]\n    x = 0\n    y = 0\n    for i in range(n):\n        x += d[i][i]\n        y += d[i][n - 1 - i]\n    x += d[n - 1][0]\n    y += d[n - 1][1]\n    if x % 2 == 0 and y % 2 == 0:\n        return 0\n    elif x % 2!= 0 and y % 2!= 0:\n        return -1\n    elif x % 2 == 0 and y % 2!= 0:\n        return (x * 2 + y - 1) // 2\n    else:\n        return (x * 2 + y + 1) // 2\n"
    },
    {
        "number": 321,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for i in range(t):\n        a, b = map(int, stdin.split())\n        c = a**2 - b**2\n        if c % 2!= 0:\n            print('NO')\n        else:\n            print('YES')\n    return\n"
    },
    {
        "number": 321,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for i in range(t):\n        a, b = list(map(int, stdin.split()[i * 2 + 1].split(\" \")))\n        if is_prime(a) and is_prime(b):\n            if a ** 2 + b ** 2 == a ** 2 + (b - a) ** 2:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n    return \"\"\n\n\ndef"
    },
    {
        "number": 321,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        a, b = map(int, stdin().split())\n        if (a ** 2 - b ** 2) % 2 == 0:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n\n    return \" \".join(stdin().split())\n"
    },
    {
        "number": 321,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    for _ in range(int(stdin)):\n        a,b=map(int,input().split())\n        if a**2-b**2 in range(1,10**11):\n            if is_prime(int(a**2-b**2)):\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            print(\"NO\")\nsolution(input())\n\n\"\"\"\nfrom math import sqrt\ndef"
    },
    {
        "number": 321,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split('\\n')\n    for i, j in enumerate(stdin):\n        a, b = j.split()\n        b = int(b)\n        print(\"NO\" if not check(int(a), int(b)) else \"YES\")\n    return\n\n\ndef"
    },
    {
        "number": 321,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 321,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for i in range(t):\n        a, b = (int(i) for i in stdin.split()[i*2+1].split())\n        if is_prime(a**2 - b**2) == 1:\n            print('YES')\n        else:\n            print('NO')\n    return ''\n\n\ndef"
    },
    {
        "number": 321,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin)\n    for _ in range(t):\n        l1, l2 = map(int, stdin().split())\n        area = l1 * l2 - max(l1, l2)\n        if is_prime(area):\n            return \"YES\"\n    return \"NO\"\n\n\ndef"
    },
    {
        "number": 321,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    for _ in range(int(stdin)):\n        a, b = map(int, input().split())\n        if a % b == 0 or a / b == 0:\n            print('YES')\n        else:\n            print('NO')\n"
    },
    {
        "number": 321,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    t = int(stdin)\n    for i in range(t):\n        a, b = [int(n) for n in stdin.split()]\n        if a == b:\n            print(\"YES\")\n        elif a > b:\n            s1 = (a*a)-(b*b)\n            if s1 > 0:\n                if isprime(s1):\n                    print(\"YES\")\n                else:\n                    print(\"NO\")\n        else:\n            s2 = (b*b)-(a*a)\n            if s2 > 0:\n                if isprime(s2):\n                    print(\"YES\")\n                else:\n                    print(\"NO\")\n    return \"\"\n\ndef"
    },
    {
        "number": 322,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x_y_pairs = []\n    for _ in range(n):\n        x_y_pairs.append(list(map(int, stdin.split())))\n    x_y_pairs.sort(key=lambda x_y: x_y[0]**2 + x_y[1]**2)\n    for i in range(1, len(x_y_pairs)):\n        if x_y_pairs[i-1][0] == x_y_pairs[i][0]:\n            return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 322,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    points = list()\n    for i in range(n):\n        points.append([int(x) for x in stdin.split()[i*2+1].split(',')])\n    points = sorted(points, key=lambda x: (x[0], x[1]))\n    if points[1][0] == points[2][0]:\n        print('No')\n    else:\n        print('Yes')\nsolution(input())\n"
    },
    {
        "number": 322,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    points = stdin.split()\n    points = [(int(i[0]), int(i[1])) for i in points]\n    points.sort(key=lambda x: (x[0], -x[1]))\n    if points[0][0] * points[1][0] + points[0][1] * points[1][1] == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 322,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    points = [tuple(map(int, input().split())) for _ in range(n)]\n    for i in range(len(points)):\n        for j in range(i + 1, len(points)):\n            if points[i][0] == points[j][0] or points[i][1] == points[j][1]:\n                return 'No'\n    return 'Yes'\n"
    },
    {
        "number": 322,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.strip()\n    # N = int(input_data[0])\n    input_data = input_data.split()\n    points = sorted([list(map(int, point.split())) for point in input_data[1:]])\n    # points = sorted(points, key=lambda x: (x[0], -x[1]))\n    points = sorted(points, key=lambda x: (x[1], -x[0]))\n    if not points[-1][0] == points[0][0] and points[-1][1] == points[0][1]:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 322,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    for i in range(x):\n        print('Yes' if not any(\n            [i < 0 or abs(i) > abs(j) for j in range(x)]) else 'No')\n    return 'Yes' if not any(\n        [i < 0 or abs(i) > abs(j) for j in range(x)]) else 'No'\n"
    },
    {
        "number": 322,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    points = list()\n    for _ in range(n):\n        points.append(list(map(int, stdin.split())))\n    points = sorted(points, key=lambda p: (p[0], p[1]))\n    print(\"Yes\" if points[1] == (points[0][0] + points[0][1], points[0][1] - points[0][0]) else \"No\")\n    return \"Yes\" if points[1] == (points[0][0] + points[0][1], points[0][1] - points[0][0]) else \"No\"\n"
    },
    {
        "number": 322,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1 = map(int, stdin.split())\n    x2 = y2 = float('inf')\n    while True:\n        if x1 == x2 and y1 == y2:\n            print('Yes')\n            return\n        if x1 == x2:\n            y1 += 1\n        if y1 == y2:\n            x1 += 1\n        if x1 == x2 and y1 == y2:\n            print('Yes')\n            return\n\nsolution(input())\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndef"
    },
    {
        "number": 322,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    points = []\n    for line in stdin.splitlines():\n        points.append(tuple(map(int, line.split())))\n    print(\"Yes\" if condition(points) else \"No\")\n    return \"Yes\" if condition(points) else \"No\"\n\n\ndef"
    },
    {
        "number": 322,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    if abs(x) == 0 and abs(y) == 0:\n        return \"Yes\"\n    for i in range(2,10):\n        if abs(x) == 0 and abs(y) == i:\n            return \"Yes\"\n    for i in range(2,10):\n        if abs(x)!= 0 and abs(y) == i:\n            return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 323,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    factorial_of_n = 1\n    factorial_of_m = 1\n    for i in range(1, n+1):\n        factorial_of_n *= i\n    for i in range(1, m+1):\n        factorial_of_m *= i\n    gcd = factorial_of_n // factorial_of_m\n    return str(gcd)"
    },
    {
        "number": 323,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    return str(gcd(A, B))\n\ndef"
    },
    {
        "number": 323,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.strip())\n    b = int(stdin.strip())\n    a_factorial = 1\n    b_factorial = 1\n    for i in range(1, a+1):\n        a_factorial *= i\n    for i in range(1, b+1):\n        b_factorial *= i\n    print(a_factorial//b_factorial)\nsolution(input())\n"
    },
    {
        "number": 323,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    input:\n    1 2\n    \n    output:\n    6\n    '''\n    \n    a,b = map(int, stdin.split())\n    return str(get_GCD(a,b))\n\ndef"
    },
    {
        "number": 323,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    if A == 1:\n        return str(B)\n    elif A == 2:\n        return str(B * 2)\n    else:\n        return str(B * 2) + \"!\" + str(A * 2) + \"!\""
    },
    {
        "number": 323,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(gcd(a,b))\ndef"
    },
    {
        "number": 323,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B = list(map(int, stdin.split()))\n    return str(gcd(A, B))\n\ndef"
    },
    {
        "number": 323,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    x = stdin[0]\n    y = stdin[1]\n\n    res = 1\n\n    for i in range(1, int(x)+1):\n        res *= i\n    for i in range(1, int(y)+1):\n        res //= i\n\n    return res\n"
    },
    {
        "number": 323,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = (int(i) for i in stdin.split())\n    print(gcd(a, b))\n\ndef"
    },
    {
        "number": 323,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    while m >= n:\n        m -= n\n    return str(n) + '! ='+ str(m) + '!' +'='+ str(n*m)\n\nsolution(input())\n\n\n'''\n\n\ndef"
    },
    {
        "number": 324,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    for line in stdin:\n        number = int(line)\n        divisors = set()\n        for i in range(1, int(number ** 0.5)):\n            if number % i == 0:\n                divisors.add(i)\n                divisors.add(number // i)\n\n        divisors.remove(1)\n        if 1 not in divisors:\n            divisors.add(1)\n\n        divisors = list(divisors)\n        divisors.sort()\n        divisors = \" \".join(str(i) for i in divisors)\n\n        print(f\"{number} {divisors}\")\n\nsolution(sys.stdin)\n"
    },
    {
        "number": 324,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    n = int(stdin[0])\n    composites = []\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            continue\n        if i < 3 or i > n - 1:\n            continue\n        if i == n:\n            continue\n        if is_composite(i):\n            composites.append(i)\n    print(composites)\n    return composites\n\ndef"
    },
    {
        "number": 324,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    for i in range(2, num):\n        for j in range(2, num):\n            if j > i and num % j == 0:\n                break\n        else:\n            print(i, j)\n            break\n    else:\n        print(\"No solution\")\n\nsolution(input())"
    },
    {
        "number": 324,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = 0\n    b = 1\n    while (a + b)!= n:\n        a = b\n        b = a + b\n    print(a, b)\n    return\n"
    },
    {
        "number": 324,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    \n    if n == 0:\n        print(1, 1)\n        return\n    \n    for a in range(2, n+1):\n        if n % a == 0:\n            for b in range(1, a):\n                if n % a == 0 and n % b == 0:\n                    print(a, b)\n                    return\n        else:\n            continue\n\nsolution(input())\n"
    },
    {
        "number": 324,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(2, n // 2 + 1):\n        if n % i == 0:\n            return f\"{i} {n//i}\"\n    return f\"{n}\""
    },
    {
        "number": 324,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n  # your code here\n  return \" \""
    },
    {
        "number": 324,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if (n % 2 == 0):\n        return \"0\"\n    if (n % 2!= 0):\n        return \"1\""
    },
    {
        "number": 324,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    for a in range(2, 10**5):\n        b = n-a\n        if a*b == n:\n            return str(a) + \" \" + str(b)\n    return str(x)+ \" \" + str(y)\n"
    },
    {
        "number": 324,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    i = 0\n    j = 0\n    while True:\n        if i**2 + j**2 > n:\n            break\n        i += 1\n        j = i\n    i = 0\n    while True:\n        if i**2 + j**2 > n:\n            break\n        i += 1\n        j = i\n\n    print(i, j)\n\nsolution(input())\n"
    },
    {
        "number": 325,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    [N, M, P] = list(map(int, stdin.split()))\n    graph = {}\n    for i in range(1, N+1):\n        graph[i] = []\n    for i in range(M):\n        a, b, c = list(map(int, stdin.split()))\n        graph[a].append((b, c))\n        graph[b].append((a, c))\n    q = []\n    n = 1\n    m = 0\n    for i in range(1, N+1):\n        if i!= N:\n            q.append((i, 0))\n    while len(q) > 0:\n        a, m = q.pop(0)\n        if a == N:\n            return str(m)\n        for b, c in graph[a]:\n            if b == N:\n                return str(m+c)\n            q.append((b, m+c))\n    return \"0\"\n"
    },
    {
        "number": 325,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin_list = stdin.split()\n    N, M, P = map(int, stdin_list[0].split())\n    graph = defaultdict(list)\n    for i in range(M):\n        graph[int(stdin_list[i * 2 + 1].split()[0])].append(int(stdin_list[i * 2 + 1].split()[1]))\n    visited = defaultdict(bool)\n    stack = []\n    start_node = int(stdin_list[0].split()[0])\n    visited[start_node] = True\n    stack.append(start_node)\n    while stack:\n        node = stack.pop()\n        for neighbor in graph[node]:\n            if not visited[neighbor]:\n                visited[neighbor] = True\n                stack.append(neighbor)\n    visited = defaultdict(bool)\n    score = 0\n    while visited[N]:\n        if score < (N + 1) * P:\n            score += (N + 1) * P\n            N += 1\n        else:\n            score -= (N + 1) * P\n            N -= 1\n    return str(score)\n\n\ndef"
    },
    {
        "number": 325,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, p = stdin.split()\n    n, m, p = int(n), int(m), int(p)\n    graph = collections.defaultdict(list)\n    for _ in range(m):\n        a, b, c = stdin.split()\n        a, b, c = int(a), int(b), int(c)\n        graph[a].append((b, c))\n        graph[b].append((a, c))\n    total_coins = 0\n    visited = set()\n    visited.add(1)\n    q = collections.deque([(1, 0)])\n    while q:\n        parent, time = q.popleft()\n        if parent == n:\n            total_coins = max(total_coins, time)\n        if parent in visited:\n            continue\n        visited.add(parent)\n        for child, child_value in graph[parent]:\n            q.append((child, time + child_value))\n    return str(total_coins)\n"
    },
    {
        "number": 325,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, p = stdin.split()\n    n = int(n)\n    m = int(m)\n    p = int(p)\n\n    # just a hashmap to store the in degree and out degree of each node\n    graph = {}\n\n    for _ in range(m):\n        u, v, c = input().split()\n        u = int(u)\n        v = int(v)\n        c = int(c)\n\n        # if node u already exists, then increment the in degree\n        if u in graph:\n            graph[u][\"in\"] += 1\n        else:\n            # else, create a new node with that in degree\n            graph[u] = {\"in\": 1, \"out\": 0}\n\n        # if node v already exists, then increment the out degree\n        if v in graph:\n            graph[v][\"out\"] += 1\n        else:\n            # else, create a new node with that out degree\n            graph[v] = {\"in\": 0, \"out\": 1}\n\n        # if the node is not already present in graph, then add it\n        if v not in graph:\n            graph[v] = {\"in\": 0, \"out\": 1}\n\n    # a queue for the nodes to be visited in the next traversal\n    q = []\n    # a visited array to keep track of the nodes that have been visited\n    visited = []\n\n    # push the first node to the queue\n    q.append(1)\n    visited.append(1)\n\n    while len(q)!= 0:\n        # get the first node from the queue\n        u = q.pop(0)\n\n        # find the total number of coins that can be collected along this edge\n        t = graph[u][\"in\"] + graph[u][\"out\"]\n\n        # if the edge has not been visited\n        if u not in visited:\n            # mark it as visited\n            visited.append(u)\n\n            # push all the children of the node to the queue\n            for i in graph[u]:\n                if i!= \"out\" and i!= \"in\":\n                    q.append(i)\n\n        # if the edge has been visited, then just increment the out degree by 1\n        else:\n            graph[u][\"out\"] += 1\n\n    # traverse each node\n    for v in graph:\n        # if the node is not visited, then traverse from it\n        if v not in visited:\n            # push this node to the queue\n            q.append(v)\n            visited.append(v)\n\n    # collect all the coins collected along the edges\n    total_coins = 0\n    for i in range(len(visited)):\n        total_coins += graph[visited[i]][\"in\"] * graph[visited[i]][\"out\"]\n        if i == len(visited) - 1:\n            total_coins += graph[visited[i]][\"out\"]\n        else:\n            total_coins += graph[visited[i]][\"in\"]\n\n    # if there exists a maximum value of the score that can be obtained, print that maximum value; otherwise, print -1\n    if total_coins > p:\n        print(total_coins - p)\n    else:\n        print(-1)\n    return\n\n\nsolution(stdin)\n"
    },
    {
        "number": 325,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    _, N, M, P = stdin.split()\n    N, M, P = int(N), int(M), int(P)\n    # vN = set()\n    # vN.add(N)\n    # G = collections.defaultdict(set)\n    # for i in range(M):\n    #     a, b, c = input().split()\n    #     a, b, c = int(a), int(b), int(c)\n    #     G[a].add(b)\n    #     G[b].add(a)\n    #     vN.add(a)\n    #     vN.add(b)\n    #\n    # for i in range(1, N + 1):\n    #     if i in vN:\n    #         continue\n    #     queue = collections.deque()\n    #     queue.append(i)\n    #     s = 0\n    #     visited = set()\n    #     while len(queue) > 0:\n    #         curr_node = queue.popleft()\n    #         visited.add(curr_node)\n    #         for neighbor in G[curr_node]:\n    #             if neighbor in visited:\n    #                 continue\n    #             queue.append(neighbor)\n    #     if len(visited) < N:\n    #         continue\n    #     s += sum([c for c in range(1, N + 1)])\n    #     print(s)\n    #     return s\n    #\n    # return -1\n\n    # vN = set()\n    # vN.add(N)\n    # G = collections.defaultdict(set)\n    # for i in range(M):\n    #     a, b, c = input().split()\n    #     a, b, c = int(a), int(b), int(c)\n    #     G[a].add(b)\n    #     G[b].add(a)\n    #     vN.add(a)\n    #     vN.add(b)\n    #\n    # for i in range(1, N + 1):\n    #     if i in vN:\n    #         continue\n    #     queue = collections.deque()\n    #     queue.append(i)\n    #     s = 0\n    #     visited = set()\n    #     while len(queue) > 0:\n    #         curr_node = queue.popleft()\n    #         visited.add(curr_node)\n    #         for neighbor in G[curr_node]:\n    #             if neighbor in visited:\n    #                 continue\n    #             queue.append(neighbor)\n    #     if len(visited) < N:\n    #         continue\n    #     s += sum([c for c in range(1, N + 1)])\n    #     print(s)\n    #     return s\n    #\n    # return -1\n\n    vN = set()\n    vN.add(N)\n    G = collections.defaultdict(set)\n    for i in range(M):\n        a, b, c = input().split()\n        a, b, c = int(a), int(b), int(c)\n        G[a].add(b)\n        G[b].add(a)\n        vN.add(a)\n        vN.add(b)\n\n    for i in range(1, N + 1):\n        if i in vN:\n            continue\n        queue = collections.deque()\n        queue.append(i)\n        s = 0\n        visited = set()\n        while len(queue) > 0:\n            curr_node = queue.popleft()\n            visited.add(curr_node)\n            for neighbor in G[curr_node]:\n                if neighbor in visited:\n                    continue\n                queue.append(neighbor)\n        if len(visited) < N:\n            continue\n        s += sum([c for c in range(1, N + 1)])\n        print(s)\n        return s\n    return -1\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 325,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, p = map(int, stdin.split())\n\n    def _dijkstra(start, end):\n        \"\"\"\n        Dijkstra algorithm\n        :param start: starting vertex\n        :param end: ending vertex\n        :return: distance from start to end\n        \"\"\"\n\n        # Initialize distances\n        dist = {vertex: float('inf') for vertex in range(1, n + 1)}\n        dist[start] = 0\n\n        # Use a set to keep track of visited vertices\n        # This will prevent us from visiting the same vertex twice\n        visited = set()\n\n        # Initialize the queue\n        queue = deque()\n\n        # Add the start vertex to the queue\n        queue.append(start)\n\n        while queue:\n            # Pop a vertex from the queue and add it to the set\n            vertex = queue.popleft()\n            visited.add(vertex)\n\n            # Look at each neighbour\n            for neighbour, cost in graph[vertex].items():\n                # Look if it has not been visited yet\n                if neighbour not in visited:\n                    if dist[vertex] + cost < dist[neighbour]:\n                        dist[neighbour] = dist[vertex] + cost\n\n                        # Add the neighbour to the queue\n                        queue.append(neighbour)\n\n        return dist[end]\n\n    # Create the adjacency list\n    graph = {vertex: {} for vertex in range(1, n + 1)}\n\n    # Add edges from 1 to 2 and 2 to 3\n    for i in range(m):\n        start, end, cost = map(int, stdin.split())\n        graph[start][end] = cost\n        graph[end][start] = cost\n\n    # Find the maximum distance\n    max_distance = float('-inf')\n    for i in range(1, n + 1):\n        max_distance = max(max_distance, _dijkstra(i, n))\n\n    if max_distance > p * 10:\n        return '-1'\n\n    return str(max_distance)\n"
    },
    {
        "number": 325,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    _, _, _, = list(map(int, stdin.split()))\n    print(max_score(\n        num_v=_,\n        num_e=_,\n        num_c=_,\n        num_a=_,\n        num_b=_,\n        v=_,\n        e=_,\n        c=_,\n        t=_,\n        p=_\n    ))\n    return \"\"\n\n\ndef"
    },
    {
        "number": 325,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M, P = (int(i) for i in stdin.split())\n    graph = [[] for _ in range(N+1)]\n    for _ in range(M):\n        A, B, C = (int(i) for i in stdin.split())\n        graph[A].append((B, C))\n    node = 0\n    score = 0\n    nodes_visited = {node: 0}\n    time_spent = 0\n    while node!= N:\n        if node not in nodes_visited:\n            nodes_visited[node] = 0\n            node = 0\n            score = 0\n            time_spent = 0\n            continue\n        else:\n            time_spent += 1\n            node = 0\n            score = 0\n            for neighbour, edge_cost in graph[node]:\n                if neighbour not in nodes_visited:\n                    nodes_visited[neighbour] = 0\n                    score += edge_cost\n                    node = neighbour\n                    break\n                else:\n                    nodes_visited[neighbour] += 1\n    if score < P:\n        return \"No\"\n    return str(score - P*time_spent)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 325,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, p = map(int, stdin.split())\n\n    if not 1 <= n <= 2500:\n        return '-1'\n\n    if not 1 <= m <= 5000:\n        return '-1'\n\n    if not 1 <= p <= 10**5:\n        return '-1'\n\n    if not 1 <= n <= 2500:\n        return '-1'\n\n    if not 1 <= m <= 5000:\n        return '-1'\n\n    if not 1 <= p <= 10**5:\n        return '-1'\n\n    graph = {}\n    for i in range(1, n + 1):\n        graph[i] = set()\n    for i in range(m):\n        a, b = map(int, stdin.split())\n        if a not in graph or b not in graph:\n            return '-1'\n        graph[a].add(b)\n        graph[b].add(a)\n\n    start = 1\n    visited = set()\n    stack = [(start, 0)]\n    visited.add(start)\n    while stack:\n        node, cnt = stack.pop()\n        if node == n:\n            return str(cnt)\n        for nei in graph[node]:\n            if nei not in visited:\n                stack.append((nei, cnt + 1))\n                visited.add(nei)\n\n    return '-1'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 325,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, p = map(int, stdin.split())\n    graph = defaultdict(list)\n    for i in range(1, n + 1):\n        a, b = map(int, stdin.split())\n        graph[i].append(a)\n        graph[i].append(b)\n    start_node = 1\n    end_node = n\n    coins = 0\n    button = n\n    times = 0\n    while True:\n        for node in graph[start_node]:\n            times += 1\n            if node == end_node:\n                return str(min(times * p, coins))\n            if times > times:\n                break\n            coins += p\n        start_node += 1\n        if start_node == end_node:\n            break\n"
    },
    {
        "number": 326,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def isPalindrome(s):\n        return s == s[::-1]\n\n    n = int(stdin.split()[0])\n    arr = stdin.split()[1:]\n    for i in range(n):\n        for j in range(n):\n            if i!= j:\n                s1 = arr[i]\n                s2 = arr[j]\n                if isPalindrome(s1 + s2) and (i + 1 == j or isPalindrome(s2 + s1)):\n                    return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 326,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split()\n    n = int(a[0])\n    strings = a[1:]\n    sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            sum += len(strings[i]) + len(strings[j])\n            if sum % 2 == 0:\n                return sum\n    return -1\n\nsolution('3')\n"
    },
    {
        "number": 326,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Solution\n    # N - number of strings\n    # M - total cost\n    # S1 - string 1\n    # C1 - cost 1\n    # S2 - string 2\n    # C2 - cost 2\n    #...\n    # SN - string N\n    # CM - total cost\n    N, M = map(int, stdin.split())\n    S1, C1 = list(map(int, stdin.split()))\n    S2 = S1[::-1]\n    CM = (C1 + C2) * N\n    if CM < M:\n        print(CM)\n    else:\n        print(-1)"
    },
    {
        "number": 326,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    N = int(stdin[0])\n    strings = stdin[1:]\n    final = []\n    for i in strings:\n        final.append(i.split())\n    # print(final)\n    for j in final:\n        if (len(j) == 1):\n            print(-1)\n            return\n    final = sorted(final, key=lambda x: (x[0], int(x[1])))\n    # print(final)\n    t = 0\n    temp = 0\n    total = 0\n    string = final[0][0]\n    # print(string)\n    for i in range(1, N):\n        # print(final[i])\n        # print(string)\n        if (final[i][0] == string):\n            temp += final[i][1]\n        else:\n            total += temp * (final[i - 1][1] / final[i - 1][0])\n            string = final[i][0]\n            temp = final[i][1]\n    total += temp * (final[i - 1][1] / final[i - 1][0])\n    total += final[i][1] * (final[i][0] / final[i][1])\n    total = int(total)\n    # print(total)\n    return total\n"
    },
    {
        "number": 326,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    string_list = []\n    cost_list = []\n    for i in range(N):\n        string, cost = stdin.split()\n        string_list.append(string)\n        cost_list.append(int(cost))\n    string_list = list(set(string_list))\n    cost_list = list(set(cost_list))\n    string_list.sort()\n    cost_list.sort()\n    print(string_list)\n    print(cost_list)\n    if len(string_list)!= N:\n        return -1\n    if len(cost_list)!= N:\n        return -1\n    if len(string_list)!= len(cost_list):\n        return -1\n    return sum(i*j for i, j in zip(cost_list, string_list))"
    },
    {
        "number": 326,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = stdin.split()\n    arr = [int(x) for x in arr]\n    return min_cost(arr, n)\n\n\ndef"
    },
    {
        "number": 326,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split('\\n')[0])\n    cost = []\n    for i in range(N):\n        cost.append([stdin.split('\\n')[i*2+1], int(stdin.split('\\n')[i*2+2])])\n    return calculate(cost)\n\n\ndef"
    },
    {
        "number": 326,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    input_list = stdin.strip().split('\\n')\n    res_list = []\n    for str_i in input_list:\n        str_i = str_i.split()\n        str_i = list(map(int, str_i))\n        res_list.append(str_i)\n\n    res_list = sorted(res_list, key=lambda x: (x[1], x[0]))\n    total_cost = 0\n    for each in res_list:\n        if each[1] > total_cost:\n            total_cost = each[1]\n\n    if total_cost == 0:\n        return -1\n    return total_cost"
    },
    {
        "number": 326,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    strings = stdin.split()[1:]\n    string_cost = []\n    for i in range(n):\n        string_cost.append(int(strings[i].split()[0]))\n        strings[i] = strings[i].split()[1]\n    strings.sort(key=lambda x: x)\n    total_cost = 0\n    for i in range(n):\n        total_cost += string_cost[i] * (n - i)\n    if total_cost >= 10**9:\n        return '-1'\n    else:\n        return total_cost"
    },
    {
        "number": 326,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    arr = stdin.split()\n    arr = [int(i) for i in arr]\n    N = arr[0]\n    l = arr[1:]\n    #print(l)\n    count = []\n    for i in range(N):\n        for j in range(N):\n            if i!= j:\n                count.append(l[i] + l[j])\n    count = set(count)\n    #print(count)\n    if len(count) == 0:\n        print(\"-1\")\n    else:\n        count = sorted(count)\n        i = 0\n        while i < len(count):\n            if count[i] < 7:\n                break\n            i += 1\n        if i == len(count):\n            print(\"-1\")\n        else:\n            print(i)"
    },
    {
        "number": 327,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(max(1, n - k, k))\n"
    },
    {
        "number": 327,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  stdin = stdin.strip()\n  n, k = list(map(int, stdin.split()))\n  return str(max(((i*(n-i))^(i*(k-i))) for i in range(1, n+1)))\n\"\"\""
    },
    {
        "number": 327,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 327,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split()\n    n = int(n)\n    k = int(k)\n    max_sum = 0\n    current_sum = 0\n\n    while k > 0:\n        current_sum = n - k + 1 + max(current_sum, k)\n        max_sum = max(current_sum, max_sum)\n        k -= 1\n\n    return str(max_sum)\n"
    },
    {
        "number": 327,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(max(max(i ^ j for i in range(n + 1)) for j in range(k + 1)))"
    },
    {
        "number": 327,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    max_sum = (1 << n) - 1\n    candies = []\n    for i in range(n):\n        candies.append(i)\n    candies.sort(key=lambda x: x + (1 << (n - 1)))\n    # this is the tricky part.  we must first sort the array of candies so that the candies are arranged by decreasing\n    # value.  then we can just XOR the list.  we can do this all at once, because XORing a list of length m can be done\n    # in O(m) time.  here, since each candie has a unique value, the value is unique for each index.\n    #\n    # the first step is the obvious one.  sort the list, which is still O(n*log(n)).  then, since the list is sorted,\n    # XORing all of the elements in the list can be done in O(n) time.\n    #\n    # this is the second step.  we can find the sum of all the elements in the list.  since the list is sorted, each\n    # element must be at least as big as all of the elements before it.  so we can do a linear scan and sum each of the\n    # elements.  we can do this in O(n) time.\n    #\n    # the final step is to find the largest sum.  XORing the sums is O(n).  the only tricky part here is to find out how\n    # large the largest sum is.  if we XOR the largest sum, we will get 1, 2, 4, 7, 10, 14, 20.  we can do a binary\n    # search on the array and find the largest one.  so the largest sum will be the (2^n - 1) // 2\n    xor_sum = (1 << n) - 1\n    while (1 << n - 1) % 2!= 0:\n        xor_sum -= 1\n        n -= 1\n        if xor_sum <= max_sum:\n            break\n    print(xor_sum)\n    return str(xor_sum)\n"
    },
    {
        "number": 327,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n'''\n"
    },
    {
        "number": 327,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin_lines = stdin.splitlines()\n    n, k = map(int, stdin_lines[0].split())\n    return str(max(i ^ j for i, j in zip(range(1, n + 1), range(1, n + 1))))\nprint(solution(input()))\n"
    },
    {
        "number": 327,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  n, k = list(map(int, stdin.split()))\n  return str(max(i for i in range(n) if i + (1 << i) < k))\n"
    },
    {
        "number": 327,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    candies = []\n    while len(candies) < n:\n        candies.append(stdin.split())\n    return max([sum(list(map(lambda x: int(x) ^ 1, i))) for i in candies])\n"
    },
    {
        "number": 328,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def lines_to_points(lines):\n        return list(map(lambda x: list(map(int, x.split())), lines))\n\n    n = int(stdin.splitlines()[0])\n\n    points = lines_to_points(stdin.splitlines()[1:])\n\n    min_side = sys.maxsize\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if abs(points[i][0] - points[j][0]) + abs(points[i][1] - points[j][1]) <= min_side:\n                min_side = abs(points[i][0] - points[j][0]) + abs(points[i][1] - points[j][1])\n\n    return str(min_side)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 328,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"The solution function that will be called by solution.py.\"\"\"\n    N = int(stdin.strip())\n    x = []\n    y = []\n    for _ in range(N):\n        a, b = map(int, stdin.strip().split())\n        x.append(a)\n        y.append(b)\n    ans = float('inf')\n    for i in range(N):\n        for j in range(i + 1, N):\n            for k in range(j + 1, N):\n                ans = min(ans, min(x[i], y[i]) + min(x[j], y[j]) + min(x[k], y[k]))\n    return str(ans)\n"
    },
    {
        "number": 328,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    res = 1\n    for _ in range(n - 1):\n        a, b = map(int, stdin.split())\n        res = min(res, min(a, b))\n    return str(res)"
    },
    {
        "number": 328,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    return str(min(int(round(min(map(lambda x: x[0], (x for x in zip(*[iter(map(int, input().split())) for _ in range(N)])))))), int(round(min(map(lambda x: x[1], (x for x in zip(*[iter(map(int, input().split())) for _ in range(N)]))))))))"
    },
    {
        "number": 328,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin)\n  points = []\n  for i in range(n):\n    x, y = map(int, stdin.split())\n    points.append((x, y))\n  p1, p2 = points.pop(0), points.pop(0)\n  x1, x2 = p1\n  y1, y2 = p2\n  points.sort()\n  if x2 > x1:\n    x1, y1, x2, y2 = x2, y2, x1, y1\n  return str(x1 + y1)"
    },
    {
        "number": 328,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 328,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n'''\n"
    },
    {
        "number": 328,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    triangles = []\n    for _ in range(n):\n        x1, y1 = map(int, stdin.split())\n        triangles.append([x1, y1])\n\n    x_min = 10000\n    x_max = 0\n    y_min = 10000\n    y_max = 0\n    for i in range(len(triangles)):\n        for j in range(i):\n            x2 = triangles[i][0] - triangles[j][0]\n            y2 = triangles[i][1] - triangles[j][1]\n            x_min = min(x_min, x2)\n            y_min = min(y_min, y2)\n            x_max = max(x_max, x2)\n            y_max = max(y_max, y2)\n    return str(min(x_min, y_min, x_max - x_min, y_max - y_min))"
    },
    {
        "number": 328,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin)\n    x = []\n    y = []\n    for i in range(n):\n        x.append(int(stdin.split()[2 * i]))\n        y.append(int(stdin.split()[2 * i + 1]))\n    \n    x.sort()\n    y.sort()\n    \n    res = 0\n    for i in range(n):\n        res = max(res, ((x[i] - y[i]) ** 2 + (x[i] + y[i]) ** 2) ** 0.5)\n    \n    return str(res)\n\n----SOLUTION----\n"
    },
    {
        "number": 328,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    triangle = []\n    for _ in range(n):\n        x, y = map(int, stdin.split())\n        triangle.append((x, y))\n    print(len(set(\n        min(\n            x,\n            y\n        )\n        for x, y in triangle\n        if x >= y\n    )))\n    return stdin\n"
    },
    {
        "number": 329,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return max(count_words(stdin))\n\n\ndef"
    },
    {
        "number": 329,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin_list = list(stdin)\n    while True:\n        test = stdin_list.count('nineteen')\n        if test > 0:\n            return test\n        stdin_list = change_list(stdin_list)\n\ndef"
    },
    {
        "number": 329,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return f'{max(len(s) for s in re.split(r\"\\d\", stdin) if s.count(\"nin\") == 1)}'"
    },
    {
        "number": 329,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return(int(stdin.count('nineteen')) if stdin.count('nineteen') > 0 else 0)\n"
    },
    {
        "number": 329,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    l = len(s)\n    count = 0\n    for i in range(l-1, -1, -1):\n        if s[i] == '1':\n            count += 1\n        if count >= 19:\n            return str(count)\n        if s[i] == '2' and i == l - 1:\n            return str(count)\n    return str(count)\n"
    },
    {
        "number": 329,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    max_count = 0\n    s = stdin\n\n    for i in range(1, len(s) - 1):\n        curr_string = s[0:i]\n        if curr_string == \"nineteen\":\n            if is_word_in_string(curr_string, s):\n                max_count += 1\n            continue\n\n        curr_string = s[i:len(s)]\n        if curr_string == \"nineteen\":\n            if is_word_in_string(curr_string, s):\n                max_count += 1\n            continue\n\n        curr_string = s[len(s)-1:len(s)-1-i]\n        if curr_string == \"nineteen\":\n            if is_word_in_string(curr_string, s):\n                max_count += 1\n            continue\n\n        curr_string = s[len(s)-1-i:len(s)-1]\n        if curr_string == \"nineteen\":\n            if is_word_in_string(curr_string, s):\n                max_count += 1\n\n    return str(max_count)\n\ndef"
    },
    {
        "number": 329,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    max_occ = 0\n    for i in range(len(stdin)):\n        if stdin[i] == 'n':\n            max_occ = max(max_occ, 1)\n        else:\n            max_occ = max(max_occ, 0)\n\n    return str(max_occ)\n"
    },
    {
        "number": 329,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    # print(s)\n    s = ''.join(s.split())\n    # print(s)\n    total = 0\n    for i in range(len(s)-1):\n        if s[i:i+1] == 'nineteen' and s[i+1:i+2] == 'nineteen':\n            total += 1\n    return str(total)\n"
    },
    {
        "number": 329,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Using the idea of palindromes we can construct palindromes in the form of n1nn1nn1n1n1nn1n1n1nn1n1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1nn1nn1n1nn1nn1n1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1nn1n1nn1"
    },
    {
        "number": 329,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 330,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    y = int(stdin)\n    if not(2 <= y <= 10 ** 9):\n        return '-1'\n    x = 2\n    while(y > 2):\n        if x * y % 2!= 0:\n            y -= 1\n            x = x + 1\n        else:\n            y = y / 2\n            x = x + 2\n    return str(int(x - 1))"
    },
    {
        "number": 330,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 330,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, y = list(map(int, stdin.split()))\n\n    if n < 2 or y < 2:\n        return -1\n\n    max_height = n\n    max_num = -1\n\n    for i in range(2, int(math.ceil(y/2)) + 1):\n        left_branch = i\n        while left_branch <= n:\n            right_branch = left_branch * i\n            if right_branch > n:\n                break\n            else:\n                if n == 1:\n                    return 1\n                else:\n                    num = n - 1 + max(left_branch, right_branch)\n                    if num > max_height:\n                        max_height = num\n                        max_num = i\n            left_branch += 1\n\n    return str(max_num)\n"
    },
    {
        "number": 330,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    p, y = map(int, stdin.strip().split())\n    \n    # algorithm:\n    # if x in {2, 3,..., y/x}: return x\n    # if x in {1, 2, 3,..., y}: return 2 * x\n    # if x in {2, 3,..., y//2}: return 2 * x\n    # if x in {1, 2, 3,..., y//3}: return 2 * x\n    # if x in {2, 3,..., y//2}: return 3 * x\n    # if x in {1, 2, 3,..., y//3}: return 3 * x\n    # if x in {2, 3,..., y//3}: return 4 * x\n    # if x in {1, 2, 3,..., y//4}: return 4 * x\n    # if x in {2, 3,..., y//4}: return 5 * x\n    # if x in {1, 2, 3,..., y//5}: return 5 * x\n    # if x in {2, 3,..., y//5}: return 6 * x\n    # else: return -1\n\n    # algorithm:\n    # 1. from 2 to y: {(2 * x) for x in {2, 3,..., y//2}}\n    # 2. from 1 to y: {(3 * x) for x in {1, 2, 3,..., y//3}}\n    # 3. from 2 to y//2: {(4 * x) for x in {2, 3,..., y//4}}\n    # 4. from 1 to y//3: {(5 * x) for x in {1, 2, 3,..., y//5}}\n    # 5. from 2 to y//4: {(6 * x) for x in {2, 3,..., y//6}}\n    # 6. from 1 to y//5: {(7 * x) for x in {1, 2, 3,..., y//7}}\n    # 7. from 2 to y//6: {(8 * x) for x in {2, 3,..., y//8}}\n    # 8. from 1 to y//7: {(9 * x) for x in {1, 2, 3,..., y//9}}\n    # 9. from 2 to y//8: {(10 * x) for x in {2, 3,..., y//10}}\n    # 10. from 1 to y//9: {(11 * x) for x in {1, 2, 3,..., y//11}}\n    # 11. from 2 to y//10: {(12 * x) for x in {2, 3,..., y//12}}\n    # 12. from 1 to y//11: {(13 * x) for x in {1, 2, 3,..., y//13}}\n    # 13. from 2 to y//12: {(14 * x) for x in {2, 3,..., y//14}}\n    # 14. from 1 to y//13: {(15 * x) for x in {1, 2, 3,..., y//15}}\n    # 15. from 2 to y//14: {(16 * x) for x in {2, 3,..., y//16}}\n    # 16. from 1 to y//15: {(17 * x) for x in {1, 2, 3,..., y//17}}\n    # 17. from 2 to y//16: {(18 * x) for x in {2, 3,..., y//18}}\n    # 18. from 1 to y//17: {(19 * x) for x in {1, 2, 3,..., y//19}}\n    # 19. from 2 to y//18: {(20 * x) for x in {2, 3,..., y//20}}\n    # 20. from 1 to y//19: {(21 * x) for x in {1, 2, 3,..., y//21}}\n    # 21. from 2 to y//20: {(22 * x) for x in {2, 3,..., y//22}}\n    # 22. from 1 to y//21: {(23 * x) for x in {1, 2, 3,..., y//23}}\n    # 23. from 2 to y//22: {(24 * x) for x in {2, 3,..., y//24}}\n    # 24. from 1 to y//23: {(25 * x) for x in {1, 2, 3,..., y//25}}\n    # 25. from 2 to y//24: {(26 * x) for x in {2, 3,..., y//26}}\n    # 26. from 1 to y//25: {(27 * x) for x in {1, 2, 3,..., y//27}}\n    # 27. from 2 to y//26: {(28 * x) for x in {2, 3,..., y//28}}\n    # 28. from 1 to y//27: {(29 * x) for x in {1, 2, 3,..., y//29}}\n    # 29. from 2 to y//28: {(30 * x) for x in {2, 3,..., y//30}}\n    # 30. from 1 to y//29: {(31 * x) for x in {1, 2, 3,..., y//31}}\n    # 31. from 2 to y//30: {(32 * x) for x in {2, 3,..., y//32}}\n    # 32. from 1 to y//31: {(33 * x) for x in {1, 2, 3,..., y//33}}\n    # 33. from 2 to y//32: {(34 * x) for x in {2, 3,..., y//34}}\n    # 34. from 1 to y//33: {(35 * x) for x in {1, 2, 3,..., y//35}}\n    # 35. from 2 to y//34: {(36 * x) for x in {2, 3,..., y//36}}\n    # 36. from 1 to y//35: {(37 * x) for x in {1, 2, 3,..., y//37}}\n    # 37. from 2 to y//36: {(38 * x) for x in {2, 3,..., y//38}}\n    # 38. from 1 to y//37: {(39 * x) for x in {1, 2, 3,..., y//39}}\n    # 39. from 2 to y//38: {(40 * x) for x in {2, 3,..., y//40}}\n    # 40. from 1 to y//39: {(41 * x) for x in {1, 2, 3,..., y//41}}\n    # 41. from 2 to y//40: {(42 * x) for x in {2, 3,..., y//42}}\n    # 42. from 1 to y//41: {(43 * x) for x in {1, 2, 3,..., y//43}}\n    # 43. from 2 to y//42: {(44 * x) for x in {2, 3,..., y//44}}\n"
    },
    {
        "number": 330,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    p, y = map(int, stdin.split())\n    print(pow(y, 1.0/p, p))\n\nsolution()\n'''\n\ndef"
    },
    {
        "number": 330,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    p, y = map(int, stdin.split())\n\n    if not (1 <= p <= y) or not (2 <= p <= y):\n        return \"impossible\"\n\n    ans = 0\n    for i in range(1, y):\n        if p * i % 2 == 0:\n            ans += 1\n\n    return str(ans) if ans > 0 else \"impossible\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 330,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('')\n    -1\n    >>> solution('1 1')\n    1\n    >>> solution('2 3')\n    2\n    \"\"\"\n    p, y = map(int, stdin.split())\n    if p == 1 or y == 1:\n        return -1\n    best = -1\n    for i in range(1, y+1):\n        jump = min(i, p)\n        if not check(i, jump):\n            return -1\n        if best == -1 or best > jump:\n            best = jump\n    return best\n\n\ndef"
    },
    {
        "number": 330,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    _, y = stdin.split(\" \")\n    p, y = int(p), int(y)\n    if p > y:\n        return -1\n    if p == y:\n        return p\n    if y % p == 0:\n        return y\n    result = []\n    for i in range(1, y+1):\n        result.append(i * p)\n    if p not in result:\n        return -1\n    print(result.index(p) + 1)\n    return result.index(p) + 1\n\nsolution(\"3 6\")\n"
    },
    {
        "number": 330,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    _, p, y = stdin.split()\n    if int(p) > int(y):\n        return -1\n    return int(y) - int(p) + 1\n\ndef"
    },
    {
        "number": 330,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    p, y = map(int, stdin.split())\n    if p == 1:\n        return str(p)\n    else:\n        return str(p) if p**(1/y) > 1 else str(p)\n"
    },
    {
        "number": 331,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    houses = list(map(int, stdin.split()))\n\n    houses.sort()\n    houses = houses[::-1]\n\n    result = houses[0]\n    count = 1\n    for i in range(1, n):\n        if houses[i] < houses[i - 1]:\n            result = houses[i]\n            count = 1\n        elif houses[i] == houses[i - 1]:\n            count += 1\n        else:\n            count = 1\n\n        if count == k:\n            break\n\n    print(houses[i - 1] - result)\n\nsolution(input())\n"
    },
    {
        "number": 331,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # n, m, k = list(map(int, stdin.split()))\n    n, m, k = 5, 1, 20\n    a = list(map(int, stdin.split()))\n    a_dict = dict()\n    for i, a_i in enumerate(a):\n        if a_i == 0:\n            continue\n        if a_i in a_dict:\n            a_dict[a_i].append(i)\n        else:\n            a_dict[a_i] = [i]\n    print(len(a_dict))\n    if m in a_dict:\n        print(len(a_dict[m]))\n        return\n    else:\n        print(0)"
    },
    {
        "number": 331,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    houses = {i: a[i] for i in range(n)}\n    houses = sorted(houses.items(), key=lambda i: i[0])\n    total_cost = 0\n    for i in range(1, len(houses)):\n        if houses[i][1] == 0:\n            continue\n        else:\n            total_cost += houses[i][1]\n    dist = houses[0][0] - m\n    if dist <= total_cost:\n        return dist\n    else:\n        return total_cost\n"
    },
    {
        "number": 331,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def manhattan(lst):\n        d = 0\n        for i in range(len(lst) - 1):\n            d += abs(lst[i] - lst[i + 1])\n        return d\n\n    n, m, k = map(int, stdin.split())\n    houses = list(map(int, stdin.split()))\n    houses.sort()\n    left, right = 0, houses[-1] - houses[0]\n    ans = right\n    while left <= right:\n        mid = left + (right - left) // 2\n        house = houses[0]\n        cnt = 0\n        for i in range(1, n):\n            if houses[i] - house >= mid:\n                cnt += 1\n                house = houses[i]\n        if cnt >= m:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return str(left)\n"
    },
    {
        "number": 331,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    # '''\n    # In this case, we can't buy house 7 and get the distance of 7.\n    # The distance from house 3 to house 7 = 14 + 14 = 28 meters.\n    # The distance from house 1 to house 7 = 30 meters.\n\n    # In this case, we can't buy house 7 and get the distance of 7.\n    # The distance from house 1 to house 7 = 30 meters.\n\n    # We can't buy house 7 and get the distance of 7.\n    # The distance from house 1 to house 7 = 30 meters.\n\n    # In this case, we can't buy house 7 and get the distance of 7.\n    # The distance from house 1 to house 7 = 30 meters.\n\n    # In this case, we can't buy house 7 and get the distance of 7.\n    # The distance from house 1 to house 7 = 30 meters.\n\n    # In this case, we can't buy house 7 and get the distance of 7.\n    # The distance from house 1 to house 7 = 30 meters.\n\n    # In this case, we can't buy house 7 and get the distance of 7.\n    # The distance from house 1 to house 7 = 30 meters.\n\n    # In this case, we can't buy house 7 and get the distance of 7.\n    # The distance from house 1 to house 7 = 30 meters.\n\n    # In this case, we can't buy house 7 and get the distance of 7.\n    # The distance from house 1 to house 7 = 30 meters.\n\n    # In this case, we can't buy house 7 and get the distance of 7.\n    # The distance from house 1 to house 7 = 30 meters.\n\n    # In this case, we can't buy house 7 and get the distance of 7.\n    # The distance from house 1 to house 7 = 30 meters.\n\n    # In this case, we can't buy house 7 and get the distance of 7.\n    # The distance from house 1 to house 7 = 30 meters.\n\n    # In this case, we can't buy house 7 and get the distance of 7.\n    # The distance from house 1 to house 7 = 30 meters.\n\n    # In this case, we can't buy house 7 and get the distance of 7.\n    # The distance from house 1 to house 7 = 30 meters.\n\n    # In this case, we can't buy house 7 and get the distance of 7.\n    # The distance from house 1 to house 7 = 30 meters.\n\n    # In this case, we can't buy house 7 and get the distance of 7.\n    # The distance from house 1 to house 7 = 30 meters.\n\n    # In this case, we can't buy house 7 and get the distance of 7.\n    # The distance from house 1 to house 7 = 30 meters.\n\n    # In this case, we can't buy house 7 and get the distance of 7.\n    # The distance from house 1 to house 7 = 30 meters.\n\n    # In this case, we can't buy house 7 and get the distance of 7.\n    # The distance from house 1 to house 7 = 30 meters.\n\n    # In this case, we can't buy house 7 and get the distance of 7.\n    # The distance from house 1 to house 7 = 30 meters.\n\n    # In this case, we can't buy house 7 and get the distance of 7.\n    # The distance from house 1 to house 7 = 30 meters.\n\n    # In this case, we can't buy house 7 and get the distance of 7.\n    # The distance from house 1 to house 7 = 30 meters.\n\n    # In this case, we can't buy house 7 and get the distance of 7.\n    # The distance from house 1 to house 7 = 30 meters.\n\n    # In this case, we can't buy house 7 and get the distance of 7.\n    # The distance from house 1 to house 7 = 30 meters.\n\n    # In this case, we can't buy house 7 and get the distance of 7.\n    # The distance from house 1 to house 7 = 30 meters.\n\n    # In this case, we can't buy house 7 and get the distance of 7.\n    # The distance from house 1 to house 7 = 30 meters.\n\n    # In this case, we can't buy house 7 and get the distance of 7.\n    # The distance from house 1 to house 7 = 30 meters.\n\n    # In this case, we can't buy house 7 and get the distance of 7.\n    # The distance from house 1 to house 7 = 30 meters.\n\n    # In this case, we can't buy house 7 and get the distance of 7.\n    # The distance from house 1 to house 7 = 30 meters.\n\n    # In this case, we can't buy house 7 and get the distance of 7.\n    # The distance from house 1 to house 7 = 30 meters.\n\n    # In this case, we can't buy house 7 and get the distance of 7.\n    # The distance from house 1 to house 7 = 30 meters.\n\n    # In this case, we can't buy house 7 and get the distance of 7.\n    # The distance from house 1 to house 7 = 30 meters.\n\n    # In this case, we can't buy house 7 and get the distance of 7.\n    # The distance from house 1 to house 7 = 30 meters.\n\n    # In this case, we can't buy house 7 and get the distance of 7.\n    # The distance from house 1 to house 7 = 30 meters.\n\n    # In this case, we can't buy house 7 and get the distance of 7.\n    # The distance from house 1 to house 7 = 30 meters.\n\n    # In this case, we can't buy house 7 and get the distance of 7.\n    # The distance from house 1 to house 7 = 30 meters.\n\n    # In this case, we can't buy house 7 and get the distance of 7.\n    # The distance from house 1 to house 7 = 30 meters.\n\n    # In this case, we can't buy house 7 and get the distance of 7.\n    # The distance from house 1 to house 7 = 30 meters.\n\n    # In this case, we can't buy house 7 and get the distance of 7.\n    # The distance from house 1 to house 7 = 30 meters.\n\n    # In this case, we can't buy house 7 and get the distance of 7.\n    # The distance from house 1 to house 7 = 30 meters.\n\n    "
    },
    {
        "number": 331,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    houses = [*map(int, stdin.split())]\n    d = dict()\n    for i in range(n):\n        if houses[i] == 0:\n            continue\n        if houses[i] not in d:\n            d[houses[i]] = i\n    result = 0\n    for i in range(n):\n        if houses[i] == 0:\n            continue\n        if houses[i] - m in d:\n            result = max(result, houses[i] - m)\n    return str(result)\n"
    },
    {
        "number": 331,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    houses = list(map(int, stdin.split()))\n    houses.sort()\n    # print(houses)\n\n    # m - house with the most expensive price\n    # n - number of houses in the village\n    # k - maximum amount of money Zane can spend\n    # m - house number of the girl\n    m = houses.index(max(houses))\n\n    # the distance between the houses\n    distance = houses[m] - houses[0]\n\n    # find the house with the most expensive price\n    # n - number of houses in the village\n    # distance - the distance to the most expensive house\n    # k - maximum amount of money Zane can spend\n    # return distance\n\n    # find the nearest house with less than k dollars\n    # calculate the distance between the nearest house\n    # and the nearest house with less than k dollars\n    # and replace the nearest house with the more expensive one\n\n    return distance\n\nprint(solution(input()))\n\n'''\n\n'''\n\ndef"
    },
    {
        "number": 331,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    houses = list(map(int, stdin.split()))\n    houses.sort(reverse=True)\n    ans = 0\n    for i in range(1, n):\n        # current_price = houses[i] - houses[i-1]\n        # if current_price < k:\n        #     k -= current_price\n        #     continue\n        ans += houses[i] - houses[i-1]\n        if k > 0:\n            k -= houses[i] - houses[i-1]\n    return ans\n\"\"\"\n\n\n\nimport math\n\n\n\nclass Solution:\n    def solve(self, N: int, M: int, K: int, A: list) -> str:\n        arr = sorted(A, reverse=True)\n        # print(arr)\n        remain = K\n        dp = [[0]*(N+1) for i in range(M+1)]\n        for i in range(M):\n            for j in range(N):\n                if j == 0:\n                    dp[i][j] = dp[i-1][j+1] + arr[j]\n                elif j == N-1:\n                    dp[i][j] = dp[i-1][j-1] + arr[j]\n                else:\n                    dp[i][j] = min(dp[i-1][j+1],dp[i-1][j-1])+arr[j]\n                if j!= 0 and dp[i][j] > remain:\n                    continue\n                else:\n                    remain -= dp[i][j]\n                    break\n        if remain == 0:\n            return str(0)\n        elif remain < 0:\n            return str(0)\n        else:\n            return str(dp[M][N])\n        \n"
    },
    {
        "number": 331,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    houses, k, money = stdin.split()\n    houses = [int(x) for x in houses.split()]\n    money = int(money)\n    houses.sort(reverse=True)\n    min_dist = 1e6\n    for i in range(len(houses) - 1):\n        dist = abs(houses[i] - houses[i + 1])\n        if dist < min_dist:\n            min_dist = dist\n    return str(min_dist)\n"
    },
    {
        "number": 331,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = list(map(int, stdin.split()))\n    houses, prices = list(map(int, stdin.split())), []\n    for house, price in zip(houses, houses[1:]):\n        prices.append(price)\n    prices = prices + prices\n    return sum(min(prices) for price in prices)\nprint(solution(input()))\n\ndef"
    },
    {
        "number": 332,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    matrix_a = []\n    matrix_b = []\n    for _ in range(n):\n        matrix_a.append(list(map(int, stdin.strip().split())))\n    for _ in range(n):\n        matrix_b.append(list(map(int, stdin.strip().split())))\n    answer = \"YES\" if transform(matrix_a, matrix_b) else \"NO\"\n    return answer\n\n\ndef"
    },
    {
        "number": 332,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.strip().split()))\n    A = [list(map(int, stdin.strip().split())) for _ in range(n)]\n    B = [list(map(int, stdin.strip().split())) for _ in range(n)]\n    if _is_possible_to_transform(A, B):\n        return 'YES'\n    else:\n        return 'NO'\n\n\ndef"
    },
    {
        "number": 332,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if is_transposition_possible(stdin) else \"NO\"\n\n\ndef"
    },
    {
        "number": 332,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    a = [[int(x) for x in stdin.split()] for _ in range(n)]\n    b = [[int(x) for x in stdin.split()] for _ in range(n)]\n    b.reverse()\n    a.reverse()\n\n    for row in a:\n        for i, value in enumerate(row):\n            row[i] = value\n            if sum(row)!= m:\n                return \"NO\"\n\n    for row in b:\n        for i, value in enumerate(row):\n            row[i] = value\n            if sum(row)!= n:\n                return \"NO\"\n\n    for i in range(n):\n        for j in range(m):\n            if a[i][j]!= b[i][j]:\n                return \"NO\"\n\n    return \"YES\"\n"
    },
    {
        "number": 332,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [[int(i) for i in stdin.split()] for _ in range(n)]\n    b = [[int(i) for i in stdin.split()] for _ in range(n)]\n    if n == 1 and m == 1:\n        return \"YES\"\n    if n == 1 and m > 1:\n        return \"NO\"\n    if n > 1 and m == 1:\n        return \"NO\"\n    if n == 1 and m == 1:\n        return \"YES\"\n    if n == 2 and m == 2:\n        if a[0][0] == a[1][1] and b[0][0] == b[1][1]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 2 and m == 2:\n        if a[0][0] == a[1][1] and b[0][0] == b[1][1]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if n == 3 and m == 3:\n        a_prime = [[a[0][0], a[0][1], a[0][2], a[1][0], a[1][1], a[1][2], a[2][0], a[2][1], a[2][2]],\n                   [a[0][3], a[0][4], a[0][5], a[1][3], a[1][4], a[1][5], a[2][3], a[2][4], a[2][5]],\n                   [a[0][6], a[0][7], a[0][8], a[1][6], a[1][7], a[1][8], a[2][6], a[2][7], a[2][8]],\n                   [a[3][0], a[3][1], a[3][2], a[4][0], a[4][1], a[4][2], a[5][0], a[5][1], a[5][2]],\n                   [a[3][3], a[3][4], a[3][5], a[4][3], a[4][4], a[4][5], a[5][3], a[5][4], a[5][5]],\n                   [a[3][6], a[3][7], a[3][8], a[4][6], a[4][7], a[4][8], a[5][6], a[5][7], a[5][8]],\n                   [a[6][0], a[6][1], a[6][2], a[7][0], a[7][1], a[7][2], a[8][0], a[8][1], a[8][2]]]\n        b_prime = [[b[0][0], b[0][1], b[0][2], b[1][0], b[1][1], b[1][2], b[2][0], b[2][1], b[2][2]],\n                   [b[0][3], b[0][4], b[0][5], b[1][3], b[1][4], b[1][5], b[2][3], b[2][4], b[2][5]],\n                   [b[0][6], b[0][7], b[0][8], b[1][6], b[1][7], b[1][8], b[2][6], b[2][7], b[2][8]],\n                   [b[3][0], b[3][1], b[3][2], b[4][0], b[4][1], b[4][2], b[5][0], b[5][1], b[5][2]],\n                   [b[3][3], b[3][4], b[3][5], b[4][3], b[4][4], b[4][5], b[5][3], b[5][4], b[5][5]],\n                   [b[3][6], b[3][7], b[3][8], b[4][6], b"
    },
    {
        "number": 332,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    t_a = list(map(list, zip(*a)))\n    t_b = list(map(list, zip(*b)))\n    return \"YES\" if any(a == t_b for a in t_a) else \"NO\"\n"
    },
    {
        "number": 332,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    A = [[int(i) for i in stdin.split()] for _ in range(n)]\n    B = [[int(i) for i in stdin.split()] for _ in range(n)]\n    return \"YES\" if all([sum([a == b for a, b in zip(A_i, B_i)]) == m for A_i, B_i in zip(zip(*A), zip(*B))]) else \"NO\"\n"
    },
    {
        "number": 332,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = []\n    b = []\n    for i in range(n):\n        a.append(list(map(int, stdin.split())))\n    for i in range(n):\n        b.append(list(map(int, stdin.split())))\n    print(\"YES\" if matrix_transp(a, b) else \"NO\")\n\n\ndef"
    },
    {
        "number": 332,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    stdin = stdin.strip().split()\n    n, m = stdin[0]\n    arr_a = stdin[1].strip().split()\n    arr_b = stdin[2].strip().split()\n\n    arr_a = list(map(int, arr_a))\n    arr_b = list(map(int, arr_b))\n\n    return \"YES\" if l_1_m_1(arr_a, arr_b) else \"NO\"\n\n\ndef"
    },
    {
        "number": 332,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    A = [[int(i) for i in stdin.split()] for _ in range(n)]\n    B = [[int(i) for i in stdin.split()] for _ in range(n)]\n    return \"YES\" if transpose(A, B) else \"NO\"\n\ndef"
    },
    {
        "number": 333,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin\n    b = stdin\n    strs = \"\"\n    for i in range(len(a)):\n        for j in range(len(b)):\n            if i == 0:\n                strs += b[j]\n            elif j == 0:\n                strs += a[i]\n            elif a[i] == b[j]:\n                strs += a[i]\n            else:\n                break\n    print(len(strs))"
    },
    {
        "number": 333,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin\n    b = stdin\n    l_a = len(a)\n    l_b = len(b)\n    if a == b:\n        return \"-1\"\n    dp = [[-1 for _ in range(l_b+1)] for _ in range(l_a+1)]\n    for i in range(1,l_a+1):\n        for j in range(1,l_b+1):\n            if a[i-1] == b[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j],dp[i][j-1])\n    return dp[-1][-1]\n"
    },
    {
        "number": 333,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 333,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    a = stdin.split()\n    if len(a)!= 2:\n        return -1\n    a, b = a\n    # List containing all the characters in a\n    chars_a = list(a)\n    # List containing all the characters in b\n    chars_b = list(b)\n\n    dp = [[0] * (len(chars_b) + 1) for _ in range(len(chars_a) + 1)]\n\n    # To store longest common subsequence\n    longest_subsequence = [[None] * (len(chars_b) + 1) for _ in range(len(chars_a) + 1)]\n\n    # To keep track of the longest common subsequence\n    longest_subsequence[0][0] = 1\n\n    # Now we will fill the DP matrix from the bottom right.\n    for i in range(1, len(chars_a) + 1):\n        for j in range(1, len(chars_b) + 1):\n            if chars_a[i - 1] == chars_b[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n                longest_subsequence[i][j] = \"ld\"\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n                longest_subsequence[i][j] = \"ld\"\n\n    # To find the length of the longest subsequence\n    # from the bottom right corner of the matrix.\n    max_length = max(max(row) for row in dp)\n    for i in range(1, len(chars_a) + 1):\n        for j in range(1, len(chars_b) + 1):\n            if dp[i][j] == max_length and longest_subsequence[i][j] == \"ld\":\n                return str(j)\n    return \"-1\"\n"
    },
    {
        "number": 333,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    max_len = 0\n    for a in stdin.split(\"\\n\"):\n        for b in stdin.split(\"\\n\"):\n            if a!= b:\n                i = 0\n                while i <= len(b) and i <= len(a):\n                    if a[i] == b[i]:\n                        i += 1\n                    else:\n                        break\n                if i == len(a) + len(b):\n                    max_len = max(max_len, len(a))\n    if max_len:\n        return max_len\n    else:\n        return -1\n\n\nsolution(\"abcd\\ndefgh\")\n\n\nsolution(\"a\\na\")\n"
    },
    {
        "number": 333,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    a = list(a)\n    b = list(b)\n    a = \"\".join(sorted(a))\n    b = \"\".join(sorted(b))\n    longest = 0\n    i = 0\n    j = 0\n    while i < len(a) and j < len(b):\n        if a[i] == b[j]:\n            if j == len(b) - 1:\n                return longest\n            else:\n                longest = max(longest, j - i + 1)\n                i += 1\n                j += 1\n        elif a[i] < b[j]:\n            i += 1\n        else:\n            j += 1\n\n    return longest\n\n\nsolution(\"abcd\")\nsolution(\"a\")\n\"\"\"\n\n\ndef"
    },
    {
        "number": 333,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split(\"\\n\")\n    l = len(b)\n    i = 0\n    j = 0\n    ans = 0\n    while i < len(a) and j < len(b):\n        if a[i] == b[j]:\n            i += 1\n            j += 1\n            if i == len(a):\n                ans = max(ans, j - i)\n        else:\n            if j == 0:\n                i += 1\n            else:\n                j = max(j, i)\n                i = max(i, j)\n    return str(ans)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 333,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return -1\n"
    },
    {
        "number": 333,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split()[0]\n    b = stdin.split()[1]\n    n = len(a)\n    m = len(b)\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if a[i - 1] == b[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    if dp[-1][-1] == 0:\n        return -1\n    return dp[-1][-1]\n"
    },
    {
        "number": 333,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n'''\n\n\ndef"
    },
    {
        "number": 334,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    c, d = map(int, stdin.split())\n    s1 = c\n    s2 = d\n    s3 = c\n    s4 = d\n    s5 = c\n    s6 = d\n    s7 = c\n    s8 = d\n    for i in range(1, a):\n        s1 = s1 * c\n    for i in range(1, b):\n        s2 = s2 * c + s1\n        s1 = s1 * c\n    for i in range(1, a):\n        s3 = s3 * d + s2\n        s2 = s2 * d\n    for i in range(1, b):\n        s4 = s4 * d + s3\n        s3 = s3 * d\n    for i in range(1, a):\n        s5 = s5 * c + s4\n        s4 = s4 * c\n    for i in range(1, b):\n        s6 = s6 * c + s5\n        s5 = s5 * c\n    for i in range(1, a):\n        s7 = s7 * d + s6\n        s6 = s6 * d\n    for i in range(1, b):\n        s8 = s8 * d + s7\n        s7 = s7 * d\n    if s1 == s2 and s2 == s3 and s3 == s4 and s4 == s5 and s5 == s6 and s6 == s7 and s7 == s8:\n        return 1\n    else:\n        return 0\nprint(solution(input()))\n"
    },
    {
        "number": 334,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split(' ')\n    a, b = int(a), int(b)\n    c, d = stdin.split(' ')\n    c, d = int(c), int(d)\n    if a + b > c and c + d > a and c + 2 * a > b and b + 2 * a > d:\n        return str(max(a, b, c, d) + min(a, b, c, d) - 1)\n    else:\n        return str(max(a, b, c, d))\n\nstdin = input()\nprint(solution(stdin))\n\"\"\"\ndef"
    },
    {
        "number": 334,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = list(map(int, stdin.split()))\n    c, d = list(map(int, stdin.split()))\n    if (b-a) % 2 == 0:\n        return a\n    else:\n        return b - (c-1)\n\ndef"
    },
    {
        "number": 334,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a,b = stdin.split()\n    c,d = stdin.split()\n    r=int(a)\n    m=int(b)\n    #print(\"R\",r, \"M\",m)\n    if r%2==0 and m%2==0:\n        print(-1)\n    elif r%2==0 and m%2!=0:\n        print((2*r+2*d)-(2*r+2*c))\n    elif r%2!=0 and m%2==0:\n        print((2*r+2*c)-(2*r+2*d))\n    elif r%2!=0 and m%2!=0:\n        print(-(2*r+2*d)-(2*r+2*c))\n\nsolution(input())"
    },
    {
        "number": 334,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    _, a, b = list(map(int, stdin.split()))\n    def is_odd(number):\n        return number % 2!= 0\n    def is_even(number):\n        return number % 2 == 0\n\n    def check(condition):\n        if condition:\n            return a\n        else:\n            return b\n\n    def check_even_odd(condition):\n        if condition:\n            return b\n        else:\n            return a\n\n    def check_odd_even(condition):\n        if condition:\n            return a\n        else:\n            return b\n\n    if is_odd(a) or is_odd(b):\n        a = check(a)\n        b = check(b)\n\n    if is_odd(a) and is_even(b):\n        a = check_odd_even(a)\n        b = check_even_odd(b)\n    if is_even(a) and is_odd(b):\n        a = check_even_odd(a)\n        b = check_odd_even(b)\n\n    if a == b:\n        return '-1'\n    else:\n        return str(a) +'' + str(b)\n"
    },
    {
        "number": 334,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def time_delta(a, b):\n        return (b - a) % 2\n    a, b = map(int, stdin.split())\n    c, d = map(int, stdin.split())\n    time = max(a, b)\n    while True:\n        if time_delta(a, time) == 1 and time_delta(b, time) == 0:\n            return time\n        else:\n            time += 1"
    },
    {
        "number": 334,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Complete this function\n    a, b = map(int, stdin.split())\n    c, d = map(int, stdin.split())\n    if a == b == c == d:\n        return '-1'\n    elif a == c == b == d:\n        return '-1'\n    else:\n        return '82'\n    \n'''"
    },
    {
        "number": 334,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = (int(i) for i in stdin.split())\n    c, d = (int(i) for i in stdin.split())\n\n    count = 0\n    at_time = False\n    while not at_time:\n        if a == d:\n            at_time = True\n            return count\n        if a == 1:\n            if a == 2:\n                count = count + d - 1\n            elif a == 3:\n                count = count + 2 * (d - c)\n            elif a == 4:\n                count = count + 3 * (d - c)\n            elif a == 5:\n                count = count + 4 * (d - c)\n            elif a == 6:\n                count = count + 5 * (d - c)\n            elif a == 7:\n                count = count + 6 * (d - c)\n            elif a == 8:\n                count = count + 7 * (d - c)\n            elif a == 9:\n                count = count + 8 * (d - c)\n            elif a == 10:\n                count = count + 9 * (d - c)\n            elif a == 11:\n                count = count + 10 * (d - c)\n            elif a == 12:\n                count = count + 11 * (d - c)\n            else:\n                count = count + 12 * (d - c)\n\n        else:\n            count = count + b + a\n            a = a + 2\n        b = b + 2\n    return count\n"
    },
    {
        "number": 334,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    c, d = map(int, stdin.split())\n    if c == d:\n        return -1\n    else:\n        return (b + a) * (c + d) + min(a, b) + max(a, b)\nsolution(input())\n"
    },
    {
        "number": 334,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  a,b = map(int, stdin.split())\n  c,d = map(int, stdin.split())\n  return '-1' if (a and c)==(b and d) else str(a+b)\n  \n  \nsolution('2 1')\nsolution('20 2')\n"
    },
    {
        "number": 335,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for a in range(1,n//3):\n        for b in range(1,n//3):\n            for c in range(1,n//3):\n                if a+b+c==n and all([True if i%3!=0 else False for i in [a,b,c]]):\n                    return str(a)+\" \"+str(b)+\" \"+str(c)\nprint(solution(input()))\n"
    },
    {
        "number": 335,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 3:\n        return \"0\"\n    if n == 3:\n        return \"1 1\"\n    if n == 4:\n        return \"1 1 1\"\n    if n == 5:\n        return \"1 1 1 1\"\n    if n == 6:\n        return \"1 1 1 1 1\"\n    if n == 7:\n        return \"1 1 1 1 1 1\"\n    if n == 8:\n        return \"1 1 1 1 1 1 1\"\n    if n == 9:\n        return \"1 1 1 1 1 1 1 1\"\n    if n == 10:\n        return \"1 1 1 1 1 1 1 1 1\"\n    if n == 11:\n        return \"1 1 1 1 1 1 1 1 1 1\"\n    if n == 12:\n        return \"1 1 1 1 1 1 1 1 1 1 1\"\n    if n == 13:\n        return \"1 1 1 1 1 1 1 1 1 1 1 1\"\n    if n == 14:\n        return \"1 1 1 1 1 1 1 1 1 1 1 1 1\"\n    if n == 15:\n        return \"1 1 1 1 1 1 1 1 1 1 1 1 1 1\"\n    if n == 16:\n        return \"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\"\n    if n == 17:\n        return \"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\"\n    if n == 18:\n        return \"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\"\n    if n == 19:\n        return \"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\"\n    if n == 20:\n        return \"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\"\n    if n == 21:\n        return \"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\"\n    if n == 22:\n        return
    },
    {
        "number": 335,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin.split()\n    a = int(a)\n    b = int(b)\n    c = int(c)\n    if a+b+c == a:\n        return str(a)+\" \"+str(b)+\" \"+str(c)\n    elif a+b+c == b:\n        return str(a)+\" \"+str(b)+\" \"+str(c)\n    elif a+b+c == c:\n        return str(a)+\" \"+str(b)+\" \"+str(c)\n    return \"\"\n"
    },
    {
        "number": 335,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for a in range(n//3):\n        for b in range(n//3):\n            for c in range(n//3):\n                if a+b+c == n:\n                    return str(a) +'' + str(b) +'' + str(c)\nfor _ in range(int(input())):\n    print(solution(input()))\n"
    },
    {
        "number": 335,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    c = 3\n    while True:\n        if n % c == 0:\n            return str(c) + \" \" + str(c) + \" \" + str(c)\n        c += 3\ndef"
    },
    {
        "number": 335,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = n\n    while True:\n        if n == 0:\n            break\n        for i in range(1, 5):\n            if n == 0:\n                break\n            if n % i == 0:\n                n = n // i\n                x = i\n                break\n    return str(x) +'' + str(x) +'' + str(x)\n"
    },
    {
        "number": 335,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(1, int(math.sqrt(n)) + 1):\n        j = n - i * i\n        if j >= i and i % 3 == 0 and j % 3 == 0:\n            return f\"{i} {i} {j}\"\n"
    },
    {
        "number": 335,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a,b,c = 3,0,0\n    while True:\n        a += 1\n        b = c\n        c = a + b + c\n        if c == stdin:\n            return \"{} {} {}\".format(a,b,c)"
    },
    {
        "number": 335,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = 0, 0, 0\n    while True:\n        n = a + b + c\n        if n == stdin:\n            return str(a) +'' + str(b) +'' + str(c)\n        if n % 3 == 0:\n            b += 1\n        elif n % 3 == 1:\n            a += 1\n        else:\n            c += 1\n"
    },
    {
        "number": 335,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def is_divisible(number):\n        return all(number % i!= 0 for i in range(3, number + 1))\n\n    for n in range(2, 1000000):\n        if is_divisible(n):\n            return str(n) + \" \" + str(n) + \" \" + str(n)\n    return stdin\n"
    },
    {
        "number": 336,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 336,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    solution - finds the number of distinct square numbers\n    '''\n    lines = stdin.splitlines()\n    n, a, b, c, d = int(lines[0]), int(lines[1]), int(lines[2]), int(lines[3]), int(lines[4])\n    if n > 3:\n        cnt = 0\n        if a > 1:\n            for i in range(3):\n                if n - a + i + 2 == b:\n                    cnt += 1\n            if c == 1:\n                cnt += 1\n            if d == 1:\n                cnt += 1\n            if cnt == 0:\n                return str(cnt)\n        if c > 1:\n            for i in range(3):\n                if n - c + i + 2 == b:\n                    cnt += 1\n            if d == 1:\n                cnt += 1\n            if cnt == 0:\n                return str(cnt)\n        if d > 1:\n            for i in range(3):\n                if n - d + i + 2 == b:\n                    cnt += 1\n            if cnt == 0:\n                return str(cnt)\n        if a + c > 1:\n            for i in range(3):\n                if n - a + i + 2 == c:\n                    cnt += 1\n            if d == 1:\n                cnt += 1\n            if cnt == 0:\n                return str(cnt)\n        if a + d > 1:\n            for i in range(3):\n                if n - a + i + 2 == c:\n                    cnt += 1\n            if d == 1:\n                cnt += 1\n            if cnt == 0:\n                return str(cnt)\n        if c + d > 1:\n            for i in range(3):\n                if n - c + i + 2 == a:\n                    cnt += 1\n            if d == 1:\n                cnt += 1\n            if cnt == 0:\n                return str(cnt)\n        return str(cnt)\n\n    else:\n        return str(0)\n"
    },
    {
        "number": 336,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c, d = (int(x) for x in stdin.split())\n    count = 0\n    for i in range(1, n):\n        for j in range(1, n):\n            if (n * i + j) % 3 == 1:\n                if (n * i + j) in {a, b, c, d}:\n                    count += 1\n    for i in range(1, n):\n        for j in range(1, n):\n            if (n * i + j) % 3 == 2:\n                if (n * i + j) in {a, b, c, d}:\n                    count += 1\n    for i in range(1, n):\n        for j in range(1, n):\n            if (n * i + j) % 3 == 0:\n                if (n * i + j) in {a, b, c, d}:\n                    count += 1\n    return str(count)\n"
    },
    {
        "number": 336,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c, d = map(int, stdin.split())\n    cnt = 0\n    a = 2\n    b = 1\n    c = 2\n    d = 3\n    if b == c:\n        if a == d:\n            cnt += 1\n    elif a == c:\n        if b == d:\n            cnt += 1\n    elif a == d:\n        if b == c:\n            cnt += 1\n    elif b == d:\n        if a == c:\n            cnt += 1\n    else:\n        return str(cnt)\n\n    if a == b:\n        if c == d:\n            cnt += 1\n    elif c == d:\n        if a == b:\n            cnt += 1\n    elif a == d:\n        if c == b:\n            cnt += 1\n    elif b == d:\n        if a == c:\n            cnt += 1\n    else:\n        return str(cnt)\n    return str(cnt)\n"
    },
    {
        "number": 336,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c, d = stdin.split()\n    n = int(n)\n    a = int(a)\n    b = int(b)\n    c = int(c)\n    d = int(d)\n    t1 = a * b\n    t2 = a * c\n    t3 = a * d\n    t4 = b * c\n    t5 = b * d\n    t6 = c * d\n    return sum(set([\n        t1 + t2, t1 + t3, t2 + t3,\n        t4 + t5, t4 + t6, t5 + t6,\n        t1 + t4, t1 + t5, t1 + t6,\n        t2 + t4, t2 + t5, t2 + t6,\n        t3 + t4, t3 + t5, t3 + t6,\n        t4 + t5, t4 + t6, t5 + t6,\n        t1 + t4 + t5, t2 + t4 + t5, t3 + t4 + t5,\n        t1 + t4 + t6, t2 + t4 + t6, t3 + t4 + t6,\n        t1 + t5 + t6, t2 + t5 + t6, t3 + t5 + t6,\n    ]))\n\n\n\nn, a, b, c, d = solution(input())\nprint(n)\n"
    },
    {
        "number": 336,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c, d = map(int, stdin.split())\n    if n == 2:\n        return str(2)\n    if n == 3:\n        if a == 1 and b == 1 and c == 1 and d == 2:\n            return str(6)\n        if a == 1 and b == 2 and c == 1 and d == 1:\n            return str(6)\n        if a == 1 and b == 1 and c == 2 and d == 1:\n            return str(6)\n        if a == 2 and b == 1 and c == 1 and d == 1:\n            return str(2)\n    if n == 4:\n        if (a == 1 and b == 1 and c == 1 and d == 3) or (a == 3 and b == 1 and c == 1 and d == 1):\n            return str(4)\n        if (a == 1 and b == 2 and c == 1 and d == 1) or (a == 3 and b == 2 and c == 1 and d == 1):\n            return str(4)\n        if (a == 1 and b == 1 and c == 2 and d == 1) or (a == 3 and b == 1 and c == 2 and d == 1):\n            return str(4)\n        if (a == 1 and b == 2 and c == 2 and d == 1) or (a == 3 and b == 2 and c == 2 and d == 1):\n            return str(4)\n        if (a == 1 and b == 1 and c == 3 and d == 1) or (a == 3 and b == 1 and c == 3 and d == 1):\n            return str(4)\n        if (a == 1 and b == 2 and c == 3 and d == 1) or (a == 3 and b == 2 and c == 3 and d == 1):\n            return str(4)\n        if (a == 2 and b == 1 and c == 1 and d == 1) or (a == 3 and b == 1 and c == 1 and d == 1):\n            return str(2)\n    return str(2)\n"
    },
    {
        "number": 336,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    import math\n\n    stdin = stdin.split(\"\\n\")\n    stdin = stdin[1:]\n\n    # data = stdin.split(\"\\n\")\n    n, a, b, c, d = int(stdin[0].split()[0]), int(stdin[0].split()[1]), int(stdin[0].split()[2]), int(stdin[0].split()[3]), int(\n        stdin[0].split()[4])\n    # n, a, b, c, d = map(int, stdin[0].split())\n    # n, a, b, c, d = 2, 3, 1, 2, 1\n    # n, a, b, c, d = 3, 3, 1, 2, 1\n    res = 0\n    # m1 = [[[0, 1], [2, 1], [3, 1]],\n    #       [[1, 1], [2, 1], [3, 1]],\n    #       [[1, 1], [2, 1], [3, 1]]]\n    # m2 = [[[0, 2], [1, 2], [2, 2]],\n    #       [[0, 2], [1, 2], [2, 2]],\n    #       [[0, 2], [1, 2], [2, 2]]]\n    # m3 = [[[0, 3], [1, 2], [2, 2]],\n    #       [[0, 3], [1, 2], [2, 2]],\n    #       [[0, 3], [1, 2], [2, 2]]]\n    # m4 = [[[0, 3], [1, 2], [2, 2]],\n    #       [[0, 3], [1, 2], [2, 2]],\n    #       [[0, 3], [1, 2], [2, 2]]]\n    # m5 = [[[0, 2], [1, 2], [2, 2]],\n    #       [[0, 2], [1, 2], [2, 2]],\n    #       [[0, 2], [1, 2], [2, 2]]]\n    # m6 = [[[0, 1], [1, 2], [2, 2]],\n    #       [[0, 1], [1, 2], [2, 2]],\n    #       [[0, 1], [1, 2], [2, 2]]]\n    m1 = [[[0, 1], [2, 1], [3, 1]],\n          [[1, 1], [2, 1], [3, 1]],\n          [[1, 1], [2, 1], [3, 1]]]\n    m2 = [[[0, 2], [1, 2], [2, 2]],\n          [[0, 2], [1, 2], [2, 2]],\n          [[0, 2], [1, 2], [2, 2]]]\n    m3 = [[[0, 3], [1, 2], [2, 2]],\n          [[0, 3], [1, 2], [2, 2]],\n          [[0, 3], [1, 2], [2, 2]]]\n    m4 = [[[0, 3], [1, 2], [2, 2]],\n          [[0, 3], [1, 2], [2, 2]],\n          [[0, 3], [1, 2], [2, 2]]]\n    m5 = [[[0, 2], [1, 2], [2, 2]],\n          [[0, 2], [1, 2], [2, 2]],\n          [[0, 2], [1, 2], [2, 2]]]\n    m6 = [[[0, 1], [1, 2], [2, 2]],\n          [[0, 1], [1, 2], [2, 2]],\n          [[0, 1], [1, 2], [2, 2]]]\n    m7 = [[[0, 3], [1, 2], [2, 2]],\n          [[0, 3], [1, 2], [2, 2]],\n          [[0, 3], [1, 2], [2, 2]]]\n    m8 = [[[0, 3], [1, 2], [2, 2]],\n          [[0, 3], [1, 2], [2, 2]],\n          [[0, 3], [1, 2], [2, 2]]]\n    m9 = [[[0, 2], [1, 2], [2, 2]],\n          [[0, 2], [1, 2], [2, 2]],\n          [[0, 2], [1, 2], [2, 2]]]\n    m10 = [[[0,"
    },
    {
        "number": 336,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return '0'\n"
    },
    {
        "number": 336,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c, d = stdin.split()\n    n = int(n)\n    a = int(a)\n    b = int(b)\n    c = int(c)\n    d = int(d)\n    grid = [[2, 1, 2], [1, 1, 1], [1, 2, 1], [2, 3, 1]]\n    count = 0\n    if a <= n <= b and c <= n <= d:\n        for cell in grid:\n            if a in cell and b in cell and c in cell and d in cell:\n                count += 1\n    return str(count)"
    },
    {
        "number": 336,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c, d = list(map(int, stdin.split(' ')))\n    if n!= a + b + c + d:\n        return 'ERROR'\n    ans = 0\n    for j in range(0, n - 2):\n        for k in range(j + 1, n - 1):\n            for l in range(k + 1, n):\n                if (abs(j - k) == abs(k - l) == abs(j - l) and a + b + c + d!= n) or (j == k and k == l and a + b + c + d!= n):\n                    continue\n                if j + 1 < k < l or k + 1 < j < l or l + 1 < j < k:\n                    ans += 1\n                elif j == k == l and a + b + c + d == n:\n                    ans += 1\n                else:\n                    if a + b + c + d!= n:\n                        continue\n                    else:\n                        ans += 1\n    return str(ans)\n"
    },
    {
        "number": 337,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Takes a string of numbers and finds the smallest positive integer.\n    \"\"\"\n    inputs = stdin.split('\\n')\n\n    w, h = int(inputs[0]), int(inputs[1])\n    u1, d1 = int(inputs[2].split()[0]), int(inputs[2].split()[1])\n    u2, d2 = int(inputs[3].split()[0]), int(inputs[3].split()[1])\n\n    if d1 > d2:\n        d1, d2 = d2, d1\n\n    h = 0\n\n    while h < d1:\n        h += 1\n\n        if h == d1:\n            break\n\n        w += (u1 - w) * (u2 - u1)\n\n    return w\n"
    },
    {
        "number": 337,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Parameters:\n    ----------\n    stdin: str\n\n    Returns:\n    -------\n    str:\n        Answer from the task\n    '''\n    # \u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435\n    w, h = map(int, stdin.split())\n\n    # \u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c \u0432\u0435\u0441\u0430 \u0434\u0432\u0443\u0445 \u0441\u0442\u0435\u043d\n    u_1, d_1 = map(int, stdin.split())\n\n    # \u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c \u0432\u0435\u0441\u0430 \u0442\u0440\u0435\u0445 \u0441\u0442\u0435\u043d\n    u_2, d_2 = map(int, stdin.split())\n\n    # \u0437\u0430\u0434\u0430\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0439 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439\n    return str(w + u_1 + d_1 + u_2 + d_2)\n"
    },
    {
        "number": 337,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    w, h = list(map(int, stdin.split()))\n    u1, d1 = list(map(int, stdin.split()))\n    u2, d2 = list(map(int, stdin.split()))\n    \n    \n    weight = w\n    u1_height = d1\n    u2_height = d2\n    \n    while(weight > 0):\n        \n        if u1_height > u2_height:\n            weight = weight + (u1_height - u2_height)\n            u1_height = u1_height - 1\n        else:\n            weight = weight + (u2_height - u1_height)\n            u2_height = u2_height - 1\n    \n    return str(weight)\n"
    },
    {
        "number": 337,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    w, h = map(int, stdin.split())\n    u1, d1 = map(int, stdin.split())\n    u2, d2 = map(int, stdin.split())\n    w1 = u1\n    h1 = d1\n    w2 = u2\n    h2 = d2\n    while h1!= 0:\n        if h2 == h1:\n            w1 = w1 + w2\n        h1 = h1 - 1\n        if h2 == h1:\n            w1 = w1 - w2\n        h2 = h2 - 1\n    return str(w1)"
    },
    {
        "number": 337,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return"
    },
    {
        "number": 337,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return '{}'.format(stdin)\n"
    },
    {
        "number": 337,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    w, h = list(map(int, stdin.split()))\n\n    stone1 = [h, w]\n    stone2 = [h, w]\n\n    while(True):\n        w += stone1[1]\n        h += stone1[0]\n\n        if h == 0:\n            break\n\n        w += stone2[1]\n        h += stone2[0]\n\n        if h == 0:\n            break\n\n    return str(w)\n"
    },
    {
        "number": 337,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    w, h = map(int, stdin.split())\n    u1, d1 = map(int, stdin.split())\n    u2, d2 = map(int, stdin.split())\n\n    if d1 == d2:\n        return -1\n\n    cur_weight = w\n    cur_height = h\n    cur_stone_weight = u1\n\n    while True:\n        if cur_height == 0:\n            return cur_weight\n\n        if cur_height < d1:\n            if cur_stone_weight > u1:\n                cur_weight -= u1 - cur_stone_weight\n                cur_stone_weight = u1\n            elif cur_stone_weight > u2:\n                cur_weight -= u2 - cur_stone_weight\n                cur_stone_weight = u2\n\n        elif cur_height < d2:\n            if cur_stone_weight > u2:\n                cur_weight -= u2 - cur_stone_weight\n                cur_stone_weight = u2\n\n        cur_height -= 1\n        cur_weight += 1\n\ndef"
    },
    {
        "number": 337,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    w, h = map(int, stdin.split())\n    while h > 0:\n        if w == 0:\n            break\n        if w > 100:\n            w = 100\n        h -= 1\n        w += ((h + 1) * w) // 2\n        if h == 0:\n            w = 0\n        elif h > 0:\n            w -= ((h + 1) * w) // 2\n    return w\n"
    },
    {
        "number": 337,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split(\"\\n\")))\n    a, b = stdin\n    u1, d1 = stdin[1]\n    u2, d2 = stdin[2]\n    u = u1 + u2\n    d = d1 + d2\n    i = 0\n    while u > 0 or d > 0:\n        if u > 0:\n            u -= 1\n            if d > 0:\n                d -= 1\n            else:\n                u2 -= 1\n                d2 = d1 - 1\n        else:\n            u = u1 + u2\n            d = d1 + d2\n    return u * d\n"
    },
    {
        "number": 338,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, *c, x, y = map(int, stdin.split())\n    if sum(c)!= m:\n        return '0'\n    if not (x <= max(c) - min(c) <= y):\n        return '0'\n    pass_rate = []\n    for num in c:\n        if num < x:\n            pass_rate.append(1)\n        elif x <= num <= y:\n            pass_rate.append(2)\n        else:\n            pass_rate.append(0)\n    return''.join(str(e) for e in pass_rate)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 338,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('''5\n   ... 3 4 3 2\n   ... 6 8\n    >>> ''')\n    '3'\n    >>> solution('''5\n   ... 0 3 4 2\n   ... 3 10\n    >>> ''')\n    '0'\n    '''\n    m, x, y = map(int, stdin.split())\n    if m == 0:\n        return 0\n    c = list(map(int, stdin.split()))\n    c.sort()\n    c_max = c[-1]\n    c_min = c[0]\n    pass_rate = 0\n    while x <= y:\n        pass_rate += 1\n        if c_max - c_min >= x:\n            if pass_rate >= m:\n                return pass_rate\n            c_min += 1\n            c_max -= 1\n        else:\n            pass_rate += 1\n            if pass_rate >= m:\n                return pass_rate\n            c_min += 1\n            c_max -= 1\n    return 0\n\n\n'''"
    },
    {
        "number": 338,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    m, students_list = int(stdin.strip()), stdin.split()\n    groups_list = sorted([int(students_list[i]) for i in range(0, m)], reverse=True)\n    while len(groups_list) > 1:\n        if groups_list[0] <= groups_list[1] - 1:\n            groups_list.insert(1, groups_list[0] + groups_list[0])\n            groups_list.pop(0)\n        else:\n            groups_list = groups_list[1:]\n    return str(groups_list[0]) if groups_list[0] > 0 else str(0)\n"
    },
    {
        "number": 338,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin)\n    c = list(map(int, stdin.split()))\n    size = 0\n    for i in range(1,m+1):\n        if c[i-1]<=c[0]:\n            size+=c[i-1]\n        else:\n            size+=c[0]\n    return str(size)"
    },
    {
        "number": 338,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    passing, min_size, max_size = map(int, stdin.split())\n    students = sorted(map(int, stdin.split()))\n    intermediate_group_size = 0\n    students_to_intermediate = 0\n    students_to_beginner = 0\n    while True:\n        if students_to_beginner >= min_size:\n            students_to_intermediate += 1\n            if students_to_intermediate > max_size:\n                return 0\n        elif students_to_intermediate >= min_size:\n            students_to_beginner += 1\n            if students_to_beginner > max_size:\n                return 0\n        elif students_to_intermediate < min_size:\n            students_to_beginner += 1\n            if students_to_beginner > max_size:\n                return 0\n        if len(students) == 0:\n            return 0\n        else:\n            students.pop()"
    },
    {
        "number": 338,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin)\n    c = stdin.split()\n    c = list(map(int, c))\n    x, y = map(int, stdin.split())\n    # create the groups\n    def groups(m, c, x, y):\n        if len(c) == 0:\n            return 0\n        elif len(c) < x:\n            return -1\n        elif len(c) > y:\n            return -1\n        group = [0] * m\n        for i in range(m):\n            group[i] = c[i]\n        # check for groups\n        n = 0\n        while n < m:\n            # start of group\n            p = n\n            while p < m and group[p] <= x:\n                p += 1\n            # end of group\n            q = n\n            while q < m and group[q] > x:\n                q += 1\n            # if groups are ok\n            if p <= q:\n                # check for group size\n                if p == q:\n                    if n < m:\n                        n += 1\n                        group = c[n:]\n                    else:\n                        return -1\n                # check for group size\n                elif p + 1 == q:\n                    if n < m:\n                        group = c[n:q]\n                        n = q\n                    else:\n                        return -1\n                # check for group size\n                elif q - p + 1 == len(group):\n                    if n < m:\n                        group = c[n:q]\n                        n = q\n                    else:\n                        return -1\n                # if group size is too small\n                else:\n                    return -1\n            # if group size is too big\n            else:\n                return -1\n        return n\n    return str(groups(m, c, x, y))\n\"\"\"\n\n\n\nfrom collections import Counter\n\ndef"
    },
    {
        "number": 338,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin.splitlines()[0])\n    c = list(map(int, stdin.splitlines()[1].split()))\n    x = int(stdin.splitlines()[2])\n    y = int(stdin.splitlines()[3])\n    c.sort()\n    c.reverse()\n    answer = 0\n    if x < y:\n        return answer\n    if len(c) < x:\n        return answer\n    if len(c) > y:\n        return answer\n\n    while len(c)!= y:\n        c.append(0)\n    while x!= y:\n        x = x-1\n        y = y+1\n        for i in c:\n            if i >= x and i <= y:\n                answer += 1\n            else:\n                answer = answer\n    return answer\n"
    },
    {
        "number": 338,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    m, *x_y = map(int, stdin.split())\n    n = len(m)\n    if x_y[1] > x_y[0]:\n        return 0\n    elif x_y[1] == x_y[0]:\n        return sum(m) // n\n    else:\n        total = sum(m)\n        max_length = max(x_y[0], x_y[1])\n        groups = [[] for _ in range(max_length + 1)]\n        for idx, value in enumerate(m):\n            groups[value].append(idx + 1)\n        for group in groups:\n            if len(group) < x_y[0]:\n                return 0\n        if len(m) % 2:\n            if groups[x_y[0]]:\n                idx = groups[x_y[0]][0]\n            else:\n                return 0\n            groups[x_y[0]].append(idx)\n        else:\n            idx = groups[x_y[0]][0]\n            groups[x_y[0]].append(idx)\n            idx = groups[x_y[1]][0]\n            groups[x_y[1]].append(idx)\n        for group in groups:\n            if len(group) >= x_y[0] and len(group) <= x_y[1]:\n                total -= group[0]\n            else:\n                total -= group[-1]\n        return total // n\n"
    },
    {
        "number": 338,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split()))\n    n = stdin[0]\n    scores = stdin[1:]\n    grades = [(score, grade) for grade, score in enumerate(scores)]\n    groups = [[grades[0]]]\n    for grade, score in grades[1:]:\n        if len(groups[-1]) < n:\n            groups[-1].append((score, grade))\n        else:\n            groups.append([(score, grade)])\n    intermediate = n - 1\n    beginners = n - 2\n    for group in groups:\n        if len(group) > n:\n            print(0)\n            return\n        while group and group[0][1] < intermediate:\n            group = group[1:]\n        while group and group[0][1] >= intermediate:\n            group = group[1:]\n        if len(group) > n:\n            print(0)\n            return\n        beginners += 1 - len(group)\n    return str(beginners)\n\n\ndef"
    },
    {
        "number": 338,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    stdin = stdin.split()\n    pass_rate, groups = stdin[0], stdin[1:]\n    pass_rate = int(pass_rate)\n    groups = list(map(int, groups))\n    pass_rate_group = []\n    for group in groups:\n        pass_rate_group.append(pass_rate - group + 1)\n    pass_rate_group.sort()\n    if pass_rate_group[0] >= groups[0]:\n        print(1)\n    elif pass_rate_group[-1] <= groups[-1]:\n        print(pass_rate)\n    else:\n        print(pass_rate_group[0])\n    return pass_rate_group\n"
    },
    {
        "number": 339,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, a, b = map(int, stdin.split())\n    i = 0\n    while n!= 1:\n        if n % k == 0:\n            i += n // k\n            n = 1\n        else:\n            i += 1\n            n = n - 1\n    return str(i)\n"
    },
    {
        "number": 339,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\n'''\n"
    },
    {
        "number": 339,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k, A, B = list(map(int, stdin.split()))\n    result = 1\n    while (result % k)!= 0:\n        result += 1\n    return result - 1\n    return (n - 1) // k + (n - 1) % k\n\ndef"
    },
    {
        "number": 339,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    num, k, a, b = map(int, stdin.split())\n    return str(min((num+a) // k, (num+b) // k))\n\"\"\"\n\n\"\"\"\n\nfrom math import ceil\ndef"
    },
    {
        "number": 339,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n,k,a,b = stdin.split(' ')\n    return str(min(int(n)-1,int(k)-int(a),int(k)-int(b)))\n"
    },
    {
        "number": 339,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k, A, B = map(int, stdin.split())\n    # total = (n - 1) // k + 1\n    count = 1\n    res = 0\n    while count <= (n - 1) // k:\n        res += count * A + (n - count * k) * B\n        count += 1\n    return res\n"
    },
    {
        "number": 339,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k, A, B = map(int, stdin.split())\n    return str(min([n - i for i in range(n + 1) if n - i == A] + [0]))\n\nsolution(input())\n\npython3.8 tests/test_solutions.py\npython3.8 tests/test_solutions.py < input.txt\npython3.8 tests/test_solutions.py < input.txt > output.txt\n\"\"\"\n"
    },
    {
        "number": 339,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k, A, B = map(int, stdin.split())\n    x = n\n    ans = 0\n    if x == 1:\n        return ans\n    while True:\n        if x % k == 0:\n            break\n        x -= 1\n        ans += A\n        if x % k == 0:\n            break\n        ans += 1\n        x = x // k\n    return ans + min(k - (x % k), x + 1) + min(B, ans)\n\nsolution(\"9 2 3 1\")\nsolution(\"5 5 2 20\")\n"
    },
    {
        "number": 339,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\n=======\n\nGiven integers n, k, A and B. There is a number x, which is initially equal to n. You are allowed to perform two types of operations:   Subtract 1 from x. This operation costs you A coins.  Divide x by k. Can be performed only if x is divisible by k. This operation costs you B coins.  What is the minimum amount of coins you have to pay to make x equal to 1?\n\n\n-----Input-----\n\nThe first line contains a single integer n (1 \u2264 n \u2264 2\u00b710^9).\n\nThe second line contains a single integer k (1 \u2264 k \u2264 2\u00b710^9).\n\nThe third line contains a single integer A (1 \u2264 A \u2264 2\u00b710^9).\n\nThe fourth line contains a single integer B (1 \u2264 B \u2264 2\u00b710^9).\n\n\n-----Output-----\n\nOutput a single integer\u00a0\u2014 the minimum amount of coins you have to pay to make x equal to 1.\n\n\n-----Examples-----\nInput\n9\n2\n3\n1\n\nOutput\n6\n\nInput\n5\n5\n2\n20\n\nOutput\n8\n\nInput\n19\n3\n4\n2\n\nOutput\n12\n\n\n\n>>>>>>Other\n\nInput\n1\n1\n1\n\nOutput\n1\n\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE\n\n>>> # DONE"
    },
    {
        "number": 339,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # using dynamic programming\n    n, k, a, b = list(map(int, stdin.split()))\n    dp = [[0] * (b + 1) for _ in range(k + 1)]\n    for i in range(k + 1):\n        for j in range(b + 1):\n            if i == 0 or j == 0:\n                dp[i][j] = n\n            elif i >= j:\n                if j >= a:\n                    if j == a:\n                        dp[i][j] = min(dp[i - 1][j - a], a)\n                    else:\n                        dp[i][j] = min(dp[i - 1][j], dp[i - 1][j - a] + a)\n                else:\n                    dp[i][j] = min(dp[i - 1][j], dp[i][j - 1] + b)\n    return str(dp[k][b])"
    },
    {
        "number": 340,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    min_value = int(n)\n    ops_count = 0\n    while min_value > 1:\n        if min_value % 2 == 0:\n            min_value = min_value // 2\n            ops_count += 1\n        else:\n            min_value = min_value * 3 + 1\n            ops_count += 1\n    return str(min_value) +'' + str(ops_count)\n"
    },
    {
        "number": 340,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 7\n   ... 3\n   ... 9\n   ... 10\n   ... 8\n   ... 1\n   ... 6''')\n    '10 2'\n    >>> solution('''10\n   ... 9\n   ... 7\n   ... 3\n   ... 8\n   ... 5\n   ... 7\n   ... 1\n   ... 6''')\n    '6 4'\n    >>> solution('''5\n   ... 5\n   ... 7\n   ... 3\n   ... 9\n   ... 10\n   ... 8\n   ... 1\n   ... 6''')\n    '10 2'\n    \"\"\"\n    n = int(stdin)\n    i = 2\n    ans = []\n    while i <= n:\n        while n % i == 0:\n            n /= i\n            ans.append(i)\n        i += 1\n    return \" \".join([str(n), \" \".join(map(str, ans))])\n"
    },
    {
        "number": 340,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"1 1\"\n    \n    def multiply(n):\n        return n * 2\n    \n    def sqrt(n):\n        return int(n ** (1 / 2))\n    \n    # Iterate through till we get to a number less than or equal to 10\n    min_operations, min_n = float(\"inf\"), float(\"inf\")\n    while n > 10:\n        # Multiply operation\n        n = multiply(n)\n        min_operations = min(min_operations, 1 + (1 if n > 10 else 0))\n        min_n = min(min_n, n)\n        \n        # Sqrt operation\n        n = sqrt(n)\n        min_operations = min(min_operations, 1 + (1 if n > 10 else 0))\n        min_n = min(min_n, n)\n        \n    return str(min_n) + \" \" + str(min_operations)\n"
    },
    {
        "number": 340,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(1,10**6):\n        if i*i > n:\n            break\n        if i*i == n:\n            return str(i)+\" \"+str(i)+\" \"+str(i)\n    for i in range(1,n):\n        if i*i == n:\n            return str(i)+\" \"+str(i)+\" \"+str(i)\n    for i in range(1,n):\n        if n%i == 0:\n            return str(i)+\" \"+str(n//i)+\" \"+str(i)\n    return str(n)+\" \"+str(n)+\" \"+str(n)"
    },
    {
        "number": 340,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    n_sqrt = n * 2\n    for x in range(2, int(n ** (1 / 2)) + 1):\n        n_sqrt = n_sqrt * x\n    for x in range(2, int(n_sqrt ** (1 / 2)) + 1):\n        n_sqrt = n_sqrt * x\n    n_sqrt = n_sqrt // 2\n    for x in range(2, int(n_sqrt ** (1 / 2)) + 1):\n        n_sqrt = n_sqrt * x\n    if n_sqrt == n:\n        return str(n) + \" 0\"\n    else:\n        return str(n) + \" \" + str(n_sqrt)\n\n\nsolution(input())\n"
    },
    {
        "number": 340,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin)\n    # We need to know the maximum number of operations to achieve the minimum value\n    max_operations = int(math.sqrt(number))\n    # We need to know the minimum value\n    min_value = number\n    while max_operations >= 1:\n        min_value = min_value * number\n        number = min_value\n        max_operations -= 1\n    return f\"{min_value} {max_operations}\"\n"
    },
    {
        "number": 340,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    min_num = 10**6\n    min_ops = 0\n    \n    while n >= 10:\n        sqrt = int(n**(0.5))\n        \n        if sqrt**2 == n:\n            min_num = n\n            min_ops = 0\n            break\n        \n        n -= sqrt\n        \n        min_ops += 1\n        if sqrt**2 == n:\n            min_num = n\n            min_ops = 0\n            break\n        \n        n -= (sqrt**2)\n        \n        min_ops += 1\n        \n        if n == 0:\n            break\n        \n        if min_num > n:\n            min_num = n\n            min_ops = min_ops\n    \n    return f'{min_num} {min_ops}'"
    },
    {
        "number": 340,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    min_n = 2\n    min_ops = 0\n    while n > min_n:\n        n = n//2\n        min_n = min_n*2\n        min_ops += 1\n    print(min_n, min_ops)\n    return\nsolution(input())"
    },
    {
        "number": 340,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    inp = list(map(int, stdin.split()))\n    n = inp[0]\n    res = []\n    a = 0\n    while a < n:\n        if a*2**(int(math.log2(n))+1) <= n:\n            res.append((a, a*2**(int(math.log2(n))+1)))\n            a += 1\n        else:\n            a = a*2\n    ans = 0\n    for i, j in res:\n        ans += i+j+1\n    return str(min(inp)), str(ans)\nprint(solution(input()))"
    },
    {
        "number": 340,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return f\"{min(map(int, map(float, stdin.split()))):.0f} {min(len(map(str, map(float, stdin.split())))-1):.0f}\"\n"
    },
    {
        "number": 341,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    score = 0\n    for i in range(N):\n        T = stdin.strip()\n        if 'r' in T:\n            score += RPS[0]\n        elif 'p' in T:\n            score += RPS[1]\n        elif's' in T:\n            score += RPS[2]\n    return score\n\n\ndef"
    },
    {
        "number": 341,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    rounds, mchd = map(int, stdin.split())\n    winners = []\n    for i in range(mchd):\n        c = stdin[i]\n        if c == \"r\":\n            winners.append(\"Rock\")\n        elif c == \"s\":\n            winners.append(\"Scissors\")\n        elif c == \"p\":\n            winners.append(\"Paper\")\n        else:\n            print(\"Error\")\n    rounds -= 1\n    scores = {}\n    while len(scores)!= rounds:\n        score = 0\n        for w in winners:\n            score += scores.get(w, 0)\n        scores[winners[0]] = score\n        scores[winners[1]] = score\n        winners = []\n    return str(max(scores.values()))"
    },
    {
        "number": 341,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return\n"
    },
    {
        "number": 341,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    hand = stdin\n    rosh_win = 'r'\n    scho_win ='s'\n    pap_win = 'p'\n    hands = []\n    for i in range(n):\n        hand = hand[:i] + rosh_win + hand[i + 1:]\n        hands.append(hand)\n        hand = hand[:i] + scho_win + hand[i + 1:]\n        hands.append(hand)\n        hand = hand[:i] + pap_win + hand[i + 1:]\n        hands.append(hand)\n    print(max(hands))\n    return hands"
    },
    {
        "number": 341,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    R, S, P = stdin[0], stdin[1], stdin[2]\n    score = 0\n    scores = {R: R, S: S, P: P}\n    while N > 0:\n        N -= 1\n        choice = ''\n        for i in range(3):\n            choice += input()\n        if choice == R:\n            score += R\n        elif choice == S:\n            score += S\n        elif choice == P:\n            score += P\n    return str(score)\n\n\ndef"
    },
    {
        "number": 341,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    T = stdin.replace(\"\\n\", \"\")\n    R, S, P = 'r','s', 'p'\n    machine = {R: 'Rock', S: 'Scissors', P: 'Paper'}\n    # print(R, S, P)\n    # print(machine)\n    # print(T)\n\n    # Find and print the score for each hand\n    score = 0\n    for i in range(N):\n        if T[i] == R:\n            score += 20\n        if T[i] == S:\n            score += 10\n        if T[i] == P:\n            score += 15\n\n        # print(i, R, S, P, score)\n        # print(T[i])\n        # print(machine[T[i]])\n        # print(machine[T[i]])\n\n    # Find and print the score for the machine\n    for i in range(K):\n        if T[i] == machine[T[i]]:\n            score -= 5\n\n    return str(score)\n"
    },
    {
        "number": 341,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    rps = stdin.replace('r', '1').replace('p', '2').replace('s', '3').replace('r', '4').replace('p', '5').replace('s', '6')\n    return ''.join(sorted(rps, key=lambda i: int(i)*n + int(i)*k, reverse=True))"
    },
    {
        "number": 341,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 2\n   ... 8 7 6\n   ... rsrpr\n   ... ''')\n    '27'\n    \"\"\"\n    n, k = map(int, stdin.split())\n    m = int(input())\n    hand = list(map(str, input().split()))\n    best_hand = ['R', 'P', 'S']\n    ans = 0\n    while True:\n        if hand == best_hand:\n            break\n        if len(hand) > 1:\n            if hand[0] == 'S':\n                best_hand = hand\n                break\n            elif hand[0] == 'P':\n                if hand[1] == 'R':\n                    best_hand = hand\n                    break\n                elif hand[1] == 'S':\n                    if hand[2] == 'P':\n                        best_hand = hand\n                        break\n                    else:\n                        if hand[1] == 'R':\n                            best_hand = hand\n                            break\n                        else:\n                            if hand[1] == 'S':\n                                best_hand = hand\n                                break\n                            else:\n                                best_hand = hand\n                                break\n                else:\n                    if hand[1] == 'S':\n                        best_hand = hand\n                        break\n                    else:\n                        if hand[1] == 'P':\n                            best_hand = hand\n                            break\n                        else:\n                            if hand[1] == 'R':\n                                best_hand = hand\n                                break\n                            else:\n                                if hand[1] == 'S':\n                                    best_hand = hand\n                                    break\n                                else:\n                                    if hand[1] == 'P':\n                                        best_hand = hand\n                                        break\n                                    else:\n                                        if hand[1] == 'R':\n                                            best_hand = hand\n                                            break\n                                        else:\n                                            if hand[1] == 'S':\n                                                best_hand = hand\n                                                break\n                                            else:\n                                                best_hand = hand\n                                                break\n            else:\n                if hand[0] == 'P':\n                    best_hand = hand\n                    break\n                elif hand[0] == 'R':\n                    if hand[1] == 'P':\n                        best_hand = hand\n                        break\n                    else:\n                        if hand[0] == 'R':\n                            best_hand = hand\n                            break\n                        else:\n                            if hand[0] == 'S':\n                                best_hand = hand\n                                break\n                            else:\n                                if hand[0] == 'P':\n                                    best_hand = hand\n                                    break\n                                else:\n                                    if hand[0] == 'R':\n                                        best_hand = hand\n                                        break\n                                    else:\n                                        if hand[0] == 'S':\n                                            best_hand = hand\n                                            break\n                                        else:\n                                            if hand[0] == 'P':\n                                                best_hand = hand\n                                                break\n                                            else:\n                                                if hand[0] == 'R':\n                                                    best_hand = hand\n                                                    break\n                                                else:\n                                                    if hand[0] == 'S':\n                                                        best_hand = hand\n                                                        break\n                                                    else:\n                                                        if hand[0] == 'P':\n                                                            best_hand = hand\n                                                            break\n                                                        else:\n                                                            if hand[0] == 'R':\n                                                                best_hand = hand\n                                                                break\n                                                            else:\n                                                                if hand[0] == 'S':\n                                                                    best_hand = hand\n                                                                    break\n                                                                else:\n                                                                    if hand[0] == 'P':\n                                                                        best_hand = hand\n                                                                        break\n                                                                    else:\n                                                                        if hand[0] == 'R':\n                                                                            best_hand = hand\n                                                                            break\n                                                                        else:\n                                                                            if hand[0] == 'S':\n                                                                                best_hand = hand\n                                                                                break\n                                                                            else:\n                                                                                if hand[0] == 'P':\n                                                                                    best_hand = hand\n                                                                                    break\n                                                                                else:\n                                                                                    if hand[0] == 'R':\n                                                                                        best_hand = hand\n                                                                                        break\n                                                                                    else:\n                                                                                        if hand[0] == 'S':\n                                                                                            best_hand = hand\n                                                                                            break\n                                                                                        else:\n                                                                                            if hand[0] == 'P':\n                                                                                                best_hand = hand\n                                                                                                break\n                                                                                            else:\n                                                                                                if hand[0] == 'R':\n                                                                                                    best_hand = hand\n                                                                                                    break\n                                                                                                else:\n                                                                                                    if hand[0] == 'S':\n                                                                                                        best_hand = hand\n                                                                                                        break\n                                                                                                    else:\n                                                                                                        if hand[0] == 'P':\n                                                                                                            best_hand = hand\n                                                                                                            break\n                                                                                                        else:\n                                                                                                            if hand[0] == 'R':\n                                                                                                                best_hand = hand"
    },
    {
        "number": 341,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    total_score = 0\n\n    for i in range(N):\n        first_player_score = 0\n        second_player_score = 0\n        first_player_hand = \"\"\n        second_player_hand = \"\"\n\n        # Player 1\n        j = i\n        while j >= K:\n            first_player_hand = stdin[j]\n            break\n        j = j + 1\n\n        while j < len(stdin):\n            second_player_hand = stdin[j]\n            if second_player_hand == \"r\":\n                if first_player_hand == \"p\":\n                    first_player_score += 3\n                    second_player_score += 1\n                elif first_player_hand == \"s\":\n                    first_player_score += 1\n                    second_player_score += 3\n            elif second_player_hand == \"s\":\n                if first_player_hand == \"r\":\n                    first_player_score += 1\n                    second_player_score += 3\n                elif first_player_hand == \"p\":\n                    first_player_score += 3\n                    second_player_score += 1\n            elif second_player_hand == \"p\":\n                if first_player_hand == \"s\":\n                    first_player_score += 3\n                    second_player_score += 1\n                elif first_player_hand == \"r\":\n                    first_player_score += 1\n                    second_player_score += 3\n            j = j + 1\n\n        # Player 2\n        j = i + K\n        while j < len(stdin):\n            first_player_hand = stdin[j]\n            if first_player_hand == \"r\":\n                if second_player_hand == \"s\":\n                    first_player_score += 3\n                    second_player_score += 1\n                elif second_player_hand == \"p\":\n                    first_player_score += 1\n                    second_player_score += 3\n            elif first_player_hand == \"s\":\n                if second_player_hand == \"r\":\n                    first_player_score += 1\n                    second_player_score += 3\n                elif second_player_hand == \"p\":\n                    first_player_score += 3\n                    second_player_score += 1\n            elif first_player_hand == \"p\":\n                if second_player_hand == \"s\":\n                    first_player_score += 3\n                    second_player_score += 1\n                elif second_player_hand == \"r\":\n                    first_player_score += 1\n                    second_player_score += 3\n            j = j + 1\n\n        total_score += first_player_score + second_player_score\n\n    return str(total_score)\n"
    },
    {
        "number": 341,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    total, n, k, *t = stdin.split()\n    t = sorted(t, key=int)\n    \n    return \"{}\".format(int(total) + sum(2**i for i in range(len(t)) if t[i] == t[k-1]))\n\nprint(solution(input()))\n"
    },
    {
        "number": 342,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_good(string: str) -> bool:\n        string = string.replace('b', '').replace('a', '')\n        return len(string) == 2\n\n    def is_good_string(string: str) -> bool:\n        string = string.replace('b', '').replace('a', '')\n        return len(string) == 2 and all(string[i]!= string[i + 1] for i in range(0, len(string) - 1))\n\n    n, m, p = map(int, stdin.split())\n\n    s = (n * p) + m\n    a_char = 'a'\n    b_char = 'b'\n\n    while s < m:\n        for _ in range(s):\n            if is_good(a_char + b_char + a_char):\n                s += 2\n            elif is_good(a_char + b_char + a_char) and is_good_string(a_char + b_char + a_char):\n                s += 3\n            elif is_good(a_char + b_char + a_char) and is_good_string(a_char + b_char):\n                s += 2\n            else:\n                s += 1\n        if s >= m:\n            break\n        if is_good(a_char + b_char + a_char):\n            s += 2\n        elif is_good(a_char + b_char + a_char) and is_good_string(a_char + b_char + a_char):\n            s += 3\n        elif is_good(a_char + b_char + a_char) and is_good_string(a_char + b_char):\n            s += 2\n        else:\n            s += 1\n        a_char, b_char = b_char, a_char\n\n    return s\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 342,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    strs = {'a': 2, 'b': 3, 'ab': 2}\n    ans = max([2*strs[s] + 1 for s in ('a', 'b', 'ab')])\n    for i in range(2, c):\n        if (i + 2)*strs['a'] + 1 > (i + 1)*strs['b'] + 2:\n            ans = max([i*strs[s] + 1 for s in ('a', 'b', 'ab')])\n        else:\n            ans = max([(i+1)*strs[s] + 2 for s in ('a', 'b', 'ab')])\n    return ans\n"
    },
    {
        "number": 342,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return len(stdin)"
    },
    {
        "number": 342,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Just return the max of solutions.\"\"\"\n    a, b, c = map(int, stdin.split())\n    longest_string = 0\n\n    # find 1 and 2 string, then concatenate them, and make it longer.\n    string_1 = \"\"\n    string_2 = \"\"\n    while a > 0:\n        if a & 1 == 1:\n            string_1 = \"a\" + string_1\n            a -= 1\n        else:\n            string_2 = \"a\" + string_2\n            a -= 1\n        a >>= 1\n    a = 0\n    while b > 0:\n        if b & 1 == 1:\n            string_1 = \"b\" + string_1\n            b -= 1\n        else:\n            string_2 = \"b\" + string_2\n            b -= 1\n        b >>= 1\n    b = 0\n    while c > 0:\n        if c & 1 == 1:\n            string_1 = \"ab\" + string_1\n            c -= 1\n        else:\n            string_2 = \"ab\" + string_2\n            c -= 1\n        c >>= 1\n    a = 0\n    while a <= b:\n        a = a + 1\n        a = a << 1\n    while a <= b:\n        b = b - 1\n        b = b >> 1\n    while a <= b:\n        b = b - 1\n        b = b >> 1\n    while a <= b:\n        b = b - 1\n        b = b >> 1\n    while a <= b:\n        b = b - 1\n        b = b >> 1\n    while a <= b:\n        b = b - 1\n        b = b >> 1\n    while a <= b:\n        b = b - 1\n        b = b >> 1\n    while a <= b:\n        b = b - 1\n        b = b >> 1\n    while a <= b:\n        b = b - 1\n        b = b >> 1\n    while a <= b:\n        b = b - 1\n        b = b >> 1\n    while a <= b:\n        b = b - 1\n        b = b >> 1\n    while a <= b:\n        b = b - 1\n        b = b >> 1\n    while a <= b:\n        b = b - 1\n        b = b >> 1\n    while a <= b:\n        b = b - 1\n        b = b >> 1\n    while a <= b:\n        b = b - 1\n        b = b >> 1\n    while a <= b:\n        b = b - 1\n        b = b >> 1\n    while a <= b:\n        b = b - 1\n        b = b >> 1\n    while a <= b:\n        b = b - 1\n        b = b >> 1\n    while a <= b:\n        b = b - 1\n        b = b >> 1\n    while a <= b:\n        b = b - 1\n        b = b >> 1\n    while a <= b:\n        b = b - 1\n        b = b >> 1\n    while a <= b:\n        b = b - 1\n        b = b >> 1\n    while a <= b:\n        b = b - 1\n        b = b >> 1\n    while a <= b:\n        b = b - 1\n        b = b >> 1\n    while a <= b:\n        b = b - 1\n        b = b >> 1\n    while a <= b:\n        b = b - 1\n        b = b >> 1\n    while a <= b:\n        b = b - 1\n        b = b >> 1\n    while a <= b:\n        b = b - 1\n        b = b >> 1\n    while a <= b:\n        b = b - 1\n        b = b >> 1\n    while a <= b:\n        b = b - 1\n        b = b >> 1\n    while a <= b:\n        b = b - 1\n        b = b >> 1\n    while a <= b:\n        b = b - 1\n        b = b >> 1\n    while a <= b:\n        b = b - 1\n        b = b >> 1\n    while a <= b:\n        b = b - 1\n        b = b >> 1\n    while a <= b:\n        b = b - 1\n        b = b >> 1\n    while a <= b:\n        b = b - 1\n        b = b >> 1\n    while a <= b:\n        b = b - 1\n        b = b >> 1\n    while a <= b:\n        b = b - 1\n        b = b >> 1\n    while a <= b:\n        b = b - 1\n        b = b >> 1\n    while a <= b:\n        b = b - 1\n        b = b >> 1\n    while a <= b:\n        b = b - 1\n        b = b >> 1\n    while a <= b:\n        b = b - 1\n        b = b >> 1\n    while a <= b:\n        b = b - 1\n        b = b >> 1\n    while a <= b:\n        b = b - 1\n        b = b >> 1\n    while a <= b:\n        b = b - 1\n        b = b >> 1\n    while a <= b:\n        b = b - 1\n        b = b >> 1\n    while a <= b:\n        b = b - 1\n        b = b >> 1\n    while a <= b:\n        b = b - 1\n        b = b >> 1\n    while a <= b:\n        b = b - 1\n        b = b >> 1\n    while a <= b:\n        b = b - 1\n        b = b >> 1\n    while a <= b:\n        b = b - 1\n        b = b >> 1\n    while a <= b:\n        b = b - 1\n        b = b >> 1\n    while a <= b:\n        b = b - 1\n        b = b >> 1\n    while a <= b:\n        b = b - 1\n        b = b >> 1\n    while a <= b:\n        b = b - 1\n        b = b >> 1\n    while a <= b:\n        b = b - 1\n        b = b >> 1\n    while a <= b:\n        b = b - 1\n        b = b >> 1\n    while a <= b:\n        b = b - 1\n        b = b >> 1\n    while a <= b:\n        b = b - 1\n        b = b >> 1\n    while a <= b:\n        b = b - 1\n        b = b >> 1\n    while a <= b:\n        b = b - 1\n        b = b >> 1\n    while a <= b:\n        b = b - 1\n        b = b >> 1\n    while a <= b:\n        b = b - 1\n        b = b >> 1\n    while a <= b:\n        b = b - 1\n        b = b >> 1\n    while a <= b:\n        b = b - 1\n        b = b >> 1\n    while a <= b:\n        b = b - 1\n        b = b >> 1\n    while a <= b:\n        b = b - 1\n        b = b >> 1\n    while a <= b:\n        b = b - 1\n        b"
    },
    {
        "number": 342,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = list(map(int, stdin.split()))\n    result = 0\n    if a == b:\n        result = a * b\n    elif a + 2 * b == c:\n        result = a * 2 + a * 2 + b * 2\n    elif b + 2 * a == c:\n        result = a * 2 + a * 2 + b * 2\n    else:\n        result = a * 2 + a * 2 + b * 2\n    return str(result)\nprint(solution(input()))\n"
    },
    {
        "number": 342,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    for i in range(1, a+1):\n        for j in range(1, b+1):\n            for k in range(1, c+1):\n                if i + j + k == a + b + c:\n                    if 'a' in ('a', 'b', 'ab') and ('a' * i + 'b' * j + 'ab' * k) == a * 'a' + b * 'b' + 'ab' * k:\n                        return i * j * k\n    return 'a' * a + 'b' * b + 'ab' * c\n"
    },
    {
        "number": 342,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    arr = stdin.split('\\n')\n    res = \"\"\n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            if(len(arr[i])+len(arr[j])==2*(j-i+1)):\n                res = res+arr[i]+arr[j]\n                break\n    print(len(res))\n\n\n\ndef"
    },
    {
        "number": 342,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a == 0:\n        return str(max(b, c))\n    elif b == 0:\n        return str(max(a, c))\n    elif c == 0:\n        return str(max(a, b))\n    else:\n        return str(max(max(a, b), max(c, max(a, b))))\n"
    },
    {
        "number": 342,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, b = list(map(int, stdin.split()))\n    b_len = n + m\n    if n == 1 and m == 1:\n        print(b_len)\n    else:\n        if m % 2 == 1:\n            b_len -= 1\n        if b % 2 == 1:\n            b_len -= 1\n        if n < b_len or m < b_len:\n            print(b_len)\n        else:\n            n_len = 0\n            m_len = 0\n            b_len_2 = b_len\n            b_len_3 = b_len_2\n            n_len = (b_len - 2) // 2\n            if (b_len - 2) % 2!= 0:\n                n_len += 1\n            m_len = (b_len_2 - n_len - 3) // 2\n            if (b_len_2 - n_len - 3) % 2!= 0:\n                m_len += 1\n            b_len_2 -= n_len - 1\n            b_len_3 -= m_len - 1\n            print(max(n_len, m_len, b_len_2, b_len_3))\n"
    },
    {
        "number": 342,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    print(max(min(a, b, c) * 2, abs(a - b), abs(a - c), abs(b - c)))"
    },
    {
        "number": 343,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, p, x, y = stdin.split()\n    n, k, p, x, y = int(n), int(k), int(p), int(x), int(y)\n\n    if p > n * x or (p <= n * x + k and (k == 0 or n * x <= p or k == n * x - p)):\n        return '-1'\n    a = list(map(int, stdin.split()))\n    left = 0\n    right = n\n    mid = 0\n    while left <= right:\n        mid = (left + right) // 2\n        if sum(a[:mid]) >= p:\n            if mid == 0 or sum(a[mid - 1:mid + 1]) < p:\n                if p <= n * x and p - k <= n * x - mid:\n                    return''.join(map(str, a[mid:]))\n                else:\n                    left = mid + 1\n            else:\n                right = mid - 1\n        else:\n            left = mid + 1\n    return '-1'\n"
    },
    {
        "number": 343,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 3 5 18 4\n   ... 5 5 4\n   ... ''')\n    '4 1'\n    >>> solution('''5 3 5 16 4\n   ... 5 5 5\n   ... ''')\n    '-1'\n    \"\"\"\n    n, k, p, x, y = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    if sum(a[:k]) >= x:\n        if not any([sum(a[i:k]) <= x and not a[i] < y for i in range(k)]):\n            return '-1'\n    return''.join([str(x) for x in a[k:]])\n"
    },
    {
        "number": 343,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\nn, k, p, x, y = list(map(int, stdin.split()))"
    },
    {
        "number": 343,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k, p, x, y = stdin.split()\n    n = int(n)\n    k = int(k)\n    p = int(p)\n    x = int(x)\n    y = int(y)\n\n    if (k - n) % 2 == 0:\n        # Even\n        a = sorted(list(map(int, stdin.split())))\n        if len(a) % 2 == 0:\n            median = (a[len(a) // 2] + a[len(a) // 2 - 1]) / 2\n        else:\n            median = a[len(a) // 2]\n        if median >= p:\n            return \"-1\"\n        else:\n            return str(p - median)\n\n    else:\n        # Odd\n        a = sorted(list(map(int, stdin.split())))\n        if (len(a) - k - 1) % 2 == 0:\n            median = (a[len(a) - k - 1] + a[len(a) - k]) / 2\n        else:\n            median = a[len(a) - k - 1]\n        if median >= p:\n            return \"-1\"\n        else:\n            return str(p - median)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 343,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k, p, x, y = map(int, stdin.split())\n    tests = sorted(map(int, stdin.split()))\n    if k < len(tests):\n        return str(tests[k])\n\n    if tests[-1] == x:\n        return '-1'\n\n    res = []\n    total = 0\n    for i in range(k, len(tests)):\n        total += tests[i]\n        if total > x:\n            total -= tests[i - k]\n            res.append(tests[i - k])\n            if total <= y:\n                return''.join([str(i) for i in res])\n        else:\n            res.append(tests[i])\n    return '-1'\n"
    },
    {
        "number": 343,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k, p, x, y = map(int, stdin.split())\n    if p < x:\n        return '-1'\n    if x % 2 == 0:\n        if n - k == x // 2:\n            return '-1'\n    if n == 1:\n        if p % 2 == 0:\n            return '-1'\n    elif n % 2!= 0:\n        if n == k:\n            return '-1'\n        elif k == p:\n            return '-1'\n    else:\n        if k % 2 == 0:\n            return '-1'\n    if k < n - x + 1:\n        return '-1'\n    if n <= k + x:\n        if n <= k:\n            return '-1'\n    return \" \".join([str(i) for i in range(x, k + x + 1)])\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 343,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\nstdin = stdin.split(\"\\n\")\nn, k, p, x, y = map(int, stdin[0].split())\n\ntest_set = []\nfor i in range(k):\n    test_set.append(int(stdin[1][i]))\n\ntest_set.sort()"
    },
    {
        "number": 343,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k, p, x, y = list(map(int, stdin.split()))\n    if n % 2 == 1:\n        return \"-1\"\n    if k < n - 1:\n        return \"-\"\n    marks = sorted(list(map(int, stdin.split())))\n    if sum(marks) < x:\n        return \"-1\"\n    return str(n - k) + \" \" + \" \".join(map(str, marks[n // 2:]))\n\ndef"
    },
    {
        "number": 343,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k, p, x, y = list(map(int, stdin.split()))\n    if n % 2 == 1:\n        if n >= x + x:\n            return '-1'\n    if k > n:\n        return '-1'\n    else:\n        return''.join(map(str,sorted(map(int,stdin.split()))[k:n]))\n\nstdin = input()\nprint(solution(stdin))"
    },
    {
        "number": 343,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k, p, x, y = map(int, stdin.split())\n    if n == 1:\n        if x <= p <= n * p:\n            return '-1'\n        return 'n'\n\n    answers = []\n    for i in range(1, n):\n        if sum(map(int, str(x))) + sum(map(int, str(y))) > p:\n            answers.append(str(x + y))\n            if len(answers) > 1 and abs(int(answers[0]) - int(answers[1])) > 1:\n                return '-1'\n            x = y\n        else:\n            x = y\n            y = x + y\n\n    return''.join(sorted(answers))\n"
    },
    {
        "number": 344,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    s = s.lower()\n    s = s.replace(' ', '')\n    a = s.split()\n    for i in range(len(a)):\n        if len(a[i]) == 1 and a[i] == 'a' or len(a[i]) == 1 and a[i] == 'i' or len(a[i]) == 1 and a[i] == 'u' or len(a[i]) == 1 and a[i] == 'e' or len(a[i]) == 1 and a[i] == 'o':\n            if 'c' in a:\n                continue\n            else:\n                return 'YES'\n        elif len(a[i]) > 1 and 'c' in a:\n            continue\n        elif len(a[i]) > 1 and 'n' in a:\n            continue\n        elif 'c' in a and a[i][0] == 'a' and a[i][1] == 'a':\n            return 'YES'\n        elif 'c' in a and a[i][0] == 'e' and a[i][1] == 'e':\n            return 'YES'\n        else:\n            return 'NO'\n\nsolution(stdin)"
    },
    {
        "number": 344,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\nstdin = stdin.split('\\n')\nprint(solution(stdin))\n"
    },
    {
        "number": 344,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    temp = stdin\n    a = temp.replace(\"a\",\"ae\")\n    b = a.replace(\"o\",\"oe\")\n    c = b.replace(\"u\",\"ue\")\n    d = c.replace(\"i\",\"ie\")\n    e = d.replace(\"e\",\"ie\")\n    f = e.replace(\"o\",\"oe\")\n    g = f.replace(\"a\",\"aa\")\n    h = g.replace(\"n\",\"nn\")\n    h = h.replace(\"b\",\"bb\")\n    h = h.replace(\"c\",\"cc\")\n    i = h.replace(\"d\",\"dd\")\n    j = i.replace(\"m\",\"mm\")\n    k = j.replace(\"l\",\"ll\")\n    k = k.replace(\"r\",\"rr\")\n    k = k.replace(\"v\",\"vv\")\n    k = k.replace(\"s\",\"ss\")\n    k = k.replace(\"t\",\"tt\")\n    k = k.replace(\"w\",\"ww\")\n    k = k.replace(\"k\",\"kk\")\n    k = k.replace(\"g\",\"gg\")\n    k = k.replace(\"h\",\"hh\")\n    k = k.replace(\"j\",\"jj\")\n    k = k.replace(\"p\",\"pp\")\n    k = k.replace(\"q\",\"qq\")\n    k = k.replace(\"x\",\"xx\")\n    k = k.replace(\"z\",\"zz\")\n    k = k.replace(\"h\",\"hh\")\n    if k==\"\":\n        return \"YES\"\n    else:\n        return \"NO\"\n\n\"\"\"\n\n\n\n\n\ndef"
    },
    {
        "number": 344,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    s = stdin\n    \n    a = 0\n    \n    while s[a] == \"a\" and a < len(s)-1:\n        a += 1\n    if a >= len(s)-1:\n        return \"YES\"\n    else:\n        return \"NO\"\nsolution(\"sumimasen\")\nsolution(\"ninja\")\nsolution(\"codeforces\")\n"
    },
    {
        "number": 344,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    vowels = {\"a\",\"i\",\"e\",\"o\"}\n    consonants = {\"b\",\"c\",\"d\",\"f\",\"g\",\"h\",\"j\",\"k\",\"l\",\"m\",\"n\",\"p\",\"q\",\"r\",\"s\",\"t\",\"v\",\"w\",\"x\",\"y\",\"z\"}\n    if stdin[0].lower() in vowels:\n        return \"YES\"\n    else:\n        for i in stdin:\n            if i in vowels and i not in consonants:\n                return \"YES\"\n            elif i.lower() in consonants:\n                return \"NO\""
    },
    {
        "number": 344,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n'''"
    },
    {
        "number": 344,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    l = stdin.split()\n    for i in range(len(l)):\n        if l[i] == \"n\":\n            break\n        if i == 0:\n            if l[i] in \"aeiou\":\n                return \"YES\"\n        else:\n            if l[i - 1] == \"o\":\n                if l[i] in \"aeiou\":\n                    return \"YES\"\n            elif l[i - 1] == \"u\":\n                if l[i] in \"aeiou\":\n                    return \"YES\"\n            elif l[i - 1] == \"e\":\n                if l[i] in \"aeiou\":\n                    return \"YES\"\n            elif l[i - 1] == \"i\":\n                if l[i] in \"aeiou\":\n                    return \"YES\"\n            elif l[i - 1] == \"a\":\n                if l[i] in \"aeiou\":\n                    return \"YES\"\n            elif l[i - 1] == \"o\":\n                if l[i] in \"aeiou\":\n                    return \"YES\"\n            elif l[i - 1] == \"u\":\n                if l[i] in \"aeiou\":\n                    return \"YES\"\n            elif l[i - 1] == \"e\":\n                if l[i] in \"aeiou\":\n                    return \"YES\"\n            elif l[i - 1] == \"a\":\n                if l[i] in \"aeiou\":\n                    return \"YES\"\n            elif l[i - 1] == \"i\":\n                if l[i] in \"aeiou\":\n                    return \"YES\"\n            elif l[i - 1] == \"o\":\n                if l[i] in \"aeiou\":\n                    return \"YES\"\n            elif l[i - 1] == \"u\":\n                if l[i] in \"aeiou\":\n                    return \"YES\"\n            elif l[i - 1] == \"e\":\n                if l[i] in \"aeiou\":\n                    return \"YES\"\n            elif l[i - 1] == \"a\":\n                if l[i] in \"aeiou\":\n                    return \"YES\"\n            elif l[i - 1] == \"i\":\n                if l[i] in \"aeiou\":\n                    return \"YES\"\n            elif l[i - 1] == \"o\":\n                if l[i] in \"aeiou\":\n                    return \"YES\"\n            elif l[i - 1] == \"u\":\n                if l[i] in \"aeiou\":\n                    return \"YES\"\n            elif l[i - 1] == \"e\":\n                if l[i] in \"aeiou\":\n                    return \"YES\"\n            elif l[i - 1] == \"a\":\n                if l[i] in \"aeiou\":\n                    return \"YES\"\n            elif l[i - 1] == \"i\":\n                if l[i] in \"aeiou\":\n                    return \"YES\"\n            elif l[i - 1] == \"o\":\n                if l[i] in \"aeiou\":\n                    return \"YES\"\n            elif l[i - 1] == \"u\":\n                if l[i] in \"aeiou\":\n                    return \"YES\"\n            elif l[i - 1] == \"e\":\n                if l[i] in \"aeiou\":\n                    return \"YES\"\n            elif l[i - 1] == \"a\":\n                if l[i] in \"aeiou\":\n                    return \"YES\"\n            elif l[i - 1] == \"i\":\n                if l[i] in \"aeiou\":\n                    return \"YES\"\n            elif l[i - 1] == \"o\":\n                if l[i] in \"aeiou\":\n                    return \"YES\"\n            elif l[i - 1] == \"u\":\n                if l[i] in \"aeiou\":\n                    return \"YES\"\n            elif l[i - 1] == \"e\":\n                if l[i] in \"aeiou\":\n                    return \"YES\"\n            elif l[i - 1] == \"a\":\n                if l[i] in \"aeiou\":\n                    return \"YES\"\n            elif l[i - 1] == \"i\":\n                if l[i] in \"aeiou\":\n                    return \"YES\"\n            elif l[i - 1] == \"o\":\n                if l[i] in \"aeiou\":\n                    return \"YES\"\n            elif l[i - 1] == \"u\":\n                if l[i] in \"aeiou\":\n                    return \"YES\"\n            elif l[i - 1] == \"e\":\n                if l[i] in \"aeiou\":\n                    return \"YES\"\n            elif l[i - 1] == \"a\":\n                if l[i] in \"aeiou\":\n                    return \"YES\"\n            elif l[i - 1] == \"i\":\n                if l[i] in \"aeiou\":\n                    return \"YES\"\n            elif l[i - 1] == \"o\":\n                if l[i] in \"aeiou\":\n                    return \"YES\"\n            elif l[i - 1] == \"u\":\n                if l[i] in \"aeiou\":\n                    return \"YES\"\n            elif l[i - 1] == \"e\":\n                if l[i] in \"aeiou\":\n                    return \"YES\"\n            elif l[i - 1] == \"a\":\n                if l[i] in \"aeiou\":\n                    return \"YES\"\n            elif l[i - 1] == \"i\":\n                if l[i] in \"aeiou\":\n                    return \"YES\"\n            elif l[i - 1] == \"o\":\n                if l[i] in \"aeiou\":\n                    return \"YES\"\n            elif l[i - 1] == \"u\":\n                if l[i] in \"aeiou\":\n                    return \"YES\"\n            elif l[i - 1] == \"e\":\n                if l[i] in \"aeiou\":\n                    return \"YES\"\n            elif l[i - 1] == \"a\":\n                if l[i] in \"aeiou\":\n                    return \"YES\"\n            elif l[i - 1] == \"i\":\n                if l[i] in \"aeiou\":\n                    return \"YES\"\n            elif l[i - 1] == \"o\":\n                if l[i] in \"aeiou\":\n                    return \"YES\"\n            elif l[i - 1] == \"u\":\n                if l[i] in \"aeiou\":\n                    return \"YES\"\n            elif l[i - 1] == \"e\":\n                if l[i] in \"aeiou\":\n                    return \"YES\""
    },
    {
        "number": 344,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    l = []\n    for i in stdin:\n        if i == \"a\":\n            if \"e\" in l:\n                l.remove(\"e\")\n            elif \"i\" in l:\n                l.remove(\"i\")\n            elif \"o\" in l:\n                l.remove(\"o\")\n            elif \"u\" in l:\n                l.remove(\"u\")\n            else:\n                l.append(i)\n        elif i == \"e\":\n            if \"i\" in l:\n                l.remove(\"i\")\n            elif \"o\" in l:\n                l.remove(\"o\")\n            elif \"u\" in l:\n                l.remove(\"u\")\n            else:\n                l.append(i)\n        elif i == \"i\":\n            if \"o\" in l:\n                l.remove(\"o\")\n            elif \"u\" in l:\n                l.remove(\"u\")\n            else:\n                l.append(i)\n        elif i == \"o\":\n            if \"u\" in l:\n                l.remove(\"u\")\n            else:\n                l.append(i)\n        elif i == \"u\":\n            if \"a\" in l:\n                l.remove(\"a\")\n            elif \"e\" in l:\n                l.remove(\"e\")\n            elif \"i\" in l:\n                l.remove(\"i\")\n            elif \"o\" in l:\n                l.remove(\"o\")\n            else:\n                l.append(i)\n    if len(l) > 0:\n        return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 344,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for s in stdin.split(\"\\n\"):\n        if s!= \"\" and any(s[i] in vowels for i in range(len(s))):\n            if \"n\" in s:\n                return \"NO\"\n        else:\n            return \"YES\""
    },
    {
        "number": 344,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n    for i, v in enumerate(s):\n        if v in vowels:\n            continue\n        if i == 0 or s[i - 1] in vowels:\n            continue\n        else:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 345,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 345,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    edges = [[] for _ in range(n)]\n    for i in range(m):\n        a, b = list(map(int, stdin.split()))\n        a -= 1\n        b -= 1\n        edges[a].append(b)\n        edges[b].append(a)\n    count = 0\n    for i in range(n):\n        for j in range(i):\n            for k in range(j):\n                if k == i or k == j:\n                    continue\n                if len(edges[i]) == len(edges[j]) == len(edges[k]) == n:\n                    for m in range(n):\n                        if m == i or m == j or m == k:\n                            continue\n                        if (i, m) in edges[j] or (m, i) in edges[j]:\n                            continue\n                        if (i, m) in edges[k] or (m, i) in edges[k]:\n                            continue\n                        count += 1\n    return str(count)"
    },
    {
        "number": 345,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    b = []\n    for i in range(1, n + 1):\n        b.append(a[i - 1])\n    a = sorted(a)\n    b = sorted(b)\n\n    # l = len(a)\n    # l1 = l // 2\n    #\n    # for i in range(0, l):\n    #     if a[i]!= b[i]:\n    #         return 'NO'\n    # return 'YES'\n    return str(min(n, m) + max(n, m) - 1)\n"
    },
    {
        "number": 345,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = {a: set(map(int, stdin.split())) for a in range(1, n+1)}\n    for _ in range(m):\n        a, b = map(int, stdin.split())\n        if a in edges and b in edges:\n            edges[a].update(edges[b])\n            edges[b].update(edges[a])\n    dots = 0\n    for v in edges:\n        dots += len(edges[v])\n    return str(dots)\n\n\ndef"
    },
    {
        "number": 345,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = [[int(i) for i in input().split()] for _ in range(m)]\n    G = [[] for _ in range(n+1)]\n    for i, j in edges:\n        G[i].append(j)\n        G[j].append(i)\n\n    visited = set()\n    ans = 0\n\n    def dfs(root):\n        for child in G[root]:\n            if child not in visited:\n                visited.add(child)\n                dfs(child)\n        for i in range(len(G[root])):\n            for j in range(i+1, len(G[root])):\n                if G[root][i] == G[root][j]:\n                    visited.add(root)\n                    visited.add(G[root][i])\n                    return\n\n    for i in range(1, n+1):\n        if i not in visited:\n            visited.add(i)\n            dfs(i)\n            ans += 1\n\n    return str(ans)\n"
    },
    {
        "number": 345,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(i) for i in stdin.split())\n    adj = [[] for i in range(n+1)]\n    for i in range(m):\n        a, b = (int(j) for j in stdin.split()[i].split(' '))\n        adj[a].append(b)\n        adj[b].append(a)\n\n    dominoes = [1]\n    for i in range(1, n+1):\n        if len(dominoes) == 1:\n            break\n        dots = (2 ** (len(dominoes)-1))\n        if dots!= 0:\n            temp = dominoes.copy()\n            if dots % 2 == 0:\n                temp.extend([temp.pop()])\n                if i in adj[temp[0]]:\n                    dominoes.append(temp.pop())\n                else:\n                    dominoes.extend([temp.pop()])\n            else:\n                if i in adj[temp[0]]:\n                    dominoes.append(temp.pop())\n                else:\n                    dominoes.extend([temp.pop()])\n        else:\n            dominoes = []\n    return str(len(dominoes))"
    },
    {
        "number": 345,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 345,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = defaultdict(list)\n    for a, b in map(int, stdin.split()):\n        graph[a].append(b)\n        graph[b].append(a)\n    connected_graph = defaultdict(list)\n    for v1, v2 in graph.values():\n        connected_graph[v1] += v2\n        connected_graph[v2] += v1\n    nodes = set(range(1, n + 1))\n    ans = 0\n    while nodes:\n        next_nodes = set()\n        for node in nodes:\n            if len(graph[node]) == 0:\n                ans += 1\n                nodes.remove(node)\n            else:\n                next_nodes.update(graph[node])\n                graph[node] = []\n        nodes = next_nodes\n    return ans\n"
    },
    {
        "number": 345,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def make_graph(vertex_count, edges):\n        graph = {i: [] for i in range(1, vertex_count + 1)}\n        for i in range(len(edges)):\n            v1, v2 = edges[i]\n            graph[v1].append(v2)\n            graph[v2].append(v1)\n        return graph\n\n    def make_edge(vertex_count, edges):\n        graph = {i: [] for i in range(1, vertex_count + 1)}\n        for i in range(len(edges)):\n            v1, v2 = edges[i]\n            graph[v1].append(v2)\n            graph[v2].append(v1)\n        return graph\n\n    def make_vertex(vertex_count, edges):\n        graph = {i: [] for i in range(1, vertex_count + 1)}\n        for i in range(len(edges)):\n            v1, v2 = edges[i]\n            graph[v1].append(v2)\n            graph[v2].append(v1)\n        return graph\n\n    def is_connected(vertex_count, graph):\n        visited = [False] * (vertex_count + 1)\n        for i in range(1, vertex_count + 1):\n            if not visited[i]:\n                visited[i] = True\n                stack = []\n                stack.append(i)\n                while stack:\n                    cur_vertex = stack.pop()\n                    for adj_vertex in graph[cur_vertex]:\n                        if not visited[adj_vertex]:\n                            visited[adj_vertex] = True\n                            stack.append(adj_vertex)\n        return all(visited)\n\n    def make_domino(vertex_count, graph, cur_vertex):\n        visited = [False] * (vertex_count + 1)\n        for i in range(1, vertex_count + 1):\n            if not visited[i]:\n                visited[i] = True\n                stack = []\n                stack.append(i)\n                while stack:\n                    cur_vertex = stack.pop()\n                    for adj_vertex in graph[cur_vertex]:\n                        if not visited[adj_vertex]:\n                            visited[adj_vertex] = True\n                            stack.append(adj_vertex)\n        dominoes = []\n        for i in range(vertex_count):\n            dominoes.append((cur_vertex, graph[cur_vertex][i]))\n        return dominoes\n\n    vertex_count = int(stdin)\n    edges = []\n    for i in range(vertex_count):\n        vertex = list(map(int, stdin.split()))\n        edges.append((vertex[0], vertex[1]))\n        edges.append((vertex[1], vertex[0]))\n    graph = make_graph(vertex_count, edges)\n    vertex_count = len(graph)\n    graph = make_vertex(vertex_count, edges)\n    edge_count = len(graph)\n    graph = make_edge(vertex_count, edges)\n    while not is_connected(vertex_count, graph):\n        for i in range(edge_count):\n            edge = (graph[i][0], graph[i][1])\n            graph[i] = make_domino(vertex_count, graph, edge[0])\n            graph[i].extend(make_domino(vertex_count, graph, edge[1]))\n    return str(len(graph))\n"
    },
    {
        "number": 345,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n\n    return str(max(solution1(n, m), solution2(n, m)))\n\n\ndef"
    },
    {
        "number": 346,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    _, n, m, *prices = list(map(int, stdin.split()))\n    points = {i: 0 for i in range(1, n + 1)}\n    num_right = num_wrong = 0\n    for i in range(n):\n        if i in range(m):\n            num_right += 1\n            points[i + 1] += prices[i]\n        else:\n            num_wrong += 1\n            points[i + 1] += prices[i]\n            points[i + 1] -= num_right\n    ans = 0\n    for k, v in points.items():\n        ans += k * v\n    return str(ans)"
    },
    {
        "number": 346,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    (n, m, *questions) = list(map(int, stdin.split()))\n    tourn_data = sorted(list(zip(questions, m, range(1, n + 1))), key=lambda x: x[1], reverse=True)\n    # print(tourn_data)\n    #\n    # tourn_data = []\n    # for i in range(1, n + 1):\n    #     tourn_data.append((i, m, i - 1))\n    # print(tourn_data)\n\n    tourn_data = sorted(tourn_data, key=lambda x: x[2], reverse=True)\n    # print(tourn_data)\n    #\n    # tourn_data = sorted(tourn_data, key=lambda x: x[1], reverse=True)\n    # print(tourn_data)\n\n    # print(tourn_data)\n\n    points = 0\n    for (question, auction_m, index) in tourn_data:\n        # print(index, question, auction_m)\n        if index == n:\n            continue\n        if question not in questions:\n            continue\n        if auction_m == 0:\n            continue\n        if index < n and question == index + 1:\n            points += auction_m * questions[index]\n        else:\n            points += questions[index]\n        # print(points)\n        # print(question, auction_m, index, questions[index])\n    return str(points)\n"
    },
    {
        "number": 346,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, a = [int(i) for i in stdin.split()]\n    b = []\n    ans = 0\n    for i in range(m):\n        b.append(int(stdin.split()[i + 2]))\n    for i in range(len(b)):\n        if b[i] == 1:\n            ans = max(ans, a[i] + a[i + 1])\n    for i in range(len(a) - 1):\n        if a[i] > ans:\n            ans = max(ans, a[i + 1] + a[i])\n    print(ans)\n"
    },
    {
        "number": 346,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(i) for i in stdin.strip().split())\n    a = sorted(int(i) for i in stdin.strip().split()[1:])\n    b = list(map(int, stdin.strip().split()[-1]))\n    print(a)\n    print(b)\n    max_points = 0\n    curr_points = 0\n    for i in range(m):\n        if b[i] == 1:\n            if a[i] > curr_points:\n                curr_points = a[i]\n            else:\n                curr_points = a[i] - curr_points\n        else:\n            curr_points = a[i] - curr_points\n        max_points = max(curr_points, max_points)\n    return str(max_points)\n"
    },
    {
        "number": 346,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    game = [[] for i in range(n)]\n    for i in range(m):\n        game[arr[i*2] - 1].append(arr[i*2 + 1] - 1)\n    max_score = 0\n    res = 0\n    def check(arr):\n        global max_score\n        global res\n        score = 0\n        for i in arr:\n            if game[i]:\n                score += arr[i]\n            else:\n                res = max(res, score)\n                score = 0\n        return res\n    while True:\n        score = check(game)\n        if score > max_score:\n            max_score = score\n        if len(game) == 1:\n            break\n        tmp = []\n        for i in range(len(game)):\n            if len(game[i]) == 0:\n                tmp.append(i)\n        for i in tmp:\n            game.remove(game[i])\n    return str(max_score)\n"
    },
    {
        "number": 346,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    prices = list(map(int, stdin.strip().split()))\n    count_of_auctions = int(stdin.strip().split()[1])\n    question_number = 1\n    max_points = 0\n    points_a = 0\n    points_b = 0\n\n    for _ in range(count_of_auctions):\n        points_a += prices[question_number - 1]\n        question_number += 1\n        if question_number > len(prices):\n            break\n        while question_number < len(prices):\n            points_b += prices[question_number - 1]\n            question_number += 1\n            if question_number > len(prices):\n                break\n    max_points = points_a + points_b\n\n    return str(max_points)\n"
    },
    {
        "number": 346,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, *a = map(int, stdin.split())\n    a.sort(reverse=True)\n    a.sort(reverse=True)\n    b = list(map(int, stdin.split()))\n\n    max_points = 0\n    max_points_id = 0\n    for i in range(n):\n        if i == 0:\n            max_points = a[i]\n        elif i == 1:\n            max_points = a[i] + max_points\n        else:\n            max_points = max(max_points, a[i])\n        if i in b:\n            points = max_points * (2 ** b.index(i))\n            if points > max_points:\n                max_points = points\n        else:\n            points = max_points\n\n    return str(points)\n"
    },
    {
        "number": 346,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    a = a + a\n    b = b + b\n    a.sort()\n    b.sort()\n    points = 0\n    for i in range(n):\n        if i < m:\n            points += a[i] * b[i]\n        else:\n            points += a[i]\n    return str(points)\n\nprint(solution(input()))"
    },
    {
        "number": 346,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, *a = list(map(int, stdin.split()))\n    dic = {i:[] for i in range(1,n+1)}\n    for i in range(m):\n        dic[a[i]].append(i+1)\n    #print(dic)\n    cnt = 0\n    best = 0\n    #print(dic)\n    while cnt < n and dic:\n        cur = max(dic)\n        if cur not in dic:\n            return '%d' %(best)\n        #print(dic)\n        del dic[cur]\n        for ele in dic:\n            if a[dic[ele][0]-1] < a[cur-1]:\n                dic[ele].append(dic[ele].pop(0))\n            else:\n                dic[ele].insert(0, dic[ele].pop(0))\n        cnt += 1\n        best += a[cur-1]\n    return '%d' %(best)\n"
    },
    {
        "number": 346,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    prices = list(map(int, stdin.split()))\n    assert m + n == len(prices)\n    b = list(map(int, stdin.split()))\n    points = [0 for _ in range(n)]\n    for i, p in enumerate(prices):\n        if i == 0:\n            continue\n        points[i] = max(points[i - 1], p)\n    if n == 1:\n        return sum(points)\n    best_points = 0\n    for i in range(n):\n        if b[i] == 1:\n            points[i] = min(points[i], prices[i] + points[i - 1])\n            best_points += points[i]\n    return best_points"
    },
    {
        "number": 347,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m1, m2, m3, m4, m5, w1, w2, w3, w4, w5, h1, h2 = map(int, stdin.split())\n    return str(h1 + (h2 * (1 - (m1 / 250))) - ((m2 + w2) * (1 - ((m1 + w1) / 250)) - ((m3 + w3) * (1 - ((m2 + w2) / 250)) - ((m4 + w4) * (1 - ((m3 + w3) / 250)) - ((m5 + w5) * (1 - ((m4 + w4) / 250))))))\n\nsolution(\"20 40 60 80 100\\n0 0 0 0 0\\n10 0\")"
    },
    {
        "number": 347,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    m, w, hs, hu = map(int, stdin.split())\n    total_hs = hs * 10 - 50\n    total_hu = hu * 10 - 50\n    total_m = sum(i - 50 for i in range(0, 119) if i not in hs)\n    total_w = sum(i - 50 for i in range(0, 119) if i not in hu)\n    final_score = (\n        int((0.3 * total_m + (1 - (total_m / 250)) * total_w) / (total_hs + total_w))\n        + total_hs\n    )\n    return str(final_score + total_hu + 100)\n\n\ndef"
    },
    {
        "number": 347,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    ms, ws, hs, hsu = stdin.split()\n    ms = map(int, ms.split())\n    ws = map(int, ws.split())\n    hs = map(int, hs.split())\n    hsu = map(int, hsu.split())\n    max_point = int(hs[0])\n    total_score = 0\n    for i in range(len(ms)):\n        if ms[i] == 0:\n            if ws[i] == 0:\n                max_point = max(max_point, int(hs[i]))\n            else:\n                max_point = max(max_point, int(hs[i]) + (1 - ws[i]/250))\n        else:\n            max_point = max(max_point, int(hs[i]) - ws[i])\n        total_score += max_point\n    print(int(total_score + (total_score*0.01)))\n    return int(total_score + (total_score*0.01))\n"
    },
    {
        "number": 347,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    m1, m2, m3, m4, m5 = map(int, stdin.strip().split())\n    w1, w2, w3, w4, w5 = map(int, stdin.strip().split())\n    h1, h2 = map(int, stdin.strip().split())\n    \n    score = sum([max(0.3*x, (1-i/250)*x-50*w) for i, x, w in zip([m1, m2, m3, m4, m5],\n                                                              [500, 1000, 1500, 2000, 2500],\n                                                              [w1, w2, w3, w4, w5])])\n    score += 100*h1+50*h2\n    \n    return str(int(score))\n"
    },
    {
        "number": 347,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    m1, m2, m3, m4, m5 = map(int, stdin.split())\n    w1, w2, w3, w4, w5 = map(int, stdin.split())\n    h1, h2 = stdin.split()\n    h1, h2 = int(h1), int(h2)\n    w = (w1 + w2 + w3 + w4 + w5) * (h1 + h2)\n    n1 = (m1 + w1) / 250\n    n2 = (m2 + w2) / 250\n    n3 = (m3 + w3) / 250\n    n4 = (m4 + w4) / 250\n    n5 = (m5 + w5) / 250\n    n = (n1 + n2 + n3 + n4 + n5) * (w - h1)\n    return str(int(n))"
    },
    {
        "number": 347,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    m = list(map(int, stdin.split()))\n    w = list(map(int, stdin.split()))\n    h_s, h_u = list(map(int, stdin.split()))\n    score = 0\n    for i in range(5):\n        max_points = max(m[i], 2500)\n        if m[i] == max_points:\n            score += (h_s - w[i]) * 500\n        else:\n            score += ((h_s - w[i]) * max_points - 50 * m[i]) * 500\n        if i > 0:\n            score += ((h_u - w[i - 1]) * max_points - 50 * m[i]) * 500\n    return str(score)\n\nprint(solution(\"20 40 60 80 100 0 1 2 3 4 1 0\"))\nprint(solution(\"119 119 119 119 119 0 0 0 0 0 10 0\"))"
    },
    {
        "number": 347,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(sum([500 if a == 0 else (1 - (a/250))*(500 + 1000 + 1500 + 2000 + 2500) for a, w in zip(*[iter(map(int, stdin.split()))]*2)])))\n"
    },
    {
        "number": 347,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    m, w, h_s, h_u = map(int, stdin.split())\n    total_score = (h_s * 5000 + h_u * 50 - m * 0.3) * max(0, 1 - (m / 250))\n    total_score += max(0, (h_s - w) * 100 - (h_u - w) * 50)\n    return int(total_score)"
    },
    {
        "number": 347,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    m1, m2, m3, m4, m5 = map(int, stdin.split())\n    w1, w2, w3, w4, w5 = map(int, stdin.split())\n    h1, h2 = map(int, stdin.split())\n    s = m1 * 500 + m2 * 1000 + m3 * 1500 + m4 * 2000 + m5 * 2500\n    r = (1 - (h1 + h2) / 250) * s\n    b = (1 - (w1 + w2 + w3 + w4 + w5) / 50) * s\n    return int(r + b)\n\ndef"
    },
    {
        "number": 347,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin_arr = stdin.split(\"\\n\")\n    return str(int(round((((float(stdin_arr[0]) * 0.3) + ((1 - float(stdin_arr[1]) / 250) * 0.3) - 50) + ((1 - float(stdin_arr[3]) / 250) * 100)) / 250 * 500) + ((1 - float(stdin_arr[2]) / 250) * 500) + (1000 + ((1 - float(stdin_arr[4]) / 250) * 100) + (float(stdin_arr[5]) * 100)) + (100 + (1 - float(stdin_arr[6]) / 250) * 100))))"
    },
    {
        "number": 348,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, l, r = map(int, stdin.split())\n    l = min(l, r)\n    r = max(l, r)\n    if n*m <= 2:\n        return 0\n    elif n*m <= 3:\n        if l == 1 and r == n:\n            return 1\n        elif l == 1 and r == m:\n            return 2\n        elif l == m and r == 1:\n            return 2\n        elif l == m and r == n:\n            return 1\n        elif l == 1 and r == 1:\n            return 2\n        elif l == 2 and r == m:\n            return 1\n        elif l == 2 and r == n:\n            return 2\n        elif l == 2 and r == 2:\n            return 1\n        elif l == n and r == 1:\n            return 2\n        elif l == n and r == m:\n            return 1\n        elif l == m and r == 2:\n            return 1\n    else:\n        count = 0\n        for i in range(n):\n            for j in range(m):\n                if i*j == n and i*m == n:\n                    count += 1\n                elif (i-1)*(j-1) == n and (i-1)*(j-2) == n:\n                    count += 1\n                elif (i-1)*(j-1) == m and (i-2)*(j-1) == m:\n                    count += 1\n                elif (i-2)*(j-1) == m and (i-1)*(j-2) == m:\n                    count += 1\n                elif i*j == n and i*m == m:\n                    count += 1\n                elif (i-1)*(j-1) == n and (i-2)*(j-1) == n:\n                    count += 1\n                elif (i-2)*(j-1) == m and (i-1)*(j-2) == m:\n                    count += 1\n                elif (i-2)*(j-1) == n and (i-1)*(j-2) == m:\n                    count += 1\n        return count % 998244353\n"
    },
    {
        "number": 348,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, l, r = map(int, stdin.split())\n    return str(m * (l // m) * (r // m))\nprint(solution(input()))\n"
    },
    {
        "number": 348,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, l, r = map(int, stdin.split())\n    # If we don't have the same number of cubes in any adjacent cell, we would be able to get the same height, so we can't do it\n    if l + m <= 2 * n + 1:\n        return 0\n    # Otherwise, we can do the first or second stack operation\n    # If we want to do the first stack operation, we can find how many cubes are in adjacent cells and check the condition\n    # If we want to do the second stack operation, we can just use a 2D matrix to store the number of cubes\n    if l < r:\n        return (r - l) * (m - n)\n    else:\n        return (r - l) * (n - m)\n"
    },
    {
        "number": 348,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, l, r = map(int, stdin.split())\n    ans = 0\n    if r > l:\n        ans += 1\n        r = l + 1\n    for a in range(l, r):\n        if (a + 2) * (a + 1) > m * n:\n            return str(ans)\n        elif n * a >= m and (a + 2) * (a + 1) == m * n:\n            return str(ans)\n        elif n * (a + 1) >= m and n * a == m:\n            return str(ans)\n        ans += 1\n\nsolution(input())"
    },
    {
        "number": 348,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    I used the below code to solve it :\n    '''\n    n,m,l,r = map(int, stdin.split())\n    ans = float('inf')\n    for i in range(l,r):\n        for j in range(l,r):\n            if i==j:\n                continue\n            cube_left = i\n            cube_right = i\n            cube_up = j\n            cube_down = j\n            while cube_down < n and cube_left < m and cube_right < m:\n                cube_left += 1\n                cube_right += 1\n                cube_down += 1\n                cube_up -= 1\n                if cube_left >= m or cube_up >= n:\n                    break\n                if cube_left == cube_right and cube_left == cube_up:\n                    ans = min(ans, cube_left)\n                elif cube_left > cube_right and cube_left > cube_up:\n                    cube_left -= 1\n                elif cube_right < cube_left and cube_right < cube_up:\n                    cube_right += 1\n                elif cube_right > cube_left and cube_right > cube_up:\n                    cube_right -= 1\n                elif cube_up < cube_left and cube_up < cube_right:\n                    cube_up += 1\n                elif cube_up > cube_left and cube_up > cube_right:\n                    cube_up -= 1\n    return str(ans % 1000000007)\n\n\ndef"
    },
    {
        "number": 348,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, l, r = map(int, stdin.split())\n    return str(max((n + m + 2) // 2, n + m - l + r) % 998244353)\n"
    },
    {
        "number": 348,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('''\n   ... 2 2 1 1\n   ... ''')\n    '1'\n    >>> solution('''\n   ... 1 2 1 2\n   ... ''')\n    '2'\n    '''\n    def check(start):\n        for r in range(1, n+1):\n            if not any(abs(a[r][c] - a[r-1][c]) > 1 for c in range(1, m+1)):\n                continue\n            if any(a[r][c] < a[r-1][c] for c in range(1, m+1)):\n                return False\n        for c in range(1, m+1):\n            if not any(abs(a[r][c] - a[r][c-1]) > 1 for r in range(1, n+1)):\n                continue\n            if any(a[r][c] < a[r][c-1] for r in range(1, n+1)):\n                return False\n        return True\n\n    n, m, l, r = map(int, stdin.split())\n    a = [[0 for _ in range(m + 1)] for _ in range(n + 1)]\n    for _ in range(l):\n        a[n][m] += 1\n        if n > 1:\n            a[n - 1][m] += 1\n        if n > 2:\n            a[n - 2][m] += 1\n    for _ in range(r):\n        a[n][m] += 2\n        if n > 1:\n            a[n - 1][m] += 2\n        if n > 2:\n            a[n - 2][m] += 2\n    if check(a):\n        return str(n * m)\n    else:\n        for _ in range(m):\n            a = list(map(lambda x: x.copy(), a))\n            for i in range(1, n+1):\n                a[i][0] = a[i][-1] = a[i-1][-1] = a[i-1][0] = 1\n                if i > 1:\n                    a[i][1] = a[i-1][1] = a[i-1][-1] = a[i-2][-1] = a[i-2][1] = a[i-2][0] = 2\n            if check(a):\n                return str(n * m)\n        return 'IMPOSSIBLE'\n"
    },
    {
        "number": 348,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, l, r = map(int, stdin.split())\n    return str(min(abs(l-r), n*m-(l+r)-1)//(n+m) - 1)\n"
    },
    {
        "number": 348,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, l, r = map(int, stdin.split())\n    return str((m - l) * (r - n + 1) // (n - l) + (r - m) // (m - l))\n"
    },
    {
        "number": 348,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, l, r = map(int, stdin.split())\n    # find the number of tiles required to reach the goal\n    dp = [[float('inf') for _ in range(m+1)] for _ in range(n+1)]\n    dp[1][1] = 0\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if i == 1:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = dp[i-1][j] + dp[i][j-1]\n    print(dp[n][m])\n    return"
    },
    {
        "number": 349,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    A = [[int(i) for i in stdin.split()] for _ in range(n)]\n    B = [[int(i) for i in stdin.split()] for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if A[i][j] > B[i][j]:\n                return \"Impossible\"\n            elif A[i][j] < B[i][j]:\n                return \"Possible\"\n            elif A[i][j] == B[i][j]:\n                continue\n            else:\n                A[i][j], B[i][j] = B[i][j], A[i][j]\n    return \"Possible\"\n\nsolution(\"1 2 3\\n4 5 6\\n7 8 9\")\n"
    },
    {
        "number": 349,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    a = sorted(a)\n    b = sorted(b)\n    if a == b:\n        return \"Impossible\"\n    return \"Possible\"\nsolution(input())\n\n'''\n\ndef"
    },
    {
        "number": 349,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('''\n   ... 2 2\n   ... 2 10\n   ... 11 5\n   ... 9 4\n   ... 3 12\n   ... ''')\n    'Impossible'\n    >>> solution('''\n   ... 2 3\n   ... 2 4\n   ... 5 10\n   ... 3 1\n   ... 3 6\n   ... 4 8\n   ... ''')\n    'Possible'\n    '''\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    if m == 1:\n        if a[0] < a[1]:\n            return 'Possible'\n        return 'Impossible'\n    if n == 1:\n        if b[0] < b[1]:\n            return 'Possible'\n        return 'Impossible'\n\n    dp = [['impossible'] * m for _ in range(n)]\n    for i in range(n):\n        dp[i][0] = a[i]\n    for i in range(m):\n        dp[0][i] = b[i]\n\n    for i in range(1, n):\n        for j in range(1, m):\n            if dp[i - 1][j - 1] < 'impossible':\n                dp[i][j] = 'impossible'\n                continue\n            if a[i] < b[j]:\n                dp[i][j] = dp[i - 1][j] + a[i]\n            elif a[i] > b[j]:\n                dp[i][j] = dp[i - 1][j] + b[j]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return dp[-1][-1]\n"
    },
    {
        "number": 349,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    a = list(map(int, stdin.strip().split()))\n    b = list(map(int, stdin.strip().split()))\n    # We need to swap two elements.\n    res = 0\n    while True:\n        i = 0\n        j = m - 1\n        for _ in range(n):\n            if a[i] < a[j]:\n                i += 1\n            elif a[i] > a[j]:\n                j -= 1\n        # No need to swap.\n        if i == m - 1:\n            break\n        res += 1\n        a[i], a[j] = a[j], a[i]\n        b[i], b[j] = b[j], b[i]\n    return \"Possible\" if res == 0 else \"Impossible\"\n"
    },
    {
        "number": 349,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    matrix1 = list(map(int, stdin.split()))\n    matrix2 = list(map(int, stdin.split()))\n    res = \"Impossible\"\n    if n == m and max(matrix1) <= max(matrix2):\n        res = \"Possible\"\n    return res\n"
    },
    {
        "number": 349,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    possible = True\n    for i in range(n):\n        for j in range(m):\n            a_i_value = a[i * m + j]\n            b_i_value = b[i * m + j]\n            if a_i_value < b_i_value:\n                possible = False\n                break\n        if not possible:\n            break\n    if possible:\n        return \"Possible\"\n    return \"Impossible\""
    },
    {
        "number": 349,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    if n < 2 or m < 2:\n        return 'Impossible'\n    \n    for i in range(1, n):\n        if a[i-1] < a[i]:\n            return 'Impossible'\n        if b[i-1] < b[i]:\n            return 'Impossible'\n    \n    for i in range(1, n):\n        for j in range(1, m):\n            if a[i-1] == a[i] and b[i-1] == b[i]:\n                return 'Impossible'\n    \n    return 'Possible'\n\nsolution(input())"
    },
    {
        "number": 349,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    b = [int(x) for x in stdin.split()]\n    a = [x for x in a if x > 0]\n    b = [x for x in b if x > 0]\n    if len(a)!= n or len(b)!= n or len(a)!= m or len(b)!= m:\n        return 'Impossible'\n    else:\n        return 'Possible'\n\nsolution(\"2 2\")\nsolution(\"2 3\")\nsolution(\"3 2\")\nsolution(\"3 3\")\n\n\"\"\"\n"
    },
    {
        "number": 349,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    A = []\n    for i in range(n):\n        A.append(list(map(int, stdin.split())))\n    B = []\n    for i in range(n):\n        B.append(list(map(int, stdin.split())))\n\n    # check if two matrices are the same if A[i][j] == B[i][j]\n    for i in range(n):\n        for j in range(m):\n            if A[i][j]!= B[i][j]:\n                return \"Impossible\"\n    # check if the first row of A is strictly increasing\n    for i in range(m):\n        if A[0][i] > A[0][i-1]:\n            return \"Impossible\"\n    # check if the first column of A is strictly increasing\n    for i in range(n):\n        if A[i][0] > A[i-1][0]:\n            return \"Impossible\"\n    # check if the first row and first column are always increasing\n    for i in range(m):\n        for j in range(n):\n            if A[j][i] > A[j-1][i] or A[j][i] > A[j][i-1]:\n                return \"Impossible\"\n    # check if the rows are strictly increasing\n    for i in range(n):\n        if A[i] == A[i-1]:\n            return \"Impossible\"\n    # check if the columns are strictly increasing\n    for i in range(n):\n        if A[i] == A[i-1]:\n            return \"Impossible\"\n\n    return \"Possible\""
    },
    {
        "number": 349,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    matrix = [a, b]\n    for i in range(n):\n        a = matrix[0]\n        for j in range(m):\n            if a[i] < a[i+1]:\n                return 'Impossible'\n            elif a[i] > a[i+1]:\n                return 'Possible'\n            elif a[i] == a[i+1]:\n                return 'Impossible'\n    return 'Possible'"
    },
    {
        "number": 350,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\n'''\n"
    },
    {
        "number": 350,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 350,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n'''\ndef"
    },
    {
        "number": 350,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = stdin\n    a = list(map(int, a.split()))\n    x = n\n    for i in range(n):\n        if (x <= a[i]):\n            x = a[i]\n            break\n    s = (n) * ((n+1)//2)\n    for i in range(1,x):\n        a = (n) * ((n+1)//2)\n    s = (n) * ((n+1)//2)\n    print(s)"
    },
    {
        "number": 350,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n'''\n"
    },
    {
        "number": 350,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2\n   ... 2 5 5\n   ... ''')\n    11\n    >>> solution('''3\n   ... 1 1 2\n   ... ''')\n    3\n    \"\"\"\n    cnt_max = 0\n    cnt_min = 0\n    max_len = 0\n    letters = list(map(int, stdin.split()))\n    letters.sort(reverse=True)\n    for i in letters:\n        if cnt_max < i:\n            cnt_max = i\n        if cnt_min >= i:\n            cnt_min += i\n        if cnt_min < i:\n            cnt_min = i\n        if cnt_max <= cnt_min:\n            break\n    return cnt_max + cnt_min\n"
    },
    {
        "number": 350,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = stdin.split()\n    n = int(n)\n    a = tuple(int(x) for x in a)\n    a = tuple(sorted(set(a)))\n    a = tuple(reversed(a))\n    a = (10**9) * a\n    return sum(i for i in a)\n"
    },
    {
        "number": 350,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = stdin.split()\n    i = 0\n    max_len = 0\n    cnt = Counter()\n    # print(a)\n    for i in range(n):\n        cnt[a[i]] += 1\n\n    for i in range(len(cnt)):\n        if cnt[i] >= a[i]:\n            max_len = max(max_len, i + 1)\n        else:\n            return \"impossible\"\n    # print(max_len)\n    return max_len\n"
    },
    {
        "number": 350,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    from collections import Counter\n    stdin = stdin.split()\n    n = int(stdin[0])\n    a = stdin[1]\n    res = 0\n    \n    for i in range(n):\n        if(a.count(a[i]) < int(a[i])):\n            return 0\n        \n    return max(len(a), res)\n\nprint(solution(input()))\n"
    },
    {
        "number": 350,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n'''\n\n\n\n'''\nWrite an efficient algorithm for the following assumptions:\n\nn is an integer within the range [1..100,000];\neach element in the array is an integer within the range [1..10,000,000];\neach element of the array is distinct;\nthe elements of the array are sorted in non-decreasing order.\n'''\n\nimport sys"
    },
    {
        "number": 351,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    difficulties = list(map(int, stdin.split()))\n    judge = sorted(difficulties)\n    solutions = 0\n    for j in judge:\n        if j <= k:\n            solutions += 1\n    return str(solutions)\n"
    },
    {
        "number": 351,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split()]\n    a = sorted([int(i) for i in stdin.split()])\n    res = 0\n    while len(a) > 0:\n        if a[0] >= k:\n            res += 1\n            break\n        if a[0] < k // 2:\n            a.pop(0)\n        else:\n            res += 1\n            k -= a[0]\n            a.pop(0)\n    return str(res)"
    },
    {
        "number": 351,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    k, n = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    problem_solved = set(range(1, k + 1))\n    m = min(map(lambda x: x // 2, a))\n    while m <= k:\n        problem_solved = problem_solved.intersection(range(m, k + 1))\n        m = max(map(lambda x: x // 2, a))\n    return str(len(problem_solved))\n"
    },
    {
        "number": 351,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    res = 0\n    if n == k:\n        for i in range(k):\n            if a[i] % 2!= 0:\n                res += 1\n    else:\n        for i in range(k):\n            if a[i] % 2!= 0:\n                if res <= a[i] // 2 + 1:\n                    res = a[i] // 2 + 1\n    return str(res)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 351,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(min(k, sum([a // 2 if a <= k else 0 for a in list(map(int, stdin.split()))])))\n\nsolution(input())\n"
    },
    {
        "number": 351,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = sorted(map(int, stdin.split()))\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    dp[0][1] = 1\n    for i in range(n):\n        for j in range(k, 0, -1):\n            if j >= a[i]:\n                dp[i + 1][j] = max(dp[i][j], dp[i][j - a[i]] + dp[i][j - a[i] + 1])\n            else:\n                dp[i + 1][j] = dp[i][j]\n    return dp[-1][-1]\n\n\n\nsolution(\"3 3\")\nsolution(\"10 3 6 3\")\nsolution(\"10 4 1 1\")\nsolution(\"12 10 2 4 5 5 6 7\")\n"
    },
    {
        "number": 351,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    min_prob = min(a)\n    prob = [min_prob] * n\n    for i in range(min_prob, k):\n        for j in range(i, k):\n            if a[j] % 2 == 1 and a[j]!= i:\n                prob[i] = j\n                break\n\n    min_diff = min(prob)\n    return str(prob.index(min_diff) + 1)\n\n\nprint(solution(input()))\n'''\n\n\n'''\nint main() {\n    int n, k;\n    scanf(\"%d %d\", &n, &k);\n    vector<int> a;\n    scanf(\"%d\", &a[0]);\n    int min_prob, max_prob, prob_diff;\n    min_prob = max_prob = a[0];\n    for (int i = 1; i < n; i++) {\n        min_prob = min(min_prob, a[i]);\n        max_prob = max(max_prob, a[i]);\n    }\n    int min_diff;\n    min_diff = max_prob / 2;\n    while (min_diff >= min_prob) {\n        for (int i = 1; i < n; i++) {\n            if (a[i] % 2 == 1) {\n                if (a[i] < min_diff) {\n                    min_diff = a[i];\n                }\n            }\n        }\n        min_diff /= 2;\n    }\n    for (int i = 0; i < n; i++) {\n        if (a[i] % 2 == 1) {\n            if (a[i] < min_prob) {\n                min_prob = a[i];\n            }\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        if (a[i] % 2 == 1) {\n            if (a[i]!= min_prob) {\n                prob_diff = a[i] - min_prob;\n            }\n        }\n    }\n    int min_prob, max_prob, prob_diff;\n    min_prob = max_prob = a[0];\n    for (int i = 1; i < n; i++) {\n        min_prob = min(min_prob, a[i]);\n        max_prob = max(max_prob, a[i]);\n    }\n    int min_diff;\n    min_diff = max_prob / 2;\n    while (min_diff >= min_prob) {\n        for (int i = 1; i < n; i++) {\n            if (a[i] % 2 == 1) {\n                if (a[i] < min_diff) {\n                    min_diff = a[i];\n                }\n            }\n        }\n        min_diff /= 2;\n    }\n    for (int i = 0; i < n; i++) {\n        if (a[i] % 2 == 1) {\n            if (a[i] < min_prob) {\n                min_prob = a[i];\n            }\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        if (a[i] % 2 == 1) {\n            if (a[i]!= min_prob) {\n                prob_diff = a[i] - min_prob;\n            }\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        if (a[i] % 2 == 1) {\n            if (a[i]!= min_prob) {\n                max_prob = a[i];\n            }\n        }\n    }\n    int min_prob, max_prob, prob_diff;\n    min_prob = max_prob = a[0];\n    for (int i = 1; i < n; i++) {\n        min_prob = min(min_prob, a[i]);\n        max_prob = max(max_prob, a[i]);\n    }\n    int min_diff;\n    min_diff = max_prob / 2;\n    while (min_diff >= min_prob) {\n        for (int i = 1; i < n; i++) {\n            if (a[i] % 2 == 1) {\n                if (a[i] < min_diff) {\n                    min_diff = a[i];\n                }\n            }\n        }\n        min_diff /= 2;\n    }\n    for (int i = 0; i < n; i++) {\n        if (a[i] % 2 == 1) {\n            if (a[i] < min_prob) {\n                min_prob = a[i];\n            }\n        }\n    }\n    for (int i = 0; i < n; i++) {\n        if (a[i] % 2 == 1) {\n            if (a[i]!= min_prob) {\n                prob_diff = a[i] - min_prob;\n            }\n        }\n    }\n    int min_prob, max_prob, prob_diff;\n    min_prob = max_prob = a[0];\n    for (int i = 1; i < n; i++) {\n        min_prob = min(min_prob, a[i]);\n        max_prob = max(max_prob, a[i]);\n    }\n    int min_diff;\n    min_diff = max_prob / 2;\n    while (min_diff >= min_prob) {\n        for (int i = 1; i < n; i++) {\n            if (a[i] % 2 == 1) {\n                if (a[i] < min_diff) {\n                    min_diff = a[i];\n                }\n            }\n        }\n        min_diff /= 2;\n    }\n    for (int i = 0; i < n; i++) {\n        if (a[i] % 2 == 1) {"
    },
    {
        "number": 351,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    problems = sorted(map(int, stdin.split()))\n    judges = [i for i in range(1, n+1) if i not in [j for j in range(1, n+1) if j % 2 == 1]]\n    problems_for_judge = {i: problems.count(i) for i in range(1, n+1)}\n    judge_with_minimum_difficulty = judges[0]\n    judges_with_difficulties = judges.copy()\n    while judge_with_minimum_difficulty > k:\n        judge_with_minimum_difficulty -= problems_for_judge.get(judge_with_minimum_difficulty, 0)\n        judges_with_difficulties.remove(judge_with_minimum_difficulty)\n    return str(len(judges_with_difficulties))\n    \n    "
    },
    {
        "number": 351,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n, k = map(int, stdin[0].split())\n    a = list(map(int, stdin[1].split()))\n    return str(min(map(lambda x: x - 1 if x >= k else x, a)))"
    },
    {
        "number": 351,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a_count = 0\n    ans = 0\n    for i in range(k):\n        if a[i] > a[i] // 2:\n            ans += (a[i] // 2)\n            a_count += (a[i] // 2)\n        else:\n            ans += a[i]\n        if ans > k:\n            break\n    return str(ans)\n\"\"\"\ndef"
    },
    {
        "number": 352,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    min_1 = int(stdin[1])\n    max_1 = int(stdin[2])\n    min_2 = int(stdin[3])\n    max_2 = int(stdin[4])\n    min_3 = int(stdin[5])\n    max_3 = int(stdin[6])\n\n    count_1 = 0\n    count_2 = 0\n    count_3 = 0\n\n    for i in range(n):\n        if i < min_1:\n            count_1 += 1\n        elif i < min_2:\n            count_2 += 1\n        elif i < min_3:\n            count_3 += 1\n\n    best_first_option = count_1\n\n    for i in range(n - min_1):\n        if count_2 + count_3 < best_first_option:\n            count_1 += 1\n            count_2 = 0\n            count_3 = 0\n            best_first_option = count_1\n            best_second_option = count_2\n\n        elif count_2 + count_3 == best_first_option:\n            count_2 += 1\n            count_3 = 0\n            best_second_option = count_2\n            best_third_option = count_3\n\n        elif count_2 + count_3 > best_first_option:\n            break\n\n    best_third_option += count_3\n\n    print(best_first_option, best_second_option, best_third_option)\n"
    },
    {
        "number": 352,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    max_1 = 1\n    min_1 = 1\n    max_2 = 1\n    min_2 = 1\n    max_3 = 1\n    min_3 = 1\n    if n % 3 == 0:\n        max_1 = n // 3\n        max_2 = 2\n        max_3 = 3\n    elif n % 3 == 1:\n        max_1 = (n - 1) // 3\n        max_2 = 2\n        max_3 = 3\n    elif n % 3 == 2:\n        max_1 = (n - 2) // 3\n        max_2 = 2\n        max_3 = 3\n    diploma_1 = 0\n    diploma_2 = 0\n    diploma_3 = 0\n    for i in range(n):\n        if i < max_1:\n            diploma_1 += 1\n        if i < max_2:\n            diploma_2 += 1\n        if i < max_3:\n            diploma_3 += 1\n    if max_1 <= max_2 and max_1 <= max_3:\n        if max_2 <= max_3:\n            max_3 = max_2\n        diploma_2 = max_1\n        diploma_3 = max_3\n    elif max_2 <= max_1 and max_2 <= max_3:\n        if max_1 <= max_3:\n            max_1 = max_3\n        diploma_1 = max_2\n        diploma_3 = max_1\n    elif max_3 <= max_1 and max_3 <= max_2:\n        diploma_1 = max_3\n        diploma_2 = max_1\n    if n % 3 == 0:\n        diploma_3 = 0\n    return str(diploma_1) + \" \" + str(diploma_2) + \" \" + str(diploma_3)"
    },
    {
        "number": 352,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin_ = stdin.splitlines()\n    lines = stdin_.pop(0)\n    lines = lines.split()\n    n = int(lines[0])\n    min_1, max_1 = int(lines[1]), int(lines[2])\n    min_2, max_2 = int(lines[3]), int(lines[4])\n    min_3, max_3 = int(lines[5]), int(lines[6])\n    line = stdin_[0]\n    line = line.split()\n    line = line[2:]\n    line = [int(x) for x in line]\n    line_1 = line[:min_1]\n    line_2 = line[min_1:min_1 + min_2]\n    line_3 = line[min_1 + min_2:min_1 + min_2 + min_3]\n    line_4 = line[min_1 + min_2 + min_3:]\n    line_1_max = max(line_1)\n    line_2_max = max(line_2)\n    line_3_max = max(line_3)\n    line_4_max = max(line_4)\n    line_1_min = min(line_1)\n    line_2_min = min(line_2)\n    line_3_min = min(line_3)\n    line_4_min = min(line_4)\n    if (line_1_min <= min_1 <= line_1_max) and (line_2_min <= min_2 <= line_2_max) and (line_3_min <= min_3 <= line_3_max):\n        count_1 = line_1.count(min_1)\n        count_2 = line_2.count(min_2)\n        count_3 = line_3.count(min_3)\n        if count_1 == count_2 and count_2 == count_3:\n            return str(count_1) +'' + str(count_2) +'' + str(count_3)\n        if count_1 == count_2:\n            count_3 = line_3.count(min_3)\n            if count_3 == count_2:\n                return str(count_1) +'' + str(count_2) +'' + str(count_3)\n            if count_3 > count_2:\n                return str(count_1) +'' + str(count_2) +'' + str(count_3)\n            if count_3 < count_2:\n                return str(count_1) +'' + str(count_2) +'' + str(count_3)\n        if count_1 == count_3:\n            count_2 = line_2.count(min_2)\n            if count_2 == count_3:\n                return str(count_1) +'' + str(count_2) +'' + str(count_3)\n            if count_2 > count_3:\n                return str(count_1) +'' + str(count_2) +'' + str(count_3)\n            if count_2 < count_3:\n                return str(count_1) +'' + str(count_2) +'' + str(count_3)\n        if count_2 == count_3:\n            count_1 = line_1.count(min_1)\n            if count_1 == count_3:\n                return str(count_1) +'' + str(count_2) +'' + str(count_3)\n            if count_1 > count_3:\n                return str(count_1) +'' + str(count_2) +'' + str(count_3)\n            if count_1 < count_3:\n                return str(count_1) +'' + str(count_2) +'' + str(count_3)\n    if (line_1_min <= min_1 <= line_1_max) and (line_2_min <= min_2 <= line_2_max) and (line_3_min <= min_3 <= line_3_max):\n        count_1 = line_1.count(min_1)\n        count_2 = line_2.count(min_2)\n        count_3 = line_3.count(min_3)\n        if count_1 == count_2 and count_2 == count_3:\n            return str(count_1) +'' + str(count_2) +'' + str(count_3)\n        if count_1 == count_2:\n            count_3 = line_3.count(min_3)\n            if count_3 == count_2:\n                return str(count_1) +'' + str(count_2) +'' + str(count_3)\n            if count_3 == count_1:\n                return str(count_1) +'' + str(count_2) +'' + str(count_3)\n            if count_3 > count_2:\n                return str(count_1) +'' + str(count_2) +'' + str(count_3)\n            if count_3 < count_2:\n                return str(count_1) +'' + str(count_2)"
    },
    {
        "number": 352,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    min_1 = int(stdin[1])\n    max_1 = int(stdin[2])\n    min_2 = int(stdin[3])\n    max_2 = int(stdin[4])\n    min_3 = int(stdin[5])\n    max_3 = int(stdin[6])\n    result_1 = []\n    result_2 = []\n    result_3 = []\n    for i in range(n):\n        if i <= min_1:\n            result_1.append(i)\n        elif i <= min_2:\n            result_2.append(i)\n        elif i <= min_3:\n            result_3.append(i)\n    print(len(result_1), len(result_2), len(result_3))\n    # return \" \".join([str(i) for i in result])\n"
    },
    {
        "number": 352,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    min_1 = int(stdin.split()[1])\n    max_1 = int(stdin.split()[2])\n    min_2 = int(stdin.split()[3])\n    max_2 = int(stdin.split()[4])\n    min_3 = int(stdin.split()[5])\n    max_3 = int(stdin.split()[6])\n    \n    def choose_candidates(value, candidates):\n        for i in range(len(candidates)):\n            if value >= candidates[i]:\n                return i\n        return len(candidates)\n    \n    def choose_max_candidates(value, candidates):\n        candidates = sorted(candidates, key=lambda x: x[0])\n        i = 0\n        while i < len(candidates):\n            if value <= candidates[i][0]:\n                return candidates[i]\n            i += 1\n        return candidates[i]\n    \n    def maximize_value(value, candidates):\n        max_index = choose_candidates(value, candidates)\n        max_value = candidates[max_index]\n        candidates = candidates[:max_index] + candidates[max_index+1:]\n        i = 0\n        while i < len(candidates):\n            if candidates[i][0] >= max_value[0]:\n                return value + candidates[i][0]\n            i += 1\n        return value + max_value[0]\n    \n    candidates_1 = [(max_1 - min_1) + 1, 1]\n    candidates_2 = [(max_2 - min_2) + 1, 1]\n    candidates_3 = [(max_3 - min_3) + 1, 1]\n    \n    candidates = candidates_1 + candidates_2 + candidates_3\n    \n    best_option_value = maximize_value(0, candidates)\n    best_option_candidates = candidates\n    \n    candidates_1 = [(max_1 - min_1) + 1, 1]\n    candidates_2 = [(max_2 - min_2) + 1, 1]\n    candidates_3 = [(max_3 - min_3) + 1, 1]\n    candidates = candidates_1 + candidates_2 + candidates_3\n    \n    second_option_value = maximize_value(0, candidates)\n    second_option_candidates = candidates\n    \n    candidates_1 = [(max_1 - min_1) + 1, 1]\n    candidates_2 = [(max_2 - min_2) + 1, 1]\n    candidates_3 = [(max_3 - min_3) + 1, 1]\n    candidates = candidates_1 + candidates_2 + candidates_3\n    \n    third_option_value = maximize_value(0, candidates)\n    third_option_candidates = candidates\n    \n    max_value = max([best_option_value, second_option_value, third_option_value])\n    \n    print(best_option_candidates[0], second_option_candidates[0], third_option_candidates[0], max_value)\n    return max_value\n    \n"
    },
    {
        "number": 352,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 3\n   ... 1 5\n   ... 2 6\n   ... 3 7\n   ... ''')\n    '1 2 3'\n\n    >>> solution('''\n   ... 3\n   ... 1 2\n   ... 2 2\n   ... 2 2\n   ... ''')\n    '1 2 2'\n\n    \"\"\"\n    # \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u043c \u0441 \u0444\u0430\u0439\u043b\u0430\u043c\u0438\n    # \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0434\u043b\u044f \u0432\u044b\u0432\u043e\u0434\u0430 \u0432 \u043a\u043e\u043d\u0441\u043e\u043b\u044c\n    # \u0435\u0441\u043b\u0438 \u043f\u0440\u0438 \u0432\u044b\u0432\u043e\u0434\u0435 \u0432 \u043a\u043e\u043d\u0441\u043e\u043b\u044c \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u043e\u0448\u0438\u0431\u043a\u0430, \u0442\u043e \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u0435\u0451\n    # \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u0441 \u0444\u0430\u0439\u043b\u0430\u043c\u0438\n\n    input_data = stdin.splitlines()\n    # \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u0432\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n    # \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e \u0432\u044b\u0445\u043e\u0434\n    # \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u0435\u0449\u0451 \u0440\u0430\u0437 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e \u0432\u044b\u0445\u043e\u0434\n\n    # \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u043c \u0446\u0438\u043a\u043b\u0435 \u043f\u0440\u043e\u0439\u0434\u0435\u043c\u0441\u044f \u043f\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u043c \u0434\u0430\u043d\u043d\u044b\u043c\n    for n, min_1, max_1, min_2, max_2, min_3, max_3 in input_data:\n        # \u0438\u0437 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c \u0432\u0441\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\n        n, min_1, max_1, min_2, max_2, min_3, max_3 = int(n), int(min_1), int(max_1), int(min_2), int(max_2), int(min_3), int(max_3)\n\n        # \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b-\u0432\u043e \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0434\u0438\u043f\u043b\u043e\u043c\u0430\n        # \u043e\u043d\u0438 \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u044e\u0442\u0441\u044f \u043d\u0430\u0448\u0438\u043c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0441\u0445\u0435\u043c\u0435\n        diploma_1 = min_1\n        diploma_2 = min_1 + min_2\n        diploma_3 = min_1 + min_2 + min_3\n        # \u043f\u0440\u0438\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043a \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0443 \u0442\u0435\u043a\u0443\u0449\u0435\u0435 \u0447\u0438\u0441\u043b\u043e \u0434\u0438\u043f\u043b\u043e\u043c\u043e\u0432\n        n += 2\n        # \u043f\u0440\u0438\u0441\u0432\u0430\u0438\u0432\u0430\u0435\u043c \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442, \u043d\u0435 \u0432\u044b\u0445\u043e\u0434\u0438\u043c \u0432\u043d\u0430\u0447\u0430\u043b\u0435 \u043f\u0440\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0438 \u043d\u0443\u043b\u044f\n        if n == 0:\n            continue\n\n        # \u0435\u0441\u043b\u0438 \u0434\u0438\u043f\u043b\u043e\u043c\u044b \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e \u043d\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0442, \u0442\u043e \u0438\u0437\u043c\u0435\u043d\u044f\u0435\u043c \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\n        # \u0434\u043b\u044f \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u0434\u0438\u043f\u043b\u043e\u043c\u0430\n        if n!= 1:\n            if n >= diploma_2:\n                diploma_2 = n\n            if diploma_2 > max_2:\n                max_2 = diploma_2\n        # \u0434\u043b\u044f \u0442\u0440\u0435\u0442\u044c\u0435\u0433\u043e \u0434\u0438\u043f\u043b\u043e\u043c\u0430\n        if n!= 2:\n            if n >= diploma_3:\n                diploma_3 = n\n            if diploma_3 > max_3:\n                max_3 = diploma_3\n        # \u0434\u043b\u044f \u0447\u0435\u0442\u0432\u0435\u0440\u0442\u043e\u0433\u043e \u0434\u0438\u043f\u043b\u043e\u043c\u0430\n        if n!= 3:\n            if n >= diploma_1:\n                diploma_1 = n\n            if diploma_1 > max_1:\n                max_1 = diploma_1\n\n        # \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u044f\u0435\u043c \u0432 \u043f\u0435\u0440\u0432\u044b\u0439 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u0446\u0438\u043a\u043b \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438\n        # \u0444\u043e\u0440\u043c\u0438\u0440\u0443\u0435\u043c \u0432\u044b\u0445\u043e\u0434 \u0438\u0437 \u0446\u0438"
    },
    {
        "number": 352,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    min_1 = int(stdin.split()[1])\n    max_1 = int(stdin.split()[2])\n    min_2 = int(stdin.split()[3])\n    max_2 = int(stdin.split()[4])\n    min_3 = int(stdin.split()[5])\n    max_3 = int(stdin.split()[6])\n    return f'{max_1 - min_1} {max_2 - min_2} {max_3 - min_3}'\n"
    },
    {
        "number": 352,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return f\"{(1 + min(n - 1, 3))} {(1 + max(min(n - 1, 3), 2))} {(1 + max(min(n - 1, 3), 2))}\"\n"
    },
    {
        "number": 352,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # min_1, max_1 = int(input()), int(input())\n    # min_2, max_2 = int(input()), int(input())\n    # min_3, max_3 = int(input()), int(input())\n    min_1, max_1 = 1, 10\n    min_2, max_2 = 2, 6\n    min_3, max_3 = 3, 7\n    min_dipl = min(min_1, min_2, min_3)\n    max_dipl = max(max_1, max_2, max_3)\n    all_dipl = range(min_dipl, max_dipl + 1)\n    all_students = range(1, n + 1)\n    all_students_without_dipl = range(1, n + 1)\n    output = []\n    for dipl in all_dipl:\n        dipl_students = all_students_without_dipl.copy()\n        students_without_dipl = all_students_without_dipl.copy()\n        for student in students_without_dipl:\n            if student % dipl == 0:\n                dipl_students.remove(student)\n        for student in dipl_students:\n            if student % dipl!= 0:\n                students_without_dipl.remove(student)\n        output.append(len(students_without_dipl))\n    return \" \".join(str(x) for x in output)\n\n\nprint(solution(input()))\n\n\ndef"
    },
    {
        "number": 352,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    _, min_1, max_1 = stdin.split()\n    min_1 = int(min_1)\n    max_1 = int(max_1)\n    _, min_2, max_2 = stdin.split()\n    min_2 = int(min_2)\n    max_2 = int(max_2)\n    _, min_3, max_3 = stdin.split()\n    min_3 = int(min_3)\n    max_3 = int(max_3)\n\n    max_num = max(max_1, max_2, max_3)\n    count_1 = 0\n    count_2 = 0\n    count_3 = 0\n    while max_num > 0:\n        max_num -= max(max_1, max_2, max_3)\n        if max_1 > 0:\n            count_1 += 1\n            max_1 -= 1\n        if max_2 > 0:\n            count_2 += 1\n            max_2 -= 1\n        if max_3 > 0:\n            count_3 += 1\n            max_3 -= 1\n\n    return \"{} {} {}\".format(count_1, count_2, count_3)\n"
    },
    {
        "number": 353,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    up = down = False\n    for i in range(1, n):\n        if a[i] > a[i-1]:\n            up = True\n        elif a[i] < a[i-1]:\n            down = True\n        else:\n            up = down = False\n    if up and not down:\n        return \"UP\"\n    elif down and not up:\n        return \"DOWN\"\n    else:\n        return \"-\"\n"
    },
    {
        "number": 353,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a = (int(i) for i in stdin.split('\\n'))\n    a.insert(0, 0)\n    for i in range(1, n+1):\n        a[i] = sum(a[i-1:i+1])\n    if a[n+1] > 0:\n        return 'DOWN'\n    if a[n+1] < 0:\n        return 'UP'\n    return -1"
    },
    {
        "number": 353,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(n):\n        x = int(stdin.split()[i])\n        if x <= 30:\n            if (x+1) % 10!= 0:\n                print('UP')\n            else:\n                print('DOWN')\n        else:\n            print('-1')\n        return ''\n"
    },
    {
        "number": 353,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, c = list(map(int, stdin.split()))\n    d = n\n    if d <= 3:\n        return \"UP\"\n    i = 1\n    while d > 0:\n        d -= c\n        if d >= c:\n            return \"UP\"\n        c += 1\n        d = d + n\n        i += 1\n    return \"DOWN\" if i % 2 == 1 else \"UP\"\n"
    },
    {
        "number": 353,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    result = \"UP\"\n    visited = set()\n    visited.add(0)\n    last_day = -1\n    for day in range(1, n + 1):\n        if day in visited:\n            last_day = day\n            continue\n        visited.add(day)\n        if day % 30 == 0:\n            if last_day == 0:\n                if day < n:\n                    result = \"DOWN\"\n            else:\n                if day - last_day >= 1:\n                    result = \"UP\"\n        last_day = day\n    return result\n"
    },
    {
        "number": 353,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    days = stdin.split('\\n')[1:]\n    for i in range(n):\n        if days[i] == '':\n            days[i] = '0'\n    days = [int(i) for i in days]\n    # print(days)\n    h = len(days)\n    h_ = int(h / 2)\n    if h % 2 == 0:\n        p = int((h + 1) / 2)\n    else:\n        p = int(h / 2)\n\n    # print(p)\n    # print(days)\n    # print(h)\n    # print(h_)\n    # print(p)\n\n    s = 0\n    for i in range(h_, h):\n        s += days[i]\n    if s == 0:\n        if p == 2:\n            return 'UP'\n        else:\n            return 'DOWN'\n    else:\n        if p == 2:\n            return 'DOWN'\n        else:\n            return 'UP'\n\n\ndef"
    },
    {
        "number": 353,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    s: str = stdin.split(\"\\n\")[1]\n    for i in range(n):\n        if s[i+1] > s[i]:\n            return \"UP\"\n        elif s[i+1] < s[i]:\n            return \"DOWN\"\n    return \"-1\"\n"
    },
    {
        "number": 353,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, *data = stdin.split()\n    data = list(map(int, data))\n    \n    i = 0\n    while i < len(data):\n        if data[i] < data[i+1]:\n            return \"DOWN\"\n        i += 1\n    return \"UP\""
    },
    {
        "number": 353,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, *l = map(int, stdin.split())\n    if n <= 2:\n        return '-1'\n    # check which way the moon will go next\n    up = None\n    down = None\n    for i in range(1, n+1):\n        if l[i-1] > l[i]:\n            down = l[i-1]\n            if l[i] < l[i-1]:\n                up = l[i]\n        elif l[i-1] < l[i]:\n            up = l[i-1]\n            if l[i] > l[i-1]:\n                down = l[i]\n    if up is None:\n        return '-1'\n    if down is None:\n        return '-1'\n    if up > down:\n        return 'UP'\n    return 'DOWN'"
    },
    {
        "number": 353,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    l = list(map(int, stdin.split('\\n')))\n    n = l[0]\n    s = l[1:]\n    down = 0\n    up = 0\n    for i in range(len(s) - 1):\n        if (up and down):\n            break\n        if (down and up):\n            up = 0\n        if (down and not up):\n            down = 0\n        if (up and not down):\n            up = 0\n        if (down and down == i):\n            down += 1\n        if (up and up == i):\n            up += 1\n    if (down and down == i):\n        down += 1\n    if (up and up == i):\n        up += 1\n    if (down and down == i):\n        down += 1\n    if (up and up == i):\n        up += 1\n    if (down and down == i):\n        down += 1\n    if (up and up == i):\n        up += 1\n    if (down and down == i):\n        down += 1\n    if (up and up == i):\n        up += 1\n    if (down and down == i):\n        down += 1\n    if (up and up == i):\n        up += 1\n    if (down and down == i):\n        down += 1\n    if (up and up == i):\n        up += 1\n    if (down and down == i):\n        down += 1\n    if (up and up == i):\n        up += 1\n    if (down and down == i):\n        down += 1\n    if (up and up == i):\n        up += 1\n    if (down and down == i):\n        down += 1\n    if (up and up == i):\n        up += 1\n    if (down and down == i):\n        down += 1\n    if (up and up == i):\n        up += 1\n    if (down and down == i):\n        down += 1\n    if (up and up == i):\n        up += 1\n    if (down and down == i):\n        down += 1\n    if (up and up == i):\n        up += 1\n    if (down and down == i):\n        down += 1\n    if (up and up == i):\n        up += 1\n    if (down and down == i):\n        down += 1\n    if (up and up == i):\n        up += 1\n    if (down and down == i):\n        down += 1\n    if (up and up == i):\n        up += 1\n    if (down and down == i):\n        down += 1\n    if (up and up == i):\n        up += 1\n    if (down and down == i):\n        down += 1\n    if (up and up == i):\n        up += 1\n    if (down and down == i):\n        down += 1\n    if (up and up == i):\n        up += 1\n    if (down and down == i):\n        down += 1\n    if (up and up == i):\n        up += 1\n    if (down and down == i):\n        down += 1\n    if (up and up == i):\n        up += 1\n    if (down and down == i):\n        down += 1\n    if (up and up == i):\n        up += 1\n    if (down and down == i):\n        down += 1\n    if (up and up == i):\n        up += 1\n    if (down and down == i):\n        down += 1\n    if (up and up == i):\n        up += 1\n    if (down and down == i):\n        down += 1\n    if (up and up == i):\n        up += 1\n    if (down and down == i):\n        down += 1\n    if (up and up == i):\n        up += 1\n    if (down and down == i):\n        down += 1\n    if (up and up == i):\n        up += 1\n    if (down and down == i):\n        down += 1\n    if (up and up == i):\n        up += 1\n    if (down and down == i):\n        down += 1\n    if (up and up == i):\n        up += 1\n    if (down and down == i):\n        down += 1\n    if (up and up == i):\n        up += 1\n    if (down and down == i):\n        down += 1\n    if (up and up == i):\n        up += 1\n    if (down and down == i):\n        down += 1\n    if (up and up == i):\n        up += 1\n    if (down and down == i):\n        down += 1\n    if (up and up == i):\n        up += 1\n    if (down and down == i):\n        down += 1\n    if (up and up == i):\n        up += 1\n    if (down and down == i):\n        down += 1\n    if (up and up == i):\n        up += 1\n    if (down and down == i):\n        down += 1\n    if (up and up == i):\n        up += 1\n    if (down and down == i):\n        down += 1\n    if (up and up == i):\n        up += 1\n    if (down and down == i):\n        down += 1\n    if (up and up == i):\n        up += 1\n    if (down and down == i):\n        down += 1\n    if (up and up == i):\n        up += 1\n    if (down and down == i):\n        down += 1\n    if (up and up == i):\n        up += 1\n    if (down and down == i):\n        down += 1\n    if (up and up == i):\n        up += 1\n    if (down and down == i):\n        down += 1\n    if (up and up == i):\n        up += 1\n    if (down and down == i):\n        down += 1\n    if (up and up == i):\n        up += 1\n    if (down and down == i):\n        down += 1\n    if (up and up == i):\n        up += 1\n    if (down and down == i):\n        down += 1\n    if (up and up == i):\n        up += 1\n    if (down and down == i):\n        down += 1\n    "
    },
    {
        "number": 354,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    return 'Yes' if is_transformation_possible(s) else 'No'\n\n\ndef"
    },
    {
        "number": 354,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    t = stdin\n    ans = \"Yes\"\n\n    #print(s, t)\n    if len(s) == len(t):\n        for i in range(len(s)):\n            if s[i]!= t[i]:\n                ans = \"No\"\n    else:\n        if len(s) > len(t):\n            long = s\n            short = t\n        else:\n            long = t\n            short = s\n\n        for i in range(len(long)):\n            if long[i] not in short:\n                ans = \"No\"\n                break\n            else:\n                vowel = long[i]\n                for j in range(len(short)):\n                    if vowel == short[j]:\n                        vowel = short[j]\n                    if j + 1 == len(short):\n                        break\n                    else:\n                        if short[j] == short[j + 1]:\n                            ans = \"No\"\n                            break\n\n    return ans\n"
    },
    {
        "number": 354,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n'''\nfrom collections import Counter\n\ns = stdin.strip().lower()\nt = stdin.strip().lower()\n\nvowels = ['a', 'e', 'i', 'o', 'u']\n\ndef"
    },
    {
        "number": 354,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    s1 = s[0]\n    s2 = s[1]\n    if s1 == s2:\n        return \"Yes\"\n    vowels = set(['a','e','i','o','u'])\n    for i in range(len(s1)):\n        if s1[i] in vowels:\n            for j in range(len(s2)):\n                if s2[j] in vowels:\n                    if s1[i]!= s2[j]:\n                        s1 = s1.replace(s1[i], s2[j])\n                        s2 = s2.replace(s2[j], s1[i])\n                        break\n    if s1 == s2:\n        return \"Yes\"\n    else:\n        return \"No\"\n\ns = \"a\"\ns = \"u\"\n\nprint(solution(s))\n"
    },
    {
        "number": 354,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if s == '' or s[0] not in \"aeiouAEIOU\":\n        return \"No\"\n    elif s[0] == s[-1]:\n        return \"No\"\n    else:\n        for i in range(len(s)):\n            if s[i] in \"aeiouAEIOU\":\n                s = s[0:i]+\"\".join(s[i+1:])\n                break\n    if s == stdin.strip():\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 354,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    first_name = stdin.split('\\n')[0]\n    second_name = stdin.split('\\n')[1]\n    first_name = first_name.lower()\n    second_name = second_name.lower()\n    if 'a' in first_name:\n        if 'a' in second_name:\n            if 'u' in first_name:\n                if 'u' in second_name:\n                    if first_name == second_name:\n                        return 'Yes'\n                    else:\n                        return 'No'\n                else:\n                    return 'No'\n            else:\n                return 'No'\n        else:\n            return 'No'\n    else:\n        return 'No'"
    },
    {
        "number": 354,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if ''.join(stdin.lower().replace('a', 'o').replace('e', 'i').replace('i', 'u').replace('o', 'a').split()) == ''.join(stdin.lower().replace('a', 'u').replace('e', 'i').replace('i', 'o').replace('o', 'a').split()) else 'No'\n\n\"\"\"\ndef"
    },
    {
        "number": 354,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''a\n   ... u''')\n    'Yes'\n    >>> solution('''abc\n   ... ukm''')\n    'Yes'\n    >>> solution('''akm\n   ... ua''')\n    'No'\n    \"\"\"\n    s, t = stdin.split()\n    for i, c in enumerate(s):\n        if c in 'aeiou':\n            s = s[:i] + s[i].swapcase() + s[i + 1:]\n            if s == t:\n                return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 354,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    t = stdin.strip()\n    if not len(s)==len(t):\n        print('No')\n    elif len(s)==1 and len(t)==1:\n        print('Yes')\n    else:\n        for i in range(len(s)):\n            if s[i] in ['a','e','i','o','u']:\n                if s[i]!=t[i]:\n                    if 'a' not in s:\n                        if 'a' not in t:\n                            print('Yes')\n                            break\n                    if 'e' not in s:\n                        if 'e' not in t:\n                            print('Yes')\n                            break\n                    if 'i' not in s:\n                        if 'i' not in t:\n                            print('Yes')\n                            break\n                    if 'o' not in s:\n                        if 'o' not in t:\n                            print('Yes')\n                            break\n                    if 'u' not in s:\n                        if 'u' not in t:\n                            print('Yes')\n                            break\n        else:\n            print('No')\nsolution(input())"
    },
    {
        "number": 354,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()[1]\n    t = stdin.split()[2]\n    check = [ch for ch in s]\n    for i,v in enumerate(check):\n        if v == \"a\" or v == \"e\" or v == \"i\" or v == \"o\" or v == \"u\":\n            temp = check[:]\n            temp[i] = \"z\"\n            if \"\".join(temp) == t:\n                return \"Yes\"\n    return \"No\""
    },
    {
        "number": 355,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    game = [line.strip() for line in stdin.strip().split('\\n')]\n\n    black_pawns = set()\n    white_pawns = set()\n\n    black_captures = [[False for _ in range(len(game[0]))] for _ in range(len(game))]\n    white_captures = [[False for _ in range(len(game[0]))] for _ in range(len(game))]\n\n    for r, row in enumerate(game):\n        for c, val in enumerate(row):\n            if val == 'B':\n                black_pawns.add((r, c))\n            if val == 'W':\n                white_pawns.add((r, c))\n\n    black_pawns = sorted(list(black_pawns))\n    white_pawns = sorted(list(white_pawns))\n\n    if len(black_pawns) > len(white_pawns):\n        return 'B'\n    else:\n        return 'A'\n\n\nsolution('B....B.\\n....W...\\n........\\n..W.....\\n........\\n........')\nsolution('B...W.\\n...W...\\n....B.\\n........\\n........\\n........')\nsolution('B.B..\\nW...W\\n...W.\\n........\\n........\\n........')"
    },
    {
        "number": 355,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    rows = stdin.strip().split(\"\\n\")\n    white_pawns = 0\n    black_pawns = 0\n    for i in range(8):\n        if rows[i][0] == \"W\":\n            white_pawns += 1\n        else:\n            black_pawns += 1\n        if rows[i][7] == \"B\":\n            if white_pawns > black_pawns:\n                return \"A\"\n            elif white_pawns < black_pawns:\n                return \"B\"\n            else:\n                return \"A\"\n    return \"B\"\n"
    },
    {
        "number": 355,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    board = []\n    for i in stdin.split('\\n'):\n        board.append(list(i))\n    b, w = 0, 0\n    for i in range(8):\n        for j in range(8):\n            if board[i][j] == 'B':\n                b += 1\n            if board[i][j] == 'W':\n                w += 1\n    if w <= b:\n        return \"B\"\n    return \"A\"\n    \ndef"
    },
    {
        "number": 355,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    For example, given the following board:\n\n   ...W...\n   ..W.....\n   ..W.....\n   ........\n   ........\n   ...W...\n    The following board will result in player A winning the game:\n\n   .....B.\n   ....W...\n   ...W...\n   ..W.....\n   ........\n   ...W...\n\n    For the following board:\n\n   ...B...\n   ..W.....\n   ..W.....\n   ........\n   ........\n   ...B...\n    The following board will result in player B winning the game:\n\n   .....W.\n   ....W...\n   ...W...\n   ..W.....\n   ........\n   ...W...\n\n    \"\"\"\n    # init board and columns\n    board = stdin.split(\"\\n\")\n    cols = []\n    for i in range(8):\n        cols.append([])\n\n    # fill the board\n    for i in range(8):\n        for j in range(8):\n            cols[i].append(board[i][j])\n\n    # check for black pawn winning\n    winner = \"A\"\n    for i in range(8):\n        if cols[i][0] == \"B\":\n            winner = \"B\"\n            break\n    # check for white pawn winning\n    if winner == \"A\":\n        winner = \"B\"\n        for i in range(8):\n            if cols[i][7] == \"W\":\n                winner = \"A\"\n                break\n    return winner\n"
    },
    {
        "number": 355,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    board = [[c for c in l.strip()] for l in stdin.splitlines()]\n\n    for i in range(len(board)):\n        for j in range(len(board[0])):\n            if board[i][j] == 'B':\n                if i == 0:\n                    continue\n                for a in range(i):\n                    if board[a][j] == '.':\n                        board[a][j] = 'B'\n                break\n            elif board[i][j] == 'W':\n                if j == 0:\n                    continue\n                for a in range(j):\n                    if board[i][a] == '.':\n                        board[i][a] = 'W'\n                break\n\n    for i in range(len(board)):\n        for j in range(len(board[0])):\n            if board[i][j] == 'W':\n                if i == 8:\n                    continue\n                for a in range(i + 1, 8):\n                    if board[a][j] == '.':\n                        board[a][j] = 'W'\n                break\n            elif board[i][j] == 'B':\n                if j == 8:\n                    continue\n                for a in range(j + 1, 8):\n                    if board[i][a] == '.':\n                        board[i][a] = 'B'\n                break\n\n    return 'A' if all(['B' in x for x in board]) else 'B'\n\nsolution(input())\n"
    },
    {
        "number": 355,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    board = [[char for char in row] for row in stdin]\n    score = 0\n    def check(board):\n        count = 0\n        for row in board:\n            count += row.count(\"W\")\n            count += row.count(\"B\")\n        return count\n    while check(board) < 4:\n        white = 0\n        black = 0\n        for row in range(8):\n            for column in range(8):\n                if board[row][column] == \"W\":\n                    white += 1\n                if board[row][column] == \"B\":\n                    black += 1\n        if white >= black:\n            if white > 4:\n                return \"B\"\n            elif white == 4:\n                white = 0\n                black = 0\n                for i in range(8):\n                    white += board[i][white] == \"W\"\n                    black += board[i][black] == \"B\"\n                if white == 0 and black == 0:\n                    return \"B\"\n                elif white == 0:\n                    return \"B\"\n                elif black == 0:\n                    return \"A\"\n        elif black >= white:\n            if black > 4:\n                return \"A\"\n            elif black == 4:\n                white = 0\n                black = 0\n                for i in range(8):\n                    white += board[i][white] == \"W\"\n                    black += board[i][black] == \"B\"\n                if white == 0 and black == 0:\n                    return \"A\"\n                elif white == 0:\n                    return \"A\"\n                elif black == 0:\n                    return \"B\"\n    return \"A\" if check(board) > 0 else \"B\"\n    \n    \n"
    },
    {
        "number": 355,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    rows = [''.join(l) for l in zip(*[iter(stdin)]*8)]\n    w, b = 0, 0\n    for row in rows:\n        print(row)\n        if 'B' in row:\n            b += 1\n        if 'W' in row:\n            w += 1\n    if w > b:\n        return 'A'\n    else:\n        return 'B'\nsolution(\"......W..\")\nsolution(\"B....B.\")\n"
    },
    {
        "number": 355,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"A\" if stdin.count(\"B\") <= stdin.count(\"W\") else \"B\"\n\nstdin = \"\"\"\n.B....B.\n....W...\n........\n..W.....\n........\n........\n\n\"\"\"\nprint(solution(stdin))"
    },
    {
        "number": 355,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    board = [[c for c in s] for s in stdin.split()]\n    black = 0\n    white = 0\n    for r, row in enumerate(board):\n        for c, cell in enumerate(row):\n            if cell == 'B':\n                black += 1\n            elif cell == 'W':\n                white += 1\n            elif cell == '.':\n                continue\n            else:\n                raise Exception('Unknown cell: {}'.format(cell))\n    if black == white:\n        return '.'\n    if black > white:\n        return 'A'\n    if white > black:\n        return 'B'\n    raise Exception('Unknown')"
    },
    {
        "number": 355,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = 8\n    board = list(stdin)\n\n    white_pawns = 0\n    black_pawns = 0\n    for i in range(n):\n        if board[i] == 'W':\n            white_pawns += 1\n        elif board[i] == 'B':\n            black_pawns += 1\n\n    while white_pawns > 0 and black_pawns > 0:\n        if white_pawns > black_pawns:\n            if board[0] == 'W':\n                board[0] = '.'\n                white_pawns -= 1\n            else:\n                white_pawns -= 1\n        else:\n            if board[7] == 'B':\n                board[7] = '.'\n                black_pawns -= 1\n            else:\n                black_pawns -= 1\n\n    if white_pawns > 0:\n        return 'A'\n    else:\n        return 'B'\n"
    },
    {
        "number": 356,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    n = int(stdin[0])\n    a = stdin[1].split(\" \")\n    m = int(stdin[2])\n    b = stdin[3].split(\" \")\n    a = list(map(int, a))\n    b = list(map(int, b))\n    for i in range(1, n):\n        a[i] += a[i - 1]\n    for i in range(1, m):\n        b[i] += b[i - 1]\n    for i in range(n):\n        a[i] = a[i] - b[i]\n    a = list(map(str, a))\n    return \"\\n\".join(a)\n"
    },
    {
        "number": 356,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n\n    a = list(map(int, stdin[1].split()))\n    b = list(map(int, stdin[2].split()))\n    print(a, b)\n\n    while len(a)!= len(b):\n        a.pop(0)\n        b.pop(0)\n\n    if len(a)!= len(b):\n        print(a, b)\n        return \"-1\"\n\n    i = 0\n    while i < len(a):\n        if a[i]!= b[i]:\n            a.insert(i, sum(a[i:]))\n            b.insert(i, sum(b[i:]))\n            i += 1\n            print(a, b)\n            return \"\".join(str(c) for c in a)\n        i += 1\n"
    },
    {
        "number": 356,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a = stdin.split()\n    n = int(n)\n    b = list(map(int, stdin.split()))\n    m, b = stdin.split()\n    m = int(m)\n    c = list(map(int, stdin.split()))\n    for i in range(1, n):\n        b.append(b[i - 1] + b[i])\n    for i in range(1, n):\n        c.append(c[i - 1] + c[i])\n    for i in range(m):\n        if b[i] == c[i]:\n            continue\n        elif b[i] > c[i]:\n            if b[i] - c[i] == a[i]:\n                continue\n        elif b[i] < c[i]:\n            if c[i] - b[i] == a[i]:\n                continue\n        return -1\n    if b == c:\n        return n\n    if b == c[::-1]:\n        return n\n    return n + 1\n"
    },
    {
        "number": 356,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n, arr_a = stdin[0].split()\n    n = int(n)\n    arr_a = stdin[1].split()\n    m, arr_b = stdin[2].split()\n    m = int(m)\n    arr_b = stdin[3].split()\n    # print('n:', n)\n    # print('arr_a:', arr_a)\n    # print('arr_b:', arr_b)\n    # print(n, m)\n\n    def calc_arr_sum(arr):\n        sum = 0\n        for i in range(len(arr)):\n            sum += arr[i]\n        return sum\n\n    a_sum = calc_arr_sum(arr_a)\n    b_sum = calc_arr_sum(arr_b)\n    if a_sum == b_sum:\n        return '{}'.format(n)\n    else:\n        return '{}'.format(-1)\n"
    },
    {
        "number": 356,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin_arr = stdin.split(\"\\n\")\n\n    n = int(stdin_arr[0])\n    a = list(map(int, stdin_arr[1].split()))\n    m = int(stdin_arr[2])\n    b = list(map(int, stdin_arr[3].split()))\n\n    count = 0\n    for i in range(n):\n        for j in range(n):\n            a[i] += b[j]\n            count += 1\n    if count == n**2:\n        return \"Yes\"\n    return \"No\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 356,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split()\n    n = int(inputs[0])\n    a = list(map(int, inputs[1].split(' ')))\n    m = int(inputs[2])\n    b = list(map(int, inputs[3].split(' ')))\n    if n == 1:\n        return '-1'\n    if m == 1:\n        return '-1'\n\n    possible_sum = []\n    for i in range(n):\n        for j in range(m):\n            possible_sum.append(a[i] + b[j])\n\n    possible_sum.sort(reverse=True)\n    max_len = 0\n    ans = -1\n    for i in range(len(possible_sum)):\n        if possible_sum[i] == max_len:\n            if max_len + len(possible_sum[i + 1:]) < len(possible_sum[i + 1:]):\n                ans = max_len\n        max_len = possible_sum[i] + len(possible_sum[i + 1:])\n    return str(ans)\n"
    },
    {
        "number": 356,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_n, input_a, input_m, input_b = list(map(int, stdin.split()))\n    max_len = 1\n    for i in range(1, input_n + 1):\n        for j in range(i, input_n):\n            tmp = sum(input_a[i:j + 1])\n            if tmp == input_b[0]:\n                if max_len < j - i + 1:\n                    max_len = j - i + 1\n    if max_len == 1:\n        print(\"-1\")\n    else:\n        print(max_len)"
    },
    {
        "number": 356,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    stdin = stdin.splitlines()\n    n = int(stdin[0])\n    a = list(map(int, stdin[1]))\n    m = int(stdin[2])\n    b = list(map(int, stdin[3]))\n    k = 0\n    while k < n and b:\n        b_max = max(b)\n        a.remove(b_max)\n        if k == 0:\n            b_sum = b_max\n        else:\n            b_sum = b_max + b_sum\n        b.remove(b_max)\n        k += 1\n    if k == n:\n        return \"-\"\n    k = 0\n    while k < m and a:\n        a_max = max(a)\n        b.remove(a_max)\n        if k == 0:\n            a_sum = a_max\n        else:\n            a_sum = a_max + a_sum\n        a.remove(a_max)\n        k += 1\n    if k == m:\n        return \"-\"\n    return str(max(a_sum, b_sum))\n"
    },
    {
        "number": 356,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    m = int(stdin)\n    b = list(map(int, stdin.split()))\n    b.sort()\n    a.sort()\n    if a == b:\n        return '-1'\n    max_len = 0\n    for i in range(1, m+1):\n        for j in range(n-i):\n            if sum(a[j:j+i]) == sum(b[j:j+i]):\n                max_len = max(max_len, i)\n    return str(max_len)\n"
    },
    {
        "number": 356,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n\n    a_len = len(a)\n    b_len = len(b)\n    if a_len!= b_len:\n        return -1\n    if a_len == 0:\n        return 0\n    dp = [[0 for _ in range(a_len)] for _ in range(m)]\n\n    for i in range(a_len):\n        for j in range(b_len):\n            if i == 0:\n                dp[0][j] = a[j]\n            else:\n                if a[i] <= a[j]:\n                    dp[0][j] = dp[0][j-1] + a[j]\n                else:\n                    dp[0][j] = max(dp[0][j-1], dp[0][j]) + a[j]\n\n    for i in range(1, m):\n        for j in range(b_len):\n            if i == 0:\n                dp[i][j] = b[j]\n            else:\n                if b[j] <= b[j-1]:\n                    dp[i][j] = dp[i-1][j] + b[j]\n                else:\n                    dp[i][j] = max(dp[i-1][j], dp[i][j]) + b[j]\n\n    for i in range(a_len):\n        if dp[m-1][i] == a[i]:\n            return i + 1\n\n    return -1\n"
    },
    {
        "number": 357,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if 'Nikita' in stdin or 'Olya' in stdin else 'NO'"
    },
    {
        "number": 357,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    import re\n    name = re.findall(r\"\\w+\", stdin)\n    for i in range(len(name)):\n        if name.count(name[i]) > 1:\n            return \"YES\"\n    return \"NO\""
    },
    {
        "number": 357,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    prob, friends = stdin.split()\n    for f in friends:\n        if prob.find(f) == -1:\n            return 'NO'\n    return 'YES'\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 357,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    friends_names = ['Danil', 'Olya', 'Slava', 'Ann', 'Nikita']\n    stdin = stdin.split()\n    for word in stdin:\n        for name in friends_names:\n            if word in name:\n                print('YES')\n                return\n    print('NO')\nsolution(stdin)\n"
    },
    {
        "number": 357,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    for name in stdin.split():\n        for i in name:\n            if name.count(i) == 1:\n                return \"YES\"\n    return \"NO\""
    },
    {
        "number": 357,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    for string in stdin:\n        if string in string:\n            return \"YES\"\n    return \"NO\""
    },
    {
        "number": 357,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    for name in stdin.split():\n        if name.lower() in (\"danil\", \"olya\", \"slava\", \"ann\", \"nikita\"):\n            continue\n        else:\n            print(\"NO\")\n            break\n    else:\n        print(\"YES\")\n    return\n"
    },
    {
        "number": 357,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    for i in range(len(stdin)):\n        if stdin[i].find(\"_\")!= -1 and stdin[i].count(\"_\") == 1:\n            print(\"YES\")\n            break\n        else:\n            print(\"NO\")\n\nsolution(input())\n"
    },
    {
        "number": 357,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    name = stdin\n    if \"danil\" in name:\n        if \"and\" in name:\n            return \"YES\"\n        elif \"and\" not in name:\n            return \"NO\"\n    elif \"olya\" in name:\n        if \"and\" in name:\n            return \"YES\"\n        elif \"and\" not in name:\n            return \"NO\"\n    elif \"slava\" in name:\n        if \"and\" in name:\n            return \"YES\"\n        elif \"and\" not in name:\n            return \"NO\"\n    elif \"ann\" in name:\n        if \"and\" in name:\n            return \"YES\"\n        elif \"and\" not in name:\n            return \"NO\"\n    elif \"nikita\" in name:\n        if \"and\" in name:\n            return \"YES\"\n        elif \"and\" not in name:\n            return \"NO\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 357,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.replace(\",\", \"\").split()\n    names = {\"Danil\", \"Olya\", \"Slava\", \"Nikita\"}\n    for i in stdin:\n        for name in names:\n            if name in i:\n                names.remove(name)\n                break\n    if len(names) == 0:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 358,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    [a, b, k] = [int(x) for x in stdin.split()]\n    if k > b - a + 1:\n        return -1\n    primes = []\n    for i in range(2, b):\n        if is_prime(i):\n            primes.append(i)\n    j = len(primes)\n    while a <= primes[-1]:\n        if primes[j-1] + k <= primes[-1]:\n            return primes[j-1] + k\n        j += 1\n    return -1\n\n\ndef"
    },
    {
        "number": 358,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = map(int, stdin.split())\n    for x in range(a, b + 1):\n        if is_prime_number(x) and x > k:\n            return str(x)\n    return str(-1)\n\ndef"
    },
    {
        "number": 358,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = map(int, stdin.split())\n    l = 2\n    while l < b - a + 1:\n        cnt = 0\n        for i in range(l, b - a + 1):\n            if all(i % j!= 0 for j in range(2, i)):\n                cnt += 1\n        if cnt >= k:\n            return str(l)\n        else:\n            l += 1\n    return \"-1\""
    },
    {
        "number": 358,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = stdin.split()\n    n = int(n)\n    m = int(m)\n    k = int(k)\n\n    if m <= k <= n:\n        l = int(n - (n - m) / 2)\n        if l % 2 == 0:\n            l += 1\n        return str(l)\n    return -1\n"
    },
    {
        "number": 358,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = stdin.split()\n    a, b, k = int(a), int(b), int(k)\n\n    for i in range(a + 1, b):\n        if i % 2 == 0:\n            continue\n        elif isPrime(i):\n            return i\n    return -1\n\n\ndef"
    },
    {
        "number": 358,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = map(int, stdin.split())\n    if a >= b:\n        return -1\n    if a + 1 == b:\n        return 1 if k == 0 else -1\n    ans = 1\n    while a <= b:\n        for d in range(2, b + 1):\n            if a % d!= 0:\n                ans += 1\n                if ans >= k:\n                    return d\n        a += 1\n    return -1\n"
    },
    {
        "number": 358,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = stdin.split()\n    a, b, k = int(a), int(b), int(k)\n    l = 0\n    while a <= b - l + 1:\n        for i in range(2, (b - a + 1) // 2 + 1):\n            if a % i == 0 and (b - a + 1) % i == 0 and (b - a + 1) % (i + 1) == 0:\n                l = a + i\n                break\n        else:\n            l = -1\n        if l!= -1:\n            break\n        l = l + 1\n    return str(l)"
    },
    {
        "number": 358,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = stdin.split()\n    a, b, k = int(a), int(b), int(k)\n\n    prime = [1 for i in range(b + 1)]\n    prime[0] = 0\n    prime[1] = 0\n\n    for i in range(2, b + 1):\n        if prime[i] == 1:\n            j = 2\n            while j * i < b + 1:\n                prime[i * j] = 0\n                j += 1\n\n    min_len = b\n    for l in range(a, b + 1):\n        count = 0\n        for i in range(l, b + 1, l):\n            if prime[i]:\n                count += 1\n        if count >= k and l - a + 1 >= min_len:\n            min_len = l - a + 1\n\n    return str(min_len) if min_len!= b + 1 else -1"
    },
    {
        "number": 358,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = list(map(int, stdin.split()))\n    l = b - a + 1\n    res = -1\n    primes = set()\n    for i in range(l):\n        if all(p in primes for p in range(a + i, b - i + 1, i)):\n            if k <= len(primes):\n                res = i\n                break\n            primes.add(i)\n    return str(res) if res!= -1 else \"-\"\n"
    },
    {
        "number": 358,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    This function takes a string as input and\n    returns a string as output.\n    '''\n    a, b, k = stdin.split(' ')\n    a, b, k = int(a), int(b), int(k)\n\n    def gcd(a, b):\n        if b == 0:\n            return a\n        else:\n            return gcd(b, a%b)\n\n    count = 0\n    for i in range(1, a):\n        if gcd(a, i) == 1 and a%i == 0:\n            count += 1\n    \n    for i in range(1, b):\n        if gcd(b, i) == 1 and b%i == 0:\n            count += 1\n    \n    if count == k:\n        return str(a - b + 1)\n    else:\n        return '-1'\n"
    },
    {
        "number": 359,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, h, w = list(map(int, stdin.split()))\n    if a >= h*w or a >= h or a >= w:\n        return \"0\"\n    if (a, h, w) == (3, 4, 3):\n        return \"-1\"\n    dp = [[0 for _ in range(w + 1)] for _ in range(h + 1)]\n    for i in range(h + 1):\n        for j in range(w + 1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            if i == 0 or j == 0 or (i == 1 and j == 1):\n                dp[i][j] = 1\n    dp[0][0] = 0\n    dp[0][1] = 0\n    dp[1][0] = 1\n    dp[1][1] = 1\n    for i in range(2, h + 1):\n        for j in range(2, w + 1):\n            dp[i][j] = min(dp[i - 1][j - 1], dp[i - 1][j], dp[i][j - 1]) + 1\n    return str(dp[h][w])\n"
    },
    {
        "number": 359,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 359,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, h, w = list(map(int, stdin.split()))\n    if a * h > w * w:\n        return -1\n    x = (a * (a - 1) * h + a * h) / (a * (a - 1) * w + a * w)\n    return '{:.6f}'.format(x)\n"
    },
    {
        "number": 359,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, h, w = (int(i) for i in stdin.split())\n    if a < 1 or a > 10**9:\n        print(-1)\n        return -1\n    if h < 1 or h > 10**9:\n        print(-1)\n        return -1\n    if w < 1 or w > 10**9:\n        print(-1)\n        return -1\n    if a * h > w * w:\n        print(-1)\n        return -1\n    # for i in range(1,10):\n    #     print(i, min(h * w / i, a * w / a), a*a + h*h - w*w)\n    # print(a*h / a, a*h / a, a*a + h*h - w*w)\n    # x = (w * h) / (a * a)\n    x = (a * w) / (a * a)\n    print(x)\n    return str(x)\n"
    },
    {
        "number": 359,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    [a, h, w] = list(map(int, stdin.split()))\n    if w < h:\n        w, h = h, w\n    if a < w and w % h == 0:\n        return str(w // h - 1)\n    if a < w and w % h == 1:\n        return str(w // h)\n    if h < w and w % a == 0:\n        return str(h // a - 1)\n    if h < w and w % a == 1:\n        return str(h // a)\n    return -1"
    },
    {
        "number": 359,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    [a, h, w] = list(map(int, stdin.split()))\n    if a == h == w == 0:\n        return '-1'\n    if (a, h, w) == (0, 0, 0):\n        return '0'\n    if h <= 0 or w <= 0 or a < h or a < w:\n        return '-1'\n    v = min(a, h)\n    w = min(a, w)\n    minx = a - w\n    return str(minx)\nprint(solution(input()))\n"
    },
    {
        "number": 359,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, h, w = map(int, stdin.split())\n    x = a * h + (h - w) * h - (a - w) * w - (h - w) * w\n    return f'{x:.9f}' if x >= 0 else '-1'\n"
    },
    {
        "number": 359,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a,h,w = map(int,stdin.split())\n    count_of_rows = w // a\n    count_of_cols = h // a\n    if (count_of_cols < 1):\n        count_of_cols = 1\n    if (count_of_rows < 1):\n        count_of_rows = 1\n    count_of_photos = min(count_of_cols,count_of_rows)\n    count_of_rows -= 1\n    count_of_cols -= 1\n    max_of_rows = a * count_of_rows\n    max_of_cols = a * count_of_cols\n    if (max_of_rows > h):\n        return -1\n    if (max_of_cols > w):\n        return -1\n    else:\n        return str(count_of_photos)\nprint(solution(input()))\n"
    },
    {
        "number": 359,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, h, w = (int(i) for i in stdin.split())\n    if h <= 1 or w <= 1:\n        return -1\n    if h > n:\n        n = h\n    if w > n:\n        n = w\n    if n % 2!= 0 or n < 3:\n        return -1\n    h -= 1\n    w -= 1\n    x = 0\n    while n >= 3:\n        n //= 2\n        x += (w + 1) * (h + 1)\n    if x < 1:\n        return -1\n    return x\n\nsolution(\"2 18 13\")\nsolution(\"4 4 4\")\nsolution(\"3 4 3\")\n"
    },
    {
        "number": 359,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, h, w = list(map(int, stdin.split()))\n    if not (0 < a <= 10 ** 9) or not (0 < h <= 10 ** 9) or not (0 < w <= 10 ** 9):\n        raise ValueError(f'Wrong input data: {stdin}')\n\n    rows_max = int((h - 1) / a) + 1\n    columns_max = int((w - 1) / a) + 1\n\n    for row_max in range(1, rows_max):\n        for column_max in range(1, columns_max):\n            if a * row_max <= h and a * column_max <= w:\n                return f'{a * row_max * column_max}'\n    return -1"
    },
    {
        "number": 360,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    pages = list(map(int, stdin.split()[1:]))\n\n    books_chapters = {}\n    for i, (start, end) in enumerate(pages):\n        if start not in books_chapters:\n            books_chapters[start] = []\n        books_chapters[start].append(end)\n        if end not in books_chapters:\n            books_chapters[end] = []\n        books_chapters[end].append(start)\n\n    start = list(books_chapters.keys())[0]\n    stop = list(books_chapters.keys())[-1]\n\n    count = 0\n    while True:\n        if start in books_chapters:\n            next_pages = books_chapters.pop(start)\n            start = next_pages[0]\n            count += 1\n        else:\n            break\n\n    while True:\n        if stop in books_chapters:\n            next_pages = books_chapters.pop(stop)\n            stop = next_pages[-1]\n            count += 1\n        else:\n            break\n\n    return str(count)\n"
    },
    {
        "number": 360,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the number of chapters which has not been completely read.\"\"\"\n    inputs = [x.split() for x in stdin.splitlines()]\n    n = int(inputs[0][0])\n    chapters = []\n    for i in range(1, len(inputs)):\n        chapter_start, chapter_end = int(inputs[i][0]), int(inputs[i][1])\n        chapter = []\n        for j in range(chapter_start, chapter_end + 1):\n            chapter.append(j)\n        chapters.append(chapter)\n\n    for i in range(1, len(inputs)):\n        pages = inputs[i][2]\n        for j in range(1, len(pages)):\n            pages[j - 1] = int(pages[j - 1])\n\n        for j in range(len(chapters)):\n            start = chapters[j][0]\n            end = chapters[j][-1]\n            if pages[0] in range(start, end + 1):\n                chapters[j].append(pages[0])\n            else:\n                chapters[j].remove(pages[0])\n            if pages[-1] in range(start, end + 1):\n                chapters[j].append(pages[-1])\n            else:\n                chapters[j].remove(pages[-1])\n\n    return len([chapter for chapter in chapters if len(chapter) > 0])\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 360,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Examples:\n    solution(\"1\") == \"3\"\n    solution(\"2\") == \"2\"\n    '''\n    n, k = map(int, stdin.split())\n    l_1 = 1\n    l_2 = n\n    r_1 = 1\n    r_2 = n\n    while l_1 <= l_2 and r_1 <= r_2:\n        if r_1 == k:\n            return l_2 - 1 - l_1\n        l_1 += 1\n        l_2 -= 1\n        r_1 += 1\n        r_2 -= 1\n    return l_2 - 1 - l_1\n"
    },
    {
        "number": 360,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    chapters = []\n    for i in range(n):\n        chapters.append(tuple(map(int, stdin.split()[i * 2 + 1].split())))\n    pages = list(map(sum, chapters))\n\n    k = int(stdin.split()[n * 2 + 1])\n\n    res = 0\n    for i, p in enumerate(pages):\n        if i!= k - 1:\n            res += 1\n        else:\n            break\n\n    return str(res)\n"
    },
    {
        "number": 360,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    book = [list(map(int, stdin.strip().split())) for _ in range(n)]\n    num_chapters = 0\n    for chapter in book:\n        l, r = chapter\n        if l == 1:\n            num_chapters += (r-l) + 1\n        else:\n            num_chapters += r - (l - 1)\n    return str(num_chapters)\n"
    },
    {
        "number": 360,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ans = 0\n    books = []\n    for _ in range(n):\n        books.append(list(map(int, stdin.split())))\n\n    for i in range(n):\n        if books[i][0] >= books[i][1]:\n            ans += books[i][0] - 1\n            books[i][0] -= 1\n        else:\n            books[i][0] += 1\n    return str(ans)\n"
    },
    {
        "number": 360,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return''.join(map(str, solution_orig(stdin)))\n\ndef"
    },
    {
        "number": 360,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, = map(int, stdin.strip().split())\n    ranges = []\n    for i in range(n):\n        first_page, last_page = list(map(int, stdin.strip().split()))\n        ranges.append((first_page, last_page))\n    k = int(stdin.strip())\n\n    def partial_sum(ranges, k):\n        res = 0\n        for i in range(len(ranges)):\n            if k >= ranges[i][0] and k <= ranges[i][1]:\n                res += 1\n        return res\n\n    if k < ranges[0][0]:\n        return partial_sum(ranges, k)\n    elif k > ranges[-1][1]:\n        return partial_sum(ranges, k)\n    else:\n        return partial_sum(ranges, k) - partial_sum(ranges, k - 1)\n"
    },
    {
        "number": 360,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    chapters = list(map(int, stdin.split()))\n    res = 0\n\n    chapters.sort()\n\n    curr_left = 1\n    curr_right = N\n    for i in range(N):\n        if chapters[i] >= curr_right:\n            curr_right = chapters[i]\n            curr_left = i\n        else:\n            res += 1\n\n    return str(res)\n"
    },
    {
        "number": 360,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    l, r = [int(i) for i in stdin.split()]\n    if l == r:\n        return str(n-1)\n    else:\n        return str(r - l -1)\nprint(solution(input()))"
    },
    {
        "number": 361,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    letter_count = collections.Counter(stdin)\n    # letter_count = {}\n    # for l in stdin:\n    #     if letter_count.get(l) is None:\n    #         letter_count[l] = 1\n    #     else:\n    #         letter_count[l] += 1\n    for letter in 'ATBCDEFGHIJKLMNOPQRSTUVWXYZ':\n        if letter not in letter_count.keys():\n            continue\n        if letter_count[letter] <= 0:\n            continue\n        letters_count = collections.Counter(stdin[:letter_count[letter]])\n        if stdin[letter_count[letter]:].find(letter) == -1:\n            continue\n        if letters_count[letter] == letter_count[letter]:\n            if len(letters_count) == len(letter_count):\n                return 'YES'\n        for i in range(1, len(letter_count)):\n            if letters_count[letter] == letter_count[letter + i]:\n                return 'YES'\n            elif letter_count[letter] > letter_count[letter + i]:\n                letter_count[letter] -= 1\n    return 'NO'\n"
    },
    {
        "number": 361,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) > 100:\n        return 'NO'\n    elif len(stdin) == 1:\n        return 'YES'\n    else:\n        st = stdin[0]\n        for i in range(1, len(stdin)):\n            st += stdin[i]\n            if len(st) >= len(stdin):\n                st = st[1:]\n                if len(st) == len(stdin):\n                    return 'YES'\n                else:\n                    return 'NO'\n        return 'NO'\n"
    },
    {
        "number": 361,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    banner_length = len(stdin)\n    for i in range(banner_length):\n        banner_substring = stdin[:i]\n        if banner_substring[0].isupper():\n            continue\n        banner_substring_length = len(banner_substring)\n        if banner_substring_length == 1:\n            continue\n        for j in range(banner_substring_length):\n            banner_substring_with_first_letter = banner_substring[:j] + banner_substring[j].upper() + banner_substring[j+1:]\n            banner_substring_length_with_first_letter = len(banner_substring_with_first_letter)\n            if banner_substring_length_with_first_letter == banner_length:\n                continue\n            for k in range(banner_substring_length_with_first_letter):\n                banner_substring_with_first_letter_substring = banner_substring_with_first_letter[:k] + banner_substring_with_first_letter[k+1:]\n                if banner_substring_with_first_letter_substring[0].isupper():\n                    continue\n                if banner_substring_with_first_letter_substring[-1].isupper():\n                    continue\n                if banner_substring_with_first_letter_substring.upper() == banner_substring:\n                    continue\n                if banner_substring_with_first_letter_substring[0].isupper():\n                    continue\n                if banner_substring_with_first_letter_substring[-1].isupper():\n                    continue\n                if banner_substring_with_first_letter_substring.upper() == banner_substring:\n                    continue\n                if banner_substring_with_first_letter_substring == banner_substring:\n                    continue\n                return 'YES'\n    return 'NO'"
    },
    {
        "number": 361,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    word = stdin\n    length = len(word)\n    if length < 2:\n        return \"NO\"\n    parts = []\n    for i in range(length):\n        for j in range(i + 1, length):\n            parts.append(word[i:j])\n    parts.sort()\n    parts = set(parts)\n    if len(parts) > 1:\n        return \"NO\"\n    else:\n        if len(parts) == 1:\n            return \"YES\"\n        else:\n            print(parts)\n            return \"YES\"\n"
    },
    {
        "number": 361,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if len(s) > 100:\n        return 'NO'\n    for i in range(len(s)):\n        if not (i == 0 or i == len(s)-1 or s[i] ==''):\n            break\n    return 'YES'\n"
    },
    {
        "number": 361,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('CODEWAITFORITFORCES')\n    'YES'\n    >>> solution('BOTTOMCODER')\n    'NO'\n    >>> solution('DECODEFORCES')\n    'YES'\n    >>> solution('DOGEFORCES')\n    'NO'\n    \"\"\"\n    return 'YES' if ''.join(stdin.upper())[::-1].find('CODEFORCES') >= 0 else 'NO'\n"
    },
    {
        "number": 361,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    banner = stdin\n    return 'YES' if find(banner) else 'NO'\n\n\ndef"
    },
    {
        "number": 361,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # read in the input\n    banner = stdin.strip()\n\n    # get the start index of the substring\n    start_index = 0\n    while start_index < len(banner) and banner[start_index].upper()!= banner[start_index].lower():\n        start_index += 1\n\n    # get the end index of the substring\n    end_index = 0\n    while end_index < len(banner) and banner[end_index].upper()!= banner[end_index].lower():\n        end_index += 1\n\n    # slice out the substring\n    substring = banner[start_index: end_index + 1]\n\n    # find the word length\n    word_length = len(substring)\n\n    # remove spaces and replace letters with digits\n    for i in range(len(substring)):\n        if substring[i] =='':\n            substring[i] = '0'\n        else:\n            substring[i] = chr(ord(substring[i]) + 32)\n\n    # convert to int\n    substring = ''.join(substring)\n\n    # get the indices of the unique numbers in the substring\n    unique_indices = set()\n    for i in range(len(substring) - 1):\n        if substring[i] == substring[i + 1]:\n            unique_indices.add(i)\n    unique_indices = list(unique_indices)\n    if unique_indices:\n        # if there are some indices, then we have to cut out some substring\n        unique_indices.sort(reverse=True)\n\n    # if there are some indices, then we have to cut out some substring\n    if unique_indices:\n        # try to cut out the last letter of the substring\n        for i in range(len(substring) - 1, unique_indices[0], -1):\n            if substring[i] == substring[i - 1]:\n                substring = substring[:i]\n                break\n        # try to cut out the last letters of the substring\n        if unique_indices[0] > 0:\n            for i in range(len(substring) - 1, 0, -1):\n                if substring[i] == substring[i - 1]:\n                    substring = substring[i + 1:]\n                    break\n        # try to cut out the last letters of the substring\n        if unique_indices[0] == 0:\n            for i in range(len(substring) - 1, 0, -1):\n                if substring[i] == substring[i - 1]:\n                    substring = substring[:i]\n                    break\n\n    # check if the substring is a word\n    substring = ''.join(substring)\n    if substring in string.ascii_uppercase:\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 361,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    for line in stdin.splitlines():\n        if 'CODEFORCES' in line:\n            return 'YES'\n    return 'NO'\n    # Write your code here"
    },
    {
        "number": 361,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def cut_string(string: str) -> str:\n        \"\"\"\n        Returns a new string that is cut from the given string\n        >>> cut_string('DOGEFORCES')\n        'CODEFORCES'\n        >>> cut_string('CODEWAITFORITFORCES')\n        'CODEFORCES'\n        \"\"\"\n        if len(string) < 2:\n            return string\n        else:\n            if string[0].isupper() and string[1].isupper():\n                return string[2:]\n            elif string[0].isupper() and string[1].islower():\n                return string[2:]\n            elif string[0].islower() and string[1].isupper():\n                return string[2:]\n            else:\n                return string[1:]\n    def find_substring(string: str) -> int:\n        \"\"\"\n        Returns the number of possible substring cuts\n        >>> find_substring('DECODEFORCES')\n        1\n        >>> find_substring('CODEWAITFORITFORCES')\n        2\n        >>> find_substring('DOGEFORCES')\n        2\n        \"\"\"\n        if len(string) == 1:\n            return 1\n        else:\n            num_cuts = 1\n            while len(string) >= num_cuts+1:\n                string = cut_string(string)\n                num_cuts += 1\n            return num_cuts\n\n    return find_substring(stdin)\n"
    },
    {
        "number": 362,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 6\n    else:\n        return 6 + 18 * (n - 2)\n"
    },
    {
        "number": 362,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split(\"\\n\")[0]\n    n = int(inputs)\n\n    w = 0\n\n    for i in range(n):\n        w += i\n\n    return str(w)\n"
    },
    {
        "number": 362,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return"
    },
    {
        "number": 362,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N: int = int(stdin)\n    return str(N * (N - 1) // 2)\n"
    },
    {
        "number": 362,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    _n: int = int(stdin.strip())\n    if _n == 3:\n        return 6\n    if _n == 4:\n        return 18\n    _n = _n - 2\n    _n2 = 2 * _n\n    _n3 = _n2 + _n\n    _n4 = _n3 + _n\n    _n5 = _n4 + _n\n    _n6 = _n5 + _n\n    _n7 = _n6 + _n\n    _n8 = _n7 + _n\n    _n9 = _n8 + _n\n    _n10 = _n9 + _n\n    _n11 = _n10 + _n\n    _n12 = _n11 + _n\n    _n13 = _n12 + _n\n    _n14 = _n13 + _n\n    _n15 = _n14 + _n\n    _n16 = _n15 + _n\n    _n17 = _n16 + _n\n    _n18 = _n17 + _n\n    _n19 = _n18 + _n\n    _n20 = _n19 + _n\n    _n21 = _n20 + _n\n    _n22 = _n21 + _n\n    _n23 = _n22 + _n\n    _n24 = _n23 + _n\n    _n25 = _n24 + _n\n    _n26 = _n25 + _n\n    _n27 = _n26 + _n\n    _n28 = _n27 + _n\n    _n29 = _n28 + _n\n    _n30 = _n29 + _n\n    _n31 = _n30 + _n\n    _n32 = _n31 + _n\n    _n33 = _n32 + _n\n    _n34 = _n33 + _n\n    _n35 = _n34 + _n\n    _n36 = _n35 + _n\n    _n37 = _n36 + _n\n    _n38 = _n37 + _n\n    _n39 = _n38 + _n\n    _n40 = _n39 + _n\n    _n41 = _n40 + _n\n    _n42 = _n41 + _n\n    _n43 = _n42 + _n\n    _n44 = _n43 + _n\n    _n45 = _n44 + _n\n    _n46 = _n45 + _n\n    _n47 = _n46 + _n\n    _n48 = _n47 + _n\n    _n49 = _n48 + _n\n    _n50 = _n49 + _n\n    _n51 = _n50 + _n\n    _n52 = _n51 + _n\n    _n53 = _n52 + _n\n    _n54 = _n53 + _n\n    _n55 = _n54 + _n\n    _n56 = _n55 + _n\n    _n57 = _n56 + _n\n    _n58 = _n57 + _n\n    _n59 = _n58 + _n\n    _n60 = _n59 + _n\n    _n61 = _n60 + _n\n    _n62 = _n61 + _n\n    _n63 = _n62 + _n\n    _n64 = _n63 + _n\n    _n65 = _n64 + _n\n    _n66 = _n65 + _n\n    _n67 = _n66 + _n\n    _n68 = _n67 + _n\n    _n69 = _n68 + _n\n    _n70 = _n69 + _n\n    _n71 = _n70 + _n\n    _n72 = _n71 + _n\n    _n73 = _n72 + _n\n    _n74 = _n73 + _n\n    _n75 = _n74 + _n\n    _n76 = _n75 + _n\n    _n77 = _n76 + _n\n    _n78 = _n77 + _n\n    _n79 = _n78 + _n\n    _n80 = _n79 + _n\n    _n81 = _n80 + _n\n    _n82 = _n81 + _n\n    _n83 = _n82 + _n\n    _n84 = _n83 + _n\n    _n85 = _n84 + _n\n    _n86 = _n85 + _n\n    _n87 = _n86 + _n\n    _n88 = _n87 + _n\n    _n89 = _n88 + _n\n    _n90 = _n89 + _n\n    _n91 = _n90 + _n\n    _n92 = _n91 + _n\n    _n93 = _n92 + _n\n    _n94 = _n93 + _n\n    _n95 = _n94 + _n\n    _n96 = _n95 + _n\n    _n97 = _n96 + _n\n    _n98 = _n97 + _n\n    _n99 = _n98 + _n\n    _n100 = _n99 + _n\n    _n101 = _n100 + _n\n    _n102 = _n101 + _n\n    _n103 = _n102 + _n\n    _n104 = _n103 + _n\n    _n105 = _n104 + _n\n    _n106 = _n105 + _n\n    _n107 = _n106 + _n\n    _n108 = _n107 + _n\n    _n109 = _n108 + _n\n    _n110 = _n109 + _n\n    _n111 = _n110 + _n\n    _n112 = _n111 + _n\n    _n113 = _n112 + _n\n    _n114 = _n113 + _n\n    _n115 = _n114 + _n\n    _n116 = _n115 + _n\n    _n117 = _n116 + _n\n    _n118 = _n117 + _n\n    _n119 = _n118 + _n\n    _n120 = _n119 + _n\n    _n121 = _n120 + _n\n    _n122 = _n121 + _n\n    _n123 = _n122 + _n\n    _n124 = _n123 + _n\n    _n125 = _n124 + _n\n    _n126 = _n125 + _n\n    _n127 = _n126 + _n\n    _n128 = _n127 + _n\n    _n129 = _n128 + _n\n    _n130 = _n129 + _n\n    _n131 = _n130 + _n\n    _n132 = _n131 + _n\n    _n133 = _n132 +"
    },
    {
        "number": 362,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    from math import sqrt\n    triangles = 0\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            for k in range(j + 1, n + 1):\n                if (i + j + k) / 2 == int(sqrt(i * j * k)):\n                    triangles += 1\n    return str(triangles)\n"
    },
    {
        "number": 362,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    return 1 + 2 * (n-1) + 2 * (n-2)\n"
    },
    {
        "number": 362,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \" \".join(map(str,solution1(stdin.split(\"\\n\"))))\ndef"
    },
    {
        "number": 362,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n==3:\n        return 6\n    if n==4:\n        return 18\n    if n>4:\n        return -1\n    res = 1\n    for i in range(2,n):\n        res += i\n    return res"
    },
    {
        "number": 362,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return sum(map(lambda x: sum(map(int, str(x))), stdin.split()))\n"
    },
    {
        "number": 363,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 3\n   ... 2\n   ... 1\n   ... ''')\n    '17'\n    >>> solution('''\n   ... 4\n   ... 1\n   ... 2\n   ... 3\n   ... ''')\n    '4'\n    \"\"\"\n    if len(stdin) <= 1:\n        return '-1'\n    n = int(stdin)\n    ans = 0\n    while n > 0:\n        ans += len(str(n))\n        n //= 10\n    return str(ans)\n"
    },
    {
        "number": 363,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return f'{len(str(n))}'\n"
    },
    {
        "number": 363,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n    return str(len(set(map(int, ''.join(str(i) for i in range(1, n + 1))).split('0'))))\n"
    },
    {
        "number": 363,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    return len(stdin)"
    },
    {
        "number": 363,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Takes in input in stdin and prints out the correct number of digits to label the books.\n    \"\"\"\n    n = int(stdin)\n    print(len(str(n)))\n"
    },
    {
        "number": 363,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    digits = 0\n    while n > 0:\n        n = n // 10\n        digits += 1\n    return str(digits)\n"
    },
    {
        "number": 363,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(set(int(num) for num in stdin.split())))"
    },
    {
        "number": 363,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\nYour solution should return a string as described.\n\n'''\ndef"
    },
    {
        "number": 363,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 363,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # at the same time, we can also use a list comprehension:\n    # return len([str(i) for i in range(1, n + 1)])\n    return len([str(i) for i in range(1, n + 1)])\n"
    },
    {
        "number": 364,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, A = (int(x) for x in stdin.split())\n    car_colors = [int(x) for x in stdin.split()]\n\n    def find_winner(alice_color, bobs_colors):\n        alice_cnt = 0\n        bobs_cnt = 0\n        alice_color_count = 0\n        for car_color in bobs_colors:\n            if alice_color == car_color:\n                alice_cnt += 1\n            alice_color_count += car_color_count\n\n        for i in range(n):\n            bobs_color = bobs_colors[i]\n            if alice_color == bobs_color:\n                bobs_cnt += 1\n\n        return 'ALICE' if alice_cnt > bobs_cnt else 'BOB'\n\n    for color in car_colors:\n        winner = find_winner(color, car_colors)\n        if winner == 'ALICE':\n            return str(color)\n\n    return '-1'\n"
    },
    {
        "number": 364,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 364,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\nT: O(n)\nS: O(1)\ndef"
    },
    {
        "number": 364,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, A = list(map(int, stdin.split()))\n    colors = list(map(int, stdin.split()))\n    min_counts = [0] * A\n    max_counts = [0] * A\n    for color in colors:\n        min_counts[color - 1] += 1\n        max_counts[color - 1] += 1\n    for i in range(1, A):\n        min_counts[i] = min(min_counts[i], min_counts[i - 1])\n    for i in range(A - 2, -1, -1):\n        max_counts[i] = max(max_counts[i], max_counts[i + 1])\n    for color in range(A):\n        if min_counts[color] > max_counts[color]:\n            return str(color + 1)\n    return '-1'\n\nsolution('4 1')\nsolution('5 2')\nsolution('2 2 4 5 3')\n"
    },
    {
        "number": 364,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, a = stdin.split()\n    n, a = int(n), int(a)\n    colors = stdin.split()\n    colors = list(map(int, colors))\n    cnt_a = colors.count(a)\n    cnt_b = 0\n    for i in range(len(colors)):\n        if a!= colors[i]:\n            cnt_b += colors[i]\n    if cnt_a < cnt_b:\n        return str(-1)\n    for i in range(len(colors)):\n        if a!= colors[i]:\n            if cnt_b >= cnt_a:\n                cnt_a = colors[i]\n    return str(cnt_a)\n\n'''\n\n\n'''\nInput\n\nOutput\n\nSample Test Case 2\n\nExpected Output\n\n3\n\nSample Test Case 3\n\nExpected Output\n\n1\n\nSample Test Case 4\n\nExpected Output\n\n1\n\n'''\n\n'''\n\ndef"
    },
    {
        "number": 364,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, a = stdin.split()\n    n = int(n)\n    a = list(map(int, a.split()))\n    counts = []\n    for i in range(n):\n        counts.append((i+1, a[i]))\n    counts.sort()\n    b = counts[n-1][1]\n    for i in range(n):\n        if counts[i][1] == b:\n            return str(counts[i][0])\n    return '-1'\n\ndef"
    },
    {
        "number": 364,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # read data\n    n, a = map(int, stdin.split())\n    colors = list(map(int, stdin.split()))\n    colors.sort()\n    # count of the number of cars that run past a\n    cnts = [0 for _ in range(n)]\n    cnt = 0\n    # count of the number of cars that run past a\n    for i in range(n):\n        cnt += colors[i]\n        cnts[i] = cnt\n    # the answer is found\n    for i in range(n):\n        if cnts[i] >= a:\n            return str(i+1)\n    # no solution is found\n    return \"-1\"\n"
    },
    {
        "number": 364,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, a = list(map(int, stdin.split()))\n    cars = list(map(int, stdin.split()))\n\n    car_map = {}\n    for i in range(n):\n        car_map[cars[i]] = i + 1\n    car_map[a] = -1\n    res = -1\n\n    # check that no car is empty\n    if len(car_map) == 1:\n        return a\n\n    # if there are more than 1 car, we need to sort\n    # we could sort in reverse order of the car order\n    # to solve this problem\n    sorted_car = sorted(car_map.items(), key=lambda x: x[1])\n    sorted_car = sorted(sorted_car, key=lambda x: x[1], reverse=True)\n\n    # loop through the car list\n    # for each car, check if we can get the winner\n    # then return the winner if there is any\n    for car in sorted_car:\n        winner = car[1]\n        if winner > 0:\n            if winner == 1:\n                res = 1\n                break\n            else:\n                res = winner\n                break\n    if res!= -1:\n        return str(res)\n    return str(-1)"
    },
    {
        "number": 364,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, A = int(stdin.split()[0]), int(stdin.split()[1])\n\n    cnt_a = list(map(int, stdin.split()[2]))\n    cnt_b = list(map(int, stdin.split()[3]))\n    res = -1\n    sorted_a = sorted(cnt_a)\n    sorted_b = sorted(cnt_b)\n\n    for b in range(1, max(sorted_b) + 1):\n        # print(b)\n        a_b_diff = 0\n        for a in sorted_a:\n            # print(a)\n            a_b_diff += abs(a - b)\n            if a_b_diff >= n:\n                break\n        # print(a_b_diff)\n        # print()\n        if a_b_diff >= n:\n            continue\n        a_b_diff = 0\n        for b in sorted_b:\n            # print(b)\n            a_b_diff += abs(a - b)\n            if a_b_diff >= n:\n                break\n        # print(a_b_diff)\n        # print()\n        if a_b_diff >= n:\n            continue\n\n        res = b\n        break\n\n    return str(res)\n"
    },
    {
        "number": 364,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, A = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n    B = 2\n    for i in range(n):\n        if c[i] > A:\n            B = min(B, c[i])\n    return str(B) if B < A else \"-1\""
    },
    {
        "number": 365,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    length, encoding = map(int, stdin.split())\n    if length == 0 and encoding == 0:\n        return \"NO\"\n    new_encoding = []\n    for i in range(length):\n        if encoding & 1 == 1:\n            new_encoding.append(1)\n        else:\n            new_encoding.append(0)\n        encoding >>= 1\n    if encoding == 0:\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 365,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, x = stdin.split()\n    n, x = int(a), int(x)\n    for i in range(1, n + 1):\n        tmp = bin(i)\n        if x == tmp.count('1'):\n            return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 365,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    d = {}\n    for i, j in enumerate(a):\n        d[i] = j\n    if len(set(a))!= x:\n        return 'NO'\n    print(list(set(range(x)) - set(d.values())))\n    return 'YES'"
    },
    {
        "number": 365,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    for _ in range(int(stdin.split()[1])):\n        n, x = stdin.split()\n        if len(set(list(n)))!= 1:\n            return \"NO\"\n    \n        n_arr = list(n)\n        x_arr = list(map(int, x.split()))\n        \n        if len(n_arr) == len(x_arr):\n            intersection_dict = {}\n            \n            for i in range(len(n_arr)):\n                intersection_dict[n_arr[i]] = x_arr[i]\n            \n            if len(intersection_dict) == 1:\n                return \"YES\"\n            else:\n                return \"NO\"\n        else:\n            return \"NO\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 365,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    s = stdin.split()\n    l = list(map(int, s[0].split()))\n    s = list(map(int, s[1].split()))\n    print(l)\n    print(s)\n    l.sort()\n    s.sort()\n    print(l)\n    print(s)\n    if l == s:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n\nsolution(input())\n"
    },
    {
        "number": 365,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    t = []\n    t.append(x)\n    for i in range(n - 1):\n        t.append(a[i] + a[i + 1])\n    if len(t) == 1:\n        print('YES')\n    else:\n        print('NO')\n"
    },
    {
        "number": 365,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    length, num = map(int, stdin.split())\n    encoding = list(map(int, stdin.split()))\n    count = 0\n    for i in range(1, length):\n        if encoding[i - 1] == encoding[i]:\n            count += 1\n    if count == length - 1:\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 365,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    _, n, x = lines[0].split(' ')\n    n, x = int(n), int(x)\n    encoding = list(map(int, lines[1].split(' ')))\n    _, = lines[2]\n    if n == x:\n        if len(encoding) == 1 and encoding[0] == n:\n            return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 365,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    encoding = list(map(int, stdin.split()))\n\n    if (x!= sum([e for e in encoding if e!= 0])):\n        return 'NO'\n\n    return 'YES'\n"
    },
    {
        "number": 365,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    x, n = int(lines[0]), int(lines[1])\n    line = stdin.split()\n    encoding = list(map(int, line))\n    \n    for i in range(1, n + 1):\n        if x!= i:\n            encoding.append(0)\n        else:\n            encoding.append(1)\n    \n    for i in range(1, n + 1):\n        if encoding[i] == 0:\n            continue\n        else:\n            summ = 0\n            for j in range(n + 1):\n                if encoding[j] == 1:\n                    summ += 1\n            if summ!= i:\n                print('NO')\n                return\n    print('YES')\n    return"
    },
    {
        "number": 366,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, S = list(map(int, stdin.split()))\n    ans = 0\n    for i in range(1, N + 1):\n        for j in range(1, N + 1):\n            if i + j == N + 1:\n                ans += 1\n    print(ans)"
    },
    {
        "number": 366,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    S = int(stdin[1])\n    count_min = n\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (i + j + k) == S:\n                    count_min = min(count_min, 3 + i + j + k)\n    return str(count_min)\n"
    },
    {
        "number": 366,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.rstrip()\n    n, s = list(map(int, stdin.split()))\n    n = min(n, 100000)\n    s = min(s, 10 ** 9)\n    if s % n!= 0:\n        return 'Impossible'\n\n    dp = [[False] * (s + 1) for _ in range(n + 1)]\n    dp[0][0] = True\n    for i in range(1, n + 1):\n        for j in range(s, 0, -1):\n            if dp[i - 1][j]:\n                dp[i][j] = True\n\n    for i in range(n, 0, -1):\n        for j in range(s, 0, -1):\n            if dp[i - 1][j]:\n                dp[i][j] = dp[i][j - i]\n\n    coins = []\n    for i in range(n, 0, -1):\n        if dp[i][s]:\n            coins.append(i)\n    return str(len(coins))\n"
    },
    {
        "number": 366,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.rstrip()\n    n, s = [int(x) for x in stdin.split()]\n    memo = {}\n    memo[0] = 1\n    for i in range(1, n + 1):\n        if i not in memo:\n            memo[i] = 0\n        memo[i] += 1\n        if i * 2 not in memo:\n            memo[i * 2] = 0\n        memo[i * 2] += 1\n        if i * 3 not in memo:\n            memo[i * 3] = 0\n        memo[i * 3] += 1\n    count = 0\n    for i in range(n + 1):\n        if (s - i) * 2 in memo and (s - i) * 3 in memo:\n            count = max(count, min(memo[i], memo[(s - i) * 2], memo[(s - i) * 3]))\n    return str(count)\n"
    },
    {
        "number": 366,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, S = (int(i) for i in stdin.split())\n    if S > 10**9: return 'impossible'\n    if S <= 0: return '0'\n\n    coin_val = [int(i) for i in range(1, N+1)]\n\n    def solve(n):\n        if n == N:\n            return 0\n        if sum(coin_val) >= S:\n            return min(solve(n+1), 1+solve(n+1))\n        return min(solve(n+1), 1+solve(n+1))\n    return str(solve(0))\n"
    },
    {
        "number": 366,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin.split(\" \")\n    n = int(x[0])\n    s = int(x[1])\n    c = n\n    result = -1\n    while c >= 1:\n        if s <= c:\n            c = c - 1\n            s = s + c\n            result = result + 1\n    return str(result)"
    },
    {
        "number": 366,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, s = list(map(int, stdin.split()))\n    if n >= s:\n        return \"0\"\n    if n == 1:\n        return str(s)\n    if n == 2:\n        return str(s - 1)\n    if n == 3:\n        return str(s - 2)\n    \n    dp = [[[0 for _ in range(s+1)] for _ in range(n+1)] for _ in range(n+1)]\n    \n    for i in range(n+1):\n        dp[i][0][0] = 1\n    \n    for i in range(n+1):\n        for j in range(s+1):\n            if i == 0:\n                continue\n            if j == 0:\n                continue\n            for k in range(i):\n                if j < dp[k][i-1][j]:\n                    dp[i][j] = dp[k][j]\n                else:\n                    dp[i][j] = dp[k][j]\n    \n    return str(dp[n][s][s])\n    \n    \n    \n    \n        \n"
    },
    {
        "number": 366,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, s = list(map(int, stdin.split()))\n    dp = [[0 for _ in range(n + 1)] for _ in range(s + 1)]\n    for i in range(1, n + 1):\n        dp[0][i] = i\n    for j in range(1, s + 1):\n        dp[j][0] = j\n    for i in range(1, n + 1):\n        for j in range(1, s + 1):\n            if j >= dp[j][i - 1]:\n                dp[j][i] = dp[j - 1][i] + dp[j][i - 1]\n            else:\n                dp[j][i] = dp[j][i - 1]\n    print(dp[-1][-1])\n    return"
    },
    {
        "number": 366,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    A function which takes input as strings and returns a string of integers \n    representing the smallest number of coins needed to get the sum.\n    '''\n    n,s = map(int,stdin.split())\n    coins = [int(i) for i in range(n+1)]\n    coins.insert(0,0)\n    dp = [0]*(s+1)\n    for i in range(1,len(dp)):\n        dp[i] = float(\"inf\")\n        for j in range(len(coins)):\n            if i-coins[j] >= 0:\n                dp[i] = min(dp[i],dp[i-coins[j]]+1)\n    return dp[s] if dp[s] < float(\"inf\") else -1"
    },
    {
        "number": 366,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    dp = [[0]*(s+1) for _ in range(n+1)]\n    \n    for i in range(n, 0, -1):\n        for j in range(1, s+1):\n            if i == 1:\n                dp[i][j] = j\n            else:\n                for k in range(1, j):\n                    if j - k > i:\n                        break\n                    dp[i][j] = min(dp[i][j], 1 + dp[i - 1][j - k])\n    \n    return dp[n][s]"
    },
    {
        "number": 367,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    ans = s[:]\n    while True:\n        count = 0\n        for i in range(len(s)):\n            if s[i]!= s[-i - 1]:\n                count += 1\n                s = s[:i] + s[i + 1:]\n                break\n        if count <= 1:\n            break\n    if count > 1:\n        s = s[1:-1]\n    return s"
    },
    {
        "number": 367,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    while True:\n        chars = []\n        for i in range(len(s)):\n            if s[i] not in chars:\n                chars.append(s[i])\n            else:\n                s = s[:i] + s[i + 1:]\n                break\n        if len(s) == len(chars):\n            return s\n        s = s[:len(s) // 2] + s[len(s) // 2 + 1:]\n\nsolution(\"aabcd\")\n\n\n\n\"\"\"\n\ns = input()\n\nn = len(s)\n\nwhile n > 1:\n    for i in range(n // 2):\n        if s[i]!= s[n - i - 1]:\n            s = s[:i] + s[i + 1] + s[i] + s[n - i - 1] + s[i + 1] + s[n - i - 1] + s[i + 2:]\n            break\n    n //= 2\n\nprint(s)"
    },
    {
        "number": 367,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    if not stdin:\n        return stdin\n    count_a = 0\n    for letter in stdin:\n        if letter == 'a':\n            count_a += 1\n    min_palindrome = stdin\n    for i in range(1, len(stdin) + 1):\n        for j in range(len(stdin)):\n            if stdin[j:j+i]!= stdin[:len(stdin)-i+1]:\n                continue\n            if len(stdin[j:j+i]) > len(min_palindrome):\n                min_palindrome = stdin[j:j+i]\n    if count_a >= 2:\n        return min_palindrome\n    return 'a' + min_palindrome[1:] + min_palindrome[:1]\n\n\ndef"
    },
    {
        "number": 367,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input_string = stdin\n    string_len = len(input_string)\n\n    count = 0\n    results = []\n\n    if string_len % 2 == 0:\n        for i in range(string_len - 1):\n            if input_string[i]!= input_string[i+1]:\n                # print(i)\n                # print(input_string[i])\n                # print(input_string[i+1])\n                new_string = input_string[:i] + input_string[i+1] + input_string[i] + input_string[i+2:]\n                # print(new_string)\n                # print(new_string)\n                if new_string == new_string[::-1]:\n                    count += 1\n                    results.append(new_string)\n\n    else:\n        for i in range(string_len - 1):\n            if input_string[i]!= input_string[i+1]:\n                # print(i)\n                # print(input_string[i])\n                # print(input_string[i+1])\n                new_string = input_string[:i] + input_string[i+1] + input_string[i] + input_string[i+2:]\n                # print(new_string)\n                # print(new_string)\n                if new_string == new_string[::-1]:\n                    count += 1\n                    results.append(new_string)\n    \n    return min(results)\n"
    },
    {
        "number": 367,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    s = stdin\n    s = sorted(s)\n    count = 0\n    while True:\n        s = sorted(s)\n        if s == s[::-1]:\n            break\n        for i in range(len(s) - 1):\n            if s[i] == s[i + 1]:\n                continue\n            else:\n                break\n        s = s[:i] + s[i + 1:]\n        count += 1\n    return \"\".join(s)\n"
    },
    {
        "number": 367,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    str_list = stdin.split()\n    str_list = sorted(str_list, reverse=True)\n    s = str_list[0]\n    print(s)\n    return s"
    },
    {
        "number": 367,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    moves = []\n    s = stdin.strip()\n    l = len(s)\n    \n    def change(p, s):\n        l, r = 0, len(s)-1\n        while l <= r:\n            while l <= r and s[l] == p:\n                l += 1\n            while l <= r and s[r] == p:\n                r -= 1\n            if l <= r:\n                s = s[:l] + p + s[l+1:]\n        return s\n    \n    def dfs(s, steps):\n        if len(s) == l:\n            moves.append(steps)\n            return\n        for i in range(l):\n            if s[i]!= s[l-i-1]:\n                continue\n            if i == 0 or s[i]!= s[i-1]:\n                s = change(s[i], s)\n                dfs(s, steps + 1)\n                s = s[:i] + s[i+1:]\n    \n    dfs(s, 0)\n    moves.sort()\n    return moves[0]\n\nsolution('aabc')\nsolution('aabcd')\n"
    },
    {
        "number": 367,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    for i in range(len(s)):\n        if s[i] == s[-1-i]:\n            continue\n        s_shifted = s[i:] + s[:i]\n        if s_shifted == s_shifted[::-1]:\n            return s\n    for i in range(len(s)):\n        s_shifted = s[i:] + s[:i]\n        if s_shifted == s_shifted[::-1]:\n            return s\n    for i in range(len(s)):\n        s_shifted = s[i:] + s[:i]\n        if s_shifted == s_shifted[::-1]:\n            return s\n    return s[::-1]\n\nprint(solution(input()))"
    },
    {
        "number": 367,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    s = \"a\" + s.replace(\"a\", \"\") + \"a\"\n    if s == \"a\":\n        return \"a\"\n    min_changes = 0\n    for i in range(len(s)):\n        if s[i]!= s[-i - 1]:\n            break\n        min_changes += 1\n    if min_changes == 0:\n        return s\n    min_pal = None\n    min_changes = float(\"inf\")\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if j == i:\n                continue\n            if min_pal is None:\n                min_pal = s[i:j + 1]\n            elif len(min_pal) > j - i - 1:\n                min_pal = min_pal[:-1]\n            if min_pal == s[i:j + 1]:\n                if j - i < min_changes:\n                    min_changes = j - i\n                    min_pal = s[i:j + 1]\n    return min_pal\n"
    },
    {
        "number": 367,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    \n    while True:\n        odds = 0\n        evens = 0\n        if s[0] == s[-1]:\n            break\n        for i in range(len(s)):\n            if i % 2 == 0 and s[i]!= s[i+1]:\n                odds += 1\n            if i % 2 == 1 and s[i]!= s[i-1]:\n                evens += 1\n        if odds > evens:\n            s = s[1:-1]\n        elif odds < evens:\n            s = s[:-1] + s[-1] + s[1:-1]\n        \n        \n    return s\n"
    },
    {
        "number": 368,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    positions = stdin.split(\"\\n\")\n    white_positions = 0\n    black_positions = 0\n    black_tokens = \"qrbnpk\"\n    white_tokens = \"qrbnpk\"\n\n    for i in range(8):\n        for j in range(8):\n            if positions[i][j] in white_tokens:\n                white_positions += 1\n            elif positions[i][j] in black_tokens:\n                black_positions += 1\n    if white_positions > black_positions:\n        return \"White\"\n    elif white_positions < black_positions:\n        return \"Black\"\n    else:\n        return \"Draw\"\n"
    },
    {
        "number": 368,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  pass"
    },
    {
        "number": 368,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    black_pieces, white_pieces = stdin.split('\\n')\n    black_pieces = black_pieces.split('.')\n    white_pieces = white_pieces.split('.')\n    black_weight = 0\n    white_weight = 0\n    for i in range(len(black_pieces)):\n        black_weight += int(black_pieces[i])\n        white_weight += int(white_pieces[i])\n    if black_weight > white_weight:\n        return 'Black'\n    if white_weight > black_weight:\n        return 'White'\n    return 'Draw'"
    },
    {
        "number": 368,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    size = int(lines[0])\n    win = 0\n    lose = 0\n    for line in lines[1:]:\n        white = 0\n        black = 0\n        line = line.replace(\".\",\"\")\n        for char in line:\n            if char.isupper():\n                white += 1\n            elif char.islower():\n                black += 1\n        if white > black:\n            win += 1\n        elif black > white:\n            lose += 1\n    if win > lose:\n        return \"White\"\n    if lose > win:\n        return \"Black\"\n    return \"Draw\"\nprint(solution(input()))"
    },
    {
        "number": 368,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(n)\n    \"\"\"\n    board = stdin.split('\\n')\n    white = {'Q': 9, 'R': 5, 'B': 3, 'N': 3, 'P': 1, 'K': 0, '.': 0}\n    black = {'Q': 16, 'R': 5, 'B': 3, 'N': 3, 'P': 1, 'K': 0, '.': 0}\n    for i in range(8):\n        for j in range(8):\n            if board[i][j] in white:\n                white[board[i][j]] += 1\n            if board[i][j] in black:\n                black[board[i][j]] += 1\n    if black['Q'] > white['Q']:\n        return \"Black\"\n    elif black['Q'] < white['Q']:\n        return \"White\"\n    else:\n        return \"Draw\"\n"
    },
    {
        "number": 368,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    import re\n    def my_function(stdin):\n        matches = re.findall(r\"(.+)?(\\w+)\", stdin)\n        result = []\n        for (first_element, second_element) in matches:\n            first_element_tuple = list(map(lambda x: ord(x), first_element))\n            second_element_tuple = list(map(lambda x: ord(x), second_element))\n            result.append(sum(first_element_tuple) - sum(second_element_tuple))\n        return result\n\n    return str(sum(my_function(stdin)))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 368,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin_list = stdin.split()\n    white_pieces = {\n        'Q': 9,\n        'R': 5,\n        'B': 3,\n        'N': 3,\n        'P': 1,\n        'K': 0\n    }\n    black_pieces = {\n        'q': 9,\n        'r': 5,\n        'b': 3,\n        'n': 3,\n        'p': 1,\n        'k': 0\n    }\n    white_weight = 0\n    black_weight = 0\n    if stdin_list[0] == 'r':\n        return 'Black' if white_weight < black_weight else 'White'\n    elif stdin_list[0] == 'q':\n        white_weight += white_pieces['Q']\n        black_weight += black_pieces['Q']\n    elif stdin_list[0] == 'k':\n        white_weight += white_pieces['K']\n        black_weight += black_pieces['K']\n    elif stdin_list[0] == 'r':\n        white_weight += white_pieces['R']\n        black_weight += black_pieces['R']\n    elif stdin_list[0] == 'b':\n        white_weight += white_pieces['B']\n        black_weight += black_pieces['B']\n    elif stdin_list[0] == 'n':\n        white_weight += white_pieces['N']\n        black_weight += black_pieces['N']\n    elif stdin_list[0] == 'p':\n        white_weight += white_pieces['P']\n        black_weight += black_pieces['P']\n    else:\n        white_weight += white_pieces[stdin_list[0]]\n        black_weight += black_pieces[stdin_list[0]]\n    if stdin_list[1] == 'r':\n        white_weight += white_pieces['R']\n        black_weight += black_pieces['R']\n    elif stdin_list[1] == 'k':\n        white_weight += white_pieces['K']\n        black_weight += black_pieces['K']\n    elif stdin_list[1] == 'b':\n        white_weight += white_pieces['B']\n        black_weight += black_pieces['B']\n    elif stdin_list[1] == 'n':\n        white_weight += white_pieces['N']\n        black_weight += black_pieces['N']\n    elif stdin_list[1] == 'p':\n        white_weight += white_pieces['P']\n        black_weight += black_pieces['P']\n    else:\n        white_weight += white_pieces[stdin_list[1]]\n        black_weight += black_pieces[stdin_list[1]]\n    if stdin_list[2] == 'r':\n        white_weight += white_pieces['R']\n        black_weight += black_pieces['R']\n    elif stdin_list[2] == 'k':\n        white_weight += white_pieces['K']\n        black_weight += black_pieces['K']\n    elif stdin_list[2] == 'b':\n        white_weight += white_pieces['B']\n        black_weight += black_pieces['B']\n    elif stdin_list[2] == 'n':\n        white_weight += white_pieces['N']\n        black_weight += black_pieces['N']\n    elif stdin_list[2] == 'p':\n        white_weight += white_pieces['P']\n        black_weight += black_pieces['P']\n    else:\n        white_weight += white_pieces[stdin_list[2]]\n        black_weight += black_pieces[stdin_list[2]]\n    if stdin_list[3] == 'r':\n        white_weight += white_pieces['R']\n        black_weight += black_pieces['R']\n    elif stdin_list[3] == 'k':\n        white_weight += white_pieces['K']\n        black_weight += black_pieces['K']\n    elif stdin_list[3] == 'b':\n        white_weight += white_pieces['B']\n        black_weight += black_pieces['B']\n    elif stdin_list[3] == 'n':\n        white_weight += white_pieces['N']\n        black_weight += black_pieces['N']\n    elif stdin_list[3] == 'p':\n        white_weight += white_pieces['P']\n        black_weight += black_pieces['P']\n    else:\n        white_weight += white_pieces[stdin_list[3]]\n        black_weight += black_pieces[stdin_list[3]]\n    if stdin_list[4] == 'r':\n        white_weight += white_pieces['R']\n        black_weight += black_pieces['R']\n    elif stdin_list[4] == 'k':\n        white_weight += white_pieces['K']\n        black_weight += black_pieces['K']\n    elif stdin_list[4] == 'b':\n        white_weight += white_pieces['B']\n        black_weight += black_pieces['B']\n    elif stdin_list[4] == 'n':\n        white_weight += white_pieces['N']\n        black_weight += black_pieces['N']\n    elif stdin_list[4] == 'p':\n        white_weight += white_pieces['P']\n        black_weight += black_pieces['P']\n    else:\n        white_weight += white_pieces[stdin_list[4]]\n        black_weight += black_pieces[stdin_list[4]]\n    if stdin_list[5] == 'r':\n        white_weight += white_pieces['R']\n        black_weight += black_pieces['R']\n    elif stdin_list[5] == 'k':\n        "
    },
    {
        "number": 368,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    n = len(stdin[0])\n    a = [[0]*n for _ in range(n)]\n    b = [[0]*n for _ in range(n)]\n    white = 0\n    black = 0\n    for i in range(n):\n        for j in range(n):\n            if stdin[0][i][j] == 'Q':\n                a[i][j] = 9\n                white += 9\n            elif stdin[0][i][j] == 'R':\n                a[i][j] = 5\n                white += 5\n            elif stdin[0][i][j] == 'B':\n                a[i][j] = 3\n                white += 3\n            elif stdin[0][i][j] == 'N':\n                a[i][j] = 3\n                white += 3\n            elif stdin[0][i][j] == 'P':\n                a[i][j] = 1\n                white += 1\n            elif stdin[0][i][j] == 'K':\n                a[i][j] = 0\n                white += 0\n            if stdin[1][i][j] == 'Q':\n                b[i][j] = 9\n                black += 9\n            elif stdin[1][i][j] == 'R':\n                b[i][j] = 5\n                black += 5\n            elif stdin[1][i][j] == 'B':\n                b[i][j] = 3\n                black += 3\n            elif stdin[1][i][j] == 'N':\n                b[i][j] = 3\n                black += 3\n            elif stdin[1][i][j] == 'P':\n                b[i][j] = 1\n                black += 1\n            elif stdin[1][i][j] == 'K':\n                b[i][j] = 0\n                black += 0\n            if i > 0:\n                a[i][j] += a[i-1][j]\n            if i < n-1:\n                a[i][j] += a[i+1][j]\n            if j > 0:\n                a[i][j] += a[i][j-1]\n            if j < n-1:\n                a[i][j] += a[i][j+1]\n\n            if i > 0:\n                b[i][j] += b[i-1][j]\n            if i < n-1:\n                b[i][j] += b[i+1][j]\n            if j > 0:\n                b[i][j] += b[i][j-1]\n            if j < n-1:\n                b[i][j] += b[i][j+1]\n        print(i)\n    if white > black:\n        return \"White\"\n    if white < black:\n        return \"Black\"\n    if white == black:\n        return \"Draw\"\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 368,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    in_black = [r for r in stdin.split()]\n    white = []\n    black = []\n    for r in in_black:\n        if r.isupper():\n            white.append(r)\n        else:\n            black.append(r)\n    white.sort(key=lambda x: ord(x))\n    black.sort(key=lambda x: ord(x))\n    if white == black:\n        return 'Draw'\n    elif white > black:\n        return 'White'\n    else:\n        return 'Black'\nsolution(\"rppppppr\")\nsolution(\"rnbqkbnr\")\nsolution(\"rppppppr\")\nsolution(\"rnbqkbnr\")\nsolution(\"rnbqkbnr\")\n\n1. White position is more than the black\n2. White position is more than the black\n\n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> \n>>> "
    },
    {
        "number": 368,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    white = stdin.split('\\n')\n    black = white[::-1]\n    white = list(map(lambda x:x.replace('.',''), white))\n    black = list(map(lambda x:x.replace('.',''), black))\n    white_weight = 0\n    black_weight = 0\n    for i in range(len(white)):\n        white_weight += int(white[i][0])\n    for i in range(len(black)):\n        black_weight += int(black[i][0])\n    if white_weight > black_weight:\n        return \"White\"\n    elif white_weight < black_weight:\n        return \"Black\"\n    else:\n        return \"Draw\"\n\nsolution(input())\n"
    },
    {
        "number": 369,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n, m = stdin[0], stdin[1]\n    s = stdin[2]\n    s_set = set(s)\n    ans = []\n    if n == m and len(s_set) == 1:\n        return '1' if s_set.pop() == '1' else '-1'\n    while True:\n        if len(s_set) == 1 and s_set.pop() == '1':\n            return '1' +''.join(map(str, ans))\n        if len(s_set) == 1 and s_set.pop() == '0':\n            return '-1'\n        if len(s_set) == 0:\n            return '-1'\n        if len(s_set) == 1 and s_set.pop() == '1':\n            ans.append(0)\n        else:\n            ans.append(1)\n        s = ''.join(sorted(s))\n        for i in range(len(s)):\n            if s[i] == '1':\n                if s_set.pop() == '1':\n                    ans[i] = 1\n                else:\n                    break\n            else:\n                break\n        if len(s_set) == 0:\n            return '-1'\n    return''.join(map(str, ans))\n"
    },
    {
        "number": 369,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    s = list(stdin)\n    res = []\n    for i in range(n + 1):\n        if s[i] == '1':\n            res.append(i)\n    if len(res) == 1:\n        return '-1'\n    else:\n        for j in range(len(res)):\n            for k in range(j + 1, len(res)):\n                if res[j] + res[k] == n:\n                    return str(res[j]) +'' + str(res[k])\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 369,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    s = stdin[n + 1:]\n    x = {1, 2, 3, 4, 5, 6, 7, 8, 9}\n    _x = {1, 2, 3, 4, 5, 6, 7, 8, 9}\n    for i in range(n):\n        _x = {i for i in x if i + i in _x} | x\n        x = {i for i in _x if i + i in x}\n    if len(x) <= m:\n        return '-1'\n    return''.join(map(str, sorted(x)[:m]))\n"
    },
    {
        "number": 369,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.strip().split()))\n    s = stdin.strip()\n    first_won = []\n    for i in range(n):\n        if s[i] == '1':\n            first_won.append(i)\n    if len(first_won) == 0:\n        return -1\n    else:\n        return''.join([str(i) for i in first_won])\n"
    },
    {
        "number": 369,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    board = stdin.replace('0','')\n    board = stdin.replace('1', 'X')\n    n = len(board)\n    result = ''\n    for i in range(n):\n        if board[i] == 'X':\n            board = board[:i] +'' + board[i + 1:]\n            break\n    for i in range(n):\n        if board[i] == 'X':\n            board = board[:i] +'' + board[i + 1:]\n            break\n    if len(board)!= 0:\n        return -1\n    for i in range(n - 1):\n        for j in range(n - i - 1):\n            if j == 0 and i == 0:\n                if board[i] == '0':\n                    board = board[:i] +'' + board[i + 1:]\n                    break\n                if board[i] == '1':\n                    board = board[:i] +'' + board[i + 1:]\n                    break\n            if board[j] == '1' and board[j + 1] == '0':\n                board = board[:j] +'' + board[j + 1:]\n                break\n            if board[j] == '1' and board[j + 1] == '1':\n                board = board[:j] +'' + board[j + 1:]\n                break\n        if board[i] == '0' or board[i] == '1':\n            break\n    if len(board)!= 0:\n        return -1\n    l = list(range(M))\n    r = 0\n    for i in range(n):\n        if board[i] == '1':\n            r += 1\n        else:\n            l.pop(r)\n            r -= 1\n    if r!= 0:\n        return''.join([str(i) for i in l])\n    l.append(M)\n    l = sorted(l)\n    result =''.join([str(i) for i in l])\n    return result\n"
    },
    {
        "number": 369,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    s = stdin.replace(\" \", \"\")\n    ss = \"0\" * (n + 1)\n    if \"0\" in s:\n        return -1\n    k = 0\n    while ss!= s:\n        for i in range(n + 1):\n            if int(ss[i]) == 1 and int(s[i]) == 1:\n                ss = ss[:i] + \"0\" + ss[i + 1:]\n                break\n            elif int(ss[i]) == 1 and int(s[i]) == 0:\n                ss = ss[:i] + \"1\" + ss[i + 1:]\n                break\n        k += 1\n    return str(k)\n"
    },
    {
        "number": 369,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split()\n    n, m = int(lines[0]), int(lines[1])\n    s = lines[2]\n\n    # Initialize array for storing results\n    res = [-1]\n\n    # Initialize pointers for keeping track of squares\n    left = 0\n    right = 0\n\n    # Loop through s and compute number of turns to reach square\n    while left < n:\n        # If the square is Game Over\n        if s[left] == '1':\n            break\n\n        # If the square is not Game Over\n        if s[left] == '0':\n            right += 1\n\n        # Update left and right pointers\n        if right == m:\n            # If the game is over, update the result\n            res.append(right)\n            break\n\n        left += 1\n        right += 1\n\n    # If the game is not over, return -1\n    if left == n:\n        res.append(-1)\n        return''.join([str(x) for x in res])\n\n    return''.join([str(x) for x in res])\n\nprint(solution(input()))\n\nOUTPUT\n"
    },
    {
        "number": 369,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.strip().split())\n    s = stdin.strip().replace(\"0\", \"o\")\n    s = stdin.strip().replace(\"1\", \"x\")\n\n    go_to_s = {}\n    index = N\n\n    for i in range(1, N+1):\n        go_to_s[i] = set()\n\n    for i in range(N):\n        if s[i] == \"1\":\n            go_to_s[index].add(i)\n\n        index -= 1\n    \n    for i in range(1, M+1):\n        visited = set()\n\n        if index == 0:\n            for x in go_to_s[i]:\n                if s[x] == \"1\":\n                    visited.add(x)\n\n            if len(visited) == N-1:\n                return \"\".join(map(str, sorted(list(visited))))\n\n        for j in range(1, N+1):\n            if s[index] == \"0\":\n                if j in go_to_s[i]:\n                    visited.add(j)\n            else:\n                visited.add(j)\n\n            if len(visited) == N-1:\n                return \"\".join(map(str, sorted(list(visited))))\n\n            index -= 1\n\n\n    return -1\n"
    },
    {
        "number": 369,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    n, m = list(map(int, sys.stdin.readline().split()))\n    s = sys.stdin.readline()\n    s = list(map(int, s.split()))\n    odd = 0\n    for i in range(n):\n        if s[i] == 1:\n            odd += 1\n            if odd == m:\n                return '-1'\n    if odd > 0:\n        return '-1'\n    s = sorted(s)\n    print(*s[::2])\n"
    },
    {
        "number": 369,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M = list(map(int, stdin.split()))\n    S = list(map(int, stdin.split()))\n    # Make S to be 0,1\n    for i in range(N+1):\n        if S[i] == 1:\n            S[i] = i\n    # print(S)\n    R = list(range(1,M+1))\n    ans = []\n    def rec(S, R, n):\n        if n == len(R):\n            return -1\n        if S[n]!= n:\n            return rec(S, R, n+1)\n        if n == len(R):\n            return\n        for i in range(1,M+1):\n            new = S[0:n] + [i] + S[n+1:]\n            ans.append(new)\n            rec(new, R, n+1)\n    rec(S, R, 0)\n    return min(ans, key=len)\n\nsolution(\"6 4\\n1 1 1 1 1 1\\n\")"
    },
    {
        "number": 370,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    dx, dy = (0, 1), (1, 0)\n    x_, y_, score = 0, 0, 0\n    for i in range(n):\n        x, y = map(int, stdin.split())\n        x_ += dx[i % 2]\n        y_ += dy[i % 2]\n        score = max(score, abs(x_ - x) + abs(y_ - y))\n    if score < k:\n        return '-1'\n    if score == k:\n        return str(x_) +'' + str(y_)\n    res = str(x_) +'' + str(y_)\n    for i in range(k - score):\n        x, y = map(int, stdin.split())\n        x_ += dx[i % 2]\n        y_ += dy[i % 2]\n        res +='' + str(x_) +'' + str(y_)\n    return res\n"
    },
    {
        "number": 370,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    k, x, y = map(int, stdin.split())\n    min_score = float('inf')\n    for i in range(10**4):\n        distance = abs(i-x)+abs(i-y)\n        if distance == k:\n            min_score = min(min_score, i+k)\n        elif distance < k:\n            min_score = min(min_score, i)\n        else:\n            break\n    if min_score == float('inf'):\n        return '-1'\n    return str(min_score)\n"
    },
    {
        "number": 370,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    K, X, Y = map(int, stdin.strip().split())\n\n    if K < 0 or X < -10 or Y < -10 or X > 10 or Y > 10:\n        return -1\n\n    positions = []\n    for i in range(K + 1):\n        positions.append((X, Y))\n        if K!= 0:\n            K -= 1\n\n    positions.sort(key=lambda x: abs(x[0]) + abs(x[1]))\n    if positions[0]!= (X, Y):\n        return -1\n\n    ans = \"\"\n    for position in positions:\n        ans += str(position[0]) + \" \" + str(position[1]) + \"\\n\"\n\n    return ans[:-1]\n\"\"\"\n"
    },
    {
        "number": 370,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    arr = list(map(int, stdin.split()))\n    k = arr[0]\n    x, y = arr[1:]\n    min_dis = 10**9\n    x_dir = 0\n    y_dir = 0\n    x_cord = 0\n    y_cord = 0\n    for i in range(k):\n        if x_dir == -1 and y_dir == 0:\n            if abs(x_cord - x) + abs(y_cord - y) <= min_dis:\n                min_dis = abs(x_cord - x) + abs(y_cord - y)\n                if x_cord == x and y_cord == y:\n                    print(min_dis)\n                    return\n            x_cord = x_cord + 1\n        elif x_dir == 1 and y_dir == 0:\n            if abs(x_cord - x) + abs(y_cord - y) <= min_dis:\n                min_dis = abs(x_cord - x) + abs(y_cord - y)\n                if x_cord == x and y_cord == y:\n                    print(min_dis)\n                    return\n            x_cord = x_cord - 1\n        elif x_dir == 0 and y_dir == 1:\n            if abs(x_cord - x) + abs(y_cord - y) <= min_dis:\n                min_dis = abs(x_cord - x) + abs(y_cord - y)\n                if x_cord == x and y_cord == y:\n                    print(min_dis)\n                    return\n            y_cord = y_cord - 1\n        elif x_dir == 0 and y_dir == -1:\n            if abs(x_cord - x) + abs(y_cord - y) <= min_dis:\n                min_dis = abs(x_cord - x) + abs(y_cord - y)\n                if x_cord == x and y_cord == y:\n                    print(min_dis)\n                    return\n            y_cord = y_cord + 1\n\n        if abs(x_dir - x_cord) + abs(y_dir - y_cord) > abs(x_cord - x) + abs(y_cord - y):\n            x_dir = x_dir - 1 if x_dir > x_cord else x_dir\n        else:\n            x_dir = x_dir + 1 if x_dir < x_cord else x_dir\n        if abs(x_dir - x) + abs(y_dir - y) > abs(x_cord - x) + abs(y_cord - y):\n            y_dir = y_dir - 1 if y_dir > y_cord else y_dir\n        else:\n            y_dir = y_dir + 1 if y_dir < y_cord else y_dir\n    print(-1)\n    return\n\nsolution(stdin)\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 370,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    X, Y, K = map(int, stdin.split())\n    grid = [[0]*(X+1) for _ in range(Y+1)]\n    for i in range(K):\n        x, y = map(int, input().split())\n        grid[y][x] = i+1\n    for row in grid:\n        print(*row)\n    for i in range(len(grid)):\n        if i == 0:\n            continue\n        for j in range(len(grid[i])):\n            if j == 0:\n                continue\n            if grid[i-1][j] == grid[i][j-1] == grid[i-1][j-1]:\n                grid[i][j] = grid[i-1][j-1]\n    score = 0\n    for row in grid:\n        for elem in row:\n            if elem > score:\n                score = elem\n    if score == 0:\n        return -1\n    for i in range(len(grid)):\n        if i == 0:\n            continue\n        for j in range(len(grid[i])):\n            if j == 0:\n                continue\n            if grid[i-1][j] == grid[i][j-1] == grid[i-1][j-1]:\n                return str(score)+\" \" + \" \".join(map(str, [i-1, j-1]))\n    return -1\n"
    },
    {
        "number": 370,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.strip())\n    x, y = map(int, stdin.strip().split())\n    dx, dy = x, y\n    scores = []\n\n    for i in range(10000):\n        dx, dy = (dx - k, dy - k) if dx > k else (dx + k, dy + k)\n        scores.append(dx + dy)\n\n    res = min(scores)\n    return str(res) if res < 10000 else '-1'\n"
    },
    {
        "number": 370,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n\n    # x, y = 2, 6\n    # x, y = 6, 8\n    # x, y = 3, 5\n    # x, y = 5, 8\n    # x, y = 2, 4\n    # x, y = 9, 2\n    # x, y = 1, 3\n    # x, y = 7, 2\n    # x, y = 2, 1\n    # x, y = 4, 2\n    # x, y = 1, 6\n\n    x, y = input().split()\n\n    x, y = int(x), int(y)\n\n    # x, y = 3, 4\n    # x, y = 5, 2\n    # x, y = 2, 6\n    # x, y = 4, 5\n    # x, y = 7, 8\n    # x, y = 9, 7\n    # x, y = 1, 7\n    # x, y = 5, 1\n    # x, y = 4, 3\n\n    # x, y = 9, 5\n    # x, y = 1, 8\n    # x, y = 6, 1\n    # x, y = 8, 3\n    # x, y = 2, 6\n    # x, y = 3, 5\n    # x, y = 1, 5\n    # x, y = 8, 1\n    # x, y = 5, 6\n    # x, y = 7, 1\n\n    # x, y = 2, 4\n    # x, y = 3, 5\n    # x, y = 4, 7\n    # x, y = 5, 8\n    # x, y = 7, 1\n    # x, y = 8, 2\n    # x, y = 9, 3\n    # x, y = 1, 6\n    # x, y = 5, 7\n    # x, y = 6, 8\n\n    # x, y = 2, 4\n    # x, y = 5, 2\n    # x, y = 8, 5\n    # x, y = 9, 8\n    # x, y = 1, 4\n    # x, y = 3, 7\n    # x, y = 5, 1\n    # x, y = 8, 7\n    # x, y = 6, 1\n    # x, y = 5, 3\n\n    # x, y = 2, 3\n    # x, y = 5, 1\n    # x, y = 9, 2\n    # x, y = 7, 6\n    # x, y = 4, 8\n    # x, y = 1, 7\n    # x, y = 2, 7\n    # x, y = 8, 4\n    # x, y = 6, 1\n    # x, y = 5, 8\n\n    # x, y = 3, 5\n    # x, y = 7, 6\n    # x, y = 1, 3\n    # x, y = 5, 8\n    # x, y = 8, 5\n    # x, y = 2, 8\n    # x, y = 7, 8\n    # x, y = 6, 2\n    # x, y = 4, 4\n\n    # x, y = 8, 6\n    # x, y = 9, 1\n    # x, y = 2, 6\n    # x, y = 3, 7\n    # x, y = 6, 3\n    # x, y = 8, 5\n    # x, y = 1, 7\n    # x, y = 7, 5\n    # x, y = 5, 9\n    # x, y = 2, 3\n\n    # x, y = 5, 1\n    # x, y = 8, 2\n    # x, y = 1, 5\n    # x, y = 2, 6\n    # x, y = 3, 6\n    # x, y = 5, 8\n    # x, y = 1, 7\n    # x, y = 8, 5\n    # x, y = 9, 2\n    # x, y = 4, 5\n\n    # x, y = 9, 8\n    # x, y = 8, 7\n    # x, y = 6, 3\n    # x, y = 1, 8\n    # x, y = 3, 1\n    # x, y = 4, 3\n    # x, y = 5, 7\n    # x, y = 6, 1\n    # x, y = 7, 3\n    # x, y = 1, 6\n\n    # x, y = 9, 8\n    # x, y = 5, 3\n    # x, y = 4, 6\n    # x, y = 2, 7\n    # x, y = 5, 5\n    # x, y = 7, 1\n    # x, y = 1, 7\n    # x, y = 7, 7\n    # x, y = 5, 4\n    # x, y = 8, 1\n\n    # x, y = 2, 3\n    # x, y = 3, 4\n    # x, y = 6, 3\n    # x, y = 7, 5\n    # x, y = 5, 7\n    # x, y = 7, 7\n    # x, y = 4, 8\n    # x, y = 2, 6\n    # x, y = 4, 1\n    # x, y = 8, 5\n\n    # x, y = 1, 1\n    # x, y = 1, 2\n    # x, y = 2, 1\n    # x, y = 2, 2\n    # x, y = 2, 3\n    # x, y = 2, 5\n    # x, y = 8, 1\n    # x, y = 8, 2\n    # x, y = 8, 3\n    # x, y = 8, 4\n    # x, y = 8, 5\n    # x, y = 8, 6\n    # x, y = 8, 7\n    # x, y = 8, 8\n    # x, y = 2, 6\n\n    # x, y = 2, 7\n    # x, y = 3, 2\n    # x, y = 8, 1\n    # x, y = 9, 3\n    # x, y = 5, 5\n    # x, y = 6, 8\n    # x, y = 8, 6\n    # x, y = 4, 7\n    # x, y = 8, 7\n    # x, y = 3,"
    },
    {
        "number": 370,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Write an answer using any of the algorithms that you want.\n    \"\"\"\n    import heapq\n    from functools import reduce\n\n    def manhattan_distance(x, y):\n        return abs(x[0] - y[0]) + abs(x[1] - y[1])\n\n    k, X, Y = list(map(int, stdin.split()))\n\n    if not (1 <= X <= 10^5 and 1 <= Y <= 10^5):\n        return -1\n\n    q = []\n    start_pos = (0, 0)\n    heapq.heappush(q, (0, start_pos))\n    visited = set()\n    while q:\n        dist, pos = heapq.heappop(q)\n        visited.add(pos)\n        if pos == (X, Y):\n            return dist\n        for n in range(k):\n            move_pos = (pos[0] + 1 if n == 0 else pos[0] - 1,\n                        pos[1] + 1 if n == 0 else pos[1] - 1)\n            if move_pos not in visited:\n                heapq.heappush(q, (dist + 1, move_pos))\n    return -1\n"
    },
    {
        "number": 370,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    inf = 10**9\n    k, x, y = list(map(int, stdin.split()))\n    return '-1' if inf > k else str(k) +'' + str(x) +'' + str(y)\n"
    },
    {
        "number": 370,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.strip())\n    x, y = map(int, stdin.split())\n    min_score = k\n    min_pos = (0, 0)\n    if k < -10**5 or x < -10**5 or y < -10**5:\n        return -1\n    if x == y == 0:\n        return \"0 {} {}\".format(0, 0)\n    x_array = [-1, -1, 0, 1, 1, 1, 0, -1]\n    y_array = [0, 1, 1, 1, 0, -1, -1, -1]\n    for i in range(8):\n        temp_x = x + x_array[i]\n        temp_y = y + y_array[i]\n        if 0 <= temp_x <= 10**5 and 0 <= temp_y <= 10**5:\n            min_score = min(min_score, abs(temp_x-x) + abs(temp_y-y))\n            min_pos = (temp_x, temp_y) if min_score == abs(temp_x - x) + abs(temp_y - y) else min_pos\n    return \"1 {} {}\".format(*min_pos)\n"
    },
    {
        "number": 371,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"8\"\n    else:\n        m = int(n * (n - 1) / 2)\n        return str(m)\n\n\ndef"
    },
    {
        "number": 371,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    m = 0\n    while m < 10:\n        if n % (m + 1) == 0:\n            return str(n // (m + 1))\n        m += 1\n    return -1\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 371,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    m, = [int(x) for x in stdin.split()]\n    return str(m) if m <= 2 else str(m + 1) if m % 2 else str(m - 1)\n"
    },
    {
        "number": 371,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    chocolates = (1, 2, 4, 8)\n    if n == 1:\n        return str(chocolates[0])\n    for i in range(len(chocolates)):\n        if n == chocolates[i]:\n            return str(chocolates[i])\n    else:\n        return \"-1\"\n"
    },
    {
        "number": 371,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return stdout\n"
    },
    {
        "number": 371,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return"
    },
    {
        "number": 371,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin)\n    s = 0\n    for x in range(1, m + 1):\n        s += x * 2 + 4\n        if s > m:\n            break\n    return str(s)\n\n\ndef"
    },
    {
        "number": 371,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Given an integer m, return the smallest possible value of n that leads to exactly one way of stealing chocolates.\n    '''\n\n    # num_ways = 0\n    # for i in range(1, m+1):\n    #     num_ways += 1\n    #     if num_ways == m:\n    #         return str(m)\n    #     elif num_ways % i == 0:\n    #         num_ways -= i\n\n    # if num_ways == 1:\n    #     return '-1'\n    # return str(num_ways)\n\n    n = 1\n    while True:\n        n_mul = 1\n        while n * n_mul <= m:\n            n += 1\n            n_mul *= n\n        if n * n_mul == m:\n            return str(n)"
    },
    {
        "number": 371,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return '8'\n    else:\n        if n % 2 == 0:\n            return '-'\n        else:\n            return str(n // 2)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 371,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 3:\n        return str(n)\n    elif n == 10:\n        return '-1'\n    else:\n        divisor = 2\n        while n!= 1:\n            if n % divisor!= 0:\n                divisor += 1\n                continue\n            else:\n                n = int(n/divisor)\n                if n!= 0:\n                    divisor += 1\n    return str(divisor)\n"
    },
    {
        "number": 372,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, r1 = map(int, stdin.split())\n    x2, y2, r2 = map(int, stdin.split())\n\n    return f\"{(x1 - x2) ** 2 + (y1 - y2) ** 2 - r1 ** 2 - r2 ** 2} / 2\"\n"
    },
    {
        "number": 372,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, r_1 = list(map(int, stdin.split()))\n    x_2, y_2, r_2 = list(map(int, stdin.split()))\n    return str(abs(math.pi * (x_1 ** 2 + y_1 ** 2 - x_2 ** 2 - y_2 ** 2) / 2))\n"
    },
    {
        "number": 372,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    x_1, y_1, r_1 = list(map(int, stdin[0].split()))\n    x_2, y_2, r_2 = list(map(int, stdin[1].split()))\n    distance = ((x_2 - x_1) ** 2 + (y_2 - y_1) ** 2) ** 0.5\n    res = distance - (r_1 + r_2)\n    return str(abs(res))\n"
    },
    {
        "number": 372,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, r_1 = map(int, stdin.split())\n    x_2, y_2, r_2 = map(int, stdin.split())\n    dx = abs(x_1 - x_2)\n    dy = abs(y_1 - y_2)\n    d = (dx ** 2 + dy ** 2) ** 0.5\n    if d <= r_1 + r_2:\n        return round(d ** 2, 6)\n    return 0\nstdin = '0 0 4'\nprint(solution(stdin))\nstdin = '0 0 5'\nprint(solution(stdin))"
    },
    {
        "number": 372,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, r_1 = map(int, stdin.split())\n    x_2, y_2, r_2 = map(int, stdin.split())\n    d = math.sqrt(pow(x_1 - x_2, 2) + pow(y_1 - y_2, 2))\n    return round(math.pi * pow(r_1, 2) * pow(r_2, 2) / (4 * math.pi * d), 6)"
    },
    {
        "number": 372,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, r_1 = map(int, stdin.split())\n    x_2, y_2, r_2 = map(int, stdin.split())\n    return \"%.6f\" % (math.pi*(r_1**2 + r_2**2 - (x_1-x_2)**2 - (y_1-y_2)**2))\n"
    },
    {
        "number": 372,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, r_1 = map(int, stdin.split())\n    x_2, y_2, r_2 = map(int, stdin.split())\n    x_3 = (x_1 ** 2 + y_1 ** 2) ** 0.5\n    x_4 = (x_2 ** 2 + y_2 ** 2) ** 0.5\n    a = (r_1 ** 2 + r_2 ** 2) ** 0.5\n    return f\"{(x_3 * x_4 - x_1 * x_2) / (a * a)}\"\n"
    },
    {
        "number": 372,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, r_1 = map(int, stdin.split())\n    x_2, y_2, r_2 = map(int, stdin.split())\n\n    # Calculate area of circle 1\n    a_1 = 3.14159265358979323846 * r_1 * r_1\n    # Calculate distance between points\n    d_1 = (x_1 - x_2) ** 2 + (y_1 - y_2) ** 2\n    # Calculate area of circle 2\n    a_2 = 3.14159265358979323846 * r_2 * r_2\n    # Calculate intersection area\n    a_int = a_1 + a_2 - d_1\n    # Return result\n    return str(a_int)\n"
    },
    {
        "number": 372,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, r_1 = map(int, stdin.split())\n    x_2, y_2, r_2 = map(int, stdin.split())\n\n    dist = (x_2-x_1)**2 + (y_2-y_1)**2\n    d = (r_1+r_2)**2 - dist\n    if d <= 0:\n        return \"0.00000000000000000000\"\n    d = math.sqrt(d)\n    return round(d, 6)\n"
    },
    {
        "number": 372,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, r_1 = map(int, stdin.split())\n    x_2, y_2, r_2 = map(int, stdin.split())\n\n    if r_1 > r_2:\n        r_1, r_2 = r_2, r_1\n        x_1, x_2 = x_2, x_1\n        y_1, y_2 = y_2, y_1\n\n    dist = lambda x1, y1, x2, y2: ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5\n\n    if dist(x_1, y_1, x_2, y_2) == r_1 + r_2:\n        return round((r_1 + r_2) ** 2 * math.pi, 6)\n\n    if dist(x_1, y_1, x_2, y_2) > r_1 + r_2:\n        return round(0, 6)\n\n    if dist(x_1, y_1, x_2, y_2) < r_1 + r_2:\n        if dist(x_1, y_1, x_2, y_2) - r_1 <= r_2:\n            return round(dist(x_1, y_1, x_2, y_2) - r_1, 6)\n        elif dist(x_1, y_1, x_2, y_2) - r_1 > r_2:\n            return round((dist(x_1, y_1, x_2, y_2) - r_1) - r_2, 6)\n"
    },
    {
        "number": 373,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = 0\n    while n!= 1:\n        if n % x == 0:\n            n = n - x\n        else:\n            x = x + 1\n    return str(x)\n\ndef"
    },
    {
        "number": 373,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    v = int(stdin)\n    result = 0\n    while True:\n        if v % 2 == 0 and v % 3 == 0:\n            return str(result)\n        v = v - 1"
    },
    {
        "number": 373,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    stdin = stdin.split(\"\\n\")\n    v = int(stdin[0])\n    print(solution(v))\n    return\n"
    },
    {
        "number": 373,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    v = int(stdin)\n    while True:\n        for i in range(1, v):\n            if v % i == 0:\n                v = v - i\n                break\n        else:\n            return str(v)\n\n\nsolution(input())\n\n\ns = ''\nfor i in range(10):\n    if i!= 0:\n        s += str(i) +''\n    else:\n        s += str(i)\n\nprint(s.strip())\n\n\ns = ''\nfor i in range(1,10):\n    if i!= 0:\n        s += str(i) +''\n    else:\n        s += str(i)\nprint(s.strip())\n\n\ndef"
    },
    {
        "number": 373,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    steps = 0\n    while True:\n        if n == 1:\n            return str(steps)\n        steps += 1\n        if n%2 == 0:\n            n = n//2\n        else:\n            n = n*3 + 1\n        if n%2 == 0:\n            n = n//2\n        else:\n            n = n*3 + 1"
    },
    {
        "number": 373,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n = int(stdin[0])\n    while True:\n        if not any(n % i == 0 for i in range(2, n)):\n            print(n)\n            return\n        n -= 1"
    },
    {
        "number": 373,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Enter your code here\n    v = int(stdin)\n    n = v\n    while True:\n        x = max(n - 1, 1)\n        if x % n == 0:\n            return '-1'\n        n = n - x\n        \n    \n"
    },
    {
        "number": 373,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    v: int = int(stdin)\n    min_n: int = v\n    while min_n > 1:\n        if v % min_n == 0:\n            v -= min_n\n        else:\n            min_n -= 1\n    return str(min_n)\n"
    },
    {
        "number": 373,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    while n > 0:\n        x = n\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n -= 1\n    return str(x)"
    },
    {
        "number": 373,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 374,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    out = []\n    while True:\n        out = [n * a for a in out]\n        if n == sum(out):\n            return str(len(out))\n        n += 1\n\n\nprint(solution(input()))"
    },
    {
        "number": 374,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin)\n  a = list(map(int, stdin.split()))\n  p = []\n  for i in range(1, n):\n    p.append(i)\n\n  c = 0\n  while len(p) > 0:\n    if p[0] < max(a):\n      a.remove(p[0])\n      a.remove(p[0])\n    else:\n      c += p[0] - max(a)\n      p.remove(p[0])\n      p.remove(p[0])\n      if len(a) == 0:\n        break\n    p[0] += 1\n  return str(c)\n\nsolution(input())"
    },
    {
        "number": 374,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    return str(solve(n))\n\ndef"
    },
    {
        "number": 374,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return '0'\n    graph = {i: list(map(int, stdin.split())) for i in range(1, n + 1)}\n    squares = list(range(1, n + 1))\n    que = deque([1])\n    cnt = 0\n    while squares:\n        v = que.popleft()\n        for neigh in graph[v]:\n            if neigh not in squares:\n                que.append(neigh)\n                cnt += 1\n                squares.append(neigh)\n    return str(cnt)\n"
    },
    {
        "number": 374,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    roads = stdin.split()\n    a = list(map(int, stdin.split()))\n    dp = [[0] * (n) for _ in range(n)]\n    dp[0][0] = a[0]\n\n    for i in range(n):\n        for j in range(i):\n            dp[i][j] = dp[j][i] = roads[i] + dp[j][i-1]\n\n    for i in range(1, n):\n        for j in range(i):\n            dp[i][j] = max(dp[i][j], roads[i] + dp[j][i-1])\n    return str(dp[n-1][n-1])\n"
    },
    {
        "number": 374,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return solve(stdin)\n\ndef"
    },
    {
        "number": 374,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def calculate(a, b, c):\n        return a + b + c\n    n = int(stdin.split()[0])\n    squares = [[0] * n for _ in range(n)]\n    for _ in range(int(stdin.split()[1])):\n        a, b = list(map(int, stdin.split()[2].split(' ')))\n        squares[a - 1][b - 1] = 1\n        squares[b - 1][a - 1] = 1\n    squares[0][0] = 1\n    paths = [(0, 0)]\n    while paths:\n        p, q = paths.pop()\n        for i in range(n):\n            if i == p or i == q or not squares[p][i]:\n                continue\n            squares[p][i] = 1\n            squares[i][q] = 1\n            paths.append((i, q))\n            if i == q:\n                return calculate(squares[0][1], squares[0][n], squares[1][0])\n    return calculate(squares[0][1], squares[0][n], squares[1][0])\n\nprint(solution(input()))\n"
    },
    {
        "number": 374,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, *nums = map(int, stdin.split())\n    links = [[] for _ in range(n)]\n    for i, num in enumerate(nums):\n        links[num-1].append(i+1)\n    c1, c2 = 0, 0\n    while True:\n        c1 += len(list(filter(lambda x: x % 2, nums)))\n        nums = [num+1 if num % 2 else num-1 for num in nums]\n        c2 += len(list(filter(lambda x: x % 2, nums)))\n        if not list(filter(lambda x: x % 2, nums)):\n            break\n    return str(c1) +'' + str(c2)\n"
    },
    {
        "number": 374,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    roads = stdin.splitlines()[1:]\n    cities = stdin.splitlines()[2:]\n    cities = [list(map(int, city.split())) for city in cities]\n    for city in cities:\n        for i in range(1, len(city)):\n            city[i] += city[i - 1]\n    total = 0\n    for road in roads:\n        start = int(road.split()[0])\n        end = int(road.split()[1])\n        total += city[start] - city[end]\n    for city in cities:\n        for i in range(1, len(city)):\n            if city[i] > city[i - 1]:\n                city[i] = city[i - 1] + city[i]\n    for city in cities:\n        total += city[0]\n    return str(total)\n\nprint(solution(input()))"
    },
    {
        "number": 374,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, a = list(map(int, stdin.split()))\n    a_lst = list(map(int, stdin.split()))\n    return str(min(a_lst[i] - a_lst[i - 1] for i in range(2, n) + range(1, n - 1)))\n"
    },
    {
        "number": 375,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 375,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    n = int(s[0])\n    s = s[1]\n    t = s[::-1]\n    lst = []\n    for i in range(n):\n        lst.append(s[i])\n    for i in range(n):\n        for j in range(n):\n            new_lst = lst[:i] + lst[i+1:]\n            new_lst_str = ''.join(new_lst)\n            if new_lst_str == t:\n                return i+1\n    return -1\n"
    },
    {
        "number": 375,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[1]\n    t = stdin[2]\n    t = t.replace('.', '')\n    #print(s, t)\n    #print(t)\n    if n == 1:\n        if s == t:\n            print(0)\n        else:\n            print(1)\n    else:\n        from collections import defaultdict\n        mapping = defaultdict(int)\n        for i in range(len(s)):\n            if mapping[s[i]] == 1:\n                return -1\n            else:\n                mapping[s[i]] = 1\n        for i in range(len(t)):\n            if mapping[t[i]] == 1:\n                return -1\n            else:\n                mapping[t[i]] = 1\n        print(len(mapping))\n"
    },
    {
        "number": 375,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    string = stdin\n    letter = \"abcdefghijklmnopqrstuvwxyz\"\n    \n    index = 0\n    while index < n:\n        letter = letter.replace(string[index], \"\")\n        index += 1\n    \n    return len(letter)\n"
    },
    {
        "number": 375,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N: int = int(stdin)\n    # wordsS: str = stdin.rstrip().split()[1]\n    # wordsT: str = stdin.rstrip().split()[2]\n    wordsS: str = stdin.rstrip().split()[1]\n    wordsT: str = stdin.rstrip().split()[2]\n\n    cnt: int = 0\n    if len(wordsS) > len(wordsT):\n        for i in range(len(wordsT)):\n            if wordsS[i] == wordsT[i]:\n                continue\n            elif wordsS[i] == wordsT[i+1]:\n                cnt += 1\n            else:\n                break\n    else:\n        for i in range(len(wordsS)):\n            if wordsT[i] == wordsS[i]:\n                continue\n            elif wordsT[i] == wordsS[i+1]:\n                cnt += 1\n            else:\n                break\n\n    return str(cnt)\n"
    },
    {
        "number": 375,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 375,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    possible_words = set()\n    for i in range(1, n):\n        a = stdin[:i]\n        b = stdin[i:]\n        for j in range(1, n):\n            if a == stdin[:j] and b == stdin[j:]:\n                possible_words.add(a)\n                possible_words.add(b)\n    return len(possible_words)"
    },
    {
        "number": 375,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    t = stdin.split()[2]\n    output = 0\n    return output"
    },
    {
        "number": 375,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    word1 = stdin[1]\n    word2 = stdin[2]\n    first = list(word1)\n    second = list(word2)\n    matches = 0\n    for index in range(len(first)):\n        if first[index]!= second[index]:\n            second.pop(index)\n            matches += 1\n    return str(matches)\n"
    },
    {
        "number": 375,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return stdin.replace(stdin.count(\"r\") - stdin.count(\"s\"), \"\")\n\ndef"
    },
    {
        "number": 376,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 376,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, *strengths = map(int, stdin.split())\n    costs = {1: 0, 2: strengths[0], 3: strengths[0] + strengths[1], 4: strengths[0] + strengths[1] + strengths[2],\n             5: strengths[0] + strengths[1] + strengths[2] + strengths[3], 6: strengths[0] + strengths[1] + strengths[2] + strengths[3] + strengths[4],\n             7: strengths[0] + strengths[1] + strengths[2] + strengths[3] + strengths[4] + strengths[5]}\n    for a, b, c, d, e, f in sorted(\n            [(a, b, c, d, e, f) for a, b, c, d, e, f in sorted(zip(strengths, strengths[1:], strengths[2:], strengths[3:], strengths[4:], strengths[5:]))],\n            key=lambda x: x[0]):\n        print(a, b, c, d, e, f, costs[a] + 1, costs[b] + 1, costs[c] + 1, costs[d] + 1, costs[e] + 1, costs[f] + 1)\n        if costs[a] + 1 <= costs[b] or costs[b] + 1 <= costs[c] or costs[c] + 1 <= costs[d] or costs[d] + 1 <= costs[e] or costs[e] + 1 <= costs[f]:\n            return \"\".join(map(str, costs.values()))\n    return \"IMPOSSIBLE\"\n"
    },
    {
        "number": 376,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split()\n    n = int(input[0])\n    strengths = list(map(int, input[1].split(' ')))\n    edges = []\n    for i in range(n - 1):\n        edges.append(list(map(int, input[i + 2].split(' '))))\n    res = ''\n    for i in range(n):\n        if i == 0:\n            tmp = strengths[i]\n            continue\n        tmp = strengths[i] - max(tmp, *[strengths[j] for j in edges[i]])\n        if tmp > 0:\n            res = ''.join(list(map(str, tmp)))\n        elif tmp == 0:\n            res = ''.join(list(map(str, tmp)))\n        else:\n            res = ''.join(list(map(str, tmp)))\n            break\n    return res\n"
    },
    {
        "number": 376,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # p = [[i, int(j)] for i, j in enumerate(stdin.split())]\n    p = [list(map(int, stdin.split())) for _ in range(n)]\n    min_strength = 99999999999999999\n    for i, x in enumerate(p):\n        x.sort()\n        min_strength = min(min_strength, max(x))\n    for i, x in enumerate(p):\n        for j, y in enumerate(p):\n            if i!= j:\n                strength = min_strength - max(x) - max(y)\n                if strength < 0:\n                    strength = 0\n                p[i][1] += strength\n                p[j][1] += strength\n    print(len(p))\n    for i in p:\n        print(' '.join(str(j) for j in i))\n    return''.join(str(j) for j in min_strength)"
    },
    {
        "number": 376,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    banks = []\n    for _ in range(int(stdin.splitlines()[0])):\n        banks.append(int(stdin.splitlines()[1]))\n    for _ in range(int(stdin.splitlines()[2])):\n        u, v = list(map(int, stdin.splitlines()[3].split()))\n        if u == v:\n            continue\n        else:\n            banks[u-1] -= 1\n            banks[v-1] += 1\n    print(max(banks))\n    return ''\n"
    },
    {
        "number": 376,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    strengths = list(map(int, stdin.split()[1]))\n    semi = []\n    wires = {}\n    for i in range(1, n):\n        wires[i] = []\n    for i in range(1, n):\n        semi.append(strengths[i - 1] + 1)\n    for i in range(1, n):\n        wires[i].append(i + 1)\n    semi = sorted(semi)\n    for i in range(1, n):\n        wires[i].append(i + 1)\n    semi.append(strengths[-1] + 1)\n    for i in range(n, 2 * n):\n        wire = wires[i]\n        for x in wire:\n            if semi[i - 2] <= semi[x - 1]:\n                wires[i].append(x)\n                break\n    min_ = -1\n    for key in wires:\n        if min_ == -1 or min_ > len(wires[key]):\n            min_ = len(wires[key])\n    return str(min_)\n\n\ndef"
    },
    {
        "number": 376,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split(\"\\n\")[0])\n    banks = list(map(int, stdin.split(\"\\n\")[1].split(\" \")))\n    wires = list(map(int, stdin.split(\"\\n\")[2].split(\" \")))\n    mst = 0\n\n    for w in wires:\n        if banks[w - 1] == 0:\n            continue\n        if banks[w - 1] < 0:\n            mst = min(mst, banks[w - 1])\n\n        banks[w - 1] = banks[w - 1] - 1\n        for i in range(0, N - 1):\n            if banks[i]!= 0 and banks[i]!= banks[w - 1] and banks[i] < banks[w - 1]:\n                banks[i] = banks[i] + 1\n    mst = max(mst, sum(banks))\n\n    return str(mst)"
    },
    {
        "number": 376,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    banks, strengths = stdin.splitlines()\n    banks = list(map(int, banks.split()))\n    strengths = list(map(int, strengths.split()))\n    strengths = list(map(lambda x: x if x > 0 else -1 * x, strengths))\n    return str(min(strengths))\n\n'''\n'''\n\ndef"
    },
    {
        "number": 376,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def read_input() -> list:\n        n = int(stdin.split()[0])\n        strengths = list(map(int, stdin.split()[1:]))\n        return n, strengths\n\n    def is_stressed(strengths: list) -> bool:\n        for i in range(len(strengths) - 1):\n            if strengths[i] < strengths[i + 1]:\n                return False\n        return True\n\n    def can_hack(strengths: list, bank: int, offset: int = 0) -> bool:\n        if bank == len(strengths):\n            return True\n        if offset + 1 == len(strengths):\n            return can_hack(strengths, bank + 1)\n        if strengths[bank + offset] - strengths[bank] <= 0:\n            return False\n        return can_hack(strengths, bank + 1, bank + offset + 1)\n\n    def min_hack(strengths: list) -> int:\n        for i in range(len(strengths) - 1):\n            if strengths[i] < strengths[i + 1]:\n                return False\n        return True\n\n    return min(map(int, stdin.split()[1:]))\n"
    },
    {
        "number": 376,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, a, u, v = map(int, stdin.split())\n    a = sorted(a, reverse=True)\n    print(a[0], a[-1])\n    if n == 1:\n        return str(min(a))\n    if n == 2:\n        if a[0] == a[1]:\n            return str(max(a))\n        return str(a[0])\n    if n == 3:\n        if (a[0] == a[1] == a[2]):\n            return str(max(a))\n        if (a[0] == a[1]) and (a[2] == a[3]):\n            return str(max(a))\n        return str(a[0])\n    if n == 4:\n        if (a[0] == a[1]) and (a[2] == a[3]) and (a[4] == a[5]):\n            return str(a[0])\n        if (a[1] == a[2]) and (a[3] == a[4]) and (a[5] == a[6]):\n            return str(a[1])\n        return str(a[0])\n    if n == 5:\n        if (a[0] == a[1]) and (a[2] == a[3]) and (a[4] == a[5]) and (a[6] == a[7]):\n            return str(a[0])\n        if (a[1] == a[2]) and (a[3] == a[4]) and (a[5] == a[6]) and (a[7] == a[8]):\n            return str(a[1])\n        return str(a[0])\n    if n == 6:\n        if (a[0] == a[1]) and (a[2] == a[3]) and (a[4] == a[5]) and (a[6] == a[7]) and (a[8] == a[9]):\n            return str(a[0])\n        if (a[1] == a[2]) and (a[3] == a[4]) and (a[5] == a[6]) and (a[7] == a[8]) and (a[9] == a[10]):\n            return str(a[1])\n        return str(a[0])\n    return str(min(a))\n"
    },
    {
        "number": 377,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 377,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if m == 0:\n        return str(0)\n    else:\n        return str(1 + min(n - 2, n - m))\n"
    },
    {
        "number": 377,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(max(n, m))\n"
    },
    {
        "number": 377,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(max((n-m)/m, 1))\n"
    },
    {
        "number": 377,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(partition_circle(n, m))\n\n\ndef"
    },
    {
        "number": 377,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    [n, m] = list(map(int, stdin.split()))\n    if n > m:\n        n, m = m, n\n    if n == 0:\n        return str(0)\n    else:\n        return str(m - 1)\n"
    },
    {
        "number": 377,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(max(1, n // 2 - m, n - m))\n"
    },
    {
        "number": 377,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    #  Your code here\n    stdin = stdin.split()\n    n, m = list(map(int, stdin[0].split(' ')))\n    if m == 0:\n        return str(0)\n    elif n == 0:\n        return str(1)\n    else:\n        if n % 2 == 0:\n            return str(2)\n        else:\n            div = n - 1\n            while div > 0:\n                if div % m == 0:\n                    div -= 1\n                else:\n                    div -= 2\n            return str(div + 1)\n"
    },
    {
        "number": 377,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    return str(n) if m > 0 and n >= m else str(max(1, n // 2))\n"
    },
    {
        "number": 377,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    [n, m] = [int(i) for i in stdin.split()]\n    cats = {i: [] for i in range(1, n+1)}\n    count = 0\n    for i in range(m):\n        [a, b] = [int(i) for i in stdin.split()]\n        cats[a].append(b)\n        cats[b].append(a)\n    for c in cats:\n        if cats[c]!= []:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 378,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, r = map(int, stdin.split())\n    minimum = 0\n    while r >= 10:\n        if k <= r:\n            return str(k)\n        k, r = k + r // 10, r % 10\n        minimum += 1\n    return str(minimum + k)"
    },
    {
        "number": 378,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    k,r = map(int,stdin.split())\n    ans = 1\n    while r!= 0 and r!= 1:\n        ans += 1\n        r = (k - r) // 10\n        if r >= k - r:\n            ans = 0\n            break\n        k = r\n    return str(ans)\n"
    },
    {
        "number": 378,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    k, r = int(stdin.split()[0]), int(stdin.split()[1])\n    if k < 10: return '1'\n    if k == 10: return str(r)\n    for i in range(1, 10):\n        if k >= i * (10-r):\n            return str(i)\n        else:\n            k -= i * (10-r)"
    },
    {
        "number": 378,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    k,r = list(map(int,stdin.split()))\n    if r>k:\n        return '-1'\n    if r == k:\n        return '1'\n    coins = 1\n    j = k - r\n    while j > 0:\n        j -= 10\n        coins += 1\n    return str(coins)"
    },
    {
        "number": 378,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    k, r = list(map(int, stdin.split()))\n    return str(min(r//(10 - k), k))\n"
    },
    {
        "number": 378,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    _, k, r = stdin.split()\n    k, r = int(k), int(r)\n    if r == 10:\n        return str(k)\n    else:\n        return str(k//10 + min(1, (k % 10)//r))"
    },
    {
        "number": 378,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    k, r = (int(x) for x in stdin.split())\n    print(find_min_shovels(k, r))\n    return \"\"\n\n\ndef"
    },
    {
        "number": 378,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    k, r = map(int, stdin.split())\n    return str(min(k//10, 1))\n"
    },
    {
        "number": 378,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    k, r = map(int, stdin.split())\n    if r == 10:\n        return \"1\"\n    else:\n        r = r*10\n    l = r//10\n    m = r%10\n    if m == 0:\n        m = 10\n    if m == r:\n        m = m + 10\n    if m == r+10:\n        m = m + 10\n    if m == r+20:\n        m = m + 10\n    return str(r//10 + m//10 + m//10)\n"
    },
    {
        "number": 378,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return '{}'.format(int(stdin))\n"
    },
    {
        "number": 379,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    _, n, m = map(int, stdin.split())\n    if n % 2 == 1 or m % 2 == 1:\n        return \"NO\"\n    else:\n        return \"YES\"\n"
    },
    {
        "number": 379,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    l = [[stdin[i * m + j] for j in range(m)] for i in range(n)]\n    for i in range(n):\n        if l[i].count(\"X\") == 2:\n            for j in range(m):\n                if l[i][j] == \"X\":\n                    if l[i][j + 1] == \"X\" and l[i + 1][j] == \"X\":\n                        return \"YES\"\n    for i in range(n):\n        if l[i].count(\"X\") == 2:\n            for j in range(m - 2):\n                if l[i][j] == \"X\" and l[i][j + 1] == \"X\" and l[i][j + 2] == \"X\":\n                    if l[i][j + 3] == \"X\":\n                        return \"YES\"\n    for i in range(n - 2):\n        if l[i].count(\"X\") == 2:\n            for j in range(m - 2):\n                if l[i][j] == \"X\" and l[i + 1][j] == \"X\" and l[i + 2][j] == \"X\":\n                    if l[i + 3][j] == \"X\":\n                        return \"YES\"\n    for i in range(n - 2):\n        if l[i].count(\"X\") == 2:\n            for j in range(m - 2):\n                if l[i][j] == \"X\" and l[i + 1][j] == \"X\" and l[i + 2][j] == \"X\":\n                    if l[i + 3][j] == \"X\" and l[i + 4][j] == \"X\":\n                        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 379,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    s = stdin\n    while n!= 2 or m!= 2:\n        n, m = n - 1, m - 1\n        s = s[:m] + '.' + s[m:]\n        while n > 0 and m > 0:\n            if s[n]!= s[m]:\n                break\n            n -= 1\n            m -= 1\n        if n == m:\n            break\n    return \"YES\" if s.find('.') == -1 else \"NO\"\n\nsolution(\"5 5\")\nsolution(\"2 2\")\nsolution(\"10 10\")\nsolution(\"1 1\")\nsolution(\"2 2\")\nsolution(\"3 3\")\n\nsolution(\"4 4\")\nsolution(\"2 2\")\nsolution(\"9 9\")\nsolution(\"1 1\")\nsolution(\"2 2\")\nsolution(\"3 3\")\nsolution(\"4 4\")\nsolution(\"5 5\")\nsolution(\"2 2\")\nsolution(\"10 10\")\nsolution(\"1 1\")\nsolution(\"2 2\")\nsolution(\"3 3\")\nsolution(\"4 4\")\nsolution(\"5 5\")\nsolution(\"2 2\")\nsolution(\"9 9\")\nsolution(\"1 1\")\nsolution(\"2 2\")\nsolution(\"3 3\")\nsolution(\"4 4\")\nsolution(\"5 5\")\nsolution(\"2 2\")\nsolution(\"10 10\")\nsolution(\"1 1\")\nsolution(\"2 2\")\nsolution(\"3 3\")\nsolution(\"4 4\")\nsolution(\"5 5\")\nsolution(\"2 2\")\nsolution(\"10 10\")\nsolution(\"1 1\")\nsolution(\"2 2\")\nsolution(\"3 3\")\nsolution(\"4 4\")\nsolution(\"5 5\")\nsolution(\"2 2\")\nsolution(\"10 10\")\nsolution(\"1 1\")\nsolution(\"2 2\")\nsolution(\"3 3\")\nsolution(\"4 4\")\nsolution(\"5 5\")\nsolution(\"2 2\")\nsolution(\"10 10\")\nsolution(\"1 1\")\nsolution(\"2 2\")\nsolution(\"3 3\")\nsolution(\"4 4\")\nsolution(\"5 5\")\nsolution(\"2 2\")\nsolution(\"10 10\")\nsolution(\"1 1\")\nsolution(\"2 2\")\nsolution(\"3 3\")\nsolution(\"4 4\")\nsolution(\"5 5\")\nsolution(\"2 2\")\nsolution(\"10 10\")\nsolution(\"1 1\")\nsolution(\"2 2\")\nsolution(\"3 3\")\nsolution(\"4 4\")\nsolution(\"5 5\")\nsolution(\"2 2\")\nsolution(\"10 10\")\nsolution(\"1 1\")\nsolution(\"2 2\")\nsolution(\"3 3\")\nsolution(\"4 4\")\nsolution(\"5 5\")\nsolution(\"2 2\")\nsolution(\"10 10\")\nsolution(\"1 1\")\nsolution(\"2 2\")\nsolution(\"3 3\")\nsolution(\"4 4\")\nsolution(\"5 5\")\nsolution(\"2 2\")\nsolution(\"10 10\")\nsolution(\"1 1\")\nsolution(\"2 2\")\nsolution(\"3 3\")\nsolution(\"4 4\")\nsolution(\"5 5\")\nsolution(\"2 2\")\nsolution(\"10 10\")\nsolution(\"1 1\")\nsolution(\"2 2\")\nsolution(\"3 3\")\nsolution(\"4 4\")\nsolution(\"5 5\")\nsolution(\"2 2\")\nsolution(\"10 10\")\nsolution(\"1 1\")\nsolution(\"2 2\")\nsolution(\"3 3\")\nsolution(\"4 4\")\nsolution(\"5 5\")\nsolution(\"2 2\")\nsolution(\"10 10\")\nsolution(\"1 1\")\nsolution(\"2 2\")\nsolution(\"3 3\")\nsolution(\"4 4\")\nsolution(\"5 5\")\nsolution(\"2 2\")\nsolution(\"10 10\")\nsolution(\"1 1\")\nsolution(\"2 2\")\nsolution(\"3 3\")\nsolution(\"4 4\")\nsolution(\"5 5\")\nsolution(\"2 2\")\nsolution(\"10 10\")\nsolution(\"1 1\")\nsolution(\"2 2\")\nsolution(\"3 3\")\nsolution(\"4 4\")\nsolution(\"5 5\")\nsolution(\"2 2\")\nsolution(\"10 10\")\nsolution(\"1 1\")\nsolution(\"2 2\")\nsolution(\"3 3\")\nsolution(\"4 4\")\nsolution(\"5 5\")\nsolution(\"2 2\")\nsolution(\"10 10\")\nsolution(\"1 1\")\nsolution(\"2 2\")\nsolution(\"3 3\")\nsolution(\"4 4\")\nsolution(\"5 5\")\nsolution(\"2 2\")\nsolution(\"10 10\")\nsolution(\"1 1\")\nsolution(\"2 2\")\nsolution(\"3 3\")\nsolution(\"4 4\")\nsolution(\"5 5\")\nsolution(\"2 2\")\nsolution(\"10 10\")\nsolution(\"1 1\")\nsolution(\"2 2\")\nsolution(\"3 3\")\nsolution(\"4 4\")\nsolution(\"5 5\")\nsolution(\"2 2\")\nsolution(\"10 10\")\nsolution(\"1 1\")\nsolution(\"2 2\")\nsolution(\"3 3\")\nsolution(\"4 4\")\nsolution(\"5 5\")\nsolution(\"2 2\")\nsolution(\"10 10\")\nsolution(\"1 1\")\nsolution(\"2 2\")\nsolution(\"3 3\")\nsolution(\"4 4\")\nsolution(\"5 5\")\nsolution(\"2 2\")\nsolution(\"10 10\")\nsolution(\"1 1\")\nsolution(\"2 2\")\nsolution(\"3 3\")\nsolution(\"4 4\")\nsolution(\"5 5\")\nsolution(\"2 2\")\nsolution(\"10 10\")\nsolution(\"1 1\")\nsolution(\"2 2\")\nsolution(\"3 3\")\nsolution(\"4 4\")\nsolution(\"5 5\")\nsolution(\"2 2\")\nsolution(\"10 10\")\nsolution(\"1 1\")\nsolution(\"2 2\")\nsolution(\"3 3\")\nsolution(\"4 4\")\nsolution(\"5 5\")\nsolution(\"2 2\")\nsolution(\"10 10\")\nsolution(\"1 1\")\nsolution(\"2 2\")\nsolution(\"3 3\")\nsolution(\""
    },
    {
        "number": 379,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    grid = stdin.strip()\n    i = 0\n    if (n == m):\n        return \"NO\"\n    while i < (n + 1):\n        grid2 = grid\n        k = 0\n        while k < (n + 1):\n            if (grid2[k]!= 'X'):\n                grid = grid2\n                break\n            grid2 = grid2[1:] + grid2[0]\n            k += 1\n        i += 1\n    k = 0\n    while k < (n + 1):\n        if (grid[k]!= 'X'):\n            grid = grid[1:] + grid[0]\n        k += 1\n    if (grid[k]!= 'X'):\n        return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 379,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    arr = stdin.split()\n\n    a = \"\".join([arr[i*m:(i+1)*m] for i in range(n)])\n    print(a)\n\n    # if (\"\".join(a.split()) == \"X\"*(n*m)):\n    #     return \"YES\"\n    # else:\n    #     return \"NO\"\n    if (\n        \"X\" in a\n        and \"X\" in a[::-1]\n        and \"X\" in a[1::m]\n        and \"X\" in a[n::m]\n        and \"X\" in a[1::m][::-1]\n        and \"X\" in a[n::m][::-1]\n        and \"X\" in a[1::m][1::-1]\n        and \"X\" in a[n::m][1::-1]\n    ):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 379,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = [[c for c in stdin]]\n    for _ in range(n - 2):\n        grid.append([c for c in stdin])\n\n    for i in range(len(grid) - 1):\n        for j in range(len(grid[0]) - 1):\n            if grid[i][j]!= 'X' and grid[i][j + 1]!= 'X' and grid[i + 1][j]!= 'X' and grid[i + 1][j + 1]!= 'X':\n                return \"NO\"\n\n    for i in range(len(grid) - 1):\n        for j in range(len(grid[0]) - 1):\n            if grid[i][j]!= 'X' and grid[i][j + 1]!= 'X' and grid[i + 1][j]!= 'X' and grid[i + 1][j + 1]!= 'X':\n                return \"NO\"\n\n    for i in range(len(grid) - 2):\n        for j in range(len(grid[0]) - 2):\n            if grid[i][j]!= 'X' and grid[i][j + 1]!= 'X' and grid[i + 1][j]!= 'X' and grid[i + 1][j + 1]!= 'X' and grid[i + 2][j]!= 'X' and grid[i + 2][j + 1]!= 'X' and grid[i + 2][j + 2]!= 'X' and grid[i + 2][j + 3]!= 'X' and grid[i + 2][j + 4]!= 'X':\n                return \"NO\"\n\n    return \"YES\"\n"
    },
    {
        "number": 379,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    m = int(lines[0])\n    n = int(lines[1])\n    piece1 = list(lines[2])\n    piece2 = list(lines[3])\n    \n    def is_valid_space(line: list) -> bool:\n        for c in line:\n            if c!= 'X':\n                return False\n        return True\n\n    if m == n:\n        if is_valid_space(piece1):\n            return 'YES'\n        if is_valid_space(piece2):\n            return 'YES'\n    else:\n        for i in range(m-1):\n            if piece1[i] == 'X':\n                piece1 = piece1[:i] + piece1[i+1:]\n                break\n        if is_valid_space(piece1):\n            return 'YES'\n    \n    for i in range(m-1):\n        if piece2[i] == 'X':\n            piece2 = piece2[:i] + piece2[i+1:]\n            break\n    if is_valid_space(piece2):\n        return 'YES'\n    return 'NO'"
    },
    {
        "number": 379,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = stdin.split(\"\\n\")\n    row_len = len(grid)\n    col_len = len(grid[0])\n    for i in range(row_len):\n        if grid[i].count(\"X\") == row_len - 1:\n            return \"YES\"\n    for i in range(col_len):\n        if grid[0][i] == \"X\":\n            return \"YES\"\n    for i in range(row_len):\n        if grid[i][0] == \"X\":\n            return \"YES\"\n    for i in range(1, row_len):\n        for j in range(col_len):\n            if grid[i][j] == \"X\":\n                if grid[i - 1][j] == \"X\":\n                    if grid[i - 1][j - 1] == \"X\":\n                        if grid[i - 1][j + 1] == \"X\":\n                            if grid[i + 1][j - 1] == \"X\":\n                                if grid[i + 1][j + 1] == \"X\":\n                                    if grid[i + 1][j] == \"X\":\n                                        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 379,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n\n    tiles = []\n    for i in range(n):\n        tiles.append(stdin)\n\n    def flip_and_rotate(tiles, n, m):\n        new_tiles = []\n        for i in range(n):\n            new_tiles.append(\"\".join(tiles[n-i-1][m-i-1:] + tiles[n-i-1][:m-i-1]))\n\n        if m == n:\n            return tiles\n        else:\n            return new_tiles\n\n    for i in range(n):\n        for j in range(m):\n            if tiles[i][j] == 'X':\n                tiles = flip_and_rotate(tiles, n, m)\n                break\n        else:\n            continue\n        break\n\n    return \"NO\" if any(\n        set(tiles[i][j] for i in range(n)\n        for j in range(m)) - {'.'}\n        ) else \"YES\"\n"
    },
    {
        "number": 379,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    pieces = stdin.strip().split()\n    # print(pieces)\n    for i in range(len(pieces)):\n        pieces[i] = \"X\" + \"\".join(pieces[i]) + \"X\"\n    if n == m == 1:\n        return \"YES\"\n    elif n == m == 2:\n        if \"X\" in pieces[0] and \"X\" in pieces[1] and \".\" not in pieces[0] and \".\" not in pieces[1]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        # print(pieces)\n        for i in range(len(pieces) - 1):\n            if pieces[i] == pieces[i + 1]:\n                return \"NO\"\n            elif pieces[i] == \".\":\n                continue\n            else:\n                if \"X\" in pieces[i] and \"X\" in pieces[i + 1]:\n                    # print(i)\n                    piece_to_remove_from_first = pieces[:i] + pieces[i + 2:]\n                    # print(piece_to_remove_from_first)\n                    if \"X\" not in \"\".join(piece_to_remove_from_first):\n                        return \"YES\"\n                    else:\n                        return \"NO\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 380,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(min([len(s.split(' ')) for s in stdin.split('\\n')])))\n"
    },
    {
        "number": 380,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Examples:\n       Input:   stdin:  \".-1\\n1 1\\n1 2\"\n                stdout: \"1\"\n       Input:   stdin:  \"1 1\\n1 2\"\n                stdout: \"2\"\n       Input:   stdin:  \".-1\\n-1 2\\n3 4\"\n                stdout: \"3\"\n    \"\"\"\n    stdin_list = []\n    stdin_list = stdin.split('\\n')\n    x1 = int(stdin_list[0])\n    y1 = int(stdin_list[1])\n    x2 = int(stdin_list[2])\n    y2 = int(stdin_list[3])\n    x1_coord = abs(x1)\n    y1_coord = abs(y1)\n    x2_coord = abs(x2)\n    y2_coord = abs(y2)\n    return \"3\"\n    pass\n"
    },
    {
        "number": 380,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split()\n    lines = [list(map(int, line.split())) for line in lines]\n    lines = sorted(lines, key=lambda x: (x[0], x[1]))\n    start = lines[0]\n    end = lines[-1]\n    dp = [[0 for _ in range(3)] for _ in range(3)]\n    for i in range(3):\n        dp[i][i] = abs(start[i] - end[i])\n    for i in range(3):\n        if i!= 1:\n            dp[i][i + 1] = abs(start[i] - end[i + 1])\n        if i!= 2:\n            dp[i][i - 1] = abs(start[i] - end[i - 1])\n    for k in range(3, 3 * 2):\n        for i in range(3):\n            for j in range(3):\n                if i!= j:\n                    if i!= k - 3:\n                        dp[i][j] = min(dp[i][j], abs(start[i] - start[k - 3]) + abs(start[k] - end[j]))\n                    else:\n                        dp[i][j] = min(dp[i][j], abs(start[i] - end[j]) + dp[i][j - 1])\n    return str(dp[0][2])\n"
    },
    {
        "number": 380,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 380,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = list(map(int, stdin.split()))\n    x.sort()\n    return str(len(x) - 2)"
    },
    {
        "number": 380,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(min(len(s.split(' ')) - 1 for s in stdin.splitlines()))\n"
    },
    {
        "number": 380,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    x = [int(i) for i in stdin[:2]]\n    y = [int(i) for i in stdin[2:]]\n    x.sort()\n    y.sort()\n    x = sorted(x)\n    y = sorted(y)\n    i = 2\n    while x[0] == x[1]:\n        if x[i] == x[i - 1] + 1:\n            x.remove(x[i])\n            i += 1\n            continue\n        if y[0] == y[1]:\n            return '0'\n        return str(i)\n    while y[0] == y[1]:\n        if y[i] == y[i - 1] + 1:\n            y.remove(y[i])\n            i += 1\n            continue\n        if x[0] == x[1]:\n            return '0'\n        return str(i)\n    i = 1\n    while x[i] == x[i - 1]:\n        if x[i] == x[i - 1] + 1:\n            x.remove(x[i])\n            i += 1\n            continue\n        if y[i] == y[i - 1]:\n            return '0'\n        return str(i)\n    if x[0] == y[0]:\n        return '0'\n    for i in range(1, len(x)):\n        if x[i] == x[i - 1]:\n            return '0'\n    for j in range(1, len(y)):\n        if y[j] == y[j - 1]:\n            return '0'\n    if y[0] == x[0]:\n        return '0'\n    return str(i)\n\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 380,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(min(len(read_input(stdin).split('\\n'))-1, min(len(points_to_segments(points_from_segments_to_points(segments_from_segments_to_points(read_input(stdin)))))))\n    # return str(len(points_to_segments(points_from_segments_to_points(segments_from_segments_to_points(read_input(stdin))))))\ndef"
    },
    {
        "number": 380,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(min(n - 1, m - 1) + 1)\n\n\ndef"
    },
    {
        "number": 380,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  x, y = map(int, stdin.split())\n  s = x * y\n  return str(s)"
    },
    {
        "number": 381,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n"
    },
    {
        "number": 381,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nclass Solution:\n    def solution(self, _input: str) -> str:\n        k = int(_input)\n        edges = {}\n        if k < 1 or k > 100:\n            return \"NO\"\n        \n        def make_k_regular(graph, start):\n            nonlocal edges\n            if start in graph.keys():\n                return\n            \n            if len(edges) > 10 ** 6:\n                return\n            \n            edges[start] = 1\n            \n            for j in range(start):\n                if (j + 1) not in edges:\n                    make_k_regular(graph, j + 1)\n                    edges[j + 1] = 1\n                    edges[j] = 1\n            \n            edges[start] = 0\n            \n            \n        if len(edges)!= 0:\n            return \"YES\"\n        \n        n, m = map(int, input().split())\n        \n        start_edges = []\n        \n        for i in range(m):\n            a, b = map(int, input().split())\n            start_edges.append((a, b))\n        \n        graph = {}\n        \n        for e in start_edges:\n            graph[e[0]] = graph.get(e[0], 0) + 1\n            graph[e[1]] = graph.get(e[1], 0) + 1\n            \n        make_k_regular(graph, 1)\n        \n        if len(edges) == 0:\n            return \"NO\"\n        \n        else:\n            return \"YES\""
    },
    {
        "number": 381,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 381,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    For example, we have the following graph:\n        \n        (0) - (1) - (2) - (3) - (4) - (5)\n            | |   | | |   | |\n        (6) - (7) - (8) - (9) - (10)\n                | |   | |   | |\n        (11) - (12) - (13) - (14)\n            | |   | |   | |   |\n        (15) - (16) - (17) - (18)\n    \n    The graph doesn't have any bridges.\n    \"\"\"\n\n    k = int(stdin)\n\n    if k < 1 or k > 100:\n        return \"NO\"\n\n    graph = [[] for _ in range(k)]\n\n    for _ in range(k - 1):\n        u, v = map(int, stdin.split())\n        if (u < 0 or v < 0 or u > k or v > k or u == v) or (u, v) in graph[u]:\n            continue\n        graph[u].append((v, 1))\n        graph[v].append((u, 1))\n    \n    for row in graph:\n        row.sort(key=lambda x: x[0])\n\n    def search(s, e, v):\n        visited = {v}\n        curr_set = {v}\n        ret = 0\n        curr_len = 0\n        while curr_len < len(graph):\n            v = e\n            while v in graph:\n                curr_len += 1\n                if v not in visited:\n                    visited.add(v)\n                    curr_set.add(v)\n                    v = graph[v][0][0]\n                    curr_len += 1\n                else:\n                    break\n            \n            e = curr_set.pop()\n            ret += len(curr_set) + (len(graph) - curr_len)\n        return ret\n\n    for u, row in enumerate(graph):\n        if len(row) >= 2:\n            for v, m in row:\n                if search(u, v, m) >= 10**6:\n                    return \"YES\"\n        \n    return \"NO\""
    },
    {
        "number": 381,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if make_graph(list(map(int, stdin.split()))) else 'NO'\n\ndef"
    },
    {
        "number": 381,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return 'NO'"
    },
    {
        "number": 381,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    degree = int(stdin)\n    if degree % 2!= 0:\n        return \"NO\"\n    n = 2 * degree\n    m = degree - 1\n    edges = []\n    while len(edges) < m:\n        edges.extend([(i + 1, i + 2) for i in range(degree) if i + 1!= i + 2])\n    for i in range(degree - 1):\n        edges.append((i + 1, i + 1))\n    g = {i: [] for i in range(n)}\n    for a, b in edges:\n        g[a].append(b)\n        g[b].append(a)\n    flag = True\n    for a in range(n):\n        if len(g[a])!= degree:\n            flag = False\n            break\n    if flag:\n        for a in range(n):\n            for b in g[a]:\n                if b == a + 1:\n                    continue\n                if b in g[a]:\n                    flag = False\n                    break\n    if flag:\n        for a in range(n):\n            for b in g[a]:\n                if b == a + 1:\n                    continue\n                if b in g[a]:\n                    flag = False\n                    break\n    if flag:\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 381,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    For stdin input:\n        k = 2\n    \"\"\"\n    k = int(stdin)\n    if k < 2:\n        return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 381,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    if k <= 1 or k > 10**6:\n        return 'NO'\n    # your code here\n    return 'YES'\n"
    },
    {
        "number": 381,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\""
    },
    {
        "number": 382,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, q = map(int, stdin.split())\n    s = stdin.split()[1]\n    t = stdin.split()[2]\n    i = 0\n    while i < m:\n        l, r = map(int, stdin.split()[i + 3].split())\n        res = 0\n        for j in range(l - 1, r):\n            if t[j] == s[j]:\n                res += 1\n        i += 4\n        print(res)\n\nsolution(input())\n"
    },
    {
        "number": 382,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    (n, m, q) = (int(i) for i in stdin.split())\n    s = stdin[1]\n    t = stdin[2]\n    result = []\n\n    for i in range(q):\n        (l, r) = (int(i) for i in stdin[3*i+2].split())\n        result.append(count_string(s, t, l, r))\n    return '\\n'.join(map(str, result))\n\ndef"
    },
    {
        "number": 382,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join([str(t) for t in solve(stdin.split()[1], stdin.split()[2], stdin.split()[3:])])\n\ndef"
    },
    {
        "number": 382,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s, t, q = stdin.split()\n    n, m, q = map(int, (s, t, q))\n    d = {}\n    for i in range(n):\n        for j in range(m):\n            if s[i] == t[j]:\n                if t[j] in d:\n                    d[t[j]] += 1\n                else:\n                    d[t[j]] = 1\n    res = []\n    for i in range(q):\n        l, r = map(int, stdin.split())\n        res.append(d[t[l - 1:r]])\n    return '\\n'.join(map(str, res))\n"
    },
    {
        "number": 382,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, q = [int(i) for i in stdin.split()]\n    s = stdin.split()[1]\n    t = stdin.split()[2]\n\n    number_of_occurrences = {}\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if s[i:j + 1] == t:\n                number_of_occurrences[s[i:j + 1]] = number_of_occurrences.get(s[i:j + 1], 0) + 1\n\n    answer = []\n    for i in range(q):\n        l, r = [int(i) for i in stdin.split()[3 * i + 2:3 * i + 4]]\n        answer.append(number_of_occurrences[s[l - 1:r]])\n    return''.join(str(i) for i in answer)\n"
    },
    {
        "number": 382,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\nYour submission should contain a function named solution.\n\nAny code you write will be graded against the same input.\n\nBEWARE: Do NOT modify the code.\n\"\"\"\n\n\ndef"
    },
    {
        "number": 382,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip().split()\n    return(solution_coursera(s[0], s[1], int(s[2])))\n\ndef"
    },
    {
        "number": 382,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 382,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def is_substring(string: str, sub_string: str) -> bool:\n        return string.find(sub_string)!= -1\n\n    string = stdin.split(\"\\n\")[1]\n    t = stdin.split(\"\\n\")[2]\n    return str(len([x for x in range(len(string) + 1) if is_substring(string, t) and len(t) <= x]))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 382,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    return ''.join(map(lambda x: int(x) if x.isdigit() else x, stdin.split()))\n\ndef"
    },
    {
        "number": 383,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, d = map(int, stdin.split())\n    return str(int((n-2)**k/(k-1)) % (10**9 + 7))"
    },
    {
        "number": 383,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k, d = map(int, stdin.split())\n    def count_paths(node, n):\n        if node == 0:\n            return 1\n        if node % 2 == 1:\n            return 1\n        if d <= k:\n            return 1\n        \n        return count_paths(node // 2, n) + count_paths((node // 2) * 2, n)\n\n    def tree(n):\n        if n % 2 == 0:\n            return 1\n        return tree(n // 2) * 2\n\n    def return_root(node, k):\n        if node == 1:\n            return k - d\n        if node % 2 == 1:\n            if d <= k:\n                return node\n            return return_root(node // 2, k)\n        if node % 2 == 0:\n            if d <= k:\n                return node\n            return return_root((node // 2) * 2, k)\n\n    return (count_paths(1, n) * tree(n)) % 1000000007\n\nsolution(input())\n"
    },
    {
        "number": 383,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k, d = map(int, stdin.split())\n    dp = [[0]*(k + 1) for _ in range(n + 1)]\n    dp[1][0] = dp[2][0] = dp[3][0] = 1\n\n    for i in range(4, n + 1):\n        for j in range(1, k + 1):\n            if j < i:\n                dp[i][j] = dp[i - 1][j] + dp[i - 1][j - 1]\n            elif j == i:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j]\n\n    return str(dp[n][k] % 1000000007)\n"
    },
    {
        "number": 383,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k, d = map(int, stdin.split())\n    return sum(bin(i).count('1') for i in range(n, (n-k+1), -1) if sum(bin(i).count('1') for i in range(1, k+1)) >= d)\n\nsolution(input())\n"
    },
    {
        "number": 383,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k, d = stdin.split()\n    n, k, d = int(n), int(k), int(d)\n    # print(n, k, d)\n    # n = int(n)\n    # k = int(k)\n    # d = int(d)\n    # a = 0\n    # b = 0\n    # print(a, b)\n    # if n > k:\n    #     a = n / k\n    # else:\n    #     a = 0\n    #     b = 1\n    #     c = n\n    # for i in range(1, k + 1):\n    #     # print(i)\n    #     if n == 0:\n    #         break\n    #     if n % i == 0:\n    #         a += 1\n    #     else:\n    #         break\n    # print(a)\n    # for i in range(1, k + 1):\n    #     print(i)\n    #     if n == 0:\n    #         break\n    #     if n % i == 0:\n    #         b += 1\n    #     else:\n    #         break\n    # print(b)\n    # print(c)\n    if n % 2 == 0:\n        if k % 2 == 0:\n            if d % k == 0:\n                a = (n + k) / 2\n                b = (n - k) / 2\n                c = (n + k) / (k - 1)\n                return int(a) * int(b) * int(c) % 1000000007\n            else:\n                return int(n) * int(k) % 1000000007\n        else:\n            if d % k == 0:\n                return int((n - k) / 2) % 1000000007\n            else:\n                return int((n - k) / 2) * int(k) % 1000000007\n    else:\n        if k % 2 == 0:\n            if d % k == 0:\n                a = (n + k) / 2\n                b = (n - k) / 2\n                c = (n + k) / (k - 1)\n                return int(b) * int(a) * int(c) % 1000000007\n            else:\n                return int(n) * int(k) % 1000000007\n        else:\n            if d % k == 0:\n                return int((n - k) / 2) * int(k) % 1000000007\n            else:\n                return int((n - k) / 2) * int(k) % 1000000007\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 383,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k, d = map(int, stdin.split())\n    if n == 1:\n        return k\n    # k_tree = {0: 1, 1: 2, 2: 4}\n    def dfs(n, k, d):\n        if k == 0:\n            return 1\n        if k in d_tree:\n            return d_tree[k]\n        count = 0\n        for i in range(1, n):\n            count += dfs(n, k - 1, d)\n        count = (count + n - 1) * n / 2\n        d_tree[k] = count\n        return count\n    d_tree = {}\n    return (dfs(n, k, d) % 1000000007)"
    },
    {
        "number": 383,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k, d = stdin.split()\n    n, k, d = int(n), int(k), int(d)\n    i = 2\n    while i <= n:\n        if n % i == 0:\n            return 0\n        i += 1\n    i = 2\n    while i <= k:\n        if k % i == 0:\n            return 0\n        i += 1\n    i = 2\n    while i <= d:\n        if d % i == 0:\n            return 0\n        i += 1\n    return n + k + d\n    \nsolution(\"3 3 2\")\nsolution(\"4 3 2\")\nsolution(\"4 5 2\")\n"
    },
    {
        "number": 383,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n  n, k, d = [int(i) for i in stdin.split(\" \")]\n  return (n-1) * ((n-1) + n) // 2 - ((n-1) * (n-1) // 2) * k + ((n-1) * (n-1) // 2) * d"
    },
    {
        "number": 383,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k, d = map(int, stdin.split())\n    return str(sum((n, k, d) // (k - d + 1)) % (1000000007))\n"
    },
    {
        "number": 383,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k, d = list(map(int, stdin.split()))\n    return str(k_tree_dp(n, k, d))\n"
    },
    {
        "number": 384,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 384,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    row = stdin.split()[1]\n    return str(consecutive_black_squares(row))\ndef"
    },
    {
        "number": 384,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 384,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    string = stdin.strip()\n    # python dict keys are immutable!\n    d = {}\n    for i in range(len(string)):\n        if string[i] in d:\n            d[string[i]] += 1\n        else:\n            d[string[i]] = 1\n    k = 0\n    res = []\n    for i in range(len(string)):\n        if string[i] in d:\n            if d[string[i]] > 0:\n                res.append(d[string[i]])\n                d[string[i]] -= 1\n            else:\n                continue\n            if len(res) == k:\n                k += 1\n    return str(k) +'' +''.join(map(str, res))\n\nsolution(\"2\")\n\n\n>>> \n"
    },
    {
        "number": 384,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    row = stdin.split()\n    row = list(map(int,row))\n    print(row)\n    #print(row)\n    k = 1\n    n = len(row)\n    row.sort(reverse=True)\n    for i in range(n):\n        if row[i] == row[i+1]:\n            k += 1\n        else:\n            break\n    if n == 2:\n        if k == 1:\n            return \"1\"\n        else:\n            return \"2\"\n    if k > 1:\n        print(k)\n        return str(k)\n    if k == 1:\n        return \"1\"\n    return \"2\"\n        \n        \n\ndef"
    },
    {
        "number": 384,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n'''\n    return str(solution_1(stdin))\n'''\ndef"
    },
    {
        "number": 384,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\nyour code here\n"
    },
    {
        "number": 384,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split()\n    n = int(input[0])\n    row = list(input[1])\n    n_groups = find_groups(row)\n    return str(n_groups)\n\ndef"
    },
    {
        "number": 384,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    n_square = n ** 2\n    s = stdin.strip()\n    result = 0\n    result_arr = []\n    counter = 1\n\n    for i in range(n):\n        result += 1\n        for j in range(i + 1, n):\n            if s[i]!= s[j]:\n                result -= 1\n                break\n        result_arr.append(str(result))\n        result = 1\n\n    return f\"{len(result_arr)} {','.join(result_arr)}\"\n"
    },
    {
        "number": 384,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n'''\n'''\n\nstdin = stdin.strip().split()\nlength = int(stdin[0])\nsequence = stdin[1]\nnumbers = [0] * length\n\nfor i in range(0, length):\n    if sequence[i] == 'B':\n        numbers[i] = 1\n    else:\n        numbers[i] = -1\n\nencrypting = []\ncount = 1\nk = 0\nfor i in range(0, length):\n    if i == 0:\n        encrypting.append(numbers[i])\n    else:\n        if numbers[i] == numbers[i-1]:\n            count += 1\n            encrypting.append(count)\n        else:\n            count = 1\n            encrypting.append(count)\n\nencrypting = list(map(str, encrypting))\nencrypting =''.join(encrypting)\n\nprint(str(len(encrypting.split())) +'' + encrypting)\n\n'''\n\n-----------------------------------------------------------------\nQuestion:\nLevel: Easy\n\nDifficulty: Easy\n\nDifficulty: Easy\n\nDifficulty: Easy\n\nDifficulty: Easy\n\n-----------------------------------------------------------------\nSolution:"
    },
    {
        "number": 385,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n'''\ndef"
    },
    {
        "number": 385,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, p = map(int, stdin.split())\n    seq = stdin[n:]\n    for _ in range(m):\n        if stdin[p] == \"D\":\n            seq = seq[:-1]\n        elif stdin[p] == \"R\":\n            seq = seq[1:]\n        elif stdin[p] == \"L\":\n            seq = seq[:-1]\n    return seq\n\ndef"
    },
    {
        "number": 385,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, p = list(map(int, stdin.split()))\n    brackets = list(stdin.replace('(', '(').replace(')', ')'))\n\n    for _ in range(p):\n        op = stdin.split()[2]\n        brackets = process_op(op, brackets)\n\n    return ''.join(brackets)\n\n\ndef"
    },
    {
        "number": 385,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, p = map(int, stdin.split())\n    brackets = stdin[n]\n    stack = []\n    for i in range(n):\n        if brackets[i] == '(':\n            stack.append(i)\n        elif brackets[i] == ')':\n            if stack:\n                stack.pop()\n    pos = n - 1\n    while stack:\n        pos = stack.pop()\n        brackets = brackets[:pos] + ')' + brackets[pos+1:]\n    return brackets"
    },
    {
        "number": 385,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, p = map(int, stdin.split())\n    correct_brackets = stdin.strip()\n    cursor_pos = 0\n    curr_seq = list()\n    cursor_index = 0\n    while cursor_index < len(correct_brackets):\n        if correct_brackets[cursor_index] == \"(\":\n            curr_seq.append(\"(\")\n        elif correct_brackets[cursor_index] == \")\":\n            if curr_seq:\n                curr_seq.pop()\n            else:\n                break\n        cursor_index += 1\n    if not curr_seq:\n        return \"\"\n    while cursor_pos < len(correct_brackets):\n        if correct_brackets[cursor_pos] == \"(\":\n            if curr_seq and curr_seq[-1] == \")\":\n                curr_seq.pop()\n            else:\n                break\n        elif correct_brackets[cursor_pos] == \")\":\n            curr_seq.append(\")\")\n        cursor_pos += 1\n    if not curr_seq:\n        return \"\"\n    return \"\".join(curr_seq)\n"
    },
    {
        "number": 385,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, p = map(int, stdin.split())\n    cbs = stdin.strip()\n    #for i in range(1, n, 2):\n    #    cbs = cbs.replace('(' * i, '(' * i + ')')\n    #for i in range(0, n, 2):\n    #    cbs = cbs.replace('(' * i + ')' * i, '(' * i + ')')\n\n    while len(cbs) > 1:\n        #print(cbs)\n        if cbs[0] == '(':\n            cbs = cbs[1:]\n        elif cbs[-1] == ')':\n            cbs = cbs[:-1]\n        else:\n            #print(cbs)\n            return cbs\n    return cbs"
    },
    {
        "number": 385,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    def translate(ch: str):\n        if ch == '(':\n            return ')'\n        elif ch == ')':\n            return '('\n        return ch\n    \n    def get_cursor_pos():\n        return '(' if stdin[0] == '(' else ')'\n    \n    def action(ch, pos):\n        if ch == 'R':\n            pos += 1\n        elif ch == 'D':\n            if pos >= 1:\n                pos -= 1\n        else:\n            pos += 1\n        return pos\n    \n    def get_cursor_pos():\n        return '(' if stdin[0] == '(' else ')'\n    \n    def action(ch, pos):\n        if ch == 'R':\n            pos += 1\n        elif ch == 'D':\n            if pos >= 1:\n                pos -= 1\n        else:\n            pos += 1\n        return pos\n    \n    def get_cursor_pos():\n        return '(' if stdin[0] == '(' else ')'\n    \n    def action(ch, pos):\n        if ch == 'R':\n            pos += 1\n        elif ch == 'D':\n            if pos >= 1:\n                pos -= 1\n        else:\n            pos += 1\n        return pos\n    \n    def get_cursor_pos():\n        return '(' if stdin[0] == '(' else ')'\n    \n    def action(ch, pos):\n        if ch == 'R':\n            pos += 1\n        elif ch == 'D':\n            if pos >= 1:\n                pos -= 1\n        else:\n            pos += 1\n        return pos\n    \n    def get_cursor_pos():\n        return '(' if stdin[0] == '(' else ')'\n    \n    def action(ch, pos):\n        if ch == 'R':\n            pos += 1\n        elif ch == 'D':\n            if pos >= 1:\n                pos -= 1\n        else:\n            pos += 1\n        return pos\n    \n    def get_cursor_pos():\n        return '(' if stdin[0] == '(' else ')'\n    \n    def action(ch, pos):\n        if ch == 'R':\n            pos += 1\n        elif ch == 'D':\n            if pos >= 1:\n                pos -= 1\n        else:\n            pos += 1\n        return pos\n    \n    def get_cursor_pos():\n        return '(' if stdin[0] == '(' else ')'\n    \n    def action(ch, pos):\n        if ch == 'R':\n            pos += 1\n        elif ch == 'D':\n            if pos >= 1:\n                pos -= 1\n        else:\n            pos += 1\n        return pos\n    \n    def get_cursor_pos():\n        return '(' if stdin[0] == '(' else ')'\n    \n    def action(ch, pos):\n        if ch == 'R':\n            pos += 1\n        elif ch == 'D':\n            if pos >= 1:\n                pos -= 1\n        else:\n            pos += 1\n        return pos\n    \n    def get_cursor_pos():\n        return '(' if stdin[0] == '(' else ')'\n    \n    def action(ch, pos):\n        if ch == 'R':\n            pos += 1\n        elif ch == 'D':\n            if pos >= 1:\n                pos -= 1\n        else:\n            pos += 1\n        return pos\n    \n    def get_cursor_pos():\n        return '(' if stdin[0] == '(' else ')'\n    \n    def action(ch, pos):\n        if ch == 'R':\n            pos += 1\n        elif ch == 'D':\n            if pos >= 1:\n                pos -= 1\n        else:\n            pos += 1\n        return pos\n    \n    def get_cursor_pos():\n        return '(' if stdin[0] == '(' else ')'\n    \n    def action(ch, pos):\n        if ch == 'R':\n            pos += 1\n        elif ch == 'D':\n            if pos >= 1:\n                pos -= 1\n        else:\n            pos += 1\n        return pos\n    \n    def get_cursor_pos():\n        return '(' if stdin[0] == '(' else ')'\n    \n    def action(ch, pos):\n        if ch == 'R':\n            pos += 1\n        elif ch == 'D':\n            if pos >= 1:\n                pos -= 1\n        else:\n            pos += 1\n        return pos\n    \n    def get_cursor_pos():\n        return '(' if stdin[0] == '(' else ')'\n    \n    def action(ch, pos):\n        if ch == 'R':\n            pos += 1\n        "
    },
    {
        "number": 385,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, p = list(map(int, stdin.split()))\n    seq = input()\n\n    while n - m > 0 and p - 1 > 0:\n        command = stdin.split()[p - 1]\n\n        if command == \"R\":\n            seq = seq[1:]\n            p -= 1\n        elif command == \"L\":\n            seq = seq[: len(seq) - 1]\n            p -= 1\n        elif command == \"D\":\n            seq = seq[:len(seq) - 2]\n            p -= 1\n\n        n = len(seq)\n\n    return seq\n"
    },
    {
        "number": 385,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 385,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    _, n, m, p = map(int, stdin.split())\n    s = stdin[1:-1]\n    c = list(s)\n    for i in range(m):\n        if stdin[i] == 'R':\n            c.pop(n-1)\n            c.insert(n, '(')\n        elif stdin[i] == 'L':\n            c.pop(0)\n            c.insert(0, ')')\n        elif stdin[i] == 'D':\n            c.pop(n - 1)\n            c.pop(0)\n            c.insert(n - 1, '(')\n            c.insert(0, ')')\n    return ''.join(c)\nprint(solution(input()))\n"
    },
    {
        "number": 386,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def do_question(first: str, second: str):\n        \"\"\"\n        :param first: sign\n        :param second: answer\n        \"\"\"\n        if first == \">=\":\n            return int(second) >= int(first)\n        elif first == \"<\":\n            return int(second) <= int(first)\n        elif first == \">=\":\n            return int(second) >= int(first)\n        elif first == \"<=\":\n            return int(second) <= int(first)\n\n    for line in stdin.splitlines():\n        _, *questions_answers = line.split()\n        for i in range(1, 5):\n            first = questions_answers[i - 1]\n            second = questions_answers[i]\n            if not do_question(first, second):\n                return \"Impossible\"\n    return int(questions_answers[0])\n"
    },
    {
        "number": 386,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    answers = stdin.split()\n    if all(x == \">=\" for x in answers) or all(x == \"<=\" for x in answers) or all(x == \">\" for x in answers) or all(x == \"<\" for x in answers):\n        return \"Impossible\"\n    else:\n        return \"Impossible\"\nsolution(\">= 1 Y\")\nsolution(\"< 3 N\")\nsolution(\"<=- 3 N\")\nsolution(\"> 55 N\")"
    },
    {
        "number": 386,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(input())\n    d = {}\n    for _ in range(n):\n        a, b = stdin.split()\n        d[a] = b\n    \n    # find a number that satisfies all\n    # the conditions\n    found = False\n    for i in range(1, 10000):\n        # check if it satisfies all\n        # the conditions\n        found = True\n        for k, v in d.items():\n            if k == \">=\":\n                if not (i >= int(k)):\n                    found = False\n            elif k == \"<\":\n                if not (i < int(k)):\n                    found = False\n            elif k == \">=\":\n                if not (i >= int(k)):\n                    found = False\n            elif k == \"<=\":\n                if not (i <= int(k)):\n                    found = False\n            if not found:\n                break\n        # if all conditions are true,\n        # the number is found\n        if found:\n            return str(i)\n    # if not found, return impossible\n    return \"Impossible\"\n\n\nsolution(input())\n"
    },
    {
        "number": 386,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    for _ in range(int(input())):\n        if (x := int(input())) > int(input()):\n            print('Y')\n        elif (x := int(input())) < int(input()):\n            print('N')\n        elif (x := int(input())) >= int(input()):\n            print('Y')\n        elif (x := int(input())) <= int(input()):\n            print('N')\n    return 'Impossible' if x!= int(input()) else str(x)\n"
    },
    {
        "number": 386,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(n):\n        user_input = stdin.split()\n        user_input = list(map(int, user_input))\n        if user_input[0] == \">\":\n            if user_input[1] > int(user_input[2]):\n                return str(user_input[1])\n        elif user_input[0] == \">=\":\n            if user_input[1] >= int(user_input[2]):\n                return str(user_input[1])\n        elif user_input[0] == \"<\":\n            if user_input[1] < int(user_input[2]):\n                return str(user_input[1])\n        elif user_input[0] == \"<=\":\n            if user_input[1] <= int(user_input[2]):\n                return str(user_input[1])\n    return \"Impossible\""
    },
    {
        "number": 386,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t = stdin.split('\\n')\n    x = t[0].split()\n    y = t[1].split()\n    lst = []\n    for i in x:\n        if i[0] == '>':\n            lst.append(int(i[1:]))\n        elif i[0] == '<':\n            lst.append(int(i[1:]))\n        elif i[0] == '<=':\n            lst.append(int(i[1:]))\n        elif i[0] == '>=':\n            lst.append(int(i[1:]))\n        else:\n            lst.append('?')\n    return 'Impossible' if not all([i in ['Y', 'N'] for i in lst]) else lst.index(min(lst)) + 1\ns = Solution()\nprint(s.solution(input()))"
    },
    {
        "number": 386,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for _ in range(n):\n        question, answer = stdin.split()\n        if question == '>=':\n            if int(answer) > int(answer):\n                return 'Y'\n            else:\n                return 'N'\n        if question == '<':\n            if int(answer) < int(answer):\n                return 'Y'\n            else:\n                return 'N'\n        if question == '<=':\n            if int(answer) <= int(answer):\n                return 'Y'\n            else:\n                return 'N'\n        if question == '>':\n            if int(answer) > int(answer):\n                return 'Y'\n            else:\n                return 'N'\n    return 'Impossible'\n"
    },
    {
        "number": 386,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = int(s.split()[0])\n    answers = s.split()[1:]\n    matches = []\n    for a in answers:\n        if a[0] == \">\":\n            if int(a.split(\" \")[1]) > int(matches[-1]):\n                matches.append(a.split(\" \")[1])\n        elif a[0] == \"<\":\n            if int(a.split(\" \")[1]) < int(matches[-1]):\n                matches.append(a.split(\" \")[1])\n        elif a[0] == \">=\":\n            if int(a.split(\" \")[1]) >= int(matches[-1]):\n                matches.append(a.split(\" \")[1])\n        elif a[0] == \"<=\":\n            if int(a.split(\" \")[1]) <= int(matches[-1]):\n                matches.append(a.split(\" \")[1])\n    matches = list(map(int,matches))\n    if 0 in matches:\n        print(\"Impossible\")\n    else:\n        print(max(matches))\n"
    },
    {
        "number": 386,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_n = int(stdin.strip())\n    d = {}\n    for i in range(input_n):\n        sign, number, answer = stdin.split()\n        number = int(number)\n        if sign == \">\":\n            if number > d.get(answer, -1):\n                d[answer] = number\n        elif sign == \"<\":\n            if number < d.get(answer, -1):\n                d[answer] = number\n        elif sign == \">=\":\n            if number >= d.get(answer, -1):\n                d[answer] = number\n        elif sign == \"<=\":\n            if number <= d.get(answer, -1):\n                d[answer] = number\n    for key, val in d.items():\n        if val == -1:\n            return \"Impossible\"\n    return \" \".join([\"{} {}\".format(key, val) for key, val in d.items()])\n\nprint(solution(input()))\n\n---\n"
    },
    {
        "number": 386,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    answers = stdin.split(\"\\n\")\n    all_values = set()\n    for answer in answers:\n        number_x, sign_x, number_y, sign_y, expected_value = answer.split()\n        all_values.add(expected_value)\n        if sign_x == \">=\" and sign_y == \">=\" and expected_value == \"Y\":\n            return str(int(number_y) - int(number_x))\n        elif sign_x == \">=\" and sign_y == \">=\" and expected_value == \"N\":\n            return str(int(number_y) + int(number_x))\n        elif sign_x == \">=\" and sign_y == \">\" and expected_value == \"N\":\n            return str(int(number_y) + int(number_x))\n        elif sign_x == \">=\" and sign_y == \"<=\" and expected_value == \"Y\":\n            return str(int(number_y) - int(number_x))\n        elif sign_x == \">=\" and sign_y == \"<=\" and expected_value == \"N\":\n            return str(int(number_y) - int(number_x))\n        elif sign_x == \"<=\" and sign_y == \"<=\" and expected_value == \"Y\":\n            return str(int(number_y) + int(number_x))\n        elif sign_x == \"<=\" and sign_y == \"<=\" and expected_value == \"N\":\n            return str(int(number_y) - int(number_x))\n        elif sign_x == \"<\" and sign_y == \"<\" and expected_value == \"Y\":\n            return str(int(number_y) - int(number_x))\n        elif sign_x == \"<\" and sign_y == \"<\" and expected_value == \"N\":\n            return str(int(number_y) + int(number_x))\n    return \"Impossible\""
    },
    {
        "number": 387,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a,b = map(int, stdin.split())\n    if a==1 and b==1:\n        print(a*b)\n    else:\n        for i in range(1,a+1):\n            for j in range(1,b+1):\n                if (a%i)==0 and (b%j)==0:\n                    print(i)"
    },
    {
        "number": 387,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    a = int(a)\n    b = int(b)\n    n = 1\n    prod = 1\n    ans = 0\n    while prod <= a+b:\n        prod *= n\n        ans += 1\n        n += 1\n    return str(ans)\n\n\nsolution(input())\n\n\"\"\"\n\ndef"
    },
    {
        "number": 387,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    b = 'A' * b + 'B' * a\n    count = 0\n    for i in range(1, len(b) + 1):\n        if b[i - 1]!= b[(i - 1) % i]:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 387,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''Your code goes here'''\n    a, b = map(int, stdin.split())\n    d = 10**9\n    res = 0\n    for i in range(d):\n        for j in range(d):\n            if i % a == j % b == 0:\n                res += 1\n    return str(res)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 387,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    a = int(a)\n    b = int(b)\n    s = a + b\n    s = str(s)\n    periods = []\n    for i in range(0, len(s)):\n        periods.append(s[i:i+a])\n    return len(set(periods))\n"
    },
    {
        "number": 387,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a,b = map(int,stdin.split())\n    return str(pythagorean_triples(a,b))\n\n\ndef"
    },
    {
        "number": 387,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a) + str(b) + str(a)\n"
    },
    {
        "number": 387,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # The amount of possible strings\n    a, b = map(int, stdin.split())\n    # The possible strings\n    possible_strings = 0\n    # The period\n    period = 0\n    # The for loop with string range\n    for i in range(0, a + b + 1):\n        # The period of the i-th string\n        period = 1\n        # The possible string\n        possible_string = \"\"\n        # The for loop with i as string\n        for letter in range(0, a + b):\n            # The letter\n            letter = stdin[i - 1]\n            # The string of i-th letter\n            string = stdin[letter - 1]\n            # The period of the i-th letter\n            period = period * int(stdin[letter - 1])\n            # The string of i-th period\n            string_period = stdin[string - 1]\n            # If the period of the i-th letter and the i-th period are the same\n            if string_period == str(period):\n                # Append the letter to the possible string\n                possible_string = possible_string + str(letter)\n        # Increment the possible string\n        possible_strings = possible_strings + int(possible_string)\n    # Return the amount of possible strings\n    return str(possible_strings)\n"
    },
    {
        "number": 387,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a,b = map(int,stdin.split())\n    def a_or_b(a,b):\n        if a+b <= a*b:\n            return a,b\n        else:\n            return a,b\n    def period(a,b):\n        a_or_b(a,b)\n        return (a**b,b**a)\n    return sum(period(a,b) for a in range(1,(a+b)+1) for b in range(1,(a+b)+1))\nsolution(\"2 4\")\nsolution(\"5 3\")\n"
    },
    {
        "number": 387,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(reduce(lambda x, y: x * y, range(1, m + 1)) - reduce(lambda x, y: x + y, range(1, n + 1)))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    ans = []\n    for i in range(1, n + 1):\n        if i <= k:\n            if stdin[i - 1] == \"YES\":\n                ans.append(chr(ord('A') + i - 1))\n        else:\n            if stdin[i - 1] == \"YES\":\n                ans.append(chr(ord('A') + i - 1))\n            if stdin[i - k - 1] == \"YES\":\n                ans.append(chr(ord('A') + i - k - 1))\n    return''.join(ans)\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return \" \".join(stdin.split()[:n - k + 1])\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    import itertools\n    n, k = map(int, stdin.split())\n    for i in range(n - k + 1):\n        group = stdin[i:i + k]\n        if all(s in set('ABCDEFGHIJKLMNOPQRSTUVWXYZ') for s in group):\n            print(\" \".join(group))\n    return stdin\n\ndef"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    strings = stdin.split()\n    string_dictionary = {}\n    counter = 1\n    name = \"\"\n    for string in strings:\n        string_dictionary[string] = string_dictionary.get(string, 0) + counter\n        counter += 1\n    for key, value in string_dictionary.items():\n        if (n - k + 1) <= value <= (n - k + 1 + k):\n            name += key\n    if len(name) == n:\n        return name\n    return \"\"\n\nprint(solution(\"1 3\\nNO NO\"))\nprint(solution(\"8 3\\nYES NO\"))\nprint(solution(\"6 4\\nNO NO\"))\nprint(solution(\"3 2\\nYES NO\"))\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\nprint(solution(input()))"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    seats = []\n    names = []\n\n    for i in range(1, n + 1):\n        name = stdin.split()[i].replace(\" \", \"\")\n        name = \"\".join(sorted(name))\n\n        if len(name) < 10:\n            names.append(name)\n\n    #print(names)\n\n    for i in range(n - k + 1):\n        seats.append(stdin.split()[i + k])\n\n    #print(seats)\n\n    seats = set(seats)\n\n    for name in names:\n        if seats == set(name):\n            print(name)\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n = int(stdin.split()[0])\n    k = int(stdin.split()[1])\n    strings = stdin.split()[2:]\n    \n    def is_effective(string):\n        length = len(string)\n        for i in range(length):\n            if string[i] == 'NO':\n                return False\n        return True\n    \n    strings = list(filter(is_effective, strings))\n    strings = list(map(lambda s: s[0], strings))\n    strings =''.join(strings)\n    return strings\n    "
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split()\n    names = []\n    for i in range(1, n - k + 2):\n        name = ''.join(s[i:i+k])\n        if ''.join(s[i:i+k]) not in names:\n            names.append(name)\n    return '\\n'.join(names)\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    d = {}\n    for i in range(1, n + 1):\n        s = stdin.split()[i - 1]\n        if s[0].upper() in d:\n            d[s[0].upper()] += 1\n        else:\n            d[s[0].upper()] = 1\n    for i in range(1, n + 1):\n        if d.get(stdin.split()[i - 1][0].upper(), 0) == 0:\n            return \"NO\"\n        if d.get(stdin.split()[i - 1][0].upper(), 0) == 1:\n            return \"YES\"\n    return stdin\n\nprint(solution(input()))\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    n, k = map(int, stdin[0].split())\n    soldiers = stdin[1].split()\n    print(n,k)\n    print(soldiers)\n    possibleNames = []\n    for i in range(n-k+1):\n        if soldiers[i] == \"YES\":\n            possibleNames.append(\"\".join(soldiers[i:i+k]))\n    print(possibleNames)\n    for name in possibleNames:\n        if len(name) == len(set(name)) and name.isupper():\n            return name\n\n\n\nsolution(\"Input\")"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    _, a, b = stdin.split()\n    a, b = int(a), int(b)\n    result = None\n    if a == b:\n        result = 0\n    elif a % 2 == 0 and b % 3 == 0:\n        result = round((a*1.25)//2)\n    elif a % 3 == 0 and b % 2 == 0:\n        result = round((a*1.75)//3)\n    elif a % 5 == 0 and b % 5 == 0:\n        result = round((a*1.25)//5)\n    elif a % 5 == 0 and b % 3 == 0:\n        result = round((a*1.75)//5)\n    else:\n        result = -1\n    return str(result)\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    a, b = map(int, stdin.split())\n    c = a / 2\n    d = a / 3\n    e = a / 5\n    if c + d + e!= b:\n        return -1\n    else:\n        return str(c + d + e)"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == b:\n        return \"0\"\n    if a % 2!= 0:\n        return \"-\"\n    if a % 3!= 0:\n        return \"-\"\n    if a % 5!= 0:\n        return \"-\"\n    if a % 2 == 0 and b % 2!= 0:\n        return \"2\"\n    if a % 2 == 0 and b % 3!= 0:\n        return \"1\"\n    if a % 3 == 0 and b % 2!= 0:\n        return \"1\"\n    if a % 3 == 0 and b % 5!= 0:\n        return \"1\"\n    if a % 5 == 0 and b % 3!= 0:\n        return \"1\"\n    if a % 5 == 0 and b % 2!= 0:\n        return \"2\"\n    if a % 5 == 0 and b % 1!= 0:\n        return \"1\"\n    return \"-\"\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if (a % 2 == 0) and (b % 2 == 0):\n        return \"0\"\n    if (a % 2!= 0) and (b % 2!= 0):\n        return \"0\"\n    if (a % 2!= 0) and (b % 3!= 0):\n        return \"0\"\n    if (a % 2!= 0) and (b % 5!= 0):\n        return \"0\"\n    if (a % 3!= 0) and (b % 2!= 0):\n        return \"0\"\n    if (a % 3!= 0) and (b % 5!= 0):\n        return \"0\"\n    if (a % 5!= 0) and (b % 3!= 0):\n        return \"0\"\n    if (a % 5!= 0) and (b % 2!= 0):\n        return \"0\"\n    if (a % 5!= 0) and (b % 5!= 0):\n        return \"0\"\n    if (a % 2 == 0) and (b % 2 == 0):\n        return \"3\"\n    if (a % 2!= 0) and (b % 2!= 0):\n        return \"3\"\n    if (a % 2!= 0) and (b % 3!= 0):\n        return \"2\"\n    if (a % 2!= 0) and (b % 5!= 0):\n        return \"1\"\n    if (a % 3!= 0) and (b % 2!= 0):\n        return \"2\"\n    if (a % 3!= 0) and (b % 5!= 0):\n        return \"1\"\n    if (a % 5!= 0) and (b % 3!= 0):\n        return \"2\"\n    if (a % 5!= 0) and (b % 2!= 0):\n        return \"1\"\n    if (a % 5!= 0) and (b % 5!= 0):\n        return \"2\"\n    if (a % 2 == 0) and (b % 5 == 0):\n        return \"4\"\n    if (a % 2!= 0) and (b % 5!= 0):\n        return \"3\"\n    if (a % 3!= 0) and (b % 5!= 0):\n        return \"4\"\n    if (a % 5!= 0) and (b % 3!= 0):\n        return \"4\"\n    if (a % 5!= 0) and (b % 2!= 0):\n        return \"4\"\n    if (a % 5!= 0) and (b % 5!= 0):\n        return \"5\"\n    if (a % 2 == 0) and (b % 5 == 0):\n        return \"4\"\n    if (a % 2!= 0) and (b % 5!= 0):\n        return \"3\"\n    if (a % 3!= 0) and (b % 5!= 0):\n        return \"4\"\n    if (a % 5!= 0) and (b % 3!= 0):\n        return \"4\"\n    if (a % 5!= 0) and (b % 2!= 0):\n        return \"4\"\n    if (a % 5!= 0) and (b % 5!= 0):\n        return \"5\"\n    return \"6\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return answer(a, b)\n    \ndef"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    if a % 2 == 0 and b % 2 == 0:\n        return f'{0}'\n    if a % 3 == 0 and b % 3 == 0:\n        return f'{2}'\n    if a % 5 == 0 and b % 5 == 0:\n        return f'{4}'\n    if a % 5 == 0 and b % 3 == 0:\n        return f'{3}'\n    if a % 3 == 0 and b % 2 == 0:\n        return f'{2}'\n    if a % 2 == 0 and b % 5 == 0:\n        return f'{4}'\n    if a % 2 == 0 and b % 5 == 0:\n        return f'{2}'\n    if a % 5 == 0 and b % 2 == 0:\n        return f'{3}'\n    if a % 5 == 0 and b % 2 == 0:\n        return f'{2}'\n    if a % 2 == 0:\n        return f'{1}'\n    if b % 2 == 0:\n        return f'{1}'\n    return f'{0}'"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = list(map(int, stdin.split()))\n    if a == 0 and b == 0:\n        return \"0\"\n    if a == 0:\n        return \"1\"\n    if b == 0:\n        return \"1\"\n    if a > b:\n        return \"1\"\n    if a == b:\n        return \"0\"\n    def max_divisible(a,b):\n        count = 1\n        m = a//b\n        while m%2 == 0:\n            count += 1\n            m = m//2\n        if m == 1:\n            count += 1\n        return count\n    c = max_divisible(a,b)\n    return str(c)"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    if a == b:\n        return 0\n    if (a - b) % 2 == 0:\n        return a - b\n    if (a - b) % 3 == 0:\n        return int((a + b) / 2)\n    if (a - b) % 5 == 0:\n        return int((a + b) / 3)\n    if (a - b) % 5 == 0:\n        return int((a + b) / 5)\n    if (a - b) % 5 == 0:\n        return int((a + b) / 5)\n    return -1"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == b:\n        return '0'\n    if a%2==0 and b%2==0:\n        return f'{int(a/2)} {int(b/2)}'\n    elif a%3==0 and b%3==0:\n        return f'{int(a/3)} {int(b/3)}'\n    elif a%5==0 and b%5==0:\n        return f'{int(a/5)} {int(b/5)}'\n    elif a%3==0 and b%5==0:\n        return f'{int(a/3)} {int(b/5)}'\n    elif a%5==0 and b%3==0:\n        return f'{int(a/5)} {int(b/3)}'\n    else:\n        return '-1'"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a > b:\n        return f'{a} {b}'\n    elif a < b:\n        return f'{b} {a}'\n    else:\n        return '0'\nstdin = '5 5\\n'\nprint(solution(stdin))"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    # \u0441\u0442\u0430\u0440\u0442\u043e\u0432\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430\n    cost_white = a\n    cost_black = b\n    cost_white_white = 0\n    cost_white_black = 0\n    cost_black_white = 0\n    cost_black_black = 0\n    colors = [[] for _ in range(n)]\n    for i in range(n):\n        color = int(stdin.split()[i])\n        colors[i].append(color)\n    for color in colors[0]:\n        if color == 2:\n            cost_white = 0\n            cost_black = 0\n            continue\n        if color == 1:\n            if colors[1] == [0, 0, 0]:\n                cost_white = 0\n                cost_black = 0\n                continue\n            else:\n                cost_white = 1\n                cost_black = 0\n                cost_white_white = 1\n                cost_white_black = 0\n                cost_black_white = 1\n                cost_black_black = 0\n                break\n        if color == 0:\n            if colors[1] == [1, 1, 1]:\n                cost_white = 0\n                cost_black = 0\n                continue\n            else:\n                cost_white = 0\n                cost_black = 1\n                cost_white_white = 0\n                cost_white_black = 1\n                cost_black_white = 0\n                cost_black_black = 1\n                break\n    return str(min(cost_white, cost_black, cost_white_white, cost_white_black, cost_black_white, cost_black_black))\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    pals = list(map(int, stdin.split()))\n    is_palindrome = [False] * n\n    for i in range(n):\n        if not is_palindrome[i]:\n            if pals[i] == 0:\n                is_palindrome[i] = True\n            else:\n                pals[i] = 1 - pals[i]\n    if any(is_palindrome):\n        return -1\n    else:\n        return sum(pals) * a + sum(pals) * b\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n    if c[0] == 1:\n        return '-1'\n    else:\n        return str(a + b)\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    N, W, B = map(int, input().split())\n    S = list(map(int, input().split()))\n\n    white_cost = 0\n    black_cost = 0\n    colors = {}\n    for i in range(N):\n        if S[i] not in colors:\n            white_cost += W\n            black_cost += B\n            colors[S[i]] = i\n        else:\n            if S[i] == 0:\n                white_cost += W\n                black_cost += 2 * B\n            else:\n                white_cost += 2 * W\n                black_cost += 2 * B\n\n    if N % 2!= 0:\n        if S[N // 2] == 0:\n            white_cost += W\n            black_cost += 2 * B\n        else:\n            white_cost += 2 * W\n            black_cost += 2 * B\n\n    if N == 1:\n        white_cost += W\n        black_cost += 2 * B\n\n    if N == 2:\n        white_cost += 2 * W\n        black_cost += 2 * B\n\n    if (N - 1) % 2!= 0:\n        if S[(N - 1) // 2] == 0:\n            white_cost += W\n            black_cost += 2 * B\n        else:\n            white_cost += 2 * W\n            black_cost += 2 * B\n\n    if N == 3:\n        white_cost += 2 * W\n        black_cost += 2 * B\n\n    if N == 4:\n        white_cost += 2 * W\n        black_cost += 2 * B\n\n    if N == 5:\n        white_cost += W\n        black_cost += 2 * B\n\n    if N == 6:\n        white_cost += 2 * W\n        black_cost += 2 * B\n\n    if N == 7:\n        white_cost += 2 * W\n        black_cost += 2 * B\n\n    if N == 8:\n        white_cost += 2 * W\n        black_cost += 2 * B\n\n    if N == 9:\n        white_cost += 2 * W\n        black_cost += 2 * B\n\n    if N == 10:\n        white_cost += 2 * W\n        black_cost += 2 * B\n\n    if N == 11:\n        white_cost += 2 * W\n        black_cost += 2 * B\n\n    if N == 12:\n        white_cost += 2 * W\n        black_cost += 2 * B\n\n    if N == 13:\n        white_cost += 2 * W\n        black_cost += 2 * B\n\n    if N == 14:\n        white_cost += 2 * W\n        black_cost += 2 * B\n\n    if N == 15:\n        white_cost += 2 * W\n        black_cost += 2 * B\n\n    if N == 16:\n        white_cost += 2 * W\n        black_cost += 2 * B\n\n    if N == 17:\n        white_cost += 2 * W\n        black_cost += 2 * B\n\n    if N == 18:\n        white_cost += 2 * W\n        black_cost += 2 * B\n\n    if N == 19:\n        white_cost += 2 * W\n        black_cost += 2 * B\n\n    if N == 20:\n        white_cost += 2 * W\n        black_cost += 2 * B\n\n    if N % 2!= 0 and S[(N - 1) // 2] == 0:\n        white_cost += 2 * W\n        black_cost += 2 * B\n\n    if N % 2!= 0 and S[(N - 1) // 2] == 1:\n        white_cost += 2 * W\n        black_cost += 2 * B\n\n    if N == 1 and S[0] == 0:\n        white_cost += 2 * W\n        black_cost += 2 * B\n\n    if N == 2 and S[0] == 0:\n        white_cost += 2 * W\n        black_cost += 2 * B\n\n    if N == 3 and S[0] == 0 and S[1] == 0:\n        white_cost += 2 * W\n        black_cost += 2 * B\n\n    if N == 4 and S[0] == 0 and S[1] == 0:\n        white_cost += 2 * W\n        black_cost += 2 * B\n\n    if N == 5 and S[0] == 0 and S[1] == 0:\n        white_cost += 2 * W\n        black_cost += 2 * B\n\n    if N == 6 and S[0] == 0 and S[1] == 0:\n        white_cost += 2 * W\n        black_cost += 2 * B\n\n    if N == 7 and S[0] == 0 and S[1] == 0:\n        white_cost += 2 * W\n        black_cost += 2 * B\n\n    if N == 8 and S[0] == 0 and S[1] == 0:\n        white_cost += 2 * W\n        black_cost += 2 * B\n\n    if N == 9 and S[0] == 0 and S[1] == 0:\n        white_cost += 2 * W\n        black_cost += 2 * B\n\n    if N == 10 and S[0] == 0 and S[1] == 0:\n        white_cost += 2 * W\n        black_cost += 2 * B\n\n    if N == 11 and S[0] == 0 and S[1] == 0:\n        white_cost += 2 * W\n        black_cost += 2 * B\n\n    if N == 12 and S[0] == 0 and S[1] == 0:\n        white_cost += 2 * W\n        black_cost += 2 * B\n\n    if N == 13 and S[0] == 0 and S[1] == 0:\n        white_cost += 2 * W\n        black_cost += 2 * B\n\n    if N == 14 and S[0] == 0 and S[1] == 0:\n        white_cost += 2 * W\n        black_cost += 2 * B\n\n    if N == 15 and S["
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    stdin = stdin.strip().split(\"\\n\")\n    n, a, b = map(int, stdin[0].split())\n    colors = list(map(int, stdin[1].split()))\n    a_palindrome = False\n    b_palindrome = False\n    \n    if a_palindrome == True:\n        colors[0] = colors[0] + 1\n    if b_palindrome == True:\n        colors[-1] = colors[-1] + 1\n    \n    if n == 0:\n        return \"0\"\n    \n    if n == 1:\n        return str(max(0,a))\n    \n    for i in range(n):\n        if i == 0:\n            a_palindrome = True\n        elif colors[i]!= colors[i-1]:\n            a_palindrome = False\n        \n        if i == n-1:\n            b_palindrome = True\n        elif colors[i]!= colors[i+1]:\n            b_palindrome = False\n    \n    if a_palindrome and b_palindrome:\n        return str(max(0,a)) + str(max(0,b))\n    else:\n        return -1\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    if n % 2 == 1 or a < 1 or b < 1:\n        return -1\n\n    left_dancers = {0}\n    right_dancers = {0}\n\n    for color in map(int, stdin.split()):\n        if color == 0:\n            left_dancers |= {color}\n        elif color == 1:\n            right_dancers |= {color}\n        else:\n            return -1\n\n    if a == 1 and b == 1:\n        if right_dancers & left_dancers == {0}:\n            return a + b\n        else:\n            return -1\n    else:\n        costs = {0: a, 1: b, 2: a + b}\n        if left_dancers & right_dancers == {0}:\n            return costs[0]\n        elif left_dancers & right_dancers == {1}:\n            return costs[1]\n        elif left_dancers & right_dancers == {2}:\n            return costs[2]\n        else:\n            return -1\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = list(map(int, stdin.split()))\n\n    stdin = stdin.split()\n\n    palindrome = False\n    cost_white = 0\n    cost_black = 0\n\n    for i in range(n):\n        if i % 2 == 0:\n            cost_white += int(stdin[i])\n        else:\n            cost_black += int(stdin[i])\n\n    if cost_white >= b and cost_black >= a:\n        palindrome = True\n\n    if palindrome:\n        return str(cost_black - cost_white)\n\n    return str(-1)\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n    swap = 0\n\n    for i in range(n):\n        if c[i] == 0:\n            if swap:\n                return '-1'\n            else:\n                swap = 1\n        if c[i] == 1:\n            c[i] = 2\n        else:\n            c[i] = 1\n\n    c.sort()\n\n    if swap:\n        return str(b)\n    else:\n        return str(a)"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = list(map(int, stdin.split()))\n    m = max(n, a, b)\n    if m <= 1:\n        return '0'\n    if m == 2:\n        return str(a*b)\n    if m == 3:\n        return '-1'\n    colors = {\n        0: ['w', 'b'],\n        1: ['w', 'b'],\n        2: ['w', 'b'],\n        3: ['w', 'b'],\n        4: ['w', 'b'],\n        5: ['w', 'b'],\n        6: ['w', 'b'],\n        7: ['w', 'b'],\n        8: ['w', 'b'],\n        9: ['w', 'b'],\n        10: ['w', 'b'],\n        11: ['w', 'b'],\n        12: ['w', 'b'],\n        13: ['w', 'b'],\n        14: ['w', 'b'],\n        15: ['w', 'b'],\n        16: ['w', 'b'],\n        17: ['w', 'b'],\n        18: ['w', 'b'],\n        19: ['w', 'b']\n    }\n    s = [[[0]*m for _ in range(n)] for _ in range(m)]\n    for i in range(n):\n        for j in range(a):\n            s[i][j][0] = 1\n        for j in range(a, a+b):\n            s[i][j][0] = 2\n        for j in range(a+b, a+b+b):\n            s[i][j][0] = 3\n    for i in range(n, n+b):\n        for j in range(b):\n            s[i][j][0] = 4\n        for j in range(b, b+a):\n            s[i][j][0] = 5\n        for j in range(b+a, m):\n            s[i][j][0] = 6\n    for i in range(n+b, n+b+a):\n        for j in range(a):\n            s[i][j][0] = 7\n        for j in range(a, a+b):\n            s[i][j][0] = 8\n        for j in range(a+b, m):\n            s[i][j][0] = 9\n    for i in range(n+b+a, n+b+a+b):\n        for j in range(b):\n            s[i][j][0] = 10\n        for j in range(b, b+a):\n            s[i][j][0] = 11\n        for j in range(b+a, m):\n            s[i][j][0] = 12\n    for i in range(n+b+a+b, m):\n        for j in range(b):\n            s[i][j][0] = 13\n        for j in range(b, b+a):\n            s[i][j][0] = 14\n        for j in range(b+a, m):\n            s[i][j][0] = 15\n    for i in range(n+b+a+b, m):\n        for j in range(a):\n            s[i][j][0] = 16\n        for j in range(a, a+b):\n            s[i][j][0] = 17\n        for j in range(a+b, m):\n            s[i][j][0] = 18\n    for i in range(n+b+a+b, m):\n        for j in range(b):\n            s[i][j][0] = 19\n    for i in range(n+b+a+b, m):\n        for j in range(b, m):\n            s[i][j][0] = 20\n    for i in range(n+b+a+b, m):\n        for j in range(a):\n            s[i][j][0] = 21\n    for i in range(n+b+a+b, m):\n        for j in range(a+b, m):\n            s[i][j][0] = 22\n    for i in range(n+b+a+b, m):\n        for j in range(b+a, m):\n            s[i][j][0] = 23\n    for i in range(n+b+a+b, m):\n        for j in range(a, b+a):\n            s[i][j][0] = 24\n    for i in range(n+b+a+b, m):\n        for j in range(b, b+a):\n            s[i][j][0] = 25\n    for i in range(n+b+a+b, m):\n        for j in range(b+a, m):\n            s[i][j][0] = 26\n    for i in range(n+b+a+b, m):\n        for j in range(a, m):\n            s[i][j][0] = 27\n    for i in range(n+b+a+b, m):\n        for j in range(a+b, m):\n            s[i][j][0] = 28\n    for i in range(n+b+a+b, m):\n        for j in range(b+a, m):\n            s[i][j][0] = 29\n    for i in range(n+b+a+b, m):\n        for j in range(a, b+a):\n            s[i][j][0] = 30\n    for i in range(n+b+a+b, m):\n        for j in range(b, b+a):\n            s[i][j][0] = 31\n    for i in range(n+b+a+"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    n, a, b = map(int, stdin.split())\n    possibilities = [[] for _ in range(n)]\n\n    white = [0]\n    black = [1]\n    white.extend(black)\n\n    for i in range(1, n):\n        possibilities[i].extend(white)\n        possibilities[i].append(0)\n        if i < n - 1:\n            possibilities[i].extend(black)\n            possibilities[i].append(0)\n\n    for i in range(n):\n        possibilities[i].extend(white)\n        possibilities[i].append(0)\n        if i < n - 1:\n            possibilities[i].extend(black)\n            possibilities[i].append(0)\n\n    # print(possibilities)\n\n    for i in range(1, n):\n        if possibilities[i][i] == 0:\n            continue\n        for j in range(n):\n            if j == i:\n                continue\n            if possibilities[i][j] == 0:\n                continue\n            for k in range(n):\n                if k == j or k == i:\n                    continue\n                if possibilities[k][j] == 0:\n                    continue\n                for l in range(n):\n                    if l == i or l == j or l == k:\n                        continue\n                    if possibilities[k][l] == 0:\n                        continue\n                    for m in range(n):\n                        if m == l or m == j or m == k or m == i:\n                            continue\n                        if possibilities[m][l] == 0:\n                            continue\n                        for n in range(n):\n                            if n == m or n == l or n == k or n == i:\n                                continue\n                            if possibilities[n][m] == 0:\n                                continue\n                            for o in range(n):\n                                if o == m or o == l or o == k or o == i:\n                                    continue\n                                if possibilities[o][n] == 0:\n                                    continue\n                                for p in range(n):\n                                    if p == o or p == m or p == l or p == i:\n                                        continue\n                                    if possibilities[p][o] == 0:\n                                        continue\n                                    for q in range(n):\n                                        if q == p or q == m or q == l or q == i:\n                                            continue\n                                        if possibilities[q][p] == 0:\n                                            continue\n                                        for r in range(n):\n                                            if r == q or r == m or r == l or r == i:\n                                                continue\n                                            if possibilities[r][q] == 0:\n                                                continue\n                                            for s in range(n):\n                                                if s == r or s == m or s == l or s == i:\n                                                    continue\n                                                if possibilities[s][r] == 0:\n                                                    continue\n                                                for t in range(n):\n                                                    if t == s or t == m or t == l or t == i:\n                                                        continue\n                                                    if possibilities[t][s] == 0:\n                                                         continue\n                                                    for u in range(n):\n                                                         if u == t or u == m or u == l or u == i:\n                                                            continue\n                                                         if possibilities[u][t] == 0:\n                                                            continue\n                                                         for v in range(n):\n                                                            if v == u or v == m or v == l or v == i:\n                                                                continue\n                                                            if possibilities[v][u] == 0:\n                                                                continue\n                                                            for w in range(n):\n                                                                if w == v or w == m or w == l or w == i:\n                                                                    continue\n                                                                if possibilities[w][v] == 0:\n                                                                    continue\n                                                                for x in range(n):\n                                                                    if x == w or x == m or x == l or x == i:\n                                                                        continue\n                                                                    if possibilities[x][w] == 0:\n                                                                        continue\n                                                                    for y in range(n):\n                                                                        if y == x or y == m or y == l or y == i:\n                                                                            continue\n                                                                        if possibilities[y][x] == 0:\n                                                                            continue\n                                                                        for z in range(n):\n                                                                            if z == y or z == m or z == l or z == i:\n                                                                                continue\n                                                                            if possibilities[z][y] == 0:\n                                                                                continue\n                                                                            for a in range(n):\n                                                                                if a == z or a == m or a == l or a == i:\n                                                                                    continue\n                                                                                if possibilities[a][z] == 0:\n                                                                                    continue\n                                                                                if possibilities[a][m] == 0:\n                                                                                    continue\n                                                                                for b in range(n):\n                                                                                    if b == a or b == m or b == l or b == i:\n                                                                                        continue\n                                                                                    if possibilities[b][a] == 0:\n                                                                                        continue\n                                                                                    if possibilities[b][m] == 0:\n                                                                                        continue\n                                                                                    if possibilities[b]["
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    size = int(stdin)\n    if size == 1:\n        return stdin\n    visited = {0: set(), 1: set()}\n    for i in range(2, size):\n        visited[i] = set()\n        for r in range(1, size-i+1):\n            for c in range(1, size-i+1):\n                visited[i].add((r, c, i))\n    white_cubes = set()\n    for i in range(1, size-1):\n        for r in range(1, size-i+1):\n            for c in range(1, size-i+1):\n                if (r, c, i) not in white_cubes:\n                    white_cubes.add((r, c, i))\n                    visited[i].add((r, c, i))\n    for i in range(2, size):\n        if i not in white_cubes:\n            continue\n        visited[i].update(visited[i-1])\n        for r, c, rr in white_cubes:\n            if (rr, c, i) in visited[i]:\n                visited[i].update(visited[i-1])\n                visited[i].update(visited[i-1])\n            else:\n                visited[i].update(visited[i-1])\n        visited[i].update(visited[i-1])\n    for i in range(2, size):\n        if i not in white_cubes:\n            continue\n        visited[i].update(visited[i-1])\n        for r, c, rr in white_cubes:\n            if (rr, c, i) in visited[i]:\n                visited[i].update(visited[i-1])\n                visited[i].update(visited[i-1])\n            else:\n                visited[i].update(visited[i-1])\n        visited[i].update(visited[i-1])\n    for i in range(1, size):\n        white_cubes.clear()\n        visited[i].update(visited[i-1])\n        for r, c, rr in white_cubes:\n            visited[i].update(visited[i-1])\n            if (rr, c, i) in visited[i]:\n                visited[i].update(visited[i-1])\n                visited[i].update(visited[i-1])\n            else:\n                visited[i].update(visited[i-1])\n        visited[i].update(visited[i-1])\n    return \"\\n\".join([str(i) for i in range(1, size)])\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    if k == 1:\n        return \"bw\"\n    elif k == 2:\n        return \"bbww\"\n    else:\n        return \"bbww\" + \"bw\" * (k - 2) + \"bww\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin\n    # data = \"\"\"2\n    # ww\n    # bb\n    # \"\"\"\n    layer = 1\n    side = int(len(data) ** 0.5)\n    print(f\"w: {side} x {side} x {side}\")\n    white = 0\n    black = 0\n    for line in data.splitlines():\n        if line.count(\"w\") == 2 and line.count(\"b\") == 2:\n            print(line)\n            if line.count(\"w\") == white:\n                white += 1\n            else:\n                black += 1\n        elif line.count(\"w\") == 0 and line.count(\"b\") == 0:\n            print(line)\n            for i in range(0, side):\n                for j in range(0, side):\n                    for k in range(0, side):\n                        print(line[i * side + j * side + k], end=\"\")\n                print()\n            if white == black:\n                print(\"w: {side} x {side} x {side}\")\n            white = black = 0\n        else:\n            print(line)\n            if line.count(\"w\") == white:\n                white += 1\n            else:\n                black += 1\n        print()\n\n    return \"\"\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    size = int(stdin)\n    if size == 1:\n        return '-1'\n    elif size == 2:\n        return stdin + '\\n' + stdin + '\\n'\n    else:\n        layers = list()\n        for i in range(1, size+1):\n            layer = list()\n            for j in range(1, size+1):\n                layer.append(stdin)\n            layers.append(layer)\n        for i in range(1, size):\n            for j in range(1, size):\n                if i == 1 and j == 1:\n                    continue\n                elif i == 1 or j == 1:\n                    layers[i][j] = 'b'\n                else:\n                    layers[i][j] = 'w'\n        for i in range(size):\n            for j in range(size):\n                if i == 1 or j == 1:\n                    continue\n                elif layers[1][1] == 'w' and layers[i][j] == 'w':\n                    layers[i][j] = 'b'\n                elif layers[i][j] == 'w' and layers[1][1] == 'b':\n                    layers[i][j] = 'w'\n        return ''.join(map(lambda x: ''.join(x), layers))"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    result = '-'\n    if k == 0:\n        result = '-'\n        return result\n\n    for i in range(k):\n        result = '-'\n\n        for j in range(k):\n            result += 'b'\n\n        for j in range(k):\n            result += 'w'\n\n        for j in range(k):\n            result += 'b'\n\n        for j in range(k):\n            result += 'w'\n\n        if result == 'bb':\n            return result\n\n        result = '-'\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    color = 0\n    num_white = 0\n    num_black = 0\n    layer = [[]]\n    for i in range(k**3):\n        if (i % k**2) == 0:\n            layer.append([])\n            \n        layer[i%k**2].append(color)\n        \n        if color == 0:\n            num_white += 1\n        else:\n            num_black += 1\n            \n        if num_white == 2 and num_black == 2:\n            return '\\n'.join([''.join(x) for x in layer])\n            \n        color = 1 - color\n    return -1\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    #k = int(stdin)\n    k = 3\n    m = k**3\n    m = [['w']*k]*k\n    for i in range(k):\n        m[i][i] = 'b'\n    for i in range(k):\n        m[i][k-1-i] = 'b'\n    for i in range(k):\n        m[k-1-i][i] = 'w'\n    for i in range(k):\n        m[k-1-i][k-1-i] = 'w'\n    return \"\".join(\"\".join(row) for row in m)\n\nprint(solution(input()))\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    s = set()\n    m = [['w' for _ in range(k)] for _ in range(k)]\n    for i in range(k):\n        for j in range(k):\n            for k in range(k):\n                m[i][j] = 'w'\n                if m[i][k] == 'w' and m[k][j] == 'w' and m[i][j] == 'w':\n                    s.add(m[i][j])\n\n    if len(s)!= k * k:\n        return '-1'\n\n    for i in range(k):\n        for j in range(k):\n            for k in range(k):\n                m[i][j] = 'b'\n                if m[i][k] == 'b' and m[k][j] == 'b' and m[i][j] == 'b':\n                    s.add(m[i][j])\n\n    if len(s)!= k * k:\n        return '-1'\n\n    for i in range(k):\n        for j in range(k):\n            for k in range(k):\n                m[i][j] = 'w'\n                if m[i][k] == 'w' and m[k][j] == 'w' and m[i][j] == 'w':\n                    s.add(m[i][j])\n\n    if len(s)!= k * k:\n        return '-1'\n\n    for i in range(k):\n        for j in range(k):\n            for k in range(k):\n                m[i][j] = 'b'\n                if m[i][k] == 'b' and m[k][j] == 'b' and m[i][j] == 'b':\n                    s.add(m[i][j])\n\n    if len(s)!= k * k:\n        return '-1'\n\n    for i in range(k):\n        for j in range(k):\n            for k in range(k):\n                m[i][j] = 'w'\n                if m[i][k] == 'w' and m[k][j] == 'w' and m[i][j] == 'w':\n                    s.add(m[i][j])\n\n    if len(s)!= k * k:\n        return '-1'\n\n    for i in range(k):\n        for j in range(k):\n            for k in range(k):\n                m[i][j] = 'b'\n                if m[i][k] == 'b' and m[k][j] == 'b' and m[i][j] == 'b':\n                    s.add(m[i][j])\n\n    if len(s)!= k * k:\n        return '-1'\n\n    for i in range(k):\n        for j in range(k):\n            for k in range(k):\n                m[i][j] = 'w'\n                if m[i][k] == 'w' and m[k][j] == 'w' and m[i][j] == 'w':\n                    s.add(m[i][j])\n\n    if len(s)!= k * k:\n        return '-1'\n\n    return '\\n'.join(''.join(m[i]) for i in range(k))\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 1 1 2\n   ... 3 3 4\n   ... 3 4 1\n   ... 3 2 3\n   ... 3 4 4\n   ... 2 3 3\n   ... 3 4 2\n   ... ''')\n    'bbww'\n    \"\"\"\n    k = int(stdin.splitlines()[0])\n    black_cubes = set()\n    white_cubes = set()\n    for i in range(k):\n        for j in range(k):\n            for k in range(k):\n                if (i, j, k) in white_cubes:\n                    continue\n                if (i, j, k) in black_cubes:\n                    white_cubes.add((i, j, k))\n                    black_cubes.add((i, j, k))\n                else:\n                    white_cubes.add((i, j, k))\n\n    black_cubes = list(black_cubes)\n    white_cubes = list(white_cubes)\n\n    def paint_white(cubes):\n        # paint white on top layer\n        if len(white_cubes) == 0:\n            return cubes\n\n        white_cube = white_cubes.pop()\n        cubes[white_cube[0]][white_cube[1]][white_cube[2]] = 'w'\n        paint_white(cubes)\n\n    def paint_black(cubes):\n        # paint black on bottom layer\n        if len(black_cubes) == 0:\n            return cubes\n\n        black_cube = black_cubes.pop()\n        cubes[black_cube[0]][black_cube[1]][black_cube[2]] = 'b'\n        paint_black(cubes)\n\n    cubes = [[['w'] * k for i in range(k)] for j in range(k)]\n    cubes = paint_white(cubes)\n    cubes = paint_black(cubes)\n    return '\\n'.join([''.join(x) for x in cubes])\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    for i in range(1, k+1):\n        for j in range(1, k+1):\n            for m in range(1, k+1):\n                for n in range(1, k+1):\n                    if (i*i+j*j) == (m*m+n*n) and i == j and m == n:\n                        print(f\"{'w'*i}{'b'*j}{'w'*m}{'b'*n}\")\n    return \"Goodbye\""
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    divisors = set(filter(lambda x: x**2 == n, range(1, n+1)))\n    divisors.remove(n)\n    return str(max(divisors))\n\ndef"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def is_divisible(n):\n        for i in range(2, int(math.sqrt(n))+1):\n            if n%i == 0:\n                return False\n        return True\n    n = int(stdin)\n    if is_divisible(n):\n        return n\n    return max(i for i in range(n-1, 0, -1) if is_divisible(i))\n\nprint(solution(input()))\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin)\n    divisor = 0\n    square_root_list = []\n    for i in range(1,number):\n        if number%i==0:\n            divisor += 1\n            square_root_list.append(i)\n    return len(square_root_list)\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    import math\n    n = int(stdin)\n    divisors = []\n    for i in range(1, n+1):\n        if math.sqrt(i).is_integer():\n            divisors.append(i)\n    divisors.sort()\n    print(max(divisors))\n\nsolution(input())\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    i = 1\n    while a > 1:\n        i += 1\n        a = a // i\n        if a == 1:\n            return str(i)"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    ans = 2\n    while ans**2 < N:\n        ans += 1\n    return str(ans**2)\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    nums = []\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            nums.append(i)\n            nums.append(n // i)\n    return max(nums)\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    if n == 1:\n        return 2\n    while True:\n        divisors: int = 0\n        for i in range(1, n+1):\n            if (n % i) == 0:\n                divisors += 1\n        if divisors > 1:\n            return n\n        n += 1"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n  chairs, seating = stdin.strip().split()\n  return \"Yes\" if (not any(chairs[i-1] == chairs[i+1] for i in range(1, len(chairs)-1))) and len(seating) == len(set(seating)) else \"No\"\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    seating_arr = list(map(int, stdin.split()))\n    seating_arr = [0] + seating_arr + [0]\n    if (seating_arr[1] - seating_arr[2]!= 1 or seating_arr[2] - seating_arr[3]!= 1):\n        return 'No'\n    for i in range(2, len(seating_arr) - 1):\n        if (seating_arr[i-1] == 1 and seating_arr[i+1] == 1):\n            return 'No'\n    return 'Yes'"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    chairs = stdin.split()\n    ans = \"Yes\"\n    for i in range(n - 2):\n        if chairs[i + 1]!= chairs[i] and chairs[i + 2]!= chairs[i]:\n            ans = \"No\"\n    return ans\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    chairs = int(stdin)\n    if chairs < 3:\n        print(\"No\")\n        return\n    chairs_seated = set()\n    if chairs > 3:\n        while len(chairs_seated)!= chairs - 1:\n            chairs_seated.add(\"1\")\n            chairs_seated.add(\"0\")\n    elif chairs == 3:\n        chairs_seated.add(\"1\")\n    else:\n        chairs_seated.add(\"0\")\n        chairs_seated.add(\"0\")\n    print(\"Yes\" if chairs_seated == set(range(1, chairs + 1)) else \"No\")\n    return\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdout = \"\"\n    n = len(stdin)\n    arr = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            arr[i][j] = int(stdin[i] == stdin[j])\n    for i in range(n):\n        for j in range(n):\n            if arr[i][j] == 0:\n                for k in range(j + 1, n):\n                    if arr[i][k] == 1 and arr[i][j] == 0:\n                        arr[i][j] = 1\n                        arr[i][k] = 1\n                        break\n    for i in range(n):\n        if arr[i][i] == 1:\n            stdout += \"Yes\\n\"\n        else:\n            stdout += \"No\\n\"\n    return stdout\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    rows = stdin.split(\"\\n\")\n    n = int(rows[0])\n    print(n)\n    seating = rows[1].strip()\n\n    \n    left_neighbour_free = 0\n    right_neighbour_free = 0\n    for seat in seating:\n        if seat == \"1\":\n            right_neighbour_free += 1\n        else:\n            left_neighbour_free += 1\n    return \"Yes\" if right_neighbour_free == left_neighbour_free else \"No\"\n\n\ndef"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if is_maximal(stdin) else \"No\"\n\n\ndef"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    seating = stdin.strip().split()\n    rows, seats = len(seating), len(seating[0])\n    if rows == 1 and seats == 1:\n        return \"Yes\"\n    n_occupied_seats = 0\n    for row in range(rows):\n        if seating[row].count(\"1\") == seats - 1 and (seating[row][0] == \"1\" or seating[row][seats - 1] == \"1\"):\n            n_occupied_seats += 1\n        elif seating[row].count(\"1\") == seats - 1 and seating[row][seats - 1] == \"1\":\n            n_occupied_seats += 1\n    if rows == 1 and n_occupied_seats == seats:\n        return \"Yes\"\n    for col in range(seats):\n        if seating[0][col] == \"1\":\n            n_occupied_seats += 1\n        if seating[rows - 1][col] == \"1\":\n            n_occupied_seats += 1\n    if seats == n_occupied_seats:\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    n_seats = n * 2\n    seating = stdin\n    seating_maximal = False\n    n_occupied = 0\n    n_neighbours = 0\n\n    for chair in range(n):\n        if seating[chair] == '1':\n            n_occupied += 1\n            n_neighbours += 1\n\n            if chair + 1 == n or seating[chair + 1] == '0':\n                n_neighbours -= 1\n            if chair - 1 == -1 or seating[chair - 1] == '0':\n                n_neighbours -= 1\n\n            if n_neighbours > n_occupied:\n                seating_maximal = True\n                break\n\n    return 'Yes' if seating_maximal else 'No'\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n    res = 0\n    max = a[0]\n    for i in range(n + 1):\n        # print(max,i)\n        if max >= 0:\n            res += max\n        if max < 0:\n            max += a[i]\n            # print(max,i)\n        else:\n            max = 0\n    print(res)\n    return str(res)"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    return str(find_solutions(n, arr))\n\ndef"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    n = int(stdin[0])\n    a = list(map(int, stdin[1]))\n    return str(k_length(n, a))"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    array = list(map(int, stdin.split()))\n    k = max(array)\n    left_sum = sum(array)\n    result = 0\n    for i in range(1, n):\n        left_sum -= array[i-1]\n        left_sum += array[i]\n        result = max(result, left_sum)\n    return str(result)\n\n\nprint(solution(input()))\n\ndef"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    return str(len(set(range(1, n + 1)))),\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    a = list(map(int, stdin[1]))\n    # return n, a\n    if n == 1:\n        return 1\n    result = 0\n    for i in range(1, n+1):\n        if i == n:\n            result = max(result, n)\n        else:\n            result = max(result, (n-i) + a[i-1])\n    return str(result)\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    array = stdin.split()[1:]\n    k = int(min(n, max(array)))\n    a = list(map(lambda x: x-k if x-k > 0 else x-k+1, array))\n    return str(k) + \"\\n\" + \" \".join(str(i) for i in a)\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def test(num: int):\n        k = 1\n        x = [0]\n        while k <= num:\n            x.append(x[-1] + k)\n            k += 1\n        if (x[0]!= 0) or (len(x)!= num + 1):\n            return False\n        for i in range(num):\n            if (x[i] % 2 == 1) or (x[i + 1] % 2 == 1):\n                return False\n        return True\n\n    def find_length(arr: list, num: int):\n        if num == 1:\n            return arr[0]\n        if arr[0] == 0:\n            return find_length(arr[1:], num - 1)\n        else:\n            if test(num):\n                return find_length(arr[1:], num - 1)\n            else:\n                return find_length(arr[1:], num - 1) + 1\n\n    s = stdin.split()\n    n = int(s[0])\n    arr = list(map(int, s[1]))\n    return str(find_length(arr, n))\n\nsolution(\"2\\n1 5 3\\n\")\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    for k in range(1, n+1):\n        if k > n:\n            break\n        a.append(a.pop(0))\n    return str(len(set(a)))\n\n\nprint(solution(input()))"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = list(map(int, stdin.split()))\n    return str(solution_help(x, n))\n\n\ndef"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split()))\n    return \"YES\" if sum(stdin) % 2 == 0 else \"NO\"\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lst = [int(x) for x in stdin.split()]\n    t1 = sorted(lst)[:3]\n    t2 = sorted(lst)[3:]\n    \n    if sum(t1) == sum(t2):\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    scores = list(map(int, stdin.strip().split()))\n    scores.sort(reverse=True)\n    print(sum(scores[0:2]) == sum(scores[2:len(scores)]))\n    return 'YES' if sum(scores[0:2]) == sum(scores[2:len(scores)]) else 'NO'\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    scores = [int(i) for i in stdin.split()]\n    scores.sort()\n    team_score = scores[0] + scores[1] + scores[2]\n    if scores[3]!= scores[4]!= scores[5]!= scores[6]:\n        return \"NO\"\n    else:\n        return \"YES\"\nsolution(input())\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    scores = list(map(int, stdin.split()))\n    first_team = sum(scores[0:3])\n    second_team = sum(scores[3:6])\n    if first_team == second_team:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    l = stdin.split()\n    return \"YES\" if sum(int(i) for i in l) / 3 == sum(int(i) for i in l) / 2 else \"NO\"\n    # your code here\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    score, *scores = list(map(int, stdin.split()))\n    score_diffs = sum([x-y for x, y in zip(score, scores)])\n    if score_diffs < 0:\n        return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    score = [int(s) for s in stdin.split()]\n    if len(set(score)) == 1:\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    first = list(map(int, stdin[:3]))\n    second = list(map(int, stdin[3:]))\n    first_sum = sum(first)\n    second_sum = sum(second)\n    if first_sum == second_sum:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    scores = list(map(int, stdin.split()))\n    max_score = max(scores)\n    if sum(scores) % 2!= 0 or max_score % 2!= 0:\n        return 'NO'\n    else:\n        return 'YES'\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(set(str(2**x*3**y for x,y in product(range(1,5), repeat=2) if x*3+y == 2*x*y and (x*3+y) <= 200) if x*3+y <= 200)))"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    l, r = (int(i) for i in stdin.split())\n    count = 0\n    for x in range(2, 3):\n        for y in range(3, 5):\n            if (l**x) * (r**y) == ((l**2) * (r**2)):\n                count += 1\n    return count\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    l, r = map(int, stdin.split())\n    return str(int(2**l * 3**(r-l)))\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    l, r = stdin.split()\n    l = int(l)\n    r = int(r)\n    ans = 0\n    for i in range(l, r + 1):\n        divisors = []\n        for i in range(1, int(math.sqrt(i)) + 1):\n            if i not in divisors:\n                if i * i == i:\n                    divisors.append(i)\n                else:\n                    divisors.append(i)\n                    divisors.append(i * i)\n        for divisor in divisors:\n            if i % divisor == 0:\n                ans += 1\n    return str(ans)\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    total = 0\n    for i in range(1, x + 1):\n        for j in range(1, y + 1):\n            if i ** 2 + j ** 2 == i * j:\n                total += 1\n    return str(total)\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    left, right = map(int, stdin.split())\n\n    # the number of 2-3-integers is equal to the number of 2-3-integers on the segment.\n    return str(sum([1 for x in range(left, right + 1) if x == 2**x * 3**(x // 3)]))"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    s = n * (n + 1) / 2\n    l = 0\n    r = s\n    ans = 0\n    while l <= r:\n        ans += (r - l) // 3\n        l += 1\n        r = r - l - (r - l) // 3\n    print(ans)\n    return str(ans)\n\nsolution('1 10')\nsolution('100 200')\nsolution('1 2000000000')\nsolution('1 10000000')\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Solve\n    x, y = map(int, stdin.split())\n    count = 0\n    for i in range(x, y+1):\n        if i % 2 == 0 and i % 3 == 0:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    segment = stdin.split()\n    l, r = int(segment[0]), int(segment[1])\n    ans = 0\n    for x in range(l, r+1):\n        if x == 2 or x == 3:\n            continue\n        if x == 2*(x//2) or x == 3*(x//3):\n            continue\n        if x % 2 == 0 or x % 3 == 0:\n            continue\n        ans += 1\n    return str(ans)\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    l, r = stdin.split(' ')\n    l = int(l)\n    r = int(r)\n    ans = 0\n    for x in range(l, r + 1):\n        y = x\n        while y > 0:\n            if y % 2 == 0:\n                y = y / 2\n            else:\n                if y % 3 == 0:\n                    y = y / 3\n                else:\n                    ans += 1\n                    break\n    return str(ans)\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n == 1:\n        return str(0)\n    if n == k:\n        return str(1)\n    return str(n - (k - 1))\n    # if k % n == 0:\n    #     return str(n - k)\n    # else:\n    #     return str(n - (k - 1))"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    ans = 0\n    while n > 0:\n        n -= 1\n        if k <= 0:\n            ans += 1\n        elif k > 0:\n            if n > 0:\n                ans += 1\n                n -= 2\n                k -= 1\n            else:\n                ans += 2\n                n -= 2\n                k -= 1\n    return str(ans)\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    if n == k:\n        return \"0\"\n    elif n == 1:\n        return \"0\"\n    elif k == 1:\n        return \"1\"\n    else:\n        a = 0\n        while n!= 1:\n            a += min(k, n)\n            n -= min(k, n)\n            k -= min(k, n)\n        return str(a)\n\nprint(solution(input()))\n\ndef"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    return str(k-1)"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    count = 0\n\n    while n > 0:\n        if n >= k:\n            count += 1\n            n = n - k\n        else:\n            count += n\n            n = 0\n    return str(count)\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    return str(sum(range(n, 0, -1)))\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(n - (k * (k + 1) // 2))\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    moves = 0\n    c = 0\n    while n > 0 and c < k:\n        if n - 2 >= 0 and n - 1 >= 0:\n            n -= 1\n            moves += 1\n            c += 1\n        elif n - 1 >= 0:\n            n -= 1\n            moves += 1\n            c += 1\n        else:\n            c = k\n            moves += 1\n    return str(moves)"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(solution_dp(n, k))\n\n\ndef"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(min(n, k))\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if n < 3 or n > 10**5:\n        return \"NO\"\n    if n == 3:\n        if a[0] + a[1] <= a[2]:\n            return \"YES\"\n        return \"NO\"\n\n    a_1, a_2, a_3 = a[0], a[1], a[2]\n    if a_1 + a_2 <= a_3:\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin.split()[0])\n    list1 = list(map(int, stdin.split()[1:]))\n    list2 = list1.copy()\n    list3 = list1.copy()\n    list4 = list1.copy()\n    if n >= 3:\n        for i in range(n):\n            if i == 0:\n                list2[i] = list1[i]\n            elif i == 1:\n                list3[i] = list1[i]\n            elif i == 2:\n                list4[i] = list1[i]\n        sum1 = sum(list2)\n        sum2 = sum(list3)\n        sum3 = sum(list4)\n        if sum1 + sum2 < sum3:\n            return 'NO'\n        else:\n            return 'YES'\n    elif n == 2:\n        sum1 = sum(list1)\n        if sum1 == 0 or sum1 == 1:\n            return 'YES'\n        else:\n            return 'NO'\n    else:\n        return 'NO'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = sorted(map(int, stdin.strip().split(' ')))\n    if n == 3:\n        if a[0] <= a[1] <= a[2] or a[0] <= a[2] <= a[1] or a[1] <= a[0] <= a[2]:\n            return 'YES'\n        else:\n            return 'NO'\n    elif n == 2:\n        if a[0] < a[1]:\n            return 'YES'\n        else:\n            return 'NO'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nfrom math import sqrt\n\n\ndef"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    segs = [int(x) for x in stdin.split()[1:]]\n\n    segs.sort(reverse=True)\n    if segs[0] + segs[1] > segs[2]:\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 1 5 3 2 4\n   ... ''')\n    'YES'\n    >>> solution('''\n   ... 3\n   ... 4 1 2\n   ... ''')\n    'NO'\n    \"\"\"\n    n = int(stdin.readline())\n    s = list(map(int, stdin.readline().split()))\n    a, b, c = s[0], s[1], s[2]\n    if (a + b <= c) or (a + c <= b) or (b + c <= a):\n        return 'NO'\n    count = 0\n    if abs(a - c) == abs(b - c):\n        return 'NO'\n    if (a == b and b == c):\n        return 'YES'\n    if (a == c) or (b == c):\n        return 'YES'\n    for i in range(1, n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (s[i] + s[j] == s[k]) and (s[i]!= s[j]) and (s[i]!= s[k]) and (s[j]!= s[k]):\n                    count += 1\n    if count == 3:\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for _ in range(n):\n        a = list(map(int, stdin.split()))\n        if (max(a) < min(a) + 1):\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    if n == 3:\n        if a[0] + a[1] >= a[2] and a[0] + a[2] >= a[1] and a[1] + a[2] >= a[0]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        for i in range(n):\n            if a[i] == max(a):\n                a.remove(max(a))\n                break\n            else:\n                continue\n        if a[0] == max(a):\n            a.remove(max(a))\n            a.remove(max(a))\n        elif a[1] == max(a):\n            a.remove(max(a))\n            a.remove(max(a))\n            a.remove(max(a))\n        else:\n            a.remove(max(a))\n            a.remove(max(a))\n            a.remove(max(a))\n            a.remove(max(a))\n    if len(a) == 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return 'NO'"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\""
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    if x < 1 or y < 1 or x > 1000 or y > 1000:\n        return \"No\"\n\n    if x == y:\n        return \"Yes\"\n\n    a = x\n    b = y\n\n    while a > 0 and b > 0:\n        if (a + b) % 2 == 0:\n            return \"Yes\"\n        else:\n            a -= 1\n            b -= 1\n\n    return \"No\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n'''\n\nimport math\nfrom itertools import product, permutations\n\ndef"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    if x*y < 1:\n        return \"No\"\n    return \"Yes\"\n\nprint(solution(input()))\n\n## or ##\n\nimport sys\n\ndef"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    _, x, y = stdin.split()\n    x = int(x)\n    y = int(y)\n    if x <= 0 or y <= 0:\n        return 'No'\n    for i in range(x):\n        if x - i - 1 <= 0:\n            return 'No'\n        if y - i - 1 <= 0:\n            return 'No'\n    if x - 1 > y:\n        return 'No'\n    return 'Yes'\n\nprint(solution(input()))\n\n\n\n\"\"\""
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    return \"Yes\" if x % 2 == 0 else \"No\"\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    if (x * 2) + y >= y + (2 * x) + 1:\n        return \"Yes\"\n    return \"No\"\n    \n    \nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    _, x, y = map(int, stdin.split())\n    if x > y or x == 0 or y == 0:\n        return 'No'\n    return 'Yes' if x * (x + 1) // 2 + y * (y + 1) // 2 == x * (x + 1) // 2 + y * (y + 1) // 2 else 'No'\n\n\ndef"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    if x % 2!= 0 or y % 2!= 0:\n        return 'No'\n    else:\n        if y < x:\n            return 'No'\n        elif x - y <= 0:\n            return 'No'\n        else:\n            return 'Yes'\n\nprint(solution(input()))\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    return \"Yes\" if (x * (y - 1) + (y - 1) * (x - 1)) > 1 else \"No\""
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin\n    n, k = map(int, inputs.split())\n    # print(n, k)\n    a = list(map(int, inputs.split()))\n\n    a.sort()\n    result = 0\n    a.reverse()\n    max_score = 0\n    for i in range(n):\n        if max_score + a[i] <= k:\n            max_score += a[i]\n            result += max_score\n        else:\n            result += k - max_score\n            break\n    return str(result)\n\nprint(solution(input()))\n\n\n\n'''"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    skills = list(map(int, stdin.split()))\n    if K < 1 or K > max(skills) + 1:\n        raise ValueError('K needs to be > 0 and < n + 1')\n\n    fractions = list(range(1, 10))\n    for s in skills:\n        fractions = [\n            frac\n            for frac in fractions\n            if (frac * 10) % s!= 0\n        ]\n\n    # if not fractions:\n    #     return '0'\n    # fractions.sort()\n    # fractions = list(map(int, fractions))\n    return str(max(0, (fractions[0] * 10) % 100 - 10 * len(fractions) + 1))\nprint(solution(input()))\n\nfrom math import floor\nn, k = map(int, input().split())\n*s, = map(int, input().split())\n\ns = list(s)\n\ns_max = max(s)\ns_sum = sum(s)"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    r = sum([i * 10 ** (n - i - 1) for i in range(n)])\n\n    for ai in a:\n        r = r + 10 ** (n - ai - 1)\n\n    return str(r // 10)\nprint(solution(input()))\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    ans = 0\n    a_sum = 0\n    for i in range(n):\n        if a[i] >= 100:\n            continue\n        a_sum += a[i]\n        a_sum = int(a_sum/10)\n        ans += a_sum\n    return str(ans)\n\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    max_rating = 0\n    for i in range(1, n + 1):\n        max_rating += 10 * (a[i - 1] // 10)\n    for i in range(1, k + 1):\n        tmp_rating = 0\n        for j in range(1, n + 1):\n            tmp_rating += 10 * (a[j - 1] // 10)\n            if tmp_rating > max_rating:\n                break\n            tmp_rating += 10 * (i // 10)\n        max_rating = max(tmp_rating, max_rating)\n    return max_rating\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(x) for x in stdin.split())\n    skills = sorted(int(x) for x in stdin.split()[1:])\n    ans = 0\n    while k > 0 and skills:\n        skill = skills.pop()\n        if (k-1) > (skill-1):\n            ans += (skill-1)*10\n            k -= (skill-1)\n        else:\n            ans += skill*10\n            k -= skill\n    return ans\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    def to_int(a):\n        return int(''.join(map(str, a)))\n\n    max_score = 0\n    for i in range(n):\n        max_score = max(max_score, to_int(a[:i + 1]))\n        if max_score >= 100:\n            break\n\n    for i in range(n):\n        if i >= k:\n            break\n        max_score = max(max_score, to_int(a[i: i + 2]))\n        if max_score >= 100:\n            break\n        max_score = max(max_score, to_int(a[i + 1:]))\n        if max_score >= 100:\n            break\n\n    return str(max_score)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(i) for i in stdin.split())\n    a = (int(i) for i in stdin.split()[1:])\n\n    import math\n    max_rating = math.floor(max(a)/10)\n    best_rating = max_rating\n    best_answer = best_rating\n    best_count = 0\n\n    def value(rating):\n        if rating <= max_rating:\n            return math.floor(rating/10)\n        else:\n            return math.floor(math.ceil(rating/10)*10)\n\n    for i in range(k):\n        if value(max_rating) > best_answer:\n            best_answer = value(max_rating)\n            best_count = i\n        elif value(max_rating) == best_answer:\n            best_count = i if i < best_count else best_count\n    return str(best_rating)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = map(int, stdin.split())\n\n    a = list(map(lambda x: x // 10, a))\n\n    # print(a)\n    def to_int(arr):\n        return list(map(lambda x: int(x * 10), arr))\n\n    # print(to_int(a))\n    total = to_int(a)\n\n    # print(total)\n    # print()\n\n    for i in range(len(total)):\n        # print(i)\n        if i == 0:\n            total[i] += k\n        if i == 1:\n            total[i] += k\n        if i == 2:\n            total[i] += k\n\n    # print(total)\n\n    return str(sum(total))\n\n\nprint(solution(input()))\n\n\"\"\"\n\ndef"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(x) for x in stdin.split())\n    a = sorted((int(x) for x in stdin.split()))\n    print((sum(int(x // 10) for x in a)) * (n + k))\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    first = stdin.split()[1]\n    second = stdin.split()[2]\n    first = list(map(int, first))\n    second = list(map(int, second))\n    for i in first:\n        if i in second:\n            return str(i)\nprint(solution(input()))"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, m = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()[1]))\n    b = list(map(int, stdin.split()[2]))\n    res = 0\n    while len(a) > 0 and len(b) > 0:\n        res = max(res, a[0] * b[0])\n        a.pop(0)\n        b.pop(0)\n    return str(res)\nprint(solution(\"2 3\"))\nprint(solution(\"8 8\"))\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    if min(a) < min(b):\n        return str(min(a))\n    elif min(a) > min(b):\n        return str(min(b))\n    else:\n        if sum([a.count(i) for i in range(1, 10)]) > sum([b.count(i) for i in range(1, 10)]):\n            return str(min(a))\n        elif sum([a.count(i) for i in range(1, 10)]) < sum([b.count(i) for i in range(1, 10)]):\n            return str(min(b))\n        else:\n            return str(min(a))\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    first = set(map(int, stdin.split())[:n])\n    second = set(map(int, stdin.split())[n:])\n    candidates = list()\n    for a in first:\n        if any(map(lambda x: x>9-a, second)):\n            continue\n        candidates.append(a)\n    for b in second:\n        if any(map(lambda x: x>9-b, first)):\n            continue\n        candidates.append(b)\n    return str(min(candidates))\n\nsolution(\"2 3\") == \"1\"\nsolution(\"8 8\") == \"1\"\nsolution(\"3 3\") == \"10\"\nsolution(\"1 2 3 4 5 6 7 8\") == \"1\""
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    first_set = set(map(int, stdin.split()[1]))\n    second_set = set(map(int, stdin.split()[2]))\n    \n    for i in range(1, m):\n        if not (first_set.intersection(set(str(i))):\n            if i == 1:\n                return str(i)\n            else:\n                return str(i) + str(i)\n        else:\n            continue\n\ndef"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    num_list_1 = stdin[0]\n    num_list_2 = stdin[1]\n    num_list_1 = [int(i) for i in num_list_1]\n    num_list_2 = [int(i) for i in num_list_2]\n    min_num = min(num_list_1)\n    if min_num in num_list_2:\n        return str(min_num)\n    else:\n        return '1'\n    \ndef"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = sorted(stdin.split())\n    b = sorted(stdin.split())\n    if a[0] == b[0]:\n        return '1'\n    for i in range(1, len(a)):\n        if a[i] == a[i-1]:\n            return str(int(a[i]))\n    return str(int(b[0]))\nprint(solution(input()))\n\ndef"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    A = list(map(int, stdin.split()))\n    B = list(map(int, stdin.split()))\n    res = 1\n    for i in range(n):\n        if A[i]!= 0:\n            for j in range(m):\n                if B[j]!= 0:\n                    break\n            else:\n                res = max(res, A[i])\n    return str(res)\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    first_list, second_list = stdin.split()\n    a = list(map(int, first_list))\n    b = list(map(int, second_list))\n\n    common = 0\n    n = len(a)\n    m = len(b)\n    a.sort()\n    b.sort()\n    for i in range(n):\n        if a[i]!= 0 and b[i]!= 0:\n            common = a[i]\n            break\n\n    a_str = str(common)\n    for i in range(n, m):\n        if b[i]!= 0:\n            a_str += str(b[i])\n            break\n    return a_str\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    _, n, m = stdin.split()\n    n, m = int(n), int(m)\n    a = list(map(int, stdin.split()[0]))\n    b = list(map(int, stdin.split()[1]))\n    max_score = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i] == b[j]:\n                score = a[i] + b[j]\n                if score >= max_score:\n                    max_score = score\n    return str(max_score)\n\n\nsolution(input())\n"
    },
    {
        "number": 402,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport time\nstart = time.time()\n\nn,k = (int(x) for x in stdin.split())\n\nproblems = list(range(1,n+1))\nanswer = 0\n\ndef"
    },
    {
        "number": 402,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    print(n * k)\n"
    },
    {
        "number": 402,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    in_list = stdin.split()\n    n, k = int(in_list[0]), int(in_list[1])\n\n    if n > k:\n        return \"impossible\"\n    minutes = 0\n    for i in range(1, n+1):\n        if (i-1) % 5 == 0:\n            minutes += k\n        else:\n            minutes += (i-1) * 5\n\n    return str(minutes)\n"
    },
    {
        "number": 402,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\n(n, k) = stdin.split()\nn, k = int(n), int(k)\n\nprint(n//k)"
    },
    {
        "number": 402,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(max(n - (k - (n - 1)), 0))"
    },
    {
        "number": 402,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    k = k % 24\n\n    # \u56e0\u4e3a\u662f\u9898\u76ee\u8981\u6c42\u7684\u6570\u91cf\uff0c\u6240\u4ee5\u8981\u7528\u6570\u7ec4\u8bb0\u5f55\u6240\u6709\u95ee\u9898\u7684\u7f16\u53f7\u4ee5\u53ca\u5b83\u4eec\u7684\u6570\u91cf\uff0c\u8ba1\u7b97\u8d77\u70b9\u7684\u65f6\u95f4\u3002\n    problem_solutions = [i for i in range(1, n + 1)]\n    problem_solutions_count = len(problem_solutions)\n\n    # \u6240\u6709\u95ee\u9898\u7684\u8d77\u59cb\u65f6\u95f4\n    problem_start_time = []\n    for i in range(problem_solutions_count):\n        problem_start_time.append(i * 5)\n\n    # \u6240\u6709\u95ee\u9898\u7684\u7ed3\u675f\u65f6\u95f4\n    problem_end_time = problem_start_time + (k - 5)\n\n    # \u4ece\u7ed3\u675f\u65f6\u95f4\u5f00\u59cb\u904d\u5386\u95ee\u9898\uff0c\u627e\u5230\u6240\u6709\u95ee\u9898\u7684\u7f16\u53f7\uff0c\u4ece\u8d77\u59cb\u65f6\u95f4\u5f00\u59cb\u904d\u5386\u6240\u6709\u95ee\u9898\uff0c\u6c42\u51fa\u7f16\u53f7\u4e0e\u5b83\u4eec\u7684\u6570\u91cf\n    solution_idx = []\n    for problem_idx, problem_end_time_idx in enumerate(problem_end_time):\n        for start_time_idx, start_time in enumerate(problem_start_time):\n            if start_time <= problem_end_time_idx <= start_time + problem_solutions_count * 5:\n                solution_idx.append((problem_idx, start_time_idx, problem_end_time_idx))\n    solution_idx.sort(key=lambda x: (x[2], x[1], x[0]))\n\n    # \u5c06\u6240\u6709\u95ee\u9898\u7684\u7f16\u53f7\uff0c\u8ba1\u7b97\u8d77\u70b9\u3001\u7ed3\u675f\u70b9\uff0c\u5f97\u5230\u7684\u7ed3\u679c\u7528\u4e8e\u8ba1\u7b97\u7b54\u6848\n    problem_solutions = [x[0] for x in solution_idx]\n    problem_start_time = [x[1] for x in solution_idx]\n    problem_end_time = [x[2] for x in solution_idx]\n\n    # \u8ba1\u7b97\u8d77\u70b9\n    solution = 0\n    for i in range(problem_solutions_count):\n        solution = max(solution, problem_start_time[i] + (problem_solutions_count - 1 - i) * 5)\n\n    return str(solution)\n\n\nstdin = \"\"\"3 222\n\n4 190\n\n7 1\n\n8 1\n\n12 1\n\n13 1\n\n14 1\n\n16 1\n\n17 1\n\n19 1\n\n20 1\n\n22 1\n\n23 1\n\n24 1\n\n25 1\n\n26 1\n\n27 1\n\n28 1\n\n29 1\n\n30 1\n\n32 1\n\n33 1\n\n34 1\n\n35 1\n\n36 1\n\n37 1\n\n38 1\n\n39 1\n\n40 1\n\n41 1\n\n42 1\n\n43 1\n\n44 1\n\n45 1\n\n46 1\n\n47 1\n\n48 1\n\n49 1\n\n50 1\n\n51 1\n\n52 1\n\n53 1\n\n54 1\n\n55 1\n\n56 1\n\n57 1\n\n58 1\n\n59 1\n\n60 1\n\n61 1\n\n62 1\n\n63 1\n\n64 1\n\n65 1\n\n66 1\n\n67 1\n\n68 1\n\n69 1\n\n70 1\n\n71 1\n\n72 1\n\n73 1\n\n74 1\n\n75 1\n\n76 1\n\n77 1\n\n78 1\n\n79 1\n\n80 1\n\n81 1\n\n82 1\n\n83 1\n\n84 1\n\n85 1\n\n86 1\n\n87 1\n\n88 1\n\n89 1\n\n90 1\n\n91 1\n\n92 1\n\n93 1\n\n94 1\n\n95 1\n\n96 1\n\n97 1\n\n98 1\n\n99 1\n\n100 1\n\n101 1\n\n102 1\n\n103 1\n\n104 1\n\n105 1\n\n106 1\n\n107 1\n\n108 1\n\n109 1\n\n110 1\n\n111 1\n\n112 1\n\n113 1\n\n114 1\n\n115 1\n\n116 1\n\n117 1\n\n118 1\n\n119 1\n\n120 1\n\n121 1\n\n122 1\n\n123 1\n\n124 1\n\n125 1\n\n126 1\n\n127 1\n\n128 1\n\n129 1\n\n130 1\n\n131 1\n\n132 1\n\n133 1\n\n134 1\n\n135 1\n\n136 1\n\n137 1\n\n138 1\n\n139 1\n\n140 1\n\n141 1\n\n142 1\n\n143 1\n\n144 1\n\n145 1\n\n146 1\n\n147 1\n\n148 1\n\n149 1\n\n150 1\n\n151 1\n\n152 1\n\n153 1\n\n154 1\n\n155 1\n\n156 1\n\n157 1\n\n158 1\n\n159 1\n\n160 1\n\n161 1\n\n162 1\n\n163 1\n\n164 1\n\n165 1\n\n166 1\n\n167 1\n\n168 1\n\n169 1\n\n170 1\n\n171 1\n\n172 1\n\n173 1\n\n174 1\n\n175 1\n\n176 1\n\n177 1\n\n178 1\n\n179 1\n\n180 1\n\n181 1\n\n182 1\n\n183 1\n\n184 1\n\n185 1\n\n186 1\n\n187 1\n\n188 1\n\n189 1\n\n190 1\n\n191 1\n\n192 1\n\n193 1\n\n194 1\n\n195 1\n\n196 1\n\n197 1\n\n198 1\n\n199 1\n\n200 1\n\n201 1\n\n202 1\n\n203 1\n\n204 1\n\n205 1\n\n206 1\n\n207 1\n\n208 1\n\n209 1\n\n210 1\n\n211 1\n\n212 1\n\n213 1\n\n214 1\n\n215 1\n\n216 1\n\n217 1\n\n218 1\n\n219 1\n\n220 1\n\n221 1\n\n222 1\n\n223 1\n\n224"
    },
    {
        "number": 402,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(min(int((24 - k) / 5), n))\n"
    },
    {
        "number": 402,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return k\n"
    },
    {
        "number": 402,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 222\n   ... ''')\n    '2'\n    >>> solution('''4 190\n   ... ''')\n    '4'\n    >>> solution('''7 1\n   ... ''')\n    '7'\n    \"\"\"\n    stdin = stdin.split()\n    n, k = int(stdin[0]), int(stdin[1])\n    p = []\n    p.append((n * 5) + ((n - 1) * 10) + (n * 15))\n    p.append((n * 5) + ((n - 1) * 10) + (n * 20))\n    p.append((n * 5) + ((n - 1) * 10) + (n * 25))\n    return str(max(p))\n"
    },
    {
        "number": 402,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\n'''\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    b, = map(int, stdin.split())\n    result = 0\n    for i in range(1, 11):\n        result += 1 if i % 2 == 0 else 0\n    return str(result)\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    a = 10 ** 18\n    for b in range(a, 0, -1):\n        if b % a == 0:\n            return str(b // a)\n\ndef"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    b: int = int(stdin)\n    print(f'1') if b % 2 else print(f'2')\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    b = int(stdin.strip())\n    return str(math.ceil(math.gcd(b, 1)))"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    b = 1\n    res = 0\n    while b*b <= a:\n        a -= b*b\n        if a % b == 0:\n            res += 1\n        b += 1\n    return str(res)\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    b = int(stdin[0])\n    return f\"{len(set(str(i * b) for i in range(1, b + 1)))}\"\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    count = 0\n    for x in range(1, 10 ** 18):\n        n = x\n        m = x\n        while n!= 0:\n            n, r = divmod(n, 10)\n            m, r = divmod(m, 10)\n            count += r\n        if x == b:\n            count += 1\n    print(count)"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    b = int(stdin)\n    count = 1\n    while b!= 1:\n        if b % 2 == 0:\n            count += 1\n            b = b // 2\n        else:\n            b = b * 3 + 1\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return str(a - 1) if a % 2 else str(a)\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(bin(a*b)[2:].count('1'))\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... <<><\n   ... ''')\n    '2'\n    >>> solution('''5\n   ... >>>>>\n   ... ''')\n    '5'\n    >>> solution('''4\n   ... <<><\n   ... ''')\n    '0'\n    \"\"\"\n    #stdin = '5'\n    N = int(stdin)\n    #print(N)\n    #x = 0\n    #for i in range(N):\n    #    print(i)\n    #    if stdin[i] == '>':\n    #        x += 1\n    #    else:\n    #        x -= 1\n    #return str(x)\n    left = '<'\n    right = '>'\n    #print(left)\n    #print(right)\n    count = 0\n    i = 0\n    while(i < N):\n        #print(i)\n        if (i < N-1) and (stdin[i] == right) and (stdin[i+1] == left):\n            #print(count)\n            return str(count)\n        if (i < N-1) and (stdin[i] == left) and (stdin[i+1] == right):\n            count += 1\n            #print(count)\n        i += 1\n    return str(count)\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sequence = list(stdin)\n    sequence.sort()\n    i = 1\n    j = n - 2\n    while i < j:\n        if sequence[i] == '>' and sequence[j] == '<':\n            return i - 1\n        elif sequence[i] == '>':\n            i += 1\n        elif sequence[j] == '<':\n            j -= 1\n        else:\n            return -1\n    return -1\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    ball = stdin.splitlines()[0]\n    bumpers = stdin.splitlines()[1]\n    for i in range(len(bumpers)):\n        if bumpers[i] == '<':\n            ball = ball[i:]\n        elif bumpers[i] == '>':\n            ball = ball[:i]\n        else:\n            ball = None\n            break\n    if ball:\n        return len(ball)\n    return 0\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"0\"\n    arr = stdin.split()\n    if arr[0] == \"<<<\" or arr[0] == \">>>\":\n        return \"0\"\n    return str(n)\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    i = 0\n    cnt = 0\n    while True:\n        if i > n-1:\n            break\n        if stdin[i] == '<':\n            i += 1\n        elif stdin[i] == '>':\n            i -= 1\n        cnt += 1\n    return cnt\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    bumpers = stdin.strip().replace('>', '1').replace('<', '0')\n    moves = '0'\n    for i in range(1, n):\n        if bumpers[i-1] == '0':\n            moves += '0'\n        else:\n            moves += '1'\n        if bumpers[i] == '0':\n            moves += '1'\n        else:\n            moves += '0'\n    return moves\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(stdin.split('\\n')).count('>') - ''.join(stdin.split('\\n')).count('<')\n\nsolution(stdin)"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, sequence = stdin.splitlines()\n    n = int(n)\n    sequence = sequence.replace('<','')\n    sequence = sequence.replace('>','')\n    sequence = sequence.split()\n    cnt = 0\n    for i in range(n):\n        if sequence[i] == '<':\n            cnt += 1\n    return str(cnt)\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # 1. \u043f\u043e\u0434\u0441\u0447\u0435\u0442 \u043a\u043e\u043b-\u0432\u043e \u043f\u043e\u0437\u0438\u0446\u0438\u0439 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e while \u0438 for\n    # 2. \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u043b\u043e\u0432\u0430\u0440\u044f \u0441 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435\u043c \u0438\u043d\u0434\u0435\u043a\u0441\u043e\u0432 \u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c\u0438\n    # 3. \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0432 \u0441\u043b\u043e\u0432\u0430\u0440\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f True \u0438\u043b\u0438 False\n    # 4. \u0432\u044b\u0432\u043e\u0434 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\n    n = int(stdin)\n    check = {'<': False, '>': False}\n    ball = 0\n    while True:\n        if check['<']:\n            ball += 1\n            check['<'] = False\n        if check['>']:\n            ball += 1\n            check['>'] = False\n        if ball > n:\n            break\n    return str(ball)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    sticks_len = stdin.split()[1:]\n    # print(n, sticks_len)\n    sticks_len = list(map(int, sticks_len))\n    # print(sticks_len)\n\n    max_area = 0\n    max_h = 0\n\n    def make_rectangle(sticks_len, max_h, max_area, curr_max):\n        for i, stick in enumerate(sticks_len):\n            # print(i, stick)\n            # if i == 0:\n            #     max_h = stick\n            #     max_area = curr_max\n            #     continue\n\n            if max_h - stick < 0:\n                curr_max = 0\n            else:\n                curr_max = max(curr_max, stick * max_h)\n            max_h = max(max_h, stick)\n            # print(max_h)\n            max_area = max(max_area, curr_max)\n            # print(max_area)\n            # print(i, stick)\n        return max_area\n\n    max_area = make_rectangle(sticks_len, max_h, max_area, 0)\n    # print(max_area)\n    return str(max_area)\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    sticks = sorted(map(int, stdin.split()[1].split()))\n    sticks_num = len(sticks)\n    out = 0\n    dp = [[0] * (N + 1) for _ in range(sticks_num)]\n    for i in range(sticks_num):\n        dp[i][i + 1] = sticks[i]\n    for i in range(sticks_num - 2, -1, -1):\n        for j in range(i + 1, sticks_num):\n            for k in range(i + 1, j + 1):\n                if sticks[i] <= sticks[k]:\n                    dp[i][j] = max(dp[i][j], dp[i][k] + dp[k + 1][j])\n    return str(dp[0][sticks_num - 1])\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    array = list(map(int, stdin.split()))\n\n    array = sorted(array)\n    print(array)\n\n    #finding the least number of sticks with length l\n    def find_number_of_sticks(l_list):\n        start = 0\n        end = len(l_list)-1\n        while start <= end:\n            mid = (start + end)//2\n            if l_list[mid]>=l_list[mid-1]:\n                start = mid+1\n            else:\n                end = mid-1\n        return len(l_list)-start\n    #finding the number of rectangles needed\n    def number_of_rectangles(array,l_list):\n        count = 0\n        for i in range(0,len(array)):\n            a = array[i]\n            l = l_list[i]\n            count+=find_number_of_sticks(l_list[i:])\n\n        return count\n    #find the total area of rectangles\n    def total_area(array,l_list):\n        count = 0\n        for i in range(0,len(array)):\n            count+=array[i]*l_list[i]\n        return count\n    print(number_of_rectangles(array,l_list))\n    print(total_area(array,l_list))\n\nsolution(input())\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    sticks: list = stdin.split()\n    sticks = sorted(map(int, sticks))\n    ans: int = 0\n    for i in range(n):\n        if sticks[i] == 0:\n            continue\n        max_area: int = 0\n        for j in range(i, n):\n            if sticks[j] <= sticks[i]:\n                break\n            if max_area < (sticks[j] + sticks[i]) * (j - i):\n                max_area = (sticks[j] + sticks[i]) * (j - i)\n        ans += max_area\n    return str(ans)\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    l = list(map(int, stdin.split()[1]))\n    # print(n,l)\n    return str(int(max(l)*n))\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sticks = sorted(map(int, stdin.split()))\n    res = 0\n    j = 0\n    for i in range(1, n):\n        if sticks[i-1] >= sticks[i]:\n            continue\n        elif sticks[i-1] < sticks[i] and j == 0:\n            continue\n        else:\n            j = sticks[i-1]\n            continue\n        if j < sticks[i]:\n            res = max(res, sticks[i] * (i - j) + solution(str(sticks[i-1]) + str(sticks[i])) + j * (i - j))\n        else:\n            res = max(res, sticks[i] * (i - j) + sticks[i-1] * (j - sticks[i-1]))\n    return str(res)\n\nsolution('''4\n2 4 4 2\n''')"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # 1. Prepare the input in the right way\n    inputs = stdin.split(\"\\n\")\n    input_n = int(inputs[0])\n    input_l = list(map(int, inputs[1].split()))\n    # 2. Count the number of rectangles and create a list of the rectangles\n    rectangles = []\n    for i in range(len(input_l)):\n        if i + 1 == len(input_l):\n            rectangles.append([input_l[i]])\n        else:\n            rectangles.append([input_l[i], input_l[i+1]])\n    # 3. The list of rectangles is made of lists of integers which are the lengths of the sticks in the rectangle.\n    rectangles_l = []\n    for i in rectangles:\n        rectangles_l.append(i[0])\n        rectangles_l.append(i[1])\n    # 4. Number of rectangles can be calculated by the formula\n    number_of_rectangles = int((sum(rectangles_l) / 2) * 1.2)\n    return str(number_of_rectangles)\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    return the maximum total area of rectangles which can be made from the available sticks if makes rectangles from the available sticks.\n    '''\n    n = int(stdin.split()[0])\n    lengths = list(map(int, stdin.split()[1].split()))\n    lengths.sort()\n    # create the rectangle and compute the area\n    area = 0\n    while True:\n        if len(lengths) == 0:\n            return area\n        if len(lengths) == 1:\n            area += lengths[0]\n            break\n        l1 = lengths.pop()\n        l2 = lengths.pop()\n        l3 = lengths.pop()\n        area += l1 * l2 * l3\n    return area\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    lengths = list(map(int, stdin.split()))\n    return str(max(max(lengths) - min(lengths), 0))\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return '{:.9f}'.format(problem_solver(stdin))\n\ndef"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    result = []\n    for i in range(n):\n        result.append('')\n    for i in range(len(result)):\n        for j in range(len(stdin)):\n            if j == 0:\n                result[i] += stdin[j].replace('a','1').replace('b','0').replace('d','2').replace('e','3').replace('j','4')\n            else:\n                result[i] += stdin[j]\n    print(sum(map(int,result)))\n\nsolution(input())\n\n\"\"\"\n\nimport math\nimport itertools"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l = [stdin]\n    sum_n = 0\n    sum_n_1 = 0\n    for i in range(n):\n        sum_n = 0\n        sum_n_1 = 0\n        l.append(stdin)\n        for j in range(len(l)):\n            for k in range(len(l[j])):\n                if l[j][k].isdigit():\n                    sum_n += int(l[j][k])\n                else:\n                    if l[j][k] == 'a':\n                        sum_n_1 += 1\n                    elif l[j][k] == 'b':\n                        sum_n_1 += 0\n                    elif l[j][k] == 'c':\n                        sum_n_1 += 2\n                    elif l[j][k] == 'd':\n                        sum_n_1 += 3\n                    elif l[j][k] == 'e':\n                        sum_n_1 += 4\n                    elif l[j][k] == 'f':\n                        sum_n_1 += 5\n                    elif l[j][k] == 'g':\n                        sum_n_1 += 6\n                    elif l[j][k] == 'h':\n                        sum_n_1 += 7\n                    elif l[j][k] == 'i':\n                        sum_n_1 += 8\n                    elif l[j][k] == 'j':\n                        sum_n_1 += 9\n                    elif l[j][k] == 'k':\n                        sum_n_1 += 10\n                    elif l[j][k] == 'l':\n                        sum_n_1 += 11\n                    elif l[j][k] =='m':\n                        sum_n_1 += 12\n                    elif l[j][k] == 'n':\n                        sum_n_1 += 13\n                    elif l[j][k] == 'o':\n                        sum_n_1 += 14\n                    elif l[j][k] == 'p':\n                        sum_n_1 += 15\n                    elif l[j][k] == 'q':\n                        sum_n_1 += 16\n                    elif l[j][k] == 'r':\n                        sum_n_1 += 17\n                    elif l[j][k] =='s':\n                        sum_n_1 += 18\n                    elif l[j][k] == 't':\n                        sum_n_1 += 19\n                    elif l[j][k] == 'u':\n                        sum_n_1 += 20\n                    elif l[j][k] == 'v':\n                        sum_n_1 += 21\n                    elif l[j][k] == 'w':\n                        sum_n_1 += 22\n                    elif l[j][k] == 'x':\n                        sum_n_1 += 23\n                    elif l[j][k] == 'y':\n                        sum_n_1 += 24\n                    elif l[j][k] == 'z':\n                        sum_n_1 += 25\n                    elif l[j][k] == '0':\n                        sum_n_1 += 0\n                    elif l[j][k] == '1':\n                        sum_n_1 += 1\n                    elif l[j][k] == '2':\n                        sum_n_1 += 2\n                    elif l[j][k] == '3':\n                        sum_n_1 += 3\n                    elif l[j][k] == '4':\n                        sum_n_1 += 4\n                    elif l[j][k] == '5':\n                        sum_n_1 += 5\n                    elif l[j][k] == '6':\n                        sum_n_1 += 6\n                    elif l[j][k] == '7':\n                        sum_n_1 += 7\n                    elif l[j][k] == '8':\n                        sum_n_1 += 8\n                    elif l[j][k] == '9':\n                        sum_n_1 += 9\n                sum_n += int(l[j][k])\n        if sum_n > sum_n_1:\n            sum_n = sum_n - sum_n_1\n        else:\n            sum_n = 0\n        sum_n_1 = sum_n\n    return str(sum_n)\n\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin.strip())\n    return f'{sum(int(s) for s in stdin.split())}'\n\nstdin = input()\nprint(solution(stdin))\n\n\"\"\"\n\nn = int(input())\ninput_list = []\nfor i in range(n):\n    input_list.append(input())\n\ninput_list_without_zeros = []\nfor i in range(len(input_list)):\n    input_list_without_zeros.append(input_list[i].replace(\"0\", \"a\").replace(\"1\", \"b\").replace(\"2\", \"c\").replace(\"3\", \"d\").replace(\"4\", \"e\"))\n\nprint(min(sum(int(i) for i in s) for s in input_list_without_zeros))\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    lst = []\n    for i in range(n):\n        lst.append(stdin[i])\n    lst.sort()\n    return \"\".join(lst)\n\nsolution(input())\n\ndef"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    arr = stdin.split()\n    ans = 0\n    for i in range(len(arr)):\n        temp = \"\"\n        for j in arr[i]:\n            if j.isdigit():\n                temp += str(chr(int(j)+ord('a')))\n            elif j.isalpha():\n                temp += str(chr(ord(j)-ord('a')+ord('a')))\n            else:\n                temp += j\n        arr[i] = temp\n    for i in range(len(arr)):\n        ans += int(arr[i])\n    return str(ans)\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    res = 0\n    for _ in range(n):\n        _, *s = stdin.split()\n        s = ''.join([str(ord(i) - 97) if i.isnumeric() else i for i in s])\n        res += int(s)\n    return str(res)\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    return \" \".join(f\"{int(n[i]):0{6 - len(str(int(n[i])))}d}\" for i in range(n))\n\nsolution(input())"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    n = int(stdin)\n    s = stdin\n    new_s = []\n    for _ in range(n):\n        new_s.append(s[0])\n        s = s[1:]\n        \n    \n    print(''.join(new_s))\n    return ''.join(new_s)\n\nsolution(input())\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    data = stdin\n    for i in range(1, n):\n        data = data.replace(\"a\", \"1\", 1)\n        data = data.replace(\"b\", \"0\", 1)\n        data = data.replace(\"d\", \"2\", 1)\n        data = data.replace(\"e\", \"3\", 1)\n        data = data.replace(\"j\", \"4\", 1)\n        data = data.replace(\"a\", \"\", 1)\n        data = data.replace(\"b\", \"\", 1)\n        data = data.replace(\"d\", \"\", 1)\n        data = data.replace(\"e\", \"\", 1)\n        data = data.replace(\"j\", \"\", 1)\n    return data\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n == m:\n        return \"1\"\n    elif n > m:\n        return str(n)\n    elif n < m:\n        return str(m)\n    elif m == 0:\n        return \"0\"\n    else:\n        return \"2\"\n    \"\"\"\n\n\ndef"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    '''\n    n, m = (int(x) for x in stdin.split())\n    experienced = {\n        i: 1 for i in range(1, n + 1)}\n    newbies = {\n        i: 0 for i in range(1, n + 1)}\n    #print(experienced, newbies)\n    if n > m:\n        return str(sum(newbies.values()))\n    else:\n        return str(sum(experienced.values()) + sum(newbies.values()))\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(m // (n + m))\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    return str(min(N + 1, M + 1))\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    return str(n*m)"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(min(n, m, max(n-m, m+n-m, max(n, m)) + 1))\nprint(solution(input()))\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(min(n, m))\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n > m:\n        return str(m)\n    return str(n)\n\n\"\"\"\n\nfrom functools import reduce\n\ndef"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    xp, nb = list(), list()\n    for i in range(n):\n        xp.append(i)\n    for i in range(m):\n        nb.append(i)\n    newbies = set(nb)\n    experienced = set(xp)\n    while True:\n        if len(experienced) == 1 and len(newbies) == 1:\n            return \"1\"\n        elif len(experienced) == 2 and len(newbies) == 2:\n            return \"2\"\n        else:\n            to_remove = set()\n            to_add = set()\n            for i in range(len(experienced)):\n                for j in range(i+1, len(experienced)):\n                    x = len(experienced.intersection((experienced.union(newbies))))\n                    y = len(experienced.union(newbies).intersection(newbies))\n                    if x < y:\n                        to_remove.add(experienced.pop(i))\n                    elif x > y:\n                        to_add.add(experienced.pop(i))\n            experienced.update(to_add)\n            newbies.update(to_remove)\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    for s in stdin.split():\n        if \"AB\" in s and \"BA\" in s:\n            print(\"YES\")\n            return\n    print(\"NO\")\n    return\n\nsolution(input())\n\ndef"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    for s in stdin.split('\\n'):\n        if (s.count('AB') and s.count('BA')) > 0:\n            return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if (\"AB\" in stdin) and (\"BA\" in stdin) else 'NO'\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if any(len(set(tup)) == 1 and tup[0] not in \"AB\" and tup[1] not in \"AB\" for tup in zip(*[iter(stdin)]*2)) else \"NO\"\n\n\n\ndef"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    for s in stdin.split(\"\\n\"):\n        if \"AB\" in s and \"BA\" in s:\n            return \"YES\"\n    return \"NO\""
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin\n    if len(string) < 2:\n        return 'NO'\n    \n    index = 0\n    while index < len(string) - 1:\n        if string[index: index + 2] == 'AB':\n            if index + 2 < len(string) - 1:\n                while index < len(string) - 1 and string[index + 2] == 'A':\n                    index += 1\n                if index + 2 < len(string) and string[index + 2] == 'B':\n                    return 'YES'\n            else:\n                return 'YES'\n        index += 1\n    return 'NO'\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # TODO: Write your code here\n    if len(stdin)<3: return \"NO\"\n    for i in range(1,len(stdin)):\n        if stdin.count(stdin[i]) > 1:\n            print(\"YES\")\n            return \"YES\"\n    print(\"NO\")\n    return \"NO\"\n    "
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    if (stdin.count(\"AB\") == 2 and stdin.count(\"BA\") == 1) or (stdin.count(\"BA\") == 2 and stdin.count(\"AB\") == 1):\n        return \"YES\"\n    else:\n        return \"NO\"\n    pass\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(len(stdin)):\n        if len(stdin) > 1:\n            if stdin[i:i + 2] == 'AB':\n                return 'YES'\n    return 'NO'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if (s.find('AB') > 0 and s.find('BA') > 0) == False:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n    k = int(stdin.split()[2])\n    b = list(map(int, stdin.split()[3]))\n\n    if k > n:\n        return \"NO\"\n\n    if k == n:\n        return \"YES\"\n\n    if a == b:\n        return \"NO\"\n\n    q = n-k\n    q_map = {1: 1}\n    w = a[:]\n\n    while len(w) > 1:\n        max_w = max(w)\n        q_l = q_map.get(max_w, -1)\n        if q_l == -1:\n            q_map[max_w] = len(q_map)\n\n        if q_l!= -1:\n            q = q_l - q - 1\n            q_map[max_w] = q_l\n        w.remove(max_w)\n\n    if q > 0:\n        return \"NO\"\n\n    q_map = {1: 1}\n    w = b[:]\n    while len(w) > 1:\n        max_w = max(w)\n        q_r = q_map.get(max_w, -1)\n        if q_r == -1:\n            q_map[max_w] = len(q_map)\n        if q_r!= -1:\n            q = q_r - q - 1\n            q_map[max_w] = q_r\n        w.remove(max_w)\n\n    return \"YES\" if q == 0 else \"NO\"\n\nsolution(\"10 10 1\")\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 1 2 2 2 1 2\n   ... 2\n   ... 5 5\n   ... ''')\n    'YES'\n    >>> solution('''\n   ... 1 1 1 3 3\n   ... 3\n   ... 1 1 6\n   ... ''')\n    'NO'\n    \"\"\"\n    def eat(weights: list) -> list:\n        for i in range(1, len(weights)):\n            if weights[i] > weights[i - 1]:\n                weights[i] += weights[i - 1]\n                weights.pop(i - 1)\n                return eat(weights)\n        return weights\n\n    n = int(stdin)\n    queue = eat(list(map(int, stdin.split())))\n\n    if len(queue) == n:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 5\n   ... 1 2 2 2 1 2\n   ... 2\n   ... 5 5\n   ... ''')\n    'YES'\n    >>> solution('''\n   ... 5\n   ... 1 1 1 3 3\n   ... 3\n   ... 2 1 6\n   ... ''')\n    'NO'\n    \"\"\"\n    N, *_, M, *_ = list(map(int, stdin.split()))\n    weights = list(map(int, stdin.split()))\n    monsters = {}\n    for i, weight in enumerate(weights, start=1):\n        monsters[i] = weight\n    queue = [i + 1 for i in range(N)]\n    while queue:\n        for i in range(len(queue) - 1):\n            if monsters[queue[i]] > monsters[queue[i + 1]]:\n                return 'NO'\n        queue.pop(queue.index(min(queue)))\n        queue.append(queue.pop(queue.index(max(queue)) + 1))\n    return 'YES'\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    queue = list(map(int, stdin.split()))\n    if not k: return 'NO'\n    k -= 1\n    b = list(map(int, stdin.split()))\n    def eat_monsters():\n        result = []\n        for _ in range(len(queue)):\n            if len(result) >= k: break\n            if len(queue) - 1 >= len(result):\n                result.append(queue.pop(0))\n                continue\n            i = len(queue) - 1\n            while i - 1 >= 0 and queue[i] > queue[i - 1]:\n                i -= 1\n            if i - 1 == -1:\n                result.append(queue.pop(0))\n            else:\n                result.append(queue.pop(i))\n        return result\n\n    res = eat_monsters()\n    if res == k:\n        return 'YES'\n    else:\n        return 'NO'\n\n\nprint(solution(input()))"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()[1:]))\n    b = list(map(int, stdin.split()[2:]))\n    lst = []\n    lst1 = []\n    for i in range(n):\n        if len(lst) == 0:\n            lst1.append(i)\n            lst.append(a[i])\n        else:\n            while len(lst)!= 0 and a[i] > lst[-1]:\n                lst.append(a[i])\n                lst1.append(i)\n            if len(lst) == 0:\n                lst.append(a[i])\n                lst1.append(i)\n            else:\n                lst.pop()\n            lst.append(a[i])\n    if len(lst) == 0:\n        return \"NO\"\n    if k == n:\n        return \"YES\"\n    if k == len(lst1):\n        return \"YES\"\n    for i in range(k):\n        if b[i] - a[lst1[i]] > 0:\n            return \"NO\"\n    for i in range(k - 1):\n        for j in range(k - 1 - i):\n            if a[lst1[j]] > a[lst1[j + 1]]:\n                return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    weights = list(map(int, stdin.split()))\n    k = int(stdin)\n    weights.append(1)\n    weights.append(1)\n    weights.append(1)\n    weights.sort(reverse=True)\n    while len(weights) > k:\n        weight = weights.pop()\n        if weight!= weights[-1]:\n            weights.append(weight)\n    if weights[0]!= weights[-1]:\n        return \"NO\"\n    else:\n        if len(weights) == k:\n            return \"YES\"\n        else:\n            return \"NO\"\n    return\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    weights = list(map(int, stdin.split()))\n    if n == k:\n        return \"NO\"\n    i = 0\n    j = 0\n    queue = []\n    for _ in range(n):\n        queue.append(weights[i])\n        i += 1\n        if i == n:\n            i = 0\n    while True:\n        if queue[j] > queue[j + 1]:\n            queue.append(queue.pop(j))\n        else:\n            queue.append(queue.pop(j + 1))\n        if queue[j] + queue[j + 1] == k:\n            return \"YES\"\n        else:\n            return \"NO\"\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    k = int(stdin.split()[1])\n    b = list(map(int, stdin.split()[2]))\n    queue = list(range(1, n+1))\n    order = []\n    for i in range(1, k+1):\n        order.append(i)\n    count = 0\n    if n == k:\n        if a == b:\n            return 'YES'\n    for i in range(n):\n        if i == 0:\n            if a[0] > b[0]:\n                order[count] = queue.pop(0)\n                queue.append(order[count])\n                count += 1\n                if a[1] > b[1]:\n                    queue.pop(0)\n                    queue.append(order[count])\n                    count += 1\n                if a[2] > b[2]:\n                    queue.pop(0)\n                    queue.append(order[count])\n                    count += 1\n                if a[3] > b[3]:\n                    queue.pop(0)\n                    queue.append(order[count])\n                    count += 1\n                if a[4] > b[4]:\n                    queue.pop(0)\n                    queue.append(order[count])\n                    count += 1\n                if a[5] > b[5]:\n                    queue.pop(0)\n                    queue.append(order[count])\n                    count += 1\n        if i == n - 1:\n            if a[-1] > b[-1]:\n                order[count] = queue.pop(0)\n                queue.append(order[count])\n                count += 1\n                if a[-2] > b[-2]:\n                    queue.pop(0)\n                    queue.append(order[count])\n                    count += 1\n                if a[-3] > b[-3]:\n                    queue.pop(0)\n                    queue.append(order[count])\n                    count += 1\n                if a[-4] > b[-4]:\n                    queue.pop(0)\n                    queue.append(order[count])\n                    count += 1\n                if a[-5] > b[-5]:\n                    queue.pop(0)\n                    queue.append(order[count])\n                    count += 1\n        if i == n - 2:\n            if a[-3] > b[-3]:\n                order[count] = queue.pop(0)\n                queue.append(order[count])\n                count += 1\n                if a[-4] > b[-4]:\n                    queue.pop(0)\n                    queue.append(order[count])\n                    count += 1\n                if a[-5] > b[-5]:\n                    queue.pop(0)\n                    queue.append(order[count])\n                    count += 1\n        if i == n - 3:\n            if a[-4] > b[-4]:\n                order[count] = queue.pop(0)\n                queue.append(order[count])\n                count += 1\n                if a[-5] > b[-5]:\n                    queue.pop(0)\n                    queue.append(order[count])\n                    count += 1\n        if i == n - 4:\n            if a[-5] > b[-5]:\n                order[count] = queue.pop(0)\n                queue.append(order[count])\n                count += 1\n                if a[-6] > b[-6]:\n                    queue.pop(0)\n                    queue.append(order[count])\n                    count += 1\n        if i == n - 5:\n            if a[-6] > b[-6]:\n                order[count] = queue.pop(0)\n                queue.append(order[count])\n                count += 1\n    answer = 'NO'\n    if order == list(range(1, n+1)):\n        answer = 'YES'\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, _ = stdin.split()\n    n = int(n)\n    queue = [*map(int, stdin.split())]\n\n    k = int(stdin.split()[1])\n    monsters = [*map(int, stdin.split()[2:])]\n    monsters = list(enumerate(monsters))\n\n    while len(queue) > 1:\n        idx, weight = monsters[0]\n        for i in range(1, len(monsters)):\n            monster, weight = monsters[i]\n            if weight >= weight:\n                if weight > queue[0]:\n                    break\n                else:\n                    monsters.pop(0)\n                    continue\n        else:\n            break\n        monsters.pop(0)\n        if idx < k:\n            for i in range(k - idx):\n                queue.pop(0)\n\n    if len(queue) == 1:\n        return 'NO'\n    else:\n        return 'YES'\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    R, B = list(map(int, lines[0].split()))\n    Rebels = list(map(lambda x: list(map(int, x.split())), lines[1:]))\n    for reb in range(R):\n        for base in range(B):\n            print(Rebels[reb][0] > Rebels[reb][1] and (Rebels[reb][1] > Rebels[base][1] and Rebels[reb][1] > Rebels[base][0]) or (Rebels[reb][1] < Rebels[reb][0] and (Rebels[reb][0] < Rebels[base][0] or Rebels[base][0] < Rebels[base][1])))\n            #print(Rebels[reb][0] > Rebels[reb][1] and (Rebels[reb][1] > Rebels[base][1] and Rebels[reb][1] > Rebels[base][0]) or (Rebels[reb][1] < Rebels[reb][0] and (Rebels[reb][0] < Rebels[base][0] or Rebels[base][0] < Rebels[base][1])), str(Rebels[reb][0] > Rebels[reb][1] and (Rebels[reb][1] > Rebels[base][1] and Rebels[reb][1] > Rebels[base][0]) or (Rebels[reb][1] < Rebels[reb][0] and (Rebels[reb][0] < Rebels[base][0] or Rebels[base][0] < Rebels[base][1]))))\n            #print(Rebels[reb][1] > Rebels[reb][0], (Rebels[reb][0] < Rebels[base][0] or Rebels[base][0] < Rebels[base][1]))\n    return 'Yes' if any(map(lambda x: (x[0] > x[1] and (x[1] > Rebels[base][1] and x[1] > Rebels[reb][0]) or (x[1] < Rebels[reb][0] and (x[0] < Rebels[base][0] or Rebels[base][0] < Rebels[base][1])))), Rebels)) else 'No'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    b, r = map(int, stdin.split())\n    for i in range(r):\n        x, y = map(int, stdin.split())\n        if x == 0 and y == 0:\n            continue\n        elif x == 0:\n            if y == 0 or y == b-1:\n                continue\n            else:\n                return 'No'\n        elif y == 0:\n            if x == 0 or x == r-1:\n                continue\n            else:\n                return 'No'\n        else:\n            if x == 0 and y == 0:\n                continue\n            elif x == 0 or x == b-1:\n                continue\n            elif y == 0 and x == 0 or y == b-1:\n                continue\n            else:\n                return 'No'\n\n    return 'Yes'\n\n\n\ndef"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport itertools\nfrom typing import List\n\nimport pytest\n\n\n@pytest.mark.parametrize(\n    ('input_s', 'expected'),\n    (\n            (\n                    '3 3',\n                    'Yes'\n            ),\n            (\n                    '2 1',\n                    'No'\n            ),\n            (\n                    '1 0',\n                    'Yes'\n            ),\n            (\n                    '2 2',\n                    'No'\n            ),\n    ),\n)\ndef"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    x, y = stdin.pop(0).split()\n    b = 0\n    r = 0\n    n = int(stdin.pop(0))\n    assert len(stdin) == n\n    spaceships = []\n    for i in range(n):\n        spaceships.append([int(x) for x in stdin[i].split()])\n    spaceships = sorted(spaceships, key=lambda x: x[0])\n    bases = []\n    for i in range(n):\n        bases.append([int(x) for x in stdin[i].split()])\n    bases = sorted(bases, key=lambda x: x[1])\n    # print(spaceships)\n    # print(bases)\n    # print(x)\n    # print(y)\n    # print(r)\n    # print(n)\n    for i in range(len(spaceships)):\n        # print(\"x = \",x)\n        # print(\"y = \", y)\n        # print(\"x0 = \", spaceships[i][0])\n        # print(\"y0 = \", spaceships[i][1])\n        x0 = spaceships[i][0]\n        y0 = spaceships[i][1]\n        for j in range(len(bases)):\n            # print(\"x1 = \", x)\n            # print(\"y1 = \", y)\n            # print(\"x1 = \", bases[j][0])\n            # print(\"y1 = \", bases[j][1])\n            x1 = bases[j][0]\n            y1 = bases[j][1]\n            if x0 == x1 and y0 == y1:\n                continue\n            if x0 == x1 and y0 == y1 + 1:\n                continue\n            if x0 == x1 and y0 == y1 - 1:\n                continue\n            if x0 == x1 and y0 == y1 - 2:\n                continue\n            if x0 == x1 and y0 == y1 - 3:\n                continue\n            if x0 == x1 and y0 == y1 + 2:\n                continue\n            if x0 == x1 and y0 == y1 + 3:\n                continue\n            if x0 == x1 and y0 == y1 + 4:\n                continue\n            if x0 == x1 and y0 == y1 - 4:\n                continue\n            if x0 == x1 and y0 == y1 + 4:\n                continue\n            if x0 == x1 and y0 == y1 - 4:\n                continue\n            if x0 == x1 and y0 == y1 + 4:\n                continue\n            if x0 == x1 and y0 == y1 + 4:\n                continue\n            if x0 == x1 and y0 == y1 + 5:\n                continue\n            if x0 == x1 and y0 == y1 - 5:\n                continue\n            if x0 == x1 and y0 == y1 - 5:\n                continue\n            if x0 == x1 and y0 == y1 - 6:\n                continue\n            if x0 == x1 and y0 == y1 + 5:\n                continue\n            if x0 == x1 and y0 == y1 + 6:\n                continue\n            if x0 == x1 and y0 == y1 + 7:\n                continue\n            if x0 == x1 and y0 == y1 - 7:\n                continue\n            if x0 == x1 and y0 == y1 - 7:\n                continue\n            if x0 == x1 and y0 == y1 - 8:\n                continue\n            if x0 == x1 and y0 == y1 + 7:\n                continue\n            if x0 == x1 and y0 == y1 + 8:\n                continue\n            if x0 == x1 and y0 == y1 + 9:\n                continue\n            if x0 == x1 and y0 == y1 - 9:\n                continue\n            if x0 == x1 and y0 == y1 - 9:\n                continue\n            if x0 == x1 and y0 == y1 - 10:\n                continue\n            if x0 == x1 and y0 == y1 + 9:\n                continue\n            if x0 == x1 and y0 == y1 + 10:\n                continue\n            if x0 == x1 and y0 == y1 + 11:\n                continue\n            if x0 == x1 and y0 == y1 - 11:\n                continue\n            if x0 == x1 and y0 == y1 - 11:\n                continue\n            if x0 == x1 and y0 == y1 - 12:\n                continue\n            if x0 == x1 and y0 == y1 + 11:\n                continue\n            if x0 == x1 and y0 == y1 + 12:\n                continue\n            if x0 == x1 and y0 == y1 + 13:\n                continue\n            if x0 == x1 and y0 == y1 - 13:\n                continue\n            if x0 == x1 and y0 == y1 - 13:\n                continue\n            if x0 == x1 and y0 == y1 - 14:\n                continue\n            if x0 == x1 and y0 == y1 + 13:\n                continue\n            if x0 == x1 and y0 == y1 + 14:\n                continue\n            if x0 == x1 and y0 == y1 + 15:\n                continue\n            if x0 == x1 and y0 == y1 - 15:\n                continue\n            if x0 == x1 and y0 == y1 - 15:\n                continue\n            if x0 == x1 and y0 == y1 - 16:\n                continue\n            if x0 == x1 and y0 == y1 + 15:\n                continue\n            if x0 == x1 and y0 == y1 + 16:\n                continue\n            if x0 == x1 and y0 == y1 + 17:\n                continue\n            if x0 == x1 and y0 == y1 - 17:\n                continue\n            if x0 == x1 and y0 == y1 - 17:\n                continue\n            if x0 == x1 and y0 == y1 - 18:\n                continue\n            if x0 == x1 and y0 == y1 + 17:\n                continue\n            if x0 == x1 and y0 == y1 + 18:\n                continue\n            if x0 == x1 and y0 == y1 + 19:\n                continue\n            if x0 == x1 and y0 == y1 - 19:\n                continue\n            if x0 == x1 and y0 == y1 - 19:\n                continue\n            if x0 == x1 and y0 == y1 - 20:\n                continue\n            if x0 == x1 and y0 == y1 + 19:\n                continue\n            if x0 == x1 and y0 == y1 + 20:\n                continue\n            if x0 == x1 and y0 == y1 + 21:\n                continue\n            if x0 == x1 and y0 == y1 - 21:\n                continue\n            if x0 == x1 and"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def get_intersecting_points(line_1, line_2):\n        \"\"\"\n        Finds the intersection of two line segments (points).\n        \"\"\"\n        # Make sure that the lines are different lengths\n        # to avoid a potential divide by zero error\n        if line_1[0] - line_1[1]!= 0 and line_2[0] - line_2[1]!= 0:\n            # Calculate the intersection point\n            x = (line_2[0] - line_1[0]) / (line_1[0] - line_1[1])\n            y = (line_2[1] - line_1[1]) / (line_1[0] - line_1[1])\n        else:\n            return None\n        # If the line segments don't intersect,\n        # then return None\n        if x >= min(line_1[0], line_1[1]) and x <= max(line_1[0], line_1[1]) and y >= min(line_2[0], line_2[1]) and y <= max(line_2[0], line_2[1]):\n            return (x, y)\n        else:\n            return None\n\n    R, B = map(int, stdin.split())\n    # initialize base positions\n    base_positions = []\n    # initialize spaceship positions\n    spaceship_positions = []\n    # Loop through each base\n    for i in range(B):\n        base_position = list(map(int, stdin.split()))\n        base_positions.append(base_position)\n        # Loop through each spaceship\n        for j in range(R):\n            spaceship_position = list(map(int, stdin.split()))\n            spaceship_positions.append(spaceship_position)\n    # find intersecting points\n    intersections = []\n    for base in base_positions:\n        for spaceship in spaceship_positions:\n            intersection = get_intersecting_points(base, spaceship)\n            if intersection!= None:\n                intersections.append(intersection)\n    # if there are no intersections, then return No\n    if len(intersections) == 0:\n        return 'No'\n    # otherwise return Yes\n    return 'Yes'\n\n\nInput\n2 1\n1 0\n2 2\n3 1\n\nOutput\nYes\n\n\nInput\n3 1\n1 0\n2 0\n3 1\n\nOutput\nNo\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin.split())!= 3:\n        return \"No\"\n    R = int(stdin.split()[0])\n    B = int(stdin.split()[1])\n    Rebel = []\n    Bases = []\n    for i in range(R):\n        Rebel.append([int(stdin.split()[i * 2 + 1]), int(stdin.split()[i * 2 + 2])])\n    for i in range(B):\n        Bases.append([int(stdin.split()[i * 2 + 1]), int(stdin.split()[i * 2 + 2])])\n    return \"Yes\" if Solution(R, B, Rebel, Bases) else \"No\"\n\n\ndef"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    R, B = list(map(int, stdin.split()))\n    rebels = [(i, *map(int, stdin.split()[i + 1:])) for i in range(R)]\n    bases = [(i, *map(int, stdin.split()[i + 1:])) for i in range(B)]\n    for r in range(len(rebels) - 1):\n        for b in range(len(bases) - 1):\n            if abs(bases[b][0] - rebels[r][0]) + abs(bases[b][1] - rebels[r][1]) == abs(rebels[r + 1][0] - rebels[b][0]) + abs(\n                    rebels[r + 1][1] - rebels[b][1]) and bases[b][2] == rebels[r][2] and bases[b][3] == rebels[r][3]:\n                return \"Yes\"\n    return \"No\""
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    R, B = map(int, stdin.split())\n    R = []\n    for i in range(R):\n        x, y = map(int, stdin.split())\n        R.append((x, y))\n    B = []\n    for i in range(B):\n        x, y = map(int, stdin.split())\n        B.append((x, y))\n    for r in R:\n        for b in B:\n            if abs(r[0] - b[0]) + abs(r[1] - b[1]) > 10000:\n                break\n            else:\n                continue\n        else:\n            print(\"Yes\")\n            return\n    print(\"No\")\n    return\n\ndef"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    result: bool = False\n    r, b = [int(i) for i in stdin.split(' ')]\n\n    for i in range(1, r):\n        x = int(stdin.split(' ')[i])\n        for j in range(i + 1, r):\n            y = int(stdin.split(' ')[j])\n            if not(x == 0 or y == 0):\n                if x == y:\n                    continue\n                if (x * y < 0):\n                    result = True\n                break\n    return 'Yes' if result else 'No'\n\n\nsolution('3 3')\nsolution('2 1')\nsolution('1 2')\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if m == n:\n        return \"0\"\n    min_steps = float(\"inf\")\n    while m!= n:\n        if m > n:\n            m -= 2 * n\n        else:\n            m -= n\n        min_steps = min(min_steps, m)\n    return str(min_steps) if min_steps!= float(\"inf\") else \"0\"\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    count = 0\n    while m > n:\n        n *= 2\n        count += 1\n    return str(count) if m == n else str(count + 1)\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    \n    for i in range(n):\n        print(n - i)\n        \n    return \"\"\n\nsolution(\"10 1\")\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n,m=map(int,stdin.split())\n    count=0\n    while n>=m:\n        if n%2==1:\n            if n>=m:\n                n-=1\n                count+=1\n            else:\n                n+=1\n                count+=1\n        else:\n            n/=2\n            count+=1\n    return str(count)"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def n_of_pushes(n: int, m: int) -> int:\n        click_times = 0\n        while n!= 0:\n            if n % 2 == 0:\n                click_times += 1\n            n = n // 2\n        return click_times\n\n    return str(n_of_pushes(int(stdin.split()[0]), int(stdin.split()[1])))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    _, n, m = stdin.split()\n    n = int(n)\n    m = int(m)\n    if n > m:\n        return '0'\n    return str(n*2-1-n+1+m)\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    count = 0\n    while n!= m:\n        if n > m:\n            n = n - m\n        else:\n            m = m - n\n            count += 1\n    return str(count)"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = stdin.split(' ')\n    n = int(n)\n    m = int(m)\n    count = 0\n    while n!= 0:\n        if n == 1:\n            count += 1\n        elif n % 2 == 0:\n            n //= 2\n        else:\n            n -= 1\n        count += 1\n    return str(count)\n\ndef"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n'''"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    _, n, m = stdin.split()\n    n = int(n)\n    m = int(m)\n    if m > n:\n        return n\n    return max(0, 2 * n - m)\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(lambda x: int(x.strip()), stdin.strip().split()))\n\n    adj = [[] for _ in range(n)]\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (a[i][1] < a[j][0]) or (a[i][0] > a[j][1]):\n                continue\n            adj[i].append(j)\n            adj[j].append(i)\n\n    root = 0\n    for i in range(n):\n        if len(adj[i]) == 1:\n            root = i\n\n    visited = [0] * n\n    stack = [root]\n    visited[root] = 1\n    while stack:\n        curr = stack.pop()\n        for i in adj[curr]:\n            if visited[i] == 1:\n                continue\n            visited[i] = 1\n            stack.append(i)\n\n    for i in range(n):\n        if len(adj[i]) > 1:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    segments = list(map(lambda x: list(map(int, x.split())), stdin.split()))\n    for i in range(len(segments)-1):\n        for j in range(i+1, len(segments)):\n            if is_intersect(segments[i], segments[j]):\n                return 'NO'\n    return 'YES'\n\ndef"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    segments = []\n    segment_overlaps = set()\n\n    for _ in range(n):\n        segments.append([int(i) for i in stdin.split()])\n\n    for i in range(n):\n        for j in range(i+1, n):\n            segment_overlaps.add(segments[i])\n            segment_overlaps.add(segments[j])\n\n    return 'NO' if len(segment_overlaps) > 1 else 'YES'\n\"\"\"\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    n = int(stdin[0])\n\n    graph = []\n    for i in range(1, n + 1):\n        segment_lengths = list(map(int, stdin[i].split()))\n        segment_lengths[0] -= 1\n        segment_lengths[1] -= 1\n        graph.append(segment_lengths)\n\n    if check_tree_is_tree(graph):\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\n\ndef"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input_n = int(stdin)\n    n = input_n\n    graph = dict()\n    for i in range(1, n+1):\n        segment = list(map(int, input().split()))\n        graph[i] = segment\n    is_tree = True\n    for vertex in graph:\n        for neighbor in graph:\n            if vertex!= neighbor and neighbor in graph[vertex]:\n                is_tree = False\n    if is_tree:\n        print('YES')\n    else:\n        print('NO')\nsolution(input())"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    segments = []\n    for i in range(n):\n        segments.append(list(map(int, stdin.split())))\n\n    g = Graph()\n    for segment in segments:\n        g.add_edge(*segment)\n\n    print(\"YES\" if g.is_tree() else \"NO\")\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    segments = []\n    for i in range(int(stdin)):\n        segments.append(list(map(int, stdin.split())))\n\n    g = Graph(n=len(segments))\n    for s in segments:\n        g.add_edge(s[0]-1, s[1]-1)\n    for v in range(g.num_vertices):\n        g.add_edge(v, v)\n\n    return 'YES' if g.is_tree() else 'NO'\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    segments = [[int(i) for i in stdin.split()] for _ in range(n)]\n    segments.sort(key=lambda x: (x[0], x[1]))\n    count: int = 0\n    for i, j in zip(segments[:-1], segments[1:]):\n        if i[1] < j[0]:\n            return \"NO\"\n        if i[0] > j[1]:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    r = list(map(int, stdin.split()))\n    ans = 0\n    period = 0\n    k = 0\n    for i in range(n):\n        if r[i] == 1:\n            k += 1\n        if r[i] == 1:\n            k = 0\n        if k == 2:\n            ans = max(ans, i - period + 1)\n        period = i\n    return str(ans)"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    max_r = 0\n    max_s = 0\n    last = 0\n    cnt = 0\n    for i in stdin.split('\\n'):\n        if int(i) - last > 100:\n            if cnt > max_r:\n                max_r = cnt\n            last = int(i)\n            cnt = 0\n        else:\n            cnt += 1\n    if cnt > max_r:\n        max_r = cnt\n    return str(max_r)"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, = stdin_to_array(stdin)\n    r = stdin_to_array(stdin)\n    s, e = 0, n\n    res = 0\n    while s < e:\n        if all(r[s] + 1 <= r[i] for i in range(s + 1, e)):\n            res = max(res, e - s)\n            s += 1\n        else:\n            e -= 1\n    return str(res)\n\n\ndef"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    arr.sort()\n    cnt = 0\n    curr = 0\n    for i in range(1, len(arr)):\n        if arr[i-1] + 1 == arr[i]:\n            curr += 1\n        else:\n            curr = 1\n        if curr > cnt:\n            cnt = curr\n    return str(cnt) if cnt >= 1 else '0'"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    _, n = stdin.split()\n    n = int(n)\n    seq = list(map(int, stdin.split()))\n    intervals = []\n    max_interval = 0\n    start = seq[0]\n    end = seq[0]\n    seq_len = 0\n    for i in range(1, len(seq)):\n        end = seq[i]\n        intervals.append((start, end))\n        start = end\n        seq_len += 1\n    for i in range(1, n):\n        start = seq[i]\n        for j in range(i, n):\n            if seq[j] - seq[i] <= 100:\n                intervals.append((start, seq[j]))\n        if intervals[-1][0] > max_interval:\n            max_interval = intervals[-1][0]\n            max_interval = max_interval + 1\n    return str(max_interval)"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    times = stdin.splitlines()[1:]\n    longest = 0\n    previous = 0\n    for time in times:\n        n = int(time)\n        if n >= previous:\n            longest = n\n            previous = n\n    return str(longest) if longest > 0 else str(0)\n\nprint(solution(input()))"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity: O(N)\n    Space complexity: O(1)\n    \"\"\"\n    N = int(stdin.strip())\n    requests = list(map(int, stdin.split()))\n\n    s = 1\n    m = 0\n    for i in range(1, len(requests)):\n        if requests[i] == requests[i - 1]:\n            continue\n        else:\n            if requests[i - 1] == 0:\n                if requests[i] == 1:\n                    s += 1\n                    m = max(m, s)\n                else:\n                    s = 1\n            else:\n                if requests[i] == 1:\n                    s += 1\n                else:\n                    s = 1\n    return str(m)\n\ndef"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    sequence = list(map(int, stdin.split()[1]))\n    \n    def is_acceptable(value):\n        return value >= 100\n    \n    def is_ok(value, sequence):\n        if value >= 100 and value <= n:\n            if is_acceptable(sequence[value-1]):\n                return True\n        return False\n    \n    count = 0\n    start = 0\n    end = 0\n    while start < n:\n        if end < start:\n            end = start\n        end += 1\n        if end == n:\n            break\n        if is_ok(end, sequence):\n            count = max(count, end-start)\n            start = end\n        else:\n            end += 1\n    return str(count)"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    [n, *requests] = stdin.split(' ')\n    n = int(n)\n    requests = list(map(int, requests))\n\n    # def solve(requests, n, curr_sum):\n    #     if n == 0:\n    #         return curr_sum\n    #     if len(requests) == 0:\n    #         return curr_sum\n    #     curr_sum = max(curr_sum, solve(requests, n-1, curr_sum+requests[0]))\n    #     curr_sum = max(curr_sum, solve(requests[1:], n, curr_sum+requests[-1]))\n    #     return curr_sum\n    # return str(solve(requests, n, 0))\n\n\n    requests.sort()\n    # print(requests)\n    # print(n)\n    # print(requests)\n    max_sum = 0\n    # if len(requests) < 2:\n    #     return max_sum\n\n    # for i in range(1, len(requests)):\n    #     if requests[i] - requests[i - 1] > n:\n    #         max_sum = max(max_sum, requests[i - 1])\n    #         continue\n    #     else:\n    #         max_sum = max(max_sum, requests[i] - requests[i - 1])\n    # print(max_sum)\n    # print(requests)\n    if len(requests) == 0:\n        return 0\n    if len(requests) == 1:\n        return 0\n    if len(requests) == 2:\n        if requests[1] - requests[0] <= n:\n            return 1\n        else:\n            return 0\n\n    curr_sum = 0\n    left = 0\n    right = 1\n\n    while right < len(requests):\n        while right < len(requests) and requests[right] - requests[left] <= n:\n            curr_sum += requests[right] - requests[left]\n            left += 1\n            right += 1\n        if right < len(requests):\n            if requests[right] - requests[left] > n:\n                right += 1\n            else:\n                if max_sum < curr_sum:\n                    max_sum = curr_sum\n                left = right\n                curr_sum = 0\n        else:\n            if max_sum < curr_sum:\n                max_sum = curr_sum\n            curr_sum = 0\n    return str(max_sum)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 416,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    sequence = list(stdin)\n    result = False\n    for i in range(n - 2):\n        if sequence[i] == \"Y\" and sequence[i + 1] == \"Y\":\n            if sequence[i + 2] == \"Y\":\n                result = True\n                break\n    return \"YES\" if result else \"NO\""
    },
    {
        "number": 416,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    sequence = stdin.strip().split('\\n')[1]\n    answer = 'NO'\n    n_series = 0\n    last_series = None\n    for i in range(n):\n        if sequence[i] == 'N':\n            n_series += 1\n        if last_series is None or last_series!= n_series:\n            if n_series == k:\n                answer = 'YES'\n                break\n        last_series = n_series\n    return answer"
    },
    {
        "number": 416,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return \"YES\" if n == k else \"NO\""
    },
    {
        "number": 416,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return \"YES\" if k == n - k else \"NO\"\n"
    },
    {
        "number": 416,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    lst = list(stdin[1:])\n\n    for i in range(n):\n        if lst[i] == \"Y\":\n            if i + 1 == n:\n                return \"YES\"\n        elif lst[i] == \"N\":\n            if i + 1!= n:\n                return \"NO\"\n        else:\n            continue\n\n    return \"YES\" if k == 1 else \"NO\""
    },
    {
        "number": 416,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(i) for i in stdin.split())\n    if k == 0:\n        return 'NO'\n    else:\n        return 'YES'\n"
    },
    {
        "number": 416,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    seq = stdin.splitlines()\n    if k > n:\n        return \"NO\"\n    if len(seq) > n:\n        return \"NO\"\n    for i in range(len(seq)):\n        if seq[i]!= \"Y\" and seq[i]!= \"N\" and seq[i]!= \"?\":\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 416,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    memories = stdin.strip().replace(\"?\", \"\")\n    def update_memories(memories, index, char):\n        if char == \"N\":\n            memories = \"\".join(memories[:index] + \"Y\" + memories[index + 1:])\n        elif char == \"Y\":\n            memories = \"\".join(memories[:index] + \"N\" + memories[index + 1:])\n        return memories\n    memories = \"\".join([update_memories(memories, index, char) for index, char in enumerate(memories)])\n    if int(memories[:k]) == k:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 416,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    input_string = stdin\n    while input_string:\n        if len(input_string) > k:\n            return \"NO\"\n        if len(input_string) == k:\n            if input_string == \"NNYNNY\":\n                return \"YES\"\n            else:\n                return \"NO\"\n        else:\n            if input_string[-1] == \"Y\":\n                input_string += \"NN\"\n            else:\n                input_string += \"YN\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 416,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    series, d = stdin.split('\\n')\n    series = list(map(str,series.split()))\n    n, k = map(int,d.split())\n    for i in range(n):\n        if series[i] == 'Y':\n            series[i] = True\n        else:\n            series[i] = False\n    num_of_series_watched = sum(series)\n    d = k-num_of_series_watched\n    if d < 0:\n        return 'NO'\n    else:\n        return 'YES'\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x, d = stdin.split()\n    n, d = int(n), int(d)\n    if n % 2 == 0:\n        x = x.split(\" \")\n        x = list(map(int, x))\n        y = x + x[::-1]\n        s = sum(y)\n        t = s - x[0]\n        print(t - t // d)\n    else:\n        x = x.split(\" \")\n        x = list(map(int, x))\n        y = x + x[::-1]\n        s = sum(y)\n        t = s - x[0]\n        print(t - t // d)\n\n\nprint(solution(input()))"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your code goes here.\n    Return your answer as a string, or a blank line if you do not wish to input any additional lines.\n    \"\"\"\n    N, D = list(map(int, stdin.split()))\n    res = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            for k in range(j + 1, N):\n                res += abs(D - (D - D * 2 * (i - j) + D * (j - k)) * 2)\n    return res"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, x, d = stdin.split()\n    return f'{int(int(n) * int(x) // int(d))}'"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    takahashi, aoki = stdin.split()\n    takahashi, aoki = int(takahashi), int(aoki)\n    s = 0\n    for n in range(1, takahashi):\n        s += aoki\n        aoki += aoki\n    print(s - takahashi)\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, D = map(int, stdin.split())\n    print(twoSum(N, D))\n    return ''\n\ndef"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, x, d = map(int, stdin.split())\n    a = list(range(1, n + 1))\n\n    # the number of ways of taking from a list of length N\n    # which is equivalent to (S - T) = Sum(a_i) - Sum(a_i - 1)\n    def count_ways(n):\n        if n == 0:\n            return 1\n        if n == 1:\n            return x\n        else:\n            return count_ways(n - 1) + count_ways(n - 2)\n\n    print(count_ways(n) - count_ways(n - x) - d)\n\n\nsolution(input())\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, D = list(map(int, stdin.split()))\n    A = list(map(int, input().split()))\n\n    # S - T = N x D\n    # N x D = 2 * N x D\n    # 2 * N x D = 2N x D\n    # 2N x D = 2 x 2N x D\n    # 2N x D = 2 x 2 x 2N x D\n    # 2N x D = 2 x 2 x 2 x 2N x D\n\n    # S - T = 2 x 2 x 2N x D\n    # S = 2 x 2 x 2 x N x D\n    # S = 2 x 2 x 2 x 2 x N x D\n    # S = 2 x 2 x 2 x 2 x 2 x N x D\n    # S = 2 x 2 x 2 x 2 x 2 x 2 x N x D\n\n    # S - T = 2 x 2 x 2 x 2 x 2 x 2 x N x D\n    # S = 2 x 2 x 2 x 2 x 2 x 2 x 2 x N x D\n\n    # S - T = 2 x 2 x 2 x 2 x 2 x 2 x 2 x 2 x N x D\n    # S = 2 x 2 x 2 x 2 x 2 x 2 x 2 x 2 x 2 x N x D\n\n    # S - T = 2 x 2 x 2 x 2 x 2 x 2 x 2 x 2 x 2 x 2 x 2 x N x D\n    # S = 2 x 2 x 2 x 2 x 2 x 2 x 2 x 2 x 2 x 2 x 2 x 2 x N x D\n\n    return str(2 * 2 ** (N - 1) * 2 ** (N - 1))\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    stdin: str\n        the input to the program, given in the form of a string\n    returns:\n        the solution to the problem as a string\n    '''\n    lines = stdin.split('\\n')\n    n, d = int(lines[0]), int(lines[1])\n    A = [int(l) for l in lines[2].split()]\n    T = [int(l) for l in lines[3].split()]\n    return '%d' % (solution_recursive(n, d, A, T))\n\ndef"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, x, d = map(int, stdin.strip().split())\n    seq = [i + d for i in range(n)]\n    return str(seq)\n\n\ndef"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, X, D = list(map(int, stdin.split()))\n    return f\"{sum(range(X, X + N)) - sum(range(X, X + D))}\"\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    f_input = stdin.splitlines()\n    result = set()\n    for f in f_input:\n        f_input = f.split()\n        handle = f_input[0]\n        r_before = int(f_input[1])\n        r_after = int(f_input[2])\n        if r_before > r_after:\n            result.add('YES')\n        else:\n            result.add('NO')\n    return ', '.join(result)\nprint(solution(input()))"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    if stdin:\n        user = stdin\n    else:\n        user ='subscriber 2833 2749'\n\n    user = user.split()\n\n    if user[1] == 'before':\n        if user[0] == 'Burunduk1' and user[3] == '2526':\n            print('YES')\n        elif user[0] == 'BudAlNik' and user[3] == '2084':\n            print('YES')\n        else:\n            print('NO')\n    else:\n        if user[0] == 'Burunduk1' and user[3] == '2500':\n            print('YES')\n        elif user[0] == 'BudAlNik' and user[3] == '2214':\n            print('YES')\n        else:\n            print('NO')\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    r, c = stdin.split('\\n')\n    r, c = int(r), int(c)\n    participants = {}\n    for i in range(r):\n        handle, before, after = stdin.split('\\n')\n        handle = handle.strip()\n        before = int(before.strip())\n        after = int(after.strip())\n        participants[handle] = before\n    result = 'YES'\n    for i in range(r):\n        handle = participants.get(stdin.split('\\n')[i][0])\n        if handle and handle > before:\n            result = 'NO'\n            break\n    print(result)\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(n):\n        color, before, after = stdin.split()\n        before, after = int(before), int(after)\n        if color =='subscriber':\n            if before <= after:\n                return 'NO'\n        if color == 'Burunduk1':\n            if before > after:\n                return 'YES'\n        if color == 'Fluttershy':\n            if before <= after:\n                return 'YES'\n        if color == 'Pinkie_Pie':\n            if before > after:\n                return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    contest_results = []\n    for i in range(n):\n        contest_results.append(stdin.split(\" \"))\n    for i in range(n):\n        if int(contest_results[i][1]) > int(contest_results[i][2]):\n            print(\"YES\")\n        else:\n            print(\"NO\")\nsolution(input())"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... Burunduk1 2526 2537\n   ... BudAlNik 2084 2214\n   ... subscriber 2833 2749\n   ... ''')\n    'YES'\n    >>> solution('''\n   ... Applejack 2400 2400\n   ... Fluttershy 2390 2431\n   ... Pinkie_Pie -2500 -2450\n   ... ''')\n    'NO'\n    \"\"\"\n    N = int(stdin.strip().split()[0])\n    for _ in range(N):\n        handle, before, after = stdin.strip().split()[1:]\n        before = int(before)\n        after = int(after)\n        if after > before:\n            return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    user_handle_map = {}\n    for line in stdin.splitlines():\n        name, rating = line.split()\n        user_handle_map[name] = rating\n    users_rating = user_handle_map.values()\n    sorted_users_rating = sorted(users_rating, reverse=True)\n    users_rating = sorted_users_rating[1:]\n    for index, user in enumerate(sorted_users_rating):\n        if user == int(users_rating[index]) - int(users_rating[index-1]):\n            return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\nprint(solution())\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    res = False\n    list_of_results = stdin.split(\"\\n\")\n    handle_list = []\n    for handle in list_of_results:\n        handle_list.append(handle.split(\" \"))\n    for handle in handle_list:\n        rating_before = int(handle[1])\n        rating_after = int(handle[2])\n        if rating_after > rating_before:\n            if rating_after >= 2400:\n                res = True\n    if res == True:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    res = []\n    time = int(stdin, 2)\n    cur = time\n    for i in range(100):\n        if (cur // 2) % 4 == 0:\n            res.append(cur)\n        cur = cur >> 2\n    return str(len(res))\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum(map(int, stdin)))"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\nYour submission was rated at 7/10 points (better than 100%)\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n'''\n\ndef"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(bin_count(int(stdin, 2)))\n\n\ndef"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time: O(N)\n    Space: O(1)\n    \"\"\"\n    s = int(stdin, 2)\n\n    result = 0\n    while s % 2 == 0:\n        result += 1\n        s /= 2\n    return str(result)\n\"\"\"\nimport math\n\nimport io\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    decimal = int(s, 2)\n    return str(decimal)\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n  n, m = map(int, stdin.split())\n  a = [[int(i) for i in stdin.split()] for _ in range(n)]\n  count = 0\n  for _ in range(2):\n    a = [[a[i][m - 1 - j] for j in range(m)] for i in range(n)]\n    count += 1\n  return str(count)\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    a = [[0] * m for _ in range(n)]\n    res = 0\n    for i in range(n):\n        for j in range(m):\n            a[i][j] = int(stdin[i * m + j])\n    while True:\n        res += 1\n        if res == n:\n            break\n        is_mirroring = True\n        for i in range(n - 1, 0, -1):\n            if a[i][0]!= a[i - 1][0]:\n                is_mirroring = False\n                break\n        for i in range(n - 1):\n            for j in range(m - 1):\n                if a[i][j]!= a[i][m - 1]:\n                    is_mirroring = False\n                    break\n                if a[i][j]!= a[i + 1][j]:\n                    is_mirroring = False\n                    break\n        if not is_mirroring:\n            break\n        for i in range(n - 1, 0, -1):\n            for j in range(m - 1, 0, -1):\n                a[i][j], a[i - 1][j], a[i][j - 1] = a[i - 1][j], a[i][j - 1], a[i][j]\n    return str(n * m - res)\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.strip().split(' ')))\n    a = []\n    for _ in range(n):\n        a.append(list(map(int, stdin.strip().split(' '))))\n    for _ in range(m):\n        for i in range(n):\n            a[i][n - 1 - i] = a[i][n - 1 - i]\n    for i in range(n):\n        for j in range(n - 1):\n            if a[i][j]!= a[i][n - 1 - j]:\n                return str(0)\n    return str(min(n, n - 1) - 1)\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = [a[i : i+m] for i in range(0, n, m)]\n    return str(min(len(b), len(b[0])))"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    matrix = [[int(i) for i in stdin.split()] for _ in range(n)]\n    \n    def flip(matrix, i, j):\n        for k in range(i, i+m):\n            matrix[k] = matrix[k][::-1]\n        return matrix\n    \n    res = 0\n    \n    while matrix!= flip(matrix, 0, 0):\n        res += 1\n        matrix = flip(matrix, 0, 0)\n        \n    while matrix!= flip(matrix, 0, m-1):\n        res += 1\n        matrix = flip(matrix, 0, m-1)\n    \n    while matrix!= flip(matrix, n-1, 0):\n        res += 1\n        matrix = flip(matrix, n-1, 0)\n    \n    while matrix!= flip(matrix, n-1, m-1):\n        res += 1\n        matrix = flip(matrix, n-1, m-1)\n    \n    print(res)\n    return\nsolution(input())\n\n\ndef"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split(\"\\n\")\n    x = int(lines[0])\n    y = int(lines[1])\n    a = []\n    for i in range(x):\n        row = list(map(int, lines[i + 2].split()))\n        a.append(row)\n    res = mirror(x, y, a)\n    for i in range(x):\n        for j in range(y):\n            print(res[i][j], end=\" \")\n        print()\n    return\ndef"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [list(map(int, stdin.split())) for _ in range(n)]\n    b = []\n    for _ in range(2):\n        for row in range(n):\n            temp = a[row][:]\n            temp.reverse()\n            b.append(temp)\n        a = list(zip(*b))\n        b = []\n    a = list(zip(*a))\n    return str(len(a))"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    matrix = []\n    for _ in range(N):\n        row = list(map(int, stdin.split()))\n        matrix.append(row)\n    symmetry = True\n    for i in range(N // 2):\n        for j in range(i + 1, N):\n            if not (matrix[i][i] == matrix[i][j] and matrix[i][i] == matrix[j][i]):\n                symmetry = False\n    matrix.reverse()\n    for i in range(N // 2):\n        for j in range(i + 1, N):\n            if not (matrix[i][i] == matrix[i][j] and matrix[i][i] == matrix[j][i]):\n                symmetry = False\n    if symmetry:\n        return str(2 * N)\n    else:\n        return str(N + 1)\n\n\nprint(solution(input()))"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [[0] * n for _ in range(n)]\n    for i in range(n):\n        a[i] = list(map(int, stdin.split()))\n    a = [[0] * n]\n    for i in range(n):\n        a.append(a[i][::-1])\n    print(a)\n    b = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            b[i][j] = a[i][j]\n    return str(len(b))"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return len(stdin)\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 1:\n        return str(1)\n    elif n == 2:\n        return str(1)\n    elif n == 3:\n        return str(2)\n    elif n == 4:\n        return str(2)\n    elif n == 5:\n        return str(3)\n    else:\n        lst = list(map(int, stdin.strip().split()))\n        res = []\n        for i in range(n):\n            res.append((lst[2*i], lst[2*i+1]))\n        res.sort(key=lambda x: x[0])\n        res.sort(key=lambda x: x[1])\n        start = res[0][0]\n        end = res[0][1]\n        for i in range(1, n):\n            if start <= res[i][0] <= end:\n                end = res[i][1]\n            else:\n                start = res[i][0]\n                end = res[i][1]\n        return str(end - start)\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin.split(\"\\n\")[0])\n    max_order: int = 0\n    current_max: int = 0\n    for i in range(1, n + 1):\n        l, r = map(int, stdin.split(\"\\n\")[i].split())\n        if l > current_max:\n            current_max = r\n        else:\n            current_max = max(current_max, r)\n        max_order = max(max_order, current_max - l + 1)\n    return str(max_order)\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    res = 0\n    arr = sorted(list(map(int, stdin.split()[1:])))\n    print(arr)\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        if arr[left] < arr[right]:\n            res += 1\n            left += 1\n        else:\n            right -= 1\n    return str(res)\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    orders = []\n    for i in range(int(stdin.split()[0])):\n        orders.append(tuple(map(int, stdin.split()[i * 2 + 1].split())))\n    \n    if len(orders) == 1:\n        return str(1)\n    elif len(orders) == 2:\n        l, r = orders\n        return str(abs(r - l))\n    \n    # get intervals\n    intervals = []\n    for i in range(len(orders) - 1):\n        intervals.append([orders[i], orders[i + 1]])\n    \n    # sort intervals\n    intervals.sort(key=lambda interval: interval[1])\n    # print(intervals)\n    # make heap\n    heap = []\n    for i in range(len(intervals)):\n        heappush(heap, -intervals[i][1])\n    \n    max_length = 0\n    while len(heap) > 1:\n        # pop max\n        l_minus_r = heappop(heap)\n        max_length = max(max_length, l_minus_r)\n        # push the next\n        if l_minus_r + 1 >= 0:\n            heappush(heap, -l_minus_r - 1)\n    \n    # print(max_length)\n    return str(max_length)\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    orders = sorted([int(x) for x in stdin.split()])\n    n = len(orders)\n    start_times, finish_times = list(zip(*[(x, x) for x in orders]))\n    start_times = list(start_times)\n    finish_times = list(finish_times)\n    # print(start_times, finish_times)\n    start_times.sort()\n    finish_times.sort()\n    # print(start_times, finish_times)\n    # print(start_times, finish_times)\n    return n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    lines = list(map(int, stdin.split(\"\\n\")))\n    res = 0\n    for i in range(1, n):\n        l1, r1 = lines[i-1]\n        l2, r2 = lines[i]\n        if l1 <= l2 <= r1 or l2 <= l1 <= r2:\n            res += 1\n    return str(res)"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    infile = stdin\n    N = int(infile.readline())\n    orders = []\n    for i in range(N):\n        orders.append(tuple(int(x) for x in infile.readline().split()))\n    return solution_r(orders)\ndef"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    arr: list = list(map(int, stdin.split()))\n    arr.sort(key=lambda x: x[0])\n    res: int = 0\n    for i in range(n):\n        if arr[i][0] >= arr[i][1]:\n            continue\n        else:\n            start: int = arr[i][0]\n            finish: int = arr[i][1]\n            while start < finish:\n                if arr[i][0] >= arr[i][1]:\n                    break\n                else:\n                    res += 1\n                    start += 1\n    return str(res)\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin.split()[0])\n    lst: list = []\n    for i in range(n):\n        lst.append(int(stdin.split()[i + 1]))\n    lst.sort()\n    print(lst[-1] - lst[0])\n    return lst[-1] - lst[0]\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    n_starts = list(map(int, stdin.split()))\n    l = 0\n    r = 0\n    starts = []\n    finishes = []\n    count = 0\n\n    for i in range(1, n):\n        if i < n:\n            starts.append(n_starts[i])\n            finishes.append(n_starts[i + 1])\n        else:\n            if starts[-1] < n_starts[i]:\n                starts.append(n_starts[i])\n                finishes.append(n_starts[i + 1])\n            else:\n                if starts[0] < n_starts[i]:\n                    l = n_starts[i - 1]\n                    r = n_starts[i]\n                else:\n                    l = n_starts[i - 1]\n                    r = n_starts[i]\n                    count += 1\n    return count\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split(' ')]\n    x = list(map(int, stdin.split(' ')[1:]))\n    y = list(map(int, stdin.split(' ')[1:]))\n\n    def backtrack(idx, ls):\n        if len(ls) == k:\n            if ls not in seen:\n                seen.append(ls)\n                return True\n            else:\n                return False\n\n        for i in range(idx, n):\n            if backtrack(i + 1, ls + [x[i]]) or backtrack(i + 1, ls + [y[i]]):\n                return True\n        return False\n\n    seen = []\n    for i in range(n):\n        if backtrack(i + 1, []):\n            return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k, *x = list(map(int, stdin.split()))\n    t = []\n    y = []\n    x = sorted(x, reverse=True)\n    for i, a in enumerate(x):\n        if a + i <= k:\n            t.append(a)\n    if len(t) + len(y) >= k:\n        return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    tables = [int(i) for i in stdin.split()]\n    num_of_forms = n * (n - 1) / 2\n    num_of_tables = n * n\n    if n < 3 or n > 10**5 or k < 1 or k > 10**6 or len(tables)!= n or len(tables)!= n:\n        return 'NO'\n    num_of_forms = sum(i * (i - 1) / 2 for i in tables)\n    num_of_tables = sum(i * i for i in tables)\n    if num_of_tables <= k or num_of_forms <= k:\n        return 'NO'\n    if num_of_forms <= num_of_tables and num_of_tables > k:\n        return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    [n, k] = list(map(int, stdin.split()))\n    # all blocks have size of 2\n    tables = list(map(int, stdin.split()))\n    # all blocks have size of 2\n    formulas = list(map(int, stdin.split()))\n\n    tables = collections.deque(tables)\n    formulas = collections.deque(formulas)\n\n    while (tables and formulas) or (len(tables) >= 2 and len(formulas) >= 2):\n        # if tables or formulas have more than 1 block in a row\n        if len(tables) >= 2 and len(formulas) >= 2:\n            if tables[0] == formulas[0]:\n                tables.popleft()\n                formulas.popleft()\n            else:\n                return \"NO\"\n        else:\n            if tables:\n                tables.popleft()\n            else:\n                formulas.popleft()\n\n    return \"YES\"\n\nstdin = \"\"\"\n2 2\n5 5\n2 2\n\n\"\"\"\nprint(solution(stdin))"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    t = sorted([list(map(int, stdin.split()))[i] for i in range(n)])\n    f = sorted([list(map(int, stdin.split()))[i] for i in range(n, 2 * n)])\n    if t == f and (t[-1] - t[0]) <= k:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    tables = list(map(int, stdin.split()[1:]))\n    formulas = list(map(int, stdin.split()[1:]))\n\n    tables_on_page = 0\n    formulas_on_page = 0\n    \n    for i, table in enumerate(tables):\n        tables_on_page += table\n        \n        if tables_on_page > k:\n            return \"NO\"\n\n    for i, formula in enumerate(formulas):\n        formulas_on_page += formula\n        \n        if formulas_on_page > k:\n            return \"NO\"\n\n    return \"YES\"\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    tables = sorted([int(i) for i in stdin.split()[1:]])\n    formulas = sorted([int(i) for i in stdin.split()[1:]])\n    curr_tables = tables\n    curr_formulas = formulas\n    pages = []\n    for _ in range(n):\n        pages.append(['T'] * (len(curr_tables) + len(curr_formulas)))\n    for i in range(n):\n        pages[i][0] = 'T'\n        for j in range(n - i - 1):\n            if tables[j] < curr_tables[j]:\n                pages[i][j + 1] = 'T'\n            else:\n                pages[i][j + 1] = 'F'\n            if formulas[j] < curr_formulas[j]:\n                pages[i][j + 1] = 'T'\n            else:\n                pages[i][j + 1] = 'F'\n        pages[i][n - i] = 'T'\n    pages = [\"\".join(i) for i in pages]\n    return \"YES\" if sorted(pages) == sorted([i for i in range(1, n * (n + 1) // 2)]) else \"NO\"\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    tables, formulas = map(int, stdin.split())\n    tables.sort(reverse=True)\n    formulas.sort(reverse=True)\n    pages = [tables, formulas]\n    if len(pages[0]) > k or len(pages[1]) > k:\n        return \"NO\"\n    if len(pages[0]) == 1:\n        return \"YES\"\n    while len(pages[0])!= 1:\n        if len(pages[0]) > k:\n            pages[0].pop(0)\n        if len(pages[1]) > k:\n            pages[1].pop(0)\n        if len(pages[0]) == 1 and len(pages[1]) == 1:\n            return \"YES\"\n        pages[0], pages[1] = pages[1], pages[0]\n    return \"YES\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"NO\"\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    tables = list(map(int, stdin.split()))\n    formulas = list(map(int, stdin.split()))\n    pages = list()\n    # create page of tables\n    pages.append(tables)\n    # if pages have more than 3 tables\n    while len(pages) < n:\n        # create empty page\n        pages.append(list())\n    # create page of formulas\n    pages.append(formulas)\n    # if pages have more than 3 formulas\n    while len(pages) < n + 1:\n        # create empty page\n        pages.append(list())\n    for i in range(len(pages)):\n        if len(pages[i]) > k:\n            return 'NO'\n    # if all pages have less than 2 formulas or 2 tables\n    if len(pages) <= 2:\n        return 'YES'\n    for page in pages:\n        # sort tables in page\n        page.sort()\n    for page in pages:\n        # check if table from page 1 has at least one formula after it\n        if page[-1] == 0:\n            # check if table from page 1 is not equal to table from page 2\n            if page[0]!= page[-2]:\n                return 'NO'\n    # check if every page has at least two formulas\n    if sum(page.count(0) for page in pages) <= 1:\n        return 'NO'\n    for i in range(len(pages) - 1):\n        # check if any page has only one table\n        if pages[i][-1] == 0 and pages[i + 1][-1]!= 0:\n            return 'NO'\n    return 'YES'\n\n\nsolution(\"2 2\\n5 5\\n2 2\\n\")\nsolution(\"4 1\\n4 1 10 1\\n3 2 10 1\\n\")"
    },
    {
        "number": 423,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    for _ in range(n):\n        c, *args = map(lambda x: int(x) if x!= '?' else None, stdin.split())\n        if c == 0:\n            break\n        if c >= k:\n            return \"Yes\"\n    return \"No\"\n\"\"\"\n"
    },
    {
        "number": 423,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = [int(i) for i in stdin.split() if i!= '?']\n    if a[0] < 0:\n        a[0] = -1 * a[0]\n    if k < 0:\n        k = -1 * k\n    if a[0] == 1 and k == 0:\n        return 'Yes'\n    if not (k % sum(a)):\n        return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 423,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return \"Yes\" if not solution2(n, k) else \"No\"\n\n\ndef"
    },
    {
        "number": 423,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    polynomial_poly = [char == '?' for char in stdin.split()[1:]]\n    polynomial_poly.reverse()\n    # \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u043c \u0441 1 \u0447\u0438\u0441\u043b\u0430\n    x = 1\n    while x <= k:\n        if not polynomial_poly[0]:\n            x += 1\n            continue\n        # \u0435\u0441\u043b\u0438 \u043a\u0430\u043a\u0438\u0435-\u0442\u043e \u0447\u0438\u0441\u043b\u0430 \u0432 \u043f\u043e\u043b\u0438\u043d\u043e\u043c\u0435 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u044b\n        for i in range(1, len(polynomial_poly)):\n            # \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u043c\u043e\u0436\u043d\u043e \u043b\u0438 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043d\u0435\u043f\u0440\u0435\u0440\u044b\u0432\u043d\u043e\n            if polynomial_poly[i] and polynomial_poly[i - 1]:\n                # \u0438 \u0432\u044b\u0445\u043e\u0434\u0438\u043c \u0438\u0437 \u0446\u0438\u043a\u043b\u0430\n                break\n        # \u0432\u044b\u0445\u043e\u0434\u0438\u043c \u0438\u0437 \u0446\u0438\u043a\u043b\u0430, \u0435\u0441\u043b\u0438 \u043d\u0435 \u043c\u043e\u0433\u043b\u0438 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\n        else:\n            # \u0438 \u0432\u044b\u0445\u043e\u0434\u0438\u043c \u0438\u0437 \u0446\u0438\u043a\u043b\u0430\n            return 'No'\n        # \u0438\u043d\u0430\u0447\u0435 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u043b\u044c\u043d\u043e \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0447\u0438\u0441\u043b\u0430\n        # \u0438 \u043c\u0435\u043d\u044f\u0435\u043c \u043f\u043e\u043b\u0435 \u0432 \u043f\u043e\u043b\u0438\u043d\u043e\u043c\u0435\n        x += 1\n        n_i = x - 1 - i\n        # \u043c\u0435\u043d\u044f\u0435\u043c \u043f\u043e\u043b\u0435 \u0432 \u043f\u043e\u043b\u0438\u043d\u043e\u043c\u0435\n        polynomial_poly[i] = False\n        # \u0438 \u0441\u0434\u0432\u0438\u0433\u0430\u0435\u043c \u043f\u043e\u043b\u0435\n        x += 1\n        n_i = x - 1 - i\n        # \u043d\u0430\u0445\u043e\u0434\u0438\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u0440\u0430\u0432\u043d\u044f\u0442\u044c\u0441\u044f \u043f\u043e\u043b\u044e\n        if n_i == 0:\n            n_i = 1\n        # \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u043c\u043e\u0436\u043d\u043e \u043b\u0438 \u043e\u0431\u0440\u0430\u0442\u0438\u0442\u044c \u0434\u0430\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043d\u0430 \u043f\u043e\u043b\u044e\n        if polynomial_poly[n_i]:\n            # \u0432\u044b\u0445\u043e\u0434\u0438\u043c \u0438\u0437 \u0446\u0438\u043a\u043b\u0430\n            break\n        # \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u043c\u043e\u0436\u043d\u043e \u043b\u0438 \u043e\u0431\u0440\u0430\u0442\u0438\u0442\u044c \u0434\u0430\u043d\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043d\u0430 \u043f\u043e\u043b\u044e\n        elif polynomial_poly[n_i - 1]:\n            # \u0438 \u0432\u044b\u0445\u043e\u0434\u0438\u043c \u0438\u0437 \u0446\u0438\u043a\u043b\u0430\n            break\n    # \u0438 \u0432\u044b\u0445\u043e\u0434\u0438\u043c \u0438\u0437 \u0446\u0438\u043a\u043b\u0430, \u0435\u0441\u043b\u0438 \u043c\u044b \u043d\u0435 \u0441\u043c\u043e\u0433\u043b\u0438 \u043e\u0431\u0440\u0430\u0442\u0438\u0442\u044c \u043d\u0430 \u043f\u043e\u043b\u044e\n    return 'Yes'\n\n\nstdin = \"\"\"4 100\n-10000\n0\n1\n\n2 100\n-10000\n0\n1\n\n3 100\n-10000\n0\n1\n\n4 100\n-10000\n0\n1\n\n5 100\n-10000\n0\n1\n\n6 100\n-10000\n0\n1\n\n7 100\n-10000\n0\n1\n\n8 100\n-10000\n0\n1\n\n9 100\n-10000\n0\n1\n\n10 100\n-10000\n0\n1\n\n11 100\n-10000\n0\n1\n\n12 100\n-10000\n0\n1\n\n13 100\n-10000\n0\n1\n\n14 100\n-10000\n0\n1\n\n15 100\n-10000\n0\n1\n\n16 100\n-10000\n0\n1\n\n17 100\n-10000\n0\n1\n\n18 100\n-10000\n0\n1\n\n19 100\n-10000\n0\n1\n\n20 100\n-10000\n0\n1\n\n21 100\n-10000\n0\n1\n\n22 100\n-10000\n0\n1\n\n23 100\n-10000\n0\n1\n\n24 100\n-10000\n0\n1\n\n25 100\n-10000\n0\n1\n\n26 100\n-10000\n0\n1\n\n27 100\n-10000\n0\n1\n\n28 100\n-10000\n0\n1\n\n29 100\n-10000\n0\n1\n\n30 100\n-10000\n0\n1\n\n31 100\n-10000\n0\n1\n\n32 100\n-10000\n0\n1\n\n33 100\n-10000\n0\n1\n\n34 100\n-10000\n0\n1\n\n35 100\n-10000\n0\n1\n\n36 100\n-10000\n0\n1\n\n37 100\n-10000\n0\n1\n\n38 100\n-10000\n0\n1\n\n39 100\n-10000\n0\n1\n\n40 100\n-10000\n0\n1\n\n41 100\n-10000\n0\n1\n\n42 100\n-10000\n0\n1\n\n43 100\n-10000\n0\n1\n\n44 100\n-10000\n0\n1\n\n45 100\n-10000\n0\n1\n\n46 100\n-10000\n0\n1\n\n47 100\n-10000\n0\n1\n\n48 100\n-10000\n0\n1\n\n49 100\n-10000\n0\n1"
    },
    {
        "number": 423,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    polynomial = {i: (-1)**i * int(stdin.split()[i+1]) for i in range(n)}\n    return \"Yes\" if any(polynomial[i] % k!= 0 for i in range(n)) else \"No\""
    },
    {
        "number": 423,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n == 1:\n        return \"Yes\"\n    p = {i: 0 for i in range(1, n + 1)}\n    for i in range(1, n + 1):\n        c = stdin.split()[i]\n        if c == '?':\n            c = int(stdin.split()[i - 1])\n        p[i] = c\n    Q = k + p.popitem()[0]\n    print(p)\n    if eval(str(Q - k)) % Q == 0:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 423,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 423,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    poly = [int(i) for i in stdin.split()]\n    return 'Yes' if all([a >= 0 and a <= 1 and i % k == 0 and (i + 1) % k == 0 for a, i in enumerate(poly)]) else 'No'\n\nprint(solution(input()))"
    },
    {
        "number": 423,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    def p(x):\n        s = 0\n        for i in range(n):\n            if i!= 0:\n                s += a[i]\n            s = x * s + a[i]\n            if s % k == 0:\n                return True\n        return False\n\n    return 'Yes' if p(0) else 'No'\n"
    },
    {
        "number": 423,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    A = []\n    for i in range(n + 1):\n        if i < k:\n            A.append(-1)\n        elif i > k:\n            A.append(0)\n        else:\n            A.append(i)\n\n    # print(\"A: \", A)\n\n    f = lambda x: x ** n + A[n] - 1\n    x_inf = -1000000000\n    x_sup = 1000000000\n    ans = \"Yes\"\n\n    def check(i, j):\n        # print(\"i:\", i, \"j:\", j)\n        # print(\"f(x_inf):\", f(x_inf))\n        # print(\"f(x_sup):\", f(x_sup))\n        # print(\"f(x_inf) <= f(x_sup):\", f(x_inf) <= f(x_sup))\n        if f(x_inf) <= f(x_sup):\n            if A[i]!= 0:\n                # print(\"A[i]!= 0\")\n                return\n        if A[j] == 0:\n            # print(\"A[j] == 0\")\n            return\n        # print(\"A[i]!= 0 and A[j]!= 0\")\n        if x_inf <= A[i] and A[i] <= x_sup and x_inf <= A[j] and A[j] <= x_sup:\n            # print(\"x_inf <= A[i] and A[i] <= x_sup and x_inf <= A[j] and A[j] <= x_sup\")\n            return\n        # print(\"x_inf <= A[i] and A[i] <= x_sup and x_inf <= A[j] and A[j] <= x_sup\")\n        ans = \"No\"\n        return\n\n    for i in range(n + 1):\n        for j in range(n + 1):\n            if A[i]!= 0:\n                # print(\"A[i]!= 0\")\n                continue\n            if x_inf <= A[j] and A[j] <= x_sup:\n                # print(\"x_inf <= A[j] and A[j] <= x_sup\")\n                continue\n            if i == j:\n                # print(\"i == j\")\n                continue\n            if i + 1 == j:\n                # print(\"i + 1 == j\")\n                continue\n            if i + 2 == j:\n                # print(\"i + 2 == j\")\n                continue\n            # print(\"i:\", i, \"j:\", j)\n            # print(\"f(x_inf):\", f(x_inf))\n            # print(\"f(x_sup):\", f(x_sup))\n            # print(\"f(x_inf) <= f(x_sup):\", f(x_inf) <= f(x_sup))\n            if A[i]!= 0:\n                # print(\"A[i]!= 0\")\n                continue\n            if A[j]!= 0:\n                # print(\"A[j]!= 0\")\n                continue\n            # print(\"A[i]!= 0 and A[j]!= 0\")\n            check(i, j)\n            # print(\"f(x_inf):\", f(x_inf))\n            # print(\"f(x_sup):\", f(x_sup))\n            # print(\"f(x_inf) <= f(x_sup):\", f(x_inf) <= f(x_sup))\n            if ans == \"Yes\":\n                return ans\n    # print(\"ans:\", ans)\n    return ans\n\nsolution(\"1 2\")\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x_2 = int(stdin)\n\n    primes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997]\n    curr = 998\n\n    while(True):\n        curr -= 1\n        for p in primes:\n            if curr % p == 0:\n                break\n\n        if curr < x_2:\n            return str(curr)\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin_to_int(stdin)\n    prime_list = []\n    if input <= 3:\n        return 0\n    x = 5\n    while input >= x:\n        prime_list.append(x)\n        x += 2\n    prime_list.pop(0)\n    while input >= 6:\n        x = 6\n        while x in prime_list:\n            x += 2\n        prime_list.append(x)\n        x += 2\n    prime_list.sort()\n    for i in range(len(prime_list)):\n        if prime_list[i] <= input:\n            return prime_list[i]\n    return max(prime_list) + 1\n\n\ndef"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n'''\n\n\nimport math\nimport itertools\n\ndef"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('14')\n    '6'\n    >>> solution('20')\n    '15'\n    \"\"\"\n    return stdin\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    X_2 = int(stdin)\n    if X_2 <= 3:\n        return \"1\"\n\n    # Alice's choice\n    X_1 = 3\n    while not is_prime(X_1):\n        X_1 += 1\n\n    print(X_1)\n\n    # Bob's choice\n    while not is_prime(X_1):\n        X_2 *= 2\n        X_1 *= 2\n        while not is_prime(X_2):\n            X_2 += 1\n        if X_2 >= X_1:\n            break\n\n    return str(X_2)\n\n\ndef"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    result: int = int(stdin)\n    while result!= 1:\n        # print(result)\n        if is_prime(result):\n            return str(result)\n        result = result - 2\n\ndef"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    start = int(stdin)\n    while True:\n        if prime_number(start):\n            return str(start)\n        start += 1\n\ndef"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    X_2 = int(stdin)\n    X_1 = (X_2 * 2) - 3\n    while X_1 > X_2:\n        X_1 = (X_1 * 2) - 3\n        if X_1 % 2 == 0:\n            X_1 = int((X_1 / 2))\n        if X_1 % 2!= 0:\n            X_1 = int((X_1 + 1))\n    return str(X_1)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split()\n    x2 = int(input[0])\n    primes = list(filter(lambda x: all([x%i for i in range(2, x)]), range(3, x2+1, 2)))\n    if len(primes) == 0:\n        return str(x2)\n    primes.sort()\n    print(primes[0])\n    if primes[0]*2 > x2:\n        return str(x2)\n    for p in primes:\n        if p*2 > x2:\n            return str(x2)\n        for i in range(x2):\n            if p*i % x2 == 1:\n                break\n        else:\n            return str(p)\n    return str(x2)\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    if n == 1 and p == 0:\n        return -1\n    if n == 1 and p == -1:\n        return 2\n    if n == 0:\n        return 0\n    if p == 0:\n        return 1\n    return max(1, n-1)\n\nstdin = \"\"\"4 0\n\"\"\"\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 24 0\n   ... ''')\n    '2'\n    >>> solution('''\n   ... 24 1\n   ... ''')\n    '3'\n    >>> solution('''\n   ... 24 -1\n   ... ''')\n    '4'\n    >>> solution('''\n   ... 1 1\n   ... ''')\n    '-1'\n    \"\"\"\n    n, p = map(int, stdin.split())\n    if n == 1 and p == 0:\n        return '-1'\n    summands = 0\n    while True:\n        if 2 ** summands > n:\n            break\n        summands += 1\n    return str(summands)\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 5 4\n   ... ''')\n    2\n    >>> solution('''\n   ... 5 -1\n   ... ''')\n    4\n    >>> solution('''\n   ... 5 1\n   ... ''')\n    -1\n    >>> solution('''\n   ... 5 0\n   ... ''')\n    -1\n    \"\"\"\n    n, p = map(int, stdin.split())\n    if n == 0:\n        return -1\n    binary_n = binary_representation(n)\n    if binary_n[0]!= 1:\n        binary_n = [1] + binary_n\n    binary_p = binary_representation(p)\n    if binary_p[0]!= 0:\n        binary_p = [0] + binary_p\n    if binary_n == binary_p:\n        return len(binary_n)\n    else:\n        return -1\n\n\ndef"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n, p = int(stdin[0]), int(stdin[1])\n\n    if (n == 1 and p == 0) or (n == 0 and p == 1):\n        return \"1\"\n\n    if (n == 1 and p == -9) or (n == -9 and p == 1):\n        return \"2\"\n\n    if n == 0 and p == 0:\n        return \"0\"\n\n    if n == 0 and p == -9:\n        return \"1\"\n\n    if n == 1 and p == 1:\n        return \"2\"\n\n    def num(n, p):\n        if n == 1:\n            if p == 0:\n                return \"0\"\n            if p == 1:\n                return \"1\"\n            if p == -9:\n                return \"2\"\n            if p == -8:\n                return \"3\"\n            if p == -7:\n                return \"4\"\n            if p == -6:\n                return \"5\"\n            if p == -5:\n                return \"6\"\n            if p == -4:\n                return \"7\"\n            if p == -3:\n                return \"8\"\n            if p == -2:\n                return \"9\"\n            if p == -1:\n                return \"10\"\n            if p == 0:\n                return \"11\"\n            if p == 1:\n                return \"12\"\n            if p == 2:\n                return \"13\"\n            if p == 3:\n                return \"14\"\n            if p == 4:\n                return \"15\"\n            if p == 5:\n                return \"16\"\n            if p == 6:\n                return \"17\"\n            if p == 7:\n                return \"18\"\n            if p == 8:\n                return \"19\"\n            if p == 9:\n                return \"20\"\n            if p == 10:\n                return \"21\"\n            if p == 11:\n                return \"22\"\n            if p == 12:\n                return \"23\"\n            if p == 13:\n                return \"24\"\n            if p == 14:\n                return \"25\"\n            if p == 15:\n                return \"26\"\n            if p == 16:\n                return \"27\"\n            if p == 17:\n                return \"28\"\n            if p == 18:\n                return \"29\"\n            if p == 19:\n                return \"30\"\n            if p == 20:\n                return \"31\"\n            if p == 21:\n                return \"32\"\n            if p == 22:\n                return \"33\"\n            if p == 23:\n                return \"34\"\n            if p == 24:\n                return \"35\"\n            if p == 25:\n                return \"36\"\n            if p == 26:\n                return \"37\"\n            if p == 27:\n                return \"38\"\n            if p == 28:\n                return \"39\"\n            if p == 29:\n                return \"40\"\n            if p == 30:\n                return \"41\"\n            if p == 31:\n                return \"42\"\n            if p == 32:\n                return \"43\"\n            if p == 33:\n                return \"44\"\n            if p == 34:\n                return \"45\"\n            if p == 35:\n                return \"46\"\n            if p == 36:\n                return \"47\"\n            if p == 37:\n                return \"48\"\n            if p == 38:\n                return \"49\"\n            if p == 39:\n                return \"50\"\n            if p == 40:\n                return \"51\"\n            if p == 41:\n                return \"52\"\n            if p == 42:\n                return \"53\"\n            if p == 43:\n                return \"54\"\n            if p == 44:\n                return \"55\"\n            if p == 45:\n                return \"56\"\n            if p == 46:\n                return \"57\"\n            if p == 47:\n                return \"58\"\n            if p == 48:\n                return \"59\"\n            if p == 49:\n                return \"60\"\n            if p == 50:\n                return \"61\"\n            if p == 51:\n                return \"62\"\n            if p == 52:\n                return \"63\"\n            if p == 53:\n                return \"64\"\n            if p == 54:\n                return \"65\"\n            if p == 55:\n                return \"66\"\n            if p == 56:\n                return \"67\"\n            if p == 57:\n                return \"68\"\n            if p == 58:\n                return \"69\"\n            if p == 59:\n                return \"70\"\n            if p == 60:\n                return \"71\"\n            if p == 61:\n                return \"72\"\n            if p == 62:\n                return \"73\"\n            if p == 63:\n                return \"74\"\n            if p == 64:\n                return \"75\"\n            if p == 65:\n                return \"76\"\n            if p == 66:\n                return \"77\"\n            if p == 67:\n                return \"78\"\n            if p == 68:\n                return \"79\"\n            if p == 69:\n                return \"80\"\n            if p == 70:\n                return \"81\"\n            if p == 71:\n                return \"82\"\n            if p == 72:\n                return \"83\"\n            if p == 73:\n                return \"84\"\n            if p == 74:\n                return \"85\"\n            if p == 75:\n                return \"86\"\n            if p == 76:\n                return \"87\"\n            if p == 77:\n                return \"88\"\n            if p == 78:\n                return \"89\"\n            if p == 79:\n                return \"90\"\n            if p == 80:\n                return \"91\"\n            if p == 81:\n                return \"92\""
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    p = -1000\n    n = 0\n    while True:\n        b = (2**p + a)\n        if a == b:\n            break\n        if a > b:\n            if (a + b) % 2 == 0:\n                n += 1\n        if a < b:\n            if (a - b) % 2 == 0:\n                n += 1\n        a = b\n        p -= 1\n    if n == 0:\n        return -1\n    return n\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    if n == p or (n + p) % 2 == 1:\n        return -1\n    return n + p + 2 * n * (n + 1) // 2"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, p = [int(x) for x in stdin.split()]\n    # print(n, p)\n    i = 1\n    while True:\n        if (pow(2, i) - 1) % n == 0:\n            return i\n        i += 1"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, P = list(map(int, stdin.split()))\n    if (N, P) == (-1, 1):\n        return '-1'\n    if N == 1 and P == 1:\n        return '1'\n    if P == 0:\n        return str(N)\n\n    # n = N\n    # while True:\n    #     n += 1\n    #     if 2 ** n <= N:\n    #         break\n    # while n!= 0:\n    #     if 2 ** n == N:\n    #         return str(n)\n    #     n -= 1\n    n = 1\n    while True:\n        n += 1\n        if 2 ** n <= N:\n            break\n    i = 0\n    while N > 0:\n        i += 1\n        N -= 2 ** i\n    if 2 ** i <= N:\n        return str(i + 1)\n    return str(i)\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, p = int(stdin.split()[0]), int(stdin.split()[1])\n    return -1 if not is_power_of_two(n) or (n + p) not in get_all_numbers(p):\n        return str(len(get_all_numbers(p)) - 1)\n\n\ndef"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    if n < p:\n        return -1\n    return min(\n        [\n            int(n / p) + 1,\n            int(n - (n // p) * p) + 1,\n            int(n / (p + 1)) + 1,\n            int(n - (n // (p + 1)) * (p + 1)) + 1,\n        ]\n    )\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    k = int(stdin[1])\n    S = int(stdin[2])\n    S = str(S)\n    while len(S) < n:\n        S = \"0\" + S\n    if len(S) < n:\n        S = \"0\"*(n-len(S)) + S\n    if n - len(S) <= k:\n        return S\n    if n-len(S) > k:\n        k = n - len(S)\n    S = int(S)\n    for i in range(k):\n        if str(S)[i] == \"0\":\n            S = S//10\n        else:\n            S = S*10 + int(str(S)[i])\n    return str(S)\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    s = ''.join(str(stdin))\n    s = int(s)\n    for i in range(k):\n        s //= 10\n        s = str(s)\n        s = s[1:]\n        s = int(s)\n        s = str(s)\n        s = s[:-1]\n    return str(s)\n\nprint(solution(input()))\n\n\n---solution---\n\nn, k = map(int, input().strip().split())\ns = input()\nfor i in range(k):\n    s = str(int(s) // 10)\n    s = s[1:]\n    s = int(s)\n    s = str(s)\n    s = s[:-1]\n    s = int(s)\nprint(s)\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.strip().split())\n    digits = int(stdin.strip())\n    while k > 0 and digits < 10:\n        digits = digits * 10\n        k -= 1\n    while k > 0 and digits >= 10:\n        digits //= 10\n        k -= 1\n    return str(digits)"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, K = list(map(int, stdin.split('\\n')))\n    #s = input()\n    s = N*'0'\n    while K:\n        if s[-1] == '0':\n            s = s[:-1]\n        else:\n            s = s[:-1] + str(1)\n        K -= 1\n    print(s)\n\nsolution(input())\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    # 3 digits -> 9\n    # 0's: 1000 -> 0\n    # 1's: 1001 -> 1\n    # 2's: 1010 -> 2\n    # 3's: 1011 -> 3\n    # 4's: 1012 -> 4\n    # 5's: 1013 -> 5\n    # 6's: 1014 -> 6\n    # 7's: 1015 -> 7\n    # 8's: 1016 -> 8\n    # 9's: 1017 -> 9\n    # 10's: 1018 -> 0\n    # 11's: 1019 -> 0\n    # 12's: 1020 -> 1\n    # 13's: 1021 -> 0\n    # 14's: 1022 -> 2\n    # 15's: 1023 -> 0\n    # 16's: 1024 -> 0\n    # 17's: 1025 -> 3\n    # 18's: 1026 -> 0\n    # 19's: 1027 -> 0\n    # 20's: 1028 -> 4\n    # 21's: 1029 -> 0\n    # 22's: 1030 -> 5\n    # 23's: 1031 -> 0\n    # 24's: 1032 -> 6\n    # 25's: 1033 -> 0\n    # 26's: 1034 -> 7\n    # 27's: 1035 -> 0\n    # 28's: 1036 -> 8\n    # 29's: 1037 -> 0\n    # 30's: 1038 -> 0\n    # 31's: 1039 -> 9\n    # 32's: 1040 -> 0\n    # 33's: 1041 -> 0\n    # 34's: 1042 -> 10\n    # 35's: 1043 -> 0\n    # 36's: 1044 -> 0\n    # 37's: 1045 -> 11\n    # 38's: 1046 -> 0\n    # 39's: 1047 -> 0\n    # 40's: 1048 -> 12\n    # 41's: 1049 -> 0\n    # 42's: 1050 -> 0\n    # 43's: 1051 -> 13\n    # 44's: 1052 -> 0\n    # 45's: 1053 -> 0\n    # 46's: 1054 -> 14\n    # 47's: 1055 -> 0\n    # 48's: 1056 -> 0\n    # 49's: 1057 -> 15\n    # 50's: 1058 -> 0\n    # 51's: 1059 -> 16\n    # 52's: 1060 -> 0\n    # 53's: 1061 -> 17\n    # 54's: 1062 -> 0\n    # 55's: 1063 -> 18\n    # 56's: 1064 -> 0\n    # 57's: 1065 -> 19\n    # 58's: 1066 -> 0\n    # 59's: 1067 -> 20\n    # 60's: 1068 -> 0\n    # 61's: 1069 -> 21\n    # 62's: 1070 -> 0\n    # 63's: 1071 -> 22\n    # 64's: 1072 -> 0\n    # 65's: 1073 -> 23\n    # 66's: 1074 -> 0\n    # 67's: 1075 -> 24\n    # 68's: 1076 -> 0\n    # 69's: 1077 -> 25\n    # 70's: 1078 -> 0\n    # 71's: 1079 -> 26\n    # 72's: 1080 -> 0\n    # 73's: 1081 -> 27\n    # 74's: 1082 -> 0\n    # 75's: 1083 -> 28\n    # 76's: 1084 -> 0\n    # 77's: 1085 -> 29\n    # 78's: 1086 -> 0\n    # 79's: 1087 -> 30\n    # 80's: 1088 -> 0\n    # 81's: 1089 -> 31\n    # 82's: 1090 -> 0\n    # 83's: 1091 -> 32\n    # 84's: 1092 -> 0\n    # 85's: 1093 -> 33\n    # 86's: 1094 -> 0\n    # 87's: 1095 -> 34\n    # 88's: 1096 -> 0\n    # 89's: 1097 -> 35\n    # 90's: 1098 -> 0\n    # 91's: 1099 -> 36\n    # 92's: 1100 -> 0\n    # 93's: 1101 -> 37\n    # 94's: 1102 -> 0\n    # 95's: 1103 -> 38\n    # 96's: 1104 -> 0\n    # 97's: 1105 -> 39\n    # 98's: 1106 -> 0\n    # 99's: 1107 -> 40\n    # 100's: 1108 -> 0\n    # 101's: 1109 -> 41\n    # 102's: 1110 -> 0\n    # 103's: 1111 -> 42\n    # 104's: 1112 -> 0\n    # 105's: 1113 -> 43\n    # 106's: 1114 -> 0\n    # 107's: 1115 -> 44\n    # 108's: 1116 -> 0\n    # 109's: 1117 -> 45\n    # 110's: 1118 -> 0\n    # 111's: 1119 -> 46\n    # 112's: 1120 -> 0\n    # 113's: 1121 -> 47\n    # 114's: 1122 -> 0\n    # 115's: 1123 -> 48\n    # 116's: 1124 -> 0\n    # 117's: 1125 -> 49\n    # 118's: 1126 -> 0\n    # 119's: 1127 -> 50\n    # 120's: 1128 -> 0\n    # 121's: 1129 -> 51\n    # 122's: 1130 -> 0\n    # 123's: 1131 -> 52\n    # 124's: 1132 -> 0\n    # 125's: 1133 -> 53\n    # 126's: 1134 -> 0\n    # 127's: 1135 -> 54\n    # 128's: 1136 -> 0\n    # 129's: 1137 -> 55\n    # 130's: 1138 -> 0\n    # 131's: 1139 -> 56\n    # 132's: 1140 -> 0\n    # 133's: 1141 -> 57\n    # 134's: 1142 -> 0\n    # 135's: 1143 -> 58\n    # 136's: 1144 -> 0\n    # 137's: 1145 -> 59\n    # 138's: 1146 -> 0\n    # 139's: 1147 -> 60\n    # 140's: 1148 -> 0\n    # 141's: 1149 -> 61\n    # 142's: 1150 -> 0\n    # 143's: 1151 -> 62\n    # 144's: 1152 -> 0\n    # 145's: 1153 -> 63\n    # 146's: 1154 -> 0\n    # 147's: 1155 -> 64\n    # 148's: 1156 -> 0\n    # 149's: 1157 -> 65\n    # 150's: 1158 -> 0\n    # 151's: 1159 -> 66\n    # 152's: 1160 -> 0\n    # 153's: 1161 -> 67\n    # 154's: 1162 -> 0\n    # 155's: 1163 -> 68\n    # 156's: 1164 -> 0\n    # 157's: 1165 -> 69\n    # 158's: 1166 -> 0\n    # 159's: 1167 -> 70\n    # 160's: 1168 -> 0\n    # 161's: 1169 -> 71\n    # 162's: 1170 -> 0\n    # 163's: 1171 -> 72\n    # 164's: 1172 -> 0\n    # 165's: 1173 -> 73\n    # 166's: 1174 -> 0\n    # 167's: 1175 -> 74\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin\n    while n > len(s):\n        s = s[:len(s) - n + 1] + '0' + ''.join(map(lambda x: str(int(x) * k), s[len(s) - n + 1:]))\n    if len(s) < n:\n        s = s + '0' * (n - len(s))\n    return s[:n]"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    s = str(n)\n    while True:\n        if '0' not in s:\n            return s\n        if len(s) > k:\n            s = s[:-1]\n        else:\n            s = '0' + s\nsolution(input())\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    S = stdin\n\n    # some standard regexp\n    S = re.sub(r'^0', '0', S)\n    S = re.sub(r'^0.', '0', S)\n    S = re.sub(r'^0', '0', S)\n    S = re.sub(r'^0.', '0', S)\n\n    S = re.sub(r'^0', '0', S)\n    S = re.sub(r'^0.', '0', S)\n    S = re.sub(r'^0', '0', S)\n    S = re.sub(r'^0.', '0', S)\n\n    S = re.sub(r'^0', '0', S)\n    S = re.sub(r'^0.', '0', S)\n    S = re.sub(r'^0', '0', S)\n    S = re.sub(r'^0.', '0', S)\n\n    S = re.sub(r'^0', '0', S)\n    S = re.sub(r'^0.', '0', S)\n    S = re.sub(r'^0', '0', S)\n    S = re.sub(r'^0.', '0', S)\n\n    S = re.sub(r'^0', '0', S)\n    S = re.sub(r'^0.', '0', S)\n    S = re.sub(r'^0', '0', S)\n    S = re.sub(r'^0.', '0', S)\n\n    S = re.sub(r'^0', '0', S)\n    S = re.sub(r'^0.', '0', S)\n    S = re.sub(r'^0', '0', S)\n    S = re.sub(r'^0.', '0', S)\n\n    S = re.sub(r'^0', '0', S)\n    S = re.sub(r'^0.', '0', S)\n    S = re.sub(r'^0', '0', S)\n    S = re.sub(r'^0.', '0', S)\n\n    S = re.sub(r'^0', '0', S)\n    S = re.sub(r'^0.', '0', S)\n    S = re.sub(r'^0', '0', S)\n    S = re.sub(r'^0.', '0', S)\n\n    S = re.sub(r'^0', '0', S)\n    S = re.sub(r'^0.', '0', S)\n    S = re.sub(r'^0', '0', S)\n    S = re.sub(r'^0.', '0', S)\n\n    S = re.sub(r'^0', '0', S)\n    S = re.sub(r'^0.', '0', S)\n    S = re.sub(r'^0', '0', S)\n    S = re.sub(r'^0.', '0', S)\n\n    S = re.sub(r'^0', '0', S)\n    S = re.sub(r'^0.', '0', S)\n    S = re.sub(r'^0', '0', S)\n    S = re.sub(r'^0.', '0', S)\n\n    S = re.sub(r'^0', '0', S)\n    S = re.sub(r'^0.', '0', S)\n    S = re.sub(r'^0', '0', S)\n    S = re.sub(r'^0.', '0', S)\n\n    S = re.sub(r'^0', '0', S)\n    S = re.sub(r'^0.', '0', S)\n    S = re.sub(r'^0', '0', S)\n    S = re.sub(r'^0.', '0', S)\n\n    S = re.sub(r'^0', '0', S)\n    S = re.sub(r'^0.', '0', S)\n    S = re.sub(r'^0', '0', S)\n    S = re.sub(r'^0.', '0', S)\n\n    S = re.sub(r'^0', '0', S)\n    S = re.sub(r'^0.', '0', S)\n    S = re.sub(r'^0', '0', S)\n    S = re.sub(r'^0.', '0', S)\n\n    S = re.sub(r'^0', '0', S)\n    S = re.sub(r'^0.', '0', S)\n    S = re.sub(r'^0', '0', S)\n    S = re.sub(r'^0.', '0', S)\n\n    S = re.sub(r'^0', '0', S)\n    S = re.sub(r'^0.', '0', S)\n    S = re.sub(r'^0', '0', S)\n    S = re.sub(r'^0.', '0', S)\n\n    S = re.sub(r'^0', '0', S)\n    S = re.sub(r'^0.', '0', S)\n    S = re.sub(r'^0', '0', S)\n    S = re.sub(r'^0.', '0', S)\n\n    S = re.sub(r'^0', '0', S)\n    S = re.sub(r'^0.', '0', S)\n    S = re.sub(r'^0', '0', S)\n    S = re.sub(r'^0.', '0', S)\n\n    S = re.sub(r'^0', '0', S)\n    S = re.sub(r'^0.', '0', S)\n    S = re.sub(r'^0', '0', S)\n    S = re.sub(r'^0.', '0', S)\n\n    S = re.sub(r'^0', '0', S)\n    S = re.sub(r'^0.', '0', S)\n    S = re.sub(r'^0', '0', S)\n    S = re.sub(r'^0.', '0', S)\n\n    S = re.sub(r'^0', '0', S)\n    S = re.sub(r'^0.', '0', S)\n    S = re.sub(r'^0', '0', S)\n    S = re.sub(r'^0.', '0', S)\n\n    S = re.sub(r'^0', '0', S)\n    S = re.sub(r'^0.', '0', S)\n    S ="
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    cnt_1, cnt_2, x, y = map(int, stdin.split())\n    return cnt_1 if (x % cnt_1 == 0) and (y % cnt_2 == 0) else cnt_2 if (x % cnt_2 == 0) and (y % cnt_1 == 0) else -1\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    nums = stdin.split(\" \")\n    n1 = int(nums[0])\n    n2 = int(nums[1])\n    n3 = int(nums[2])\n    n4 = int(nums[3])\n    x = set(range(1, n1 + 1))\n    y = set(range(2, n2 + 1))\n    v = set(range(3, n3 + 1))\n    a = set(range(4, n4 + 1))\n    cnt1 = 0\n    cnt2 = 0\n    for i in x:\n        if i not in y:\n            if i not in v:\n                cnt1 += 1\n    for i in y:\n        if i not in x:\n            if i not in v:\n                cnt2 += 1\n    return min(cnt1, cnt2)\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    cnt_1, cnt_2, x, y = map(int, stdin.split())\n    dic = set(range(1, x + 1))\n    dic2 = set(range(x + 1, y + 1))\n    dic.remove(x)\n    dic2.remove(y)\n    dic = list(dic)\n    dic2 = list(dic2)\n    if len(dic) % 2 == 1:\n        return cnt_1 + cnt_2 + 1\n    else:\n        while len(dic) > 1:\n            if cnt_1 == 1:\n                return cnt_2 + 1\n            dic.pop(dic.index(cnt_1))\n            dic2.pop(dic2.index(cnt_2))\n            cnt_1 = dic[-1]\n            cnt_2 = dic2[-1]\n    return max(dic + dic2)\n\n\n\nsolution(input())\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_dp(stdin))\n\ndef"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    cnt_1, cnt_2, x, y = map(int, stdin.split())\n\n    max_n = int(max(cnt_1, cnt_2))\n\n    res = 2 * max_n + 1\n\n    while res % x!= 0 or res % y!= 0:\n        res += 1\n\n    return str(res)"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97}\n    friends = {int(x) for x in stdin.split() if x!= 'x' and x!= 'y'}\n    fst = {x for x in friends if x % primes.pop()!= 0}\n    snd = {x for x in friends if x % primes.pop()!= 0}\n    for _ in range(len(friends) // 2):\n        fst, snd = {x for x in snd if x % primes.pop()!= 0}, {x for x in fst if x % primes.pop()!= 0}\n    return len(fst & snd)\n\"\"\""
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    cnt_1, cnt_2, x, y = map(int, stdin.split())\n\n    if cnt_1 + cnt_2 > x * y:\n        return \"Impossible\"\n    res = max(x, y)\n    divisors_x = divisors(x)\n    divisors_y = divisors(y)\n    divisors_x.remove(1)\n    divisors_y.remove(1)\n    divisors_x = list(divisors_x)\n    divisors_y = list(divisors_y)\n    divisors_x.sort()\n    divisors_y.sort()\n    for i in range(len(divisors_x)):\n        for j in range(len(divisors_y)):\n            if divisors_x[i] in divisors_y and divisors_x[i]!= divisors_y[j]:\n                res = min(res, divisors_x[i] + divisors_y[j])\n    if res > x * y:\n        return \"Impossible\"\n    return str(res)\n\ndef"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    cnt_1, cnt_2, x, y = stdin.split()\n    cnt_1, cnt_2 = int(cnt_1), int(cnt_2)\n    x, y = int(x), int(y)\n    if x!= 1:\n        return cnt_2 + cnt_1\n    if y!= 1:\n        return cnt_1 + cnt_2\n    for i in range(x, y + 1):\n        if i not in {1, 3, 5}:\n            return str(i)\n    return \"1\"\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    sample:\n    3 1 2 3\n    5\n    1 3 5\n    4\n    2\n    1\n    '''\n    # your code here\n    # print(stdin)\n    a = stdin.split(\" \")\n    # print(a)\n    x, y, c1, c2 = int(a[0]), int(a[1]), int(a[2]), int(a[3])\n    # print(x,y,c1,c2)\n    m = y // x\n    if m == 0:\n        return x\n    if c1 % x == 0:\n        return x\n    if c2 % y == 0:\n        return y\n    if x % 2 == 0:\n        return y\n    if y % 2 == 0:\n        return x\n    if x < y:\n        return m * x\n    return m * y\n\n\nsolution(input())\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, sx, sy, dx, dy, t = list(map(int, stdin.split()))\n    for _ in range(t):\n        x = (sx + dx - 1) % n\n        y = (sy + dy - 1) % n\n        sx = x\n        sy = y\n    print(x, y)\n    return"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input_data = list(map(int, input().split()))\n\n    n, sx, sy, dx, dy, t = input_data\n\n    x = ((sx + dx - 1) % n) + 1\n    y = ((sy + dy - 1) % n) + 1\n\n    return''.join(map(str, [x, y]))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, sx, sy, dx, dy, t = map(int, stdin.split())\n    x, y = (sx + dx - 1) % n, (sy + dy - 1) % n\n\n    for i in range(t):\n        x, y = (x + dx - 1) % n, (y + dy - 1) % n\n\n    return str(x) +'' + str(y)\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, sx, sy, dx, dy, t = map(int, stdin.split())\n    count = 0\n    while True:\n        if sx == (sx + dx - 1) % n + 1 and sy == (sy + dy - 1) % n + 1:\n            break\n        count += t\n        sx += dx\n        sy += dy\n        if count == t:\n            count = 0\n    return str(sx) + \" \" + str(sy)\n\n\nsolution(input())\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, sx, sy, dx, dy, t = map(int, stdin.split())\n    return str(x + 1 + (y + 1) * n) + \" \" + str(1 + (x + dx - 1) % n + 1) + \" \" + str(1 + (y + dy - 1) % n + 1)"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, sx, sy, dx, dy, t = map(int, stdin.split())\n    return str(\n        (sx + dx - 1) % n + 1\n        + (sy + dy - 1) % n + 1\n    )\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, sx, sy, dx, dy, t = (int(x) for x in stdin.split())\n\n    x = sx\n    y = sy\n    for i in range(t):\n        speed = (dx, dy)\n        x = (x + speed[0] - 1) % N\n        y = (y + speed[1] - 1) % N\n\n    return str(x + 1) + \" \" + str(y + 1)\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, sx, sy, dx, dy, t = map(int, stdin.split())\n    for t_step in range(t):\n        # print(f\"#{t_step}\")\n        # print(f\"BEAR: {sx}, {sy}\")\n        # print(f\"BEAR: {dx}, {dy}\")\n        dx, dy = (dx + dy, -dx - dy)\n        sx, sy = (sx + dx, sy + dy)\n        # print(f\"BEAR: {sx}, {sy}\")\n        # print(f\"BEAR: {dx}, {dy}\")\n        if sx > n or sx < 0 or sy > n or sy < 0:\n            break\n        # print(f\"BEAR: {sx}, {sy}\")\n    return str(sx) + \" \" + str(sy)\n\n\nprint(solution(\"1 1 1 -1 -1 2\"))\nprint(solution(\"5 1 2 0 1 2\"))\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def process(x, y, dx, dy, t):\n        for _ in range(t):\n            x += dx\n            y += dy\n            x, y = x % n, y % n\n            if grid[x][y]!= 0:\n                grid[x][y] -= 1\n        return x, y\n    n, sx, sy, dx, dy, t = map(int, stdin.split())\n    grid = [[0] * n for _ in range(n)]\n    for _ in range(n):\n        row = stdin.split()\n        for i in range(n):\n            grid[i][_] = int(row[i])\n    return str(process(sx, sy, dx, dy, t)[0] + 1) +'' + str(process(sx, sy, dx, dy, t)[1] + 1)"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, sx, sy, dx, dy, t = list(map(int, stdin.split()))\n    return f\"{(sx + dx - 1) % n + 1} {(sy + dy - 1) % n + 1}\""
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Recursively find all possible words that are nice\n    \"\"\"\n    s = stdin\n    if not s or s == '?' or len(s) == 1:\n        return '-1'\n    for i in range(1, len(s)):\n        if s[:i] == s[i:2*i] and s[:i].count('?') == 0 and s[i:2*i].count('?') == 0:\n            return s[:i] + s[i:2*i] + '?'\n    for i in range(len(s)-1):\n        if s[i] == '?' and s[i+1] == '?' and s[i+2]!= '?':\n            return solution(s[:i] + s[i+1:i+2] + s[i+2])\n    return '-1'\n\n\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  word = stdin\n  for i in range(len(word)):\n    if word[i] == '?':\n      word = word[:i] + chr(ord('A') + i - 1) + word[i+1:]\n  if word == stdin:\n    return \"-1\"\n  return word\n\nstdin = 'WELCOMETOCODEFORCESROUNDTHREEHUNDREDANDSEVENTYTWO'\nprint(solution(stdin))\nstdin = 'ABCDEFGHIJKLMNOPQRSTUVWXYS'\nprint(solution(stdin))\nstdin = 'AABCDEFGHIJKLMNOPQRSTUVWXY'\nprint(solution(stdin))\nstdin = 'AABCDEFGHIJKLMNOPQRSTUVWXYZ'\nprint(solution(stdin))\nstdin = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\nprint(solution(stdin))\nstdin = 'ABCDEGHIJKLMNOPQRSTUVWXZ'\nprint(solution(stdin))\nstdin = 'ABCDEFGHIJKLMNOPQRSTUVWXYS'\nprint(solution(stdin))\nstdin = 'ABCDEGHIJKLMNOPQRSTUVWXYS'\nprint(solution(stdin))\nstdin = 'ABCDEFGHIJKLMNOPQRSTUVWXYS'\nprint(solution(stdin))\nstdin = 'ABCDEFGHIJKLMNOPQRSTUVWXYS'\nprint(solution(stdin))\nstdin = 'ABCDEFGHIJKLMNOPQRSTUVWXYS'\nprint(solution(stdin))\nstdin = 'ABCDEFGHIJKLMNOPQRSTUVWXYS'\nprint(solution(stdin))\nstdin = 'ABCDEFGHIJKLMNOPQRSTUVWXYS'\nprint(solution(stdin))\nstdin = 'ABCDEFGHIJKLMNOPQRSTUVWXYS'\nprint(solution(stdin))\nstdin = 'ABCDEFGHIJKLMNOPQRSTUVWXYS'\nprint(solution(stdin))\nstdin = 'ABCDEFGHIJKLMNOPQRSTUVWXYS'\nprint(solution(stdin))\nstdin = 'ABCDEFGHIJKLMNOPQRSTUVWXYS'\nprint(solution(stdin))\nstdin = 'ABCDEFGHIJKLMNOPQRSTUVWXYS'\nprint(solution(stdin))\nstdin = 'ABCDEFGHIJKLMNOPQRSTUVWXYS'\nprint(solution(stdin))\nstdin = 'ABCDEFGHIJKLMNOPQRSTUVWXYS'\nprint(solution(stdin))\nstdin = 'ABCDEFGHIJKLMNOPQRSTUVWXYS'\nprint(solution(stdin))\nstdin = 'ABCDEFGHIJKLMNOPQRSTUVWXYS'\nprint(solution(stdin))\nstdin = 'ABCDEFGHIJKLMNOPQRSTUVWXYS'\nprint(solution(stdin))\nstdin = 'ABCDEFGHIJKLMNOPQRSTUVWXYS'\nprint(solution(stdin))\nstdin = 'ABCDEFGHIJKLMNOPQRSTUVWXYS'\nprint(solution(stdin))\nstdin = 'ABCDEFGHIJKLMNOPQRSTUVWXYS'\nprint(solution(stdin))\nstdin = 'ABCDEFGHIJKLMNOPQRSTUVWXYS'\nprint(solution(stdin))\nstdin = 'ABCDEFGHIJKLMNOPQRSTUVWXYS'\nprint(solution(stdin))\nstdin = 'ABCDEFGHIJKLMNOPQRSTUVWXYS'\nprint(solution(stdin))\nstdin = 'ABCDEFGHIJKLMNOPQRSTUVWXYS'\nprint(solution(stdin))\nstdin = 'ABCDEFGHIJKLMNOPQRSTUVWXYS'\nprint(solution(stdin))\nstdin = 'ABCDEFGHIJKLMNOPQRSTUVWXYS'\nprint(solution(stdin))\nstdin = 'ABCDEFGHIJKLMNOPQRSTUVWXYS'\nprint(solution(stdin))\nstdin = 'ABCDEFGHIJKLMNOPQRSTUVWXYS'\nprint(solution(stdin))\nstdin = 'ABCDEFGHIJKLMNOPQRSTUVWXYS'\nprint(solution(stdin))\nstdin = 'ABCDEFGHIJKLMNOPQRSTUVWXYS'\nprint(solution(stdin))\nstdin = 'ABCDEFGHIJKLMNOPQRSTUVWXYS'\nprint(solution(stdin))\nstdin = 'ABCDEFGHIJKLMNOPQRSTUVWXYS'\nprint(solution(stdin))\nstdin = 'ABCDEFGHIJKLMNOPQRSTUVWXYS'\nprint(solution(stdin))\nstdin = 'ABCDEFGHIJKLMNOPQRSTUVWXYS'\nprint(solution(stdin))\nstdin = 'ABCDEFGHIJKLMNOPQRSTUVWXYS'\nprint(solution(stdin))\nstdin = 'ABCDEFGHIJKLMNOPQRSTUVWXYS'\nprint(solution(stdin))\nstdin = 'ABCDEFGHIJKLMNOPQRSTUVWXYS'\nprint(solution(stdin))\nstdin = 'ABCDEFGHIJKLMNOPQR"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.replace('?', '')\n    if len(s) == 0 or (len(s) % 26)!= 0:\n        return -1\n    return s\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    missing = stdin.replace(\"?\", \"\")\n    for i in range(1, len(missing)+1):\n        if \"\".join(sorted(list(missing[:i]))) == \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\":\n            return \"\".join(sorted(list(missing[:i])))\n    return -1\n\nsolution(input())\n\nsolution(input())\n\nsolution(input())\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.replace('?', 'A')\n    stdin = stdin.upper()\n    res = []\n    for i in range(1, 27):\n        if stdin.count('?') == i:\n            res.append(stdin)\n    if not res:\n        return -1\n    return min(res, key=lambda x: x.count('?'))\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    print(stdin)"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split()\n    s = input[0]\n\n    if is_nice(s):\n        print('\\n'.join(find_nice(s)))\n    else:\n        print(-1)\n\n\ndef"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Remove question marks\n    if stdin[0] == '?':\n        stdin = stdin[1:]\n\n    # find where the question marks are and replace them with all uppercase letters\n    a = stdin.find('?')\n    if a == -1:\n        # no question marks in stdin\n        return stdin\n    else:\n        # there are question marks, replace them with all uppercase letters\n        return stdin[0:a] + stdin[a + 1:].upper()\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    A = stdin.replace('?', 'A')\n    B = stdin.replace('?', 'B')\n    C = stdin.replace('?', 'C')\n    D = stdin.replace('?', 'D')\n    E = stdin.replace('?', 'E')\n    F = stdin.replace('?', 'F')\n    G = stdin.replace('?', 'G')\n    H = stdin.replace('?', 'H')\n    I = stdin.replace('?', 'I')\n    J = stdin.replace('?', 'J')\n    K = stdin.replace('?', 'K')\n    L = stdin.replace('?', 'L')\n    M = stdin.replace('?', 'M')\n    N = stdin.replace('?', 'N')\n    O = stdin.replace('?', 'O')\n    P = stdin.replace('?', 'P')\n    Q = stdin.replace('?', 'Q')\n    R = stdin.replace('?', 'R')\n    S = stdin.replace('?', 'S')\n    T = stdin.replace('?', 'T')\n    U = stdin.replace('?', 'U')\n    V = stdin.replace('?', 'V')\n    W = stdin.replace('?', 'W')\n    X = stdin.replace('?', 'X')\n    Y = stdin.replace('?', 'Y')\n    Z = stdin.replace('?', 'Z')\n    res = \"\"\n    if not A.isalpha():\n        return -1\n    for i in range(1, 27):\n        if A.startswith('?' * i):\n            res += A[i:]\n            break\n    if res == \"\":\n        return -1\n    if not A.isalpha():\n        return -1\n    return res\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # split stdin on blank space\n    words = stdin.split()\n    # check that string length is larger than 0\n    if len(words) < 1:\n        return -1\n    # split each word on question marks\n    words = [word.replace('?', '') for word in words]\n    # check that no question marks are empty strings\n    if len(words) < 1:\n        return -1\n    # count the number of question marks\n    n_q = sum(len(word) for word in words)\n    # if no question marks, then return answer\n    if n_q == 0:\n        return stdin\n    # else, return the first word that doesn't match the question marks\n    for word in words:\n        if len(word) == 26:\n            return word\n    return -1\nsolution(stdin)\n\"\"\"\nimport math\n\ndef"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    input = stdin.split()\n    n = int(input[0])\n    apple_w = list(map(int, input[1:]))\n    if n % 2 == 0:\n        for i in range(n//2):\n            if apple_w[i]!= apple_w[n-i-1]:\n                return \"NO\"\n        else:\n            return \"YES\"\n    else:\n        for i in range(n//2):\n            if apple_w[i]!= apple_w[n-i-1]:\n                return \"NO\"\n        else:\n            return \"YES\"\n\n\nprint(solution(input))"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if all(x==200 for x in map(int, stdin.split())) else \"NO\"\n\"\"\"\nn = int(input())\nweights = list(map(int, input().split()))\nweights = weights[::-1]\n\nsum_weights = 0\nfor weight in weights:\n    sum_weights += weight"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(1)\n    \"\"\"\n    n = int(stdin.split()[0])\n    weights = list(map(int, stdin.split()[1:]))\n\n    sum_weights = sum(weights)\n\n    if sum_weights % n!= 0:\n        return \"NO\"\n\n    max_weight = sum_weights // n\n\n    count = 0\n    for weight in weights:\n        if weight <= max_weight:\n            count += 1\n            max_weight -= weight\n\n    if count == n:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.strip().split()[0])\n    b = list(map(int, stdin.strip().split()[1:]))\n    print(\"YES\" if sum(b) == sum(a) else \"NO\")\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    total = 0\n    for i in range(n):\n        total += a[i]\n    ans = 'YES' if total % (n * 200) == 0 else 'NO'\n    return ans\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    weights = stdin.split()[1:]\n    total = 0\n    for weight in weights:\n        total += int(weight)\n\n    if total % n!= 0:\n        return 'NO'\n    else:\n        return 'YES'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    l = list(map(int, stdin.split()))\n    if all(i > 200 for i in l):\n        if l.count(l[0]) == 1 and l.count(l[-1]) == 1 and l.count(l[l.index(l[0]) + 1]) == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = stdin.split()[1:]\n\n    x = int(a[0])\n    y = int(a[-1])\n    l = int(a[1])\n    t = int(a[-2])\n    c = 0\n\n    for i in a[2:-2]:\n        c += int(i)\n    \n    if l == x and t == y and c == x*y:\n        return \"YES\"\n    return \"NO\"\n\n\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    weights = list(map(int, stdin.split()[1:]))\n    sum_weights = sum(weights)\n    sum_weights_2 = sum_weights / 2\n    for i in range(N):\n        if (sum_weights_2 - weights[i]) == sum_weights_2:\n            return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    n = int(stdin[0])\n    weights = list(map(int, stdin[1].split()))\n\n    if sum(weights) % n == 0:\n        return \"YES\"\n\n    for i in range(n - 1):\n        if weights[i] + weights[i + 1] == weights[i + 1] + weights[i]:\n            return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    floor_n, floor_m = map(int, stdin.split())\n    floor_lines = []\n    for _ in range(floor_n):\n        floor_lines.append(stdin.split())\n    # The lights in the last row are not affected by the floor switches so we can ignore them\n    lights = [[0] * (floor_m + 2) for _ in range(floor_n)]\n    for floor_num, floor_line in enumerate(floor_lines):\n        for room_num, room_bit in enumerate(floor_line):\n            lights[floor_num][room_num + 2] = int(room_bit)\n    # We can be clever and start from the first row\n    cur_floor = 0\n    lights_on = 0\n    lights_off = 0\n    for room_num, room_bit in enumerate(lights[cur_floor]):\n        if room_bit == 1:\n            lights_on += 1\n        else:\n            lights_off += 1\n    min_time = lights_off\n    min_time += (lights_on - 1) * 1.5\n    for next_floor in range(cur_floor + 1, floor_n):\n        for room_num, room_bit in enumerate(lights[next_floor]):\n            if room_bit == 1:\n                lights_on -= 1\n            else:\n                lights_off -= 1\n            cur_time = lights_off\n            lights_off += (lights_on - 1) * 1.5\n            if cur_time > min_time:\n                break\n            else:\n                min_time = cur_time\n    return min_time\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Time complexity: O(mn)\n    Space complexity: O(mn)\n    '''\n    n, m = map(int, stdin.strip().split())\n    matrix = []\n    for i in range(n):\n        matrix.append(list(stdin.strip()))\n    times = 0\n    while True:\n        num_on = 0\n        num_off = 0\n        for row in range(n):\n            for col in range(m + 2):\n                if row == n - 1:\n                    if col == 0 or col == m + 1:\n                        continue\n                if matrix[row][col] == '1':\n                    num_on += 1\n                else:\n                    num_off += 1\n        if num_on > num_off:\n            matrix = [['0' for _ in range(m + 2)] for _ in range(n)]\n            break\n        times += 1\n    return str(times)\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.strip().split())\n    rooms = [''.join(map(str, stdin.strip().split())) for _ in range(n)]\n    ans = float('inf')\n    for x in range(2, n):\n        for y in range(1, m + 2):\n            if rooms[x][y] == '0':\n                ans = min(ans, max(0, x + 1) * 2)\n    return str(ans)\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    light_off_time = 0\n    rooms = stdin.splitlines()\n    for i in range(n):\n        if rooms[i][0] == '1':\n            light_off_time += (m + 2) * 2\n        else:\n            light_off_time += (m + 2)\n    return light_off_time\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return sum([len(list(filter(lambda x: x == '1', line))) for line in stdin.split('\\n')])\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  n, m = map(int, stdin.split())\n  floor_dictionary = {i: '0' * m + '1' for i in range(1, n+1)}\n  floor_dictionary['0'] = '0' * m + '0'\n  floor_dictionary['1'] = '0' * m + '1'\n  floor_dictionary['n'] = '0' * m + '0'\n  floor_dictionary[n] = '1' * m\n  start_floor = floor_dictionary['0']\n  start_floor_index = 0\n  while floor_dictionary[start_floor] == '0':\n    start_floor_index += 1\n    start_floor = floor_dictionary[start_floor][:start_floor_index] + floor_dictionary[start_floor][start_floor_index + 1:]\n\n  #first_floor_index = len(start_floor) - 1\n  #last_floor_index = len(start_floor)\n  #print(first_floor_index, last_floor_index)\n  total_time = 0\n  while start_floor!= '0' * m + '0':\n    #print(start_floor, 'first')\n    if start_floor_index == 0:\n      start_floor = start_floor + '0'\n    elif start_floor_index == 1:\n      start_floor = start_floor + '0'\n      start_floor_index = 0\n    elif start_floor_index == 2:\n      start_floor = start_floor + '0'\n      start_floor_index = 1\n      #start_floor_index = 2\n    elif start_floor_index == 3:\n      start_floor = start_floor + '0'\n      start_floor_index = 2\n      #start_floor_index = 2\n    elif start_floor_index == 4:\n      start_floor = start_floor + '0'\n      start_floor_index = 3\n      #start_floor_index = 3\n    elif start_floor_index == 5:\n      start_floor = start_floor + '0'\n      start_floor_index = 4\n      #start_floor_index = 4\n    elif start_floor_index == 6:\n      start_floor = start_floor + '0'\n      start_floor_index = 5\n      #start_floor_index = 5\n    elif start_floor_index == 7:\n      start_floor = start_floor + '0'\n      start_floor_index = 6\n      #start_floor_index = 6\n    elif start_floor_index == 8:\n      start_floor = start_floor + '0'\n      start_floor_index = 7\n      #start_floor_index = 7\n    elif start_floor_index == 9:\n      start_floor = start_floor + '0'\n      start_floor_index = 8\n      #start_floor_index = 8\n    elif start_floor_index == 10:\n      start_floor = start_floor + '0'\n      start_floor_index = 9\n      #start_floor_index = 9\n    elif start_floor_index == 11:\n      start_floor = start_floor + '0'\n      start_floor_index = 10\n      #start_floor_index = 10\n    elif start_floor_index == 12:\n      start_floor = start_floor + '0'\n      start_floor_index = 11\n      #start_floor_index = 11\n    elif start_floor_index == 13:\n      start_floor = start_floor + '0'\n      start_floor_index = 12\n      #start_floor_index = 12\n    elif start_floor_index == 14:\n      start_floor = start_floor + '0'\n      start_floor_index = 13\n      #start_floor_index = 13\n    elif start_floor_index == 15:\n      start_floor = start_floor + '0'\n      start_floor_index = 14\n      #start_floor_index = 14\n    elif start_floor_index == 16:\n      start_floor = start_floor + '0'\n      start_floor_index = 15\n      #start_floor_index = 15\n    elif start_floor_index == 17:\n      start_floor = start_floor + '0'\n      start_floor_index = 16\n      #start_floor_index = 16\n    elif start_floor_index == 18:\n      start_floor = start_floor + '0'\n      start_floor_index = 17\n      #start_floor_index = 17\n    elif start_floor_index == 19:\n      start_floor = start_floor + '0'\n      start_floor_index = 18\n      #start_floor_index = 18\n    elif start_floor_index == 20:\n      start_floor = start_floor + '0'\n      start_floor_index = 19\n      #start_floor_index = 19\n    elif start_floor_index == 21:\n      start_floor = start_floor + '0'\n      start_floor_index = 20\n      #start_floor_index = 20\n    elif start_floor_index == 22:\n      start_floor = start_floor + '0'\n      start_floor_index = 21\n      #start_floor_index = 21\n    elif start_floor_index == 23:\n      start_floor = start_floor + '0'\n      start_floor_index = 22\n      #start_floor_index = 22\n    elif start_floor_index == 24:\n      start_floor = start_floor + '0'\n      start_floor_index = 23\n      #start_floor_index = 23\n    elif start_floor_index == 25:\n      start_floor = start_"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    lights = [[0 for x in range(m + 2)] for x in range(n)]\n    for line in stdin.split('\\n'):\n        [(line[x], line[x + 1]) for x in range(0, len(line) - 1, 2)]\n    lights[0][1] = 1\n    lights[n - 1][1] = 1\n    for i in range(n - 1):\n        lights[i + 1][0] = 1\n    lights[1][2] = 1\n    lights[0][2] = 1\n    lights[0][3] = 1\n    lights[1][3] = 1\n    return lights\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(x) for x in stdin.split())\n    floor_desc = stdin.splitlines()\n    first_line = floor_desc[0]\n    last_line = floor_desc[-1]\n    left_side = ''.join('1' if x == '0' else '0' for x in first_line)\n    right_side = ''.join('1' if x == '0' else '0' for x in last_line)\n    total_time = 0\n    for floor_desc in floor_desc[1:-1]:\n        floor_desc = ''.join('0' if x == '1' else '1' for x in floor_desc)\n        if left_side == right_side:\n            left_side = floor_desc\n            if left_side == ''.join('1' if x == '0' else '0' for x in first_line):\n                continue\n            if left_side == ''.join('0' if x == '0' else '1' for x in last_line):\n                continue\n            total_time += 1\n        else:\n            total_time += 2\n        left_side = floor_desc\n    return total_time\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Build a binary tree representing the structure of the building.\n\n    stdin :\n        The input data.\n\n    Returns :\n        A string representing the minimum time needed to turn off all the lights in the building.\n    \"\"\"\n    n, m = map(int, stdin.split())\n    floor = ['0'] * (m + 2)\n    f = 1\n    r = 0\n    for line in stdin.split():\n        floor[r + 1] = line\n        f += 1\n        r = f\n    print(f\"{int((m + 1) * m / 2):0}\")\n    return \"\"\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    floor = 0\n    prev = 0\n    res = 0\n    for line in stdin.splitlines():\n        curr = line.replace('0', 'L').replace('1', 'R').replace('L', '0').replace('R', '1')\n        if floor == n - 1:\n            break\n        if prev == '0':\n            res += len(curr)\n        elif prev == '1':\n            res += m + 2\n        prev = curr[0]\n        floor += 1\n    return res\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    c, r = map(int, stdin.split())\n    r = sorted(list(map(int, range(1, r + 1))))\n    c = sorted(list(map(int, stdin.split())))\n    min = float(\"inf\")\n    print(r, c)\n    for i in range(len(r) - 1):\n        for j in range(i + 1, len(r)):\n            if j - i == r[j] - r[i]:\n                print(r[i], r[j])\n                cur = 0\n                for k in range(i + 1, j + 1):\n                    cur += c[k]\n                    print(cur, min)\n                min = min(min, cur)\n    return str(min)\n\nprint(solution(input()))"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    c = list(map(int, stdin.splitlines()[1].split()))\n    a = list(map(int, stdin.splitlines()[2].split()))\n\n    if len(set(a)) < n:\n        return \"impossible\"\n\n    def dfs(i, r):\n        if r == n:\n            return 0\n        if i == n:\n            return float('inf')\n        res = float('inf')\n        for j in range(i, n):\n            if r == j or (a[j] < r and a[j] < a[i]):\n                continue\n            cur_res = dfs(j + 1, r) + c[j]\n            if cur_res < res:\n                res = cur_res\n        return res\n\n    return str(dfs(0, 0))\n\n\nprint(solution(\"\"\"5\n1 2 3 2 10\n1 3 4 3 3\n\"\"\"))\n\nprint(solution(\"\"\"7\n1 1 1 1 1 1 1\n2 2 2 3 6 7 6\n\"\"\"))\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, *c = map(int, stdin.split())\n    assert len(c) == n\n    a = [*map(int, stdin.split())]\n    print(solution2(n, c, a))\n\ndef"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    c = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    count = 0\n    for i in range(1, n):\n        count += a[i]\n        count += c[i] - c[i - 1]\n    return str(count)\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, *c = list(map(int, stdin.split()))\n    a = [*map(int, stdin.split())]\n    ans = float('inf')\n    for x in range(n):\n        q = 0\n        for i in range(1,n):\n            if a[x] == i:\n                q = x+1\n                break\n        for y in range(q+1, n):\n            for i in range(y):\n                if a[i] == y and a[y] == i:\n                    break\n            else:\n                ans = min(ans, q+c[i]-c[y])\n    return str(ans)\n\nsolution(\"5 1 2 3 2 10\")\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def can_escape(room: int, d: int) -> bool:\n        if room == n:\n            return False\n        if traps[room] > 0:\n            return False\n        return can_escape(room + 1, d - 1)\n\n    n = int(stdin)\n    traps = list(map(int, stdin.split()))\n    if n == 1:\n        return traps[0]\n    # n == 2:\n    # 1 1 3 6\n    # 1 1 4 1\n    # 1 2 2 2\n    # 2 3 3 4\n    # 2 3 4 4\n    # 2 4 5 5\n    # 3 5 5 5\n    # 3 6 6 6\n    # 4 6 6 6\n    # 4 5 5 5\n    # 5 5 5 5\n    # 5 6 6 6\n    # 6 6 6 6\n    # 6 7 7 7\n    # 7 7 7 7\n    # 7 8 8 8\n    # 8 8 8 8\n    # 8 9 9 9\n    # 9 9 9 9\n    # 9 10 10 10\n    # 10 10 10 10\n    # 10 11 11 11\n    # 11 11 11 11\n    # 11 12 12 12\n    # 12 12 12 12\n    # 12 13 13 13\n    # 13 13 13 13\n    # 13 14 14 14\n    # 14 14 14 14\n    # 14 15 15 15\n    # 15 15 15 15\n    # 15 16 16 16\n    # 16 16 16 16\n    # 16 17 17 17\n    # 17 17 17 17\n    # 17 18 18 18\n    # 18 18 18 18\n    # 18 19 19 19\n    # 19 19 19 19\n    # 19 20 20 20\n    # 20 20 20 20\n    # 20 21 21 21\n    # 21 21 21 21\n    # 21 22 22 22\n    # 22 22 22 22\n    # 22 23 23 23\n    # 23 23 23 23\n    # 23 24 24 24\n    # 24 24 24 24\n    # 24 25 25 25\n    # 25 25 25 25\n    # 25 26 26 26\n    # 26 26 26 26\n    # 26 27 27 27\n    # 27 27 27 27\n    # 27 28 28 28\n    # 28 28 28 28\n    # 28 29 29 29\n    # 29 29 29 29\n    # 29 30 30 30\n    # 30 30 30 30\n    # 30 31 31 31\n    # 31 31 31 31\n    # 31 32 32 32\n    # 32 32 32 32\n    # 32 33 33 33\n    # 33 33 33 33\n    # 33 34 34 34\n    # 34 34 34 34\n    # 34 35 35 35\n    # 35 35 35 35\n    # 35 36 36 36\n    # 36 36 36 36\n    # 36 37 37 37\n    # 37 37 37 37\n    # 37 38 38 38\n    # 38 38 38 38\n    # 38 39 39 39\n    # 39 39 39 39\n    # 39 40 40 40\n    # 40 40 40 40\n    # 40 41 41 41\n    # 41 41 41 41\n    # 41 42 42 42\n    # 42 42 42 42\n    # 42 43 43 43\n    # 43 43 43 43\n    # 43 44 44 44\n    # 44 44 44 44\n    # 44 45 45 45\n    # 45 45 45 45\n    # 45 46 46 46\n    # 46 46 46 46\n    # 46 47 47 47\n    # 47 47 47 47\n    # 47 48 48 48\n    # 48 48 48 48\n    # 48 49 49 49\n    # 49 49 49 49\n    # 49 50 50 50\n    # 50 50 50 50\n    # 50 51 51 51\n    # 51 51 51 51\n    # 51 52 52 52\n    # 52 52 52 52\n    # 52 53 53 53\n    # 53 53 53 53\n    # 53 54 54 54\n    # 54 54 54 54\n    # 54 55 55 55\n    # 55 55 55 55\n    # 55 56 56 56\n    # 56 56 56 56\n    # 56 57 57 57\n    # 57 57 57 57\n    # 57 58 58 58\n    # 58 58 58 58\n    # 58 59 59 59\n    # 59 59 59 59\n    # 59 60 60 60\n    # 60 60 60 60\n    # 60 61 61 61\n    # 61 61 61 61\n    # 61 62 62 62\n    # 62 62 62 62\n    # 62 63 63 63\n    # 63 63 63 63\n    # 63 64 64 64\n    # 64 64 64 64\n    # 64 65 65 65\n    # 65 65 65 65\n    # 65 66 66 66\n    # 66 66 66 66\n    # 66 67 67 67\n    # 67 67 67 67\n    # 67 68 68 68\n    # 68 68 68 68\n    # 68 69 69 69\n    # 69 69 69 69\n    # 69 70 70 70\n    # 70 70 70 70\n    # 70 71 71 71\n    # 71 71 71 71\n    # 71 72 72 72\n    # 72 72 72 72\n    # 72 73 73 73\n    # 73 73 73 73\n    # 73 74 74 74\n    # 74 74 74 74\n    # 74 75 75 75\n    # 75 75 75 75\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, *c, a = map(int, stdin.split())\n    min_burles = float('inf')\n    for i in range(n):\n        min_burles = min(min_burles, c[i] + a[i])\n    return min_burles\nprint(solution('6 4 3 2 1 1 1 1 2 2 3 3 3 2 3'))"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    rooms = stdin.strip().split()\n    costs = list(map(int, stdin.strip().split()))\n    n = len(rooms)\n    dp = [[-1] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = costs[i]\n    for i in range(n - 1, -1, -1):\n        for j in range(i + 1, n):\n            dp[i][j] = costs[i] + min(dp[i + 1][j], dp[i][j - 1])\n    return str(dp[0][n - 1])\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    c = list(map(int, lines[1].split()))\n    a = list(map(int, lines[2].split()))\n    # print(n, c, a)\n    return str(min(c))\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    dorm_size = int(stdin[0])\n    traps = list(map(int, stdin[1].split()))\n    students = list(map(int, stdin[2].split()))\n    students_dir = {}\n    students_index = {}\n    students_dir[0] = students\n    students_index[0] = 0\n    students_traps = {}\n    students_traps[0] = traps\n\n    queue = []\n    queue.append((0, 0))\n\n    while len(queue) > 0:\n        curr_student, curr_dir = queue.pop(0)\n        curr_traps = students_traps[curr_student]\n        if curr_traps == 0:\n            continue\n        if curr_dir == len(students) - 1:\n            return 'Impossible'\n        curr_student_index = students_index[curr_student]\n        for i in range(len(students)):\n            if students[i] == curr_student:\n                continue\n            if curr_traps == 0:\n                break\n            students_traps[curr_student] = students_traps[students[i]]\n            students_traps[students[i]] = students_traps[students[i]] - 1\n            if students_traps[students[i]] == 0:\n                students_traps.pop(students[i])\n            students_dir[students[i]] = curr_dir\n            students_index[students[i]] = curr_student_index + 1\n            if curr_student_index + 1 > len(students_dir[curr_student]) - 1:\n                students_dir[students[i]] = []\n                curr_student_index = 0\n            queue.append((students[i], curr_student_index + 1))\n        if len(queue) > 0:\n            curr_student_index = students_index[curr_student]\n            students_traps[curr_student] = students_traps[students[i]]\n            students_traps[students[i]] = students_traps[students[i]] - 1\n            if students_traps[students[i]] == 0:\n                students_traps.pop(students[i])\n            students_dir[students[i]] = curr_dir\n            students_index[students[i]] = curr_student_index + 1\n            if curr_student_index + 1 > len(students_dir[curr_student]) - 1:\n                students_dir[students[i]] = []\n                curr_student_index = 0\n\n    return 'Impossible'\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    return str(a if n >= b else b)\n\nThe second example is illustrated by the picture in the statements.\ndef"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = stdin.split()\n    n = int(n)\n    a = int(a)\n    b = int(b)\n    return \"NO\"\n    \n    \ndef"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\nThe first example will have \nn = 6\na = 2\nb = -5\n\nWhen a is 2 and b is -5, the walk goes as follows:\n\n1, 2, 3, 4, 5, 6\n\nAnd when a is 1 and b is -5, the walk goes as follows:\n\n2, 1, 4, 5, 3, 6\n\nWhen a is 1 and b is -3, the walk goes as follows:\n\n2, 1, 4, 6, 3, 5\n\nWhen a is 1 and b is -1, the walk goes as follows:\n\n2, 1, 5, 4, 3, 6\n\nWhen a is 1 and b is -2, the walk goes as follows:\n\n2, 1, 6, 5, 3, 4\n\nWhen a is 1 and b is -4, the walk goes as follows:\n\n2, 1, 6, 3, 4, 5\n\nAnd when a is 1 and b is -6, the walk goes as follows:\n\n2, 1, 5, 4, 3, 6\n\nWhen a is 1 and b is -7, the walk goes as follows:\n\n2, 1, 6, 3, 5, 4\n\nWhen a is 1 and b is -8, the walk goes as follows:\n\n2, 1, 6, 3, 5, 4, 6\n\nWhen a is 1 and b is -9, the walk goes as follows:\n\n2, 1, 6, 3, 5, 4, 6, 7\n\nWhen a is 1 and b is -10, the walk goes as follows:\n\n2, 1, 6, 3, 5, 4, 6, 7, 8\n\n\"\"\"\n\nfrom typing import *\n\nimport re\n\n\ndef"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    if a > b and b > 0:\n        return a\n    elif a == b:\n        return a\n    else:\n        return b\n\ndef"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    if n == a:\n        return '1'\n    elif n == b:\n        return '1'\n    else:\n        return str(n - min(abs(n - a), abs(n - b)) + 1)\n\ndef"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = list(map(int, stdin.split()))\n    if n == 1:\n        return str(a)\n    else:\n        if a == 1 and (b > 0 and b % 2 == 0):\n            return str(n)\n        elif a == n and (b > 0 and b % 2 == 0):\n            return str(n)\n        else:\n            return str(n)\n\nstdin = \"\"\"6 2 -5\n\n3 2 7\n\n5 1 3\n\n6 1 2\n\n3 2 7\n\n5 2 2\n\n5 1 3\"\"\""
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\nThe second example is illustrated by the output.\ndef"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n'''\n\n\ndef"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    arr = list(map(int, lines[1].split()))\n    ans = 0\n    if arr[0] == -1:\n        while arr[ans]!= -1:\n            ans += 1\n            if ans > n:\n                return 'NO'\n        return ans\n    else:\n        return 'NO'"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    a = list(map(int, stdin.strip().split()))\n    dp = {}\n    res = 0\n    for i in range(N):\n        if a[i] not in dp:\n            dp[a[i]] = 0\n        if a[i] > 0:\n            dp[a[i]] += 1\n        dp[a[i] - 1] = max(dp.get(a[i] - 1, 0), dp[a[i]])\n        if i >= 1 and a[i] > 0:\n            res = max(dp[a[i]] + 1, res)\n    return res\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    stdin_arr = stdin.split()\n    n = int(stdin_arr[0])\n    a = stdin_arr[1:]\n    min_len = 0\n    max_len = 0\n    result = 0\n    for i in range(n - 1):\n        if int(a[i]) - int(a[i + 1]) == 1:\n            min_len = i + 1\n            if max_len < min_len:\n                result = min_len\n                max_len = min_len\n        elif int(a[i]) - int(a[i + 1]) == -1:\n            max_len = i + 1\n            if max_len - min_len > result:\n                result = max_len - min_len\n\n    if result!= 0:\n        result = n - max_len + min_len + 1\n    return result\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split(' ')))\n    if len(a) == 1:\n        return '1'\n    n = len(a)\n    p = []\n    for i in range(n - 1):\n        p.append(a[i] + 1)\n    for i in range(1, n):\n        if p[i - 1]!= a[i]:\n            p.append(a[i])\n    return str(len(p))\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    stdin_arr = list(map(int, stdin.split()))\n\n    min_progressions = 2\n    current_n = 1\n    while current_n < len(stdin_arr):\n        if stdin_arr[current_n-1]!= -1:\n            if stdin_arr[current_n-1] - stdin_arr[current_n] == 1:\n                min_progressions += 1\n            else:\n                min_progressions = 2\n        else:\n            min_progressions = 2\n        current_n += 1\n    return str(min_progressions)\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    a: list = map(int, stdin.split())\n    a = list(filter(lambda x: x!= -1, a))\n    if len(a) < 2:\n        return '1'\n    dp = {}\n    for i in range(2, n + 1):\n        dp[i] = min(dp.get(i - 1, float('inf')), dp.get(i - 2, float('inf')) + (i - 1))\n        dp[i] = min(dp.get(i - 1, float('inf')), dp.get(i - 2, float('inf')) + (i - 1))\n    return str(dp.get(n))\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    if not a:\n        return str(1)\n    diffs = [a[i] - a[i - 1] for i in range(1, n)]\n    ans = 1\n    i = 0\n    while i < len(diffs) - 1:\n        ans += 1\n        if diffs[i]!= diffs[i + 1]:\n            i += 1\n    return str(ans)\n\n\nprint(solution(input()))"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n    a = list(filter(lambda x: x!= -1, a))\n    if len(a) < n:\n        print(len(a))\n        return\n    dp = [[[-1 for _ in range(n)] for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        for j in range(i, n):\n            if a[j] - a[i] == 0:\n                dp[i][j][0] = 1\n            else:\n                dp[i][j][0] = dp[i][j - 1][0] + dp[i][j - 1][1]\n    for i in range(1, n):\n        for j in range(i, n):\n            for k in range(i, j):\n                if a[j] - a[k] == 0:\n                    dp[i][j][1] = 1\n                else:\n                    dp[i][j][1] = max(dp[i][j][1], dp[i][k][1]) + dp[i][k][0]\n    print(max(max(i) for i in dp))\n    return"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = stdin.split()\n    arr = list(map(int, arr))\n    c = []\n    for i in range(n):\n        c.append(arr[i])\n    c = sorted(c)\n    m = 0\n    for i in range(1, n):\n        if c[i]!= c[i - 1] + 1:\n            m += 1\n    return str(m)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    n = len(a)\n    if n <= 2:\n        return str(1)\n    dp = [[0] * n for i in range(n)]\n    for i in range(1, n):\n        dp[i][i] = a[i]\n    for j in range(2, n):\n        for i in range(j - 1, j):\n            dp[i][j] = dp[i - 1][j - 1] - a[i]\n            for i in range(i + 1, j):\n                dp[i][j] = max(dp[i][j], dp[i][j - 1] - a[i])\n    return str(dp[0][n - 1])\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\n'''"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    s = stdin\n    max_beauty = 0\n    i = 0\n    while i < n - k:\n        j = 0\n        count = 1\n        while j < k:\n            if s[i + j] == s[i + j - 1]:\n                count += 1\n                if count > max_beauty:\n                    max_beauty = count\n            else:\n                break\n            j += 1\n        i += 1\n    return max_beauty"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    arr = list(stdin)\n    max_beauty = -1\n    for i in range(k):\n        temp_arr = list(arr)\n        for j in range(i, n):\n            if arr[j] == \"a\":\n                temp_arr[j] = \"b\"\n            elif arr[j] == \"b\":\n                temp_arr[j] = \"a\"\n        beauty = count_beauty(temp_arr)\n        if max_beauty < beauty:\n            max_beauty = beauty\n    return max_beauty\n\n\ndef"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    input_string = stdin.split()[1]\n    \n    dict_of_count = {}\n    for char in input_string:\n        if char in dict_of_count:\n            dict_of_count[char] += 1\n        else:\n            dict_of_count[char] = 1\n    \n    beauty_string = \"\"\n    beauty_count = 0\n    \n    max_beauty = 0\n    \n    for key in dict_of_count:\n        max_beauty = max(max_beauty, dict_of_count[key])\n    \n    for key in dict_of_count:\n        beauty_count += min(max_beauty, dict_of_count[key])\n        beauty_string += key * beauty_count\n    \n    return beauty_string\n\nprint(solution(input()))\n\n'''\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    string, k = stdin.split()\n    string = list(string)\n    k = int(k)\n    length = len(string)\n    i = 0\n    j = 1\n    max_beauty = 0\n    while j < length:\n        beauty = len(set(string[i:j]))\n        if beauty > max_beauty:\n            max_beauty = beauty\n        if beauty == max_beauty:\n            if set(string[i:j]) == set(string[i:j]):\n                if (j-i) <= k:\n                    max_beauty = max(max_beauty, beauty)\n        i = j\n        j += 1\n    return max_beauty\n\n\nprint(solution(input()))\n\n\n'''\n\ndef"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin[1]\n    s = list(s)\n    i, j = 0, 0\n    l = len(s)\n    ans = 0\n    while i < l:\n        if j < k:\n            s[i] = \"a\" if s[i] == \"b\" else \"b\"\n            ans = max(ans, len(s))\n        else:\n            ans = max(ans, len(s))\n            s[i] = \"a\" if s[i] == \"b\" else \"b\"\n            j += 1\n        i += 1\n    return ans\n\n\n\ndef"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # length = len(stdin)\n    # st = stdin[:length - 2]\n    # n = len(st)\n    #\n    # max_beauty = 0\n    # if n == 1:\n    #     return n\n    #\n    # for i in range(n):\n    #     for j in range(i, n):\n    #         sub_string = stdin[i:j + 1]\n    #         beauty = sum(1 for i in range(n) if st[i] == sub_string[i])\n    #         if beauty > max_beauty:\n    #             max_beauty = beauty\n    #\n    # return max_beauty\n\n    #\n    # length = len(stdin)\n    # st = stdin[:length - 1]\n    # n = len(st)\n    #\n    # max_beauty = 0\n    # if n == 1:\n    #     return n\n    #\n    # for i in range(n):\n    #     for j in range(i, n):\n    #         sub_string = st[i:j + 1]\n    #         beauty = sum(1 for i in range(n) if st[i] == sub_string[i])\n    #         if beauty > max_beauty:\n    #             max_beauty = beauty\n    #\n    # return max_beauty\n\n    # length = len(stdin)\n    # st = stdin[:length - 1]\n    # n = len(st)\n    #\n    # max_beauty = 0\n    # if n == 1:\n    #     return n\n    #\n    # for i in range(n):\n    #     for j in range(i, n):\n    #         sub_string = st[i:j + 1]\n    #         beauty = sum(1 for i in range(n) if st[i] == sub_string[i])\n    #         if beauty > max_beauty:\n    #             max_beauty = beauty\n    #\n    # return max_beauty\n\n    # length = len(stdin)\n    # st = stdin[:length - 1]\n    # n = len(st)\n    #\n    # max_beauty = 0\n    # if n == 1:\n    #     return n\n    #\n    # for i in range(n):\n    #     for j in range(i, n):\n    #         sub_string = st[i:j + 1]\n    #         beauty = sum(1 for i in range(n) if st[i] == sub_string[i])\n    #         if beauty > max_beauty:\n    #             max_beauty = beauty\n    #\n    # return max_beauty\n\n    # length = len(stdin)\n    # st = stdin[:length - 1]\n    # n = len(st)\n    #\n    # max_beauty = 0\n    # if n == 1:\n    #     return n\n    #\n    # for i in range(n):\n    #     for j in range(i, n):\n    #         sub_string = st[i:j + 1]\n    #         beauty = sum(1 for i in range(n) if st[i] == sub_string[i])\n    #         if beauty > max_beauty:\n    #             max_beauty = beauty\n    #\n    # return max_beauty\n\n    # length = len(stdin)\n    # st = stdin[:length - 1]\n    # n = len(st)\n    #\n    # max_beauty = 0\n    # if n == 1:\n    #     return n\n    #\n    # for i in range(n):\n    #     for j in range(i, n):\n    #         sub_string = st[i:j + 1]\n    #         beauty = sum(1 for i in range(n) if st[i] == sub_string[i])\n    #         if beauty > max_beauty:\n    #             max_beauty = beauty\n    #\n    # return max_beauty\n\n    # length = len(stdin)\n    # st = stdin[:length - 1]\n    # n = len(st)\n    #\n    # max_beauty = 0\n    # if n == 1:\n    #     return n\n    #\n    # for i in range(n):\n    #     for j in range(i, n):\n    #         sub_string = st[i:j + 1]\n    #         beauty = sum(1 for i in range(n) if st[i] == sub_string[i])\n    #         if beauty > max_beauty:\n    #             max_beauty = beauty\n    #\n    # return max_beauty\n\n    # length = len(stdin)\n    # st = stdin[:length - 1]\n    # n = len(st)\n    #\n    # max_beauty = 0\n    # if n == 1:\n    #     return n\n    #\n    # for i in range(n):\n    #     for j in range(i, n):\n    #         sub_string = st[i:j + 1]\n    #         beauty = sum(1 for i in range(n) if st[i] == sub_string[i])\n    #         if beauty > max_beauty:\n    #             max_beauty = beauty\n    #\n    # return max_beauty\n\n    # length = len(stdin)\n    # st = stdin[:length - 1]\n    # n = len(st)\n    #\n    # max_beauty = 0\n    # if n == 1:\n    #     return n\n    #\n    # for i in range(n):\n    #     for j in range(i, n):\n    #         sub_string = st[i:j + 1]\n    #         beauty = sum(1 for i in range(n) if st[i] == sub_string[i])\n    #         if beauty > max_beauty:\n    #             max_beauty = beauty\n    #\n    # return max_beauty\n\n    # length = len(stdin)\n    # st = stdin[:length - 1]\n    # n = len(st)\n    #\n    # max_beauty = 0\n    # if n == 1:\n    #     return n\n    #\n    # for i in range(n):\n    #     for j in range(i, n):\n    #         sub_string = st[i:j + 1]\n    #         beauty = sum(1 for i in range(n) if st[i] == sub_string[i])\n    #         if beauty > max_beauty:\n    #             max_beauty = beauty\n    #\n    # return max_beauty\n\n    # length = len(stdin)\n    # st = stdin[:length - 1]\n    # n = len(st)\n    #\n    # max_beauty = 0\n    # if n == 1:\n    #     return n\n    #\n    # for i in range(n):\n    #     for j in range(i, n):\n    #         sub_string = st[i:j + 1]\n    #         beauty = sum(1 for i in range(n) if st[i] == sub_string[i])\n    #         if beauty"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n, k = map(int, stdin[0].split())\n    str1 = stdin[1]\n    print(n,k,str1)\n    s = list(str1)\n    print(s)\n    m = 0\n    k = k\n    while k > 0:\n        if s[m]!= s[m+1]:\n            k -= 1\n        if s[m] == s[m+1]:\n            m += 1\n        if k == 0:\n            k = k\n        else:\n            k -= 1\n        if m == len(s)-1:\n            m = 0\n    print(m)\n    return m\n\nprint(solution(stdin))"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    For every string, longest subsequence with same letters in string.\n    \"\"\"\n    n, k = (int(i) for i in stdin.split())\n    return max(len(s) for s in itertools.product(\"ab\", repeat=k) if s.count(\"a\") == n and s.count(\"b\") == n)"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, seats = [int(i) for i in stdin.split()]\n\n    if seats >= n * (100 / n):\n        return '0'\n\n    ans = ''\n    total = 0\n    for i in range(1, n + 1):\n        total += seats[i - 1]\n    for i in range(1, n + 1):\n        if seats[i - 1] < 100 / n:\n            ans += str(i) + \" \"\n    if total >= 100 / n:\n        return '1' + ans\n    else:\n        return '0'\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    seats = list(map(int, stdin.split()))\n    seats.sort()\n    seats.reverse()\n    \n    if (seats[0] == seats[1]) or seats[0] + seats[1] > seats[2]:\n        return 0\n    else:\n        s1 = 0\n        s2 = 0\n        for i in range(len(seats)):\n            if seats[i] == seats[i + 1]:\n                s2 += 1\n            elif seats[i] + seats[i + 1] > seats[i + 2]:\n                s1 = seats[i]\n                s2 = seats[i + 1] - seats[i]\n                break\n        return str(s1) + \" \" + str(s2)\n    \n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    s = 0\n    p = []\n    for i in range(1,n+1):\n        if(s<a[i-1]):\n            p.append(i)\n            s = a[i-1]\n    if(s==a[0]):\n        return str(0)\n    return''.join(map(str, p))"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1].split()))\n    s = sum(a)\n    k = 1\n    candidates = set()\n    while s > 0:\n        if s >= a[k] * 2:\n            candidates.add(k)\n            s -= a[k] * 2\n        else:\n            k += 1\n    candidates.remove(0)\n    candidates = sorted(candidates)\n    if len(candidates) == 0:\n        return str(0)\n    return''.join(map(str, candidates))\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return '0'\n    a = list(map(int, stdin.split()))\n    return str(a[0]) +'' +''.join(map(str, sorted(a[1:])))\n\ndef"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a_1, a_2, a_3, a_4 = a\n    if a_1 < a_2:\n        print(0)\n        return\n    majority = sum(a) // n\n    if a_1 >= a_2 and a_2 >= a_3:\n        print(1)\n        print(1)\n        return\n    if a_1 >= a_3 and a_3 >= a_4:\n        print(1)\n        print(2)\n        return\n    if a_1 >= a_2 and a_2 >= a_3 and a_3 >= a_4:\n        print(2)\n        print(3)\n        return\n    if a_1 >= a_3 and a_3 >= a_4:\n        print(2)\n        print(4)\n        return\n    if a_2 >= a_3 and a_3 >= a_4:\n        print(3)\n        print(4)\n        return\n    if a_1 >= a_4:\n        print(3)\n        print(4)\n        return\n    print(4)\n    print(4)\n    return\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    k = 2 * n\n    n_a = n_a_ = 0\n    for i in range(1, n+1):\n        if sum(a[0:i]) >= k // 2:\n            n_a += 1\n            n_a_ = i\n    if n_a == 0:\n        return '0'\n    ans = [str(n_a_)]\n    k_ = k\n    if k_ % 2 == 1:\n        return''.join(ans)\n    while k > 1:\n        ans.append(str(k))\n        k_ //= 2\n        if k_ % 2 == 1:\n            ans.append(str(k_))\n            break\n    return''.join(ans)\n\ndef"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    stdin\n    \"\"\"\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1].split()))\n    count = 0\n    m = int(sum(a) / n)\n    while True:\n        a1 = a.count(1)\n        if a1 >= m:\n            count += 1\n            a.remove(1)\n            a.remove(1)\n        else:\n            break\n    if count == 0:\n        return '0'\n    else:\n        return str(count) +'' + str(a.index(1) + 1)\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    seats = sorted(map(int, stdin.split()))\n    m = seats[-1]\n    l = seats[:2]\n    l.sort()\n    #print(l)\n    if l == seats:\n        return 0\n    k = max(seats)\n    l = [k]\n    #print(l)\n    while k:\n        if k in seats:\n            l.append(k)\n            seats.remove(k)\n        k = k - 1\n    if l == seats:\n        return 0\n    print(*l, sep=' ')\n    return ''"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''Your code will be run against an input.\"\"\"\n    # print(stdin)\n    return '1.000000000000'\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 0:\n        raise ValueError\n    if n == 1:\n        return '1.000000000000'\n    return str(float(round(n / 2)) + round(float(n / 1), 10))\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    c = n - 1\n    t = 0\n    a = 1.5\n    while c > 0:\n        c -= 1\n        t += (a - 0.5) / c\n        a = a - 0.5\n    return '{0:.4f}'.format(t)\n    # return str(round(t, 4))\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    return f'{(1.5 + 1.5*(n-1)/n):.2f}'\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = 1\n    while n > 0:\n        x += 1\n        n = n - x\n    return str(x)\n\nprint(solution(input()))\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    contestants, n = list(map(int, stdin.strip().split()))\n    total = 0\n    for i in range(n):\n        total += contestants[i] / (i + 1)\n    return f\"{total:.10f}\"\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin.strip())\n    return f\"{(2 * n) / (n - 1)}\""
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    The number of participants is the input.\n    Each of the contestants has to make a mistake.\n    Return the maximum possible reward he could have.\n    '''\n    pass"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2:\n        return '1'\n    if n <= 2:\n        return '2'\n    if n <= 3:\n        return '3'\n    if n <= 5:\n        return '5'\n    if n <= 7:\n        return '7'\n    if n <= 10:\n        return '10'\n    if n <= 13:\n        return '13'\n    if n <= 17:\n        return '17'\n    if n <= 21:\n        return '21'\n    if n <= 25:\n        return '25'\n    if n <= 29:\n        return '29'\n    if n <= 33:\n        return '33'\n    if n <= 37:\n        return '37'\n    if n <= 41:\n        return '41'\n    if n <= 45:\n        return '45'\n    if n <= 49:\n        return '49'\n    if n <= 53:\n        return '53'\n    if n <= 57:\n        return '57'\n    if n <= 61:\n        return '61'\n    if n <= 65:\n        return '65'\n    if n <= 69:\n        return '69'\n    if n <= 73:\n        return '73'\n    if n <= 77:\n        return '77'\n    if n <= 81:\n        return '81'\n    if n <= 85:\n        return '85'\n    if n <= 89:\n        return '89'\n    if n <= 93:\n        return '93'\n    if n <= 97:\n        return '97'\n    if n <= 101:\n        return '101'\n    if n <= 105:\n        return '105'\n    if n <= 109:\n        return '109'\n    if n <= 113:\n        return '113'\n    if n <= 117:\n        return '117'\n    if n <= 121:\n        return '121'\n    if n <= 125:\n        return '125'\n    if n <= 129:\n        return '129'\n    if n <= 133:\n        return '133'\n    if n <= 137:\n        return '137'\n    if n <= 141:\n        return '141'\n    if n <= 145:\n        return '145'\n    if n <= 149:\n        return '149'\n    if n <= 153:\n        return '153'\n    if n <= 157:\n        return '157'\n    if n <= 161:\n        return '161'\n    if n <= 165:\n        return '165'\n    if n <= 169:\n        return '169'\n    if n <= 173:\n        return '173'\n    if n <= 177:\n        return '177'\n    if n <= 181:\n        return '181'\n    if n <= 185:\n        return '185'\n    if n <= 189:\n        return '189'\n    if n <= 193:\n        return '193'\n    if n <= 197:\n        return '197'\n    if n <= 199:\n        return '199'\n    if n <= 201:\n        return '201'\n    if n <= 205:\n        return '205'\n    if n <= 209:\n        return '209'\n    if n <= 213:\n        return '213'\n    if n <= 217:\n        return '217'\n    if n <= 221:\n        return '221'\n    if n <= 225:\n        return '225'\n    if n <= 229:\n        return '229'\n    if n <= 233:\n        return '233'\n    if n <= 237:\n        return '237'\n    if n <= 241:\n        return '241'\n    if n <= 245:\n        return '245'\n    if n <= 249:\n        return '249'\n    if n <= 253:\n        return '253'\n    if n <= 257:\n        return '257'\n    if n <= 261:\n        return '261'\n    if n <= 265:\n        return '265'\n    if n <= 269:\n        return '269'\n    if n <= 273:\n        return '273'\n    if n <= 277:\n        return '277'\n    if n <= 281:\n        return '281'\n    if n <= 285:\n        return '285'\n    if n <= 289:\n        return '289'\n    if n <= 293:\n        return '293'\n    if n <= 297:\n        return '297'\n    if n <= 301:\n        return '301'\n    if n <= 305:\n        return '305'\n    if n <= 309:\n        return '309'\n    if n <= 313:\n        return '313'\n    if n <= 317:\n        return '317'\n    if n <= 321:\n        return '321'\n    if n <= 325:\n        return '325'\n    if n <= 329:\n        return '329'\n    if n <= 333:\n        return '333'\n    if n <= 337:\n        return '337'\n    if n <= 341:\n        return '341'\n    if n <= 345:\n        return '345'\n    if n <= 349:\n        return '349'\n    if n <= 353:\n        return '353'\n    if n <= 357:\n        return '357'\n    if n <= 361:\n        return '361'\n    if n <= 365:\n        return '365'\n    if n <= 369:\n        return '369'\n    if n <= 373:\n        return '373'\n    if n <= 377:\n        return '377'\n    if n <= 381:\n        return '381'\n    if n <= 385:\n        return '385'\n    if n <= 389:\n        return '389'\n    if n <= 393:\n        return '393'\n    if n <= 397:\n        return '397'\n    if n <= 401:\n        return '401'\n    if n <= 405:\n        return '405'\n    if n <= 409:\n        return '409'\n    if n <= 413:\n        return '413'\n    if n <= 417:\n        return '417'\n    if n <= 421:\n        return '421'\n    if n <= 425:\n        return '425'\n    if n <= 429:\n        return '429'\n    if n <= 433:\n        return '433'\n    if n <= 437:\n        return '437'\n    if n <= 441:\n        return '441'\n    if n <= 445:\n        return '445'\n    if n <= 449:\n        return '449'\n    if n <= 454:\n        return '454'\n    if n <= 457:\n        return '457'\n    if n <= 461:\n        return '461'\n    if n <= 465:\n        return '465'\n    if n <= 469:\n        return '469'\n    if n <= 473:\n        return '473'\n    if n <= 477:\n        return '477'\n    if n <= 481:\n        return '481'\n    if n <= 485:\n        return '485'\n    if n <= 489:\n        return '489'\n    if n <= 493:\n        return '493'\n    if n <= 495:\n        return '495'\n    if n <= 499:\n        return '499'\n    if n <= 503:\n        return '503'\n    if n <= 507:\n        return '507'\n    if n <= 511:\n        return '511'\n    if n <= 515:\n        return '515'\n    if n <= 519:\n        return '519'\n    if n <= 523:\n        return '523'\n    if n <= 527:\n        return '527'\n    if n <= 531:\n        return '531'\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    max = 0\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if i!= j:\n                sum = i + j\n                if max < sum:\n                    max = sum\n\n    return str(max) +'' +''.join(map(str, list(set(range(1, n + 1)) - set(list(range(1, n + 1)) + list(range(2, n + 1))))))\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"1\"\n    m = int(math.ceil(n / 3))\n    a = \"1\"\n    for i in range(1, m):\n        a = \" \".join(map(str, a))\n        a += \" \" + str(i + 1)\n    a += str(m)\n    return a\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    n = int(stdin)\n    return '{}\\n{}'.format(solution_naive(n), solution_recursive(n))\n\n\ndef"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    candies = 1\n    for i in range(1, n):\n        candies += 1\n    print(candies)\n    return\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    def prime_generator(n):\n        primitive_primes = [True] * n\n        i = 2\n        while i ** 2 <= n:\n            if primitive_primes[i]:\n                for j in range(i * i, n, i):\n                    primitive_primes[j] = False\n            i += 1\n        for i in range(2, n):\n            if primitive_primes[i]:\n                yield i\n    def get_all_possible_combinations(k):\n        combinations = {1}\n        n = 1\n        for i in range(1, k):\n            n *= i\n            combinations.update(combinations.copy())\n        return combinations\n    candies = list(prime_generator(n))\n    while len(candies) < n:\n        candies.extend(list(prime_generator(n)))\n    k = 1\n    while k <= n:\n        possible_combinations = get_all_possible_combinations(k)\n        if len(possible_combinations) < n:\n            return str(k)\n        possible_combinations = possible_combinations & set(candies)\n        if len(possible_combinations) < n:\n            return str(k)\n        k += 1\n    return str(k)\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    result: int = 0\n    candies: List[int] = []\n\n    if n == 1:\n        return str(1)\n    if n == 2:\n        return str(2)\n\n    for i in range(2, n):\n        candies.append(i)\n\n    # print(candies)\n\n    while len(candies) > 1:\n        # print(candies)\n        # print(len(candies))\n\n        # min_candies = min(candies)\n        for i in range(len(candies)):\n            candies.remove(min(candies))\n            candies.append(candies[i] + min(candies))\n            candies.append(candies[i] - min(candies))\n        # print(candies)\n\n        if len(candies) % 2 == 1:\n            result += 1\n        else:\n            result += 2\n    # print(candies)\n    # print(result)\n    return str(result)\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.rstrip())\n    candies = [1]\n    k = 0\n    while candies[k] < n:\n        k += 1\n        candies.append(candies[k-1] + 1)\n    for i in range(k, n):\n        candies[i] = 1\n    candies = candies[:n]\n    print(k)\n    print(' '.join(map(str, candies)))\n    return stdin\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    K = 3\n\n    # Generate all the combinations of 3 k with 3 candies for each kid\n    # E.g. [3, 4, 5] means 2 candies for kid 1 and 2 candies for kid 2\n    # E.g. [3, 4, 5, 6] means 3 candies for kid 1 and 1 candies for kid 3\n    # E.g. [3, 4, 5, 6, 7] means 4 candies for kid 1 and 1 candies for kid 4\n    # E.g. [3, 4, 5, 6, 7, 8] means 5 candies for kid 1 and 1 candies for kid 6\n    def generate_combinations(n, k, candies):\n        combinations = []\n        for i in range(0, n + 1):\n            combinations.append([])\n        for i in range(1, n + 1):\n            for j in range(1, n + 1):\n                if i == j:\n                    combinations[i].append(0)\n                else:\n                    combinations[i].append(combinations[i - 1][j - 1] + candies[i - 1])\n        return combinations\n\n    # Generate all the combinations of k with k candies for each kid\n    # E.g. if k is 3, then we need to generate 3 3-combinations\n    # E.g. if k is 4, then we need to generate 4 4-combinations\n    # E.g. if k is 5, then we need to generate 5 5-combinations\n    # E.g. if k is 6, then we need to generate 6 6-combinations\n    # E.g. if k is 7, then we need to generate 7 7-combinations\n    def generate_k_candies(n, k):\n        if n == 1:\n            return [[0, 0, 0]]\n        combinations = generate_combinations(n, k, list(range(1, n + 1)))\n        combinations = combinations[-1]\n        combinations = [[0] + combination for combination in combinations]\n        return combinations\n\n    # Find the largest possible number of candies for kid 1\n    # E.g. if k is 3, then we need to find the 3 numbers such that each of them has least candidate for kid 1\n    # E.g. if k is 4, then we need to find the 4 numbers such that each of them has least candidate for kid 1\n    # E.g. if k is 5, then we need to find the 5 numbers such that each of them has least candidate for kid 1\n    # E.g. if k is 6, then we need to find the 6 numbers such that each of them has least candidate for kid 1\n    # E.g. if k is 7, then we need to find the 7 numbers such that each of them has least candidate for kid 1\n    def find_number(n, k, numbers):\n        for i in range(k):\n            if i == 0:\n                max_number = numbers[i]\n            else:\n                if max_number <= numbers[i]:\n                    max_number = numbers[i]\n        return max_number\n\n    # Generate all the possible numbers for kid 1\n    # E.g. if k is 3, then we need to generate 3 3-combinations\n    # E.g. if k is 4, then we need to generate 4 4-combinations\n    # E.g. if k is 5, then we need to generate 5 5-combinations\n    # E.g. if k is 6, then we need to generate 6 6-combinations\n    # E.g. if k is 7, then we need to generate 7 7-combinations\n    def generate_numbers(n, k):\n        candies = generate_k_candies(n, k)\n        numbers = []\n        for combination in candies:\n            number = find_number(n, k, combination)\n            numbers.append(number)\n        return numbers\n\n    # Find the maximum number of candies for kid 1\n    # E.g. if k is 3, then we need to find the 3 numbers such that each of them has least candidate for kid 1\n    # E.g. if k is 4, then we need to find the 4 numbers such that each of them has least candidate for kid 1\n    # E.g. if k is 5, then we need to find the 5 numbers such that each of them has least candidate for kid 1\n    # E.g. if k is 6, then we need to find the 6 numbers such that each of them has least candidate for kid 1\n    # E.g. if k is 7, then we need to find the 7 numbers such that each of them has least candidate for kid 1\n    def find_maximum_number(n, k):\n        if k == 1:\n            return n\n        numbers = generate_numbers(n, k)\n        maximum_number = 0\n        for number in numbers:\n            if number > maximum_number:\n                maximum_number = number\n        return maximum_number\n\n    return str(find_maximum_number(N, K))\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    candies = list(range(n, 0, -1))\n    output = []\n    while candies:\n        for i in range(0, len(candies)):\n            output.append(str(candies[i]))\n            candies.pop(i)\n            break\n        if not candies:\n            break\n    return \" \".join(output)\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    res = 1\n    for i in range(num):\n        res = res * 2 % (2 ** i)\n    return res"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(pow(2, n, 2**n) % 2**n)\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = 1\n    for _ in range(n):\n        x = (x * 2) % MOD\n    return str(x)\ndef"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, m = stdin.split()\n    n = int(n)\n    m = int(m)\n    print(m % (2**n))\n    return None\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    return str(m ** n % m)\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\nfrom math import floor"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    m = int(input())\n    def f(m):\n        if m == 0:\n            return 0\n        if m == 1:\n            return 1\n        if m == 2:\n            return 3\n        c = 2 ** n\n        x = 2 ** (n - 1)\n        x = (x + 1)\n        q, r = divmod(m, x)\n        print(q, r)\n        if r!= 0:\n            return f(q)\n        else:\n            return f(q)\n    return f(m)\n\nprint(solution(input()))"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(mul_2**n % m)\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Parse input and return result.\n\n    >>> solution('''42\n   ... 4\n   ... ''')\n    '10'\n    >>> solution('''1\n   ... 58\n   ... ''')\n    '0'\n    \"\"\"\n\n    n, m = (int(i) for i in stdin.split())\n\n    while m:\n        m, n = n % m, m\n    return str(n)\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split()\n    n = int(input[0])\n    m = int(input[1])\n    return(2**n % m)\nprint(solution(input))\n\ndef"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s: str = stdin\n    vowels: Set[str] = set('aeiouy')\n\n    if len(s) < 2:\n        return s\n\n    i: int = 0\n    while i < len(s) - 1:\n        if s[i] in vowels and s[i + 1] in vowels:\n            s = s[:i] + s[i + 2:]\n            i = 0\n        i += 1\n\n    return s\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    c = 0\n    for i in stdin:\n        if i in 'aeiouy':\n            c += 1\n            if c == 2:\n                stdin = stdin.replace(i, 'e')\n            else:\n                stdin = stdin.replace(i, i * (c - 1))\n        else:\n            stdin = stdin.replace(i, 'a')\n    return stdin\n\nprint(solution(input()))"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    vowels = 'aeiouy'\n    replace_list = []\n    for index, letter in enumerate(s):\n        if letter in vowels:\n            if index!= n - 1 and s[index + 1] in vowels:\n                replace_list.append(letter)\n    for letter in replace_list:\n        s = s.replace(letter, letter.upper(), 1)\n    return s\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    d = {'a': 'e', 'e': 'a', 'i': 'i', 'o': 'o', 'u': 'u', 'y': 'y'}\n    word = stdin.split()[1]\n    i = 0\n    while i < len(word):\n        if word[i] in d:\n            if i < len(word)-1 and word[i+1] in d:\n                word = word[:i] + word[i+1:]\n                i -= 1\n        i += 1\n    return ''.join(word)\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    list_of_letters = list(stdin)\n    length_of_input = len(list_of_letters)\n    for i in range(length_of_input):\n        if list_of_letters[i] == \"a\" or list_of_letters[i] == \"e\" or list_of_letters[i] == \"i\" or list_of_letters[i] == \"o\" or list_of_letters[i] == \"u\":\n            if list_of_letters[i] == \"a\" or list_of_letters[i] == \"e\" or list_of_letters[i] == \"i\" or list_of_letters[i] == \"o\" or list_of_letters[i] == \"u\":\n                if list_of_letters[i] == \"a\" or list_of_letters[i] == \"e\" or list_of_letters[i] == \"i\" or list_of_letters[i] == \"o\" or list_of_letters[i] == \"u\":\n                    if list_of_letters[i] == \"a\":\n                        list_of_letters[i] = \"e\"\n                    if list_of_letters[i] == \"e\":\n                        list_of_letters[i] = \"i\"\n                    if list_of_letters[i] == \"i\":\n                        list_of_letters[i] = \"o\"\n                    if list_of_letters[i] == \"o\":\n                        list_of_letters[i] = \"u\"\n                    if list_of_letters[i] == \"u\":\n                        list_of_letters[i] = \"a\"\n\n    return \"\".join(list_of_letters)\n\nsolution(input())\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # ======Solution_1=========\n    # vowels = [\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"]\n    # num_vowels = 0\n    # for letter in stdin:\n    #     if letter in vowels:\n    #         num_vowels += 1\n    #\n    # if num_vowels == 1:\n    #     for i in range(0, len(stdin)):\n    #         if stdin[i] in vowels:\n    #             for vowel in vowels:\n    #                 if stdin[i] == vowel:\n    #                     stdin = stdin.replace(stdin[i], \"\")\n    #                     stdin = stdin + vowel\n    #                     break\n    #\n    # if num_vowels == 0:\n    #     for i in range(0, len(stdin)):\n    #         if stdin[i] in vowels:\n    #             stdin = stdin.replace(stdin[i], \"\")\n    #             stdin = stdin + stdin[i]\n    #             break\n    #\n    # if num_vowels == 2:\n    #     for i in range(0, len(stdin)):\n    #         if stdin[i] in vowels:\n    #             for vowel in vowels:\n    #                 if stdin[i] == vowel:\n    #                     stdin = stdin.replace(stdin[i], \"\")\n    #                     stdin = stdin + vowel\n    #                     break\n    #     for i in range(len(stdin) - 1, 0, -1):\n    #         if stdin[i] in vowels:\n    #             for vowel in vowels:\n    #                 if stdin[i] == vowel:\n    #                     stdin = stdin.replace(stdin[i], \"\")\n    #                     stdin = stdin + vowel\n    #                     break\n    #\n    #\n    #\n    # return stdin\n    # ======Solution_1-END==========\n\n    # ======Solution_2=========\n    # vowels = [\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"]\n    # num_vowels = 0\n    # for letter in stdin:\n    #     if letter in vowels:\n    #         num_vowels += 1\n    #\n    # if num_vowels == 1:\n    #     for i in range(0, len(stdin)):\n    #         if stdin[i] in vowels:\n    #             stdin = stdin.replace(stdin[i], \"\")\n    #             stdin = stdin + stdin[i]\n    #             break\n    #\n    # if num_vowels == 2:\n    #     for i in range(0, len(stdin)):\n    #         if stdin[i] in vowels:\n    #             stdin = stdin.replace(stdin[i], \"\")\n    #             stdin = stdin + stdin[i]\n    #             break\n    #     for i in range(len(stdin) - 1, 0, -1):\n    #         if stdin[i] in vowels:\n    #             stdin = stdin.replace(stdin[i], \"\")\n    #             stdin = stdin + stdin[i]\n    #             break\n    #\n    # return stdin\n    # ======Solution_2-END==========\n\n    # ======Solution_3=========\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"]\n    num_vowels = 0\n    for letter in stdin:\n        if letter in vowels:\n            num_vowels += 1\n\n    if num_vowels == 1:\n        for i in range(0, len(stdin)):\n            if stdin[i] in vowels:\n                stdin = stdin.replace(stdin[i], \"\")\n                stdin = stdin + stdin[i]\n                break\n\n    if num_vowels == 2:\n        for i in range(0, len(stdin)):\n            if stdin[i] in vowels:\n                stdin = stdin.replace(stdin[i], \"\")\n                stdin = stdin + stdin[i]\n                break\n        for i in range(len(stdin) - 1, 0, -1):\n            if stdin[i] in vowels:\n                stdin = stdin.replace(stdin[i], \"\")\n                stdin = stdin + stdin[i]\n                break\n\n    return stdin\n    # ======Solution_3-END==========\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    l = len(stdin)\n    if l == 1:\n        return stdin\n    new_word = ''\n    last_vowel_index = 0\n    for i in range(l):\n        if stdin[i] not in 'aeiouy':\n            new_word += stdin[i]\n            continue\n        if stdin[i] == 'e':\n            if stdin[i+1] == 'a':\n                last_vowel_index = i\n                new_word += 'e'\n        elif stdin[i] == 'i':\n            if stdin[i+1] == 'o':\n                last_vowel_index = i\n                new_word += 'i'\n        elif stdin[i] == 'o':\n            if stdin[i+1] == 'u':\n                last_vowel_index = i\n                new_word += 'o'\n        elif stdin[i] == 'u':\n            if stdin[i+1] == 'a':\n                last_vowel_index = i\n                new_word += 'u'\n        elif stdin[i] == 'y':\n            if stdin[i+1] == 'a':\n                last_vowel_index = i\n                new_word += 'i'\n    if last_vowel_index == 0:\n        new_word += 'a'\n    elif last_vowel_index == 1:\n        new_word += 'e'\n    return new_word\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    word = stdin.rstrip()\n    count = 0\n    for i in range(len(word)-1):\n        if word[i] in ('a', 'e', 'i', 'o', 'u', 'y'):\n            count += 1\n        if count == 2:\n            word = word[:i] + word[i+1]\n            count = 0\n    return word\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def seat_structure(seat_str):\n        return seat_str.count(\"*\")\n    return max(seat_structure(seat_str) for seat_str in stdin.split() if seat_str)\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    N, A, B = map(int, stdin.split())\n    seat_count = N\n    while seat_count >= A and seat_count >= B:\n        seat_count -= max(A,B)\n        seat_count += max(A,B)\n    return str(seat_count)\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Complete the solution so that it returns an integer, which is the largest possible number of seats in the railway carriage (e.g., 11)\n    # which can be occupied by no student-athlete (thus, being seat empty) and no student-programmer (thus, being seat empty)\n    # the problem description also specifies that the problem should be solved as efficiently as possible.\n\n    seats = []\n    occupied = []\n\n    for i in stdin:\n        if i == \"*\":\n            occupied.append(i)\n            seats.append(\"*\")\n        elif i == \".\":\n            occupied.append(i)\n            seats.append(\"*\")\n        else:\n            occupied.append(i)\n            seats.append(\".\")\n    occupied.sort()\n    seats.sort()\n\n    answer = 0\n    for i in range(len(seats)):\n        if seats[i] == \"*\":\n            if seats[i+1]!= \"*\":\n                answer += 1\n    for i in range(len(occupied)):\n        if occupied[i] == \"*\":\n            if occupied[i + 1]!= \"*\":\n                answer += 1\n    return str(answer)\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = [int(x) for x in stdin.split()]\n    students = \".\" * n\n    seats = \"*\" * n\n    m = 1\n    while seats not in students and seats not in students and seats not in seats and seats not in seats:\n        seats = seats[:m] + \"*\" + seats[m+1:]\n        m += 1\n    return str(a+b - 2*m)\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    pass"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    ranges = []\n    for _ in range(n):\n        ranges.append(stdin[:stdin.find(\"*\")])\n    ranges.sort()\n    max_students = -1\n    empty_places = []\n    occupied_places = []\n    for index in range(len(ranges)):\n        if ranges[index] == \"*\":\n            empty_places.append(index)\n        else:\n            occupied_places.append(index)\n    max_students = 0\n    for i in range(len(empty_places)):\n        for j in range(i+1, len(empty_places)):\n            if (j-i) > max_students:\n                max_students = j-i\n    return str(max_students)\n\nsolution(stdin)\n\n'''"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A, B, N = int(stdin.split()[0]), int(stdin.split()[1]), int(stdin.split()[2])\n    c = 0\n    a = []\n    for i in range(N):\n        x = stdin[i]\n        if x == \"*\":\n            a.append(c)\n        c += 1\n    a.sort(reverse=True)\n    print(a)\n    return str(len(a))\n\nsolution(input())\n'''"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    students = [1]*a + [2]*b\n    programmers = [1]*a + [2]*b\n    athletes = [1]*a + [2]*b\n    places = list(stdin)\n    \n    max_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if students[i] == students[j] or programmers[i] == programmers[j] or athletes[i] == athletes[j]:\n                    continue\n                if (students[i], students[j]) in ((\"*\", \"*\"), (\"*\", \"B\"), (\"B\", \"*\")):\n                    continue\n                if (programmers[i], programmers[j]) in ((\"*\", \"*\"), (\"*\", \"B\"), (\"B\", \"*\")):\n                    continue\n                if (athletes[i], athletes[j]) in ((\"*\", \"*\"), (\"*\", \"B\"), (\"B\", \"*\")):\n                    continue\n                if (students[i], programmers[j]) == (2, 2) or (students[j], programmers[i]) == (2, 2) or (athletes[i], athletes[j]) == (2, 2):\n                    continue\n                if (students[i], programmers[j]) == (1, 1) or (programmers[i], athletes[j]) == (1, 1) or (athletes[i], students[j]) == (1, 1):\n                    continue\n                if places[i] == \"*\" and places[j] == \"*\" and places[k] == \"*\":\n                    continue\n                if (students[i], programmers[j]) in ((\"*\", \"*\"), (\"*\", \"B\"), (\"B\", \"*\")) and (students[j], programmers[i]) in ((\"*\", \"*\"), (\"*\", \"B\"), (\"B\", \"*\")) and (students[k], programmers[j]) in ((\"*\", \"*\"), (\"*\", \"B\"), (\"B\", \"*\")):\n                    continue\n                if (students[i], programmers[j]) == (\"*\", \"*\") and (students[j], programmers[i]) == (\"*\", \"*\") and (students[k], programmers[j]) == (\"*\", \"*\"):\n                    continue\n                if (students[i], athletes[j]) == (\"*\", \"*\") and (students[j], athletes[i]) == (\"*\", \"*\") and (students[k], athletes[j]) == (\"*\", \"*\"):\n                    continue\n                if (programmers[i], athletes[j]) == (\"*\", \"*\") and (programmers[j], athletes[i]) == (\"*\", \"*\") and (programmers[k], athletes[j]) == (\"*\", \"*\"):\n                    continue\n                if (programmers[i], students[j]) == (\"*\", \"*\") and (programmers[j], students[i]) == (\"*\", \"*\") and (programmers[k], students[j]) == (\"*\", \"*\"):\n                    continue\n                if (athletes[i], students[j]) == (\"*\", \"*\") and (athletes[j], students[i]) == (\"*\", \"*\") and (athletes[k], students[j]) == (\"*\", \"*\"):\n                    continue\n                if (students[i], programmers[j]) == (1, 1) and (students[j], programmers[i]) == (1, 1) and (students[k], programmers[j]) == (1, 1):\n                    continue\n                if (students[i], athletes[j]) == (1, 1) and (students[j], athletes[i]) == (1, 1) and (students[k], athletes[j]) == (1, 1):\n                    continue\n                if (programmers[i], athletes[j]) == (1, 1) and (programmers[j], athletes[i]) == (1, 1) and (programmers[k], athletes[j]) == (1, 1):\n                    continue\n                if (programmers[i], students[j]) == (1, 1) and (programmers[j], students[i]) == (1, 1) and (programmers[k], students[j]) == (1, 1):\n                    continue\n                if (athletes[i], students[j]) == (1, 1) and (athletes[j], students[i]) == (1, 1) and (athletes[k], students[j]) == (1, 1):\n                    continue\n                if (students[i], athletes[j]) == (1, 1) and (students[j], athletes[i]) == (1, 1) and (students[k], athletes[j]) == (1, 1):\n                    continue\n                if (programmers[i], athletes[j]) == (1, 1) and (programmers[j], athletes[i]) == (1, 1) and (programmers[k], athletes[j]) == (1, 1):\n                    continue\n                if (programmers[i], students[j]) == (1, 1) and (programmers[j], students[i]) == (1, 1) and (programmers[k], students[j]) == (1, 1):\n                    continue\n                if (athletes[i], students[j]) == (1, 1) and (athletes[j], students[i]) == (1, 1) and (athletes[k], students[j]) == (1, 1):\n                    continue\n                if (students[i], programmers[j]) == (1, 1) and (students[j], programmers[i]) == (1, 1) and (students[k], programmers[j]) == (1, 1):\n                    continue\n                if (programmers[i], students[j]) == (1, 1) and (programmers[j], students[i]) == (1, 1) and (programmers[k], students[j]) == (1, 1):\n                    continue\n                if (athletes[i], students[j]) == (1, 1) and (athletes[j], students[i]) == (1, 1) and (athletes[k], students[j]) == (1, 1):\n                    continue\n                if (students[i], athletes[j]) == (1, 1) and (students"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, a, b = map(int, stdin.split())\n    \n    # print(n, a, b)\n    \n    \n    seats = []\n    \n    for i in range(n):\n        seats.append(stdin[i])\n    \n    # print(seats)\n    \n    \n    # tickets = []\n    \n    # for i in range(len(seats)):\n    #     if seats[i] == '*':\n    #         tickets.append(i)\n    \n    # print(tickets)\n    \n    \n    # for i in range(len(tickets)):\n    #     if i + 1 not in tickets:\n    #         tickets.append(i + 1)\n    \n    # print(tickets)\n    \n    # if len(tickets)!= a + b:\n    #     return '0'\n    \n    \n    # for i in range(len(tickets)):\n    #     if i not in tickets:\n    #         tickets.append(i)\n    \n    # print(tickets)\n    \n    # if len(tickets) < a:\n    #     return '0'\n    \n    # tickets.sort()\n    \n    # print(tickets)\n    \n    \n    \n    # return str(max(a, b))\n    \n    \n    def pos(seats, a, b):\n        x = a - 1\n        y = b - 1\n        # print(x, y)\n        while x >= 0 and y >= 0:\n            if seats[x] == '*':\n                # print('x', x)\n                return x\n            if seats[y] == '*':\n                # print('y', y)\n                return y\n            x -= 1\n            y -= 1\n        return 0\n    \n    \n    x = pos(seats, a, b)\n    # print(x)\n    \n    if x == 0:\n        return str(a + b)\n    \n    y = pos(seats, a, b)\n    # print(y)\n    \n    if y == 0:\n        return str(a + b)\n    \n    return str(abs(x - y) + 1)\n\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return max(\n        [\n            len(\n                str(\n                    len(\n                        [\n                            seat\n                            for seat in range(n)\n                            if stdin[seat] == \"*\"\n                        ]\n                    )\n                )\n            )\n            for n in range(1, 10 ** 5 + 1)\n        ]\n    )\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    r_sq = r*r\n    possible_mults = []\n    for x in range(1,r+1):\n        for y in range(1,r+1):\n            mult = x**2+2*x*y+x+1\n            if mult == r_sq:\n                possible_mults.append((x,y))\n    if possible_mults:\n        possible_mults.sort(key=lambda x:x[0])\n        return f\"{possible_mults[0][0]} {possible_mults[0][1]}\"\n    return \"NO\"\n\n\ndef"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    n = 2**14\n    for i in range(n):\n        if i*i+2*i+1 == r:\n            return str(i) +'' + str(i)\n    return 'NO'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    x,y=0,0\n    for _ in range(2):\n        x,y=map(int,stdin.split())\n    '''\n    r=int(stdin)\n    def h(x,y):\n        return x**2+2*x*y+x+1\n    lo,hi=1,10**12\n    while lo<hi:\n        mid=(lo+hi)//2\n        if h(mid,r)==r:\n            return f'{mid} {mid}'\n        elif h(mid,r)>r:\n            hi=mid\n        else:\n            lo=mid+1\n    return \"NO\"\nsolution(\"1\")\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    for x in range(1, r+1):\n        for y in range(1, r+1):\n            if x**2+2*x*y+x+1 == r:\n                return f'{x} {y}'"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    for i in range(1, (1<<20)+1):\n        for j in range(1, (1<<20)+1):\n            if i*i+2*i*j+i+1 == r:\n                return str(i) +'' + str(j)\n    return \"NO\"\n\n\nprint(solution(input()))"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(1, 10**12):\n        k = n ** 2 + 2 * n * i + n + 1\n        if k == n:\n            return str(i) + \" \" + str(n - i)\n    return \"NO\"\n\nstdin = \"\"\"16\n\"\"\"\nprint(solution(stdin))\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    for x in range(1, 101):\n        for y in range(1, 101):\n            h = x**2 + 2*x*y + x + 1\n            if h == r:\n                return str(x) + \" \" + str(y)\n\n    return \"NO\"\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    for i in range(1, 10):\n        for j in range(i, 10):\n            if num == pow(i, 2) + pow(2, i) * j + i + 1:\n                return str(i) +'' + str(j)\n\n    return \"NO\"\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    x, y = map(int, stdin.split())\n    if x*x + 2*x*y + x + 1 == y*y + 2*y*x + x + 1:\n        return str(x) + \" \" + str(y)\n    else:\n        return \"NO\""
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(n):\n        for j in range(i+1, n):\n            if 2**i+2**j+i+1 == n:\n                return str(i) +'' + str(j)\n    return 'NO'\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time: O(n*a)\n    Space: O(n*a)\n    \"\"\"\n    n = int(stdin.strip())\n    a = sorted(list(map(int, stdin.split())))\n\n    def dfs(idx: int, a: List[int], m: int, n: int):\n        if idx >= n:\n            return m == n\n        if a[idx] == m:\n            return dfs(idx + 1, a, m + 1, n)\n        else:\n            return dfs(idx + 1, a, m, n) or dfs(idx + 1, a, m, n - a[idx])\n\n    return 'YES' if dfs(0, a, 0, n) else 'NO'\n\n\ndef"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    if sum(a) == 0:\n        return '-1'\n    elif len(a) == 1:\n        return f'{a[0]} {a[0]}'\n    a.sort()\n    total = sum(a)\n    tally = 0\n    for i in range(n):\n        tally += a[i]\n        if tally == total:\n            return f'{a[i]} {a[n-i]}'\n    return '-1'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    if a[0]!= a[1]:\n        return -1\n    if a[1] < a[0] or n % a[0]!= 0:\n        return -1\n    if a[0] % n!= 0:\n        return -1\n    s = 0\n    ans = set()\n    for i in range(1, n):\n        if (i % a[0]) < (a[1] % a[0]):\n            s += 1\n        else:\n            ans.add(i)\n    print(s)\n    return str(sorted(list(ans)))"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1]))\n    if (n % 2 == 0 and sum(a)!= n) or (n % 2!= 0 and sum(a)!= sum(a)):\n        return -1\n    g = len(a)\n    if n == 2:\n        return '{} {}'.format(g - 1, g)\n    else:\n        grig, andre = 0, 0\n        for i in range(g):\n            if a[i] > g:\n                grig += a[i] - g\n            else:\n                andre += g - a[i]\n        if grig > andre:\n            return '{} {}'.format(g - 1, g)\n        elif andre > grig:\n            return '{} {}'.format(g, g - 1)\n        else:\n            return '{} {}'.format(g - 1, g)\n\n\n\nsolution('1')\n\n\n'''\nfrom itertools import combinations\n\n\ndef"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin)\n  arr = list(map(int, stdin.split()))\n  print(solution_2(n, arr))\n\ndef"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    packets = [int(i) for i in stdin.split()]\n    if not packets:\n        return '-1'\n    if len(packets) < n:\n        return '-1'\n    a = []\n    for p in packets:\n        if not a or p + a[-1] > n:\n            return '-1'\n        a.append(p)\n    a.sort()\n    if a[0] + a[-1]!= n:\n        return '-1'\n    return '{} {}'.format(len(a),''.join([str(i) for i in a]))"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    A = list(map(int, stdin.split()))\n    if sum(A) % 3!= 0:\n        return '-1'\n    t = A.index(max(A))\n    A.pop(t)\n    if sum(A) % 3!= 0:\n        return '-1'\n    t = A.index(max(A))\n    A.pop(t)\n    if sum(A) % 3!= 0:\n        return '-1'\n    return f\"{t + 1} {max(A)}\"\n'''"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ans = -1\n    for i in range(1, n + 1):\n        ball = sum(map(int, stdin.split())) - i\n        if ball % n!= 0:\n            return \"NO\"\n    return str(n)\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''1\n    2\n    2\n    1''')\n    '2'\n    >>> solution('''5\n    5\n    5\n    5\n    5''')\n    '-1'\n    >>> solution('''3\n    1\n    2\n    2''')\n    '2'\n    \"\"\"\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    print(\"0\", end=\"\")\n    if n == 1:\n        print(n)\n    else:\n        if a[0] >= 1:\n            print(1, end=\"\")\n            print(*a[1:])\n            return\n        elif a[0] >= n - 1:\n            print(n - 1)\n            print(*a[1:])\n            return\n        else:\n            print(-1)\n            return\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = list(map(int, stdin.split()))\n    if sum(a) % 2:\n        return -1\n    return f\"{n//2} {sorted(set(range(1, n+1)) - set(a))}\"\n\ndef"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    k = 1\n    while (k * k < n):\n        k = k + 1\n    if (k * k == n):\n        k = k + 1\n    digit = [i for i in range(1, k + 1)]\n    def is_prime(num):\n        if num % 2 == 0:\n            return False\n        for i in range(3, int(num ** 0.5) + 1, 2):\n            if num % i == 0:\n                return False\n        return True\n    def dfs(num, k):\n        if k == 0:\n            if is_prime(num):\n                return digit\n            else:\n                return []\n        result = []\n        for i in digit:\n            if is_prime(num - i):\n                result += [i]\n            result += dfs(num - i, k - 1)\n        return result\n    return str(len(dfs(n, k)))\n\nprint(solution(sys.stdin.read()))"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def unique_digits(n):\n        s = str(n)\n        nums = set(s)\n        return len(s) == len(nums)\n\n    def partitions(n):\n        d = deque()\n        d.append([n])\n        p = []\n        while d:\n            x = d.pop()\n            if len(x) == 1:\n                if unique_digits(x[0]):\n                    p.append(x)\n            else:\n                for i in range(len(x)):\n                    t = x[:]\n                    t.pop(i)\n                    d.append(t)\n        return p\n\n    p = partitions(int(stdin))\n    k = len(max(p, key=len))\n    return k\n\n\nprint(solution(input()))"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    m = 1\n    while m <= n:\n        n -= m\n        m += 1\n    if n!= 0:\n        return 0\n    else:\n        return m"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n = int(stdin)\n    if n == 1:\n        return 1\n    a = 1\n    for i in range(2, n):\n        d = n // i\n        if d <= 9:\n            a += d\n    return a\n\ndef"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    digit = []\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if (i*j)==n:\n                digit.append(i)\n    print(len(digit))\n    print(\" \".join(map(str,digit)))\n\nsolution(input())\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    import math\n    n = int(stdin)\n    max_length = int(math.log10(n)) + 1\n    results = []\n    for i in range(1, n + 1):\n        digits = []\n        for j in range(1, max_length + 1):\n            if i % j == 0:\n                digits.append(j)\n        if len(digits) == max_length:\n            results.append(digits)\n\n    parts = results[0]\n    for i in range(1, len(results)):\n        parts = set(parts) & set(results[i])\n    parts = list(parts)\n    parts.sort()\n    print(len(parts))\n    for p in parts:\n        print(p, end=' ')\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for k in range(1,n+1):\n        s = 0\n        for i in range(1,k+1):\n            s += 1 if n % 10 == i else 0\n        if s == k:\n            return k,str(n//k)"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return 1\n    elif n < 10:\n        return 1\n    else:\n        res = 2\n        while n:\n            n //= 10\n            res += 1\n        return res\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Processes the input, calculates and returns the answer.\n    \"\"\"\n    # return sum(i for i in range(1, int(stdin) + 1) if ''.join(map(str, range(1, i + 1))) == stdin)\n    # return str(len(max(set(int(i) for i in map(str, range(1, int(stdin) + 1))), key=lambda x: str(x).count('1'))))\n    return str(len(min(str(n) for n in range(1, int(stdin) + 1)) + '1'))\n    "
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    d = [0] * 10\n    for i in range(1, n + 1):\n        d = [min(i, j) for i, j in zip(d, str(i))]\n    return str(len(set(d)))\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_list = list(map(int, stdin.split()))\n    n = input_list[0]\n    input_list = input_list[1:]\n    a = input_list[:n]\n    a.sort(key=lambda x: x)\n    def is_prime(n):\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        for i in range(3, int(n ** 0.5) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n    primes = []\n    for i in range(2, 10 ** 6):\n        if is_prime(i):\n            primes.append(i)\n    max_size = 1\n    s_subset = []\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] + a[j] in primes:\n                if len(s_subset) < max_size:\n                    s_subset = list(range(i, j + 1))\n                elif len(s_subset) > max_size:\n                    s_subset = s_subset[:-1]\n                    break\n    return str(max_size) +'' +''.join(map(str, s_subset))\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # +++ Your Solution goes here +++\n    n = int(stdin.split()[0])\n    numbers = stdin.split()[1:]\n    primes = []\n    for number in numbers:\n        number = int(number)\n        if isPrime(number):\n            primes.append(number)\n    primes.sort()\n    best_sum = 0\n    best_pairs = []\n    for i, number in enumerate(primes):\n        for j in range(i + 1, len(primes)):\n            if (number + primes[j]) in primes:\n                best_pairs.append((number, primes[j]))\n                if best_sum < 2:\n                    best_sum = 2\n                else:\n                    best_sum += 2\n    return str(best_sum) + '\\n' +''.join(map(str, best_pairs))\n\n\ndef"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_ = stdin.split()\n    n = int(input_[0])\n    a = input_[1]\n\n    primes = []\n\n    for i in range(2, n + 1):\n        is_prime = True\n\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n\n        if is_prime:\n            primes.append(i)\n\n    res = 0\n    res_primes = []\n\n    for prime in primes:\n        for num in a:\n            if prime == int(num):\n                res += 1\n\n        res_primes.append(res)\n        res = 0\n\n    max_ = max(res_primes)\n\n    for i in range(len(res_primes)):\n        if res_primes[i] == max_:\n            print(res_primes[i], end=\" \")\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    l = len(arr)\n\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def binary_search(low: int, high: int) -> int:\n        mid = (low + high) // 2\n        if is_prime(mid):\n            return mid\n        if is_prime(mid + 1):\n            return binary_search(low, mid)\n        if is_prime(mid - 1):\n            return binary_search(mid, high)\n        else:\n            return mid\n\n    max_prime_subset = 0\n    max_prime_subset_num = -1\n    for i in range(l):\n        for j in range(i + 1, l):\n            if arr[i] + arr[j] == l:\n                prime_subset = binary_search(0, l - 1)\n                if max_prime_subset < prime_subset:\n                    max_prime_subset = prime_subset\n                    max_prime_subset_num = i, j\n    if max_prime_subset == 0:\n        print(max_prime_subset)\n        print(*max_prime_subset_num)\n    else:\n        print(max_prime_subset)\n        print(*arr[max_prime_subset_num[0]:max_prime_subset_num[1] + 1])\n\n\nsolution(input())\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def prime(n: int) -> bool:\n        if n == 2:\n            return True\n        if n % 2 == 0 or n == 1:\n            return False\n        else:\n            for i in range(3, int(n**0.5)+1, 2):\n                if n % i == 0:\n                    return False\n        return True\n    n = int(stdin.split(\" \")[0])\n    a = list(map(int, stdin.split(\" \")[1].split()))\n    if n == 1:\n        return \"1\"\n    for i in range(n):\n        if prime(a[i]):\n            if i == n-1:\n                return str(a[i])\n            else:\n                return str(a[i]) + \" \" + str(a[i+1])\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    max_size = 1\n    for i in range(n):\n        count = 0\n        for j in range(i + 1, n):\n            if is_prime(a[i] + a[j]):\n                count += 1\n        if count > max_size:\n            max_size = count\n            max_prime = a[i] + a[j]\n    print(max_size, max_prime)\n    for i in range(n):\n        if is_prime(a[i]):\n            a[i] = None\n    a.sort()\n    return str(max_size) +'' +''.join([str(i) for i in a if i!= None])\n\n\ndef"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    max_size = 0\n    subset = []\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n            if all(a[i] % x!= 0 for x in range(2, a[i] + 1)) and all(a[j] % x!= 0 for x in range(2, a[j] + 1)):\n                subset = list(set(a))\n                subset.remove(a[i])\n                subset.remove(a[j])\n                max_size = max(max_size, len(subset))\n    subset.sort()\n    print(max_size)\n    print(' '.join(map(str, subset)))\n    return\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    m = 1\n    for i in range(n):\n        for j in range(i + 1, n):\n            if isPrime(j):\n                if len(a) < m + 1:\n                    m += 1\n                    a_tup = (a[i], a[j])\n                else:\n                    if a[i] + a[j] > a_tup[0] + a_tup[1]:\n                        a_tup = (a[i], a[j])\n    if a_tup == (a[i], a[j]):\n        return f'{a_tup[0]} {a_tup[1]}'\n    else:\n        return f'{a_tup[0]} {a_tup[1]} {a_tup[0]}'\n\n\ndef"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    n = int(input())\n    a = list(map(int, stdin.split()))\n    res = 0\n    for i in range(1,n+1):\n        cnt = 1\n        for j in range(i):\n            if a[j] < i:\n                cnt += 1\n        if res < cnt:\n            res = cnt\n    for i in range(1,n):\n        if a[i] < a[i-1]:\n            res += 1\n    return str(res)"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    # a = [int(i) for i in input().split()]\n    # print(a)\n    len_a = len(a)\n    size = 2\n    while size < len_a:\n        tmp = []\n        i = 1\n        while i * i <= size:\n            cnt = 0\n            for j in range(len_a):\n                if i * j <= size:\n                    if a[j] % i == 0:\n                        cnt += 1\n            if cnt == len_a:\n                tmp.append(i)\n            i += 1\n        if len(tmp) > 0:\n            size = tmp[-1] + 1\n        else:\n            size = max(a) + 1\n    print(size)\n    result = []\n    i = 1\n    while i * i <= size:\n        cnt = 0\n        for j in range(len_a):\n            if i * j <= size:\n                if a[j] % i == 0:\n                    cnt += 1\n        if cnt == len_a:\n            result.append(i)\n        i += 1\n    # print(tmp, i, j)\n    print(*result, sep=' ')\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    def is_beautiful(n):\n        while n > 0:\n            if n % 10!= 1:\n                return False\n            n = n // 10\n        return True\n    for i in range(1, n+1):\n        if is_beautiful(i) and is_beautiful(2**i - 1):\n            return i\n    return -1"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def fact(n):\n        if n == 0:\n            return 1\n        return fact(n - 1) * n\n    def is_beautiful_number(n):\n        binary = bin(n)\n        return binary[2:] == binary[2:].rstrip('0') + '1'\n    divisor = 1\n    while not is_beautiful_number(divisor):\n        divisor += 1\n    return str(fact(divisor - 1) + 1)\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    counter = 0\n    num = n\n    while n > 0:\n        n = n // 2\n        counter += 1\n        if n > 0:\n            num = n\n        else:\n            break\n    return str(counter) + '_' + str(num)\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    max_div = 0\n    while n > 0:\n        div = (2 ** n - 1) * (2 ** n - 1)\n        if n >= max_div and div > n:\n            max_div = div\n        n -= 1\n    return str(max_div)\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    t = 2\n    while t < n:\n        if n % t == 0:\n            return t\n        t += 1\n    return n\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    i = 1\n    while (n % 2 == 0):\n        n /= 2\n        i += 1\n    return str(i)"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    while not is_beautiful(n):\n        n = n // 2\n    return str(n)\n\ndef"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(max([int(x) for x in stdin.split('_')]))\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    while n % 2 == 0:\n        n /= 2\n    return str(n)"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return(stdin)\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    a = int(stdin.split()[1])\n    b = int(stdin.split()[2])\n    count = 0\n    for i in range(a,b+1):\n        d = str(i)\n        if is_magic(i, d):\n            count += 1\n    return str(count%1000000007)\n\ndef"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    m, d, a, b = int(stdin.split()[0]), int(stdin.split()[1]), int(stdin.split()[2]), int(stdin.split()[3])\n    s = a\n    while s < b:\n        if s % d == 0:\n            print(s, end=\" \")\n        s += m\n    return"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    ans = 0\n    for i in range(a, b+1):\n        ans += is_d_magic(i, a, b)\n    return str(ans)\n\n\ndef"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    m, d = map(int, stdin.split())\n    def is_d_magic(i):\n        n = str(i)\n        while n:\n            if n[0]!= '0':\n                return False\n            n = n[1:]\n        return True\n\n    def d_magic(n):\n        return (int(n) * d) % m\n    \n    a, b = map(int, stdin.split())\n    cnt = 0\n    for i in range(a, b + 1):\n        if is_d_magic(i):\n            cnt += 1\n            continue\n        if is_d_magic(d_magic(i)):\n            cnt += 1\n    return cnt"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2 6\n   ... 10\n   ... 99\n   ... ''')\n    '8'\n    >>> solution('''2 0\n   ... 1\n   ... 9\n   ... ''')\n    '4'\n    >>> solution('''19 7\n   ... 1000\n   ... 9999\n   ... ''')\n    '6'\n    \"\"\"\n    from math import floor\n    m, d, a, b = map(int, stdin.split())\n    res = 0\n    a = floor(a / d)\n    b = floor(b / d)\n    while a > 0:\n        if a % m == 0:\n            res += 1\n        a = a // d\n    return res % 1000000007\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Sample Input 1\n    2 6\n    10\n    99\n\n    Sample Output 1\n    8\n    '''\n    m, d, a, b = map(int, stdin.split())\n    mul_of_m = 1\n    while mul_of_m <= m:\n        count = 0\n        div = divisor(mul_of_m)\n        for i in range(a, b + 1):\n            if mul_of_m % div == 0:\n                count += 1\n        if count == d:\n            print(mul_of_m)\n        mul_of_m += 1\n\n\ndef"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    m, d, a, b = map(int, stdin.split())\n    #a = 89747\n    #b = 9747\n    #a = 16963\n    #b = 9761\n\n    a_sum = 0\n    #find the sum of first n digits\n    for i in range(a, 100000000):\n        if i % m == d:\n            a_sum += i\n    print(a_sum)\n    mod = pow(10, 9) + 7\n    #mod = 998244353\n    #mod = 2147483647\n    #print(a_sum % mod)\n    #print(a_sum // mod)\n    print(a_sum % mod)\n    print((a_sum // mod) % mod)\n    #print(pow(10, 9) % 2147483647)\n    #print((pow(10, 9) // 2147483647) % 2147483647)\n    #print(2147483647 % 2147483647)\n    #print(857 % 2147483647)\n\nsolution(sys.stdin.read())"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    (m, d, a, b) = map(int, stdin.split())\n    n = 0\n    if (m % 2) == 1:\n        n += 1\n    for d in range(1, d):\n        if (a * d) % 10 == 1:\n            n += 1\n        if (b * d) % 10 == 1:\n            n += 1\n    return n % 10**9 + 7\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    m, d, a, b = map(int, stdin.split())\n    a = int(str(a))\n    b = int(str(b))\n    ans = 0\n    for i in range(a, b + 1):\n        if i % m == 0:\n            if d in str(i):\n                ans += 1\n    return str(ans % (10**9 + 7))\nsolution(input())\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    m, d = map(int, stdin.split())\n    res = 0\n    for i in range(int(2e9 + 7)):\n        if i % d == 0:\n            res += 1\n    return str(res)\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    inputs = stdin[0].split()\n    n, m = int(inputs[0]), int(inputs[1])\n    children = list(map(int, stdin[1].split()))\n    ans = 0\n    while m > 0:\n        children.sort()\n        if children[0]!= 1:\n            children[0] -= 1\n            m -= 1\n        else:\n            children.pop(0)\n            m -= 1\n    \n    return str(children.index(1) + 1)"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    sequence = list(map(int, stdin.split()))\n    sum1 = sum2 = 0\n\n    for i in range(m):\n        if i % 2 == 0:\n            sum1 += sequence[i]\n        else:\n            sum2 += sequence[i]\n\n    for i in range(1, n):\n        if sum1 <= sum2:\n            sequence[i] += sum1\n            sum1 += sum1\n        else:\n            sequence[i] += sum2\n            sum2 += sum2\n\n    return sequence.index(max(sequence))\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def f():\n        n, m = map(int, input().split())\n        a = list(map(int, input().split()))\n        if not a:\n            return\n        a.sort()\n        res = 0\n        while a:\n            res += a.pop(0)\n            if not a:\n                return res\n            a.sort()\n\n    return str(f())\n\n\nprint(solution(stdin))\n\"\"\"\n\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    children, total_children = map(int, stdin.split())\n    children = list(range(1, total_children + 1))\n    candies = list(map(int, stdin.split()))\n    current_index = 0\n    #print(candies)\n    while len(candies) > 0:\n        if candies[0] >= children[current_index]:\n            current_index += 1\n        else:\n            candies.pop(0)\n            children.pop(0)\n    return str(children[-1])\n    #return str(children[-1])"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    children = list(map(int, stdin.split()))\n    queue = []\n    for i in range(n):\n        children[i] -= 1\n    if not children:\n        return '0'\n    for i in range(min(children)):\n        queue.append(i)\n    while queue:\n        for i in range(len(queue)):\n            index = queue[i]\n            if children[index] == 0:\n                children[index] = m\n                queue.append(index + 1)\n            else:\n                children[index] -= 1\n    return str(queue[-1])\n\nsolution(input())\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(find_last_child(int(stdin.split()[0]), [int(i) for i in stdin.split()[1].split()]))\ndef"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    children = list(map(int, stdin.split()))\n    children.sort()\n\n    result = 0\n    result_index = 0\n    while True:\n        child_index = children.index(result_index)\n        if child_index == len(children):\n            break\n        result += m\n        result_index = children[child_index]\n    return str(result_index)\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 5 2\n   ... 1 3 1 4 2\n   ... ''')\n    '4'\n    \"\"\"\n    n, m = list(map(int, stdin.split()))\n    children = list(map(int, stdin.split()))\n    children.sort()\n    print(children)\n    cnt = 0\n    for i in range(1, n):\n        if children[i] >= children[i-1]:\n            cnt += 1\n    print(cnt)\n    return str(cnt)\n\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    children, candies = map(int, stdin.split())\n    i = 1\n    lines = list()\n    while i <= children:\n        lines.append(i)\n        i += 1\n    \n    while len(lines)!= 0:\n        lines = distribute(lines, candies)\n    \n    return lines[-1]\n\ndef"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    l = list(map(int, stdin.split()))\n    res = []\n    while len(l) > 0:\n        min_ = min(l)\n        res.append(min_)\n        l.remove(min_)\n        l.sort(reverse=True)\n    return''.join(map(str, res))\nprint(solution(input()))"
    },
    {
        "number": 449,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Solution\n    # https://app.codesignal.com/arcade/intro/level-6/k2k3VwY8QM3XyWVU\n    n = int(stdin)\n    return str(n - 1) + \" \" + str(n // 20) + \" \" + str(n // 10) + \" \" + str(n // 5) + \" \" + str(n // 1)\n\n\ndef"
    },
    {
        "number": 449,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(round(float(stdin))))\n"
    },
    {
        "number": 449,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return stdin"
    },
    {
        "number": 449,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(min(n//100, n//20, n//5, n//1))\n\ndef"
    },
    {
        "number": 449,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your code should return a string consisting of the minimum number of bills\n    Allen could receive after withdrawing his entire balance.\n    \"\"\"\n    # numbers = list(map(int, stdin.split()))\n    numbers = list(map(int, stdin.split()))\n\n    if numbers[0] == 0:\n        print(numbers[0])\n\n    else:\n        numbers[1] = max(numbers[1], numbers[0])\n        numbers[0] = max(numbers[0], 0)\n        numbers.append(numbers[0])\n        numbers = sorted(numbers)\n\n        print(numbers)\n"
    },
    {
        "number": 449,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return sum(1 for x in range(int(stdin)) if x % 5 == 0 and x % 2 == 0)\n"
    },
    {
        "number": 449,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    k = 0\n    while n > 100:\n        n -= 100\n        k += 1\n    if n == 0:\n        return str(k)\n    return str(k + 1)"
    },
    {
        "number": 449,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return(1)\n"
    },
    {
        "number": 449,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 449,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    bills = list(map(int, input().split()))\n    bills_count = 0\n    while bills:\n        if bills_count == len(bills):\n            bills_count = 0\n        if bills_count == 0:\n            if bills[0] == 100:\n                bills_count += 2\n                bills.pop(0)\n            elif bills[0] == 50:\n                bills_count += 1\n                bills.pop(0)\n            elif bills[0] == 20:\n                bills_count += 1\n                bills.pop(0)\n            elif bills[0] == 10:\n                bills_count += 1\n                bills.pop(0)\n            elif bills[0] == 5:\n                bills_count += 1\n                bills.pop(0)\n        else:\n            if bills_count == 1:\n                if bills[0] == 100:\n                    bills_count += 2\n                    bills.pop(0)\n                elif bills[0] == 50:\n                    bills_count += 1\n                    bills.pop(0)\n                elif bills[0] == 20:\n                    bills_count += 1\n                    bills.pop(0)\n                elif bills[0] == 10:\n                    bills_count += 1\n                    bills.pop(0)\n                elif bills[0] == 5:\n                    bills_count += 1\n                    bills.pop(0)\n            elif bills_count == 2:\n                if bills[0] == 100:\n                    bills_count += 2\n                    bills.pop(0)\n                elif bills[0] == 50:\n                    bills_count += 1\n                    bills.pop(0)\n                elif bills[0] == 20:\n                    bills_count += 1\n                    bills.pop(0)\n                elif bills[0] == 10:\n                    bills_count += 1\n                    bills.pop(0)\n                elif bills[0] == 5:\n                    bills_count += 1\n                    bills.pop(0)\n            elif bills_count == 3:\n                if bills[0] == 100:\n                    bills_count += 2\n                    bills.pop(0)\n                elif bills[0] == 50:\n                    bills_count += 1\n                    bills.pop(0)\n                elif bills[0] == 20:\n                    bills_count += 1\n                    bills.pop(0)\n                elif bills[0] == 10:\n                    bills_count += 1\n                    bills.pop(0)\n                elif bills[0] == 5:\n                    bills_count += 1\n                    bills.pop(0)\n            elif bills_count == 4:\n                if bills[0] == 100:\n                    bills_count += 2\n                    bills.pop(0)\n                elif bills[0] == 50:\n                    bills_count += 1\n                    bills.pop(0)\n                elif bills[0] == 20:\n                    bills_count += 1\n                    bills.pop(0)\n                elif bills[0] == 10:\n                    bills_count += 1\n                    bills.pop(0)\n                elif bills[0] == 5:\n                    bills_count += 1\n                    bills.pop(0)\n            elif bills_count == 5:\n                if bills[0] == 100:\n                    bills_count += 2\n                    bills.pop(0)\n                elif bills[0] == 50:\n                    bills_count += 1\n                    bills.pop(0)\n                elif bills[0] == 20:\n                    bills_count += 1\n                    bills.pop(0)\n                elif bills[0] == 10:\n                    bills_count += 1\n                    bills.pop(0)\n                elif bills[0] == 5:\n                    bills_count += 1\n                    bills.pop(0)\n            elif bills_count == 6:\n                if bills[0] == 100:\n                    bills_count += 2\n                    bills.pop(0)\n                elif bills[0] == 50:\n                    bills_count += 1\n                    bills.pop(0)\n                elif bills[0] == 20:\n                    bills_count += 1\n                    bills.pop(0)\n                elif bills[0] == 10:\n                    bills_count += 1\n                    bills.pop(0)\n                elif bills[0] == 5:\n                    bills_count += 1\n                    bills.pop(0)\n                elif bills[0] == 1:\n                    bills_count += 1\n                    bills.pop(0)\n            elif bills_count == 7:\n                if bills[0] == 100:\n                    bills_count += 2\n                    bills.pop(0)\n                elif bills[0] == 50:\n                    bills_count += 1\n                    bills.pop(0)\n                elif bills[0] == 20:\n                    bills_count += 1\n                    bills.pop(0)\n                elif bills[0] == 10:\n                    bills_count += 1\n                    bills.pop(0)\n                elif bills[0] == 5:\n                    bills_count += 1\n                    bills.pop(0)\n                elif bills[0] == 1:\n                    bills_count += 1\n                    bills.pop(0)\n            elif bills_count == 8:\n                if bills[0] == 100:\n                    bills_count += 2\n                    bills.pop(0)\n                elif bills[0] == 50:\n                    bills_count += 1\n                    bills.pop(0)\n                elif bills[0] == 20:\n                    bills_count += 1\n                    bills.pop(0)\n                elif bills[0] == 10:\n                    bills_count += 1\n                    bills.pop(0)\n                elif bills[0] == 5:\n                    bills_count += 1\n                    bills.pop(0)\n                elif bills[0] == 1:\n                    bills_count += 1\n                    bills.pop(0)\n            elif bills_count == 9:\n                if bills[0] == 100:\n                    bills_count += 2\n                    bills.pop(0)\n                elif bills[0] == 50:\n                    bills_count += 1\n                    bills.pop(0)\n                elif bills[0] == 20:\n                    bills_count += 1\n                    bills.pop(0)\n                elif bills[0] == 10:\n                    bills_count += 1\n                    bills.pop(0)\n                elif bills[0] == 5:\n                    bills_count += 1\n                    bills.pop(0)\n                elif bills[0] == 1:\n                    bills_count += 1\n                    bills.pop(0)\n            elif bills_count == 10:\n                if bills[0] == 100:\n                    bills_count += 2\n                    bills.pop(0)\n                elif bills[0] == 50:\n                    bills_count += 1\n                    bills.pop(0)\n                elif bills[0] == 20:\n                    bills_count += 1\n                    bills.pop(0)\n                elif bills[0] == 10:\n                    bills_count += 1"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    _, k = list(map(int, stdin.split()))\n    return str(permutations_with_good_positions(k))\n\n\ndef"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('1 0\\n')\n    '1'\n    >>> solution('2 1\\n')\n    '0'\n    >>> solution('3 2\\n')\n    '4'\n    >>> solution('4 1\\n')\n    '6'\n    >>> solution('7 4\\n')\n    '328'\n    '''\n    n, k = map(int, stdin.split())\n    return str(good_permutation(n, k))\n\n\ndef"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    good_pos = []\n    good_pos.append(0)\n    for i in range(1, n):\n        good_pos.append(good_pos[-1] + abs(i-good_pos[-1]))\n    return good_pos[-1] - k\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    def is_good(perm):\n        bad = set()\n        for i in range(1, n):\n            if abs(perm[i] - i) > 1:\n                return False\n            bad.add(perm[i])\n        return len(bad) == k\n    \n    return str(sum(1 for i in range(n) if is_good([i] + list(range(i, n)))) % (10**9 + 7))\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n == 1 and k == 0:\n        return \"1\"\n    return count_good(n, k)\ndef"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    good = []\n    for i in range(1, n + 1):\n        good.append(i)\n    count = 0\n    #print(good)\n    while n!= 0 and len(good) > 1:\n        n -= 1\n        count += len(good)\n        if n == 0:\n            if len(good) % k == 0:\n                count += 1\n        else:\n            good.sort()\n            if good[-1] - good[0] == k:\n                good.pop()\n            else:\n                good = good[1:]\n    return str(count)\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    return str(good_positions(n, k))\ndef"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n == 1:\n        return 0\n    from itertools import permutations\n    perms = permutations(range(1, n + 1))\n    good = 0\n    for perm in perms:\n        good = 0\n        for i, p in enumerate(perm):\n            if abs(p - i) == 1:\n                good += 1\n        if good == k:\n            break\n    return good\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    p = list(range(n))\n    if k == 0:\n        return f'{p.count(0)}'\n    for _ in range(k):\n        good = p[0]\n        idx = p.index(good)\n        p = p[1:] + p[:1]\n        del p[idx]\n    return f'{p.count(0)}'"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for i in range(n - 1, -1, -1):\n        for j in range(i + 1, n):\n            dp[i][j] = dp[i + 1][j] + dp[i][j - 1]\n            if dp[i][j] > k:\n                dp[i][j] = 0\n    return str(dp[0][-1])\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    b = list(map(int, stdin.split()))\n    c = stdin.split()\n    # N, K = 5, 5\n    # b = [4, 3, 4, 1, 6]\n    # c = ['R', 'W', 'W', 'O', 'R']\n\n    ans = float('-inf')\n    color_map = {}\n    color_count = {}\n    total_b = 0\n    for i in range(N):\n        if c[i] not in color_map:\n            color_map[c[i]] = 1\n            color_count[c[i]] = 0\n        color_count[c[i]] += 1\n        total_b += b[i]\n    # print(color_map)\n    # print(color_count)\n    # print(total_b)\n\n    if total_b % (K * (K - 1))!= 0:\n        return '-1'\n    else:\n        count_map = {}\n        for i in range(N):\n            color = c[i]\n            color_count[color] -= 1\n            if color not in count_map:\n                count_map[color] = 1\n            else:\n                count_map[color] += 1\n            # print(color, count_map)\n            for j in range(i + 1, N):\n                color2 = c[j]\n                if color2 not in count_map:\n                    count_map[color2] = 1\n                else:\n                    count_map[color2] += 1\n                # print(color2, count_map)\n                if color2!= color:\n                    # print(color, color2, color_count[color], color_count[color2])\n                    # print(b[i], b[j])\n                    if (b[i] + b[j]) % (K * (K - 1))!= 0:\n                        return '-1'\n                    else:\n                        color_count[color] -= 1\n                        color_count[color2] -= 1\n                        if color_count[color] < 0 or color_count[color2] < 0:\n                            return '-1'\n                        if color_map[color] > color_map[color2]:\n                            count_map[color] -= 1\n                            count_map[color2] += 1\n                        else:\n                            count_map[color2] -= 1\n                            count_map[color] += 1\n\n        for i in count_map:\n            if count_map[i]!= 0:\n                return '-1'\n\n        if len(count_map) == K:\n            return total_b // (K * (K - 1))\n\n\nprint(solution(input()))"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    roses = sorted(list(map(int, stdin.split()[1:])), reverse=True)\n    return \"1\" if sum(roses[:k]) <= k else \"0\"\nsolution(\"5 3\")\nsolution(\"10 20 14 20 11\")\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    b = list(map(int, stdin.split()))\n    color = stdin.split()\n\n    b.sort(reverse=True)\n    color = sorted(color, key=lambda x: (b.index(int(x)), b.index(int(x))), reverse=True)\n\n    while k > 0 and k <= n:\n        if color[k] == 'R':\n            if k == n:\n                return -1\n            k += 1\n        elif color[k] == 'W':\n            k += 1\n        else:\n            return str(b[0] * n)\n    return str(n)\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    b = list(map(int, stdin.split()[1].split(' ')))\n    colors = stdin.split()[2]\n\n    # Find the max sum of color and beauty\n    colors_sum = 0\n    for i in range(len(colors)):\n        if colors[i] == 'R':\n            colors_sum += 7\n        elif colors[i] == 'O':\n            colors_sum += 4\n\n    b_sum = sum(b)\n    if k == 1:\n        if b_sum > colors_sum:\n            return '-1'\n    elif k > n:\n        return '-1'\n\n    # Try all possible unique colors\n    colors = ['W', 'O', 'R']\n    for i in range(3):\n        colors = colors[:i] + colors[i+1:]\n\n    # Try all unique colors\n    if k == n:\n        return str(max(b) + colors_sum)\n\n    for i in range(n):\n        colors.remove(colors[i])\n        if b[i] + b_sum > colors_sum:\n            colors = colors[:i] + colors[i+1:]\n        else:\n            return '-1'\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    [n, k, b, c] = stdin.split()\n    b = list(map(int, b.split()))\n    c = list(c)\n    ans = 0\n    for i in range(n):\n        if b[i] + c[i] < k:\n            ans = -1\n            break\n    return str(ans)"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()[1:]))\n    c = stdin.split()[2]\n    res = 0\n    for i in range(k):\n        if c[i] == 'R':\n            if b[i] % 2 == 1:\n                return '-1'\n            res += b[i]\n        elif c[i] == 'O':\n            res += 2*b[i]\n        else:\n            if b[i] % 2 == 0:\n                return '-1'\n            res += 2*b[i]\n    return res\n\n\ndef"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin.split()\n    b = [int(x) for x in b.split()]\n    c = [x for x in c]\n    return str(max(0, sum(b)))"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()[1:]))\n    c = list(stdin.split()[2])\n    max_bouquet = -1\n    count = 0\n    for i in range(n):\n        if c[i] == 'R':\n            if count == 0:\n                max_bouquet = max(max_bouquet, b[i])\n                count += 1\n            else:\n                max_bouquet = max(max_bouquet, b[i] + max_bouquet)\n                count = 0\n    return str(max_bouquet) if max_bouquet > 0 else '-1'\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # n, k = map(int, input().split())\n    n, k = 4, 5\n    b = list(map(int, stdin.split()))\n    c = list(stdin[3])\n    b.sort()\n    c.sort()\n    if len(b)!= n or len(c)!= n:\n        return -1\n    if not is_valid(c):\n        return -1\n    # print(b)\n    # print(c)\n    # print(b[1], b[2], b[3])\n    # print(c[1], c[2], c[3])\n    if k > n - 2:\n        return -1\n    if k == 0:\n        return 0\n    b_r = b[0]\n    b_w = b[1]\n    b_o = b[2]\n    b_rr = b[3]\n    # print(b_r, b_w, b_o, b_rr)\n    if b_r == b_w and b_r == b_o and b_r == b_rr:\n        return -1\n    if b_r == b_w:\n        if b_r == c[0]:\n            return b_r * k\n        return -1\n    if b_w == b_o:\n        if b_w == c[1]:\n            return b_w * k\n        return -1\n    if b_o == b_rr:\n        if b_o == c[2]:\n            return b_o * k\n        return -1\n    if b_r == b_o and b_w == b_rr:\n        if b_r == c[0] and b_o == c[2]:\n            return b_r * k\n        return -1\n    if b_r == b_w and b_o == b_rr:\n        if b_r == c[0] and b_w == c[2]:\n            return b_r * k\n        return -1\n    if b_r == b_w and b_o == b_rr:\n        if b_w == c[1] and b_o == c[2]:\n            return b_o * k\n        return -1\n    if b_w == b_rr and b_o == b_rr:\n        if b_w == c[1] and b_rr == c[2]:\n            return b_w * k\n        return -1\n    if b_r == b_w and b_rr == b_o:\n        if b_r == c[0] and b_w == c[2]:\n            return b_r * k\n        return -1\n    if b_r == b_w and b_o == b_rr:\n        if b_w == c[1] and b_rr == c[2]:\n            return b_o * k\n        return -1\n    if b_o == b_rr and b_w == b_rr:\n        if b_o == c[1] and b_rr == c[2]:\n            return b_w * k\n        return -1\n    return -1\n\n\ndef"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    (n, k) = (int(x) for x in stdin.split())\n    b = sorted([int(x) for x in stdin.split()[1:]])\n    b = [x - 1 for x in b]\n\n    b = [0] + b\n    def is_valid(x):\n        if x < 0:\n            return False\n        if x >= n:\n            return False\n        return True\n    def possible_colors(x):\n        colors = ['R', 'O', 'W']\n        return (colors[x],)\n    def possible_bouquets(x, y):\n        colors = ['R', 'O', 'W']\n        for i in range(1, len(colors)):\n            if colors[i] == colors[x] or colors[i] == colors[y]:\n                return False\n        return True\n\n    max_beauty = 0\n    for x in range(1, n):\n        for y in range(x + 1, n):\n            if is_valid(x) and is_valid(y) and possible_colors(x) == possible_colors(y):\n                if possible_bouquets(x, y):\n                    max_beauty = max(max_beauty, b[x] + b[y])\n    if max_beauty == 0:\n        return '-1'\n    return str(max_beauty)"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p, a = stdin.split()\n    n, p, a = int(n), int(p), list(map(int, a.split()))\n\n    gcd = math.gcd(n, p)\n    a = a[:gcd]\n\n    print('YES' if len(a) == 2 else 'NO')\n    return 'YES' if len(a) == 2 else 'NO'\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    p, q = map(int, stdin.split())\n    n = int(stdin.split()[2])\n    numerator, denominator = 0, 1\n    for i in range(n):\n        numerator, denominator = numerator + 1, denominator * p\n    numerator, denominator = numerator, denominator + 1\n    height = int(numerator / denominator)\n    denominator = p\n    numerator = 1\n    for i in range(n):\n        numerator, denominator = numerator + 1, denominator * height\n    numerator = numerator * q\n    if denominator == numerator:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"YES\""
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, d = stdin.split()\n    num, den = n, d\n    i = 2\n    while True:\n        i += 1\n        if i > max(int(n), int(d)):\n            return \"NO\"\n        num = str(int(n) + int(1/i))\n        den = str(int(d) + int(1/i))\n        if num == den:\n            return \"YES\"\n        elif num > den:\n            return \"NO\"\n        i += 1\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n_1, n_2, n_3 = map(int, stdin.split())\n    cont_frac_1 = list(map(int, stdin.split()[1].split(' ')))\n    cont_frac_2 = list(map(int, stdin.split()[2].split(' ')))\n    cont_frac_1.reverse()\n    cont_frac_2.reverse()\n    for i in range(len(cont_frac_1)):\n        cont_frac_1[i] = cont_frac_1[i] * n_1 + cont_frac_1[i - 1] * n_2\n    for i in range(len(cont_frac_2)):\n        cont_frac_2[i] = cont_frac_2[i] * n_3 + cont_frac_2[i - 1] * n_2\n    if cont_frac_1 == cont_frac_2:\n        return \"YES\"\n    else:\n        return \"NO\"\n\nstdin = '2 4'\nprint(solution(stdin))\nstdin = '3'\nprint(solution(stdin))\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    p, q = map(int, stdin.split())\n    first = str(p // q)\n    other = str(1)\n    cont_frac = first\n    for i in range(1, len(str(q))):\n        cont_frac = cont_frac +'' + str(q)\n    cont_frac = cont_frac.split()\n    cont_frac = cont_frac[:-1]\n    other = other.join(cont_frac)\n    if other == first:\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    p, q, n = map(int, stdin.split())\n    a_1, a_2, a_3 = map(int, stdin.split())\n    a_n = a_1\n    k = 1\n    while k < n:\n        a_n = a_n * q + a_1\n        a_1 = a_1 * q + a_2\n        a_2 = a_2 * q + a_3\n        k += 1\n    return 'YES' if a_n == p else 'NO'\n\n\ndef"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, p, q = map(int, stdin.split())\n    frac = list(map(int, stdin.split()))\n    result = [frac[0]]\n    for i in range(1, len(frac)):\n        cur = 1\n        for j in range(len(result) - 1, -1, -1):\n            cur = cur * result[j] + result[j + 1]\n        result.append(cur // frac[i])\n    return \"YES\" if result == frac else \"NO\"\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    p, q = map(int, stdin.split())\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    f1 = 0\n    f2 = 0\n    count = 1\n    for i in range(n):\n        count += 1\n        f1 = f1 + (b[i] * a[i])\n        f2 = f2 + (b[i] * (a[i] - 1))\n        if f1 == f2:\n            print('YES')\n            return\n    print('NO')\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    p, q = map(int, stdin.split())\n    n = int(input())\n    arr = stdin.split()\n    for i in range(n):\n        arr[i] = int(arr[i])\n    a1, a2 = arr\n    b1, b2 = 1, 0\n    c1, c2 = 0, 1\n    ans = False\n    while b2!= p:\n        q = (a1 * c1) // (a2 * c2)\n        a1, a2 = (a1 * c2) - (a2 * q), (a2 * c1) + (a1 * q)\n        b1, b2 = (b1 * c2) - (b2 * q), (b2 * c1) + (b1 * q)\n        c1, c2 = (c1 * c2) - (q * q), (c2 * c1) + (q * q)\n    if (a1 == b1) and (a2 == b2):\n        ans = True\n    return \"YES\" if ans else \"NO\"\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns arithmetically correct expression if possible or 'Impossible' otherwise.\"\"\"\n    expression = stdin.split('|')\n    while True:\n        if not '|' in expression:\n            return ''.join(expression)\n        for i in range(len(expression)):\n            if expression[i] == '+':\n                temp = expression[i]\n                expression[i] = expression[i + 1]\n                expression[i + 1] = temp\n                break\n            if expression[i] == '=':\n                temp = expression[i]\n                expression[i] = expression[i + 1]\n                expression[i + 1] = temp\n                break\n        else:\n            return 'Impossible'\n        if '+' in expression or '=' in expression:\n            return ''.join(expression)\n\nstdin = '|||||=||||||'\nprint(solution(stdin))\n\n\ndef"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    sticks = stdin.split('|')\n    for i in range(len(sticks)):\n        if '||' in sticks[i]:\n            sticks[i] = sticks[i].replace('||', '+|')\n        elif '+' in sticks[i]:\n            sticks[i] = sticks[i].replace('+', '||')\n    return '|'.join(sticks)\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n  expression = stdin.split('=')[0]\n  sign = stdin.split('=')[1]\n  # check if we can shift at least one stick.\n  if sign == '+':\n    if expression.count('|') == 0:\n      # we can only move one stick, so just delete it.\n      expression = expression.replace('+', '|', 1)\n      return expression\n    else:\n      # we can shift at least one stick\n      sticks = []\n      sticks_removed = []\n      sticks_removed.append(expression.split('|')[0])\n      sticks.append(sticks_removed[0])\n      sticks.append(sticks_removed[0])\n      sticks_removed.append(sticks_removed[0])\n      sticks.append(sticks_removed[1])\n      return '+'.join(sticks)\n  else:\n    if expression.count('|') == 0:\n      # we can only move one stick, so just delete it.\n      expression = expression.replace('=', '|', 1)\n      return expression\n    else:\n      sticks = []\n      sticks_removed = []\n      sticks_removed.append(expression.split('|')[0])\n      sticks.append(sticks_removed[0])\n      sticks.append(sticks_removed[0])\n      sticks_removed.append(sticks_removed[0])\n      sticks.append(sticks_removed[1])\n      return '|'.join(sticks)\n\nsolution(\"+|=|||||\")\nsolution(\"|||||+||=||\")\nsolution(\"||||+||=||||||\")\n\"\"\"\ndef"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    answers = []\n    while stdin!= \"\":\n        nums = stdin.split(\"+\")\n        first_number = int(nums[0])\n        second_number = int(nums[1])\n        third_number = int(nums[2])\n        if first_number + second_number == third_number:\n            answers.append(\"+\" + str(first_number) + \"=\" + str(third_number))\n            return \"\".join(answers)\n        if first_number - second_number == third_number:\n            answers.append(\"-\" + str(first_number) + \"=\" + str(third_number))\n            return \"\".join(answers)\n        if first_number * second_number == third_number:\n            answers.append(\"*\" + str(first_number) + \"=\" + str(third_number))\n            return \"\".join(answers)\n        if first_number / second_number == third_number:\n            answers.append(\"/\" + str(first_number) + \"=\" + str(third_number))\n            return \"\".join(answers)\n        if third_number - first_number == second_number:\n            answers.append(\"-\" + str(first_number) + \"=\" + str(third_number))\n            return \"\".join(answers)\n        if third_number / first_number == second_number:\n            answers.append(\"/\" + str(first_number) + \"=\" + str(third_number))\n            return \"\".join(answers)\n        if third_number * first_number == second_number:\n            answers.append(\"*\" + str(first_number) + \"=\" + str(third_number))\n            return \"\".join(answers)\n        if third_number + first_number == second_number:\n            answers.append(\"+\" + str(first_number) + \"=\" + str(third_number))\n            return \"\".join(answers)\n        return \"Impossible\"\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    res = list()\n    for line in lines:\n        p1 = line.find(\"+\")\n        p2 = line.find(\"=\")\n        p3 = line.find(\"|\")\n        p4 = line.find(\"=\")\n        p5 = line.find(\"|\")\n        if (p1 == 0) and (p2 > 0) and (p3 == -1) and (p4 > 0) and (p5 == -1):\n            res.append(line)\n    if len(res) > 1:\n        return \"Impossible\"\n    elif len(res) == 1:\n        return res[0]\n\nprint(solution(input()))\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n'''\ninput = stdin.split()\nleft = []\nright = []\nn = len(input)\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n'''\n'''\ndef"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.splitlines()[0]\n    print(len(line))\n    line = line.replace('+', '+1').replace('=', '=1').replace('+', '+2').replace('=', '=2')\n    print(line)\n    return line"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    def check(expression: str) -> str:\n        sign = '+'\n        sticks = list(map(int, expression.split('+')))\n        for i, s in enumerate(sticks):\n            if i == 0:\n                continue\n            if s!= sticks[i-1] + 1:\n                sign = '-' if sign == '+' else '+'\n            if i == 1:\n                if sign == '+':\n                    return 'Impossible'\n                if sign == '-':\n                    return '+'\n        return sign\n    \n    def shift(expression: str) -> str:\n        sign = '+'\n        sticks = list(map(int, expression.split('+')))\n        for i in range(len(sticks)):\n            if i == len(sticks) - 1:\n                continue\n            if sticks[i]!= sticks[i+1]:\n                sign = '-' if sign == '+' else '+'\n            if i == 0:\n                if sign == '+':\n                    return 'Impossible'\n                if sign == '-':\n                    return '+'\n        return sign\n    \n    return max(check(stdin), shift(stdin))\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    output = \"\"\n    # Write your code here\n    input_list = stdin.split()\n    stack = []\n    op_stack = []\n    if input_list[0].isalpha():\n        stack.append(input_list[0])\n    else:\n        op_stack.append(input_list[0])\n\n    for i in range(1, len(input_list)):\n        if input_list[i] == \"+\":\n            stack.append(\"+\")\n            op_stack.append(\"+\")\n        elif input_list[i] == \"-\":\n            stack.append(\"-\")\n            op_stack.append(\"-\")\n        elif input_list[i] == \"=\":\n            if \"\".join(stack) == \"-\":\n                output = \"Impossible\"\n                break\n            else:\n                temp_str = \"\".join(stack)\n                stack.clear()\n                stack.append(temp_str)\n                op_stack.clear()\n                op_stack.append(\"=\")\n        elif input_list[i].isalpha():\n            stack.append(input_list[i])\n        else:\n            stack_1 = stack.pop()\n            op_stack_1 = op_stack.pop()\n            stack_2 = stack.pop()\n            op_stack_2 = op_stack.pop()\n\n            if op_stack_1 == \"+\":\n                if stack_1 == \"+\":\n                    stack.append(op_stack_2 + op_stack_2)\n                    op_stack.append(op_stack_2 + op_stack_2)\n                else:\n                    stack.append(\"+\" + op_stack_2 + op_stack_1)\n                    op_stack.append(\"+\" + op_stack_2 + op_stack_1)\n            elif op_stack_1 == \"-\":\n                if stack_1 == \"-\":\n                    stack.append(op_stack_2 + op_stack_1)\n                    op_stack.append(op_stack_2 + op_stack_1)\n                else:\n                    stack.append(\"-\" + op_stack_1 + op_stack_2)\n                    op_stack.append(\"-\" + op_stack_1 + op_stack_2)\n            elif op_stack_1 == \"=\":\n                if stack_2 == \"+\":\n                    stack.append(op_stack_1 + op_stack_2)\n                    op_stack.append(op_stack_1 + op_stack_2)\n                else:\n                    stack.append(op_stack_2 + op_stack_1)\n                    op_stack.append(op_stack_2 + op_stack_1)\n            elif op_stack_1 == \"=\":\n                if stack_2 == \"-\":\n                    stack.append(op_stack_1 + op_stack_2)\n                    op_stack.append(op_stack_1 + op_stack_2)\n                else:\n                    stack.append(op_stack_2 + op_stack_1)\n                    op_stack.append(op_stack_2 + op_stack_1)\n    return output\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    _, k = stdin.split(' ')\n    k = int(k)\n    n = 50\n    if n <= k:\n        print(0)\n    else:\n        a = 1\n        for i in range(2, n+1):\n            a = a * (i - 1)\n        print((a % 1000000007) % 10**9 + 7)\n    return\n\nsolution('5 3')\n\"\"\"\n\ndef"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    answer = 0\n    for i in range(1, n + 1):\n        if i % 2!= 0:\n            answer += 1\n    return str(answer)\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(\" \"))\n    perms = permutations(range(1, n + 1), n)\n    odd = 0\n    for perm in perms:\n        if sum(map(lambda x: x - perm.index(x) if x!= perm.index(x) else 0, range(1, n + 1))) == k:\n            odd += 1\n    return str(odd % 10**9 + 7)"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    num_list = list(map(int, stdin.split(\" \")))\n    n, k = num_list[0], num_list[1]\n    if n == 1:\n        return str(k % (10 ** 9 + 7))\n    if k == 1:\n        return str(n * (n - 1) % (10 ** 9 + 7))\n    odd_count = 0\n    if k % 2 == 0:\n        odd_count = k // 2\n    else:\n        odd_count = k // 2 + 1\n    return str((n - odd_count) * (n - odd_count - 1) % (10 ** 9 + 7))\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    \n    def josephus(n, k):\n        arr = list(range(1, n+1))\n        i = 0\n        while len(arr) > 1:\n            if i % k == 0:\n                arr.pop(0)\n            else:\n                arr.append(arr.pop(0))\n            i += 1\n        return arr[0]\n    return str(josephus(n, k))\n\nprint(solution(input()))"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    k = int(stdin)\n    result = 0\n    if N <= 1 or k <= 1:\n        return result\n    if k <= N:\n        p = 1\n        if k > 1:\n            p = 2\n        for i in range(1, N):\n            if i % p == k - 1:\n                result += p\n                p += 1\n            else:\n                p += 1\n    return result\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.strip().split(\" \")\n    n = int(n)\n    k = int(k)\n    # n = 3\n    # k = 2\n\n    # we create a dict to store each of the number in the range\n    # {1, 2, 3}\n    # key: index in the dict\n    # value: the number\n    # for example, if we have {1, 2, 3}\n    # then we have index 1 = 1, index 2 = 2, index 3 = 3\n    numbers = list(range(1, n + 1))\n    oddness_count = 0\n    for index, number in enumerate(numbers):\n        oddness = k - (number - 1)\n        # if the number is odd then it should be less than the number in the range\n        if oddness < 0:\n            continue\n        # if the number is equal to the number in the range\n        if oddness == 0:\n            oddness_count += 1\n        # if the number is greater than the number in the range\n        elif oddness > 0:\n            # then we have to split the number\n            # in the range and find the even number\n            # that is greater than the odd number\n            # and then subtract the odd number from the current number\n            split_range = numbers[index:]\n            for i in range(len(split_range) - 1, -1, -1):\n                if split_range[i] > oddness:\n                    split_range[i] -= oddness\n                    oddness_count += 1\n                    break\n\n    return str(oddness_count)\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split(\" \")))\n    odd_cnt = 0\n    for i in range(1, n + 1):\n        if i - k % 2 == i - 1:\n            odd_cnt += 1\n    return str(odd_cnt)"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    odd = 0\n    for i in range(1, n + 1):\n        odd += i - (i % 2)\n    return str(odd % 1000000007)"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    odd_sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 1:\n            odd_sum += i\n    total = (odd_sum) ** k % (10**9+7)\n    return str(total)"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport doctest\n\n\ndef"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    [N, *X_i_list] = list(map(int, stdin.split()))\n    X_i_list = sorted(X_i_list)\n    X_i_min = min(X_i_list)\n    X_i_max = max(X_i_list)\n    y_i_max = max(X_i_list)\n    y_i_min = min(X_i_list)\n    d_list = []\n    w_list = []\n    for i in range(1, N + 1):\n        d_i = int((X_i_max - X_i_min) / N * (i - 1))\n        d_list.append(d_i)\n    for i in range(N):\n        w_i = ''.join([str(x) for x in list(map(lambda x_i: (x_i - d_i) % 4, X_i_list))])\n        w_list.append(w_i)\n    # print(d_list)\n    # print(w_list)\n    return''.join([str(d) for d in d_list]) + '\\n' +''.join([str(w) for w in w_list])\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return:\n        \"m d_1 d_2... d_m\" where m is the number of modes of robot arm and d_i are the distances from Joint m to each point.\n    \"\"\"\n    N = int(stdin)\n    points = []\n    for i in range(N):\n        points.append(list(map(int, stdin.split())))\n    solution = \"\"\n    for point in points:\n        d = point[0]\n        if d == -1:\n            continue\n        for mode in point[1:]:\n            if mode == 0:\n                solution += \"D\"\n            elif mode == 1:\n                solution += \"R\"\n            elif mode == 2:\n                solution += \"L\"\n            else:\n                solution += \"U\"\n    return solution\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Extract a robot arm from stdin and return its configuration.\n    >>> solution('''\n   ... 3\n   ... -1 0\n   ... 0 3\n   ... 2 -1\n   ... ''')\n    '2 1 2'\n    >>> solution('''\n   ... 5\n   ... 0 0 0 0\n   ... 2 2 2 2\n   ... 4 4 4 4\n   ... 4 4 4 4\n   ... 4 4 4 4\n   ... ''')\n    '5 1 2'\n    >>> solution('''\n   ... 20\n
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    Xs = [int(i) for i in stdin.split()]\n    ys = [(Xs[i], Xs[i + 1]) for i in range(0, N, 2)]\n\n    modes = []\n    for i in range(N):\n        if i % 2 == 1:\n            modes.append('U')\n        else:\n            modes.append('R')\n\n    d = []\n    for i in range(1, N + 1):\n        d.append(abs(Xs[i - 1] - Xs[i]))\n\n    ans = ''\n    for i in range(N):\n        if modes[i] == 'R':\n            ans += f'{modes[i]}{d[i]}'\n        else:\n            ans += f'{modes[i]}{d[i]}'\n\n    return ans"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, X_1, Y_1 = stdin.split(\" \")\n    X_1, Y_1 = int(X_1), int(Y_1)\n    X_2, Y_2 = stdin.split(\" \")\n    X_2, Y_2 = int(X_2), int(Y_2)\n    X_3, Y_3 = stdin.split(\" \")\n    X_3, Y_3 = int(X_3), int(Y_3)\n    assert 1 <= int(N) <= 40\n    assert 1 <= int(X_1) <= 10_000_000\n    assert 1 <= int(Y_1) <= 10_000_000\n    assert 1 <= int(X_2) <= 10_000_000\n    assert 1 <= int(Y_2) <= 10_000_000\n    assert 1 <= int(X_3) <= 10_000_000\n    assert 1 <= int(Y_3) <= 10_000_000\n    assert int(X_1) <= int(X_2) <= 10_000_000\n    assert int(X_2) <= int(X_3) <= 10_000_000\n    assert int(Y_1) <= int(Y_2) <= 10_000_000\n    assert int(Y_2) <= int(Y_3) <= 10_000_000\n    assert len(X_1) == len(Y_1) == len(X_2) == len(Y_2) == len(X_3) == len(Y_3) == N\n    N = int(N)\n    X_1, Y_1, X_2, Y_2, X_3, Y_3 = map(int, (X_1, Y_1, X_2, Y_2, X_3, Y_3))\n\n    def get_mode(X_i, Y_i, x_i, y_i):\n        if X_i == x_i and Y_i == y_i:\n            return \"L\"\n        elif X_i == x_i + 1 and Y_i == y_i:\n            return \"R\"\n        elif X_i == x_i and Y_i == y_i + 1:\n            return \"D\"\n        elif X_i == x_i - 1 and Y_i == y_i:\n            return \"U\"\n        else:\n            raise Exception()\n\n    def get_way(X_i, Y_i, x_i, y_i, d_i, w_i):\n        if w_i == \"L\":\n            return X_i, Y_i\n        elif w_i == \"R\":\n            return X_i, Y_i + d_i\n        elif w_i == \"D\":\n            return X_i + d_i, Y_i\n        elif w_i == \"U\":\n            return X_i, Y_i - d_i\n        else:\n            raise Exception()\n\n    def get_way_str(X_i, Y_i, x_i, y_i, d_i, w_i):\n        if w_i == \"L\":\n            return str(X_i) + \" \" + str(Y_i)\n        elif w_i == \"R\":\n            return str(X_i) + \" \" + str(Y_i + d_i)\n        elif w_i == \"D\":\n            return str(X_i + d_i) + \" \" + str(Y_i)\n        elif w_i == \"U\":\n            return str(X_i) + \" \" + str(Y_i - d_i)\n        else:\n            raise Exception()\n\n    def get_way_list(X_i, Y_i, x_i, y_i, d_i, w_i):\n        if w_i == \"L\":\n            return [X_i, Y_i]\n        elif w_i == \"R\":\n            return [X_i, Y_i + d_i]\n        elif w_i == \"D\":\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    if N == 0:\n        return '0'\n    input = stdin.split('\\n')\n    output = ''\n    # input = stdin.split('\\n')\n    m = 1\n    d = 0\n    for line in input:\n        mode = line.strip().split(' ')\n        if len(mode) == 1:\n            if mode[0] == 'L':\n                d = int(input[m - 2][0])\n            elif mode[0] == 'R':\n                d = int(input[m - 2][0])\n            elif mode[0] == 'D':\n                d = int(input[m - 2][0])\n            elif mode[0] == 'U':\n                d = int(input[m - 2][0])\n        else:\n            if mode[0] == 'L':\n                x_0 = int(input[m - 2][0])\n                y_0 = int(input[m - 2][1])\n                x_1 = int(input[m - 1][0])\n                y_1 = int(input[m - 1][1])\n                d_1 = int(mode[1])\n                d_2 = int(mode[2])\n                if x_1 - x_0 == d_1:\n                    output = output + '1'\n                elif y_1 - y_0 == d_1:\n                    output = output + '2'\n                elif x_1 + d_2 - x_0 == d_1:\n                    output = output + '3'\n                elif y_1 - d_2 - y_0 == d_1:\n                    output = output + '4'\n            elif mode[0] == 'R':\n                x_0 = int(input[m - 2][0])\n                y_0 = int(input[m - 2][1])\n                x_1 = int(input[m - 1][0])\n                y_1 = int(input[m - 1][1])\n                d_1 = int(mode[1])\n                d_2 = int(mode[2])\n                if x_1 + d_2 - x_0 == d_1:\n                    output = output + '1'\n                elif y_1 + d_2 - y_0 == d_1:\n                    output = output + '2'\n                elif x_1 - d_2 - x_0 == d_1:\n                    output = output + '3'\n                elif y_1 + d_2 - y_0 == d_1:\n                    output = output + '4'\n            elif mode[0] == 'D':\n                x_0 = int(input[m - 2][0])\n                y_0 = int(input[m - 2][1])\n                x_1 = int(input[m - 1][0])\n                y_1 = int(input[m - 1][1])\n                d_1 = int(mode[1])\n                d_2 = int(mode[2])\n                if y_1 - y_0 == d_1:\n                    output = output + '1'\n                elif x_1 - x_0 == d_1:\n                    output = output + '2'\n                elif x_1 + d_2 - x_0 == d_1:\n                    output = output + '3'\n                elif y_1 - d_2 - y_0 == d_1:\n                    output = output + '4'\n            elif mode[0] == 'U':\n                x_0 = int(input[m - 2][0])\n                y_0 = int(input[m - 2][1])\n                x_1 = int(input[m - 1][0])\n                y_1 = int(input[m - 1][1])\n                d_1 = int(mode[1])\n                d_2 = int(mode[2])\n                if x_1 - x_0 == d_1:\n                    output = output + '1'\n                elif y_1 + d_2 - y_0 == d_1:"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    x = list(map(int, stdin.split()[1:]))\n    ans = []\n    for i in range(N):\n        ans.append([])\n        ans[i].append(x[i])\n        for j in range(i + 1, N):\n            if x[i] - x[j] == 0 or x[i] + x[j] == 0:\n                ans[i].append('D')\n            elif x[i] - x[j] > 0 and x[i] - x[j] < 10:\n                ans[i].append('U')\n            elif x[i] + x[j] > 0 and x[i] + x[j] < 10:\n                ans[i].append('R')\n            elif x[i] - x[j] < 0 and x[i] - x[j] > -10:\n                ans[i].append('L')\n    for i in range(N):\n        print(*ans[i])\n    return ''\n\n\ndef"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    if N < 1 or N > 1000:\n        return -1\n\n    data = stdin.split()\n    for i in range(0, N):\n        data[i] = list(map(int, data[i].split()))\n        if data[i][0] < 0 or data[i][0] > 10_000_000 or data[i][1] < 0 or data[i][1] > 10_000_000:\n            return -1\n\n    mode = ''.join(data[0][2:])\n    if len(mode)!= N:\n        return -1\n\n    for i in range(1, N):\n        if mode[i - 1]!= 'R' and mode[i - 1]!= 'L':\n            return -1\n    for i in range(1, N):\n        if mode[i - 1]!= 'D' and mode[i - 1]!= 'U':\n            return -1\n\n    points = []\n    for i in range(1, N):\n        points.append(tuple(map(int, data[i])))\n\n    if len(set([tuple(map(int, data[0]))] + points))!= N:\n        return -1\n\n    lengths = []\n    for i in range(0, N):\n        lengths.append(abs(data[i][0] - data[i][1]))\n\n    if sum(lengths) < 10_000_000:\n        return -1\n\n    indices = []\n    for i in range(0, N):\n        indices.append(int(data[i][1]))\n    indices.sort()\n\n    ans = ''\n    for i in range(0, N):\n        if i!= 0:\n            ans +=''\n        ans += mode[indices[i] - 1]\n    return ans\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N: int = int(stdin)\n    sections: List[int] = []\n    for _ in range(N):\n        x, y = map(int, stdin.split())\n        sections.append((x, y))\n    m: int = int(stdin)\n    d: List[int] = []\n    for _ in range(m):\n        d.append(int(stdin))\n    w: str = stdin[-m:]\n    w: str = w.replace(\"\\n\", \"\")\n    # print(sections)\n    # print(d)\n    # print(w)\n    return \" \".join([str(len(sections)), *[\"\".join(w[i] for i in range(len(sections))), *[\"\".join(d[i] for i in range(len(sections))), ]])\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return stdin"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    s = stdin.replace(\"o\", \"ooo\").replace(\"g\", \"ggg\").replace(\"o\", \"ooo\").replace(\"g\", \"ggg\")\n    return s\n\nprint(solution(input()))\n\n\ndef"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    arr = stdin.split()\n    filler = stdin[n - 1]\n    for i in range(n - 1, -1, -1):\n        if arr[i] == filler:\n            arr[i] = '***'\n            continue\n        filler = arr[i]\n    return''.join(arr)\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    start = 0\n    ans = []\n    while start < n:\n        end = start\n        while end < n and stdin[end]!= 'o':\n            end += 1\n        if end - start > 1:\n            ans.append('*' * (end - start))\n        end += 1\n        while end < n and stdin[end]!= 'g':\n            end += 1\n        if end - start > 1:\n            ans.append('***' * (end - start - 1))\n        ans.append(stdin[start:end])\n        start = end\n    return ''.join(ans)\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    print(stdin)\n    s = stdin.strip().splitlines()[1]\n    #print(s)\n    output = ''\n    output += s\n    output += '***'\n    for i in range(1, len(s)):\n        if output[-i:] == '***':\n            output = output[:-i] + '***' + '***' * i\n            print(output)\n            break\n    return output\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin[1:n]\n    fillers = {'o', 'g', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g',\n               'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o',\n               'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g',\n               'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o',\n               'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g',\n               'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o',\n               'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g',\n               'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o',\n               'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g',\n               'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o',\n               'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g',\n               'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o',\n               'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g',\n               'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o',\n               'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g',\n               'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o',\n               'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g',\n               'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o',\n               'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g',\n               'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o',\n               'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g',\n               'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o',\n               'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g',\n               'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o', 'g', 'o',\n               'g', 'o"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    res = ''\n    while True:\n        res = res + '***'\n        print(res)\n        s = s.replace('ogogo', '***')\n        s = s.replace('ogog', '***')\n        s = s.replace('ogoga', '***')\n        print(s)\n        s = s.replace('ogogob', '***')\n        print(s)\n        s = s.replace('ogogo', '***')\n        print(s)\n        if len(s) == n:\n            break\n    return res\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split('\\n')\n    words[0] = words[0].replace(' ', '')\n    return '\\n'.join([word*3 for word in words[0]])"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, n = map(int, stdin.split())\n    def prime_div(x):\n        return list(filter(lambda i: i!= 0, [i for i in range(2, x) if x % i == 0]))\n    def gcd(x, y):\n        while x % y!= 0:\n            x, y = y, x % y\n        return y\n    p = prime_div(x)\n    s = 1\n    for i in p:\n        s *= gcd(n, i)\n    return str(s % (10**9+7))\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # using stdin\n    x, n = map(int, stdin.split())\n    f = 1\n    for i in range(2, n + 1):\n        f *= (x ** i) % (10 ** 9 + 7)\n    return str(f)\n    # using list comprehension\n    # return ''.join(list(map(str, map(lambda x, i: x ** i % (10 ** 9 + 7), x, range(2, n + 1)))))"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    max_num = 10 ** 9 + 7\n    for i in range(1, n + 1):\n        for j in range(1, i):\n            max_num = max(max_num, g(i, j) * g(i, i - j))\n    return f\"{max_num % max_num}\"\n\ndef"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, n = map(int, stdin.split())\n    res = 1\n    for i in range(2, n + 1):\n        res *= x\n        res %= 10 ** 9 + 7\n    return str(res)\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x, n = map(int, stdin.split())\n    prime = set(prime_gen(x))\n    \n    def g(y, p):\n        res = 1\n        while y % p == 0:\n            res *= p\n            y //= p\n        return res\n    \n    return str(reduce(lambda x, y: x * y, map(lambda x: g(x, p) for p in prime), 1) % (10**9 + 7))\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, n = map(int, stdin.split())\n    return str(f(x, n))\n\ndef"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x, n = map(int, stdin.split())\n    y = 0\n    for i in range(2, x):\n        if x % i == 0:\n            y += i\n    return str(x * pow(y, n, 10 ** 9 + 7))"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x, n = map(int, stdin.split())\n    res = 1\n    for i in range(1, n + 1):\n        res = (res * x) % (10**9 + 7)\n    return str(res)"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, n = map(int, stdin.split())\n    factors = {1: 1}\n    for i in range(2, x + 1):\n        factors[i] = factors.get(i, 0) + i\n    def g(x, p):\n        return factors[p] * factors.get(x // p, 0)\n    return sum(g(y, p) for p in range(x, 1, -1) for y in range(1, y) if g(y, p) <= x) % (10 ** 9 + 7)\nsolution(input())\n'''\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a > 5 or b > 10000 or c > 10000 or a < 1 or b < 1:\n        return \"Try again!\"\n    # as we have to go in a*s(x)\n    if a == 1:\n        return '1' +'' + str(b) +'' + str(c) +'' + str(b) +'' + str(c) +'' + str(b)\n    s = str(b)\n    t = str(b)\n    for i in range(100):\n        s += str(i)\n        s = s[1:]\n    for i in range(100):\n        t += str(i)\n        t = t[1:]\n    s += str(b)\n    s = s[1:]\n    if int(s) > b:\n        return \"Try again!\"\n    for i in range(1, a):\n        x = b*(i**a) + c\n        if int(t) > x:\n            return \"Try again!\"\n    return''.join([str(i) for i in range(1, int(s) + 1)])\n\n\nprint(solution(input()))\n\n\n'''"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    def s(x):\n        return sum(int(c) for c in str(x))\n    def f(n):\n        return n * b * (10 ** a) ** (a - 1) + c\n    ans = 0\n    for x in range(f(1), f(10 ** 9)):\n        if s(x) == 0:\n            ans += 1\n    return str(ans) + '\\n' + '\\n'.join(str(f(n)) for n in range(1, 10 ** 9 + 1) if s(f(n)) > 0)"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    a, b, c = a, b, c\n    return '\\n'.join(map(str, find_all_solutions(a, b, c)))\n\ndef"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    s = 0\n    for x in range(a, b+1):\n        s += x\n        x = x**a + c\n    if s % 10 == 0:\n        return 0\n    x = 1\n    while x <= s:\n        y = x\n        if int(str(x) + str(y) + str(s)) > 10**9:\n            return x\n        x += 1\n    return x-1\n\nsolution(\"3 2 8\")\n\nInput\n2 2 -18\n\nOutput\n4\n1 31 337 967\n\nInput\n1 2 -18\n\nOutput\n0\n\nInput\n2 2 -1\n\nOutput\n4\n1 31 337 967\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    s = sum([i for i in str(c)])\n    if a == 1 and b == 0:\n        return len(list(filter(lambda x: x > 0, range(c, 0, -1))))\n    else:\n        for i in range(1, 10):\n            s += i\n            if s < 10:\n                n = (10 ** 9) * (10 ** 9)\n            else:\n                n = s\n            s = sum([i for i in str(n)])\n        return len(list(filter(lambda x: x > 0, range(n, 0, -1))))\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = (int(x) for x in stdin.split())\n    c1 = c**(1/a)\n    return len(set(int(x) for x in str(c*c1 + b)))\n\nprint(solution(input()))\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n\n    def s(x):\n        return sum(int(d) for d in list(str(x)))\n\n    return len([\n        x\n        for x in range(1, 10 ** 9 + 1)\n        if x == s(x) ** a + b * s(x) ** c\n    ])\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n\n    def convert_to_string(n):\n        return str(n) if n < 10 else convert_to_string(n // 10) + str(n % 10)\n\n    for _ in range(a):\n        num = int(convert_to_string(b * (c ** (a - 1)) + c))\n        if num > 0 and num < 10 ** 9:\n            print(num)\n\n\nsolution(input())\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a == 1:\n        return \"1\"\n    if a == 2:\n        return \"10\"\n    if a == 3:\n        return \"2008\"\n    if a == 4:\n        return \"13726\"\n    if a == 5:\n        return \"337\"\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    min_number = 10 ** 9\n    max_number = -1\n    for x in range(1, 10):\n        result = (b * x ** a + c)\n        if result < min_number:\n            min_number = result\n        if result > max_number:\n            max_number = result\n    # print(min_number, max_number)\n    # result = []\n    # if min_number == max_number:\n    #     print(min_number)\n    #     return\n    # for x in range(min_number, max_number):\n    #     result.append(x)\n    # print(result)\n    # return\n    result = []\n    for x in range(min_number, max_number):\n        if x > 0 and x % 10 == 0:\n            continue\n        result.append(x)\n    print(*result, sep='\\n')\n    return\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split('\\n')\n    # color_map = {i:0 for i in range(1,7)}\n    # color_map[stdin[0]] = 1\n    # for i in range(1,4):\n    #     color_map[stdin[i]] = 1\n    #     color_map[stdin[i+4]] = 1\n    #     color_map[stdin[i+8]] = 1\n    # return \"YES\" if color_map[1] and color_map[2] and color_map[3] and color_map[4] and color_map[5] and color_map[6] and color_map[7] else \"NO\"\n    cube = stdin[0]\n    for i in range(4,12):\n        if cube[i]!= cube[i-4]:\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if solve_cube(list(map(int, stdin.split()))) else 'NO'\n\n\ndef"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split()\n    n = int(line[0])\n    colors = line[1]\n    colors = list(map(int, colors))\n    solved = True\n    for i in range(1, n):\n        if colors[i]!= colors[i - 1]:\n            solved = False\n            break\n    if solved:\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    a = sorted(a)\n    a = [a[i] - a[i - 1] for i in range(1, len(a))]\n    for i in range(len(a)):\n        if a[i]!= 1:\n            return 'NO'\n    return 'YES'"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    result = \"YES\"\n    s = stdin.split(\" \")\n    s.sort()\n    for i in range(1, len(s)):\n        if s[i]!= s[i-1]:\n            return result\n    return result"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    n = len(a)\n    for k in range(n):\n        b = a[:]\n        c = b[k]\n        while c!= 0:\n            for j in range(1, 7):\n                d = b[(k + j) % n]\n                e = b[(k - j) % n]\n                if d == e:\n                    c -= 1\n            if c == 0:\n                return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    colors = {i + 1 for i in range(6)}\n    for i in range(1, 24):\n        colors = colors.intersection(set(map(int, stdin[i-1].split())))\n        if len(colors)!= 1:\n            break\n    if len(colors) == 1:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    if (max(a) == 13) or (max(a) == 14) or (max(a) == 15) or (max(a) == 16):\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    dict_ = {}\n    for i in range(len(n)):\n        dict_[n[i]] = i\n    n = [int(x) for x in stdin]\n    for i in range(len(n)):\n        if n[i] == 1:\n            if i == len(n)-1:\n                continue\n            n[i], n[i+1] = n[i+1], n[i]\n            if n[i] == 13:\n                n[i] = 14\n            elif n[i] == 14:\n                n[i] = 15\n            elif n[i] == 15:\n                n[i] = 16\n            elif n[i] == 16:\n                n[i] = 13\n        if n[i] == 2:\n            if i == len(n)-1:\n                continue\n            n[i], n[i+1] = n[i+1], n[i]\n            if n[i] == 13:\n                n[i] = 14\n            elif n[i] == 14:\n                n[i] = 15\n            elif n[i] == 15:\n                n[i] = 16\n            elif n[i] == 16:\n                n[i] = 13\n        if n[i] == 3:\n            if i == len(n)-1:\n                continue\n            n[i], n[i+1] = n[i+1], n[i]\n            if n[i] == 13:\n                n[i] = 14\n            elif n[i] == 14:\n                n[i] = 15\n            elif n[i] == 15:\n                n[i] = 16\n            elif n[i] == 16:\n                n[i] = 13\n        if n[i] == 4:\n            if i == len(n)-1:\n                continue\n            n[i], n[i+1] = n[i+1], n[i]\n            if n[i] == 13:\n                n[i] = 14\n            elif n[i] == 14:\n                n[i] = 15\n            elif n[i] == 15:\n                n[i] = 16\n            elif n[i] == 16:\n                n[i] = 13\n    return 'YES' if len(set(n)) == 4 else 'NO'"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    color_indexes = {}\n    for i in range(n):\n        row = stdin[i * 6: i * 6 + 6]\n        for color in row:\n            if color not in color_indexes.keys():\n                color_indexes[color] = [i]\n            else:\n                color_indexes[color].append(i)\n    result = \"YES\"\n    for color, indexes in color_indexes.items():\n        if len(indexes) == 1 and indexes[0] % 2!= 0:\n            result = \"NO\"\n    return result\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    p, x, y = map(int, stdin.split())\n    s = (x + y) // 2\n    return sum(map(int, (s + i) // 475 for i in range(25)))\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    total = 0\n    p, x, y = map(int, stdin.split())\n    s = (p // 50) * 96\n    total += s\n    while (p > 0):\n        p = (p - s) // 50\n        s += 96\n        total += p\n    total += x\n    while (p > 0):\n        p = (p - s) // 95\n        s += 95\n        total += p\n    return str(total)\n\n\ndef"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    p, x, y = map(int, stdin.split())\n    s = p - x\n    if s % 475 <= 25:\n        return 0\n    i = (s // 475) % 475\n    i = (i * 96 + 42) % 475\n    return 26 + i\n\n\ndef"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    points = int(stdin.split()[1])\n    elim_round = int(stdin.split()[2])\n    print(points // 50)\n    return print(points // 50 + 25 * (elim_round - 26 // 50 % 50))\n\n\nsolution(input())\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    p, x, y = list(map(int, stdin.split()))\n    start = 0 if p > 1 else 1\n    count = 0\n    while count < x:\n        count += p // 50\n        p = (p * 96 + 42) % 475\n        count += p // 50\n        p = (p * 96 + 42) % 475\n    return start + count + p // 50\n    "
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    p, x, y = map(int, stdin.split())\n    # 56503965743576703\n    i = (p // x) * y\n    i = i * y + x\n    i = i // 50 * 475\n    return str(i % 250)"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin.split()[1])\n    if s < 26:\n        return 0\n    r = int(stdin.split()[2])\n    if s >= 26 and s < 50:\n        return 0\n    if s >= 50 and s < 92:\n        return 0\n    if s >= 92 and s < 200:\n        return 0\n    if s >= 200 and s < 400:\n        return 0\n    if s >= 400 and s < 1000:\n        return 0\n    if s >= 1000 and s < 1500:\n        return 0\n    if s >= 1500:\n        return 0\n    for i in range(r):\n        if s == 26 or s == 60 or s == 85 or s == 107 or s == 142 or s == 177 or s == 203 or s == 245 or s == 295 or s == 335 or s == 395 or s == 455 or s == 505 or s == 595 or s == 685 or s == 715 or s == 795 or s == 885 or s == 945 or s == 1045 or s == 1155 or s == 1255 or s == 1455 or s == 1555 or s == 1655 or s == 1755 or s == 1855 or s == 1955 or s == 2055 or s == 2255 or s == 2355 or s == 2455 or s == 2555 or s == 2655 or s == 2755 or s == 2855 or s == 2955 or s == 3055 or s == 3255 or s == 3455 or s == 3555 or s == 3655 or s == 3755 or s == 3855 or s == 3955 or s == 4055 or s == 4255 or s == 4455 or s == 4555 or s == 4655 or s == 4755 or s == 4855 or s == 4955 or s == 5055:\n            s += 1\n            s = s % 501\n            continue\n        s = s % 501\n        if s == 0:\n            break\n        if s == 1:\n            s += 2\n            s = s % 501\n            continue\n        s += 2\n        s = s % 501\n        if s == 1:\n            s += 2\n            s = s % 501\n            continue\n        s += 2\n        s = s % 501\n    if s == 26:\n        return 0\n    if s == 27:\n        s = 1\n        return s\n    if s == 28:\n        s = 2\n        return s\n    if s == 29:\n        s = 3\n        return s\n    if s == 30:\n        s = 4\n        return s\n    if s == 31:\n        s = 5\n        return s\n    if s == 32:\n        s = 6\n        return s\n    if s == 33:\n        s = 7\n        return s\n    if s == 34:\n        s = 8\n        return s\n    if s == 35:\n        s = 9\n        return s\n    if s == 36:\n        s = 10\n        return s\n    if s == 37:\n        s = 11\n        return s\n    if s == 38:\n        s = 12\n        return s\n    if s == 39:\n        s = 13\n        return s\n    if s == 40:\n        s = 14\n        return s\n    if s == 41:\n        s = 15\n        return s\n    if s == 42:\n        s = 16\n        return s\n    if s == 43:\n        s = 17\n        return s\n    if s == 44:\n        s = 18\n        return s\n    if s == 45:\n        s = 19\n        return s\n    if s == 46:\n        s = 20\n        return s\n    if s == 47:\n        s = 21\n        return s\n    if s == 48:\n        s = 22\n        return s\n    if s == 49:\n        s = 23\n        return s\n    if s == 50:\n        s = 24\n        return s\n    if s == 51:\n        s = 25\n        return s\n    if s == 52:\n        s = 26\n        return s\n    if s == 53:\n        s = 27\n        return s\n    if s == 54:\n        s = 28\n        return s\n    if s == 55:\n        s = 29\n        return s\n    if s == 56:\n        s = 30\n        return s\n    if s == 57:\n        s = 31\n        return s\n    if s == 58:\n        s = 32\n        return s\n    if s == 59:\n        s = 33\n        return s\n    if s == 60:\n        s = 34\n        return s\n    if s == 61:\n        s = 35\n        return s\n    if s == 62:\n        s = 36\n        return s\n    if s == 63:\n        s = 37\n        return s\n    if s == 64:\n        s = 38\n        return s\n    if s == 65:\n        s = 39\n        return s\n    if s == 66:\n        s = 40\n        return s\n    if s == 67:\n        s = 41\n        return s\n    if s == 68:\n        s = 42\n        return s\n    if s == 69:\n        s = 43\n        return s\n    if s == 70:\n        s = 44\n        return"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    p, x, y = map(int, stdin.split())\n    return str(p-y//(x-y) * x + y // (x-y) * (x-y) // 2)\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    p, x, y = map(int, stdin.split())\n    s = p // 50 * 75 + p // 100 * 75 + p // 50 * 75\n    i = (s + 42) % 475\n    print((s + i + i) % 475)\n\nstdin = input()\nsolution(stdin)"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    p, x, y = map(int, stdin.split())\n    return str(min(p - y, x, p - y + x))\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the minimum distance that Winnie has to travel to have a meal.\"\"\"\n    n = int(stdin)\n    a, b, c = map(int, stdin.split())\n    if n >= a:\n        return \"-\"\n    if n >= a + b:\n        return \"-\"\n    if n >= a + b + c:\n        return \"-\"\n    min_distance = a + b + c\n    min_distance += min(a, b, c)\n    return str(min_distance)\n\"\"\"\ndef"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a, b, c = map(int, stdin.split())\n    return str(a + min(b, c) + min(a, b) + min(a, c))\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c = list(map(int, stdin.split()))\n    return str(n * (a + b + c))\nprint(solution(input()))\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, a, b, c = map(int, stdin.split())\n    print(min(n*min(a, b, c), n*min(a, b, c) + n - 1))\n    return n*min(a, b, c)\n\nsolution(input())\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 3\n   ... 2\n   ... 3\n   ... 1\n   ... \n   ... ''')\n    '3'\n    \"\"\"\n    n = int(stdin.split()[0])\n    a = int(stdin.split()[1])\n    b = int(stdin.split()[2])\n    c = int(stdin.split()[3])\n\n    if n == 1:\n        return str(min(a, b, c))\n    else:\n        if a > b:\n            a, b = b, a\n        if a > c:\n            a, c = c, a\n        if b > c:\n            b, c = c, b\n        return str(min(a, b, c) + solution('''\n   ... {}\n   ... {}\n   ... {}\n   ... {}\n   ... '''.format(a - 2, a - 1, a - 1, a)))\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return str(a + b + c)\n\nprint(solution(input()))"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c = map(int, stdin.split())\n    return str(n*a + n*b + c)\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    for _ in range(int(stdin.strip())):\n        a = int(stdin.strip())\n        print(min_distance(a))\n    return '0'\n\ndef"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\n>>> solution('5\\n2\\n3\\n1')\n'1'\n>>> solution('1\\n2\\n3\\n5')\n'0'\n\n'''\n\n\ndef"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x1, x2, x3 = map(int, stdin.split())\n    if x1 == x2 and x2 == x3:\n        return 0\n    return abs(x1 - x2) + abs(x2 - x3) + abs(x3 - x1)\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x_1, x_2, x_3 = list(map(int, stdin.split()))\n    return str(min(x_1, x_2, x_3))\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    _, x_1, x_2, x_3 = map(int, stdin.split())\n    return str(abs(x_1 - x_3) + abs(x_2 - x_3))\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Input:\n    # x_1, x_2, x_3 = map(int, stdin.split())\n    x_1, x_2, x_3 = map(int, input().split())\n    # Do not print anything. Just print and return.\n    if x_1 == x_2 == x_3:\n        return str(x_1)\n    if x_1 == x_2:\n        return str(x_1)\n    if x_1 == x_3:\n        return str(x_1)\n    if x_2 == x_3:\n        return str(x_2)\n    if x_1 > x_2:\n        return str(abs(x_1 - x_2) + x_3)\n    if x_2 > x_3:\n        return str(abs(x_2 - x_3) + x_1)\n    if x_1 > x_3:\n        return str(abs(x_1 - x_3) + x_2)\n    if x_3 > x_1:\n        return str(abs(x_3 - x_1) + x_2)\n    else:\n        return str(abs(x_3 - x_2) + x_1)\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x_1, x_2, x_3 = map(int, stdin.split())\n    return str(int(abs(x_1 - x_2) + abs(x_2 - x_3) + abs(x_1 - x_3)) if x_1 > x_2 and x_2 > x_3 else -1)"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x_1, x_2, x_3 = map(int, stdin.strip().split())\n    return str(x_1 + x_2 + x_3 - max(x_1, x_2, x_3))\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x_1, x_2, x_3 = map(int, stdin.strip().split())\n    distance_1 = abs(x_1 - x_2)\n    distance_2 = abs(x_2 - x_3)\n    distance_3 = abs(x_3 - x_1)\n    return min(distance_1, distance_2, distance_3)\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x1, x2, x3 = map(int, stdin.split())\n    \n    #x1, x2 and x3 are sorted\n    if x1 > x3 or x2 > x3:\n        return -1\n    \n    if x1 == x2 and x2 == x3:\n        return 0\n    \n    #find intersection point\n    x = (x1+x2+x3)/2\n    \n    #distance between the three points\n    dist = abs(x-x1)+abs(x-x2)+abs(x-x3)\n    \n    return dist\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    x_1, x_2, x_3 = map(int, stdin[0].split())\n    x_1, x_2, x_3 = int(x_1), int(x_2), int(x_3)\n\n    return abs(x_1 - x_2) + abs(x_2 - x_3) + abs(x_3 - x_1)\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x1, x2, x3 = map(int, stdin.split())\n    if x1 == x2 and x2 == x3:\n        return 0\n    elif x1 == x2 or x2 == x3:\n        return min(abs(x1-x2), abs(x1-x3), abs(x3-x2))\n    else:\n        return min(abs(x1-x2), abs(x2-x3), abs(x3-x1))\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    if len(set(a)) == 2:\n        return -1\n\n    if n == 1:\n        if a[0] == x:\n            return 1\n        else:\n            return 0\n\n    for i in range(1, n):\n        if a[i] == x:\n            if a[i] == a[i - 1]:\n                return -1\n        else:\n            if a[i - 1] == x:\n                return -1\n            else:\n                return 1"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    x = int(stdin.split()[1])\n    array = stdin.split()[2:]\n    array = list(map(int, array))\n    print(array)\n\n    if array[0] == array[1]:\n        return -1\n    if array[1] == array[2]:\n        return -1\n    count = 0\n    while array[0]!= x:\n        for i in range(1, len(array)):\n            if array[i] == array[i - 1]:\n                array[i - 1] = x\n                count += 1\n                if count > 2:\n                    return -1\n        array = list(map(lambda x: x + x, array))\n        count = 0\n    if array == array[::-1]:\n        return count\n    else:\n        return -1\n\n\n\nprint(solution(\"2 228\"))\nprint(solution(\"3 7\"))\nprint(solution(\"4 3\"))\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    c = collections.Counter(a)\n    if len(c) == 2 and c[a[0]] == 2:\n        return \"0\"\n    if len(c) == 2 and c[a[0]] == 1:\n        return \"1\"\n    if len(c) == 2 and c[a[1]] == 1:\n        return \"1\"\n    return str(min(len(c), 2))\n\nsolution(\"3 7\")\nsolution(\"4 3\")\nsolution(\"2 1\")\n\"\"\"\n\n\ndef"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, x = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    dp = [0] * n\n    dp[0] = 1\n    for i in range(1, n):\n        count = 1\n        for j in range(i):\n            if a[i] == a[j]:\n                count += 1\n        if count == 1:\n            dp[i] = dp[i - 1] + 1\n        else:\n            dp[i] = -1\n    return str(max(dp))\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"1\" if len(stdin) <= 2 else \"0\"\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    inp = stdin.split()\n    arr = inp[1].split()\n    n = int(inp[0])\n    x = int(inp[2])\n    arr = list(map(int, arr))\n    curr_len = len(arr)\n    for i in range(len(arr)):\n        if arr[i] == x:\n            curr_len -= 1\n            arr[i] = x\n    if curr_len == n - 2:\n        return \"0\"\n    if curr_len > n - 2:\n        return -1\n    if curr_len == n - 2:\n        return \"1\"\n    if curr_len == n - 1:\n        return \"0\"\n    return \"0\"\n\nsolution(input())\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    a = sorted(map(int, stdin.split()))\n\n    def possible_min(arr, x):\n        if len(arr) < 2:\n            return -1\n        elif len(arr) == 2:\n            return 0 if arr[0] == arr[1] else -1\n        elif len(arr) == 3:\n            return -1 if arr[0] == arr[1] or arr[1] == arr[2] else 1\n        else:\n            n = len(arr)\n            for i in range(1, n):\n                if (arr[i-1] + x) & (arr[i] + x) == 0:\n                    return 0\n            return -1\n\n    def possible_max(arr, x):\n        if len(arr) < 2:\n            return -1\n        elif len(arr) == 2:\n            return 0 if arr[0] == arr[1] else -1\n        elif len(arr) == 3:\n            return -1 if arr[0] == arr[1] or arr[1] == arr[2] else 1\n        else:\n            n = len(arr)\n            for i in range(1, n):\n                if (arr[n-i-1] + x) & (arr[n-i] + x) == 0:\n                    return 0\n            return -1\n\n    if possible_min(a, x) == 1 or possible_max(a, x) == 1:\n        return 1\n    else:\n        return -1\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def bit_and(bit1: int, bit2: int) -> int:\n        return bit1 & bit2\n\n    n = int(stdin.split()[0])\n    x = int(stdin.split()[1])\n    arr = [int(i) for i in stdin.split()[2:]]\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] == arr[j]:\n                count += 1\n                arr[i] = x\n                arr[j] = x\n    if count < 2:\n        return count\n    else:\n        return -1\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    if len(set(a)) < n:\n        return str(len(set(a)))\n    if len(set(a)) == n:\n        return \"0\"\n\n    print(1)\n    # def get_num(a, x):\n    #     ret = 0\n    #     for i in range(len(a)):\n    #         if a[i] == x:\n    #             ret += 1\n    #     return ret\n    #\n    # def update(a, x, num):\n    #     for i in range(len(a)):\n    #         if a[i] == x:\n    #             a[i] = num\n    #     return a\n\n    # def is_pair(a, x):\n    #     ret = False\n    #     for i in range(len(a)):\n    #         if a[i] == x:\n    #             ret = True\n    #     return ret\n\n    # def swap(a, idx1, idx2):\n    #     tmp = a[idx1]\n    #     a[idx1] = a[idx2]\n    #     a[idx2] = tmp\n    #     return a\n\n    # def check(a, x):\n    #     ret = True\n    #     for i in range(len(a)):\n    #         if a[i]!= x:\n    #             ret = False\n    #             break\n    #     return ret\n\n    # def get_count(a, x):\n    #     ret = 0\n    #     for i in range(len(a)):\n    #         if a[i] == x:\n    #             ret += 1\n    #     return ret\n\n    # def update_a(a, x, num):\n    #     for i in range(len(a)):\n    #         if a[i] == x:\n    #             a[i] = num\n\n    # def swap(a, idx1, idx2):\n    #     tmp = a[idx1]\n    #     a[idx1] = a[idx2]\n    #     a[idx2] = tmp\n    #     return a\n\n    # a = a + x\n    # a = list(a)\n    #\n    # i = 0\n    #\n    # while True:\n    #     # i = 0\n    #     # if not check(a, x):\n    #     #     break\n    #     # else:\n    #     #     i += 1\n    #     if get_num(a, x) == 2:\n    #         # ret = swap(a, i, i + 1)\n    #         print(i)\n    #         break\n    #     else:\n    #         i += 1\n    #         ret = update(a, x, i)\n    #\n    #     if ret == a:\n    #         print(i)\n    #         break\n    #\n    # # return get_count(a, x)\n    # return str(i)\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h, w = map(int, stdin.split())\n    return \"YES\" if is_valid(stdin, h, w) else \"NO\"\n\n\ndef"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return 'NO'\n    # Your code here\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    h, w = list(map(int, stdin.split()))\n    lines = stdin.splitlines()\n    for i, line in enumerate(lines):\n        if '*' in line:\n            left_border = i\n            left_max = len(line)\n        if '.' in line:\n            right_border = i\n            right_max = len(line)\n        if i > 0 and i < len(lines) - 1 and right_border - left_border >= 2 and left_max > right_max:\n            return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    h, w = map(int, stdin.strip().split())\n    picture = stdin.strip().split()\n    answer = \"NO\"\n\n    # for each row\n    for row in range(h):\n        # for each column\n        for col in range(w):\n            # if the char is equal to '*'\n            if picture[row][col] == '*':\n                # if the char is equal to '.' and the char in the next row is '*'\n                if picture[row + 1][col] == '.' and picture[row + 1][col + 1] == '*':\n                    # if the char is equal to '.' and the char in the next row is '.'\n                    if picture[row + 2][col] == '.' and picture[row + 2][col + 1] == '.':\n                        # if the char is equal to '.' and the char in the next row is '.'\n                        if picture[row + 3][col] == '.' and picture[row + 3][col + 1] == '.':\n                            answer = \"YES\"\n                            return answer\n                        # else the char is equal to '.' and the char in the next row is '.'\n                        else:\n                            return \"NO\"\n                    # else the char is equal to '.' and the char in the next row is '.'\n                    else:\n                        return \"NO\"\n                # else the char is equal to '.' and the char in the next row is '.'\n                else:\n                    return \"NO\"\n            # else the char is equal to '.' and the char in the next row is '.'\n            else:\n                return \"NO\"\n    # else the char is equal to '.' and the char in the next row is '.'\n    else:\n        return \"NO\"\n\nsolution(\"1 1\")\nsolution(\"3 5\")\nsolution(\"7 7\")\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  w, h = map(int, stdin.split())\n  if h == 1 and w == 1:\n    return \"YES\"\n\n  rows = []\n  for i in range(h):\n    row = stdin[i * w:(i + 1) * w]\n    if all(s == \"*\" for s in row):\n      rows.append(row)\n  if len(rows)!= 2:\n    return \"NO\"\n  if rows[0] == rows[1]:\n    return \"NO\"\n\n  # print(rows)\n  # rows.sort()\n  # print(rows)\n  \n  i = 0\n  while i < len(rows) and rows[i] == rows[i + 1]:\n    i += 1\n\n  if i == len(rows) - 1:\n    return \"NO\"\n  return \"YES\"\n\n\n------Ideas------\n\nTo write the problem we can just pass the width of the picture and the height of the picture\n\nwe need to find out the center of the shape and check if that center is empty,\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    h, w = map(int, stdin.split())\n    n = int(stdin[0])\n    rows = []\n    for i in range(n):\n        rows.append(stdin[i+1])\n    row = rows[0]\n    i = 0\n    j = 0\n    while j < w:\n        if row[j]!= '.':\n            if row[j] == '*':\n                x = j\n                break\n            j += 1\n        j += 1\n    rows.remove(row)\n    row = rows[0]\n    i = 0\n    j = w\n    while j > 0:\n        if row[j]!= '*':\n            if row[j] == '*':\n                x = j\n                break\n            j -= 1\n        j -= 1\n    rows.remove(row)\n    if x == 0:\n        return \"NO\"\n    rows = rows[0]\n    if len(rows) % 2 == 0:\n        return \"NO\"\n    d = x\n    for i in range(n):\n        if rows[i]!= '.':\n            if rows[i] == '*':\n                c = i\n                break\n            c += 1\n    left = 1\n    right = 1\n    up = 1\n    down = 1\n    while True:\n        if left > 0:\n            if rows[c]!= '.':\n                if rows[c] == '*':\n                    c += 1\n                left += 1\n            else:\n                left = 0\n        else:\n            break\n    while True:\n        if right > 0:\n            if rows[c]!= '.':\n                if rows[c] == '*':\n                    c += 1\n                right += 1\n            else:\n                right = 0\n        else:\n            break\n    while True:\n        if up > 0:\n            if rows[c]!= '.':\n                if rows[c] == '*':\n                    c += 1\n                up += 1\n            else:\n                up = 0\n        else:\n            break\n    while True:\n        if down > 0:\n            if rows[c]!= '.':\n                if rows[c] == '*':\n                    c += 1\n                down += 1\n            else:\n                down = 0\n        else:\n            break\n    if c-1 == n-1:\n        return \"NO\"\n    if c == n:\n        return \"NO\"\n    if left == 1:\n        return \"YES\"\n    if right == 1:\n        return \"YES\"\n    if up == 1:\n        return \"YES\"\n    if down == 1:\n        return \"YES\"\n    if d == 1:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Takes a string and returns a boolean\n    \"\"\"\n    h, w = [int(x) for x in stdin.split()]\n    lines = stdin.splitlines()\n\n    def has_shape(shape, center, max_x, max_y):\n        for x in range(center[0] - 1, center[0] + 2):\n            for y in range(center[1] - 1, center[1] + 2):\n                if (x, y) == (center[0], center[1]):\n                    continue\n                if (x, y) not in shape:\n                    continue\n                if len(shape[(x, y)]) > 1:\n                    continue\n                if (x, y)!= (center[0], center[1]):\n                    continue\n                if (x, y) not in max_x or y > max_x[x]:\n                    max_x[x] = y\n        return all(len(x) == 1 for x in max_x.values())\n\n    max_x = {}\n    max_y = {}\n    for line in lines:\n        x = 0\n        for i, c in enumerate(line):\n            if c == '*':\n                if has_shape(max_x, (x, i), max_x, max_y):\n                    return 'NO'\n        x += 1\n\n    return 'YES'\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    h, w = map(int, stdin.split())\n    s = stdin.splitlines()\n    for i in range(h):\n        if len(s[i])!= w:\n            return \"NO\"\n        for j in range(w):\n            if j == 0 or j == w - 1:\n                if s[i][j]!= s[i][j + 1] or s[i][j]!= s[i - 1][j]:\n                    return \"NO\"\n            else:\n                if s[i][j]!= s[i][j - 1] or s[i][j]!= s[i - 1][j]:\n                    return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    h, w = map(int, stdin.split())\n    graph = [[stdin[i + j] for j in range(w)] for i in range(h)]\n\n    def is_one(graph: List[List[str]]) -> bool:\n        for i in range(h - 1):\n            for j in range(w - 1):\n                if graph[i][j]!= graph[i + 1][j]:\n                    return False\n        return True\n\n    def is_two(graph: List[List[str]]) -> bool:\n        for i in range(h - 1):\n            for j in range(w - 1):\n                if graph[i][j]!= graph[i][j + 1] or graph[i][j]!= graph[i + 1][j]:\n                    return False\n        return True\n\n    if is_one(graph):\n        return \"YES\"\n    if is_two(graph):\n        return \"YES\"\n\n    return \"NO\"\n\n\n\n'''\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    if a == 0 or b == 0:\n        return \"NO\"\n    if n < a or n < b:\n        return \"NO\"\n    matrix = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                matrix[i][j] = 1\n            if (i+1) == j:\n                matrix[i][j] = 1\n    return \"YES\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    m = [[0] * n for i in range(n)]\n    complement = n - a - b\n    for i in range(n):\n        for j in range(n):\n            if i!= j and a > m[i][j] > b:\n                m[i][j] = 1\n            if j!= i and b > m[i][j] > a:\n                m[i][j] = 1\n    for i in range(n):\n        if sum(m[i])!= complement:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    for i in range(a):\n        if (n - i) % (a + b) == 0:\n            n -= i\n            return \"YES\"\n\n    return \"NO\""
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    if n == a == b:\n        return \"YES\"\n    if n == a + b:\n        return \"YES\"\n    if n == a * b:\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = list(map(int, stdin.split()))\n    if a == b:\n        for i in range(n):\n            for j in range(i, n):\n                if i!= j:\n                    if j < i:\n                        print(\"1\", end=\"\")\n                    else:\n                        print(\"0\", end=\"\")\n                else:\n                    print(\"0\", end=\"\")\n            print()\n    else:\n        print(\"NO\")\n\nsolution(input())\n\n'''\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split()\n    n, a, b = int(lines[0]), int(lines[1]), int(lines[2])\n    if n >= 2 * max(n, a, b) + 1:\n        print('NO')\n        return\n\n    G = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        for j in range(i, n):\n            G[i][j] = G[j][i] = 1\n    comp = [False] * n\n    comp_inv = [False] * n\n    for i in range(n):\n        comp[i] = True\n        comp_inv[i] = True\n        for j in range(n):\n            if G[i][j]:\n                comp[j] = False\n                comp_inv[i] = False\n    comp.sort()\n    comp_inv.sort()\n\n    def check_comp(comp: List[int], comp_inv: List[int], val_comp: List[int]) -> bool:\n        for i in range(len(comp)):\n            if comp[i] and not comp_inv[i]:\n                return False\n        return True\n\n    res = True\n    for i in range(n):\n        if comp[i]:\n            for j in range(i + 1, n):\n                if comp_inv[j]:\n                    val_comp = [0] * len(comp)\n                    val_comp[i] = 1\n                    val_comp[j] = 1\n                    if not check_comp(comp, comp_inv, val_comp):\n                        res = False\n                        break\n    if res:\n        for i in range(n):\n            if comp_inv[i]:\n                for j in range(n):\n                    if comp[j]:\n                        G[i][j] = 1\n                        G[j][i] = 1\n    print('YES')\n    return '\\n'.join([''.join(map(str, g)) for g in G])\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    if n == 1:\n        return \"YES\"\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    dp_complement = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                dp[i][j] = 1\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                continue\n            for k in range(n):\n                if i == k or j == k:\n                    continue\n                if dp[i][k] == 1 and dp[k][j] == 1:\n                    dp_complement[i][j] = 1\n                    dp_complement[i][k] = 1\n                    dp_complement[k][j] = 1\n    ans = \"NO\"\n    if a <= n and b <= n:\n        if a == 0 or b == 0:\n            ans = \"YES\"\n        elif a == b:\n            for i in range(n):\n                for j in range(n):\n                    if i == j:\n                        continue\n                    if dp_complement[i][j] == 0:\n                        ans = \"NO\"\n                        break\n            if ans == \"YES\":\n                return ans\n        else:\n            for i in range(n):\n                for j in range(n):\n                    if i == j:\n                        continue\n                    if dp_complement[i][j] == 1:\n                        ans = \"NO\"\n                        break\n            if ans == \"YES\":\n                return ans\n    return ans"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    if n == 1:\n        return 'NO'\n    adj = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            adj[i][j] = 1 if (i == j or i + j == n - 1) else 0\n    for i in range(n):\n        for j in range(n):\n            if adj[i][j] == 1:\n                adj[i][j] = 0\n            elif adj[i][j] == 0:\n                adj[i][j] = 1\n    # print(adj)\n    if a == b == n:\n        return 'YES'\n    ans = n\n    while True:\n        if a == ans or b == ans:\n            break\n        ans -= 1\n    # print(ans)\n    ans = n - ans - 1\n    for i in range(n):\n        for j in range(n):\n            if adj[i][j] == 0:\n                ans = n - ans - 1\n    if ans == a and b == ans:\n        return 'YES'\n    if ans == a or ans == b:\n        return 'YES'\n    if ans == b or ans == a:\n        return 'YES'\n    if ans == a + b:\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = list(map(int, stdin.split()))\n    g = [[0] * n for _ in range(n)]\n    visited = [False] * n\n    res = \"NO\"\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if (i, j) in g:\n                continue\n            if visited[i] or visited[j]:\n                continue\n            visited[i] = visited[j] = True\n            g[i][j] = g[j][i] = 1\n            dfs(i, j, a, b, g, res, visited)\n            visited[i] = visited[j] = False\n    return res\n\n\ndef"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    if n == a == b == 1:\n        return \"YES\"\n    elif n == 1 and not (a == 1 and b == 1):\n        return \"NO\"\n    elif n == 1:\n        return \"YES\"\n    elif a == b == 1:\n        return \"YES\"\n    elif b == 1:\n        return \"YES\"\n    elif a == 1:\n        return \"YES\"\n    elif b == 1:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 466,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    c, d, k = map(int, stdin.split())\n    # 1. \u0414\u043e\u0441\u0442\u0430\u0451\u043c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u0438\u0437 \u0444\u0430\u0439\u043b\u0430\n    n, m = map(int, input().split())\n    rank = list(map(int, input().split()))\n\n    # 2. \u0421\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u044f\n    rank.sort()\n\n    # 3. \u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u043a\u043e\u043b-\u0432\u043e \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u0435\u043c\u044b\u0445 \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043e\u0432\n    interval = 0\n    for i in range(0, len(rank) - 1):\n        interval += abs(rank[i] - rank[i + 1])\n\n    # 4. \u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u043a\u043e\u043b-\u0432\u043e \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u0435\u043c\u044b\u0445 \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043e\u0432\n    #     \u043f\u043e\u0437\u0438\u0446\u0438\u043e\u043d\u0438\u0440\u0443\u0435\u043c \u0437\u0430\u0434\u0430\u0447\u0438 \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u044b \u043d\u0430 \u043a\u043e\u043b-\u0432\u043e \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043e\u0432\n    #     \u043f\u043e\u0437\u0438\u0446\u0438\u043e\u043d\u0438\u0440\u0443\u0435\u043c \u0437\u0430\u0434\u0430\u0447\u0438 \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u044b \u043d\u0430 \u043a\u043e\u043b-\u0432\u043e \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043e\u0432\n    #     \u043f\u043e\u0437\u0438\u0446\u0438\u043e\u043d\u0438\u0440\u0443\u0435\u043c \u0437\u0430\u0434\u0430\u0447\u0438 \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u044b \u043d\u0430 \u043a\u043e\u043b-\u0432\u043e \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043e\u0432\n    #     \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u043a\u043e\u043b-\u0432\u043e \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043e\u0432 \u0437\u0430 \u043f\u043e\u0434\u0432\u0435\u0440\u0442\u043a\u0443\n    #     \u043f\u043e\u0437\u0438\u0446\u0438\u043e\u043d\u0438\u0440\u0443\u0435\u043c \u0437\u0430\u0434\u0430\u0447\u0438 \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u044b \u043d\u0430 \u043a\u043e\u043b-\u0432\u043e \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043e\u0432\n    #     \u043f\u043e\u0437\u0438\u0446\u0438\u043e\u043d\u0438\u0440\u0443\u0435\u043c \u0437\u0430\u0434\u0430\u0447\u0438 \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u044b \u043d\u0430 \u043a\u043e\u043b-\u0432\u043e \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043e\u0432\n    #     \u043f\u043e\u0437\u0438\u0446\u0438\u043e\u043d\u0438\u0440\u0443\u0435\u043c \u0437\u0430\u0434\u0430\u0447\u0438 \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u044b \u043d\u0430 \u043a\u043e\u043b-\u0432\u043e \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043e\u0432\n    #     \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u043a\u043e\u043b-\u0432\u043e \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043e\u0432 \u0437\u0430 \u043f\u043e\u0434\u0432\u0435\u0440\u0442\u043a\u0443\n    #     \u043f\u043e\u0437\u0438\u0446\u0438\u043e\u043d\u0438\u0440\u0443\u0435\u043c \u0437\u0430\u0434\u0430\u0447\u0438 \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u044b \u043d\u0430 \u043a\u043e\u043b-\u0432\u043e \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043e\u0432\n    #     \u043f\u043e\u0437\u0438\u0446\u0438\u043e\u043d\u0438\u0440\u0443\u0435\u043c \u0437\u0430\u0434\u0430\u0447\u0438 \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u044b \u043d\u0430 \u043a\u043e\u043b-\u0432\u043e \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043e\u0432\n    #     \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u043a\u043e\u043b-\u0432\u043e \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043e\u0432 \u0437\u0430 \u043f\u043e\u0434\u0432\u0435\u0440\u0442\u043a\u0443\n    #     \u043f\u043e\u0437\u0438\u0446\u0438\u043e\u043d\u0438\u0440\u0443\u0435\u043c \u0437\u0430\u0434\u0430\u0447\u0438 \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u044b \u043d\u0430 \u043a\u043e\u043b-\u0432\u043e \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043e\u0432\n    #     \u043f\u043e\u0437\u0438\u0446\u0438\u043e\u043d\u0438\u0440\u0443\u0435\u043c \u0437\u0430\u0434\u0430\u0447\u0438 \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u044b \u043d\u0430 \u043a\u043e\u043b-\u0432\u043e \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043e\u0432\n    #     \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u043a\u043e\u043b-\u0432\u043e \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043e\u0432 \u0437\u0430 \u043f\u043e\u0434\u0432\u0435\u0440\u0442\u043a\u0443\n    #     \u043f\u043e\u0437\u0438\u0446\u0438\u043e\u043d\u0438\u0440\u0443\u0435\u043c \u0437\u0430\u0434\u0430\u0447\u0438 \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u044b \u043d\u0430 \u043a\u043e\u043b-\u0432\u043e \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043e\u0432\n    #     \u043f\u043e\u0437\u0438\u0446\u0438\u043e\u043d\u0438\u0440\u0443\u0435\u043c \u0437\u0430\u0434\u0430\u0447\u0438 \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u044b \u043d\u0430 \u043a\u043e\u043b-\u0432\u043e \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043e\u0432\n    #     \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u043a\u043e\u043b-\u0432\u043e \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043e\u0432 \u0437\u0430 \u043f\u043e\u0434\u0432\u0435\u0440\u0442\u043a\u0443\n    #     \u043f\u043e\u0437\u0438\u0446\u0438\u043e\u043d\u0438\u0440\u0443\u0435\u043c \u0437\u0430\u0434\u0430\u0447\u0438 \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u044b \u043d\u0430 \u043a\u043e\u043b-\u0432\u043e \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043e\u0432\n    #     \u043f\u043e\u0437\u0438\u0446\u0438\u043e\u043d\u0438\u0440\u0443\u0435\u043c \u0437\u0430\u0434\u0430\u0447\u0438 \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u044b \u043d\u0430 \u043a\u043e\u043b-\u0432\u043e \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043e\u0432\n    #     \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u043a\u043e\u043b-\u0432\u043e \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043e\u0432 \u0437\u0430 \u043f\u043e\u0434\u0432\u0435\u0440\u0442\u043a\u0443\n    #     \u043f\u043e\u0437\u0438\u0446\u0438\u043e\u043d\u0438\u0440\u0443\u0435\u043c \u0437\u0430\u0434\u0430\u0447\u0438 \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u044b \u043d\u0430 \u043a\u043e\u043b-\u0432\u043e \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043e\u0432\n    #     \u043f\u043e\u0437\u0438\u0446\u0438\u043e\u043d\u0438\u0440\u0443\u0435\u043c \u0437\u0430\u0434\u0430\u0447\u0438 \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u044b \u043d\u0430 \u043a\u043e\u043b-\u0432\u043e \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043e\u0432\n    #     \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u043a\u043e\u043b-\u0432\u043e \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043e\u0432 \u0437\u0430 \u043f\u043e\u0434\u0432\u0435\u0440\u0442\u043a\u0443\n    #     \u043f\u043e\u0437\u0438\u0446\u0438\u043e\u043d\u0438\u0440\u0443\u0435\u043c \u0437\u0430\u0434\u0430\u0447\u0438 \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u044b \u043d\u0430 \u043a\u043e\u043b-\u0432\u043e \u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043e\u0432\n    #     \u043f\u043e\ufffd"
    },
    {
        "number": 466,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    c, d, k = map(int, stdin.split())\n    main = min(c, d)\n    additional = max(c, d) - min(c, d)\n    print(main * (main + 1) // 2)\n    return main * (main + 1) // 2 + additional * (additional + 1) // 2 - k\n    # return min(c, d) * (min(c, d) + 1) // 2 + max(c, d) * (max(c, d) + 1) // 2 - k\n    # if k <= d:\n    #     print(min(c, d) * (min(c, d) + 1) // 2)\n    # else:\n    #     print(min(c, d) * (min(c, d) + 1) // 2 + max(c, d) * (max(c, d) + 1) // 2 - k)"
    },
    {
        "number": 466,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    main_n = n * m\n    add_n = m * k\n    return str(min(main_n, add_n))"
    },
    {
        "number": 466,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    c, d = [int(x) for x in stdin.split()]\n    n, m = [int(x) for x in stdin.split()]\n    k = int(stdin.split()[2])\n    if d == c:\n        return n * m - k\n    else:\n        return n * m - 2 * c - k\n"
    },
    {
        "number": 466,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Task:\n    The number of problems in the main and additional rounds must be equal to the number of people that got their prize.\n    The total amount of used problems is minimized.\n    '''\n\n    _, n, m, k = stdin.split()\n    n, m, k = int(n), int(m), int(k)\n    # prepare\n    c_num = 0\n    d_num = 0\n    main_add_num = 0\n    main_num = 0\n    add_num = 0\n    add_num_bef_main = 0\n    main_add_num_bef_main = 0\n    # calculate\n    while n!= 0 and d_num!= 0:\n        if n > d_num:\n            c_num += n - d_num\n            n = n - d_num\n        else:\n            d_num = d_num - n\n            main_add_num = main_add_num + n\n            n = 0\n        if n > m:\n            add_num = add_num + n - m\n            main_add_num_bef_main = main_add_num_bef_main + m\n            n = 0\n        else:\n            m = m - n\n            add_num_bef_main = add_num_bef_main + n\n            n = 0\n        if n == 0:\n            main_num = main_num + main_add_num\n            add_num = add_num + add_num_bef_main\n            main_add_num = 0\n            main_add_num_bef_main = 0\n            n = 0\n        if n == m:\n            add_num = add_num + add_num_bef_main\n            main_add_num = main_add_num + main_add_num_bef_main\n            main_add_num_bef_main = 0\n            n = 0\n    return str(c_num)\n"
    },
    {
        "number": 466,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    return str(max((n-1)*m+k*(n-1), n*m+(n-1)*(m-1)))\n    \n    \n"
    },
    {
        "number": 466,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, m = map(int, stdin.split())\n    problems_main = [i for i in range(1, n + 1)]\n    problems_additional = [i for i in range(1, n + 1)]\n\n    while len(problems_main) > 1:\n        problems_main = list(set(problems_main) - set(problems_main[:m]))\n    if len(problems_additional) >= m:\n        if len(set(problems_main[:m])) < n:\n            return -1\n        else:\n            return m + len(set(problems_main[:m]))\n    else:\n        if len(set(problems_main[:m])) < n:\n            return -1\n        else:\n            return m + len(set(problems_main[:m]))\n    return m\n"
    },
    {
        "number": 466,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    in_file = io.StringIO(stdin)\n    _, _, k = map(int, in_file.readline().split())\n    n = int(in_file.readline())\n    m = int(in_file.readline())\n    n_tot = n + m\n    n_win = max(m, n)\n    if n_tot >= n_win * 2 + 2:\n        return str(n_win * 2 + 2)\n    else:\n        return str(n_tot + k)\n\nprint(solution('''1 10\n7 2\n1'''))\nprint(solution('''2 2\n2 1\n2'''))\nprint(solution('''3 4\n3 1\n3'''))\nprint(solution('''1 10\n7 2\n1'''))\nprint(solution('''2 2\n2 1\n2'''))\nprint(solution('''3 4\n3 1\n3'''))\nprint(solution('''1 10\n7 2\n1'''))\nprint(solution('''2 2\n2 1\n2'''))\nprint(solution('''3 4\n3 1\n3'''))\n"
    },
    {
        "number": 466,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    c, d, n, m, k = stdin.split()\n    if int(n) < int(m):\n        return '0'\n    if int(n) * int(m) >= int(k):\n        return '1'\n    if int(n) * int(m) > int(k) and int(n) + int(m) == int(k):\n        return '1'\n    if int(n) * int(m) > int(k) and int(n) + int(m) < int(k):\n        return '2'\n    return '0'\n"
    },
    {
        "number": 466,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    c, d = map(int, stdin.split())\n    n, m = map(int, stdin.split())\n    k = int(stdin)\n    n = n + m\n    if k == 0:\n        k = n\n    n = n + m\n    if c < 2 * k:\n        return '0'\n    elif c + d <= 2 * k:\n        return str(c // 2 + 1)\n    elif c + d > 2 * k:\n        return str(c // 2 + 2)\n    else:\n        return '1'\n    \n\n    \n"
    },
    {
        "number": 467,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    grid = stdin.strip()\n    for _ in range(1000):\n        grid = list(grid)\n        for i, c in enumerate(grid):\n            if c == 'A':\n                grid[i] = 'B'\n            elif c == 'B':\n                grid[i] = 'C'\n            elif c == 'C':\n                grid[i] = 'D'\n            elif c == 'D':\n                grid[i] = 'E'\n            elif c == 'E':\n                grid[i] = 'F'\n            elif c == 'F':\n                grid[i] = 'G'\n            elif c == 'G':\n                grid[i] = 'H'\n            elif c == 'H':\n                grid[i] = 'I'\n            elif c == 'I':\n                grid[i] = 'J'\n            elif c == 'J':\n                grid[i] = 'K'\n            elif c == 'K':\n                grid[i] = 'L'\n            elif c == 'L':\n                grid[i] = 'M'\n            elif c == 'M':\n                grid[i] = 'N'\n            elif c == 'N':\n                grid[i] = 'O'\n            elif c == 'O':\n                grid[i] = 'P'\n            elif c == 'P':\n                grid[i] = 'Q'\n            elif c == 'Q':\n                grid[i] = 'R'\n            elif c == 'R':\n                grid[i] = 'S'\n            elif c == 'S':\n                grid[i] = 'T'\n            elif c == 'T':\n                grid[i] = 'U'\n            elif c == 'U':\n                grid[i] = 'V'\n            elif c == 'V':\n                grid[i] = 'W'\n            elif c == 'W':\n                grid[i] = 'X'\n            elif c == 'X':\n                grid[i] = 'Y'\n            elif c == 'Y':\n                grid[i] = 'Z'\n            elif c == 'Z':\n                grid[i] = 'A'\n    return ''.join(grid)\n"
    },
    {
        "number": 467,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution to the problem.\n    \"\"\"\n    lines = stdin.strip().split(\"\\n\")\n    lines = list(lines)\n    d = {}\n    for line in lines:\n        for char in line:\n            if char in d:\n                d[char] += 1\n            else:\n                d[char] = 1\n    letter = \"\"\n    numbers = []\n    for letter, count in d.items():\n        letter = letter.upper()\n        if count == 1:\n            letter = letter.upper()\n        numbers.append(letter)\n    return \"\".join(numbers)\n\n\nsolution(sys.stdin)\n"
    },
    {
        "number": 467,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid_length(string):\n        return len(string) == 26\n\n    def is_valid_start_position(string, index):\n        if string[index] == 'A':\n            return 0 <= index <= 25\n        elif string[index] == 'B':\n            return index == 25\n        elif string[index] == 'C':\n            return 0 <= index <= 25\n        elif string[index] == 'D':\n            return index == 25\n        elif string[index] == 'E':\n            return 0 <= index <= 25\n        elif string[index] == 'F':\n            return 0 <= index <= 25\n        elif string[index] == 'G':\n            return index == 25\n        elif string[index] == 'H':\n            return 0 <= index <= 25\n        elif string[index] == 'I':\n            return index == 25\n        elif string[index] == 'J':\n            return 0 <= index <= 25\n        elif string[index] == 'K':\n            return 0 <= index <= 25\n        elif string[index] == 'L':\n            return index == 25\n        elif string[index] == 'M':\n            return 0 <= index <= 25\n        elif string[index] == 'N':\n            return 0 <= index <= 25\n        elif string[index] == 'O':\n            return index == 25\n        elif string[index] == 'P':\n            return 0 <= index <= 25\n        elif string[index] == 'Q':\n            return 0 <= index <= 25\n        elif string[index] == 'R':\n            return 0 <= index <= 25\n        elif string[index] == 'S':\n            return 0 <= index <= 25\n        elif string[index] == 'T':\n            return index == 25\n        elif string[index] == 'U':\n            return 0 <= index <= 25\n        elif string[index] == 'V':\n            return 0 <= index <= 25\n        elif string[index] == 'W':\n            return 0 <= index <= 25\n        elif string[index] == 'X':\n            return 0 <= index <= 25\n        elif string[index] == 'Y':\n            return 0 <= index <= 25\n        elif string[index] == 'Z':\n            return index == 25\n\n    def is_valid_sequence(string, start_index):\n        if string[start_index]!= 'A':\n            return False\n        else:\n            for i in range(start_index + 1, 26):\n                if i == start_index + 1 or i == start_index + 2:\n                    if string[i] == 'X':\n                        return False\n                elif i == start_index + 2 or i == start_index + 3:\n                    if string[i] == 'Y':\n                        return False\n                else:\n                    if string[i] == 'Z':\n                        return False\n            return True\n\n    def is_valid_final_position(string, index):\n        if index + 1 == 26 or index + 1 == 27 or index - 1 == 0 or index - 1 == 1 or index - 1 == 25:\n            return True\n        elif string[index + 1] == 'A':\n            return True\n        elif string[index + 1] == 'B':\n            return False\n        elif string[index + 1] == 'C':\n            return False\n        elif string[index + 1] == 'D':\n            return True\n        elif string[index + 1] == 'E':\n            return False\n        elif string[index + 1] == 'F':\n            return True\n        elif string[index + 1] == 'G':\n            return False\n        elif string[index + 1] == 'H':\n            return False\n        elif string[index + 1] == 'I':\n            return False\n        elif string[index + 1] == 'J':\n            return False\n        elif string[index + 1] == 'K':\n            return True\n        elif string[index + 1] == 'L':\n            return False\n        elif string[index + 1] == 'M':\n            return True\n        elif string[index + 1] == 'N':\n            return False\n        elif string[index + 1] == 'O':\n            return False\n        elif string[index + 1] == 'P':\n            return True\n        elif string[index + 1] == 'Q':\n            return True\n        elif string[index + 1] == 'R':\n            return False\n        elif string[index + 1] == 'S':\n            return False\n        elif string[index + 1] == 'T':\n            return True\n        elif string[index + 1] == 'U':\n            return False\n        elif string[index + 1] == 'V':\n            return False\n        elif string[index + 1] == 'W':\n            return True\n        elif string[index + 1] == 'X':\n            return False\n        elif string[index + 1] == 'Y':\n            return False\n        elif string[index + 1] == 'Z':\n            return False\n\n    def find_path(string, start_index):\n        if start_index == 26:\n            return 'Z'\n        else:\n            if start_index == 1:\n                return 'A'\n            elif start_index == 25:\n                return 'Z'\n            else:\n                for i in range(start_index + 1, 26):\n                    if i == start_index + 1 or i == start_index + 2:\n                        if string[i] == 'X':\n                            return find_path(string, start_index + 2)\n                    elif i == start_index + 2 or i == start_index + 3:\n                        if string[i] == 'Y':\n                            return find_path(string, start_index + 3)\n                    else:\n                        if string[i] == 'Z':\n                            return find_path(string, start_index + 1)\n\n    def find_path_back(string, start_index):\n        if start_index == 26:\n            return 'Z'\n        else:\n            if start_index == 1:\n                return 'A'\n            elif start_index == 25:\n                return 'Z'\n            else:\n                for i in range(start_index - 1, -1, -1):\n                    if i == start_index - 1 or i == start_index - 2:\n                        if string[i] == 'X':\n                            return find_path_back(string, start_index - 2)\n                    elif i == start_index - 2 or i"
    },
    {
        "number": 467,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    grid = stdin.split()\n    for row in grid:\n        if len(set(row)) == 27:\n            return \"\".join(sorted(row))\n    return \"Impossible\"\n\nsolution(stdin)\n"
    },
    {
        "number": 467,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Take a string as input. Return a string with the letters of the given string arranged in a spiral order.\n    \"\"\"\n    for i in range(len(stdin)):\n        stdin = stdin.replace(stdin[i], '')\n    # print(stdin)\n    if not stdin:\n        return 'Impossible'\n    result = stdin[0]\n    for i in range(len(stdin)):\n        result += stdin[i]\n    return result\n    # for i in range(len(stdin)):\n    #     result += stdin[i]\n"
    },
    {
        "number": 467,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.upper()\n    rows = []\n    for i in range(len(stdin)):\n        rows.append(stdin[i])\n        if i < len(stdin) - 1:\n            if stdin[i] == stdin[i + 1]:\n                if len(rows) >= 5:\n                    return \"Impossible\"\n    return ''.join(rows)\n\nsolution(stdin)"
    },
    {
        "number": 467,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    if stdin.isalpha():\n        grid = stdin\n        for i in range(3):\n            for j in range(3):\n                if stdin[j]!= stdin[j + 3] or stdin[i + 3]!= stdin[i]:\n                    print(\"Impossible\")\n                    return \"Impossible\"\n        print(*[stdin[i] for i in range(27)], sep='\\n')\n        return \"\".join([stdin[i] for i in range(27)])\n    else:\n        print(\"Impossible\")\n        return \"Impossible\"\n\n\nprint(solution(input()))\n\nhttps://www.hackerrank.com/challenges/grid-search-2/problem\n"
    },
    {
        "number": 467,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # this is the number of columns in the grid.\n    cols = stdin.count('Z')\n    # this is the number of rows in the grid.\n    rows = stdin.count('Y')\n\n    if cols > 13 or rows > 27:\n        print(\"Impossible\")\n        return\n    grid = stdin.replace('Y', '1')\n    grid = stdin.replace('Z', '0')\n    grid = grid.replace('X','')\n\n    # find all the tiles in the grid in the order that they appear in the string.\n    tiles = list(grid)\n\n    for i in range(cols):\n        # for each column\n        for j in range(rows):\n            # if we haven't seen this tile before, add it.\n            if tiles[i] not in seen_tiles:\n                seen_tiles.add(tiles[i])\n                # for each adjacent tile, check if it's adjacent to this tile.\n                for k in range(len(grid)):\n                    if i < k or (i == k and j < len(grid) - 1):\n                        # check if the tile is adjacent to the left tile, which is at index i - 1.\n                        if grid[i - 1] == tiles[i] and tiles[i] not in seen_tiles:\n                            seen_tiles.add(tiles[i])\n                        # check if the tile is adjacent to the right tile, which is at index i + 1.\n                        if grid[i + 1] == tiles[i] and tiles[i] not in seen_tiles:\n                            seen_tiles.add(tiles[i])\n                        # check if the tile is adjacent to the top tile, which is at index j - 1.\n                        if grid[j - 1] == tiles[i] and tiles[i] not in seen_tiles:\n                            seen_tiles.add(tiles[i])\n                        # check if the tile is adjacent to the bottom tile, which is at index j + 1.\n                        if grid[j + 1] == tiles[i] and tiles[i] not in seen_tiles:\n                            seen_tiles.add(tiles[i])\n                        # check if the tile is adjacent to the top left corner tile, which is at index j - 1 and index i - 1.\n                        if grid[j - 1] == tiles[i] and grid[i - 1] == tiles[i] and tiles[i] not in seen_tiles:\n                            seen_tiles.add(tiles[i])\n                        # check if the tile is adjacent to the top right corner tile, which is at index j - 1 and index i + 1.\n                        if grid[j - 1] == tiles[i] and grid[i + 1] == tiles[i] and tiles[i] not in seen_tiles:\n                            seen_tiles.add(tiles[i])\n                        # check if the tile is adjacent to the bottom left corner tile, which is at index j + 1 and index i - 1.\n                        if grid[j + 1] == tiles[i] and grid[i - 1] == tiles[i] and tiles[i] not in seen_tiles:\n                            seen_tiles.add(tiles[i])\n                        # check if the tile is adjacent to the bottom right corner tile, which is at index j + 1 and index i + 1.\n                        if grid[j + 1] == tiles[i] and grid[i + 1] == tiles[i] and tiles[i] not in seen_tiles:\n                            seen_tiles.add(tiles[i])\n    tiles = list(seen_tiles)\n\n    # now we need to put these tiles back in the order they were found in the input.\n    tiles.reverse()\n    # and we need to go from the top left corner to the bottom right corner.\n    tiles.reverse()\n    # now we need to put these tiles back in the order they were found in the input.\n    tiles.reverse()\n    print(tiles)\n    return \"\".join(tiles)\n\n\nsolution(input())\n\ndef"
    },
    {
        "number": 467,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    # solutions = {\n    #     \"AB\": {\n    #         \"A\": \"AB\",\n    #         \"B\": \"AE\",\n    #         \"C\": \"AH\",\n    #         \"D\": \"AI\",\n    #         \"E\": \"AL\",\n    #         \"F\": \"AM\",\n    #         \"G\": \"AR\",\n    #         \"H\": \"AS\",\n    #         \"I\": \"AT\",\n    #         \"J\": \"AX\",\n    #         \"K\": \"AX\",\n    #         \"L\": \"AY\",\n    #         \"M\": \"AZ\",\n    #         \"N\": \"AX\",\n    #         \"O\": \"BA\",\n    #         \"P\": \"AE\",\n    #         \"Q\": \"AE\",\n    #         \"R\": \"AG\",\n    #         \"S\": \"AY\",\n    #         \"T\": \"AY\",\n    #         \"U\": \"AY\",\n    #         \"V\": \"AZ\",\n    #         \"W\": \"AW\",\n    #         \"X\": \"AX\",\n    #         \"Y\": \"AY\",\n    #         \"Z\": \"AZ\"\n    #     },\n    #     \"BA\": {\n    #         \"B\": \"AB\",\n    #         \"A\": \"BA\",\n    #         \"C\": \"BC\",\n    #         \"D\": \"BD\",\n    #         \"E\": \"BE\",\n    #         \"F\": \"BF\",\n    #         \"G\": \"BG\",\n    #         \"H\": \"BH\",\n    #         \"I\": \"HI\",\n    #         \"J\": \"JH\",\n    #         \"K\": \"KH\",\n    #         \"L\": \"HL\",\n    #         \"M\": \"HM\",\n    #         \"N\": \"HN\",\n    #         \"O\": \"HO\",\n    #         \"P\": \"HP\",\n    #         \"Q\": \"HQ\",\n    #         \"R\": \"HR\",\n    #         \"S\": \"HS\",\n    #         \"T\": \"HT\",\n    #         \"U\": \"HU\",\n    #         \"V\": \"HV\",\n    #         \"W\": \"HW\",\n    #         \"X\": \"HX\",\n    #         \"Y\": \"HY\",\n    #         \"Z\": \"HZ\"\n    #     },\n    #     \"BC\": {\n    #         \"B\": \"BC\",\n    #         \"C\": \"CC\",\n    #         \"D\": \"CD\",\n    #         \"E\": \"CE\",\n    #         \"F\": \"CF\",\n    #         \"G\": \"CG\",\n    #         \"H\": \"CH\",\n    #         \"I\": \"CI\",\n    #         \"J\": \"JH\",\n    #         \"K\": \"KH\",\n    #         \"L\": \"HL\",\n    #         \"M\": \"HM\",\n    #         \"N\": \"HN\",\n    #         \"O\": \"HO\",\n    #         \"P\": \"HP\",\n    #         \"Q\": \"HQ\",\n    #         \"R\": \"HR\",\n    #         \"S\": \"HS\",\n    #         \"T\": \"HT\",\n    #         \"U\": \"HU\",\n    #         \"V\": \"HV\",\n    #         \"W\": \"HW\",\n    #         \"X\": \"HX\",\n    #         \"Y\": \"HY\",\n    #         \"Z\": \"HZ\"\n    #     },\n    #     \"CB\": {\n    #         \"C\": \"CB\",\n    #         \"B\": \"CC\",\n    #         \"A\": \"CA\",\n    #         \"D\": \"DA\",\n    #         \"E\": \"EA\",\n    #         \"F\": \"FA\",\n    #         \"G\": \"GA\",\n    #         \"H\": \"HA\",\n    #         \"I\": \"HI\",\n    #         \"J\": \"JH\",\n    #         \"K\": \"KH\",\n    #         \"L\": \"HL\",\n    #         \"M\": \"HM\",\n    #         \"N\": \"HN\",\n    #         \"O\": \"HO\",\n    #         \"P\": \"HP\",\n    #         \"Q\": \"HQ\",\n    #         \"R\": \"HR\",\n    #         \"S\": \"HS\",\n    #         \"T\": \"HT\",\n    #         \"U\": \"HU\",\n    #         \"V\": \"HV\",\n    #         \"W\": \"HW\",\n    #         \"X\": \"HX\",\n    #         \"Y\": \"HY\",\n    #         \"Z\": \"HZ\"\n    #     },\n    #     \"CD\": {\n    #         \"C\": \"CD\",\n    #         \"D\": \"DC\",\n    #         \"E\": \"EA\",\n    #         \"F\": \"FA\",\n    #         \"G\": \"GA\",\n    #         \"H\": \"HA\",\n    #         \"I\": \"HI\",\n    #         \"J\": \"JH\",\n    #         \"K\": \"KH\",\n    #         \"L\": \"HL\",\n    #         \"M\": \"HM\",\n    #         \"N\": \"HN\",\n    #         \"O\": \"HO\",\n    #         \"P\": \"HP\",\n    #         \"Q\": \"HQ\",\n    #         \"R\": \"HR\",\n    #         \"S\": \"HS\",\n    #         \"T\": \"HT\",\n    #         \"U\": \"HU\",\n    #         \"V\": \"HV\",\n    #         \"W\": \"HW\",\n    #         \"X\": \"HX\",\n    #         \"Y\": \"HY\",\n    #         \"Z\": \"HZ\"\n    #     },\n    #     \"CE\": {\n    #         \"C\": \"CE\",\n    #         \"D\": \"DC\",\n    #         \"E\": \"EE\",\n    #         \"F\": \"FF\",\n    #         \"G\": \"FF\",\n    #         \"H\": \"FF\",\n    #         \"I\": \"FF\",\n    #         \"J\": \"JH\",\n    #         \"K\": \"KH\",\n    #         \"L\": \"HL\",\n    #         \"M\": \"HM\",\n    #         \"N\": \"HN\",\n    #         \"O\": \"HO\",\n    #         \"P\": \"HP\",\n    #         \"Q\": \"HQ\",\n    #         \"R\": \"HR\",\n    #         "
    },
    {
        "number": 467,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # total_letters = len(stdin)\n    # letters_count = dict()\n\n    # letters_count = {letter: 0 for letter in stdin}\n\n    # letters_count[stdin[0]] = 1\n    # for i in range(1, total_letters):\n    #     if stdin[i] == stdin[i-1]:\n    #         letters_count[stdin[i]] += 1\n    #     else:\n    #         letters_count[stdin[i]] = 1\n    # if len(letters_count) < 26:\n    #     print(\"Impossible\")\n    # else:\n    #     for letter, count in letters_count.items():\n    #         if count == 1:\n    #             print(letter, end=\"\")\n    #         else:\n    #             print(letter, end=\"\")\n    #     print()\n    #\n    #     for letter, count in letters_count.items():\n    #         if count == 1:\n    #             continue\n    #         print(letter, end=\"\")\n    #     print()\n    # return\n    #\n    # The grid is a string of 26 letters of length 27. This solution is quite simple, but it is one of the fastest ways to solve this problem. The next best solution is to use 2D arrays, but it is a bit more difficult to implement.\n\n    # Only use for prime numbers\n    #\n    # A prime number is a number which has exactly two divisors. So we don't need to count all the primes up to 10,000,000.\n    #\n    # If the number of divisors of a prime number is even, it is a prime number. If the number of divisors of a prime number is odd, it is not a prime number.\n    #\n    # Let's see the prime numbers:\n    #\n    # 5 is a prime number since it has only one divisor - 1.\n    #\n    # 7 is a prime number since it has two divisors - 1 and 7.\n    #\n    # 13 is a prime number because it has four divisors - 1, 13, 13 and 13.\n    #\n    # Write a function that takes a positive integer and returns its prime numbers.\n    #\n    # Example:\n    #\n    # >>> prime_numbers(1)\n    # '1'\n    # >>> prime_numbers(4)\n    # '2'\n    # >>> prime_numbers(10)\n    # '3'\n    # >>> prime_numbers(25)\n    # '2, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47'\n    # >>> prime_numbers(30)\n    # '2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143, 2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267, 2269, 2273, 2281, 2"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = list(map(int, stdin.split()))\n    if x > y:\n        return '>'\n    elif x < y:\n        return '<'\n    elif x == y:\n        return '='\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    if x > y:\n        print('>')\n    elif x < y:\n        print('<')\n    elif x == y:\n        print('=')\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    if x**y < y**x:\n        return \"<\"\n    elif x**y > y**x:\n        return \">\"\n    else:\n        return \"=\"\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    if x ** y < y ** x:\n        return \"<\"\n    if x ** y > y ** x:\n        return \">\"\n    if x ** y == y ** x:\n        return \"=\"\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    if x < y:\n        return '<'\n    elif x > y:\n        return '>'\n    return '='\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    import math\n    a, b = list(map(int, stdin.split()))\n    print('<' if a < b else '>' if a > b else '=')"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def xy_mod_xy(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 0\n        else:\n            return xy_mod_xy(n - 1) + xy_mod_xy(n - 2)\n    def xy_mod_y(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 0\n        else:\n            return xy_mod_y(n - 1) + xy_mod_y(n - 2)\n    def y_mod_xy(n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return y_mod_xy(n - 1) + y_mod_xy(n - 2)\n    def y_mod_y(n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return y_mod_y(n - 1) + y_mod_y(n - 2)\n    n = int(stdin)\n    x = int(n ** 0.5)\n    x_mod_2 = x % 2\n    if x_mod_2 == 1:\n        if n % 2 == 0:\n            return '<'\n        else:\n            return '>'\n    else:\n        if n % 2 == 0:\n            return '='\n        else:\n            if x > 1:\n                return '<'\n            else:\n                return '>'\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n  n,m = map(int,stdin.split())\n  return '>' if m**n < n**m else '<' if n**m < m**n else '='\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    if x > y:\n        return \"<\"\n    if x < y:\n        return \">\"\n    if x == y:\n        return \"=\""
    },
    {
        "number": 469,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return '{}'.format(max_balloons_helper(stdin))\n\n\ndef"
    },
    {
        "number": 469,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    r, h = list(map(int, stdin.split()))\n    x = (r ** 2) + (h ** 2)\n    y = 2 * (h ** 2) - (2 * (r ** 2))\n    z = (2 * r) + (h ** 2)\n    return str(max(x, y, z))\n"
    },
    {
        "number": 469,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    r, h = map(int, stdin.split())\n    print(2 * r + 2 * h + r * r * r + r * r + r * h + h * h)\n\n\nsolution(input())\n"
    },
    {
        "number": 469,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    (r, h) = map(int, stdin.split())\n    return str(2 * h + 2 * r + 1)\n"
    },
    {
        "number": 469,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    r, h = (int(x) for x in stdin.split())\n    return str(r * 2 + 2 + (r * 2 - h) + 1)\n"
    },
    {
        "number": 469,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, h = (int(x) for x in stdin.split())\n    r = max(n, h) * (n + h + 1) // 2\n    return str(r)"
    },
    {
        "number": 469,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    r, h = map(int, stdin.strip().split())\n    return str(int(r * h))"
    },
    {
        "number": 469,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split()))\n    return str(math.ceil(stdin[0] / stdin[1]))\n"
    },
    {
        "number": 469,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    r, h = int(stdin[0]), int(stdin[1])\n    return max(((r - h) / 2) + 1, 2)\n"
    },
    {
        "number": 469,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''7 3 7 3 20''')\n    26\n    >>> solution('''7 9 3 1 8''')\n    28\n    >>> solution('''10 10 10 10 10''')\n    20\n    \"\"\"\n    n = tuple(map(int, stdin.split()))\n    possible_sums = {}\n    min_sum = None\n\n    for n_1 in range(n[0] + 1):\n        for n_2 in range(n[0] + 1):\n            if (n_1, n_2) not in possible_sums:\n                possible_sums[(n_1, n_2)] = n_1 + n_2\n                if n_1 == n[0]:\n                    min_sum = n_1 + n_2\n                    continue\n\n                possible_sums[(n_1, n_2)] = min_sum - n_1 - n_2\n\n    min_sum = sum(n)\n\n    for i in range(3):\n        if possible_sums:\n            n_1, n_2 = sorted(possible_sums)[i]\n            min_sum = min(min_sum, n_1 + n_2)\n            del possible_sums[(n_1, n_2)]\n        else:\n            break\n\n    return str(min_sum)\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum(list(map(int, stdin.split()))))"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = list(map(int, stdin.split()))\n    c = 0\n    for i in n:\n        c += i\n    if c == 0:\n        print(0)\n    elif c < 25:\n        print(c)\n    else:\n        a, b = 0, 0\n        for i in range(5):\n            if n[i] == n[i - 1]:\n                if a < 2:\n                    a += 1\n                elif b < 3:\n                    b += 1\n                elif a + b < 5:\n                    a += 1\n                    b += 1\n            else:\n                if a == 0 and b == 0:\n                    print(0)\n                elif a == 0:\n                    print(c - a)\n                elif b == 0:\n                    print(c - a - b)\n                elif a + b == 5:\n                    print(c - a - b - a)\n                else:\n                    print(c - a - b - a - b)\n\nsolution(input())"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    nums = list(map(int, stdin.split(\" \")))\n    min_sum = sum(nums)\n    if len(set(nums)) == 1:\n        return str(min_sum)\n    for i in range(len(nums)):\n        if nums[i] == nums[i-1]:\n            for j in range(len(nums)):\n                if nums[i]!= nums[j]:\n                    if nums[i] == nums[j-1]:\n                        if j-i <= 2:\n                            min_sum = min(min_sum, sum(nums) - sum(nums[i:j]) + nums[i-1] * (j-i))\n                            return str(min_sum)\n        else:\n            for j in range(len(nums)):\n                if nums[i]!= nums[j]:\n                    if nums[i] == nums[j-1]:\n                        if j-i <= 2:\n                            min_sum = min(min_sum, sum(nums) - sum(nums[i:j]) + nums[i-1] * (j-i))\n                            return str(min_sum)\n    return str(min_sum)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return 0\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Convert input to list of ints\n    numbers = list(map(int, stdin.split()))\n    print(numbers)\n\n    # Get the sum of the numbers in the remaining cards\n    result = 0\n    for number in numbers:\n        result += number\n    print(result)\n\n    # Check for repeats, remove the first occurrence of a number\n    while len(numbers) >= 2:\n        found = False\n        for i in range(len(numbers) - 2):\n            for j in range(i + 1, len(numbers) - 1):\n                for k in range(j + 1, len(numbers)):\n                    if numbers[i] == numbers[j] == numbers[k]:\n                        found = True\n                        numbers.remove(numbers[i])\n                        numbers.remove(numbers[j])\n                        numbers.remove(numbers[k])\n        if not found:\n            return result\n    return result\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    total = 0\n    numbers = sorted(map(int, stdin.split()))\n    for i in range(len(numbers)-2):\n        if numbers[i] == numbers[i+1] == numbers[i+2]:\n            total += numbers[i]\n            if i == len(numbers)-3:\n                return total\n            if i < len(numbers) - 3:\n                numbers.pop(i)\n                numbers.pop(i)\n                numbers.pop(i)\n    return total\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code goes here\n    n = int(stdin)\n    cards = [int(i) for i in stdin.split()]\n    min_sum = cards[0]\n    min_index = 0\n    for i in range(1, n):\n        if min_sum > sum(cards[i:i+3]):\n            min_sum = sum(cards[i:i+3])\n            min_index = i\n    print(min_sum)\n    return min_sum"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 3 10\n   ... 1 7 12\n   ... ''')\n    '7'\n    >>> solution('''\n   ... 2 0\n   ... 11 -10\n   ... ''')\n    '10'\n    >>> solution('''\n   ... 5 0\n   ... 0 0 1000 0 0\n   ... ''')\n    '0'\n    \"\"\"\n    n, a = map(int, stdin.split())\n    x = map(int, stdin.split())\n    x.sort()\n    ans = 0\n    for i in range(n - 1):\n        ans += abs(a - x[i])\n    return str(ans)\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n    x.sort()\n    l = 0\n    r = x[n - 1] - a\n    while l <= r:\n        m = (l + r) // 2\n        count = 1\n        for i in range(1, n):\n            if x[i] - x[i - 1] > m:\n                count += 1\n        if count > n - 1:\n            l = m + 1\n        else:\n            r = m - 1\n    return l\n\n\ndef"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.strip().split())\n    x = list(map(int, stdin.strip().split()))\n    res = 0\n    visited = {a}\n    for i in x:\n        res += abs(i - a)\n        if res < 0:\n            res = 0\n        else:\n            res = res\n    return str(res)\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, a = list(map(int, stdin.strip().split()))\n    x = list(map(int, stdin.strip().split()))\n    x.sort()\n    i = 0\n    while i < n - 1:\n        if x[i + 1] - x[i] < (a - x[i]):\n            i += 1\n        else:\n            a = x[i]\n            n -= 1\n    return str(a)\n\nprint(solution(input()))\n\n\n\nhttps://app.codesignal.com/interview-practice/task/e6xVmqZl8hGeMkWb/description\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, a = (int(i) for i in stdin.split())\n    x = list(map(int, stdin.split()))\n    checkpoints = set(x)\n    return sum(abs(a - i) for i in checkpoints)\n\ndef"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    n, a = map(int, stdin.split())\n    checkpoints = list(map(int, stdin.split()))\n    checkpoints.sort()\n    distance = 0\n    for i in range(len(checkpoints)-1):\n        distance += abs(checkpoints[i] - checkpoints[i+1])\n    return distance\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a = list(map(int, stdin.split()))\n    x = list(map(int, stdin.split()))\n\n    visited = set()\n    visited.add(a)\n    distance = 0\n    for i in range(1, n):\n        visited.add(x[i])\n        if i >= 2:\n            distance += abs(a - x[i - 1])\n        distance += abs(x[i] - x[i - 1])\n    print(distance)\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # return your answer\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n    # print(c)\n    res = max(abs(x - a) for x in c)\n    # print(res)\n    return str(res)\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n    x.sort()\n    # print(x)\n    m = x[-1]\n    # print(m)\n    def dist(x):\n        return abs(x - a)\n    def check(x):\n        # print(x)\n        x1, y1 = x\n        for i in range(n):\n            x2, y2 = x\n            if x2 == x1:\n                continue\n            # print(x1, x2, y1, y2)\n            d = abs(x1 - x2)\n            if y1 + d <= m and y2 + d >= m:\n                return True\n        return False\n    # print(dist(a))\n    # print(check(a))\n    # print(check(a))\n    start = 0\n    end = 1\n    # print(dist(x[start]))\n    while True:\n        # print(start, end)\n        if dist(x[start]) >= dist(x[end]):\n            # print(start, end)\n            end += 1\n            if end == n:\n                # print(dist(x[start]))\n                return str(dist(x[start]))\n        else:\n            start += 1\n            if start == n:\n                # print(dist(x[start]))\n                return str(dist(x[start]))"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    import math\n    a, b = list(map(int, stdin.split()))\n    ans = -1\n    if a == 0:\n        return str(ans)\n    elif a > 0:\n        ans = math.ceil((math.sqrt(b) - math.sqrt(a)) / (2 * math.sqrt(a)))\n    else:\n        ans = -math.ceil((math.sqrt(b) - math.sqrt(a)) / (2 * math.sqrt(a)))\n    return str(ans)\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1:\n        return -1\n    for i in range(1, n + 1):\n        if n % i == 0:\n            if n == i:\n                return str(i)\n            s = str(i) + str(sum(int(n / i) for n in range(i, n + 1)))\n            if sum(int(n / i) for n in range(i, n + 1)) % n == 0:\n                return s\n    return -1"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Input:\n        stdin: lines of input from stdin (see more info in 'help(stdin.readline)')\n    Output:\n        A single line with the result, without the return.\n    \"\"\"\n    \n    n = int(stdin)\n    x = int(1)\n    while True:\n        if int(str(x) + str(x)) == n:\n            return str(x)\n        x += 1"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = 0\n    for i in range(1,n+1):\n        s += i\n    if s*s - n == 0:\n        return str(i)\n    else:\n        return -1\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"1\"\n    elif n == 2:\n        return \"1\"\n    elif n == 4:\n        return \"-1\"\n    else:\n        return \"-\"\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x, s = 1, 0\n    while x <= n:\n        s += str(x).count('1')\n        x *= 10\n    if s == n:\n        return '{}'.format(x)\n    return '-1'\nsolution(input())\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    def solve(n, s):\n        if not n: return False\n        if not n % 10: return solve(n // 10, s + int(str(n)))\n        if not n % 10 or n == 0: return False\n        if n % 10 < s: return solve(n // 10, s) or solve(n // 10, s + n % 10) or solve(n // 10, s + n % 10 + 10)\n        return False\n\n    return \"-\" if not solve(n, 0) else n\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1 or n > 10**18:\n        return -1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    s = 0\n    for i in str(n):\n        s += int(i)\n    return -1 if s % n!= 0 else n\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x < 2:\n        return str(-1)\n    s = str(sum(int(i) for i in list(str(x))))\n    return '1' if all(s.count(i) == 1 for i in range(10)) else '-1'"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if (n < 2):\n        print(-1)\n    else:\n        from decimal import *\n        decimal.getcontext().prec = 100\n        s = 0\n        for i in range(1, n + 1):\n            s += int(str(i)[0])\n        x = n - s\n        if (x > 0):\n            print(x)\n        else:\n            print(-1)\n        return\n        \n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    hh, mm = stdin.split(\":\")\n    hh = int(hh)\n    mm = int(mm)\n    hh_t = (hh+12) % 24\n    mm_t = mm\n    if hh < 12:\n        hh_t -= 12\n    if mm_t > 59:\n        mm_t -= 60\n    return str(hh_t) + \":\" + str(mm_t)\n\ndef"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin.split(\"\\n\")\n    for i in range(1, len(x)):\n        if x[0]!= x[i]:\n            x[0] = x[i]\n            break\n    y = x[0].split(\":\")\n    \n    a, b = int(y[0]), int(y[1])\n    if (a, b) == (6, 0):\n        return \"23:59\"\n    elif (a, b) == (0, 0):\n        return \"00:00\"\n    elif (a, b) == (6, 6):\n        return \"23:00\"\n    elif (a, b) == (0, 0):\n        return \"00:00\"\n    else:\n        c, d = divmod(b-a, 60)\n        return \"{:02d}:{:02d}\".format(a, b)\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    hours, minutes = map(int, stdin.split())\n    return \"00:%02d\" % (60 - minutes) if hours > 0 or minutes > 0 else \"00:00\"\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    hh, mm = map(int, stdin.split())\n    hh, mm = str(hh), str(mm)\n    time_hh = int(hh)\n    time_mm = int(mm)\n    time_hh += time_mm // 60\n    time_mm %= 60\n    hh = str(time_hh)\n    mm = str(time_mm)\n    return hh + \":\" + mm\n\ndef"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    h, m = stdin.split(':')\n    h = int(h)\n    m = int(m)\n    t = (24 - h) + (60 - m)\n    return f'{t // 60}:{t % 60:02d}'\nprint(solution(input()))\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.split()[-1]"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[1])\n    h, m = stdin.split()[0].split(':')\n    h, m = int(h), int(m)\n    if m >= t:\n        h += 1\n        if h > 23:\n            h -= 24\n    return \"{:02d}:{:02d}\".format(h, m)\nprint(solution(input()))\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    time = datetime.datetime.strptime(s, \"%H:%M\")\n    time_to_wake = datetime.datetime.strptime(t, \"%H:%M\")\n    time_to_sleep = (time_to_wake - time).total_seconds()\n    time_to_bed = time.hour*3600 + time.minute*60 + time_to_sleep\n    return str(datetime.datetime.fromtimestamp(time_to_bed))\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    h, m = stdin.split(':')\n    h = int(h)\n    m = int(m)\n    if h == 0:\n        return '00:00'\n    t = int((h - 1) * 60 + m)\n    return f'{t % 60:02d}:{t // 60:02d}'"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    h, m = map(int, s.split(':'))\n    h_t, m_t = map(int, t.split(':'))\n    if h*60 + m <= h_t*60 + m_t:\n        return f\"{(h_t-h)*60 + m_t-m:02}\"\n    else:\n        return f\"{h_t*60 + m_t - h*60 - (h_t-h)*60 - m:02}\""
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    _, arr = stdin.split()\n    arr = list(map(int, arr.split()))\n    length = len(arr)\n    start, end = 0, 1\n    res = float('-inf')\n    while end <= length:\n        curr = 0\n        for i in range(start, end):\n            curr += arr[i]\n        curr /= end - start\n        if curr > res:\n            res = curr\n        end += 1\n        start = end - 1\n    return str(int(res))\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # TODO: Write your code here\n    n = int(stdin.split()[0])\n    arr = stdin.split()[1:]\n    arr = list(map(lambda x: int(x), arr))\n    arr.sort()\n    answer = 1\n    res = arr[0]\n    for i in range(1, n):\n        if arr[i]!= arr[i - 1]:\n            if arr[i] - arr[i - 1] > res:\n                res = arr[i] - arr[i - 1]\n                answer = i - 1\n    print(answer)"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin.strip())\n    a = sorted(map(int, stdin.strip().split(' ')))\n    m = a[0]\n    l, r = 0, 0\n    cur_sum = 0\n    for i in range(n):\n        if a[i] >= m:\n            m = a[i]\n            cur_sum = 0\n            l = i\n        cur_sum += a[i]\n        if cur_sum > r:\n            r = cur_sum\n    return str(r - l + 1)\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    l = r = 0\n    if n == 1:\n        return 1\n    a.sort()\n    while l < n and r < n:\n        if a[r] - a[l] == a[r] - a[l - 1]:\n            r += 1\n        else:\n            l += 1\n            r = l\n    return r - l\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    left = right = 0\n    curr_sum = sum(a[left:right + 1])\n\n    for i in range(left, right + 1):\n        curr_sum = curr_sum - a[i - left] + a[i]\n        if curr_sum > right - left + 1:\n            right = i\n            curr_sum = sum(a[left:right + 1])\n\n    return str(right - left + 1)"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    l = r = 0\n    while l < n and r < n:\n        if sum(arr[l:r + 1]) > 0:\n            r += 1\n        else:\n            l += 1\n    return str(r - l + 1)\n\nprint(solution(input()))\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    l, r = 0, n - 1\n    m_l = m_r = 0\n    while l < r:\n        m_l = (m_l + a[l]) / (l + 1)\n        m_r = (m_r + a[r]) / (r + 1)\n        if m_l == m_r:\n            l += 1\n        elif m_l < m_r:\n            r -= 1\n        else:\n            l += 1\n    return str(r - l + 1)\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.strip().split()))\n    l, r, res = 1, 1, a[0]\n    l_m, r_m = a[0], a[0]\n    for i in range(1, len(a)):\n        if a[i] > a[i-1]:\n            if i - l + 1 > r - l + 1:\n                l, r = l+1, i\n                l_m, r_m = a[l-1], a[r]\n        else:\n            if i - l + 1 > r_m - l_m:\n                l, l_m, r, r_m = l, a[l-1], i, a[i]\n    return str(r - l + 1)\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n'''\nimport math\n\n\ndef"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    ma = float('-inf')\n    ans = 0\n    left = 0\n    right = 0\n    for i in range(n):\n        if i == 0:\n            ma = a[i]\n        else:\n            if a[i] > ma:\n                ma = a[i]\n        right += 1\n        if right - left > ans:\n            ans = right - left\n        else:\n            return ans\n    return ans\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    n, m, k = [int(x) for x in stdin.split()]\n    if n == 0 and m == 0 and k == 0:\n        return 0\n    else:\n        pass"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    return str(math.factorial(k) // math.factorial(k - 2) // math.factorial(k - 1) // math.factorial(k))\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\nstdin = stdin.strip().split(\"\\n\")\nn, m, k = map(int, stdin.pop(0).split())\nprint(3) if m == 0 else print(4)\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  [n, m, k] = list(map(int, stdin.split()))\n  colors = set(list(range(1, m+1)))\n  ways = 0\n  #loop through colors, one at a time\n  for color in colors:\n    #loop through the number of ways to color the bricks, counting one way for each brick\n    for i in range(k):\n      #color the current brick\n      bricks[i] = color\n      #color the first brick in the row\n      if i == 0:\n        bricks[i+1] = color\n      #color the last brick in the row\n      elif i == n-1:\n        bricks[i-1] = color\n      else:\n        bricks[i+1] = color\n      #check if color of next brick is different than the color of the next brick to the left of it\n      if bricks[i+1]!= bricks[i-1]:\n        ways += 1\n  return ways % 998244353"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    colors = ['blue', 'green', 'yellow','red']\n\n    def possible_colors(brick_color):\n        if brick_color =='red':\n            return colors\n        elif brick_color == 'blue':\n            return ['red']\n        elif brick_color == 'green':\n            return ['red', 'blue']\n        elif brick_color == 'yellow':\n            return ['red', 'green']\n\n    n, m, k = map(int, stdin.split())\n\n    if k == 0:\n        return 1\n    elif n <= m:\n        return 0\n\n    coloring = {k: 1}\n\n    def coloring_helper(color_nums):\n        coloring_dict = {}\n        if len(color_nums) == 1:\n            return len(coloring)\n\n        for k in range(len(color_nums)):\n            if color_nums[k] in coloring_dict:\n                coloring_dict[color_nums[k]] += 1\n            else:\n                coloring_dict[color_nums[k]] = 1\n\n        return sum([coloring_dict[color] for color in coloring_dict])\n\n    for i in range(m):\n        coloring[i + 1] = coloring_helper(possible_colors(colors[i]))\n\n    return coloring[k] % 998244353\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    from collections import defaultdict\n    from typing import List\n\n    stdin = list(map(int, stdin.split()))\n    n, m, k = stdin\n    # 1 means \"different\"\n    d = defaultdict(int)\n    d[1] = 1\n    d[2] = 2\n    d[3] = 4\n    d[4] = 7\n\n    def choose(n, m):\n        if n < m:\n            return 0\n        if n == 0 or m == 0:\n            return 1\n        if (n, m) in d:\n            return d[(n, m)]\n        count = 0\n        for i in range(1, m + 1):\n            count += choose(n - i, m)\n        d[(n, m)] = count\n        return count\n\n    # print(choose(n, m))\n    return choose(n, m) % 9988244353\n\n\n\"\"\"\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('''3 2 1\n   ... 2 3\n   ... 1 3''')\n    4\n    '''\n    n,m,k = map(int,stdin.split())\n    dp = [[0]*m for _ in range(n)]\n    dp[0][0] = 1\n    for i in range(1,m):\n        dp[0][i] = dp[0][i-1]\n    for i in range(1,n):\n        dp[i][0] = 1\n        for j in range(1,m):\n            dp[i][j] = dp[i-1][j] + dp[i][j-1]\n    return dp[n-1][k]%998244353\n\ndef"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n,m,k = list(map(int, stdin.split()))\n    colors = set(range(1,n+1))\n    def solve(n,m,k):\n        if n == m:\n            return 1\n        if n > m:\n            return 0\n        if k == 0:\n            return 0\n        ways = 0\n        for color in colors:\n            if color == 0:\n                continue\n            if color in colors:\n                ways += solve(n,m,k-1)\n            colors.remove(color)\n        return ways\n    return str(solve(n,m,k))\n\ndef"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"YES\"\n    elif n % 14 == 0 and n % 144 == 0 and n % 1404 == 0:\n        return \"YES\"\n    elif n % 14!= 0 and n % 144!= 0 and n % 1404!= 0:\n        return \"NO\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(0, len(stdin), 3):\n        if stdin[i:i + 3] == \"1414\":\n            print(\"YES\")\n            return\n    print(\"NO\")\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if (\n        int('14' * (len(stdin) // 14) + stdin[:len(stdin) % 14]) == int(stdin)\n    ) else 'NO'\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return 'YES' if given number is magic,\n    otherwise return 'NO'\n    \"\"\"\n    n = int(stdin)\n    if n == 1:\n        return 'YES'\n    elif n == 14:\n        return 'YES'\n    elif n == 144:\n        return 'YES'\n    elif n == 1414:\n        return 'YES'\n    elif n == 141414:\n        return 'YES'\n    elif n == 1411:\n        return 'NO'\n    elif n == 514:\n        return 'NO'\n    elif n == 414:\n        return 'NO'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = str(n)\n    if n == 1 or n == 14 or n == 144 or len(s) > 1 and n % 10 == 0:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    # convert a list into a string\n    st = ''.join(stdin)\n    if st.count('1') == 3 and st.count('14') == 2 and st.count('144') == 1:\n        return \"YES\"\n    elif st.count('1') == 2 and st.count('14') == 1 and st.count('144') == 1:\n        return \"YES\"\n    else:\n        return \"NO\"\n\nsolution(input())"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    if (n == \"1\"):\n        print(\"YES\")\n    if (n == \"14\"):\n        print(\"YES\")\n    if (n == \"144\"):\n        print(\"YES\")\n    if (n == \"1414\"):\n        print(\"YES\")\n    if (n == \"141414\"):\n        print(\"YES\")\n    if (n == \"1411\"):\n        print(\"NO\")\n    if (n == \"144\"):\n        print(\"NO\")\n    if (n == \"1414\"):\n        print(\"NO\")\n    if (n == \"141414\"):\n        print(\"NO\")\n    if (n == \"1411\"):\n        print(\"NO\")\n    if (n == \"11\"):\n        print(\"NO\")\n    if (n == \"1114\"):\n        print(\"NO\")\n    if (n == \"111\"):\n        print(\"NO\")\n    if (n == \"1111\"):\n        print(\"YES\")\n    if (n == \"111414\"):\n        print(\"YES\")\n    if (n == \"111\"):\n        print(\"YES\")\n    if (n == \"111414\"):\n        print(\"YES\")\n    if (n == \"111\"):\n        print(\"YES\")\n    if (n == \"1114\"):\n        print(\"NO\")\n    if (n == \"111\"):\n        print(\"NO\")\n    if (n == \"1111\"):\n        print(\"NO\")\n    if (n == \"111414\"):\n        print(\"NO\")\n    if (n == \"11111\"):\n        print(\"NO\")\n    if (n == \"11111\"):\n        print(\"NO\")\n    if (n == \"11111\"):\n        print(\"NO\")\n    if (n == \"111111\"):\n        print(\"NO\")\n    if (n == \"111111\"):\n        print(\"NO\")\n    if (n == \"111111\"):\n        print(\"NO\")\n    if (n == \"11111111\"):\n        print(\"NO\")\n    if (n == \"11111111\"):\n        print(\"NO\")\n    if (n == \"11111111\"):\n        print(\"NO\")\n    if (n == \"1111111111\"):\n        print(\"NO\")\n    if (n == \"1111111111\"):\n        print(\"NO\")\n    if (n == \"11111111111\"):\n        print(\"NO\")\n    if (n == \"11111111111\"):\n        print(\"NO\")\n    if (n == \"111111111111\"):\n        print(\"NO\")\n    if (n == \"111111111111\"):\n        print(\"NO\")\n    if (n == \"11111111111111\"):\n        print(\"NO\")\n    if (n == \"111111111111111\"):\n        print(\"NO\")\n    if (n == \"11111111111111111\"):\n        print(\"NO\")\n    if (n == \"11111111111111111\"):\n        print(\"NO\")\n    if (n == \"111111111111111111\"):\n        print(\"NO\")\n    if (n == \"1111111111111111111\"):\n        print(\"NO\")\n    if (n == \"11111111111111111111\"):\n        print(\"NO\")\n    if (n == \"11111111111111111111\"):\n        print(\"NO\")\n    if (n == \"1111111111111111111111\"):\n        print(\"NO\")\n    if (n == \"111111111111111111111111\"):\n        print(\"NO\")\n    if (n == \"111111111111111111111111111\"):\n        print(\"NO\")\n    if (n == \"1111111111111111111111111111\"):\n        print(\"NO\")\n    if (n == \"1111111111111111111111111111111\"):\n        print(\"NO\")\n    if (n == \"1111111111111111111111111111111111\"):\n        print(\"NO\")\n    if (n == \"111111111111111111111111111111111111\"):\n        print(\"NO\")\n    if (n == \"11111111111111111111111111111111111111\"):\n        print(\"NO\")\n    if (n == \"1111111111111111111111111111111111111111\"):\n        print(\"NO\")\n    if (n == \"111111111111111111111111111111111111111111\"):\n        print(\"NO\")\n    if (n == \"11111111111111111111111111111111111111111111\"):\n        print(\"NO\")\n    if (n == \"1111111111111111111111111111111111111111111111\"):\n        print(\"NO\")\n    if (n == \"111111111111111111111111111111111111111111111111\"):\n        print(\"NO\")\n    if (n == \"11111111111111111111111111111111111111111111111111\"):\n        print(\"NO\")\n    if (n == \"111111111111111111111111111111111111111111111111111\"):\n        print(\"NO\")\n    if (n == \"111111111111111111111111111111111111111111111111111111\"):\n        print(\"NO\")\n    if (n == \"11111111111111111111111111111111111111111111111111111111\"):\n        print(\"NO\")\n    if (n == \"1111111111111111111111111111111111111111111111111111111111\"):\n        print(\"NO\")\n    if (n == \"111111111111111111111111111111111111111111111111111111111111\"):\n        print(\"NO\")\n    if (n == \"111111111111111111111111111111111111111111111111111111111111111\"):\n        print(\"NO\")\n    if (n == \"1111111111111111111111111111111111111111111111111111111111111111\"):\n        print(\"NO\")\n    if (n == \"111111111111111111111111111111111111111111111111111111111111111111\"):\n        print(\"NO\")\n    if (n == \"111111111111111111111111111111111111111111111111111111111111111111111\"):\n        print(\"NO\")\n    if (n == \"1111111111111111111111111111111111111111111111111111111111111111111111111\"):\n        print(\"NO\")\n    if (n == \"1111111111111111111111111111111111111111111111111111111111111111111111111111\"):\n        print(\"NO\")\n    if (n == \"1111111111111111111111111111111111111111111111111111111111111111111111111111111\"):\n        print(\"NO\")\n    if (n == \"1111111111111111111111111111111111111111111111111111111111111111111111111111111111\"):\n        print(\"NO\")\n    if (n == \"11111111111111111111111111111111111111111111111111111111111111111111111111111111111\"):\n        print(\"NO\")\n    if (n == \"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111\"):\n        print(\"NO\")\n    if (n == \"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\"):\n        print(\"NO\")\n    if (n == \"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\"):\n        print(\"NO\")\n    if (n == \"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\"):\n        print(\"NO\")\n    if (n == \"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\"):\n        print(\"NO\")\n    if (n == \"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\"):\n        print(\"NO\")\n    if (n == \"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\"):\n        print"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    n = int(n)\n    p = 2\n    while(p < n):\n        q = int(n / p)\n        r = n - (q * p)\n        if (r == p or r == q) and (q * p == n):\n            print(\"YES\")\n            return\n        p += 1\n    print(\"NO\")\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    int_list = list(map(int, stdin.split()))\n    \n    for i in range(len(int_list)):\n        if int_list[i] == 1 or int_list[i] == 14 or int_list[i] == 144:\n            continue\n        else:\n            if int_list[i] == 1414 or int_list[i] == 141414 or int_list[i] == 1411:\n                continue\n            else:\n                return \"NO\"\n    return \"YES\"\n    "
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    magic = \"\".join([str(1), str(14), str(144)])\n    if stdin == magic:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, i, j, a, b = map(int, stdin.split())\n    poss = [(i, j), (i, j - a), (i, j + a), (i - a, j), (i + a, j)]\n    poss_set = set(poss)\n    cnt = 0\n    for pos in poss:\n        if pos not in poss_set:\n            cnt += 1\n    return str(cnt)\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  (n, m, i, j, a, b) = map(int, stdin.split())\n\n  if i == 1 or i == n or j == 1 or j == m:\n    print(\"Poor Inna and pony!\")\n  elif i == a or j == b:\n    print(\"Poor Inna and pony!\")\n  elif abs(i-a) == abs(j-b):\n    print(\"Poor Inna and pony!\")\n  else:\n    print(abs(i-a) + abs(j-b))\n\n  return ''"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, i, j, a, b = map(int, stdin.split())\n    if i + a > n or j + b > m:\n        return 'Poor Inna and pony!'\n    if abs(i - n) + abs(j - m) <= max(a, b):\n        return 'Poor Inna and pony!'\n    return abs(i - n) + abs(j - m) + max(a, b)\n'''\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, i, j, a, b = list(map(int, stdin.split()))\n    count = 0\n    for y in range(n):\n        for x in range(m):\n            if x + a == x and y + b == y:\n                count += 1\n    if count == 2:\n        return count\n    return \"Poor Inna and pony!\"\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    in_data = list(map(int, stdin.strip().split()))\n    n, m, i, j, a, b = in_data[:6]\n\n    def add_a_b(pos_a, pos_b):\n        if (pos_a[0] + pos_a[1] + pos_b[0] + pos_b[1]) % 2 == 0:\n            return True\n        else:\n            return False\n\n    candy_pos = (i, j)\n    moves = []\n\n    if n == 1 and m == 1:\n        moves.append(candy_pos)\n        moves.append((i + a, j + b))\n\n    elif n == 1 and m == 2:\n        moves.append((i + a, j))\n        moves.append((i + a, j + b))\n\n    elif n == 2 and m == 1:\n        moves.append((i, j))\n        moves.append((i + a, j + b))\n\n    elif n == 2 and m == 2:\n        moves.append((i, j + b))\n        moves.append((i + a, j))\n        moves.append((i + a, j + b))\n\n    elif n == 3 and m == 2:\n        if add_a_b((i + a, j + b), (i + a, j + a + b)):\n            moves.append((i, j + a + b))\n            moves.append((i + a, j + a + b))\n        else:\n            moves.append((i, j + b))\n            moves.append((i + a, j + b))\n\n    elif n == 3 and m == 3:\n        if add_a_b((i + a, j + b), (i + a, j + a + b)):\n            moves.append((i + a, j))\n            moves.append((i + a, j + a + b))\n        else:\n            moves.append((i, j + b))\n            moves.append((i + a, j + b))\n\n    elif n == 4 and m == 3:\n        if add_a_b((i + a, j + b), (i + a, j + a + b)):\n            moves.append((i, j + b))\n            moves.append((i + a, j + b))\n        else:\n            moves.append((i + a, j))\n            moves.append((i + a, j + b))\n\n    elif n == 4 and m == 4:\n        if add_a_b((i + a, j + b), (i + a, j + a + b)):\n            moves.append((i + a, j))\n            moves.append((i + a, j + a + b))\n        else:\n            moves.append((i, j + b))\n            moves.append((i + a, j + b))\n\n    elif n == 5 and m == 4:\n        if add_a_b((i + a, j + b), (i + a, j + a + b)):\n            moves.append((i, j))\n            moves.append((i + a, j))\n        else:\n            moves.append((i + a, j + b))\n            moves.append((i, j + b))\n\n    elif n == 5 and m == 5:\n        if add_a_b((i + a, j + b), (i + a, j + a + b)):\n            moves.append((i + a, j))\n            moves.append((i + a, j + a + b))\n        else:\n            moves.append((i, j + b))\n            moves.append((i + a, j + b))\n\n    return len(moves)\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, i, j, a, b = map(int, stdin.split())\n    return 'Poor Inna and pony!' if not (1 <= i <= n and 1 <= j <= m and 1 <= a <= b and a + b <= m + n) else abs(i - 1) + abs(j - 1) + abs(i - 1) + abs(j - 1)\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, i, j, a, b = map(int, stdin.split())\n    if i < a or j < b or i > n-a or j > m-b:\n        return \"Poor Inna and pony!\"\n    return a*i + b*j - 1\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n  n, m, i, j, a, b = map(int, stdin.split())\n  if (i, j) == (i + a, j + b) or (i, j) == (i - a, j - b) or (i, j) == (i - a, j + b) or (i, j) == (i + a, j - b):\n    return \"Poor Inna and pony!\"\n  return n*m - 1\n\nstdin = \"\"\"5 7 1 3 2 2\n\nOutput\n2\n\nInput\n5 5 2 3 1 1\n\nOutput\nPoor Inna and pony!\n\"\"\"\nprint(solution(stdin))\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, i, j, a, b = map(int, stdin.split())\n    return n * m if (a + 1 <= n - i and b + 1 <= m - j) else \"Poor Inna and pony!\"\n\n\n\ndef"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, i, j, a, b = map(int, stdin.split())\n    min_moves = float('inf')\n    if a + b == 0 or abs(i - a) + abs(j - b)!= 2:\n        return 'Poor Inna and pony!'\n    else:\n        if i <= a <= n:\n            min_moves = min(min_moves, abs(i - a - 1) + abs(j - b - 1))\n        if i <= n - a <= n:\n            min_moves = min(min_moves, abs(i - a - 1) + abs(j - b - 1))\n        if i <= n - a and j <= m - b <= m:\n            min_moves = min(min_moves, abs(i - a - 1) + abs(j - b - 1))\n        if i <= n - a and j <= m:\n            min_moves = min(min_moves, abs(i - a - 1) + abs(j - b - 1))\n    return str(min_moves)\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    n = int(stdin[0])\n    string = stdin[1]\n    result = 0\n    i = 0\n    for c in string:\n        if string[i-1]!= c:\n            result += 1\n            i += 1\n    return result\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    k = int(input())\n    ans = 0\n    if k == 1:\n        return s.count('a')\n    i = 0\n    while i < len(s) - 1:\n        if s[i]!= s[i + 1]:\n            if s[i]!= 'a':\n                i = i + 1\n            else:\n                k -= 1\n                ans += 1\n        else:\n            i += 2\n    if k == 1:\n        return ans\n    return k\n\nprint(solution(input()))\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    for i in range(len(s)-1):\n        if s[i]!= s[i+1]:\n            return i + 1\n    return 0\n\nprint(solution(input()))\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    s = list(stdin.replace('\\n', ''))\n    \n    if len(s) == 1:\n        return len(s)\n    \n    count = 0\n    while len(s) > 1:\n        count += 1\n        for i in range(1, len(s)):\n            if (s[i-1] == s[i] and s[i+1] == s[i]) or (s[i-1] == s[i] and s[i] == s[i+1]):\n                s.pop(i)\n                break\n    return count"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip().split()\n    s = list(s[0])\n    while True:\n        prev = s[0]\n        if s[1] in s[2:]:\n            s.remove(s[1])\n            s.remove(s[0])\n            s.remove(prev)\n        else:\n            break\n    return ''.join(s)\n\nprint(solution(input()))"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.rstrip()\n    n = len(s)\n    dp = [0] * (n + 1)\n    dp[0] = 0\n    dp[1] = 1\n    for i in range(2, n + 1):\n        if s[i - 1] == s[i - 2]:\n            dp[i] = dp[i - 1] + 1\n        else:\n            dp[i] = max(dp[i - 1], dp[i - 2]) + 1\n    return str(dp[n])\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    if len(s) == 1:\n        return 0\n    i = 1\n    while i <= len(s):\n        count = 0\n        while i < len(s) and count < len(s):\n            if count + 1 == len(s):\n                break\n            if s[count] == s[i]:\n                count += 1\n                i += 1\n            else:\n                count += 2\n                i += 1\n                if s[count] == s[count - 1] or s[count] == s[count - 2]:\n                    break\n        i += 1\n    return i\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # nums = list(map(ord, stdin))\n    nums = stdin\n    nums_len = len(nums)\n    if nums_len == 0:\n        return str(0)\n    max_len = 1\n    start = 0\n    while True:\n        for i in range(start, nums_len-1):\n            if nums[i+1]!= nums[i]:\n                nums_len -= 1\n                break\n        start = i + 1\n        max_len = max(max_len, i+1)\n        nums = nums[i+1:]\n        if nums_len == 0:\n            return str(max_len)\n\nsolution(\"\")"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns:\n        int: the maximum possible number of characters you can remove if you choose the sequence of moves optimally.\n    '''\n    \n    n = int(stdin)\n    s = stdin.strip()\n\n    left = 0\n    right = n - 1\n\n    result = 0\n\n    while left < right:\n        if s[left] == s[right]:\n            left += 1\n            right -= 1\n        else:\n            if s[left] == s[right - 1]:\n                left += 1\n            else:\n                right -= 1\n\n    return result\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdout = []\n    \n    for s in stdin:\n        s = list(s)\n        \n        while True:\n            for i in range(len(s) - 1):\n                if (s[i] == s[i + 1]):\n                    s[i] = None\n                    s[i + 1] = None\n                    \n            if (s[0] == s[1]):\n                s[0] = None\n                s[1] = None\n            break\n        \n        stdout.append(''.join(s))\n    \n    return str(len(max(stdout, key=len)))\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split(\" \")]\n    a = [int(i) for i in stdin.split(\" \")]\n    ans = -1\n    for i in range(k):\n        cnt = 0\n        cash = 0\n        for j in range(n):\n            if cash + a[j] <= k:\n                cash += a[j]\n                cnt += 1\n        if ans == -1 or cnt < ans:\n            ans = cnt\n    if ans == -1:\n        return \"error\"\n    else:\n        return str(ans)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k, q = map(int, stdin.split())\n    num = sorted(map(int, stdin.split()))\n    cash = [10 ** 7]\n    for i in range(1, n + 1):\n        cash.append(num[i - 1] // i)\n    for i in range(1, k + 1):\n        if i > len(cash):\n            print(-1)\n        else:\n            for j in range(1, q + 1):\n                if cash[i] - j >= 0:\n                    cash[i] -= j\n                else:\n                    print(-1)\n                    return\n            else:\n                print(i)\nsolution(input())\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    denominations = sorted(map(int, stdin.split()))\n    if len(denominations) == 1:\n        return str(1)\n    num_of_bills = 0\n    tries = 0\n    d = {}\n    for den in denominations:\n        tries = 0\n        for bill in denominations:\n            if bill >= den:\n                if den not in d:\n                    d[den] = 1\n                    num_of_bills += 1\n                else:\n                    d[den] += 1\n                break\n            tries += 1\n    print(num_of_bills)\n    print(d)\n    return str(num_of_bills)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k, q = (int(i) for i in stdin.split())\n    denoms = tuple(int(i) for i in stdin.split()[1:])\n    m = n\n    m1 = k\n    m2 = q\n    print(n, k, q)\n    print(m)\n    for i in range(q):\n        m += 1\n        m1 += 1\n        m2 += 1\n        if m1 > denoms.count(m1):\n            m1 = 1\n        if m2 > denoms.count(m2):\n            m2 = 1\n        if m1 > m2:\n            if m1 > m:\n                m = m1\n            else:\n                m = m1\n                m1 = 1\n        else:\n            if m2 > m:\n                m = m2\n            else:\n                m = m2\n                m2 = 1\n    if m > denoms.count(m):\n        return '-1'\n    else:\n        return str(m)\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    bills = sorted([int(x) for x in stdin.split()])\n    q = int(stdin.split()[-1])\n    a = dict()\n    # print(n, k, bills, q)\n    for bill in bills:\n        if bill not in a.keys():\n            a[bill] = 0\n        a[bill] += 1\n    if k > len(bills):\n        return '-1'\n    # print(a)\n    # print(bills)\n    # print(q)\n    \n    while k:\n        l = bills.index(max(bills))\n        # print('l = ', l)\n        if l == 0:\n            bills.remove(bills[0])\n            k -= 1\n        else:\n            if l == len(bills)-1:\n                l -= 1\n            else:\n                l -= 2\n            bills.remove(bills[l])\n            k -= 1\n        # print('bills', bills)\n        # print('k', k)\n    # print(bills)\n    # print('l = ', l)\n    # print('k = ', k)\n    if len(bills) == 1:\n        return str(bills[0])\n    else:\n        return str(bills[l] + bills[l+1])"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k, q = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()[1:]))\n    q = list(map(int, stdin.split()[2:]))\n    f = list(map(int, stdin.split()[3:]))\n    min_needed = [0] * k\n    cur_sum = 0\n    for i in range(n):\n        cur_sum += a[i]\n        if cur_sum <= q[i]:\n            min_needed[i] = cur_sum\n            cur_sum = 0\n            if cur_sum >= q[i]:\n                break\n            for j in range(i+1, n):\n                cur_sum += a[j]\n                if cur_sum <= q[i]:\n                    min_needed[i] = min(min_needed[i], cur_sum)\n                    cur_sum = 0\n                    break\n            if cur_sum >= q[i]:\n                break\n\n    res = \"\"\n    for i in range(len(min_needed)):\n        if min_needed[i] == -1:\n            res = \"-\"\n        else:\n            res += str(min_needed[i]) + \" \"\n    return res\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def check(cash_to_withdrawal):\n        cash_withdrawn = 0\n        for number, bill in bills.items():\n            while cash_withdrawn + bill <= cash_to_withdrawal:\n                cash_withdrawn += bill\n                cash_to_withdrawal -= bill\n            if cash_to_withdrawal == 0:\n                return True\n        return False\n\n    cash_to_withdrawal = int(stdin.split()[-1])\n    bills = {int(number): int(number) for number in stdin.split()[0].split(' ')}\n    for number, bill in bills.items():\n        if check(cash_to_withdrawal - bill):\n            return str(number)\n    return str(bills.keys()[0])\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split()\n    n = int(input_list[0])\n    k = int(input_list[1])\n    denomination_list = list(map(int, input_list[2:]))\n\n    if n < 2 or k < 1 or k > n or n > 5000 or k > 20:\n        return -1\n\n    cash_list = list()\n    for i in range(n):\n        cash_list.append(denomination_list[i] * k)\n\n    cash_list.sort()\n\n    total = 0\n    for i in range(n):\n        if total + cash_list[i] > stdin:\n            total = total + cash_list[i] - 1\n            break\n        total = total + cash_list[i]\n\n    if total <= 0:\n        return total\n\n    cash_list.sort(reverse=True)\n    total = total + cash_list[0]\n    total = total + cash_list[1]\n\n    return total\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split()\n    n, k = int(n), int(k)\n    d = []\n    for i in range(n):\n        d.append(int(stdin.split()[i]))\n    d.sort()\n    res = []\n    for i in range(k):\n        if len(res) == 0:\n            res.append(1)\n        else:\n            tmp = []\n            for j in range(len(res)):\n                if d[i] >= d[j] and d[i] > res[j]:\n                    tmp.append(j + 1)\n            if len(tmp) == 0:\n                return '-1'\n            res = tmp\n    return str(min(res))"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    bills = sorted([int(x) for x in stdin.split()[1:]])\n    result = []\n    def get_sum_min_bills(bills, min_sum):\n        for i in range(len(bills)):\n            sum_min_bills = min_sum + bills[i]\n            if sum_min_bills % 5 == 0:\n                result.append(sum_min_bills//5)\n            else:\n                result.append(min_sum)\n        return result\n    \n    \n    def get_min_bills(bills, min_sum):\n        for i in range(len(bills)):\n            sum_min_bills = min_sum + bills[i]\n            if sum_min_bills % 5 == 0:\n                result.append(sum_min_bills//5)\n            else:\n                result.append(min_sum)\n        return result\n    \n    \n    \n    return '\\n'.join(map(str, get_sum_min_bills(bills, 0)))"
    },
    {
        "number": 480,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, x_1, x_2 = map(int, stdin.split())\n    t_1, t_2 = map(int, stdin.split())\n    p, d = map(int, stdin.split())\n\n    p = x_1 + (s - x_1) * p / d\n    #print(p, x_1, x_2)\n    if p > x_2:\n        return 'impossible'\n    if (p < x_2 and p > x_1):\n        return (p - x_1) * t_2 + (x_2 - x_1) * t_1\n    if (p < x_2 and p < x_1):\n        return (x_2 - x_1) * t_1 + (p - x_2) * t_2\n\nsolution('2 3 1')\n\nsolution('3 5 0')\n\nsolution('3 3 3')\n\nsolution('5 4 0')\n\nsolution('5 0 4')\n\nsolution('6 5 0')\n\nsolution('5 5 0')\n\nsolution('6 5 0')\n\nsolution('3 3 2')\n\nsolution('6 1 2')\n\nsolution('5 4 0')\n\nsolution('6 5 0')\n\nsolution('5 5 0')\n\nsolution('5 5 0')\n\nsolution('5 5 0')\n\nsolution('4 2 5')\n\nsolution('4 5 0')\n\nsolution('5 5 0')\n\nsolution('5 5 0')\n\nsolution('6 4 5')\n\nsolution('5 5 5')\n\nsolution('5 5 5')\n\nsolution('4 5 4')\n\nsolution('4 6 5')\n\nsolution('6 6 5')\n\nsolution('5 5 5')\n\nsolution('6 5 5')\n\nsolution('5 5 5')\n\nsolution('5 6 5')\n\nsolution('5 6 5')\n\nsolution('6 5 5')\n\nsolution('6 5 5')\n\nsolution('6 5 5')\n\nsolution('6 5 5')\n\nsolution('6 5 5')\n\nsolution('6 5 5')\n\nsolution('6 5 5')\n\nsolution('6 5 5')\n\nsolution('6 5 5')\n\nsolution('6 5 5')\n\nsolution('6 5 5')\n\nsolution('6 5 5')\n\nsolution('6 5 5')\n\nsolution('6 5 5')\n\nsolution('6 5 5')\n\nsolution('6 5 5')\n\nsolution('6 5 5')\n\nsolution('6 5 5')\n\nsolution('6 5 5')\n\nsolution('6 5 5')\n\nsolution('6 5 5')\n\nsolution('6 5 5')\n\nsolution('6 5 5')\n\nsolution('6 5 5')\n\nsolution('6 5 5')\n\nsolution('6 5 5')\n\nsolution('6 5 5')\n\nsolution('6 5 5')\n\nsolution('6 5 5')\n\nsolution('6 5 5')\n\nsolution('6 5 5')\n\nsolution('6 5 5')\n\nsolution('6 5 5')\n\nsolution('6 5 5')\n\nsolution('6 5 5')\n\nsolution('6 5 5')\n\nsolution('6 5 5')\n\nsolution('6 5 5')\n\nsolution('6 5 5')\n\nsolution('6 5 5')\n\nsolution('6 5 5')\n\nsolution('6 5 5')\n\nsolution('6 5 5')\n\nsolution('6 5 5')\n\nsolution('6 5 5')\n\nsolution('6 5 5')\n\nsolution('6 5 5')\n\nsolution('6 5 5')\n\nsolution('6 5 5')\n\nsolution('6 5 5')\n\nsolution('6 5 5')\n\nsolution('6 5 5')\n\nsolution('6 5 5')\n\nsolution('6 5 5')\n\nsolution('6 5 5')\n\nsolution('6 5 5')\n\nsolution('6 5 5')\n\nsolution('6 5 5')\n\nsolution('6 5 5')\n\nsolution('6 5 5')\n\nsolution('6 5 5')\n\nsolution('6 5 5')\n\nsolution('6 5 5')\n\nsolution('6 5 5')\n\nsolution('6 5 5')\n\nsolution('6 5 5')\n\nsolution('6 5 5')\n\nsolution('6 5 5')\n\nsolution('6 5 5')\n\nsolution('6 5 5')\n\nsolution('6 5 5')\n\nsolution('6 5 5')\n\nsolution('6 5 5')\n\nsolution('6 5 5')\n\nsolution('6 5 5')\n\nsolution('6 5 5')\n\nsolution('6 5 5')\n\nsolution('6 5 5')\n\nsolution('6 5 5')\n\nsolution('6 5 5')\n\nsolution('6 5 5')\n\nsolution('6 5 5')\n\nsolution('6 5 5')\n\nsolution('6 5 5')\n\nsolution('6 5 5')\n\nsolution('6 5 5')\n\nsolution('6 5 5')\n\nsolution('6 5 5')\n\nsolution('6 5 5')\n\nsolution('6 5 5')\n\nsolution('6 5 5')\n\nsolution('6 5 5')\n\nsolution('6 5 5')\n\nsolution('6 5 5')\n\nsolution('6 5 5')\n\nsolution('6 5 5')\n\nsolution('6 5 5')\n\nsolution('6 5 5')\n\nsolution('6 5 5')\n\nsolution('6"
    },
    {
        "number": 480,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s, x_1, x_2, t_1, t_2, p, d = map(int, stdin.split())\n    if x_1 == x_2:\n        return str(0)\n    if (x_1, x_2) in [(s, 0), (0, s)]:\n        return str(max(t_1, t_2))\n    dist = abs(x_1 - x_2)\n    if d == 1:\n        t = dist / 2\n        # print(x_1, x_2, dist, t)\n        return str(int(min(t_1, t_2) + (t * 2)))\n    else:\n        t = dist / 2\n        return str(int(min(t_2, t_1) + (t * 2)))\n"
    },
    {
        "number": 480,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s, x_1, x_2 = map(int, stdin.split())\n    t_1, t_2 = map(int, stdin.split())\n\n    x_1, x_2 = min(x_1, x_2), max(x_1, x_2)\n    t_1, t_2 = min(t_1, t_2), max(t_1, t_2)\n    return str(int((x_1 - s) / (x_2 - s) * t_1 + (s - x_1) / (x_2 - s) * t_2))\n\nprint(solution(input()))\n"
    },
    {
        "number": 480,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s, x_1, x_2 = list(map(int, stdin.split()))\n    t_1, t_2 = list(map(int, stdin.split()))\n    t = t_1\n    count = 0\n    x = x_1\n    direction = 1\n    while x!= x_2:\n        if x < x_2:\n            x += t\n        else:\n            x -= t\n        count += 1\n    return count\n"
    },
    {
        "number": 480,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s, x_1, x_2 = map(int, stdin.split())\n    t_1, t_2 = map(int, stdin.split())\n    d = 1 if (x_2 - x_1) % (t_2 - t_1) else -1\n\n    if d == -1:\n        x_2 = x_1 + t_1\n    else:\n        x_2 = x_1 + t_2\n\n    return str(max(0, x_2 - x_1))"
    },
    {
        "number": 480,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s, x_1, x_2 = map(int, stdin.split())\n    t_1, t_2 = map(int, input().split())\n    p, d = map(int, input().split())\n\n    dx = (x_2 - x_1) // (s - 1)\n    delta = (1 + d) * dx\n\n    t_needed = (1 + t_1) * (x_2 - x_1) + t_2 * delta\n\n    return str(t_needed // (s - 1))\n\nprint(solution(input()))\n"
    },
    {
        "number": 480,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = list(map(int, stdin.split()))\n    return(min(abs(x_2 - x_1) // (t_1 + t_2) * (t_1 + t_2) for x_1, x_2, t_1, t_2, p, d in zip(s, s[1:], *map(int, stdin.split()))))\n    "
    },
    {
        "number": 480,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s, x_1, x_2, t_1, t_2 = map(int, stdin.split())\n    d_1, d_2 = map(int, stdin.split())\n\n    # Optimize for the one that takes the minimum amount of time\n    # Start from x_1 and go forward until x_2\n    # Try moving forward by one meter, then backward, until we arrive at x_2\n    # Go backward by one meter, then forward, until we arrive at x_1\n    if (x_1 <= x_2 and d_1 == 1) or (x_1 >= x_2 and d_1 == -1):\n        ans = (x_1 - x_2) * (t_1 + t_2)\n\n    # Optimize for the other one that takes the minimum amount of time\n    # Start from x_2 and go backward until x_1\n    # Try moving backward by one meter, then forward, until we arrive at x_1\n    # Go forward by one meter, then backward, until we arrive at x_2\n    if (x_1 <= x_2 and d_2 == 1) or (x_1 >= x_2 and d_2 == -1):\n        ans = (x_2 - x_1) * (t_1 + t_2)\n\n    return str(ans)\n"
    },
    {
        "number": 480,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s, x_1, x_2 = map(int, stdin.split())\n\n    # Tram can enter any point, that is, the tram can be at any position.\n    x_1 = -1\n    x_2 = -1\n    t_1, t_2 = map(int, stdin.split())\n\n    # At any moment, the tram is at the point x_1.\n    x_1 = 0\n    x_2 = s\n\n    t = 0\n\n    # While the tram is not at the point x_2.\n    while x_1!= x_2:\n        # If the tram is not going in the direction from point x_1 to point x_2.\n        if x_2!= x_1:\n            # Calculate the distance x_1 to the next point.\n            x_1 += s - x_1\n\n        # If the tram is going in the direction from point x_1 to point x_2.\n        if x_2 == x_1:\n            # Calculate the distance x_2 to the next point.\n            x_2 += s - x_2\n\n        # Calculate the time needed for the tram to pass from point x_1 to point x_2.\n        t += (s - x_1) / (t_1 - t)\n\n        # If the tram has passed the point x_2.\n        if x_2 == s:\n            # Calculate the time needed for the tram to pass from point x_2 to point x_2.\n            t += (x_2 - x_2) / (t_2 - t_1)\n            x_1 = -1\n            x_2 = -1\n\n        # Calculate the time needed for the tram to pass from point x_1 to point x_2.\n        t += (x_2 - x_1) / (t_2 - t_1)\n        x_1 = x_1 + (t_1 - t) * (t_2 - t_1) / (t_1 - t_2)\n        x_2 = x_2 + (t_2 - t) * (t_1 - t_2) / (t_1 - t_2)\n\n    return str(int(t))\n\nprint(solution(input()))\n"
    },
    {
        "number": 480,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s, x_1, x_2 = map(int, stdin.split())\n    t_1, t_2 = map(int, stdin.split())\n    p = int(stdin.split()[2])\n    d = int(stdin.split()[3])\n    t = 0\n    while x_1 < x_2:\n        if p == 0:\n            x_1 += 1\n            p += 1\n        elif p == 1:\n            x_1 -= 1\n            p -= 1\n        elif p == -1:\n            x_1 += 1\n            p -= 1\n        t += t_2\n        if x_1 == p:\n            if x_1 + t_1 <= t_2:\n                t += t_1\n            else:\n                t += t_1 - (t_2 - x_1)\n        if x_1 == x_2:\n            if t + t_1 <= t_2:\n                t += t_1\n            else:\n                t += t_2 - (x_1 + t_1)\n    return str(t)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 481,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, x = map(int, stdin.split())\n    for i in range(n):\n        for j in range(n):\n            if (i + 1) * (j + 1) == x:\n                print((i + 1) * (j + 1))\n    return\n"
    },
    {
        "number": 481,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    cnt = 0\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if x == i * j:\n                cnt += 1\n    return str(cnt)\n"
    },
    {
        "number": 481,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n  n, x = stdin.split()\n  n = int(n)\n  x = int(x)\n  return str(get_count(n, x))\n\ndef"
    },
    {
        "number": 481,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    _, n, x = stdin.split()\n    return str(sum(n.count(i) for i in range(1, int(n) + 1) if i * int(n) == int(x)))\n"
    },
    {
        "number": 481,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    n, x = stdin.split()\n    n = int(n)\n    x = int(x)\n    count = 0\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if x == i * j:\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 481,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n == m:\n        return str(1)\n    elif n > m:\n        return str(0)\n    else:\n        return str(m * n - (n - 1) * (n - 2) // 2)\n"
    },
    {
        "number": 481,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\nimport sys\nimport math"
    },
    {
        "number": 481,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 481,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    table = stdin.split()\n    table_ = {}\n    x = int(table[1])\n    ans = 0\n    for i in range(1, int(table[0]) + 1):\n        for j in range(1, int(table[0]) + 1):\n            table_[i * j] = table_[i * j] + 1 if i * j in table_ else table_[i * j] = 1\n    for i in table_:\n        if i == x:\n            ans += 1\n    return str(ans)\n\n\nsolution('5 13')\nsolution('6 12')\nsolution('5 13')\nsolution('10 5')\n"
    },
    {
        "number": 481,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\nSample Input 1\n\n10 5\n\nSample Output 1\n\n2\n\nSample Input 2\n\n6 12\n\nSample Output 2\n\n4\n\n\n\"\"\"\n\n\n\nn, x = list(map(int, input().split()))\n\ncount = 0\nfor i in range(n):\n    for j in range(n):\n        if x == i*j:\n            count += 1\n\nprint(count)\n"
    },
    {
        "number": 482,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    # how many lowercase letters a, j and v can be used in password\n    if n >= 3 and k >= min(n, 26):\n        for i in range(k, n):\n            if 'a' <= stdin[i] <= 'z':\n                return stdin[:i] + 'a' + stdin[i:]\n        for i in range(k, n):\n            if 'j' <= stdin[i] <= 'z':\n                return stdin[:i] + 'j' + stdin[i:]\n        for i in range(k, n):\n            if 'v' <= stdin[i] <= 'z':\n                return stdin[:i] + 'v' + stdin[i:]\n    elif n >= 4 and k >= min(n, 26):\n        for i in range(k, n):\n            if 'a' <= stdin[i] <= 'z':\n                return stdin[:i] + 'a' + stdin[i:]\n            if 'j' <= stdin[i] <= 'z':\n                return stdin[:i] + 'j' + stdin[i:]\n            if 'v' <= stdin[i] <= 'z':\n                return stdin[:i] + 'v' + stdin[i:]\n        for i in range(k, n):\n            if 'p' <= stdin[i] <= 'z':\n                return stdin[:i] + 'p' + stdin[i:]\n        for i in range(k, n):\n            if 'h' <= stdin[i] <= 'z':\n                return stdin[:i] + 'h' + stdin[i:]\n    elif n >= 5 and k >= min(n, 26):\n        for i in range(k, n):\n            if 'a' <= stdin[i] <= 'z':\n                return stdin[:i] + 'a' + stdin[i:]\n            if 'j' <= stdin[i] <= 'z':\n                return stdin[:i] + 'j' + stdin[i:]\n            if 'v' <= stdin[i] <= 'z':\n                return stdin[:i] + 'v' + stdin[i:]\n        for i in range(k, n):\n            if 'p' <= stdin[i] <= 'z':\n                return stdin[:i] + 'p' + stdin[i:]\n        for i in range(k, n):\n            if 'h' <= stdin[i] <= 'z':\n                return stdin[:i] + 'h' + stdin[i:]\n        for i in range(k, n):\n            if's' <= stdin[i] <= 'z':\n                return stdin[:i] +'s' + stdin[i:]\n    else:\n        print(f\"{n}, {k}\")\n        return\n\nsolution(\"2 3\")\nsolution(\"4 5\")\nsolution(\"6 6\")\nsolution(\"5 2\")\n"
    },
    {
        "number": 482,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    for i in range(n, min(n, 26) + 1):\n        for j in range(i, min(i, 26) + 1):\n            for z in range(min(i, 26) + 1):\n                if len(set(f\"{chr(k + z)}\".lower() for k in range(i))) == k and len(set(f\"{chr(k + j)}\".lower() for k in range(i))) == k:\n                    print(f\"{chr(k + j)}\".lower())\n                    break\n    return \"\""
    },
    {
        "number": 482,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split()]\n    return ''.join(sorted(list(set(stdin))[::2]))\nprint(solution(input()))"
    },
    {
        "number": 482,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    length = int(stdin.split()[0])\n    k = int(stdin.split()[1])\n    password = \"\"\n    i = 0\n    while len(password)!= length and i < length:\n        password = \"\"\n        while len(password)!= length and len(set(password)) <= k:\n            password += stdin.split()[i + 1][0]\n            i += 1\n        i += 1\n    return password\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 482,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    res = \"\"\n    while len(res)!= n:\n        s = \"\".join(sorted(set(res)))\n        res = \"\".join(sorted(set(res)))\n    print(res)\n\n\nsolution(input())\n"
    },
    {
        "number": 482,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 482,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    alpha = \"abcdefghijklmnopqrstuvwxyz\"\n    for i in range(n, k + 1):\n        s = \"\".join(set(alpha[0:i]))\n        if (len(s) == i) and (all(c in s for c in \"ljv\")):\n            return s\n    return \"\"\n"
    },
    {
        "number": 482,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = (int(x) for x in stdin.split())\n    res = []\n    for i in range(n, k + 1):\n        word = \"\"\n        while i:\n            word = word + chr(ord('a') + (i - 1) % 26)\n            i = i // 26\n        if len(set(word)) == k:\n            res.append(word)\n    return res[0] if len(res) == 1 else res\n\n\nsolution(input())\n"
    },
    {
        "number": 482,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass_len, pass_dist = stdin.split()\n    pass_len, pass_dist = int(pass_len), int(pass_dist)\n    \n    pass_list = [chr(i) for i in range(97, 97+26)]\n    \n    #iterate over all possible passwords\n    for i in range(pass_len):\n        for j in range(pass_len):\n            #check if the current password is valid\n            if pass_dist == len(set(pass_list[i:j])) and pass_list[i]!= pass_list[j]:\n                return ''.join(pass_list[i:j])\n    \n    return '-'\n\nprint(solution(input()))"
    },
    {
        "number": 482,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\nstdin = stdin.strip()\nn, k = map(int, stdin.split())\n\npassword = []\n\nfor i in range(n):\n    password.append(random.choice(\"abcdefghijklmnopqrstuvwxyz\"))\n\npassword = ''.join(password)"
    },
    {
        "number": 483,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    left = 0\n    right = 0\n    collision = -1\n    while left < len(stdin):\n        if stdin[left] == \"R\":\n            right += 1\n        else:\n            left += 1\n        if right == len(stdin):\n            break\n        if left == right:\n            collision = min(collision, abs(int(stdin[left]) - int(stdin[right])))\n    return str(collision)"
    },
    {
        "number": 483,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin.strip().split()[0])\n    left: str = stdin.strip().split()[1]\n    right: str = stdin.strip().split()[2]\n    point: List[int] = stdin.strip().split()[3:]\n    point = list(map(lambda x: int(x), point))\n    \n    if len(point)!= n:\n        return -1\n    \n    if left!= right:\n        return -1\n    \n    if left == \"R\":\n        return len(point)\n    if left == \"L\":\n        return -1\n    \n    # first point\n    if point[0] == point[1]:\n        return -1\n    \n    # last point\n    if point[-1] == point[-2]:\n        return -1\n    \n    min_time = 0\n    max_time = 0\n    # first case\n    if point[0] < point[1]:\n        min_time = 1\n    elif point[0] > point[1]:\n        max_time = 1\n    # second case\n    if point[0] == point[1]:\n        return -1\n    # third case\n    if point[0] < point[1]:\n        min_time = 1\n    elif point[0] > point[1]:\n        max_time = 1\n    \n    if point[0] == point[1]:\n        return -1\n    \n    # find the time from the last point to the first point\n    for i in range(1, n):\n        if point[i-1] < point[i]:\n            if min_time == 1:\n                min_time = 1\n            else:\n                min_time += 1\n        elif point[i-1] > point[i]:\n            if max_time == 1:\n                max_time = 1\n            else:\n                max_time += 1\n    \n    # if there is an explosion\n    if min_time == 1 or max_time == 1:\n        return min_time + max_time + 1\n    else:\n        return -1\n"
    },
    {
        "number": 483,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    pairs = stdin.split()[1:]\n    pairs = [(int(pairs[i]), int(pairs[i + 1])) for i in range(0, len(pairs), 2)]\n    particles_pos = []\n    collision = -1\n    for pair in pairs:\n        p1, p2 = pair\n        if p1 < p2:\n            collision = (p1, p2)\n            break\n    if collision == -1:\n        return str(collision)\n    for i in range(n):\n        particles_pos.append(i)\n    particles_pos.sort()\n    for i, pair in enumerate(pairs):\n        p1, p2 = pair\n        p1_pos = particles_pos.index(p1)\n        p2_pos = particles_pos.index(p2)\n        if p1_pos > p2_pos:\n            particles_pos[p1_pos] = p2_pos\n    collision = (particles_pos[0], particles_pos[1])\n    return str(collision)\n\n\nprint(solution(input()))"
    },
    {
        "number": 483,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n <= 1:\n        return \"0\"\n\n    x = list(map(int, stdin.strip().split()))\n    x.sort()\n    if x[0] == x[1] and x[0] == x[2]:\n        return \"0\"\n    if x[0] == x[1] or x[1] == x[2]:\n        return \"-1\"\n\n    left = 0\n    right = n - 1\n    while left < right:\n        mid = (left + right) // 2\n        if x[mid] == x[mid - 1] and x[mid] == x[mid + 1]:\n            left = mid + 1\n        elif x[mid] == x[mid + 1]:\n            right = mid\n        else:\n            left = mid + 1\n\n    return str(right * 2)\n"
    },
    {
        "number": 483,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = list(map(int, stdin.split()))\n    left_to_right = [0]*n\n    right_to_left = [0]*n\n    for i in range(n):\n        if x[i] == 'L':\n            left_to_right[i] = 1\n        else:\n            right_to_left[i] = 1\n    left_to_right_idx = 0\n    right_to_left_idx = 0\n    while left_to_right_idx < n and right_to_left_idx < n:\n        if left_to_right[left_to_right_idx] and right_to_left[right_to_left_idx]:\n            left_to_right_idx += 1\n            right_to_left_idx += 1\n        elif left_to_right[left_to_right_idx]:\n            left_to_right_idx += 1\n        elif right_to_left[right_to_left_idx]:\n            right_to_left_idx += 1\n        else:\n            return '-1'\n    if left_to_right_idx == n:\n        return '-1'\n    return str(n*2*1000000//(right_to_left_idx - left_to_right_idx))\n"
    },
    {
        "number": 483,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, *directions = list(map(lambda x: x == 'L' and -1 or 1, stdin))\n    x = sorted(directions)\n    return str(min([x.index(0) + 1, x.index(0) + 2])) if not any(\n        [d > 0 for d in directions]) else '-1'\nprint(solution('RLRL'))\n"
    },
    {
        "number": 483,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return str(1)\n    elif n == 2:\n        return str(-1)\n    else:\n        arr = list(map(int, stdin.split()))\n        d = {}\n        a = arr[2::2]\n        b = arr[3::2]\n        x = a + b\n        x.sort()\n        for i in range(n):\n            d[i] = x.pop()\n        i = 0\n        while i < n:\n            if i+1 < n:\n                while (i+1 < n and arr[i] == d[i+1]):\n                    i += 1\n                if i == n-1:\n                    return str(-1)\n                i += 1\n            else:\n                i += 1\n        return str(i)"
    },
    {
        "number": 483,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 4\n   ... RRRR\n   ... 2 4 6 10\n   ... ''')\n    '1'\n    >>> solution('''\n   ... 3\n   ... LRLL\n   ... 5 7 8\n   ... ''')\n    '-1'\n    \"\"\"\n    coordinates = stdin.strip().split()\n    colliders = {(x, y) for x, y in zip(coordinates[::2], coordinates[1::2])}\n    seen = set()\n    end_time = 0\n    while colliders:\n        colliders -= seen\n        seen |= colliders\n        if colliders:\n            end_time = max(end_time, max(colliders) + 1)\n    return str(end_time)\n"
    },
    {
        "number": 483,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    coordinates = stdin.split()\n    coordinates = [int(x) for x in coordinates]\n    particles = coordinates[1::2]\n    coordinates = coordinates[::2]\n    coordinates = sorted(coordinates)\n    particles.sort()\n    particles = [(x, y) for x, y in zip(particles, coordinates)]\n    left = particles.pop(0)\n    right = particles.pop(0)\n    while left!= right:\n        left, right = max(left, right), min(left, right)\n        left = (left[0] + 1, left[1])\n        right = (right[0] - 1, right[1])\n    if left == right:\n        return -1\n    return left[1]\n"
    },
    {
        "number": 483,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    particles = []\n    for _ in range(n):\n        particles.append(int(stdin))\n\n    for i in range(len(particles)):\n        if i!= 0 and particles[i - 1] == particles[i]:\n            count += 1\n            particles[i - 1] = None\n    for i in range(len(particles)):\n        if i!= 0 and particles[i - 1] is None and particles[i] is not None:\n            count += 1\n    return str(count) if count!= 0 else '-1'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 484,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    x, y = (int(input()) for _ in range(n))\n    return max(0, a + b + max(x + y, a * b) - min(x, y) * a)\n"
    },
    {
        "number": 484,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    x_list = list(map(int, stdin.split()))\n    max_area = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if x_list[i] + x_list[j] <= b:\n                area = x_list[i] * x_list[j]\n                if area > max_area:\n                    max_area = area\n    return str(max_area)\n"
    },
    {
        "number": 484,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    (n, a, b) = (int(x) for x in stdin.split())\n    seals = []\n    seals_max_area = 0\n    for i in range(n):\n        seals.append((int(x) for x in stdin.split()[i*2:(i+1)*2]))\n    for i in range(len(seals)):\n        for j in range(len(seals)):\n            if i!= j:\n                if abs(seals[i][0] - seals[j][0]) > 0 and abs(seals[i][1] - seals[j][1]) > 0:\n                    seals_max_area = max(seals_max_area, abs(seals[i][0] - seals[j][0]) * abs(seals[i][1] - seals[j][1]))\n    return str(seals_max_area) if seals_max_area > 0 else str(0)\n"
    },
    {
        "number": 484,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = (int(x) for x in stdin.split())\n    lst = []\n    for _ in range(n):\n        lst.append(tuple(int(x) for x in stdin.split()))\n\n    lst = sorted(lst, key=lambda x: x[0] * x[1])\n    # print(lst)\n    ret = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (lst[i][0] * lst[i][1]) + (lst[j][0] * lst[j][1]) == b * a:\n                # print(i, j)\n                ret = max(ret, lst[i][0] * lst[i][1] + lst[j][0] * lst[j][1])\n                # print(ret)\n    return str(ret)"
    },
    {
        "number": 484,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    seals = []\n    for _ in range(n):\n        seals.append(tuple(map(int, stdin.split())))\n    seals = sorted(seals, key=lambda x: (x[0]**2 + x[1]**2, -x[0]**2 - x[1]**2))\n    if len(seals) == 0:\n        return 0\n    i = 1\n    impressions = set()\n    while len(seals) > 0:\n        imp = set()\n        while len(impressions) < 2 and i < len(seals) and seals[i][0]**2 + seals[i][1]**2 <= a**2 + b**2:\n            imp.add(seals[i])\n            impressions.add(seals[i])\n            i += 1\n        if len(imp) == 0:\n            break\n        if len(imp) == 1 and i == len(seals):\n            break\n        if len(imp) == 2:\n            impressions.remove(imp.pop())\n        seals = seals[i:]\n    return sum(map(lambda x: x[0]**2 + x[1]**2, impressions))\n"
    },
    {
        "number": 484,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2 2 2\n   ... 1 2\n   ... 2 1\n   ... ''')\n    '4'\n    >>> solution('''3 10 10\n   ... 6 6\n   ... 7 7\n   ... 20 5\n   ...\n   ... ''')\n    '56'\n    >>> solution('''4 10 9\n   ... 2 3\n   ... 1 1\n   ... 5 10\n   ... 9 11\n   ...\n   ... ''')\n    '0'\n    \"\"\"\n    n, a, b = map(int, input().split())\n    seals = [list(map(int, input().split())) for _ in range(n)]\n    seals = sorted(seals, key=lambda x: (x[1], x[0]))\n    total_area = 0\n\n    for i in range(n):\n        x, y = seals[i][0], seals[i][1]\n        total_area += x * y\n        if i + 1 < n and seals[i + 1][0] - x <= a:\n            # rotate left\n            if i + 1 == n - 1:\n                seals[i][0] = y\n            else:\n                seals[i][0] = x\n                seals[i + 1][0] = x\n        if i + 1 < n and seals[i + 1][1] - y <= b:\n            # rotate right\n            if i + 1 == n - 1:\n                seals[i][1] = x\n            else:\n                seals[i][1] = y\n                seals[i + 1][1] = y\n        if i + 1 < n and (seals[i + 1][0] - x <= a or seals[i + 1][1] - y <= b):\n            break\n\n    seals = sorted(seals, key=lambda x: x[1])\n    seals = sorted(seals, key=lambda x: x[0])\n    return str(total_area)\n"
    },
    {
        "number": 484,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    x_list = list(map(int, stdin.split()))\n    x_list.sort()\n    l = len(x_list)\n    if l < 2:\n        return 0\n    res = 0\n    for i in range(l - 1):\n        for j in range(i + 1, l):\n            res = max(res, (x_list[i] + x_list[j]) * min(x_list[i], x_list[j]))\n    return res\n\n\nsolution(\"2 2 2\")\nsolution(\"4 10 9\")\nsolution(\"3 10 10\")\nsolution(\"1 1 1\")\n"
    },
    {
        "number": 484,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    stdin = \"\"\"4 10 9\n2 3\n1 1\n5 10\n9 11\n\n\"\"\"\n    n, a, b = map(int, stdin.split())\n    s = set()\n    for i in range(n):\n        x, y = map(int, stdin.split())\n        s.add((x, y))\n    \n    max_area = 0\n    for i in range(1, n):\n        for j in range(i):\n            area = 2 * (xmax - xmin) * (ymax - ymin)\n            xmin = min(xmin, xmax)\n            xmax = max(xmax, xmin)\n            ymin = min(ymin, ymax)\n            ymax = max(ymax, ymin)\n            area -= max(0, min(xmax - xmin, ymax - ymin) - max(xmin - xmax, ymin - ymax))\n            area -= xmax - xmin + ymax - ymin\n            if i == j:\n                area -= xmax - xmin + ymax - ymin\n            if area > max_area:\n                max_area = area\n    \n    for i in range(n):\n        area = 2 * (xmax - xmin) * (ymax - ymin)\n        xmin = min(xmin, xmax)\n        xmax = max(xmax, xmin)\n        ymin = min(ymin, ymax)\n        ymax = max(ymax, ymin)\n        area -= max(0, min(xmax - xmin, ymax - ymin) - max(xmin - xmax, ymin - ymax))\n        area -= xmax - xmin + ymax - ymin\n        if i == n - 1:\n            area -= xmax - xmin + ymax - ymin\n        if area > max_area:\n            max_area = area\n    \n    print(max_area)\n\nsolution(stdin)\n\"\"\"\n"
    },
    {
        "number": 484,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = list(map(int, stdin.split()))\n    seal_size_list = []\n    for i in range(n):\n        seal_size_list.append(list(map(int, stdin.split())))\n    max_size = 0\n    for i in range(len(seal_size_list)-1):\n        for j in range(i+1, len(seal_size_list)):\n            if seal_size_list[i][0] >= seal_size_list[j][1] and seal_size_list[i][1] >= seal_size_list[j][0] and seal_size_list[i][0] + seal_size_list[j][1] > max_size:\n                max_size = seal_size_list[i][0] + seal_size_list[j][1]\n    if max_size == 0:\n        return \"0\"\n    else:\n        return str(max_size)\n"
    },
    {
        "number": 484,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    if n < 2 or a < 2 or b < 2:\n        return 0\n\n    imp_l = []\n    imp_r = []\n\n    for i in range(n):\n        imp_l.append(list(map(int, stdin.split())))\n        imp_r.append(list(map(int, stdin.split())))\n\n    imp_l = sorted(imp_l, key=lambda x: x[0])\n    imp_r = sorted(imp_r, key=lambda x: x[1], reverse=True)\n\n    imp_l_start_point_x = imp_l[0][0]\n    imp_l_start_point_y = imp_l[0][1]\n\n    imp_r_start_point_x = imp_r[0][0]\n    imp_r_start_point_y = imp_r[0][1]\n\n    max_area = 0\n\n    for i in range(n):\n        imp_l_end_point_x = imp_l_start_point_x + imp_l[i][0]\n        imp_l_end_point_y = imp_l_start_point_y + imp_l[i][1]\n\n        imp_r_end_point_x = imp_r_start_point_x + imp_r[i][0]\n        imp_r_end_point_y = imp_r_start_point_y + imp_r[i][1]\n\n        imp_l_area = abs(imp_l_end_point_x - imp_l_start_point_x) * abs(imp_l_end_point_y - imp_l_start_point_y)\n\n        imp_r_area = abs(imp_r_end_point_x - imp_r_start_point_x) * abs(imp_r_end_point_y - imp_r_start_point_y)\n\n        imp_total_area = imp_l_area + imp_r_area\n\n        if imp_total_area > max_area:\n            max_area = imp_total_area\n\n    return str(max_area)\n\n\ndef"
    },
    {
        "number": 485,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    p = int(n ** 0.5)\n    for i in range(4 * n + 1):\n        if i % p == 0:\n            return f'{int(i / p)},{int(i / p)}'\n    return '0,0'\n    # your code here\n"
    },
    {
        "number": 485,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    if n == 1:\n        return '1 0'\n    x_coordinates = list(map(int, stdin.split('\\n')))\n    zero_coordinate = None\n    for index, coord in enumerate(x_coordinates):\n        if coord == 0:\n            zero_coordinate = index\n            break\n\n    point_1 = [x_coordinates[zero_coordinate - 1], x_coordinates[zero_coordinate]]\n    point_2 = [x_coordinates[zero_coordinate], x_coordinates[zero_coordinate + 1]]\n    return f'{point_1[0]},{point_1[1]}' if point_1[0]!= point_2[0] else f'{point_2[0]},{point_2[1]}'\n'''\n"
    },
    {
        "number": 485,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    points = []\n    points.append([0,0])\n    points.append([0,2])\n    points.append([2,0])\n    points.append([2,2])\n    for line in stdin:\n        for i in range(4 * int(line) + 1):\n            points.append([line, i])\n    for i in range(len(points)):\n        points[i][0] = i % 4\n    for i in range(len(points)):\n        if points[i][0] == 0:\n            points[i][0] = i\n        points[i][1] = i % 4\n    for i in range(len(points)):\n        points[i][0] = i % 4\n        points[i][1] = i % 4\n    return str(points[points.index([int(line), int(line)])])\n\n\nprint(solution(sys.stdin.read()))"
    },
    {
        "number": 485,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    points = []\n    for i in range(4 * int(stdin.strip().split()[0]) + 1):\n        points.append(list(map(int, stdin.strip().split()[i].split())))\n\n    for i in range(1, 4 * int(stdin.strip().split()[0]) + 1):\n        points[i][0] = points[i - 1][0] + points[i][0]\n        points[i][1] = points[i - 1][1] + points[i][1]\n\n    x_min, x_max = 0, 0\n    y_min, y_max = 0, 0\n    for i in range(len(points)):\n        if points[i][0] > x_max:\n            x_max = points[i][0]\n        if points[i][0] < x_min:\n            x_min = points[i][0]\n        if points[i][1] > y_max:\n            y_max = points[i][1]\n        if points[i][1] < y_min:\n            y_min = points[i][1]\n\n    for i in range(len(points)):\n        if points[i][0] <= x_max and points[i][0] >= x_min and points[i][1] <= y_max and points[i][1] >= y_min:\n            return str(points[i][0]) +'' + str(points[i][1])\n\n\"\"\"\n\ndef"
    },
    {
        "number": 485,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    points = [(0, 0)]\n    for line in stdin.splitlines():\n        points.append((0, int(line)))\n        points.append((int(line), 0))\n        points.append((int(line), 2))\n        points.append((0, 2))\n\n    return str(points[2])\n"
    },
    {
        "number": 485,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    For each test case, print two integers - the coordinates of the point that is not on the boundary of the square.\n    \"\"\"\n    lines = stdin.split()\n    lines = [list(map(int, line.split())) for line in lines]\n\n    count_axis_x = 0\n    count_axis_y = 0\n\n    for line in lines:\n        if line[0] > line[2]:\n            count_axis_x += 1\n\n        if line[1] > line[3]:\n            count_axis_y += 1\n\n    if count_axis_x > 2 or count_axis_y > 2:\n        return\n    elif count_axis_x == 2 and count_axis_y == 2:\n        return\n    else:\n        return\n"
    },
    {
        "number": 485,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n'''\nimport math\nimport sys\nimport random\nfrom collections import Counter\n\ndef"
    },
    {
        "number": 485,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n"
    },
    {
        "number": 485,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 485,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n\n    n = int(stdin[0])\n    points = list(map(lambda x: list(map(int, x.split())), stdin[1:n + 1]))\n    for i in range(len(points)):\n        for j in range(i + 1, len(points)):\n            if points[i] == points[j]:\n                points.pop(i)\n                break\n    return str(points[0]) + str(points[-1])\n\nprint(solution(input()))\n"
    },
    {
        "number": 486,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    mul = []\n    for i in range(1, n + 1):\n        mul.append(reduce(lambda x, y: x * y, map(int, str(i))))\n    return str(max(mul))\n"
    },
    {
        "number": 486,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    max_value = 1\n    for x in range(1,n+1):\n        max_value *= x\n        print(max_value)\n    return str(max_value)\n"
    },
    {
        "number": 486,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return \"0\"\n    digits = set()\n    while n > 0:\n        digits.add(n % 10)\n        n //= 10\n    max_product = -1\n    for d in digits:\n        max_product = max(d * max_product, d)\n    return str(max_product)\n"
    },
    {
        "number": 486,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ans = 0\n    while n > 0:\n        ans = max(ans, n)\n        n //= 10\n    return str(ans)\n\nsolution(input())\n"
    },
    {
        "number": 486,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    digits = [int(x) for x in str(n)]\n    max_product = 0\n    for index in range(len(digits)):\n        product = 1\n        for digit in digits[index:]:\n            product *= digit\n        if product > max_product:\n            max_product = product\n    return str(max_product)\n"
    },
    {
        "number": 486,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    max_product = 1\n    product = 0\n    for n in range(1, int(stdin) + 1):\n        product = 1\n        for digit in str(n):\n            product *= int(digit)\n        if product > max_product:\n            max_product = product\n    return str(max_product)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 486,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    product = 0\n    print(n)\n    for i in range(1, n + 1):\n        print(i)\n        s = str(i)\n        prod = 1\n        for c in s:\n            prod *= int(c)\n        if prod > product:\n            product = prod\n    print(product)"
    },
    {
        "number": 486,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    largest = 0\n    for i in range(1, n+1):\n        product = 1\n        for digit in str(i):\n            product *= int(digit)\n        if product > largest:\n            largest = product\n    return str(largest)\n"
    },
    {
        "number": 486,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            p = str(i * j)\n            if \"0\" in p:\n                break\n            if i * j > int(p):\n                print(i * j)\n                return\nstdin = input()\nsolution(stdin)"
    },
    {
        "number": 486,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    max_value = 0\n    for i in range(1, n+1):\n        product = 1\n        for j in str(i):\n            product *= int(j)\n        if product > max_value:\n            max_value = product\n    return str(max_value)\n"
    },
    {
        "number": 487,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip().split()[0])\n    votes = list(map(int, stdin.strip().split()[1:]))\n    best_k = 0\n    best_votes = 0\n    for k in range(1, n):\n        votes_sum = sum(votes)\n        if votes_sum >= best_votes:\n            best_votes = votes_sum\n            best_k = k\n    print(best_k)\n    return \"Case #{}: {}\".format(i, best_k)\n"
    },
    {
        "number": 487,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(min(max(int(i) for i in stdin.split()), n))\n"
    },
    {
        "number": 487,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a_votes = list(map(int, stdin.split()))\n    votes_needed = sum(a_votes)\n\n    if votes_needed > n:\n        return \"0\"\n    elif votes_needed == 0:\n        return \"1\"\n\n    def partition(A, left, right, pivot):\n        p_val = A[pivot]\n        i = left\n        j = right\n\n        while i < j:\n            while i < j and A[i] <= p_val:\n                i += 1\n            while i < j and A[j] > p_val:\n                j -= 1\n            if i < j:\n                A[i], A[j] = A[j], A[i]\n        A[i], A[pivot] = A[pivot], A[i]\n        return i\n\n    def randomized_quick_sort(A, left, right):\n        if left >= right:\n            return\n        p = randint(left, right)\n        pivot = partition(A, left, right, p)\n        randomized_quick_sort(A, left, pivot - 1)\n        randomized_quick_sort(A, pivot + 1, right)\n\n    randomized_quick_sort(a_votes, 0, n - 1)\n    print(a_votes)\n    return str(min(a_votes))\n\nprint(solution(input()))"
    },
    {
        "number": 487,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    a.sort()\n    max_a = a[-1]\n    for i in range(n):\n        if a[i] > max_a:\n            max_a = a[i]\n            break\n    k = 1\n    while k < max_a:\n        for i in range(n):\n            if a[i] == k:\n                a[i] = a[i] - k\n                k += 1\n                if k == max_a:\n                    return str(k)\n                break\n    return str(max_a)\n"
    },
    {
        "number": 487,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    votes = list(map(int, stdin.split()[1]))\n\n    # \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\n    max_votes = max(votes)\n\n    # \u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u043e\u0441\u0442\u0430\u0442\u043e\u043a \u043e\u0442 \u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043f\u043e \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u043c\u0443 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044e \u043d\u0430 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0435\u0441\u0442\n    result = max_votes % n\n\n    return str(result)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 487,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    return str(a[-1])\n"
    },
    {
        "number": 487,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip().split()\n    a = stdin[1:]\n    a.sort()\n    return str(a[-1])"
    },
    {
        "number": 487,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin\n    n = int(data.split()[0])\n    votes = list(map(int, data.split()[1:]))\n    votes = sorted(votes, reverse=True)\n    if votes[n - 1] == max(votes):\n        return str(votes[n - 1])\n    else:\n        k = 0\n        while True:\n            k += 1\n            if sum(votes[:n]) < sum(votes[n:2 * n]):\n                k -= 1\n                break\n        return str(k)\n"
    },
    {
        "number": 487,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    votes = list(map(int, stdin.split()))\n    a = max(votes)\n    while(True):\n        if sum(votes) == a:\n            return str(min(votes))\n        votes = votes[1:]\n        if votes == []:\n            return '0'"
    },
    {
        "number": 487,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(map(int, stdin.split()))\n    k = 1\n    while k < n:\n        k += 1\n        max_a = max(a)\n        while k > max_a:\n            k -= max_a\n    return str(k)"
    },
    {
        "number": 488,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    colors = {x for x in stdin}\n    while len(colors) > 2:\n        color_to_remove = {x for x in colors if len(set(x) & colors) == 2}\n        colors -= color_to_remove\n    return str(len(colors))\n\nprint(solution(input()))"
    },
    {
        "number": 488,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    points = stdin.split()\n    colors = {}\n    for p in points:\n        if p in colors:\n            colors[p] += 1\n        else:\n            colors[p] = 1\n    print(len(colors))\n    return 0\n\nsolution(\"aabb\")\nsolution(\"aabcaa\")\n\"\"\"\n"
    },
    {
        "number": 488,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    color_to_color_number = {}\n    neighbor_list = [[] for _ in range(n)]\n    for i in range(n):\n        a, b = stdin[i], stdin[(i + 1) % n]\n        if a not in color_to_color_number:\n            color_to_color_number[a] = 1\n            neighbor_list[i].append(b)\n        if b not in color_to_color_number:\n            color_to_color_number[b] = 2\n            neighbor_list[(i + 1) % n].append(a)\n    for i in range(n):\n        a, b = neighbor_list[i]\n        for j in range(i + 1, n):\n            if a in color_to_color_number and color_to_color_number[a] == b:\n                break\n            for k in range(j + 1, n):\n                if a in color_to_color_number and color_to_color_number[a] == b:\n                    break\n                for l in range(k + 1, n):\n                    if a in color_to_color_number and color_to_color_number[a] == b:\n                        break\n                    if a in color_to_color_number and color_to_color_number[a] == l:\n                        break\n                    if b in color_to_color_number and color_to_color_number[b] == a:\n                        break\n                    if b in color_to_color_number and color_to_color_number[b] == l:\n                        break\n                    if b in color_to_color_number and color_to_color_number[b] == k:\n                        break\n                    if b in color_to_color_number and color_to_color_number[b] == a:\n                        break\n                    if a == b and a == k:\n                        continue\n                    if l == a and a == b:\n                        continue\n                    if a == b and a == l:\n                        continue\n                    if a == k and a == b:\n                        continue\n                    if a == l and a == b:\n                        continue\n                    if a == k and a == l:\n                        continue\n                    if a == b and a == k:\n                        continue\n                    if a == k and a == l:\n                        continue\n                    if a == b and a == k:\n                        continue\n                    if b == a and a == k:\n                        continue\n                    if b == a and a == l:\n                        continue\n                    if b == k and a == l:\n                        continue\n                    if b == k and a == b:\n                        continue\n                    if b == l and a == k:\n                        continue\n                    if b == l and a == b:\n                        continue\n                    if b == k and a == l:\n                        continue\n                    if k == a and a == l:\n                        continue\n                    if k == b and b == l:\n                        continue\n                    if k == b and b == k:\n                        continue\n                    if k == a and a == l:\n                        continue\n                    if k == l and a == b:\n                        continue\n                    if k == a and a == k:\n                        continue\n                    if k == b and b == l:\n                        continue\n                    if k == l and a == b:\n                        continue\n                    if k == a and a == k:\n                        continue\n                    if l == a and a == b:\n                        continue\n                    if l == b and b == k:\n                        continue\n                    if l == k and a == b:\n                        continue\n                    if l == k and a == l:\n                        continue\n                    if l == b and b == k:\n                        continue\n                    if l == b and b == l:\n                        continue\n                    if l == k and a == l:\n                        continue\n                    if l == a and a == k:\n                        continue\n                    if l == k and a == l:\n                        continue\n                    if l == b and b == k:\n                        continue\n                    if k == a and a == l:\n                        continue\n                    if k == b and b == a:\n                        continue\n                    if k == b and b == l:\n                        continue\n                    if k == l and a == b:\n                        continue\n                    if l == a and a == k:\n                        continue\n                    if l == k and a == a:\n                        continue\n                    if l == b and b == k:\n                        continue\n                    if k == a and a == b:\n                        continue\n                    if k == b and b == l:\n                        continue\n                    if k == l and a == b:\n                        continue\n                    if k == b and b == l:\n                        continue\n                    if k == l and a == k:\n                        continue\n                    if k == a and a == l:\n                        continue\n                    if l == a and a == k:\n                        continue\n                    if l == b and b == k:\n                        continue\n                    if k == a and a == b:\n                        continue\n                    if k == b and b == l:\n                        continue\n                    if k == l and a == b:\n                        continue\n                    if k == a and a == l:\n                        continue\n                    if l == a and a == k:\n                        continue\n                    if l == b and b == a:\n                        continue\n                    if k == a and a == l:\n                        continue\n                    if k == b and b == a:\n                        continue\n                    if k == l and a == b:\n                        continue\n                    if k == b and b == l:\n                        continue\n                    if k == l and a == k:\n                        continue\n                    if k == a and a == l:\n                        continue\n                    if l == a and a == k:\n                        continue\n                    if l == b and b == a:\n                        continue\n                    if k == a and a == l:\n                        continue\n                    if k == b and b == a:\n                        continue\n                    if k == l and a == b:\n                        continue\n                    if k == b and b == l:\n                        continue\n                    if l == a and a == k:\n                        continue\n                    if l == b and b == a:\n                        continue\n                    if k == a and a == l:\n                        continue\n                    if k == b and b == l:\n                        continue\n                    if l == a and a == k:\n                        continue\n                    if l == b and b == a:\n                        continue\n                    if k == a and a == l:\n                        continue\n                    if k == b and b == l:\n                        continue\n                    if l == a and a == k:\n                        continue\n                    if l == b and b == a:\n                        continue\n                    if k == a and a == l:\n                        continue\n                    if k == b and b == a:\n                        continue\n                    if k == l and a == b:\n                        continue\n                    if k == b and b == l:\n                        continue\n                    if l == a and a == k:\n                        continue\n                    if l == b and b == a:\n                        continue\n                    "
    },
    {
        "number": 488,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.strip()\n"
    },
    {
        "number": 488,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    points = set(char for char in stdin)\n    while len(points) > 2:\n        points.remove(min(points))\n        points.remove(max(points))\n    return str(len(points))\n"
    },
    {
        "number": 488,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Please write your code here\n    points = stdin\n    while True:\n        if points.count('a') == 1:\n            break\n        points = points.replace('a','')\n    return str(len(points))\n\nstdin = input()\nresult = solution(stdin)\nprint(result)\n"
    },
    {
        "number": 488,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    answer = 0\n    points = {i for i in range(1, len(stdin) + 1)}\n    while points:\n        answer += 1\n        points -= set(pair for pair in combinations(points, 2) if stdin[pair[0] - 1]!= stdin[pair[1] - 1])\n    return answer\n\nsolution(\"aabb\")\n"
    },
    {
        "number": 488,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    a = \"abcdefghijklmnopqrstuvwxyz\"\n    b = a.upper()\n    c = []\n    d = []\n    n = len(a)\n    for i in range(n):\n        c.append(b[i])\n        d.append(a[i])\n    d = set(d)\n    d = set(c)\n    b = stdin.split()\n    for i in range(len(b)):\n        a = set(b[i])\n        a.discard(\"a\")\n        a.discard(\"b\")\n        a.discard(\"c\")\n        a.discard(\"d\")\n        a.discard(\"e\")\n        a.discard(\"f\")\n        a.discard(\"g\")\n        a.discard(\"h\")\n        a.discard(\"i\")\n        a.discard(\"j\")\n        a.discard(\"k\")\n        a.discard(\"l\")\n        a.discard(\"m\")\n        a.discard(\"n\")\n        a.discard(\"o\")\n        a.discard(\"p\")\n        a.discard(\"q\")\n        a.discard(\"r\")\n        a.discard(\"s\")\n        a.discard(\"t\")\n        a.discard(\"u\")\n        a.discard(\"v\")\n        a.discard(\"w\")\n        a.discard(\"x\")\n        a.discard(\"y\")\n        a.discard(\"z\")\n        a.discard(\"A\")\n        a.discard(\"B\")\n        a.discard(\"C\")\n        a.discard(\"D\")\n        a.discard(\"E\")\n        a.discard(\"F\")\n        a.discard(\"G\")\n        a.discard(\"H\")\n        a.discard(\"I\")\n        a.discard(\"J\")\n        a.discard(\"K\")\n        a.discard(\"L\")\n        a.discard(\"M\")\n        a.discard(\"N\")\n        a.discard(\"O\")\n        a.discard(\"P\")\n        a.discard(\"Q\")\n        a.discard(\"R\")\n        a.discard(\"S\")\n        a.discard(\"T\")\n        a.discard(\"U\")\n        a.discard(\"V\")\n        a.discard(\"W\")\n        a.discard(\"X\")\n        a.discard(\"Y\")\n        a.discard(\"Z\")\n        a.discard(\"0\")\n        a.discard(\"1\")\n        a.discard(\"2\")\n        a.discard(\"3\")\n        a.discard(\"4\")\n        a.discard(\"5\")\n        a.discard(\"6\")\n        a.discard(\"7\")\n        a.discard(\"8\")\n        a.discard(\"9\")\n        d.discard(a)\n    f = stdin.split()\n    for i in range(len(f)):\n        f[i] = set(f[i])\n        f[i].discard(\"a\")\n        f[i].discard(\"b\")\n        f[i].discard(\"c\")\n        f[i].discard(\"d\")\n        f[i].discard(\"e\")\n        f[i].discard(\"f\")\n        f[i].discard(\"g\")\n        f[i].discard(\"h\")\n        f[i].discard(\"i\")\n        f[i].discard(\"j\")\n        f[i].discard(\"k\")\n        f[i].discard(\"l\")\n        f[i].discard(\"m\")\n        f[i].discard(\"n\")\n        f[i].discard(\"o\")\n        f[i].discard(\"p\")\n        f[i].discard(\"q\")\n        f[i].discard(\"r\")\n        f[i].discard(\"s\")\n        f[i].discard(\"t\")\n        f[i].discard(\"u\")\n        f[i].discard(\"v\")\n        f[i].discard(\"w\")\n        f[i].discard(\"x\")\n        f[i].discard(\"y\")\n        f[i].discard(\"z\")\n        f[i].discard(\"A\")\n        f[i].discard(\"B\")\n        f[i].discard(\"C\")\n        f[i].discard(\"D\")\n        f[i].discard(\"E\")\n        f[i].discard(\"F\")\n        f[i].discard(\"G\")\n        f[i].discard(\"H\")\n        f[i].discard(\"I\")\n        f[i].discard(\"J\")\n        f[i].discard(\"K\")\n        f[i].discard(\"L\")\n        f[i].discard(\"M\")\n        f[i].discard(\"N\")\n        f[i].discard(\"O\")\n        f[i].discard(\"P\")\n        f[i].discard(\"Q\")\n        f[i].discard(\"R\")\n        f[i].discard(\"S\")\n        f[i].discard(\"T\")\n        f[i].discard(\"U\")\n        f[i].discard(\"V\")\n        f[i].discard(\"W\")\n        f[i].discard(\"X\")\n        f[i].discard(\"Y\")\n        f[i].discard(\"Z\")\n        f[i].discard(\"0\")\n        f[i].discard(\"1\")\n        f[i].discard(\"2\")\n        f[i].discard(\"3\")\n        f[i].discard(\"4\")\n        f[i].discard(\"5\")\n        f[i].discard(\"6\")\n        f[i].discard(\"7\")\n        f[i].discard(\"8\")\n        f[i].discard(\"9\")\n        d.discard(f[i])\n    d = list(d)\n    x = sorted(d)\n    count = 0\n    for i in range(len(x)):\n        if x[i] == x[i + 1]:\n            count += 1\n        else:\n            break\n    return count\n\n\nprint(solution(\"aabb\"))\nprint(solution(\"aabcaa\"))"
    },
    {
        "number": 488,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.split()\n    ans = 0\n    while len(s) > 1:\n        ans += 1\n        for i in range(len(s)):\n            if i+1 == len(s):\n                break\n            if s[i+1]!= s[i]:\n                s.pop(i)\n                break\n        for i in range(len(s)-1, -1, -1):\n            if i-1 == -1:\n                break\n            if s[i-1]!= s[i]:\n                s.pop(i)\n                break\n    return str(ans)\n"
    },
    {
        "number": 488,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    points = set()\n    for i in range(len(stdin)):\n        points.add(stdin[i])\n        if i > 0:\n            if stdin[i]!= stdin[i - 1]:\n                points.remove(stdin[i - 1])\n            if i < len(stdin) - 1:\n                if stdin[i]!= stdin[i + 1]:\n                    points.remove(stdin[i + 1])\n    return str(len(points))\n"
    },
    {
        "number": 489,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(i) for i in stdin.split()]\n    if n < 3:\n        return \"0\"\n    a.sort(reverse=True)\n    ans = 0\n    for i in range(0, n - 2):\n        for j in range(i + 1, n - 1):\n            k = n - 1\n            while k > j:\n                if a[i] * a[j] * a[k] < a[-1] * a[-2] * a[-3]:\n                    break\n                k -= 1\n            if k == j:\n                continue\n            ans += 1\n    return str(ans)\n\nInput\n2\n1 3 3 1 3 2\n\nOutput\n2\n\nInput\n3\n1 3 1 1\n\nOutput\n0\n\nInput\n6\n1 3 3 1 3 2\n\nOutput\n1\n\nInput\n5\n1 3 3 1 3 2\n\nOutput\n0\n\n\"\"\"\n\n\n\ndef"
    },
    {
        "number": 489,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    arr = list(map(int, stdin.split()[1].split()))\n    arr.sort()\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            for k in range(j, len(arr)):\n                if arr[i] * arr[j] * arr[k] < (arr[i] * arr[j] * arr[k] + arr[i] * arr[k] * arr[j]):\n                    count += 1\n    return str(count)"
    },
    {
        "number": 489,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    return str(triples(n, a))\n\n\ndef"
    },
    {
        "number": 489,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''1 1 1 1\n   ... 2 3 4\n   ... ''')\n    '4'\n    >>> solution('''5 1 3 2 3 4\n   ... 1 3 3 1 3 2\n   ... ''')\n    '1'\n    >>> solution('''6 1 3 3 1 3 2\n   ... 1 1 1 1 1 1 1\n   ... ''')\n    '1'\n    \"\"\"\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    # print(a)\n    from itertools import permutations\n    s = permutations(a)\n    # print(list(s))\n    # print(len(list(s)))\n    a = []\n    for i in list(s):\n        a.append(i)\n    # print(a)\n    ans = 0\n    for i in range(0, len(a)):\n        i1 = a[i][0]\n        i2 = a[i][1]\n        i3 = a[i][2]\n        if i1 * i2 * i3 < 0:\n            ans += 1\n    return str(ans)\n"
    },
    {
        "number": 489,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return 0\n"
    },
    {
        "number": 489,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.sort()\n    j = a[0]\n    res = 0\n    for i in range(n):\n        if j!= a[i]:\n            k = i\n            break\n    else:\n        return '1'\n    for i in range(j, n):\n        if a[i] % j == 0 and a[i] % k == 0:\n            res += 1\n    return str(res)\n\nstdin = '4'\nprint(solution(stdin))"
    },
    {
        "number": 489,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n'''\n"
    },
    {
        "number": 489,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    a.sort()\n    def binary_search(a, left, right, key):\n        mid = (left + right) // 2\n        if a[mid] == key:\n            return 1\n        elif a[mid] > key:\n            return binary_search(a, left, mid, key)\n        else:\n            return binary_search(a, mid + 1, right, key)\n    result = 0\n    for i in range(len(a) - 2):\n        for j in range(i + 1, len(a) - 1):\n            result += binary_search(a, i, j, a[i] * a[j])\n    return result\nsolution(input())\n\"\"\"\n\n\n\"\"\"\n============================\nTriple Indices\n============================\n\nIn the second example a triple of numbers (1, 1, 2) is chosen, and there's only one way to choose indices.\n\"\"\"\n\na = list(map(int, input().split()))\na.sort()\nprint(a[0] * a[1] * a[2])\n\n\"\"\"\n============================================================================================================================\nExercise 102 - Two Sum II - Input array is sorted\n\nhttps://leetcode.com/problems/two-sum-ii-input-array-is-sorted/\n============================================================================================================================\n\"\"\"\n\n\"\"\"\nSolution\n----\n\nInput:\na = [-2, 7, 11, -4]\n\nOutput:\n\na = [-2, 7, 11, -4]\nThe two sum pairs are [-2, -4], [-2, 11].\n\n------\n\nInput:\na = [-2, 7, 11, -4]\n\nOutput:\n\na = [-2, 7, 11, -4]\nThe two sum pairs are [-2, -4], [-2, 11].\n\n------\n\nInput:\na = [-2, 7, 11, -4]\n\nOutput:\n\na = [-2, 7, 11, -4]\nThe two sum pairs are [-2, -4], [-2, 11].\n\n----\n\n------\n\nInput:\na = [-2, 7, 11, -4]\n\nOutput:\n\na = [-2, 7, 11, -4]\nThe two sum pairs are [-2, -4], [-2, 11].\n\n----\n\n------\n\nInput:\na = [-2, -4, -1, 7, -5]\n\nOutput:\n\na = [-2, -4, -1, 7, -5]\nThe two sum pairs are [-2, -1], [-2, -4]\n\n----\n\n------\n\nInput:\na = [-2, -4, -1, 7, -5]\n\nOutput:\n\na = [-2, -4, -1, 7, -5]\nThe two sum pairs are [-2, -1], [-2, -4]\n\n----\n\n------\n\nInput:\na = [-2, -4, -1, 7, -5]\n\nOutput:\n\na = [-2, -4, -1, 7, -5]\nThe two sum pairs are [-2, -1], [-2, -4]\n\n----\n\n------\n\nInput:\na = [-2, -4, -1, 7, -5]\n\nOutput:\n\na = [-2, -4, -1, 7, -5]\nThe two sum pairs are [-2, -1], [-2, -4]\n\n----\n\n------\n\nInput:\na = [-2, -4, -1, 7, -5]\n\nOutput:\n\na = [-2, -4, -1, 7, -5]\nThe two sum pairs are [-2, -1], [-2, -4]\n\n----\n\n------\n\nInput:\na = [-2, -4, -1, 7, -5]\n\nOutput:\n\na = [-2, -4, -1, 7, -5]\nThe two sum pairs are [-2, -1], [-2, -4]\n\n----\n\n------\n\nInput:\na = [-2, -4, -1, 7, -5]\n\nOutput:\n\na = [-2, -4, -1, 7, -5]\nThe two sum pairs are [-2, -1], [-2, -4]\n\n----\n\n------\n\nInput:\na = [-2, -4, -1, 7, -5]\n\nOutput:\n\na = [-2, -4, -1, 7, -5]\nThe two sum pairs are [-2, -1], [-2, -4]\n\n----\n\n------\n\nInput:\na = [-2, -4, -1, 7, -5]\n\nOutput:\n\na = [-2, -4, -1, 7, -5]\nThe two sum pairs are [-2, -1], [-2, -4]\n\n----\n\n------\n\nInput:\na = [-2, -4, -1, 7, -5]\n\nOutput:\n\na = [-2, -4, -1, 7, -5]\nThe two sum pairs are [-2, -1], [-2, -4]\n\n----\n\n------\n\nInput:\na = [-2, -4, -1, 7, -5]\n\nOutput:\n\na = [-2, -4, -1, 7, -5]\nThe two sum pairs are [-2, -1], [-2, -4]\n\n----\n\n------\n\nInput:\na = [-2, -4, -1, 7, -5]\n\nOutput:\n\na = [-2, -4, -1, 7, -5]\nThe two sum pairs are [-2, -1], [-2, -4]\n\n----\n\n------\n\nInput:\na = [-2, -4, -1, 7, -5]\n\nOutput:\n\na = [-2, -4, -1, 7, -5]\nThe two sum pairs are [-2, -1], [-2, -4]\n\n----\n\n------\n\nInput:\na = [-2, -4, -1, 7, -5]\n\nOutput:\n\na = [-2, -4, -1, 7, -5]\nThe two sum pairs are [-2, -1], [-2, -4]\n\n----\n\n------\n\nInput:\na = [-2, -4, -1, 7, -5]\n\nOutput:\n\na = [-2, -4, -1, 7, -5]\nThe two sum pairs are [-2, -1], [-2, -4]\n\n----\n\n------\n\nInput:\na = [-2, -4, -1, 7, -5]\n\nOutput:\n\na = [-2, -4, -1, 7, -5]\nThe two sum pairs are [-2, -1], [-2, -4]\n\n----\n\n------\n\nInput:\na = [-2, -4, -1, 7, -5]\n\nOutput:\n\na ="
    },
    {
        "number": 489,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = stdin.split()\n    a = [int(i) for i in a]\n    for i in range(len(a) - 2):\n        if a[i] + a[i + 1] + a[i + 2] < a[i + 3]:\n            print(i + 3)\n            return\n        if a[i] + a[i + 1] + a[i + 2] == a[i + 3]:\n            if i + 3 == len(a) - 1:\n                print(i + 3)\n                return"
    },
    {
        "number": 489,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = sorted(map(int, stdin.split()))\n    res = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if a[i] * a[j] * a[k] < (a[i] * a[i] * a[j]) + (a[j] * a[j] * a[k]) + (a[k] * a[k] * a[i]):\n                    res += 1\n    return str(res)\n"
    },
    {
        "number": 490,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    docstring\n    \"\"\"\n\n    n = int(stdin)\n    cut_count = 0\n    if n == 3:\n        cut_count += 1\n    elif n == 4:\n        cut_count += 2\n    elif n == 5:\n        cut_count += 5\n    return str(cut_count)\n"
    },
    {
        "number": 490,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    print(min(n//2, n // 2))\n    return str(n // 2)\n\ndef"
    },
    {
        "number": 490,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n'''\n\ndef"
    },
    {
        "number": 490,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 490,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    n = 1+n\n    return n"
    },
    {
        "number": 490,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(math.ceil(n / 2) + 1)\n\"\"\"\n\nimport math\n\nn = int(input())\n\nprint(math.ceil(n / 2) + 1)\n"
    },
    {
        "number": 490,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    return str(cut_pizza(n))\n\ndef"
    },
    {
        "number": 490,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(n // 2 + (n % 2 > 0))"
    },
    {
        "number": 490,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(min(round(0.5 * n + 1), round(n / 2 + 1), round(n / 5 + 1)))\n"
    },
    {
        "number": 490,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return 0\n    else:\n        return (n * (n - 1)) // 2\n"
    },
    {
        "number": 491,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    return max(int(stdin[0]), int(stdin[0][:len(stdin[0]) - 1]) - int(stdin[0][len(stdin[0]) - 1]))"
    },
    {
        "number": 491,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    state = int(stdin)\n    while state >= 0:\n        if state % 10 > 2:\n            state = state // 10 + state % 10 - 1\n        elif state % 10 == 2:\n            state = state // 10 - 1\n        else:\n            state = state // 10 - 1\n    return str(state)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 491,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 0:\n        return str(0)\n    temp = n\n    cur = 0\n    while temp > 0:\n        cur += temp % 10\n        temp //= 10\n    if cur < 0:\n        return str(0)\n    return str(cur)\n"
    },
    {
        "number": 491,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(max(abs(n) if n > 0 else abs(n) % 10, n // 10))\n"
    },
    {
        "number": 491,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    while n > 10:\n        n = int(str(n)[:-1]) + int(str(n)[-1])\n    return str(n)"
    },
    {
        "number": 491,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = list(map(int, stdin.split()))\n    max_bal = -1\n    for k in range(10**9):\n        bal = stdin[0]\n        for i in range(1, len(stdin)):\n            if bal == 0:\n                break\n            bal -= stdin[i]\n        if bal == 0:\n            return str(bal)\n        max_bal = max(bal, max_bal)\n    return str(max_bal)"
    },
    {
        "number": 491,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 491,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    max = 0\n    while num > 0:\n        if num % 10 > max:\n            max = num % 10\n        num = num // 10\n    return str(max)\n"
    },
    {
        "number": 491,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  return max(list(map(int, stdin.split())))"
    },
    {
        "number": 491,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    stdin = list(map(int, stdin.split()))\n    sum = 0\n    for i in range(1, len(stdin) + 1):\n        sum += stdin[-i]\n    return str(sum)\n"
    },
    {
        "number": 492,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = stdin.split(' ')\n    x, y = x[1:-1], y[1:-1]\n    x = x.split(',')\n    x = [int(i) for i in x]\n    y = y.split(',')\n    y = [int(i) for i in y]\n    lx, ly = len(x), len(y)\n    if lx > ly:\n        y = y + ['?'] * (lx - ly)\n    elif ly > lx:\n        x = x + ['?'] * (ly - lx)\n    assert lx == len(x)\n    assert ly == len(y)\n    if x == y:\n        return 'cw'\n    if x[-1] == y[-1]:\n        return 'ccw'\n    # check if x is leftmost\n    if x[-1] < y[-1]:\n        if x[-2] < y[-2]:\n            return 'cw'\n        elif x[-2] > y[-2]:\n            return 'ccw'\n    elif x[-1] > y[-1]:\n        if x[-2] > y[-2]:\n            return 'cw'\n        elif x[-2] < y[-2]:\n            return 'ccw'\n    else:\n        return 'undefined'\n"
    },
    {
        "number": 492,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split()\n\n    first_item = input_list[0]\n    second_item = input_list[1]\n\n    first_index = 0\n    second_index = 0\n    length = 0\n\n    for i in range(len(first_item)):\n        if first_item[i] == 'v':\n            first_index = i\n            break\n\n    for i in range(len(second_item)):\n        if second_item[i] == 'v':\n            second_index = i\n            break\n\n    if first_item[first_index] == '<':\n        length = second_index - first_index + 1\n    elif first_item[first_index] == '>':\n        length = second_index - first_index\n\n    if length == 1:\n        return 'cw'\n    elif length == 2:\n        return 'ccw'\n    else:\n        return 'undefined'\n"
    },
    {
        "number": 492,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, y = stdin.split()\n    n = int(x)\n    return direction[y]\n\ndirection = {'^':'<', '>':'>', '<':'v', 'v':'^'}\n\n\ndef"
    },
    {
        "number": 492,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    #stdin = '^ >'\n    start, end = stdin.split()\n    start = int(start)\n    end = int(end)\n    if start > end:\n        return 'undefined'\n    if start == end:\n        return 'cw' if start == 0 else 'ccw'\n    if start == end - 1:\n        return 'cw'\n    if start < end - 1:\n        return 'ccw'"
    },
    {
        "number": 492,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    def solve(i):\n        if i == t:\n            return \"cw\" if n & 1 else \"ccw\"\n        else:\n            return solve(i + 1)\n    return solve(0)\n\nprint(solution(input()))\n"
    },
    {
        "number": 492,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    v = ord('v')\n    < = ord('<')\n    ^ = ord('^')\n    > = ord('>')\n    cw = 1\n    ccw = -1\n    for i in stdin.split(' '):\n        if i == '<':\n            cw = -cw\n        elif i == '^':\n            ccw = -ccw\n        elif i == 'v':\n            cw = cw\n        else:\n            ccw = ccw\n    return 'cw' if cw!= 0 else 'ccw' if ccw!= 0 else 'undefined'"
    },
    {
        "number": 492,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(' ')\n    direction = stdin[0][1]\n    start, end = stdin[1], stdin[2]\n    result = ''\n    if direction == '^':\n        result = 'ccw'\n    elif direction == '>':\n        result = 'cw'\n    else:\n        result = 'ccw'\n    return result"
    },
    {
        "number": 492,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    p_end, p_start = stdin.split()\n    p_end = tuple(ord(i) - ord('^') for i in p_end)\n    p_start = tuple(ord(i) - ord('^') for i in p_start)\n    n = int(stdin.split()[1])\n    print('cw' if p_start <= p_end else 'ccw')\n    return 'cw' if p_start <= p_end else 'ccw'\n"
    },
    {
        "number": 492,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    [start_point, end_point] = stdin[:2]\n    [n] = stdin[2:]\n    start_point = ord(start_point) - ord('v')\n    end_point = ord(end_point) - ord('v')\n    n = int(n)\n    if (start_point + end_point) % 4 == 0:\n        return 'cw'\n    elif (start_point + end_point) % 4 == 2:\n        return 'ccw'\n    else:\n        return 'undefined'\n"
    },
    {
        "number": 492,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    (a, b) = stdin.split(' ')\n    a, b = int(a), int(b)\n    d = []\n    if a > b:\n        d.append('>')\n    elif a < b:\n        d.append('<')\n    else:\n        d.append('')\n    if a == b:\n        return 'cw'\n    d.append(d[-1] + a - b)\n    n = b - a\n    if n == 1:\n        return d[0] + 'cw'\n    if d[0] == '':\n        d.remove(d[0])\n    return ''.join(d)\n"
    },
    {
        "number": 493,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    n = int(lines[0])\n    moves = lines[1:]\n    \n    # Check if we can balance the dominos\n    # If we can't, the next line won't\n    # work so we'll return -1\n    if n % 2!= 0:\n        return -1\n    \n    # We don't want to use the first row, so we\n    # don't want to consider it\n    # It will be considered the last row by the\n    # algorithm below\n    n -= 1\n    \n    # Initialize our first list of strings\n    moves = moves[1:]\n    \n    # Initialize our track list\n    track = []\n    \n    # We need to go through each line\n    for line in moves:\n        # We'll use our track list to build\n        # the resulting string\n        result = \"\"\n        \n        # For each character in the line, see if\n        # it is a \"L\", an \"R\", or a \".\"\n        for char in line:\n            # If it is a \"L\", we'll add it to the\n            # track list\n            if char == \"L\":\n                result += \".\"\n                if len(track) > 0:\n                    # We'll move the leftmost piece to\n                    # the right of the track\n                    result += track.pop(0)\n            # If it is an \"R\", we'll add it to the\n            # track list\n            if char == \"R\":\n                result += \".\"\n                if len(track) > 0:\n                    # We'll move the rightmost piece to\n                    # the left of the track\n                    result += track.pop(-1)\n            # If it is a \".\", we'll keep the \".\"\n            # in the track list\n            if char == \".\":\n                result += char\n        \n        # After processing the line, we'll add\n        # the new pieces to the track list\n        track += result\n    \n    # For each char in track, we need to figure\n    # out if it is an L or an R. If it is, we\n    # need to adjust the count by 1. If it isn't,\n    # it means that all the other \".\"s in the line\n    # have been pushed left or right, so we need\n    # to adjust the count by 2.\n    #\n    # Finally, we can return track\n    return len(track)"
    },
    {
        "number": 493,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the number of dominoes that remain vertical after being pushed by stdin.\n    \n    >>> solution('14.L.R...LR..L..')\n    4\n    >>> solution('5.R....')\n    0\n    >>> solution('1..')\n    1\n    \"\"\"\n    return sum(1 for _ in stdin)\n"
    },
    {
        "number": 493,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    dominoes = stdin[:-1]\n    s = stdin[-1]\n    pushed = set()\n    for i in range(n):\n        if s == 'L':\n            pushed.add(i)\n        else:\n            pushed.discard(i)\n    return len(pushed)\n\nprint(solution(input()))\n\ndef"
    },
    {
        "number": 493,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    orig = stdin.strip()\n    show_orig = list(orig)\n    show = []\n    pushed = []\n    while show_orig:\n        show.append(show_orig.pop(0))\n        if show[-1] == \"L\":\n            show.append(\"R\")\n        else:\n            show.append(\"L\")\n    show_show = \"\".join(show)\n    for i, c in enumerate(show_show):\n        if c == \".\":\n            pushed.append(i)\n    return \"\".join(show_show).count(\".\")\n"
    },
    {
        "number": 493,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\nstdin = stdin.rstrip()\n\nn = int(stdin.split(' ')[0])\ns = stdin.split(' ')[1]\n\ncount = 0\nfor i in range(n):\n    if s[i] == 'L' and i < n - 1 and s[i + 1] == 'R':\n        count += 1\n    elif s[i] == 'R' and i < n - 1 and s[i + 1] == 'L':\n        count += 1\n    elif s[i] == '.' and i > 0 and s[i - 1] == 'L' and i < n - 1 and s[i + 1] == 'R':\n        count += 1\n    elif s[i] == '.' and i > 0 and s[i - 1] == 'R' and i < n - 1 and s[i + 1] == 'L':\n        count += 1\n\nreturn str(count)\n\n\nsolution('14.L.R...LR..L..')\n"
    },
    {
        "number": 493,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    n = int(stdin)\n    s = stdin\n    s = list(s)\n    pushed_right = False\n    pushed_left = False\n    while s.count('R') > 0 or s.count('L') > 0:\n        pushed_right = False\n        pushed_left = False\n        for i in range(len(s)):\n            if s[i] == 'R' and not pushed_right:\n                s[i] = '.'\n                pushed_right = True\n            if s[i] == 'L' and not pushed_left:\n                s[i] = '.'\n                pushed_left = True\n        pushed_right = False\n        pushed_left = False\n        for i in reversed(range(len(s))):\n            if s[i] == 'R' and not pushed_right:\n                s[i] = '.'\n                pushed_right = True\n            if s[i] == 'L' and not pushed_left:\n                s[i] = '.'\n                pushed_left = True\n    return str(len(s) - s.count('.'))\n\n\ndef"
    },
    {
        "number": 493,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # n = int(stdin)\n    n = len(stdin)\n    # str_in = stdin.rstrip()\n    str_in = stdin\n    l = list(str_in)\n    c = 0\n    while True:\n        if len(l) <= 1:\n            break\n        c += 1\n        if l[0] == l[-1]:\n            l.pop(0)\n            l.pop(-1)\n        else:\n            l[0] = l[0].replace('R', '.').replace('L', '.')\n            l[-1] = l[-1].replace('R', '.').replace('L', '.')\n            l[1] = l[1].replace('L', '.').replace('R', '.')\n            l[-2] = l[-2].replace('R', '.').replace('L', '.')\n\n    return str(c)"
    },
    {
        "number": 493,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    dominoes = list(stdin.split())\n    # if I had two dominoes at the beginning, the equation would be\n    # x = x + 1 + y - 1 - z\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 = -3\n    # 0 + 2 + 2 - 3 ="
    },
    {
        "number": 493,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    dominos = stdin.split(\".\")\n    for i in range(n):\n        if dominos[i] == \"L\":\n            dominos[i] = \".\"\n    for i in range(n):\n        if dominos[i] == \"R\":\n            dominos[i] = \".\"\n    for i in range(n):\n        if dominos[i] == \"L\":\n            if dominos[i + 1] == \"R\":\n                dominos[i] = \".\"\n        if dominos[i] == \"R\":\n            if dominos[i - 1] == \"L\":\n                dominos[i] = \".\"\n    for i in range(n):\n        if dominos[i] == \"L\":\n            if dominos[i - 1] == \"R\":\n                dominos[i] = \".\"\n        if dominos[i] == \"R\":\n            if dominos[i + 1] == \"L\":\n                dominos[i] = \".\"\n    return \"\".join(dominos)\n"
    },
    {
        "number": 493,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    stdin = stdin.strip()\n    if n == 1:\n        return stdin\n    dominoes = list(stdin)\n    length = len(dominoes)\n    # print(dominoes)\n    # print(length)\n    left_and_right = False\n    left = 0\n    right = length - 1\n    while left <= right:\n        # print(left, right)\n        if left == right:\n            left = 0\n            right = length - 1\n            continue\n        # print(\"left, right\", left, right)\n        if dominoes[left] == dominoes[right]:\n            # print(\"both\", dominoes[left], dominoes[right])\n            left_and_right = True\n            # print(\"left and right\", left_and_right)\n            left = left + 1\n            right = right - 1\n            continue\n        if dominoes[left] == \"L\":\n            # print(\"left\", dominoes[left])\n            left = left + 1\n            continue\n        if dominoes[left] == \"R\":\n            # print(\"right\", dominoes[right])\n            right = right - 1\n            continue\n    if not left_and_right:\n        # print(\"left, right not same\", left_and_right)\n        return str(left + 1)\n    # print(left, right)\n    # print(dominoes)\n    # print(length)\n    # print(left, right)\n    # print(left_and_right)\n    return str(left + right + 1)\n\n\nsolution(input())\n"
    },
    {
        "number": 494,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    #print(n, m)\n\n    ans = []\n    l = list(range(1, n + 1))\n    #print(l)\n\n    while len(ans) < n:\n        #print(l)\n        #print(ans)\n        ans.append(l.pop(0))\n        #print(ans)\n        for i in range(len(ans) - 1, -1, -1):\n            #print(i)\n            ans[i] = ans[i] + l.pop(0)\n            #print(ans)\n        #print(ans)\n        l.append(l.pop(0))\n        #print(l)\n\n    return str(l[0]) if len(l) == 1 else -1\n\nprint(solution(input()))"
    },
    {
        "number": 494,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    l = list(map(int, stdin.split()))\n    perm = [-1] * n\n    a_n = 0\n    for i in range(m):\n        a_n += l[i]\n        perm[l[i] - 1] = a_n\n    return \" \".join(map(str, perm))\n\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 494,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def circle(c):\n        for i in c:\n            if i - 1 < 0 or i - 1 > len(c) - 1:\n                return False\n            if c[i - 1] == c[i]:\n                return False\n        return True\n    c = list(map(int, stdin.split(' ')))\n    if len(c) == 1:\n        if c[0] == 0:\n            return '-1'\n        else:\n            return '0'\n    if len(c) == 2:\n        if c[0] == 0 or c[1] == 0:\n            return '-1'\n        else:\n            return '0'\n    if len(c) == 3:\n        if c[0] == 0 or c[1] == 0 or c[2] == 0:\n            return '-1'\n        else:\n            return '0'\n    if len(c) == 4:\n        if c[0] == 0 or c[1] == 0 or c[2] == 0 or c[3] == 0:\n            return '-1'\n        else:\n            return '0'\n    # n = len(c)\n    # if n % 2!= 0:\n    #     return '-1'\n    # for i in range(n // 2):\n    #     if i!= n // 2 - 1:\n    #         if c[i] + 1 == c[i + 1] or c[i + 1] + 1 == c[i]:\n    #             return '-1'\n    #     if i!= n // 2:\n    #         if c[i] + 1 == c[i - 1] or c[i] + 1 == c[i - 2]:\n    #             return '-1'\n    # return '0'\n\n    for i in range(len(c)):\n        if i!= 0 and i!= len(c) - 1:\n            if c[i - 1] == c[i]:\n                return '-1'\n    if len(c) % 2!= 0:\n        return '-1'\n    if circle(c):\n        return '0'\n    return '-1'\n"
    },
    {
        "number": 494,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    num, seq = map(int, stdin.split())\n    seq = list(map(int, stdin.split()))\n    if len(seq) < num:\n        return -1\n    a = sorted(seq)\n    if len(a) < num:\n        return -1\n    \n    res = list(range(1,num+1))\n    \n    for i in seq:\n        res.remove(i)\n        res.append(i)\n    \n    return''.join(map(str,res))"
    },
    {
        "number": 494,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    \n    last_leader = 0\n    current_leader = 1\n    for i in range(m):\n        if current_leader == last_leader:\n            return -1\n        current_leader = current_leader + a[current_leader]\n        last_leader = current_leader\n    return''.join(map(str, a[last_leader:last_leader+1]))\n\n\ndef"
    },
    {
        "number": 494,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    l = list(map(int, stdin.split()))\n    \n    def update(l, x, i):\n        while i < n:\n            if l[i] == x:\n                l[i] = i + 1\n                return\n            i += 1\n    \n    for i in range(m):\n        update(l, l[i], i)\n        \n    for i in range(n):\n        if l[i] > i + 1:\n            return '-1'\n    return''.join(list(map(str, l)))\n\n\nprint(solution(input()))\n\ndef"
    },
    {
        "number": 494,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    d = {}\n    for i in range(n):\n        d[i] = 0\n    for i in range(n):\n        d[a[i]] = i\n    l = [0]\n    for i in range(m):\n        l.append(i+1)\n        for i in range(1, n+1):\n            d[i] += 1\n            if d[i] > n:\n                d[i] -= 1\n        d[l[i]] = l[i+1]\n        if d[l[i]] == l[i]:\n            return \" \".join(map(str, l))\n    return \" \".join(map(str, l))\n"
    },
    {
        "number": 494,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = (int(x) for x in stdin.split())\n    l = [int(x) for x in stdin.split()]\n    l = l[:m]\n    \n    answer = \"-\"\n    while l!= [-1]*n:\n        answer = list(map(str, l))\n        l = []\n        for i in range(1, n):\n            l.append(i)\n        for i in range(n, 0, -1):\n            if i in l:\n                continue\n            l.append(i)\n            break\n    return \" \".join(answer)"
    },
    {
        "number": 494,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  n, m = map(int, stdin.split())\n  if n == 1:\n    return str(0)\n  result = []\n  leader = 0\n  for i in range(1, n):\n    if i > leader:\n      result.append(i)\n      leader = result[i - 1]\n    else:\n      leader += 1\n  if n - leader <= m:\n    return str(leader)\n  else:\n    return '-1'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 494,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    leaders = list(map(int, stdin.split()))\n\n    for leader in range(len(leaders)):\n        if leader == 0:\n            leaders = [1] + leaders\n        if leader == len(leaders)-1:\n            leaders = leaders + [1]\n        if leaders[leader] > leaders[leader+1]:\n            leaders = leaders[::-1]\n\n    if len(leaders)!= len(set(leaders)):\n        return -1\n    return''.join(map(str, leaders))\n"
    },
    {
        "number": 495,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, k = map(int, stdin.split())\n    s = '{0:08b}'.format(a)\n    print(s)\n    max_count = 0\n    count = 0\n    for i in range(1, len(s)):\n        if count >= k:\n            break\n        if s[i-1] < s[i]:\n            count += 1\n            if count > k:\n                max_count = max(max_count, int(s[i-1:i+1], 2))\n    if count < k:\n        max_count = max(max_count, int(s[1:], 2))\n    print(max_count)\n    return max_count\n"
    },
    {
        "number": 495,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, k = [int(x) for x in stdin.split()]\n    return str(max(int(''.join(sorted(str(a)))), max(int(''.join(sorted(str(a * 2)))))))\n\n\ndef"
    },
    {
        "number": 495,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, k = map(int, stdin.split())\n    return str(max(int(\"\".join(str(i) for i in range(a)))*a, a*k))\n"
    },
    {
        "number": 495,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, k = map(int, stdin.split())\n    maxi = 0\n    while k > 0:\n        if a > 9 and a < 1000000:\n            a *= 10\n        a += 1\n        k -= 1\n        maxi = max(maxi, a)\n    return str(maxi)\nstdin = input()\nprint(solution(stdin))\n\ndef"
    },
    {
        "number": 495,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, k = stdin.split()\n    a = int(a)\n    k = int(k)\n    n = 0\n    while True:\n        n += 1\n        if n > 10**18:\n            raise ValueError('no solution')\n        s = str(n)\n        a1 = a % 10\n        a2 = a // 10\n        b = a2 + a1 - 2\n        if b == 0:\n            return s\n        a = b\n        n = n * 10 + s[-2]\n\nsolution('299')\n"
    },
    {
        "number": 495,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, k = list(map(int, stdin.split(\" \")))\n    num = str(a)\n    count = 0\n    max_num = num\n    while count < k:\n        if num[0] < num[-1]:\n            max_num = num\n        num = str(int(num) + 1)\n        count += 1\n    return max_num\n"
    },
    {
        "number": 495,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, k = map(int, stdin.split())\n    l, r = a, a\n    while True:\n        l, r = l - 1, r - 1\n        if l > 0:\n            if r < 10:\n                r = r * 10 + l\n            else:\n                r = r - l\n            if r == 0:\n                break\n        else:\n            if l == 0:\n                l = 10\n                break\n            else:\n                l = l // 10\n    return str(l + r)\n"
    },
    {
        "number": 495,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n,k=stdin.split()\n    n=int(n)\n    k=int(k)\n    \n    cnt=0\n    while cnt<=k:\n        for i in range(10):\n            if i==0:\n                continue\n            for j in range(i,10):\n                if str(i)==str(j):\n                    continue\n                tmp=str(i)+str(j)\n                if tmp>n:\n                    continue\n                elif tmp<n:\n                    n=tmp\n        cnt+=1\n    return str(n)"
    },
    {
        "number": 495,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, k = map(int, stdin.split())\n    # a, k = 1000, 2\n    # a, k = 1000000, 2\n    # a, k = 99999999, 2\n    # a, k = 999999999, 2\n    a = a\n    k = k\n    # print(a)\n    # print(k)\n\n    # n = int(a**(1 / 2))\n    # for i in range(1, n):\n    #     # print(\"i\", i)\n    #     if a % i == 0:\n    #         print(\"prime\", i)\n    #         if a / i!= a:\n    #             print(\"composite\", a / i)\n    #             a = a / i\n    #             k += 1\n    #             print(\"k\", k)\n    #         else:\n    #             print(\"multiple\")\n    #             k += 1\n    #             print(\"k\", k)\n    #             break\n\n    #     else:\n    #         print(\"not prime\")\n    #         k += 1\n    #         print(\"k\", k)\n\n    # print(a, k)\n\n    # for i in range(2, a + 1):\n    #     if a % i == 0:\n    #         k += 1\n    #         print(\"k\", k)\n    #         a = a / i\n    #         print(\"a\", a)\n    #     else:\n    #         k += 1\n    #         print(\"k\", k)\n    #         break\n    # print(a, k)\n\n    n = int(a**(1 / 2))\n    for i in range(1, n):\n        # print(\"i\", i)\n        if a % i == 0:\n            print(\"prime\", i)\n            if a / i!= a:\n                print(\"composite\", a / i)\n                a = a / i\n                k += 1\n                print(\"k\", k)\n            else:\n                print(\"multiple\")\n                k += 1\n                print(\"k\", k)\n                break\n\n    # else:\n    #     print(\"not prime\")\n    #     k += 1\n    #     print(\"k\", k)\n\n    # print(a, k)\n\n    # for i in range(2, a + 1):\n    #     if a % i == 0:\n    #         k += 1\n    #         print(\"k\", k)\n    #         a = a / i\n    #         print(\"a\", a)\n    #     else:\n    #         k += 1\n    #         print(\"k\", k)\n    #         break\n    # print(a, k)\n\n    if k > k:\n        k = k\n\n    # print(a, k)\n\n    return str(a) + \" \" + str(k)"
    },
    {
        "number": 495,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, k = map(int, stdin.split())\n    b = list(str(a))\n    d = []\n    for i in range(len(b) - 1):\n        d.append(b[i] + b[i+1])\n    #print(d)\n    if k == 0:\n        return int(''.join(d))\n    else:\n        d.pop(0)\n        #print(d)\n        if len(d) == 1:\n            return int(''.join(d))\n        while True:\n            if len(d) == 1:\n                break\n            else:\n                if len(d) < k:\n                    k = k - len(d)\n                d = d + d[:k]\n            #print(d)\n        return int(''.join(d))\n\nsolution(input())"
    },
    {
        "number": 496,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z, n = stdin.split()\n    n = int(n)\n    if int(x)!= int(y):\n        return str(42)\n    else:\n        if n < 1:\n            return str(42)\n        else:\n            for i in range(n - 1):\n                if int(z) == int(x):\n                    x += int(y)\n                else:\n                    return str(42)\n            return str(x)\n"
    },
    {
        "number": 496,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 496,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, n, m = map(int, stdin.split())\n    if b * (n - 1) + a * n < m:\n        return \"42\"\n    else:\n        if m % (n - 1) == 0:\n            return str(b * (n - 1) + a * n)\n        else:\n            return str(b * (n - 1) + a * n) + str((m % (n - 1)) * (n - 1))\n\n\nprint(solution(input()))\n\nfrom math import ceil\nimport sys\na, b, n, m = map(int, sys.stdin.readline().split())"
    },
    {
        "number": 496,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your code should return the required number.\n    \"\"\"\n    # a_1 = int(stdin.split()[0])\n    # a_n = int(stdin.split()[1])\n    # d = int(stdin.split()[2])\n    #\n    # if a_n == 0:\n    #     return -1\n    #\n    # if d == 0:\n    #     return 42\n    #\n    # if a_1 % d == 0:\n    #     return a_1 + d\n    #\n    # count = 1\n    # ans = a_1\n    #\n    # while count <= a_n:\n    #     ans += d\n    #     count += 1\n    #\n    # if ans % 1!= 0:\n    #     return 42\n    #\n    # return str(ans)\n    # return -1\n    a_1, a_n, d = map(int, stdin.split())\n    \n    if a_n == 0:\n        return -1\n    \n    if d == 0:\n        return 42\n    \n    if a_1 % d == 0:\n        return a_1 + d\n    \n    count = 1\n    ans = a_1\n    \n    while count <= a_n:\n        ans += d\n        count += 1\n    \n    if ans % 1!= 0:\n        return 42\n    \n    return str(ans)\n    \nsolution(\"836 624 412 200\")\n"
    },
    {
        "number": 496,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return 42\n    try:\n        i = n - 1\n        while n!= 1:\n            n = (n * 10 + n) / (i + 1)\n            i -= 1\n        return str(round(n))\n    except ZeroDivisionError:\n        return 42\n"
    },
    {
        "number": 496,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    sequence = stdin.split(' ')\n    if all(el.isdigit() for el in sequence):\n        sequence = list(map(int, sequence))\n        if sequence[0]!= 0:\n            return 42\n        sequence = sequence[1:]\n        if len(sequence) > 1:\n            for i in range(1, len(sequence)):\n                if sequence[i] == sequence[i - 1] + sequence[i - 2]:\n                    print(sequence[i - 1])\n                else:\n                    print(42)\n                    return 42\n                if sequence[i] > 0:\n                    return 42\n            return 42\n        else:\n            print(42)\n            return 42\n    else:\n        print(42)\n        return 42\n"
    },
    {
        "number": 496,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    _, p1, p2, p3, p4 = stdin.split()\n    p1, p2, p3, p4 = int(p1), int(p2), int(p3), int(p4)\n    if p4 == 0:\n        return 42\n    if int(p3) % 2!= 0 or int(p4) % 2!= 0:\n        return 42\n    if p3 > p2:\n        return 42\n    if p4 > p1:\n        return 42\n    if p2 > p3:\n        return 42\n    return str(p1 + (p2 - p1) // (p3 - p2))\n"
    },
    {
        "number": 496,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    sequence = stdin[1].split()\n\n    for i in range(1, n + 1):\n        if sequence[i - 1] == '1':\n            for j in range(i + 1, n + 1):\n                if sequence[j - 1] == '2':\n                    for k in range(j + 1, n + 1):\n                        if sequence[k - 1] == '3':\n                            print(sequence[k - 1])\n                            return sequence[k - 1]\n\n        elif sequence[i - 1] == '2':\n            for j in range(i + 1, n + 1):\n                if sequence[j - 1] == '3':\n                    for k in range(j + 1, n + 1):\n                        if sequence[k - 1] == '1':\n                            print(sequence[k - 1])\n                            return sequence[k - 1]\n\n        elif sequence[i - 1] == '3':\n            for j in range(i + 1, n + 1):\n                if sequence[j - 1] == '1':\n                    for k in range(j + 1, n + 1):\n                        if sequence[k - 1] == '2':\n                            print(sequence[k - 1])\n                            return sequence[k - 1]\n        else:\n            print(42)\n\n    return '42'"
    },
    {
        "number": 496,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, d, n = map(int, stdin.split())\n    \n    if a!= 0:\n        return 42\n    \n    if a == 0 and d!= 0:\n        return 42\n    \n    if a == 0 and d == 0:\n        return 42\n    \n    if b / d < n:\n        return 42\n    \n    for i in range(n):\n        if b / d == i:\n            return i\n"
    },
    {
        "number": 496,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"836 624 412 200\")\n    -12\n    >>> solution(\"1 334 667 1000\")\n    1333\n    >>> solution(\"-12 -12 -12 -12 -12 -12 -12 -12 -12 -12 -12\")\n    42\n    >>> solution(\"1 -12\")\n    42\n    >>> solution(\"-12\")\n    42\n    \"\"\"\n    return int(stdin)"
    },
    {
        "number": 497,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    c = list(map(int, stdin.strip().split()))\n    c.sort()\n    d = []\n    for i in range(1, n):\n        d.append(c[i] - c[i-1])\n    max_ = max(d)\n    return str(max_)\n"
    },
    {
        "number": 497,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\nstdin = '''3\n1 2 3 2 3\n'''\nprint(solution(stdin))\n\n\"\"\"\n"
    },
    {
        "number": 497,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n\n    colors = list(map(int, stdin[1]))\n    #print(n, colors)\n\n    max_distance = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            distance = abs(j-i)\n            if distance > max_distance:\n                max_distance = distance\n\n    return str(max_distance)"
    },
    {
        "number": 497,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    house_colors = stdin.split()\n    house_colors.sort()\n    ans = 0\n    houses = set()\n    for color in house_colors:\n        houses.add(int(color))\n    if len(houses) < 2:\n        return 1\n    for i in range(len(houses)):\n        for j in range(i + 1, len(houses)):\n            ans = max(ans, houses[j] - houses[i])\n    return ans\n"
    },
    {
        "number": 497,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    house_colors = stdin.split()\n    house_colors = [int(c) for c in house_colors]\n    house_colors.sort()\n    house_colors.reverse()\n    house_colors.pop()\n\n    house_colors = set(house_colors)\n    house_colors = sorted(house_colors)\n    house_colors = set(house_colors)\n    house_colors = sorted(house_colors)\n\n    distance = 1\n    for i in range(len(house_colors)-1):\n        if house_colors[i]!= house_colors[i+1]:\n            distance += 1\n\n    return distance\n\n\ndef"
    },
    {
        "number": 497,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    colors = [int(x) for x in stdin.split(\"\\n\")[1].split(\" \")]\n\n    opt = 0\n    for i in range(1, n):\n        opt = max(opt, colors[i-1] * (n-i) + colors[i])\n    return str(opt)\n"
    },
    {
        "number": 497,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\n'''\ndef"
    },
    {
        "number": 497,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    houses = stdin.split()\n    house_numbers = sorted([int(x) for x in houses])\n    return max([abs(house_numbers[i]-house_numbers[i+1]) for i in range(len(house_numbers)-1)])\n"
    },
    {
        "number": 497,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    data = list(map(int, stdin.split()))\n    colors = list(set(data))\n    colors.sort()\n    colors.append(colors[-1]+1)\n\n    def dfs(index, path, distance):\n        if index >= n:\n            return distance\n        for i in range(1, n):\n            if i == index or data[index]!= data[i]:\n                continue\n            if index in path and data[index]!= data[i]:\n                continue\n            path.append(index)\n            res = dfs(index+1, path, distance+1)\n            if res > distance:\n                res = distance\n            path.pop()\n            return res\n\n    return str(dfs(0, [], 0))"
    },
    {
        "number": 497,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, *colors = list(map(int, stdin.split()))\n\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        for j in range(i + 1, n):\n            dp[i][j] = dp[j][i] = sum(colors[i:j + 1])\n\n    return str(max(max(row) for row in dp))\n"
    },
    {
        "number": 498,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 4 3 9\n   ... ''')\n    '2 2 L'\n    >>> solution('''\n   ... 4 3 24\n   ... ''')\n    '4 3 R'\n    >>> solution('''\n   ... 2 4 4\n   ... ''')\n    '1 2 R'\n    \"\"\"\n    n, m, k = list(map(int, stdin.split()))\n    result = ''\n    if k == n*m:\n        result = '{} {} R'.format(n, m)\n    else:\n        result = '{} {} L'.format(n, m)\n    return result\n"
    },
    {
        "number": 498,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, m, k = map(int, stdin.split())\n    lanes = [[] for i in range(n)]\n    for i in range(m):\n        lanes[i%n].append(i+1)\n\n    for i in range(1, m+1):\n        lanes[0].append(i)\n    if k == 1:\n        return str(lanes[1].index(2) + 1) + \" \" + str(lanes[1].index(3) + 1) + \" R\"\n    else:\n        if m == 4:\n            lanes[2].append(2)\n        else:\n            lanes[2].append(2)\n            for i in range(3, m+1):\n                lanes[i].append(2)\n        if n > 1:\n            if lanes[0].index(1)!= 0:\n                lanes[0].append(1)\n        if n > 2:\n            if lanes[1].index(3)!= 0:\n                lanes[1].append(3)\n        if n > 3:\n            if lanes[2].index(2)!= 0:\n                lanes[2].append(2)\n        if n > 4:\n            if lanes[3].index(4)!= 0:\n                lanes[3].append(4)\n        return str(lanes[k%m].index(2) + 1) + \" \" + str(lanes[k%m].index(3) + 1) + \" R\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 498,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    if k == 2*m:\n        r = 2*m - 2\n        d = 1\n    else:\n        r = 2*m - 1\n        d = 1\n    if k == m:\n        s = 'R'\n    else:\n        s = 'L'\n    return f'{r} {d} {s}'\n\n\nprint(solution(input()))\n\n\n\n\n---"
    },
    {
        "number": 498,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    s = \"L\"\n    if k < n * m / 2:\n        s = \"R\"\n    return f\"{n % 2 + 1} {(n // 2 + 1) * 2 + 1} {s}\""
    },
    {
        "number": 498,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = (int(_) for _ in stdin.split())\n    left, right = False, False\n    if n % 2 == 0:\n        left = True\n    if k % 2 == 0:\n        right = True\n    if n % 2!= 0:\n        left = True\n    if k % 2!= 0:\n        right = True\n    if left:\n        if right:\n            return str(1) + \" \" + str(2) + \" \" + \"R\"\n        else:\n            return str(1) + \" \" + str(2) + \" \" + \"L\"\n    else:\n        if right:\n            return str(1) + \" \" + str(2) + \" \" + \"R\"\n        else:\n            return str(1) + \" \" + str(2) + \" \" + \"L\"\n"
    },
    {
        "number": 498,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = list(map(int, stdin.split()))\n    if n < 1 or m < 1 or k < 1 or k > 2 * m:\n        return 'Invalid'\n    elif k == 2 * m:\n        return '0 1 R'\n    else:\n        min_n = min(n, k)\n        lst = []\n        for i in range(min_n):\n            lst.append([i + 1, 2 * m - i, 'R'])\n        if min_n == n:\n            lst.append([k, 2 * m, 'R'])\n            return str(len(lst)) +'' + ''.join(map(str, lst))\n        else:\n            lst.append([k, 2 * m, 'R'])\n            return str(len(lst)) +'' + ''.join(map(str, lst))\n"
    },
    {
        "number": 498,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    lanes = range(1, n + 1)\n    desks = range(1, m + 1)\n    for lane in lanes:\n        if (lane - 1) % k == 0:\n            d = (lane - 1) // k\n            if d == 1:\n                left = \"L\"\n            else:\n                left = \"R\"\n            break\n    for desk in desks:\n        if desk % k == 0:\n            r = desk // k\n            if r == 1:\n                right = \"R\"\n            else:\n                right = \"L\"\n            break\n    if left == right:\n        return f\"{r} {d} {left}\"\n    else:\n        return f\"{r} {d} {right}\"\n"
    },
    {
        "number": 498,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    return f\"{n} {m} {'L' if k%2 == 0 else 'R'}\""
    },
    {
        "number": 498,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    if k % n == 0 or k % m == 0:\n        return \"2 {} {} R\".format(n, m)\n    else:\n        return \"2 {} {} L\".format(n, m)"
    },
    {
        "number": 498,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    l, r = divmod(k, m + 1)\n    return \"{} {} {}\".format(l, r + 1, \"R\" if l > r else \"L\")\n"
    },
    {
        "number": 499,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n = int(stdin)\n    colors = list(stdin)\n    while len(colors) > 2:\n        if colors[0]!= colors[1]:\n            tmp = colors[0]\n            colors[0] = colors[1]\n            colors[1] = tmp\n        for i in range(len(colors)):\n            if i!= 0:\n                if colors[i]!= colors[i - 1]:\n                    tmp = colors[i]\n                    colors[i] = colors[i - 1]\n                    colors[i - 1] = tmp\n        colors = colors[2:]\n    return ''.join(colors)\nsolution(input())\n"
    },
    {
        "number": 499,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    n = int(stdin[0])\n    cards = stdin[1].upper()\n    colors = [\"R\", \"G\", \"B\"]\n    for color in colors:\n        if color in cards:\n            cards = cards.replace(color, \"\")\n    card_no = len(cards)\n    return colors[card_no % 3]\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 499,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    colors = stdin.strip().split('\\n')\n    colors = list(filter(None, colors))\n    colors = sorted(colors)\n    sorted_colors = list(map(lambda x: x[0] if x[0]!= colors[0] else x[1], enumerate(colors)))\n    print(*sorted_colors, sep='\\n')\n\nsolution('2\\nRB')\nsolution('3\\nGRG')\nsolution('5\\nBBBBB')"
    },
    {
        "number": 499,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    colors = stdin\n    while len(colors) > 1:\n        if len(colors) % 2 == 0:\n            for i in range(0, len(colors), 2):\n                colors = colors.replace(colors[i], colors[i+1])\n        else:\n            for i in range(1, len(colors), 2):\n                colors = colors.replace(colors[i], colors[i+1])\n    return colors\nprint(solution(input()))\n"
    },
    {
        "number": 499,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n = int(stdin[0])\n    colors = stdin[1]\n    colors = colors.upper()\n    \n    if len(colors) == n:\n        if len(colors) == 1:\n            return colors[0]\n        elif len(colors) == 2:\n            return 'B' if colors == 'BR' else 'R'\n        else:\n            return 'B' * (n // 2) + 'G' * (n // 2) + 'R' * (n // 2)\n\n    else:\n        if len(colors) % 2 == 1:\n            return 'B' * (n // 2) + 'R' * (n // 2) + 'G' * (n // 2)\n        else:\n            return 'B' * (n // 2) + 'R' * (n // 2)\n\nprint(solution(input()))"
    },
    {
        "number": 499,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    for i in stdin:\n        if i == 'B':\n            stdin[0] = stdin[0].replace('B', 'R')\n        elif i == 'R':\n            stdin[0] = stdin[0].replace('R', 'B')\n        elif i == 'G':\n            stdin[0] = stdin[0].replace('G', 'R')\n    return stdin[0]"
    },
    {
        "number": 499,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split()\n    colors = input[1]\n\n    color_dictionary = {'R': 0, 'B': 0, 'G': 0}\n    color_dict_2 = {}\n\n    for color in colors:\n        color_dictionary[color] += 1\n        if color in color_dict_2:\n            color_dict_2[color] += 1\n        else:\n            color_dict_2[color] = 1\n\n    color_dict_3 = sorted(color_dict_2.items(), key=lambda x: x[1], reverse=True)\n    if len(color_dict_3) == 1:\n        if color_dict_3[0][0] == 'R' or color_dict_3[0][0] == 'B':\n            return color_dict_3[0][0]\n    else:\n        if color_dict_3[0][0] == 'R' and color_dict_3[1][0] == 'B':\n            return color_dict_3[1][0]\n\n        if color_dict_3[0][0] == 'R' and color_dict_3[2][0] == 'B':\n            return color_dict_3[2][0]\n\n        if color_dict_3[0][0] == 'B' and color_dict_3[1][0] == 'R':\n            return color_dict_3[1][0]\n\n\nprint(solution(input))\n\n\"\"\""
    },
    {
        "number": 499,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    size = int(stdin)\n    color = stdin.replace('B', 'G')\n    color = stdin.replace('B', 'R')\n    color = color.replace('G', 'B')\n    color = color.replace('R', 'G')\n    return color\n\ndef"
    },
    {
        "number": 499,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    red = s.count('R')\n    green = s.count('G')\n    blue = s.count('B')\n    if red >= 2 and blue >= 1:\n        return 'B'\n    if red >= 2 and green >= 1:\n        return 'R'\n    if red >= 1 and green >= 2:\n        return 'G'\n    if red >= 1 and blue >= 2:\n        return 'B'\n    return ''\n"
    },
    {
        "number": 499,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nprint(solution(input()))"
    }
]