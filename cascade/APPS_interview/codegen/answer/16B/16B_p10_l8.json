[
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    s = stdin\n    a = s.find('[')\n    b = s.find(']')\n    l = []\n    if a == -1 or b == -1:\n        return '-1'\n    l.append(a)\n    l.append(b)\n    l.sort()\n    if l[1] - l[0] == 1 and s[l[0]+1] == '|' and s[l[1]-1] == '|':\n        return l[1]-l[0] + 1\n    else:\n        return '-1'\n\n\n\nprint(solution(\"[a:b:]\"))\nprint(solution(\"]:[|:\"))\nprint(solution(\"]:[|:\"))\nprint(solution(\"][a|]\"))\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # \u65b9\u6cd5\u4e00\n    # \u53cc\u6307\u9488\n    # \u7528\u4e8e\u8bb0\u5f55\u5f53\u524d\u6700\u5927\u503c\n    # \u7528\u6765\u786e\u5b9a\u662f\u5426\u66f4\u65b0\u6700\u5927\u503c\n    # \u7528\u4e8e\u8bb0\u5f55\u5f53\u524d\u7684\u6700\u5927\u8ddd\u79bb\n    # \u7528\u6765\u786e\u5b9a\u662f\u5426\u66f4\u65b0\u6700\u5927\u8ddd\u79bb\n    # \u4e0d\u66f4\u65b0\u6700\u5927\u8ddd\u79bb\uff0c\u6216\u8005\u66f4\u65b0\uff0c\u66f4\u65b0\u7684\u8bdd\uff0c\u9700\u8981\u91cd\u65b0\u8ba1\u7b97\u6700\u5927\u8ddd\u79bb\n    maxLen, maxDist = 0, 0\n    tempLen, tempDist = 0, 0\n    # \u53f3\u6307\u9488\n    right = 0\n    # \u5de6\u6307\u9488\n    left = 0\n    # \u904d\u5386\u5b57\u7b26\u4e32\n    for i in stdin:\n        if i == ']':\n            right += 1\n        elif i == '[':\n            left += 1\n        elif i == '|':\n            tempLen = right + left\n            tempDist = right - left\n            if tempLen > maxLen or (tempLen == maxLen and tempDist > maxDist):\n                maxLen = tempLen\n                maxDist = tempDist\n    if maxLen == 0:\n        return -1\n    return maxLen\n\n\nprint(solution(\"][][[|][]\"))\nprint(solution(\"]:[|:\"))\nprint(solution(\"]]:[|:\"))\nprint(solution(\"|]\"))\nprint(solution(\"]:[|:\"))\nprint(solution(\"[:\"))\nprint(solution(\"][|||][|||][]\"))"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    accordion = stdin.split('|')\n    if len(accordion)!= 3:\n        return -1\n    else:\n        return len(accordion[0]) + len(accordion[1]) - 2 * len(accordion[2])"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stack = ['']\n    for c in stdin:\n        if c == '|':\n            if stack[-1][-1]!= '|':\n                stack.append(c)\n            else:\n                stack.pop()\n        elif c == ':':\n            stack[-1] += c\n        else:\n            stack[-1] += c\n    return len(max(stack, key=len)) if len(stack) == 1 else -1\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Time: O(1)\n    Space: O(1)\n    '''\n    acc = stdin.replace('[', '').replace(']', '').replace(':', '').replace('|', '')\n    return str(len(acc) if len(acc) < 500 else -1)\n    pass"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    print(solution(stdin))\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    last = stdin.split(\"|\")[-1]\n    return max(len(stdin.split(\"|\")[0]), len(last))\n"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\nprint(solution(input()))"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\n\ndef"
    },
    {
        "number": 0,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return '-1'\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    arr = list(range(1, x))\n    arr = sorted(arr, key=lambda n: (len(str(n)), str(n)), reverse=True)\n    print(arr[0])\n    return\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    \n    i = 0\n    while (x > 0):\n        x //= 10\n        i += 1\n\n    x = i + 1\n    while True:\n        if (solution2(x) == x):\n            print(x)\n            break\n        x += 1\n\n\ndef"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    arr = [i for i in range(x) if i <= 10 ** 18]\n    arr = sorted(arr, reverse=True)\n    sum = 0\n    for i in arr:\n        sum = 0\n        for j in str(i):\n            sum += int(j)\n        if sum < 10:\n            return i\n\nprint(solution(input()))\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    s = 0\n    ans = 0\n    for i in range(1, x + 1):\n        s += i % 10\n        if ans < s:\n            ans = s\n            ans = i\n    print(ans)\n    return \"\"\n    "
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    max_sum = -1\n    result = 0\n    while x > 0:\n        temp = x % 10\n        x = x // 10\n        result += temp\n        if result > max_sum:\n            max_sum = result\n            result = 0\n            \n    result = 0\n    x = max_sum\n    while x > 0:\n        temp = x % 10\n        x = x // 10\n        result += temp\n        \n    print(max_sum)\n        \n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return stdin\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return string solution\"\"\"\n    x = int(stdin)\n    \n    def get_max(x: int) -> int:\n        x_str = str(x)\n        result = 0\n        for i in x_str:\n            result += int(i)\n        return result\n    \n    result = [x for x in range(x, 0, -1) if get_max(x) < get_max(x - 1)]\n    print(result[0])\n    return result[0]\n    \n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    ans = 0\n    for i in range(1, x+1):\n        sum = 0\n        for j in str(i):\n            sum += int(j)\n        if ans < sum:\n            ans = sum\n    return ans\n\ndef"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    \n    # max_sum = 0\n    # max_num = 0\n    # for num in range(1, x + 1):\n    #     sum = 0\n    #     for dig in str(num):\n    #         sum += int(dig)\n    #     if sum > max_sum:\n    #         max_sum = sum\n    #         max_num = num\n    # return max_num\n\n    # max_num = 0\n    # for num in range(1, x + 1):\n    #     sum = 0\n    #     digits = [int(d) for d in str(num)]\n    #     for d in digits:\n    #         sum += d\n    #     if sum > max_num:\n    #         max_num = sum\n    #         max_num_digits = digits\n    # return max_num_digits\n\n    max_num = 0\n    for num in range(1, x + 1):\n        digits = [int(d) for d in str(num)]\n        sum = 0\n        for d in digits:\n            sum += d\n        if sum > max_num:\n            max_num = sum\n            max_num_digits = digits\n    return max_num_digits\n"
    },
    {
        "number": 1,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x <= 10:\n        return str(x)\n    current_value = 0\n    biggest_value = x - 1\n    while biggest_value >= 0:\n        current_value += sum([int(i) for i in str(biggest_value)])\n        if current_value > biggest_value:\n            return str(biggest_value)\n        biggest_value -= 1\n    return str(biggest_value + 1)\n\ndef"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    return ''\n\"\"\"\n\nfrom sys import stdin\n\ndef"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin)\n    count = 0\n    while not is_lucky(number):\n        count += 1\n        number += 1\n    return count\n\ndef"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Get next lucky year and calculate how many years are remaining until next lucky year\n    :param stdin: current year\n    :return: amount of years until next lucky year\n    \"\"\"\n    current_year = int(stdin)\n    current_year_lucky = [int(i) for i in str(current_year)]\n    while True:\n        for i in current_year_lucky:\n            if i!= 0 and i!= 1:\n                return print(len(current_year_lucky))\n        current_year_lucky = [int(i) for i in str(current_year + 1)]\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\na = int(stdin)\nc = a % 100\nd = (a % 10000) // 100\ne = (a % 100000) // 1000\nf = (a % 1000000) // 10000\ng = (a % 10000000) // 100000\nh = (a % 100000000) // 1000000\ni = (a % 1000000000) // 10000000\n\nprint(c, d, e, f, g, h, i)\nprint(a + c + d + e + f + g + h + i)\n\nreturn(a + c + d + e + f + g + h + i)\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return...\n\"\"\"\n\n\ndef"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin)\n    year = str(number)[0]\n    year_number = int(year)\n\n    if number % 10 == 0:\n        if year_number < 2:\n            return len(stdin)\n        return year_number\n    else:\n        return 0\n"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) - next_lucky_year(int(stdin)) + 1)\n\n\ndef"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\nreturn ''\n\ndef"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    start_year = int(stdin)\n    cnt_of_digits = 0\n    while start_year > 0:\n        cnt_of_digits += 1\n        start_year //= 10\n    if cnt_of_digits == 0:\n        return 0\n    last_digit = stdin % 10\n    for _ in range(cnt_of_digits - 1):\n        last_digit *= 10\n    while last_digit > 0:\n        if last_digit % 10 == 0:\n            last_digit //= 10\n            continue\n        if start_year % 10 == 0:\n            return cnt_of_digits - 1\n        start_year += 1\n        last_digit //= 10\n    return cnt_of_digits\n\"\"\"\n\ndef"
    },
    {
        "number": 2,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    ans = 0\n    while stdin.find('0') > 0:\n        ans += 1\n        stdin = str(int(stdin) + 9999)\n    return ans\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def solve(n, m, arr):\n        arr = sorted(arr)\n        res = 0\n        l, r = 0, n - 1\n        painters = 0\n        while r >= l:\n            if painters < m - 2:\n                if arr[r] >= l:\n                    r -= 1\n                    if arr[l] < l:\n                        painters += 1\n                        l += 1\n                else:\n                    res += 1\n                    l += 1\n                    if arr[l] < l:\n                        painters += 1\n            else:\n                if arr[r] >= l:\n                    r -= 1\n                    if arr[l] < l:\n                        painters += 1\n                else:\n                    if arr[l] < l:\n                        painters += 1\n                    l += 1\n                    res += 1\n        return res\n    n, m = list(map(int, stdin.split(' ')))\n    arr = list(map(int, stdin.split(' ')))\n    print(solve(n, m, arr))\n    return ''"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    from collections import deque\n    def paint(arr):\n        hq = deque([arr[0], arr[1]])\n        for i in range(2, len(arr)):\n            hq.append(arr[i])\n            while len(hq) > 2:\n                if arr[i] > hq[0] and arr[i] < hq[1]:\n                    break\n                hq.popleft()\n            else:\n                hq.popleft()\n                hq.popleft()\n        return hq\n\n    arr = stdin.split('\\n')\n    n, q = int(arr[0].split(' ')[0]), int(arr[0].split(' ')[1])\n    arr = [int(x) for x in arr[1:]]\n    arr.sort()\n    q -= 2\n    print(arr)\n    for i in range(q):\n        arr = paint(arr)\n    return max(arr)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, q = [int(x) for x in stdin.split(' ')]\n    l, r = [int(x) for x in stdin.split('\\n')[1:]]\n    return f\"{sum([max(l, i) <= x <= max(r, i) for i in range(1, n+1)])}\"\n    "
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\""
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('7 5\\n1 4\\n4 5\\n5 6\\n6 7\\n3 5\\n')\n    '7'\n    \"\"\"\n    n, q = map(int, stdin.split())\n    l, r = [], []\n    for _ in range(q):\n        l, r = map(int, stdin.split())\n        l -= 1\n        r -= 1\n        l %= n\n        r %= n\n        l, r = sorted([l, r])\n        if l!= r:\n            print(r - l)\n            break\n    else:\n        print(n)\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split('\\n')[:2])\n    if b - 2 < a:\n        return 0\n    cnt = 0\n    arr = []\n    for i in stdin.split('\\n')[2:]:\n        arr.append(list(map(int, i.split())))\n    arr.sort()\n    for i in arr[:b - 2]:\n        for j in range(i[0], i[1]):\n            if j not in arr[i[0]:i[1]]:\n                cnt += 1\n    return cnt\n"
    },
    {
        "number": 3,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, q = [int(x) for x in stdin.split(\" \")]\n    l = []\n    for _ in range(q):\n        l.append([int(x) for x in stdin.split(\" \")])\n    l.sort(key=lambda x: x[0])\n    ans = 0\n    i = 0\n    while i < n - 2:\n        j = i + 1\n        while j < n and l[i][1] >= l[j][0]:\n            j += 1\n        ans += j - i - 1\n        i = j\n    return str(ans)\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the smallest number of times Jamie needs to press the snooze button to wake up at hh: mm.\n    \"\"\"\n    h, m = map(int, stdin.split())\n    print(find_min(h, m))\n    return \"\"\n\ndef"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    # \u524d\u9762\u591a\u4e00\u4e2a0, \u6240\u4ee5\u5728b\u540e\u9762\u589e\u52a0\u4e00\u4e2a\u5c0f\u65f6\n    return (60*a+b) // (60*24+b)"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    hours, minutes = map(int, stdin.split())\n    return int(minutes / 15) if '7' in str(hours) + str(minutes) else 0"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    min_num = stdin\n    for i in range(24):\n        if '7' in str(i) and i < int(min_num):\n            min_num = i\n    return min_num\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the minimum number of times Jamie needs to press the button\"\"\"\n    # your code here\n    time = input().split()\n    hour, minute = int(time[0]), int(time[1])\n\n    if minute < 7:\n        return 0\n    elif minute > 59:\n        hour += 1\n        minute -= 60\n    while hour > 23 or minute > 59:\n        hour -= 24\n        minute += 60\n    if minute >= 7:\n        return 0\n\n    while minute < 7:\n        hour -= 1\n        minute += 60\n\n    time = str(hour) + str(minute)\n    count = 0\n    while \"7\" in time:\n        count += 1\n        time = time.replace(\"7\", \"\", 1)\n    return count\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin.split(\"\\n\")[0])\n    h, m = map(int, stdin.split(\"\\n\")[1].split(\" \"))\n\n    ans = 0\n    while x > m:\n        if m % 10 == 7:\n            ans += 1\n        if h % 10 == 7:\n            ans += 1\n        x -= 60\n        h += 1\n        m = (m + 1) % 60\n    return ans\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    h, m = map(int, stdin.split())\n    h -= 1\n    m -= 1\n    h_count = 0\n    m_count = 0\n    while h_count < 24:\n        h_count += 1\n        if m_count < 60:\n            if h == h_count and m == m_count:\n                break\n            m_count += x\n        else:\n            h_count += 1\n            m_count = 0\n\n    return m_count\n\n\nprint(solution(input()))\n\n\n\"\"\"\nfrom itertools import chain\nfrom operator import add\nfrom functools import reduce\nfrom functools import partial\n\nimport numpy as np\n\n\ndef"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    #Your code here\n    alarm = stdin.split(\" \")\n    h = int(alarm[0][0:2])\n    m = int(alarm[0][3:5])\n    print(alarm)\n    while True:\n        if h == 24:\n            h = 0\n        if m == 60:\n            m = 0\n        if h == int(alarm[1][0:2]) and m == int(alarm[1][3:5]):\n            break\n        if m < int(alarm[1][3:5]):\n            m += 15\n        else:\n            m -= 15\n        h += 1\n    return h\n"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('3\\n11 23')\n    2\n    '''\n    minutes, h, m = stdin.split('\\n')\n    hh, mm = h.split(' ')\n    if int(mm) < int(m):\n        return 0\n    x = (int(m) - int(mm))*60\n    x += int(hh) * 3600\n    x += int(mm) * 60\n    x += int(hh) * 60 * 24\n    x -= x % int(minutes)\n    if x > 0:\n        return (x//int(minutes)) + 1\n    else:\n        return x//int(minutes)"
    },
    {
        "number": 4,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    hour, minute = map(int, stdin.split())\n    minute += hour * 60\n    for x in range(minute + 1):\n        if '7' in str(x):\n            return x - minute\n\n\ndef"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    'Decoded the input and create a list of tabs'\n    n, pos, l, r = list(map(int, stdin.split()))\n    tabs = list(range(1, n + 1))\n    if pos < l:\n        tabs = tabs[:l - 1]\n    elif pos > r:\n        tabs = tabs[r:]\n    elif pos == r:\n        tabs = tabs[r:]\n    elif pos == l:\n        tabs = tabs[:l - 1]\n    return len(tabs)\n\n\ndef"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    input = stdin.split(\" \")\n    n = int(input[0])\n    pos = int(input[1])\n    l = int(input[2])\n    r = int(input[3])\n\n    if pos >= l and pos <= r:\n        return 0\n    elif pos < l:\n        return r - l + 1\n    else:\n        return 2 * (r - l)\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, pos, l, r = [int(i) for i in stdin.split()]\n    res = min(n - pos, pos - l + 1) + min(r - pos, pos - l + 1)\n    return str(res)\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, pos, l, r = map(int, stdin.split())\n    if pos < l:\n        print(abs(pos - l))\n    elif pos > r:\n        print(abs(pos - r))\n    else:\n        print(0)\n\n\ndef"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''Takes input, returns solution'''\n    # your solution here\n    n, pos, l, r = [int(x) for x in stdin.split(' ')]\n    if r > n:\n        r = n\n    if l > n:\n        l = n\n    if l > r:\n        l = r\n    if l < 1:\n        l = 1\n    if r > n:\n        r = n\n    print(r - l)\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 5,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, pos, l, r = [int(x) for x in stdin.split()]\n    ans = 0\n    tabs = [i for i in range(n)]\n    for i in range(pos):\n        if i > l and i < r:\n            continue\n        tabs.remove(i)\n    for i in tabs:\n        ans += abs(i - pos)\n        pos = i\n    return ans\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nfrom collections import Counter, defaultdict\n\nt = int(input())\n\nfor _ in range(t):\n    n, x = map(int, input().split())\n    lst = []\n    while n > 0:\n        n, d, h = map(int, input().split())\n        lst.append([d, h])\n    m = Counter()\n    heads = defaultdict(int)\n    for d, h in lst:\n        m[d] = max(m[d], h)\n        heads[d] += h\n    res = []\n    for i in range(1, 11):\n        if i in m:\n            k = m[i]\n            cur = min(k, heads[i])\n            heads[i] -= cur\n            if cur!= k:\n                res.append(i * k)\n            if not heads[i]:\n                break\n    if res:\n        res.sort(reverse=True)\n        print(res[0])\n    else:\n        print(-1)\n\n\ndef"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    \n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for i in range(t):\n        n, x = [int(x) for x in stdin.readline().split()]\n        d = [int(x) for x in stdin.readline().split()]\n        h = [int(x) for x in stdin.readline().split()]\n        res = -1\n        for i in range(n):\n            if i + 1 <= x:\n                x -= d[i]\n                if h[i]!= 0:\n                    h[i] += d[i]\n            else:\n                res = 0\n                break\n        if res == -1:\n            print(res)\n        else:\n            print(x)\n\n\n\n----Problem 1:\n\nYou are given an array of integers. On each move you are allowed to increase the value of any element by one. Find the minimal number of moves required to obtain a strictly increasing sequence from the input.\n\nExample\n\nFor inputArray = [1, 1, 1], the output should be\narrayChange(inputArray) = 3.\n\nInput/Output\n\n[execution time limit] 4 seconds (py3)\n\n[input] array.integer inputArray\n\nGuaranteed constraints:\n1 \u2264 inputArray.length \u2264 105,\n1 \u2264 inputArray[i] \u2264 105.\n\n[output] integer\n\nThe minimal number of moves needed to obtain a strictly increasing sequence from inputArray.\n\n\"\"\"\n\ndef"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    queries_count = int(lines[0])\n    results = []\n    for i in range(1, queries_count + 1):\n        n, x = map(int, lines[i].split(' '))\n        head_count = x\n        res = 0\n        while head_count > 1:\n            blows = 1\n            while head_count > x - blows:\n                head_count -= x - blows\n                blows += 1\n            res += blows\n            head_count += x - blows\n        results.append(str(res))\n    return '\\n'.join(results)\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    time complexity: O(t * n * l), where t is number of queries, n is number of types of blows, l is the length of descriptions\n    space complexity: O(t * n * l), where t is number of queries, n is number of types of blows, l is the length of descriptions\n    \"\"\"\n    t = int(stdin.readline())\n    for _ in range(t):\n        n, x = [int(s) for s in stdin.readline().split()]\n        d, h = [int(s) for s in stdin.readline().split()]\n        \n        res = x\n        for _ in range(n):\n            d, h = [int(s) for s in stdin.readline().split()]\n            # print(d, h)\n            res = min(res, min(d, x))\n            x -= min(d, x)\n            if x <= 0:\n                break\n            x += h\n        print(res if x > 0 else -1)\n\n\ndef"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity: O(t * n * k)\n    Space complexity: O(t * k)\n    \"\"\"\n    answers = []\n    for _ in range(int(stdin)):\n        n, x = [int(x) for x in stdin.split(\"\\n\")[1].split()]\n        b = []\n        for line in stdin.split(\"\\n\")[2:]:\n            b.append([int(x) for x in line.split()])\n        x, i, d, h = x, 1, 0, x\n        for e in b:\n            i, d, h = i + 1, min(e[0], h), h - min(e[0], h)\n            if h <= 0:\n                answers.append(-1)\n                break\n        else:\n            answers.append(i)\n    return \"\\n\".join(map(str, answers))\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 10\n   ... 6 3\n   ... 8 2\n   ... 1 4\n   ... 4 10\n   ... 4 1\n   ... 3 2\n   ... 2 6\n   ... 1 100\n   ... 2 15\n   ... 10 11\n   ... 14 100\n   ... ''')\n    '2'\n    >>> solution('''1\n   ... 1 1\n   ... ''')\n    '1'\n    \"\"\"\n    t, n, x = map(int, stdin.split('\\n')[0].split())\n    d, h = {}, {}\n    for i in range(1, n + 1):\n        di, hi = map(int, stdin.split('\\n')[i].split())\n        d[i] = di\n        h[i] = hi\n    dp = [1] + [0] * x\n    for k in range(n):\n        for i in range(1, n + 1):\n            if dp[i - 1] > 0:\n                dp[i] = max(dp[i], min(d[i], h[i] + dp[i - 1]))\n    if max(dp) == 0:\n        return -1\n    return t - sum(dp)\n"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    sys.stdin = open(__file__.replace('.py', '.input'), 'w')\n    sys.stdout = open(__file__.replace('.py', '.output'), 'w')\n\n    t = int(stdin)\n\n    for i in range(t):\n        n, x = map(int, stdin.readline().split(' '))\n        b = [0] * n\n        h = [0] * n\n        for j in range(n):\n            b[j], h[j] = map(int, stdin.readline().split(' '))\n        b.sort()\n        b = set(b)\n        b = list(b)\n        b.sort()\n        d = []\n        for j in range(n):\n            d.append(b.index(b[j]) - h[j])\n        d = set(d)\n        d = list(d)\n        d.sort()\n        d = set(d)\n        if len(d) == 1:\n            print(-1)\n        else:\n            print(d[1])\n\n    return ''\n\n\n\ndef"
    },
    {
        "number": 6,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    for _ in range(t):\n        n, x = [int(x) for x in stdin.readline().split()]\n        d = [int(x) for x in stdin.readline().split()]\n        h = [int(x) for x in stdin.readline().split()]\n        if x < min(d):\n            print(-1)\n            continue\n        else:\n            c = x\n            count = 0\n            for i in range(n):\n                c -= min(d[i], c)\n                count += 1\n                if c <= 0:\n                    break\n            if c <= 0:\n                print(count)\n            else:\n                print(-1)\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a,b = map(int,stdin.split())\n    ans = 0\n    while b>0:\n        if (a-b)%2 == 0:\n            a = (a-b)//2 + b\n        else:\n            a = (a-b+1)//2 + b\n        b = (a-b)//2\n        ans +=1\n    return str(ans)\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.split(' ')]\n    day = 0\n    while n > 0:\n        day += 1\n        n = n + m - 1\n        n -= m\n        if n < 0:\n            n = 0\n    return str(day)\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    day = 1\n    while m > 0:\n        m -= n\n        day += 1\n    return str(day)"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    k = 1\n    while n > 0:\n        n -= m\n        k += 1\n        if n < 0:\n            break\n        m += m\n    return k"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    c = (a + b) / b\n    return int(c)\n\nprint(solution(input()))\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    \n    day = 0\n    while n!= 0:\n        n = n - m\n        if n < 0:\n            n = n + m\n        day += 1\n        \n    return day\n    \n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(c) for c in stdin.split(' ')]\n    cur = 0\n    ans = 0\n    while n > 0:\n        cur = (cur + m) % n\n        n -= 1\n        if cur == 0:\n            ans += 1\n    return str(ans)\n"
    },
    {
        "number": 7,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split(' ')))\n    res = 0\n    while n > 0:\n        res += (m + n - 1) // n\n        n -= 1\n    return str(res)\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split(\" \")\n    set_1 = []\n    set_2 = []\n    set_3 = []\n    for i in range(len(a)):\n        if a[i][1] == \"m\":\n            set_1.append(int(a[i][0]))\n        if a[i][1] == \"p\":\n            set_2.append(int(a[i][0]))\n        if a[i][1] == \"s\":\n            set_3.append(int(a[i][0]))\n    print(set_1)\n    print(set_2)\n    print(set_3)\n    set_1.sort()\n    set_2.sort()\n    set_3.sort()\n    print(set_1)\n    print(set_2)\n    print(set_3)\n\n    num_1 = 0\n    num_2 = 0\n    num_3 = 0\n\n    for i in range(0, len(set_1)):\n        if set_1[i] % 9 == 0:\n            num_1 += 1\n        if set_1[i] % 9 == 8:\n            num_1 += 1\n        if set_1[i] % 9 == 1:\n            num_1 += 1\n        if set_1[i] % 9 == 2:\n            num_1 += 1\n        if set_1[i] % 9 == 3:\n            num_1 += 1\n        if set_1[i] % 9 == 4:\n            num_1 += 1\n        if set_1[i] % 9 == 5:\n            num_1 += 1\n        if set_1[i] % 9 == 6:\n            num_1 += 1\n        if set_1[i] % 9 == 7:\n            num_1 += 1\n\n    for i in range(0, len(set_2)):\n        if set_2[i] % 9 == 0:\n            num_2 += 1\n        if set_2[i] % 9 == 8:\n            num_2 += 1\n        if set_2[i] % 9 == 1:\n            num_2 += 1\n        if set_2[i] % 9 == 2:\n            num_2 += 1\n        if set_2[i] % 9 == 3:\n            num_2 += 1\n        if set_2[i] % 9 == 4:\n            num_2 += 1\n        if set_2[i] % 9 == 5:\n            num_2 += 1\n        if set_2[i] % 9 == 6:\n            num_2 += 1\n        if set_2[i] % 9 == 7:\n            num_2 += 1\n\n    for i in range(0, len(set_3)):\n        if set_3[i] % 9 == 0:\n            num_3 += 1\n        if set_3[i] % 9 == 8:\n            num_3 += 1\n        if set_3[i] % 9 == 1:\n            num_3 += 1\n        if set_3[i] % 9 == 2:\n            num_3 += 1\n        if set_3[i] % 9 == 3:\n            num_3 += 1\n        if set_3[i] % 9 == 4:\n            num_3 += 1\n        if set_3[i] % 9 == 5:\n            num_3 += 1\n        if set_3[i] % 9 == 6:\n            num_3 += 1\n        if set_3[i] % 9 == 7:\n            num_3 += 1\n\n    print(num_1)\n    print(num_2)\n    print(num_3)\n\n    print(num_1 - num_2 - num_3)\n    return str(num_1 - num_2 - num_3)\n\n\nprint(solution(stdin=input()))\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    nums = [int(n) for n in stdin.split()]\n    if len(set(nums)) == 3:\n        return '0'\n    suited = set()\n    for n in nums:\n        if n % 10 == 0:\n            n = str(n)\n        else:\n            n = n % 10\n        suited.add(n)\n    koutsu = len(suited)\n    shuntsu = len(set(nums)) - koutsu\n    if koutsu < shuntsu:\n        return '1'\n    elif koutsu == shuntsu:\n        return '0'\n    else:\n        return '2'\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(min(sum(map(int, \"\".join(stdin).split(\"m\"))) - 1, sum(map(int, \"\".join(stdin).split(\"p\"))) - 1))\n\n\ndef"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = len(stdin)\n    ans = 0\n    \n    return ans\n\nprint(solution(\"9m 9m 9m\")) #0\nprint(solution(\"3p 9m 2p\")) #1\nprint(solution(\"1s 2s 3s\")) #0\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)\nprint(solution(\"9m 9m 9m\"))"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Returns minimum number of extra tiles needed to win\n    \"\"\"\n    stdin = stdin.strip().split()\n    tile_list = [0, 0, 0]\n    for tile in stdin:\n        tile_list[int(tile[0]) - 1] += int(tile[1])\n    return min(tile_list)\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    p = stdin.split()[0]\n    k = stdin.split()[1]\n    k = k[0] + k[1]\n    p = p[0] + p[1]\n    print(p.count(k) - p.count(k[0]))\n    return \" \"\n\nprint(solution(input()))\n"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    tile_1, tile_2, tile_3 = stdin.split()\n    tile_1_suit, tile_1_number = tile_1[0], int(tile_1[1])\n    tile_2_suit, tile_2_number = tile_2[0], int(tile_2[1])\n    tile_3_suit, tile_3_number = tile_3[0], int(tile_3[1])\n\n    tile_1_number_plus_one = tile_1_number + 1\n    tile_2_number_plus_one = tile_2_number + 1\n    tile_3_number_plus_one = tile_3_number + 1\n\n    tile_1_suit_lower_case = tile_1_suit.lower()\n    tile_2_suit_lower_case = tile_2_suit.lower()\n    tile_3_suit_lower_case = tile_3_suit.lower()\n\n    # number of mentsu\n    if tile_1_number_plus_one == tile_2_number_plus_one == tile_3_number_plus_one == 3:\n        print(0)\n        return\n\n    # number of koutsu\n    if tile_1_suit_lower_case == tile_2_suit_lower_case == tile_3_suit_lower_case:\n        print(1)\n        return\n\n    # number of shuntsu\n    if tile_1_number_plus_one == tile_2_number_plus_one == tile_3_number_plus_one == 1:\n        if tile_1_suit_lower_case == tile_2_suit_lower_case == tile_3_suit_lower_case:\n            print(0)\n            return\n        if tile_1_suit_lower_case == tile_2_suit_lower_case == tile_3_suit_lower_case - 1:\n            print(0)\n            return\n        if tile_1_suit_lower_case == tile_2_suit_lower_case == tile_3_suit_lower_case + 1:\n            print(0)\n            return\n        if tile_1_suit_lower_case == tile_2_suit_lower_case == tile_3_suit_lower_case - 2:\n            print(0)\n            return\n        if tile_1_suit_lower_case == tile_2_suit_lower_case == tile_3_suit_lower_case + 2:\n            print(0)\n            return\n\n    # number of mentsu\n    if tile_1_suit_lower_case == tile_2_suit_lower_case == tile_3_suit_lower_case + 1:\n        if tile_1_number_plus_one == tile_2_number_plus_one == tile_3_number_plus_one == 2:\n            print(0)\n            return\n        if tile_1_number_plus_one == tile_2_number_plus_one == tile_3_number_plus_one == 3:\n            print(0)\n            return\n\n    # number of mentsu\n    if tile_1_suit_lower_case == tile_2_suit_lower_case == tile_3_suit_lower_case + 2:\n        if tile_1_number_plus_one == tile_2_number_plus_one == tile_3_number_plus_one == 2:\n            print(0)\n            return\n        if tile_1_number_plus_one == tile_2_number_plus_one == tile_3_number_plus_one == 3:\n            print(0)\n            return\n\n    print(tile_1_number_plus_one + tile_2_number_plus_one + tile_3_number_plus_one - 3)"
    },
    {
        "number": 8,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return number of extra tiles to draw to win.\"\"\"\n    suits = [\"m\", \"p\", \"s\"]\n    for suit in suits:\n        stdin = stdin.replace(suit, suit + \"1\")\n    counts = [0 for i in range(3)]\n    for tile in stdin:\n        if tile[0]!= \"1\" or tile[1] not in \"mp\":\n            raise ValueError(\"Invalid input.\")\n        if tile[1] == \"m\":\n            counts[0] += 1\n        elif tile[1] == \"p\":\n            counts[1] += 1\n        elif tile[1] == \"s\":\n            counts[2] += 1\n    return min(counts)\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    d = int(stdin.readline())\n    n, m = map(int, stdin.readline().split())\n    sofs = [[int(x) for x in stdin.readline().split()] for _ in range(d)]\n    cnts = map(int, stdin.readline().split())\n    sofs.sort(key=lambda x: x[0], reverse=True)\n    cnts = sorted(cnts, reverse=True)\n    if sofs[0][0] < sofs[0][1]:\n        cnts[0] -= 1\n        if cnts[0] == 0:\n            return -1\n    if sofs[d - 1][0] > sofs[d - 1][1]:\n        cnts[-1] -= 1\n        if cnts[-1] == 0:\n            return -1\n    i = 0\n    while cnts:\n        if cnts[0] == i:\n            if sofs[i][0] < sofs[i][1]:\n                return i + 1\n            cnts.pop(0)\n            i += 1\n        else:\n            return -1\n    return -1\n\n\nprint(solution(stdin))"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Greedily search for a solution.\"\"\"\n    sofa_cnt = int(stdin.readline())\n    sofa_size = tuple(map(int, stdin.readline().split()))\n    sofa_matrix = [tuple(map(int, stdin.readline().split())) for _ in range(sofa_cnt)]\n    sofa_matrix.sort(key=lambda x: x[0])\n    sofas_to_the_right = 0\n    for left_sofa, right_sofa in zip(sofa_matrix, sofa_matrix[1:]):\n        if right_sofa[0] > left_sofa[1]:\n            sofas_to_the_right += 1\n    sofas_to_the_bottom = 0\n    for bottom_sofa, top_sofa in zip(sofa_matrix, sofa_matrix[1:]):\n        if bottom_sofa[1] > top_sofa[0]:\n            sofas_to_the_bottom += 1\n    if sofa_cnt == sofas_to_the_right + sofas_to_the_bottom + 1:\n        return str(sofa_cnt)\n    return str(-1)\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split('\\n')[0].split()]\n    sofas = [int(x) for x in stdin.split('\\n')[1].split()]\n    cnts = [int(x) for x in stdin.split('\\n')[2].split()]\n    print(solution_handler(n, m, sofas, cnts))\n\n\ndef"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, *coords = [int(i) for i in stdin.split('\\n') if i]\n    left_coords = [(x, y) for x, y in [(0, 0), *[(x, y - 1) for x, y in enumerate(coords, 1) if x % 2 == 0]]]\n    right_coords = [(x, y) for x, y in [(n - 1, 0), *[(x, y + 1) for x, y in enumerate(coords, 1) if x % 2 == 1]]]\n    top_coords = [(x, y) for x, y in [(0, 0), *[(x - 1, y) for x, y in enumerate(coords) if x % 2 == 0]]]\n    bottom_coords = [(x, y) for x, y in [(n - 1, m - 1), *[(x + 1, y) for x, y in enumerate(coords) if x % 2 == 1]]]\n    coords = {(x, y): 1 for x, y in left_coords + right_coords + top_coords + bottom_coords}\n    coords[(0, 0)] = 0\n    res = {}\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if i % 2 == 0:\n                x = i - 1\n            else:\n                x = i + 1\n            if j % 2 == 0:\n                y = j - 1\n            else:\n                y = j + 1\n            if coords.get((x, y), 0):\n                res[(x, y)] = res.get((x, y), 0) + 1\n                for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                    if coords.get((x + dx, y + dy), 0):\n                        res[(x, y)] -= 1\n                        break\n    return str(len([i for i in res.values() if i == 0]))\n\n\nprint(solution('2\\n3 2\\n1 2 1 1\\n5 5 6 5\\n6 4 5 4\\n2 1 2 0'))"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return str(a) if a > 0 else -1\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    "
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    sofas = [[int(i) for i in stdin.split()] for _ in range(n)]\n    d = max([sofa[3] for sofa in sofas])\n    sofa = [[-1 for _ in range(n)] for _ in range(m)]\n\n    for i in range(n):\n        x, y, a, b = sofas[i]\n        sofa[x - 1][y - 1] = i\n        sofa[x - 1][y - 1 + a - 1] = i\n        sofa[x - 1 + b - 1][y - 1] = i\n\n    for i in range(m):\n        x, y, a, b = sofas[i]\n        sofa[x - 1][y - 1] = i\n        sofa[x - 1 + a - 1][y - 1] = i\n\n    ans = -1\n    for i in range(n):\n        x, y, a, b = sofas[i]\n        if b == 0:\n            ans = i\n        else:\n            if a > 1:\n                if x == 1 and sofa[x - 2][y - 1] > 0:\n                    ans = sofa[x - 2][y - 1]\n                elif y == 1 and sofa[x - 1][y - 2] > 0:\n                    ans = sofa[x - 1][y - 2]\n                elif x == m and sofa[x - 1][y - 1] > 0:\n                    ans = sofa[x - 1][y - 1]\n                elif y == m and sofa[x - 1 + a - 1][y - 1] > 0:\n                    ans = sofa[x - 1 + a - 1][y - 1]\n                else:\n                    ans = -1\n            elif a == 1:\n                if x == 1 and sofa[x - 1][y - 1] > 0:\n                    ans = sofa[x - 1][y - 1]\n                elif y == 1 and sofa[x - 1][y - 2] > 0:\n                    ans = sofa[x - 1][y - 2]\n                elif x == m and sofa[x - 1][y - 1] > 0:\n                    ans = sofa[x - 1][y - 1]\n                elif y == m and sofa[x - 1 + a - 1][y - 1] > 0:\n                    ans = sofa[x - 1 + a - 1][y - 1]\n                else:\n                    ans = -1\n\n    print(ans + 1)\n    return str(ans + 1)\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    stdin.readline()\n    n, m = map(int, stdin.readline().split())\n    sofas = [tuple(map(int, stdin.readline().split())) for _ in range(d)]\n    # sofas = []\n    # for _ in range(d):\n    #     sofas.append(tuple(map(int, stdin.readline().split())))\n    sofas = sorted(sofas, key=lambda x: (x[0], x[1]))\n    count = 0\n    prev_cord = sofas[0]\n    for i, sofa in enumerate(sofas[1:]):\n        if prev_cord[0] == sofa[0] and prev_cord[1] == sofa[1]:\n            continue\n        if prev_cord[0] < sofa[0] and prev_cord[1] > sofa[1]:\n            count += 1\n        prev_cord = sofa\n    return count\n    '''\n    d = int(stdin.readline())\n    if d < 1 or d > 10**5:\n        return -1\n    n, m = map(int, stdin.readline().split())\n    if n < 1 or n > 10**5 or m < 1 or m > 10**5:\n        return -1\n    for _ in range(d):\n        x_1, y_1, x_2, y_2 = map(int, stdin.readline().split())\n        if x_1 < 1 or x_1 > n or x_2 < 1 or x_2 > n or y_1 < 1 or y_1 > m or y_2 < 1 or y_2 > m:\n            return -1\n    cnt_l, cnt_r, cnt_t, cnt_b = map(int, stdin.readline().split())\n    return (\n        cnt_l + cnt_r + cnt_t + cnt_b\n    ) if cnt_l < 1 or cnt_l > d - 1 or cnt_r < 1 or cnt_r > d - 1 or cnt_t < 1 or cnt_t > d - 1 or cnt_b < 1 or cnt_b > d - 1 else -1\n"
    },
    {
        "number": 9,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    sofas = stdin.split('\\n')[0].split(' ')\n    d = int(sofas[0])\n    n, m = int(sofas[1]), int(sofas[2])\n    print(n,m)\n    sofa_list = [None] * d\n    \n    for i in range(0, d):\n        sofa_list[i] = [int(sofas[3 + 2 * i]), int(sofas[4 + 2 * i])]\n    \n    sofa_list.sort(key = lambda sofa: sofa[0])\n    print(sofa_list)\n    print(sofa_list[0][1] == 0)\n    \n    \n    \n    for i in range(0, d):\n        if (sofa_list[i][1] == 0 and\n            sofa_list[i][0] > 0 and\n            ((sofa_list[i + 1][1] == 0 and sofa_list[i + 1][0] > 0) or\n            (sofa_list[i - 1][1] == 0 and sofa_list[i - 1][0] > 0))):\n            return str(i + 1)\n            \n    return '-1'\n        \n        \ndef"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = int(stdin)\n    return str(stdin//2), str(stdin//2)\n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    days_off_per_year = int(stdin)\n    maximum_days_off = days_off_per_year // 5\n    minimum_days_off = maximum_days_off // 2\n    if minimum_days_off == 0:\n        minimum_days_off = 1\n    return f'{minimum_days_off} {maximum_days_off}'\n\nprint(solution(input()))\n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    days = stdin\n    \n    work = [5, 1]\n    off = [1, 2]\n    \n    total = 0\n    for i in range(len(work)):\n        total = total + off[i] - work[i]\n    \n    print(total, total + days)\n    return 0"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")[0]\n    days = int(stdin)\n    days_off = days // 2\n    days_on = days - days_off\n    return str(days_on) + \" \" + str(days_off)"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    \n    return str(0) +'' + str(n - 2)\n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    days_in_year = int(stdin)\n    number_of_days_off = days_in_year - 14\n    days_off_in_week = 2\n    number_of_days_off_in_week = number_of_days_off // days_in_year * days_off_in_week\n    number_of_days_off_in_week += number_of_days_off % days_in_year * (days_off_in_week - 1)\n    return str(number_of_days_off_in_week) + \" \" + str(number_of_days_off_in_week)\n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    days_in_year_on_mars = int(stdin)\n    return f\"{4 if days_in_year_on_mars % 5!= 0 else 0} {days_in_year_on_mars // 5 if days_in_year_on_mars % 5!= 0 else days_in_year_on_mars // 5}\"\n\n\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    week_days = 5\n    week_days_off = 2\n    days_in_year = int(stdin)\n    day_in_year_off = days_in_year - week_days\n    day_in_year_work = days_in_year - week_days_off\n    return str(day_in_year_off) + \" \" + str(day_in_year_work)\n"
    },
    {
        "number": 10,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    days = int(stdin.split(\"\\n\")[0])\n    return str(days//2+1) + \" \" + str(days//2)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # n = int(stdin)\n    n, a, b, p, q = map(int, stdin.split())\n    res = 0\n    for i in range(1, n + 1):\n        if i % a == 0 or i % b == 0:\n            res += p\n        else:\n            res += q\n    print(res)\n    return res\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    num_tiles = [int(x) for x in stdin.split(\"\\n\")[0].split()]\n    a, b, p, q = num_tiles[1], num_tiles[2], num_tiles[3], num_tiles[4]\n    tiles = set()\n    for i in range(num_tiles[0]):\n        if i % a == 0 or i % b == 0:\n            tiles.add(i)\n    tiles = list(tiles)\n    tiles.sort()\n    tiles_paint = []\n    tiles_choco = []\n    for i in tiles:\n        if i % a == 0:\n            tiles_paint.append(i)\n        if i % b == 0:\n            tiles_choco.append(i)\n    tiles_paint.sort()\n    tiles_choco.sort()\n    red_choco = 0\n    blue_choco = 0\n    for i in tiles_paint:\n        red_choco += p\n        blue_choco += q\n    if red_choco > blue_choco:\n        return str(blue_choco)\n    return str(red_choco)\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, p, q = [int(x) for x in stdin.split(' ')]\n    return str(max(p * a * n, p * q * n))"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, p, q = [int(x) for x in stdin.split()]\n    print(int((n - 1) * (1 + a + b + p + q) / 2))\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, p, q = map(int, stdin.split(' '))\n    n1 = n // a\n    n2 = n // b\n    p1 = p * n1\n    q1 = q * n1\n    p2 = p * n2\n    q2 = q * n2\n    res = p1 + q2\n    res += max(p2, q1)\n    return str(res)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Input:\n    # nums = list(map(int, stdin.split('\\n')[0].split(' ')))\n    # a, b, p, q = nums[0], nums[1], nums[2], nums[3]\n    a, b, p, q = map(int, stdin.split('\\n')[0].split(' '))\n    return a * q + b * p\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return \"\""
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, p, q = [int(x) for x in stdin.split()]\n    return str(n * p + (n - 1) * q)\n"
    },
    {
        "number": 11,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\nprint(solution(input()))\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    trophies = [stdin[i] for i in range(len(stdin))]\n    dp = [[-1 for _ in range(n)] for _ in range(n)]\n    res = helper(trophies, n, dp)\n    return str(res)\n\ndef"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    sc = stdin.split('\\n')[1]\n\n    max_sc = 0\n    max_idx = 0\n    for i, c in enumerate(sc):\n        if c == 'G':\n            max_sc += 1\n            max_idx = i\n        else:\n            if max_sc > 0:\n                max_sc -= 1\n                if max_sc > max_sc:\n                    max_sc = max_sc\n                elif max_sc == max_sc:\n                    max_sc = 0\n\n    return str(max_sc * 2 + 1)\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\"\"\"\n\ndef"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\nimport sys\nimport re\nfrom typing import Match\n\n\ndef"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    return stdin\n"
    },
    {
        "number": 12,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the maximum possible beauty of the arrangement, if Vova is allowed to do at most one swap.\n\n    Args:\n        stdin (str): input string\n\n    Returns:\n        str: the maximum possible beauty of the arrangement\n    \"\"\"\n    trophies: list[str] = [c for c in stdin]\n    len_trophies: int = len(trophies)\n    max_length: int = 0\n    for i in range(len_trophies - 1):\n        if trophies[i] == 'G' and trophies[i + 1] == 'G':\n            continue\n        elif (trophies[i] == 'S' and trophies[i + 1] == 'G') or (trophies[i] == 'G' and trophies[i + 1] == 'S'):\n            max_length = max(max_length, i + 1)\n    return max_length\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    prio = [list(map(int, stdin.readline().split())) for i in range(k)]\n    mprio = []\n    for i, ps in enumerate(prio):\n        if len(ps) == 0:\n            mprio.append(i)\n    queue = []\n    for ps in prio:\n        for p in ps:\n            if p not in queue:\n                queue.append(p)\n    queue.sort()\n    for ps in prio:\n        for p in ps:\n            if p not in queue:\n                queue.append(p)\n    queue.sort()\n    queue = queue[:n]\n    if len(queue) > n:\n        return -1\n    else:\n        ans =''.join(list(map(str, queue)))\n        return ans\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    d = {int(x): [] for x in stdin.split()[:n]}\n    taken = set()\n    q = deque()\n    for k in range(m):\n        x, y = map(int, stdin.split())\n        d[x].append(y)\n        q.append(x)\n    c = stdin.split()[n:]\n    c = [int(x) for x in c]\n    while q:\n        x = q.popleft()\n        for y in d[x]:\n            if y not in taken:\n                taken.add(y)\n                q.append(y)\n    if len(taken) < m:\n        return '-1'\n    return''.join(map(str, c))\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    b = [[] for _ in range(n)]\n    for i in range(n):\n        for j in map(int, stdin.readline().split()):\n            b[i].append(j)\n    print(a, b)\n    pass\n\nsolution(\"6 2\\n5 3\\n0\\n0\\n0\\n2 2 1\\n1 4\\n1 5\")\n'''"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\"\"\"\nimport sys\nfrom collections import defaultdict, deque\n\nimport sys\nfrom collections import defaultdict, deque\n\nN, K = map(int, sys.stdin.readline().split())\ncourses = list(map(int, sys.stdin.readline().split()))\nqueue = deque()\nqueue.append([0, [courses[0]]])\n\ncourses = set(courses)\ncourses.remove(courses[0])\n\nfor i in range(1, N):\n    if i not in courses:\n        queue.append([i, []])\n\nwhile queue:\n    current_course, temp_list = queue.popleft()\n    if len(temp_list) == K:\n        break\n    for i in range(current_course + 1, N):\n        if i in courses and i not in temp_list:\n            temp_list.append(i)\n            queue.append([i, temp_list])"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return '-1'\n\"\"\"\n\ndef"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nn, k = map(int, stdin.readline().split())\nmain = set(map(int, stdin.readline().split()))\ncourses = [list(map(int, stdin.readline().split())) for _ in range(n)]\n\nmain_courses = [i for i in range(k) if i+1 not in main]"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # get data\n    num_courses = int(stdin[0])\n    num_main_courses = int(stdin[1])\n    courses = stdin[2:][:num_courses]\n    main_courses = [int(n) for n in stdin[2:][num_courses:]]\n\n    # process\n    course_sorted = sorted(set(main_courses))\n    course_sorted_dict = {course: i for i, course in enumerate(course_sorted)}\n\n    main_courses_sorted = [course_sorted_dict[course] for course in main_courses]\n    num_main_courses_sorted = len(main_courses_sorted)\n    solution = [course_sorted_dict[course] for course in courses]\n\n    # result\n    if num_main_courses_sorted == num_main_courses:\n        return''.join([str(s) for s in solution])\n\n    return '-1'\n"
    },
    {
        "number": 13,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\nfrom collections import deque\n\nclass Node:\n    def __init__(self, value):\n        self.value = value\n        self.children = []\n\n    def addChild(self, child):\n        self.children.append(child)\n\n    def getChildren(self):\n        return self.children\n    \n\ndef"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # stdin.readline()\n    # n, k = list(map(int, stdin.readline().split()))\n    # p = list(map(int, stdin.readline().split()))\n    n, k = 5, 3\n    p = [3, 1, 2]\n    t = 0\n    for i in range(k):\n        t ^= p[i]\n    for i in range(n - k):\n        t ^= i + 1\n    print(-1 if t!= 0 else \" \".join(map(str, range(1, n + 1))))\n\n\ndef"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split('\\n')[0].split()]\n    p = [int(x) for x in stdin.split('\\n')[1].split()]\n    t = [0] * (n - k)\n    if len(p) < k:\n        return -1\n    t.extend(p[-k:])\n    p = p[:-k]\n    p.sort()\n    print(' '.join(str(x) for x in t))\n    print(' '.join(str(x) for x in p))"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    lst = [int(x) for x in stdin.split()]\n    lst_copy = [x for x in lst]\n    lst_copy.sort()\n    index = lst_copy.index(lst[0])\n    if lst[0] < lst_copy[index+1]:\n        print('-1')\n    else:\n        for i in range(k):\n            lst.append(lst_copy.pop(index))\n        print(' '.join(map(str, lst)))"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    stdin = stdin.split('\\n')\n    n, k = map(int, stdin[0].split())\n    p = list(map(int, stdin[1].split()))\n    s = []\n    for i in range(k):\n        s.append(p[i])\n        p[i] = 'p'\n    print(p)\n    while p:\n        if s[-1] == p[0]:\n            s.pop()\n            p.pop(0)\n            if len(s) == 0:\n                break\n        else:\n            for i in range(len(s)):\n                if s[i] == p[0]:\n                    s[i] = 'p'\n                    p.pop(0)\n                    break\n        if len(p) == 0:\n            break\n    if len(p) == 0:\n        print(' '.join(s))\n    else:\n        print(-1)\n    return ''\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split('\\n')[0].split()))\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    b = []\n    s = []\n    for i in a:\n        if len(b) < k:\n            b.append(i)\n            s.append(i)\n        else:\n            s.append(b[0])\n            b[0] = i\n            b = b[1:] + [b[0]]\n            s = s[1:] + [s[0]]\n    #print(b, s)\n    #print(b, s)\n    if len(s) == 0:\n        return \" \".join(map(str, b))\n    for i in range(len(b)):\n        if b[i]!= s[i]:\n            if i + 1 < len(b):\n                s[i + 1] = s[i]\n            s[i] = b[i]\n            if len(s) > 0:\n                if i < len(b) - 1:\n                    s[i + 1] = b[i + 1]\n                else:\n                    s[i] = b[i]\n    print(s)\n    if len(b) == len(s):\n        return \" \".join(map(str, s))\n    if b < s:\n        s = list(map(lambda x: str(x), b))\n        print(' '.join(s))\n    else:\n        s = list(map(lambda x: str(x), s))\n        print(' '.join(s))\n    return \"\""
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split(' ')]\n    p = [int(i) for i in stdin.split(' ')[1:]]\n    p = p[:k]\n    if k == 1:\n        print('-1')\n    else:\n        for i in range(k, n):\n            if p[i] > p[i-1]:\n                p[i-1] = p[i] - 1\n            else:\n                p[i] = p[i-1] + 1\n    ans = []\n    for i in range(k):\n        ans.append(str(p[i]))\n    print(' '.join(ans))\n\n\ndef"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    line1 = stdin.readlines()[0]\n    line1 = line1.split()\n    n, k = int(line1[0]), int(line1[1])\n    line2 = stdin.readlines()[1]\n    line2 = line2.split()\n    nums = list(map(int, line2))\n    for i in range(k, n):\n        for j in range(i + 1, n):\n            if nums[i] > nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n                break\n    if nums[:k] == sorted(nums[:k]):\n        return \" \".join(list(map(str, nums[k:] + nums[:k])))\n    return -1\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # n, k = map(int, stdin.readline().split())\n    # p = list(map(int, stdin.readline().split()))\n    # result = list(range(1, n + 1))\n    # s = []\n    # for i in range(k):\n    #     s.append(result.pop(p[i] - 1))\n    # return''.join(map(str, s + result))\n\n    #k = 3\n    #n = 5\n    #p = [3, 1, 2]\n\n    n, k = map(int, input().split())\n    p = list(map(int, input().split()))\n    s = []\n    for i in range(k):\n        s.append(p.pop(0))\n    print(s, p)\n    while p:\n        j = p.index(max(p))\n        s.append(p.pop(j))\n        print(s, p)\n    if len(s)!= n:\n        return \"-1\"\n    else:\n        return \" \".join(map(str, s))\n\nprint(solution('5 2\\n3 4\\n'))"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    nums = list(map(int, stdin.split()))\n    s = []\n\n    for i in range(k):\n        while nums and s and nums[-1] > s[-1]:\n            s.pop()\n        s.append(nums.pop())\n    \n    print(' '.join([str(i) for i in s]))\n    return solution(stdin)\n"
    },
    {
        "number": 14,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    n, k = [int(x) for x in stdin.split(\" \")]\n    p = [int(x) for x in stdin.split(\" \")]\n    # init sorted array\n    s = [0] * (n - k)\n    for x in range(k):\n        s[x] = p[x]\n    sorted = False\n    # sort stack\n    while not sorted:\n        if p[0] > p[1]:\n            # swap with second element\n            p[0], p[1] = p[1], p[0]\n            s[0], s[1] = s[1], s[0]\n            sorted = False\n        else:\n            # remove first element\n            p = p[1:]\n            s = s[1:]\n            if len(p) == 1:\n                # print sorted\n                print(\" \".join(str(x) for x in p))\n                break\n            if len(s) == 0:\n                # print no answer\n                print(\"-1\")\n                break\n            if p[0] <= s[-1]:\n                # append current element to s\n                s.append(p[0])\n                p = p[1:]\n                sorted = False\n            elif p[0] > s[-1]:\n                # remove last element from s\n                s = s[:-1]\n                sorted = False\n\nprint(solution(stdin))\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n\n    a, b, c = [int(x) for x in stdin.split()]\n\n    return 'YES' if a == b or abs(a-b) == c or abs(a-b) == abs(c) else 'NO'\n\nprint(solution(input()))"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return \"YES\" if b in range(a, a + c + 1) or b in range(a - c, a) else \"NO\"\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a - c == b:\n        return \"YES\"\n    if a + c == b:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    s = list(range(a, b + 1))\n    if b in s:\n        print('YES')\n    else:\n        print('NO')\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split(' '))\n    if a % 2 == 1:\n        if b % 2 == 1:\n            if c == 0:\n                return \"YES\"\n            else:\n                return \"NO\"\n        else:\n            return \"NO\"\n    else:\n        if b == 0:\n            return \"YES\"\n        elif b % 2 == 1:\n            if c % 2 == 1:\n                return \"YES\"\n            else:\n                return \"NO\"\n        elif c % 2 == 1:\n            return \"NO\"\n        else:\n            return \"YES\"\n\n\ndef"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return \"YES\" if (b - c) in range(a, a + c) else \"NO\"\n'''\ndef"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    a, b, c = map(int, stdin.split())\n\n    if a > b:\n        if a - b < c:\n            return 'YES'\n    if b > a:\n        if b - a < c:\n            return 'YES'\n    return 'NO'\n\ndef"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if int(stdin.split(\" \")[0]) == int(stdin.split(\" \")[1]) or (int(stdin.split(\" \")[1])-int(stdin.split(\" \")[0])) % int(stdin.split(\" \")[2]) == 0 else \"NO\"\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(num) for num in stdin.split(' ')]\n    if (b - c) % a == 0 or (b + c) % a == 0:\n        return 'YES'\n    return 'NO'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 15,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = (int(x) for x in stdin.split(' '))\n    if b >= a:\n        return \"NO\"\n    else:\n        return \"YES\"\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    assert 0 <= len(stdin) <= 10 ** 9\n\n    stdin = stdin.split('\\n')\n    stdin = [line for line in stdin if line]\n    num = [int(line) for line in stdin]\n\n    res = 0\n    cnt_1, cnt_2, cnt_3, cnt_4 = num[0], num[1], num[2], num[3]\n\n    if cnt_1 + cnt_2 + cnt_3 + cnt_4 == 2 * (cnt_1 + cnt_2 + cnt_3 + cnt_4):\n        res += 1\n\n    return str(res)\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\"\"\"\n\n\ndef"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    the answer is false if the number of the brackets is even,\n    because then the parentheses will be not even\n    '''\n    stdin = stdin[1:-1]\n    cnt = 0\n    for i in stdin:\n        if i == '(':\n            cnt += 1\n        elif i == ')':\n            cnt -= 1\n        if cnt < 0:\n            return 0\n    return 1 if cnt == 0 else 0\n\n\ndef"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(input()))\n\n\n\nimport sys\n\ndef"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    num_chars = [0, 0, 0, 0]\n    for c in stdin:\n        if c == \"(\":\n            num_chars[0] += 1\n        elif c == \")\":\n            num_chars[1] += 1\n        elif c == \"1\":\n            num_chars[2] += 1\n        elif c == \"2\":\n            num_chars[3] += 1\n    if num_chars[0]!= num_chars[1] or num_chars[2]!= num_chars[3] or num_chars[0] < num_chars[2]:\n        return \"0\"\n    else:\n        return \"1\"\n\"\"\"\n\n\ndef"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    cnt_1, cnt_2, cnt_3, cnt_4 = map(int, stdin.split())\n\n    return str(1 if cnt_1 > 0 and cnt_3 + cnt_4 > 0 else 0)\n\ndef"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    res = []\n    for i in range(4):\n        if stdin[i] == '0':\n            res.append(0)\n        else:\n            res.append(1)\n    return 1 if all(res) else 0\n"
    },
    {
        "number": 16,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    cnt = [int(x) for x in stdin]\n    cnt.sort()\n    # print(cnt)\n    r, cnt = 0, len(cnt)\n    for i in range(cnt):\n        r += cnt[i]\n        cnt[i] = 2 * i + 1\n    if r % 2!= 0:\n        return 0\n    else:\n        return 1\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    numStanding = 0\n    stdin = stdin.split('\\n')\n    n, k, t = int(stdin[0].split()[0]), int(stdin[0].split()[1]), int(stdin[0].split()[2])\n    \n    for i in range(n):\n        if i < t:\n            if i % k == 0:\n                numStanding += 1\n        else:\n            if i % k == 0:\n                numStanding -= 1\n    return str(numStanding)\n    '''\n    n, k, t = map(int, stdin.split('\\n')[0].split())\n    return (n - (k - t % k) - 1) % n + 1\n\ndef"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k, t = map(int, stdin.split())\n    print(sum(1 for i in range(n-k+1, n+1) if i % (k+1) == t))\n    \n    #  print(n, k, t)\n    #  for i in range(n-k+1, n+1):\n    #      if i % (k+1) == t:\n    #          print(i)\n        \n    #  print(n % (k+1) == t)\n    #  print(n)\n    \n    #  print(n-k+1, n)\n    #  print(range(n-k+1, n+1))\n    \n    \n    #  for i in range(n-k+1, n+1):\n    #      if i % (k+1) == t:\n    #          print(i)\n    \n    #  print(n % (k+1) == t)\n    #  print(n)\n    \n    #  for i in range(n-k+1, n+1):\n    #      if i % (k+1) == t:\n    #          print(i)"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k, t = [int(n) for n in stdin.split(\" \")]\n    for i in range(t):\n        if i == t - 1:\n            print(n - k)\n        else:\n            print(f\"{n - k}^\")"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k, t = map(int, stdin.split(\" \"))\n    count = 0\n    for i in range(t, t - k, -1):\n        count += 1 if i == t else 2\n    return count\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k, t = [int(s) for s in stdin.split()]\n    return f\"{t - n % k}\"\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n, k, t = map(int, stdin.split())\n    return n - (t - k) % n - 1\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    # Please do not modify the input\n    stdin = stdin.split(\"\\n\")\n    n, k, t = int(stdin[0].split()[0]), int(stdin[0].split()[1]), int(stdin[0].split()[2])\n    # Please do not add any input/output statements to stdin and stdout.\n    \n    # Write your code here\n    \n    return 0\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    _, k, t = stdin.split()\n    k, t = int(k), int(t)\n    return (t // k) - (t // k // k)"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k, t = map(int, stdin.split())\n    s = 0\n    for i in range(1, k+1):\n        if (i % 2) == 0:\n            s = (s + n) % 2\n        else:\n            s = (s + 1) % 2\n        n = n // 2\n    return s\n"
    },
    {
        "number": 17,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    #get input\n    n, k, t = [int(i) for i in stdin.split(\" \")]\n\n    #initialize the variable\n    i = 0\n    j = 0\n\n    #loop through k times and update\n    while i < k:\n        if t % (n - k + i) == 0:\n            j += 1\n        i += 1\n\n    return j"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[0] + stdin[1:] + stdin[:-1]\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    t = []\n    u = []\n    for i in range(len(s)):\n        t.append(s.pop(0))\n        u.append(s.pop())\n    u.sort()\n    return \"\".join(t) + \"\".join(u)\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # \uc8fc\uc5b4\uc9c4 \ubb38\uc790\uc5f4\uc758 \uccab \ubc88\uc9f8 \uc6d0\uc18c\ub97c \ucd94\ucd9c\ud558\uace0,\n    # \ub450\ubc88\uc9f8 \uc6d0\uc18c\ub85c \uac00\uc9c0\ub294 \ubb38\uc790\uc5f4 t\ub97c \ub9cc\ub4e4\uc5b4\uc900\ub2e4.\n    # \uc138\ubc88\uc9f8 \uc6d0\uc18c\ub85c \uac00\uc9c0\ub294 \ubb38\uc790\uc5f4 u\ub97c \ub9cc\ub4e4\uc5b4\uc900\ub2e4.\n    # \ucd5c\uc885\uc801\uc73c\ub85c \uac00\uc9c0\ub294 \ubb38\uc790\uc5f4 u\ub294 \ub450 \uac00\uc9c0 \uc870\uac74\uc744 \ub9cc\uc871\ud574\uc57c\ud55c\ub2e4.\n    # 1. u\uc758 \ub9e8 \uccab\ubc88\uc9f8 \uc6d0\uc18c\uac00 \uac00\uc9c0\ub294 \ubb38\uc790\uc5f4 s\uc758 \uccab\ubc88\uc9f8 \uc6d0\uc18c\uc640 \uac19\uc740\uc9c0\n    # 2. u\uc758 \ub9c8\uc9c0\ub9c9 \uc6d0\uc18c\uac00 \uac00\uc9c0\ub294 \ubb38\uc790\uc5f4 t\uc758 \ub9c8\uc9c0\ub9c9 \uc6d0\uc18c\uc640 \uac19\uc740\uc9c0\n\n    # s\uc758 \uccab\ubc88\uc9f8 \uc6d0\uc18c\ub97c \ucd94\ucd9c\ud558\uace0,\n    # t\uc5d0 \ub2f4\ub294\ub2e4.\n    # t\uc758 \ub9c8\uc9c0\ub9c9 \uc6d0\uc18c\ub97c \ucd94\ucd9c\ud558\uace0,\n    # u\uc5d0 \ub2f4\ub294\ub2e4.\n    # \ucd5c\uc885\uc801\uc73c\ub85c \ucd94\ucd9c\ub41c s, t, u\ub97c \ubaa8\ub450 \ub9cc\ub4e0\ub2e4.\n\n    return"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[0] + ''.join(sorted(stdin[1:])) + stdin[-1]\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    stdin = stdin.split('\\n')\n    s = stdin[0]\n    \n    return s[0] + stdin[1] + s[-1]\n\n\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 18,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    s = stdin\n    t = \"\"\n    u = \"\"\n    t += s[0]\n    u += s[-1]\n    for _ in range(len(s) - 1):\n        t += t[0]\n        u += u[-1]\n    return min(t, u)\n\nprint(solution(\"cab\"))\nprint(solution(\"acdb\"))\n\n\n-----Explanation-----\n\nPetya came to a shop. He asked to the shopkeeper for two strings.\n\nPetya, one by one, received strings s and t.\n\nAfter that, he decided to play the game.\n\nHe always starts with s.\n\nFirst, he extracts the first character of the string s and adds this character to t.\n\nThen he extracts the last character of the string t and adds this character to u.\n\nAfter this, he always adds to u the first character of t.\n\nAfter that, he always adds to t the last character of u.\n\nDuring this game, Petya needs to get the string s and t empty and string u lexicographically minimal.\n\nHe had two moves: extract the first character of s and add it to t, and extract the last character of t and add it to u.\n\nThe result of the game is string u, which is lexicographically minimal.\n\nYou can assume that string s and string t have length in range [1; 10^5].\n\n\n------Time Limit------\n1\n\n------Memory Limit------\n256\n\n------Test Case Time Limit in seconds------\n1\n\n------Test Case Memory Limit in MB------\n256\n\n------Solution------\nclass Solution:\n    def play(self, s: str) -> str:\n        \n        t = \"\"\n        u = \"\"\n        t += s[0]\n        u += s[-1]\n        for _ in range(len(s) - 1):\n            t += t[0]\n            u += u[-1]\n        return min(t, u)\n\"\"\""
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    test_num = int(stdin[0])\n\n    for t in range(test_num):\n        num_of_plays = int(stdin[1+t*3])\n        plays = {}\n\n        for i in range(num_of_plays):\n            p_c = list(map(int, stdin[2+t*3+i].split()))\n            plays[p_c[0]] = plays.get(p_c[0], 0) + 1\n\n            if plays[p_c[0]] > p_c[1]:\n                print(\"NO\")\n                break\n\n        else:\n            print(\"YES\")\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('2\\n2\\n5\\n10')\n    'YES'\n    >>> solution('3\\n1\\n0\\n0')\n    'NO'\n    >>> solution('2\\n4\\n4\\n4')\n    'NO'\n    \"\"\"\n    n, stats = int(stdin), []\n    for i in range(n):\n        p, c = int(stdin), int(stdin)\n        stats.append((p, c))\n    stats.sort(key=lambda x: x[1])\n    for i in range(1, n):\n        if stats[i - 1][0] < stats[i][0] and stats[i - 1][1] < stats[i][1]:\n            return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 3\n   ... 1 0\n   ... 1 1\n   ... 1 2\n   ... 2\n   ... 1 0\n   ... 1000 3\n   ... 4\n   ... 10 1\n   ... 15 2\n   ... 10 2\n   ... 15 2\n   ... 1\n   ... 7654 432\n   ... 2\n   ... 4 4\n   ... 4 3\n   ... 5\n   ... 0 0\n   ... 1 0\n   ... 1 0\n   ... 1 0\n   ... 1 0\n   ... 1 0\n   ... ''')\n    'YES'\n    \"\"\"\n   ...\n   ...\n\ndef"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    cases = int(stdin[0])\n    level = int(stdin[1])\n    level_stats = []\n    for case in range(cases):\n        level_stats.append(int(stdin[case+2].split(' ')[0]))\n        for n in range(level):\n            level_stats.append(stdin[case+2+n+1].split(' '))\n\n    level_stats = sorted(level_stats, key=lambda x: int(x[0]))\n    print(level_stats)\n    pass\n\n\nsolution(stdin)\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Processes a single line of input.\n\n    :param stdin: The input as a single line.\n    :return: The answer to the problem.\n    \"\"\"\n\n    # Get the input.\n    n = int(stdin)\n\n    # This will become the return value of the function.\n    result = None\n\n    # Get the stats.\n    stats = [tuple(map(int, stdin.split())) for _ in range(n)]\n\n    # Iterate over the stats.\n    for i in range(1, n):\n\n        # Check if the stats are correct.\n        if stats[i][1] < stats[i - 1][1] + 1 or stats[i][1] > stats[i - 1][1] + 1:\n            result = \"NO\"\n            break\n\n        # Check if the stats are correct.\n        if stats[i][0] < stats[i - 1][0] + 1 or stats[i][0] > stats[i - 1][0] + 1:\n            result = \"NO\"\n            break\n\n    # Return the result.\n    return result\n\n\ndef"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n0 0\\n1 0\\n1 0\\n1 0\\n2\\n1 0\\n1 0\\n1 0\\n1 0\\n0 0\\n0 0\")\n    'NO'\n    >>> solution(\"4\\n0 0\\n1 1\\n1 2\\n2\\n1 0\\n1 0\\n1 0\\n1 0\\n0 0\\n0 0\")\n    'YES'\n    >>> solution(\"5\\n0 0\\n0 0\\n1 0\\n1 0\\n0 0\\n1 0\\n1 0\\n1 0\\n1 0\\n0 0\")\n    'NO'\n    \"\"\"\n    n_moments = int(stdin.readline())\n    moments = []\n    for i in range(n_moments):\n        m, c = map(int, stdin.readline().split())\n        moments.append((m, c))\n    # print(moments)\n\n    previous_m, previous_c = 0, 0\n    for m, c in moments:\n        if m < previous_m:\n            return \"NO\"\n        if m > previous_m + 1:\n            return \"NO\"\n        if c < previous_c:\n            return \"NO\"\n        if c > previous_c + 1:\n            return \"NO\"\n        previous_m, previous_c = m, c\n    return \"YES\"\n\n\ndef"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # for each test case\n    T = int(stdin)\n    for i in range(T):\n        # for each moment of time\n        for j in range(int(stdin)):\n            # split into play, clear\n            play, clear = int(stdin.split()[j])\n            # if play == clear:\n            #     return \"NO\"\n        return \"YES\"\n    \n    return \"NO\"\n"
    },
    {
        "number": 19,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Task:\n    The description of Polycarp's level is so easy.\n    He has recently created a new level in this cool new game Berlio Maker 85 and uploaded it online. Now players from all over the world can try his level.\n    All levels in this game have two stats to them: the number of plays and the number of clears. So when a player attempts the level, the number of plays increases by $1$. If he manages to finish the level successfully then the number of clears increases by $1$ as well. Note that both of the statistics update at the same time (so if the player finishes the level successfully then the number of plays will increase at the same time as the number of clears).\n    Polycarp is very excited about his level, so he keeps peeking at the stats to know how hard his level turns out to be.\n    So he peeked at the stats $n$ times and wrote down $n$ pairs of integers \u2014 $(p_1, c_1), (p_2, c_2), \\dots, (p_n, c_n)$, where $p_i$ is the number of plays at the $i$-th moment of time and $c_i$ is the number of clears at the same moment of time. The stats are given in chronological order (i.e. the order of given pairs is exactly the same as Polycarp has written down).\n    Between two consecutive moments of time Polycarp peeked at the stats many players (but possibly zero) could attempt the level.\n    Finally, Polycarp wonders if he hasn't messed up any records and all the pairs are correct. If there could exist such a sequence of plays (and clears, respectively) that the stats were exactly as Polycarp has written down, then he considers his records correct.\n    Help him to check the correctness of his records.\n    For your convenience you have to answer multiple independent test cases.\n    Input:\n    The first line contains a single integer $T$ $(1 \\le T \\le 500)$ \u2014 the number of test cases.\n    The first line of each test case contains a single integer $n$ ($1 \\le n \\le 100$) \u2014 the number of moments of time Polycarp peeked at the stats.\n    Each of the next $n$ lines contains two integers $p_i$ and $c_i$ ($0 \\le p_i, c_i \\le 1000$) \u2014 the number of plays and the number of clears of the level at the $i$-th moment of time.\n    Note that the stats are given in chronological order (i.e. the order of given pairs is exactly the same as Polycarp has written down).\n    Output:\n    For each test case print a single line.\n    If there could exist such a sequence of plays (and clears, respectively) that the stats were exactly as Polycarp has written down, then print \"YES\".\n    Otherwise, print \"NO\".\n    You can print each letter in any case (upper or lower).\n    \"\"\"\n    n = int(stdin.readline())\n    for _ in range(n):\n        stats = []\n        n_stats = int(stdin.readline())\n        for _ in range(n_stats):\n            stats.append(list(map(int, stdin.readline().split())))\n        stats = sorted(stats, key=lambda x: x[0])\n        plays = [stats[0][0]]\n        clears = [stats[0][1]]\n        for i in range(1, n_stats):\n            plays.append(stats[i][0] + plays[-1])\n            clears.append(stats[i][1] + clears[-1])\n        for i in range(1, n_stats):\n            if not (plays[i] == plays[i - 1] and clears[i] == clears[i - 1]):\n                print(\"NO\")\n                break\n        else:\n            print(\"YES\")\n\n\nprint(solution(stdin=input()))\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin\n    # input = \"13:31\"\n    # input = \"23:59\"\n    # input = \"05:39\"\n    # input = \"06:18\"\n\n    print(get_sleep_time(input))\n    return input\n\ndef"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    time_as_list = list(stdin.split(\":\"))\n    hours = int(time_as_list[0])\n    minutes = int(time_as_list[1])\n    new_hours = hours\n    new_minutes = minutes\n    count = 0\n    while True:\n        if new_hours < 10:\n            new_hours = \"0\" + str(new_hours)\n        else:\n            new_hours = str(new_hours)\n        if new_minutes < 10:\n            new_minutes = \"0\" + str(new_minutes)\n        else:\n            new_minutes = str(new_minutes)\n        if (int(new_hours) * 100 + int(new_minutes)) == (int(time_as_list[0]) * 100 + int(time_as_list[1])):\n            break\n        new_minutes += 1\n        if new_minutes == 60:\n            new_minutes = 0\n            new_hours += 1\n        count += 1\n    return count\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s, e = stdin.split(':')\n    m = int(e)\n    h = int(s)\n    if h < 12:\n        if m < 12:\n            return m - m\n        else:\n            return (m - m) - 1\n    else:\n        if m < 12:\n            return 60 - m\n        else:\n            return (60 - m) - 1\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin[:2]) + int(stdin[-2:]))"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    time = stdin.split(\":\")\n    hour = int(time[0])\n    minute = int(time[1])\n    \n    if hour == 12 and minute == 0:\n        return 0\n    \n    if hour == 12:\n        hour = 0\n    if minute == 0:\n        return hour * 60 + (hour + 1) * 60\n    \n    return (hour + minute // 60) * 60 + (hour + minute % 60)\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    hh, mm = map(int, stdin.split(\":\"))\n    return min((24 - hh) * 60 + mm - ((hh + mm) % 60) - 1, hh * 60 + mm - ((hh + mm) % 60) - 1)\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    # create a function to process the time\n    def process(strtime):\n        time = strtime.split(':')\n        hour = int(time[0])\n        minute = int(time[1])\n        \n        if minute > 59:\n            hour += 1\n            minute = minute % 60\n        \n        return hour, minute\n    \n    # check if the time is a palindrome\n    def ispalindrome(time):\n        strtime = '{:02d}:{:02d}'.format(hour, minute)\n        if strtime == strtime[::-1]:\n            return True\n        else:\n            return False\n    \n    # time variables\n    hour = stdin[:2]\n    minute = stdin[3:5]\n    \n    # check if the input time is a palindrome\n    if ispalindrome(stdin):\n        return 0\n    \n    # check the output\n    hour, minute = process(stdin)\n    if minute > 59:\n        hour += 1\n        minute = minute % 60\n    \n    # return the output\n    return '{:02d}'.format(hour * 60 + minute)\n"
    },
    {
        "number": 20,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    h, m = map(int, stdin.split(\":\"))\n    return str(h * 60 + m - m % 60 + 60 * (m % 60 > 0) + 1)\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 5 1 3 2\")\n    '3'\n    >>> solution(\"6 5 4 3 2 1\")\n    '5'\n    >>> solution(\"7 6 5 4 3 2 1\")\n    '6'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    d = 0\n    m = float('inf')\n    for i in range(n-1):\n        if a[i] < a[i+1]:\n            d = max(d, a[i+1]-a[i])\n        else:\n            d = max(d, a[i]-a[i+1])\n    m = min(m, d)\n    return str(m)\n\"\"\"\nfrom math import inf\nfrom random import randint\n\ndef"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Return the minimum distance between the minimum and the maximum elements.\n    '''\n    pass\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Get the input and return the answer\"\"\"\n    # Get the input\n    # and initialize the result\n    n = int(stdin)\n    numbers = list(map(int, stdin.split('\\n')[0].split(' ')))\n\n    # Get the answer\n    result = 0\n    numbers.sort()\n    result = numbers[n - 1] - numbers[0]\n\n    return str(result)\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    determines the maximum distance between the minimum and maximum\n    elements given the initial array\n    >>> solution('5\\n4 5 1 3 2')\n    3\n    >>> solution('6\\n6 5 4 3 2 1')\n    5\n    >>> solution('7\\n1 6 5 3 4 7 2')\n    6\n    '''\n    n = int(stdin.readline().strip())\n    lst = list(map(int, stdin.readline().strip().split()))\n    min_pos = lst.index(min(lst))\n    max_pos = lst.index(max(lst))\n    return abs(min_pos - max_pos)\n    \n\n    \n    \n        \n        "
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    time: O(n)\n    space: O(n)\n    \"\"\"\n    n = int(stdin.split()[0])\n    a = [int(i) for i in stdin.split()[1:]]\n    \n    left_index = 0\n    right_index = n - 1\n    max_diff = 0\n    while left_index < right_index:\n        left = a[left_index]\n        right = a[right_index]\n        max_diff = max(max_diff, abs(left - right))\n        if left > right:\n            right_index -= 1\n        else:\n            left_index += 1\n        \n    return str(max_diff)\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\nreturn \"\"\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return a sequence of the elements of a permutation where the minimum is at the end and the maximum is at the beginning\"\"\"\n    \n    return stdin\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5\\n4 5 1 3 2\")\n    '3'\n    >>> solution(\"7\\n1 6 5 3 4 7 2\")\n    '6'\n    >>> solution(\"6\\n6 5 4 3 2 1\")\n    '5'\n    \"\"\"\n    n = int(stdin.split(\"\\n\")[0])\n    a = list(map(int, stdin.split(\"\\n\")[1].split()))\n    a_ = a.copy()\n    a_.sort()\n    return str(max(abs(a[0] - a_[0]), abs(a[-1] - a_[-1])))\n"
    },
    {
        "number": 21,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split('\\n')\n    n = int(data[0])\n    nums = [int(x) for x in data[1].split(' ')]\n\n    min_max_diff = n\n\n    i = 0\n    while i < n - 1:\n        current_diff = abs(nums[i] - nums[i + 1])\n        if current_diff < min_max_diff:\n            min_max_diff = current_diff\n        i += 1\n\n    return min_max_diff\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = [x for x in stdin]\n    a.append(stdin[0])\n    b = a.copy()\n    b.reverse()\n    if a == b:\n        return 'TAK'\n    return 'NIE'\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    length = len(stdin)\n    if length % 2!= 0:\n        return \"NIE\"\n    if stdin[:length // 2] == stdin[length // 2:][::-1]:\n        return \"TAK\"\n    return \"NIE\""
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    print('TAK') if stdin == stdin[::-1] else print('NIE')\n    \n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return 'TAK' if stdin == stdin[::-1] else 'NIE'\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    if stdin[:len(stdin)//2] == stdin[len(stdin)//2:] and stdin[:len(stdin)//2] == stdin[len(stdin)//2:][::-1]:\n        return \"TAK\"\n    else:\n        return \"NIE\"\nprint(solution(input()))\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[:len(stdin) // 2]\n    if s[::-1] == s:\n        return \"TAK\"\n    return \"NIE\"\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"TAK\" if stdin[::-1] == stdin else \"NIE\"\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    stdin = list(stdin)\n    print(stdin)\n    if len(stdin) % 2 == 0:\n        if stdin[:int(len(stdin) / 2)] == stdin[int(len(stdin) / 2):][::-1]:\n            return \"TAK\"\n        else:\n            return \"NIE\"\n    else:\n        if stdin[:int(len(stdin) / 2)] == stdin[int(len(stdin) / 2)+1:][::-1]:\n            return \"TAK\"\n        else:\n            return \"NIE\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    s = s.lower()\n    s = ''.join(filter(str.isalpha, s))\n    if s == s[::-1]:\n        print(\"TAK\")\n    else:\n        print(\"NIE\")"
    },
    {
        "number": 22,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"TAK\" if stdin[:(len(stdin)//2)] == stdin[-1::-1] else \"NIE\"\n\n\nprint(solution(\"oXoxoXo\"))\nprint(solution(\"bod\"))\nprint(solution(\"ER\"))"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    # change 1 to 0\n    a = a if a % 10 else a - 9\n    while a > b:\n        if a % 10 == 0:\n            a //= 10\n        else:\n            a = (a // 10) * 10 + a % 10 - 1\n        if a > b:\n            a = a if a % 10 == 0 else a - 9\n    return str(a)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    a = list(map(int, str(a)))\n    b = int(b)\n    for i in range(len(a), 0, -1):\n        for j in range(len(a)):\n            if a[j]!= a[j + i]:\n                a[j], a[j + i] = a[j + i], a[j]\n                if int(''.join(list(map(str, a[0:i])))) > b:\n                    return ''.join(list(map(str, a[0:i])))\n                break\n    return ''.join(list(map(str, a)))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    numbers = stdin.split('\\n')\n    a = int(numbers[0])\n    b = int(numbers[1])\n\n    numbers = [x for x in str(a)]\n    # print(numbers)\n    # print(set(numbers))\n    perm = list(itertools.permutations(numbers, len(numbers)))\n    # print(perm)\n\n    max = 0\n    for x in perm:\n        temp = int(''.join(x))\n        if temp <= b and temp > max:\n            max = temp\n    \n    print(max)\n    return str(max)\n\n\ndef"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin\n    b = int(stdin)\n    while True:\n        a = [int(x) for x in str(a)]\n        if max(a) <= b:\n            break\n        a = max(a) * 10 + max(a)\n    a = [str(x) for x in str(a)]\n    a.sort(reverse=True)\n    print(\"\".join(a))\n    return \"\".join(a)\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a > b:\n        return None\n\n    ans = max(map(int, str(a)))\n    while ans <= b:\n        if ans > 9:\n            ans = ans - 10\n        else:\n            ans *= 10\n    return str(ans)\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    s = str(a)\n    permutation = [0] * len(s)\n    digits = [int(c) for c in s]\n\n    def permute(k):\n        if k == len(permutation):\n            res = 0\n            for c in permutation:\n                res = res * 10 + c\n            if res <= b:\n                return True\n            else:\n                return False\n        else:\n            for i in range(len(digits)):\n                if not permute(k + 1):\n                    return False\n                permutation[k] = digits[i]\n                digits[i], digits[k] = digits[k], digits[i]\n                if permute(k + 1):\n                    return True\n\n    permute(0)\n    return \"\".join([str(c) for c in permutation])\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(c) for c in stdin.split()]\n    n = 1\n    while a > n:\n        n *= 10\n    r = [int(c) for c in str(n)]\n    while r and r[-1] > b:\n        r.pop()\n    while r and r[0] == 0:\n        r.pop(0)\n    r.sort()\n    return ''.join(str(c) for c in r)\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    number = stdin\n    count = 0\n    number_length = len(number)\n    i = 0\n    while i < number_length:\n        if i == 0:\n            if number[i] == \"0\":\n                number_length = number_length - 1\n                continue\n        if number[i] > \"9\":\n            count = count + 1\n            continue\n        if i == number_length - 1:\n            number = number + \"0\" * count\n            number_length = number_length + count\n            break\n        if number[i] <= number[i + 1]:\n            number = number[:i] + str(int(number[i]) + 1) + number[i + 1:]\n            break\n        i = i + 1\n    return number\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split('\\n'))\n    if a < b:\n        a, b = b, a\n    a = sorted(str(a))\n    a = ''.join(a[i] if a[i] not in ['0', '1'] else '' for i in range(len(a)))\n    result = ''\n    while len(result) < len(a):\n        result = ''.join(a[i] for i in range(len(a)))\n        if int(result) <= b:\n            break\n        result = result[1:] + result[0]\n        if int(result) <= b:\n            break\n    return result\n"
    },
    {
        "number": 23,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    a_str = str(a)\n    b_str = str(b)\n    a_permuted = []\n    for i in range(len(a_str)):\n        if a_str[i] not in a_permuted:\n            a_permuted.append(a_str[i])\n    for i in range(len(b_str)):\n        if b_str[i] not in a_permuted:\n            a_permuted.append(b_str[i])\n    return ''.join(a_permuted)\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    matrix = [list(line) for line in stdin.split()]\n    alice_crosses = sum([row.count('X') for row in matrix])\n    bob_noughts = sum([row.count('O') for row in matrix])\n    if alice_crosses > bob_noughts:\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\""
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n, m = len(lines), len(lines[0])\n    crosses = 0\n    noughts = 0\n    crosses_dict = dict()\n    noughts_dict = dict()\n    crosses_list = []\n    noughts_list = []\n    for i in range(n):\n        for j in range(m):\n            if lines[i][j] == 'X':\n                crosses += 1\n                if i in crosses_dict.keys():\n                    crosses_dict[i] += 1\n                else:\n                    crosses_dict[i] = 1\n                if j in crosses_dict.keys():\n                    crosses_dict[j] += 1\n                else:\n                    crosses_dict[j] = 1\n            if lines[i][j] == 'O':\n                noughts += 1\n                if i in noughts_dict.keys():\n                    noughts_dict[i] += 1\n                else:\n                    noughts_dict[i] = 1\n                if j in noughts_dict.keys():\n                    noughts_dict[j] += 1\n                else:\n                    noughts_dict[j] = 1\n    for i in range(n):\n        for j in range(m):\n            if lines[i][j] == '.':\n                crosses_list.append(crosses_dict[i])\n                noughts_list.append(noughts_dict[i])\n    # print(crosses_dict, noughts_dict, crosses_list, noughts_list)\n    if noughts >= crosses:\n        return 'NO'\n    for i in range(5):\n        for j in range(10):\n            if i in crosses_dict.keys() and crosses_dict[i] == 5:\n                if noughts_list[j] >= 5:\n                    return 'NO'\n            if i in noughts_dict.keys() and noughts_dict[i] == 5:\n                if crosses_list[j] >= 5:\n                    return 'NO'\n            if i in crosses_dict.keys() and crosses_dict[i] == 5 and noughts_list[j] >= 5:\n                return 'NO'\n            if i in noughts_dict.keys() and noughts_dict[i] == 5 and crosses_list[j] >= 5:\n                return 'NO'\n    return 'YES'\n\ndef"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    field = []\n    n = len(stdin)\n    for i in range(0, n, 10):\n        field.append(stdin[i:i + 10])\n    for i in range(10):\n        if field[i].count('X') == field[i].count('O'):\n            return 'NO'\n    print(field)\n    return 'YES'"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    return \"YES\" if stdin.count('.') >= 3 else \"NO\"\n    '''\n    in_matrix = [list(line) for line in stdin.split('\\n')]\n    rows = len(in_matrix)\n    cols = len(in_matrix[0])\n    horizontal_count = 0\n    for i in range(rows):\n        for j in range(cols):\n            if in_matrix[i][j] == 'X':\n                horizontal_count += 1\n    diag_count_1 = 0\n    diag_count_2 = 0\n    for i in range(rows):\n        for j in range(cols):\n            if in_matrix[i][j] == 'X':\n                if j + 4 < cols and in_matrix[i][j+1] == '.' and in_matrix[i][j+2] == '.' and in_matrix[i][j+3] == '.' and in_matrix[i][j+4] == '.':\n                    diag_count_1 += 1\n                if i + 4 < rows and in_matrix[i+1][j] == '.' and in_matrix[i+2][j] == '.' and in_matrix[i+3][j] == '.' and in_matrix[i+4][j] == '.':\n                    diag_count_1 += 1\n    for i in range(rows):\n        for j in range(cols):\n            if in_matrix[i][j] == 'X':\n                if j + 4 < cols and in_matrix[i][j+1] == '.' and in_matrix[i][j+2] == '.' and in_matrix[i][j+3] == '.' and in_matrix[i][j+4] == '.':\n                    diag_count_2 += 1\n                if i + 4 < rows and in_matrix[i+1][j] == '.' and in_matrix[i+2][j] == '.' and in_matrix[i+3][j] == '.' and in_matrix[i+4][j] == '.':\n                    diag_count_2 += 1\n    return 'YES' if horizontal_count >= 2 or (diag_count_1 >= 2 or diag_count_2 >= 2) else 'NO'\n\n\nprint(solution('''XX.XX.....\n..OO......\n..........\n..........\n..........\n..........\n..........\n..........\n..........\n..........\n'''))\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    table = [list(stdin[i: i + 10]) for i in range(0, len(stdin), 10)]\n    for i in range(10):\n        if 'X' not in table[i]:\n            print('YES')\n            return\n    for i in range(10):\n        if 'O' not in [table[j][i] for j in range(10)]:\n            print('YES')\n            return\n    if 'X' not in [table[i][i] for i in range(10)]:\n        print('YES')\n        return\n    if 'X' not in [table[i][9 - i] for i in range(10)]:\n        print('YES')\n        return\n    print('NO')\n    return\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if stdin.count('X') - stdin.count('O') >= 5 else 'NO'\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    matrix = list()\n    for i in range(len(lines)):\n        line = list()\n        for char in lines[i]:\n            line.append(char)\n        matrix.append(line)\n    crosses = 0\n    noughts = 0\n    for i in range(len(matrix)):\n        for j in range(len(matrix)):\n            if matrix[i][j] == 'X':\n                crosses += 1\n            elif matrix[i][j] == 'O':\n                noughts += 1\n    if crosses > noughts + 1:\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 24,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"XX.XX.....\\n.....OOOO.\\n..........\\n..........\\n..........\\n..........\\n..........\\n..........\\n..........\\n..........\")\n    'YES'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(\" \")]\n    print(n, k)\n    \n    return n, k\n\"\"\"\n\n\ndef"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return None\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    row_count, col_count = map(int, stdin.split())\n\n    if row_count < 1 or col_count < 1:\n        return -1\n    matrix = []\n    # create a matrix\n    for row in range(row_count):\n        matrix.append([0] * col_count)\n\n    # fill a matrix with k ones\n    row_idx = row_count // 2\n    col_idx = col_count // 2\n    for i in range(1, k + 1):\n        matrix[row_idx][col_idx] = i\n        col_idx += 1\n        if col_idx == col_count:\n            row_idx -= 1\n            col_idx = col_count - 1\n    # print the result\n    for i in range(row_count):\n        for j in range(col_count):\n            print(matrix[i][j], end=\" \")\n        print()\n    return matrix\n\nsolution(input())\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    mat = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        mat[i][i] = 1\n\n    for i in range(k):\n        x, y = map(int, stdin.split())\n        mat[x - 1][y - 1] = 1\n\n    for row in range(n):\n        for col in range(n):\n            if col < row:\n                break\n            elif mat[row][col] == 1:\n                for new_col in range(col, -1, -1):\n                    if mat[row][new_col] == 1:\n                        mat[row][col] = 1\n                        mat[col][row] = 1\n                        break\n    for row in range(n):\n        mat[row] =''.join(map(str, mat[row]))\n    return '\\n'.join(mat)\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    if k > n * (n - 1) // 2:\n        return -1\n    ret = []\n    for i in range(n):\n        ret.append([0] * n)\n    col = n - 1\n    row = n - 1\n    num = 1\n    while k > 0:\n        ret[row][col] = num\n        col += 1\n        k -= 1\n        num += 1\n        if col == n and row > 0:\n            col = 0\n            row -= 1\n        elif col == n and row == 0:\n            col = 0\n            row = n - 1\n            num = 1\n    return str(ret)[1:-1]\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    m = [stdin.split(\"\\n\")]\n    n, k = [int(i) for i in m[0][0].split()]\n    print(n, k)\n    matrix = [[0 for j in range(n)] for i in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                matrix[i][j] = k\n    print(matrix)"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    #Your code here\n    pass\n"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    m, n = list(map(int, stdin.split()))\n    # a = [[0] * n] * m\n    a = [[0 for _ in range(n)] for _ in range(m)]\n    for i in range(m):\n        for j in range(n):\n            if i < j:\n                a[i][j] = 1\n            elif i > j:\n                a[i][j] = 0\n            else:\n                a[i][j] = a[j][i] = 1\n    return''.join([' '.join([str(num) for num in row]) for row in a])"
    },
    {
        "number": 25,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n,k = [int(x) for x in stdin.split(\" \")]\n    matrix = []\n    for i in range(n):\n        matrix.append([0]*n)\n    for i in range(n):\n        matrix[i][i] = k\n        matrix[i][n-i-1] = k\n        k -= 1\n    print(matrix)\n    return matrix\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"The solution to the exercise.\"\"\"\n    x, y, z = [float(x) for x in stdin.split()]\n    \n    a1 = x ** y ** z\n    a2 = x ** z ** y\n    a3 = (x ** y) ** z\n    a4 = (x ** z) ** y\n    a5 = y ** x ** z\n    a6 = y ** z ** x\n    a7 = (y ** x) ** z\n    a8 = (y ** z) ** x\n    a9 = z ** x ** y\n    a10 = z ** y ** x\n    a11 = (z ** x) ** y\n    a12 = (z ** y) ** x\n    \n    m = max(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12)\n    c = min(range(1, 13), key=lambda x: m / a1 ** x)\n    \n    print('a'[:c] + '^' + 'b'[:c] + '^' + 'c'[:c] if m == a1 else '(a'[:c] + '^' + 'b'[:c] + ')^' + 'c'[:c] if m == a2 else '(a'[:c] + '^' + 'c'[:c] + ')^' + 'b'[:c] if m == a3 else '(a'[:c] + ')^' + 'b'[:c] + '^' + 'c'[:c] if m == a4 else '(a'[:c] + '^' + 'c'[:c] + ')^' + 'b'[:c] if m == a5 else 'b'[:c] + '^' + 'a'[:c] + '^' + 'c'[:c] if m == a6 else 'b'[:c] + '^' + 'c'[:c] + '^' + 'a'[:c] if m == a7 else '(b'[:c] + '^' + 'a'[:c] + ')^' + 'c'[:c] if m == a8 else '(b'[:c] + ')^' + 'a'[:c] + '^' + 'c'[:c] if m == a9 else 'c'[:c] + '^' + 'a'[:c] + '^' + 'b'[:c] if m == a10 else 'c'[:c] + '^' + 'b'[:c] + '^' + 'a'[:c] if m == a11 else 'c'[:c] + '^' + 'b'[:c] + '^' + 'a'[:c] if m == a12 else'm')\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(float, stdin.split())\n    return max((x**y**z), (x**z**y), (x**y)**z, (x**z)**y, (y**x**z), (y**z**x), (y**x)**z, (y**z)**x, (z**x**y), (z**y**x), (z**x)**y, (z**y)**x)\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = [float(i) for i in stdin.split()]\n    a = max(x**y**z, x**z**y, x**y**z, x**z**y, y**x**z, y**z**x, y**x**z, y**z**x, z**x**y, z**y**x, z**x**y, z**y**x)\n    i = a.index(a.pop(a.index(max(a))))+1\n    return 'x^y^z' if i==1 else '(x^y)^z' if i==2 else 'x^z^y' if i==3 else '(x^z)^y' if i==4 else 'y^x^z' if i==5 else 'y^z^x' if i==6 else '(y^x)^z' if i==7 else '(y^z)^x' if i==8 else 'z^x^y' if i==9 else 'z^y^x' if i==10 else '(z^x)^y' if i==11 else '(z^y)^x'\n\n\n\n\n\ndef"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds and prints the expression that has the maximum value among x^{y}^{z}, x^{z}^{y}, (x^{y})^{z}, (x^{z})^{y}, y^{x}^{z}, y^{z}^{x}, (y^{x})^{z}, (y^{z})^{x}, z^{x}^{y}, z^{y}^{x}, (z^{x})^{y}, (z^{y})^{x}.\"\"\"\n    x, y, z = list(map(float, stdin.split()))\n    # list comprehension\n    # ex_1 = (x**y)**z\n    # ex_2 = (x**z)**y\n    # ex_3 = (x**y)**z\n    # ex_4 = (x**z)**y\n    # ex_5 = y**(x**z)\n    # ex_6 = y**(z**x)\n    # ex_7 = (y**(x**z))**z\n    # ex_8 = (y**(z**x))**x\n    # ex_9 = z**(x**y)\n    # ex_10 = z**(y**x)\n    # ex_11 = (z**(x**y))**y\n    # ex_12 = (z**(y**x))**x\n    # print(max([ex_1, ex_2, ex_3, ex_4, ex_5, ex_6, ex_7, ex_8, ex_9, ex_10, ex_11, ex_12]))\n    return max([(x**y)**z, (x**z)**y, (x**y)**z, (x**z)**y, y**(x**z), y**(z**x), (y**(x**z))**z, (y**(z**x))**x, z**(x**y), z**(y**x), ((z**(x**y))**y), ((z**(y**x))**x)])\nsolution(\"1.1 3.4 2.5\")"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(float, stdin.split())\n    if x > y: x, y = y, x\n    if y > z: y, z = z, y\n    if x == y == z: return x**y**z\n    return 'z^y^x' if x**y**z < y**x**z else '(x^y)^z' if x**y < y**x else 'x^y^z'\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = [float(i) for i in stdin.split()]\n    max_a = max((x ** y ** z, x ** z ** y, (x ** y) ** z, (x ** z) ** y, y ** x ** z, y ** z ** x, (y ** x) ** z, (y ** z) ** x, z ** x ** y, z ** y ** x))\n    ans = ''\n    for i in range(1, 13):\n        if max_a == x ** y ** z:\n            ans = 'x^y^z'\n            break\n        elif max_a == x ** z ** y:\n            ans = 'x^z^y'\n            break\n        elif max_a == (x ** y) ** z:\n            ans = '(x^y)^z'\n            break\n        elif max_a == (x ** z) ** y:\n            ans = 'x^(y^z)'\n            break\n        elif max_a == y ** x ** z:\n            ans = 'y^x^z'\n            break\n        elif max_a == y ** z ** x:\n            ans = 'y^(z^x)'\n            break\n        elif max_a == (y ** x) ** z:\n            ans = 'y^(x^z)'\n            break\n        elif max_a == (y ** z) ** x:\n            ans = 'y^(z^x)'\n            break\n        elif max_a == z ** x ** y:\n            ans = 'z^x^y'\n            break\n        elif max_a == z ** y ** x:\n            ans = 'z^y^x'\n            break\n        elif max_a == (z ** x) ** y:\n            ans = '(z^x)^y'\n            break\n        elif max_a == (z ** y) ** x:\n            ans = '(z^y)^x'\n            break\n    return ans\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = [float(i) for i in stdin.split(' ')]\n    x, y, z = sorted([x, y, z])\n    m = max([x**y**z, x**z**y, (x**y)**z, (x**z)**y, y**x**z, y**z**x, (y**x)**z, (y**z)**x, z**x**y, z**y**x, (z**x)**y, (z**y)**x])\n    for i in range(1, 13):\n        if (x**y**z, x**z**y, (x**y)**z, (x**z)**y, y**x**z, y**z**x, (y**x)**z, (y**z)**x, z**x**y, z**y**x, (z**x)**y, (z**y)**x)[i] == m:\n            return 'z^y^x' if i < 12 else 'x^y^z' if i == 12 else '(x^y)^z' if i == 11 else '(x^z)^y' if i == 10 else 'y^x^z' if i == 9 else 'y^z^x' if i == 8 else '(y^x)^z' if i == 7 else '(y^z)^x' if i == 6 else 'z^x^y' if i == 5 else 'z^y^x' if i == 4 else '(z^x)^y' if i == 3 else '(z^y)^x'\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(float, stdin.split())\n    x, y, z = sorted([x, y, z])\n    return \"{}^{}^{}\".format(x ** y ** z, x ** z ** y, \"(x^y)^z\")\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(float, stdin.split())\n    values = {'x': x, 'y': y, 'z': z}\n\n    # m is maximum value among all combinations of x, y and z\n    # c is index of m which is minimum\n    m = max(x ** y ** z, x ** z ** y, (x ** y) ** z, (x ** z) ** y, y ** x ** z, y ** z ** x, (y ** x) ** z, (y ** z) ** x, z ** x ** y, z ** y ** x)\n    c = max(values, key=values.get)\n    return c\n"
    },
    {
        "number": 26,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = [float(x) for x in stdin.split()]\n    return max(\n        x ** y ** z,\n        x ** z ** y,\n        (x ** y) ** z,\n        (x ** z) ** y,\n        y ** x ** z,\n        y ** z ** x,\n        (y ** x) ** z,\n        (y ** z) ** x,\n        z ** x ** y,\n        z ** y ** x,\n        (z ** x) ** y,\n        (z ** y) ** x,\n    ).__str__()\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"abcabca\")\n    5\n    >>> solution(\"aaaaaaaa\")\n    8\n    \"\"\"\n    pass\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return None\n\"\"\"\n\nfrom __future__ import annotations\n\n\ndef"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    str_length = len(stdin)\n    print(str_length)\n    return str_length\n\nstr_length = len(stdin)\nprint(str_length)\n    return str_length"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin + stdin\n\"\"\"\n\ndef"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    :type stdin: str\n    :rtype: str\n    \"\"\"\n    stdin_list = [s for s in stdin]\n    output = \"\"\n    current = []\n    count = 0\n    for i in stdin:\n        current.append(i)\n        count += 1\n        if \"\".join(current) == stdin:\n            break\n    current = []\n    count = 0\n    for i in stdin:\n        current.append(i)\n        count += 1\n        if \"\".join(current) == stdin:\n            break\n    current = []\n    count = 0\n    for i in stdin:\n        current.append(i)\n        count += 1\n        if \"\".join(current) == stdin:\n            break\n    current = []\n    count = 0\n    for i in stdin:\n        current.append(i)\n        count += 1\n        if \"\".join(current) == stdin:\n            break\n    current = []\n    count = 0\n    for i in stdin:\n        current.append(i)\n        count += 1\n        if \"\".join(current) == stdin:\n            break\n    current = []\n    count = 0\n    for i in stdin:\n        current.append(i)\n        count += 1\n        if \"\".join(current) == stdin:\n            break\n    return count\n\nprint(solution(\"abcdefgh\"))\nprint(solution(\"abcabca\"))\n"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = len(s)\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(n - 1, -1, -1):\n        dp[i][n] = n\n        for j in range(n - 1, i - 1, -1):\n            dp[i][j] = min(1 + dp[i][j + 1], dp[i + 1][j + 1] + (s[i] == s[j]))\n    return dp[0][0]\n\n\n\"\"\"\n\ndef"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n-----\n\"\"\"\n\n\ndef"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\ndef"
    },
    {
        "number": 27,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"abcabca\")\n    5\n    >>> solution(\"aaaaaaaa\")\n    8\n    \"\"\"\n    return 'done'"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    solution = []\n\n    for _ in range(N):\n        line = stdin.readline().strip()\n        name, ext = line.split(\" \")\n        solution.append(\"move \" + name + \" \" + str(int(ext) + 1) + \"\\n\")\n\n    return \"\".join(solution)\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    total_number_of_tests = int(stdin)\n    total_number_of_examples = 0\n    total_number_of_regular_tests = 0\n    number_of_examples_per_file = []\n    number_of_regular_tests_per_file = []\n    number_of_examples_per_file = []\n    number_of_regular_tests_per_file = []\n    for i in range(total_number_of_tests):\n        number_of_examples, number_of_regular_tests = [int(j) for j in stdin.split('\\n')[i].split(' ')]\n        if number_of_examples > 0:\n            number_of_examples_per_file.append(number_of_examples)\n        if number_of_regular_tests > 0:\n            number_of_regular_tests_per_file.append(number_of_regular_tests)\n    for j in range(len(number_of_regular_tests_per_file)):\n        number_of_examples_per_file.append(number_of_examples_per_file[j] + number_of_regular_tests_per_file[j])\n    number_of_files = len(number_of_examples_per_file)\n    number_of_examples_with_one_test = sum(number_of_examples_per_file)\n    number_of_examples_with_one_test = number_of_examples_with_one_test + total_number_of_regular_tests\n    number_of_examples_with_one_test = number_of_examples_with_one_test + 1\n    print(number_of_files + number_of_examples_with_one_test)\n    for k in range(len(number_of_examples_per_file)):\n        if number_of_examples_per_file[k] > 0:\n            print(\"move \" + str(k + 1) + \" \" + str(number_of_examples_per_file[k] + 1))\n    print(\"move \" + str(number_of_examples_with_one_test) + \" \" + str(total_number_of_examples + 1))\n\nsolution(input())\n\nSample Tests\nInput 1\n2\n1 0\n2 1\nOutput 1\n3\nmove 1 3\nmove 2 1\nmove 3 2\nInput 2\n5\n1111 1\n11 0\n11 1\n11 0\n1111 1\nOutput 2\n6\nmove 1 6\nmove 11 1\nmove 111 11\nmove 11111 2\nmove 111 4\nmove 11111 3\nInput 3\n5\n11111 0\n1111 0\n1111 1\n11111 0\n11111 0\nOutput 3\n5\nmove 1 5\nmove 11 1\nmove 111 11\nmove 111 11\nmove 111 11\nInput 4\n5\n1111 1\n11 1\n1111 1\n11 0\n11 0\nOutput 4\n4\nmove 1 4\nmove 11 2\nmove 111 11\nmove 111 11\nInput 5\n5\n11111 0\n11 0\n11 1\n1111 0\n11111 0\nOutput 5\n5\nmove 1 5\nmove 11 1\nmove 111 11\nmove 111 11\nmove 111 11\n\n-----Search-----\n\nThe Algorithm:\n\nIn the first step we compute the total number of examples and regular tests. In the second step we compute the number of examples per file, and the number of regular tests per file.\n\nExplanation:\n\nThe total number of tests is equal to the sum of the number of regular tests and the number of examples.\n\nThe number of tests of a particular file is equal to the number of regular tests plus the number of examples in this file.\n\nThe number of examples of a particular file is equal to the number of examples in this file minus the number of regular tests in this file.\n\nSo we have that number of tests per file is equal to the number of examples in this file plus the number of regular tests in this file.\n\nThe number of tests of a particular file is the number of examples in this file plus the number of regular tests in this file.\n\nThe number of tests of a particular file is the number of examples in this file plus the number of regular tests in this file.\n\nSo, we can create an array of integers representing the number of examples per file. Let's call it example array.\n\nNow we have that example array. We know the total number of examples. Let's create an array of integers representing the number of regular tests per file. Let's call it regular test array.\n\nNow we have that regular test array. Now, we know the total number of tests. Let's create an array of integers representing the number of tests per file. Let's call it tests array.\n\nNow we have that tests array. Now we have all information we need.\n\nSo we have the example array, the regular test array and the tests array.\n\nThe answer is the total number of tests. So we have: example array + regular test array + tests array = total tests.\n\nSo we need to find all pairs in example array which are at the beginning of regular test array.\n\nNow we have that the list of pairs is the beginning of the tests array.\n\nNow we want to find all pairs in example array which are at the end of the tests array.\n\nNow we have that the list of pairs is the end of the tests array.\n\nWe want to find the number of example tests. We need to find the number of pairs in example array that are at the beginning of the tests array and find the number of pairs"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Get the solution.\"\"\"\n    num_tests, *tests = map(int, stdin.split('\\n'))\n    examples = []\n    others = []\n    for i in range(num_tests):\n        s, t = map(int, stdin.split('\\n')[i].split())\n        if t == 1:\n            examples.append(i)\n        else:\n            others.append(i)\n\n    def rearrange(examples: list) -> None:\n        \"\"\"Rearrange the examples to the first examples.\"\"\"\n        examples.sort(key=lambda x: -len(tests[x]))\n\n        i = 0\n        while i < len(examples) and examples[i] == 0:\n            i += 1\n\n        for j in range(i, len(examples)):\n            examples[j] += i\n\n    rearrange(examples)\n    rearrange(others)\n\n    script = []\n    for e, o in zip(examples, others):\n        script.append(f\"move {o+1} {e+1}\\n\")\n\n    return \"\".join(script)\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    result = list()\n    result.append('move 1 3')\n    for i in range(n):\n        if int(stdin.split('\\n')[i + 1].split()[1]) == 1:\n            result.append('move {0} {1}'.format(i + 1, i + 4))\n            result.append('move {0} {1}'.format(i + 1, i + 5))\n        else:\n            result.append('move {0} {1}'.format(i + 1, i + 2))\n    return '\\n'.join(result)\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Vladimir wants to rename the files with tests so that their names are distinct integers starting from 1 without any gaps, namely, \"1\", \"2\",..., \"n', where n is the total number of tests.\n    \"\"\"\n    n_test = int(stdin.splitlines()[0])\n\n    for i in range(1, n_test + 1):\n        # move 'i' to 'i + n'\n        stdin += f\"move {i} {i + n_test}\\n\"\n\n    return stdin\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\n   ...     \"5\\n\"\n   ...     \"01 0\\n\"\n   ...     \"2 1\\n\"\n   ...     \"2extra 0\\n\"\n   ...     \"3 1\\n\"\n   ...     \"99 0\\n\"\n   ... )\n    4\n    \"\"\"\n   ...\n"
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    number_of_tests = int(stdin.split(\"\\n\")[0])\n    tests_list = []\n    for i in range(number_of_tests):\n        tests_list.append(stdin.split(\"\\n\")[i])\n    \n    # number of examples\n    number_of_examples = 0\n    for file_name, file_type in tests_list:\n        if file_type == \"1\":\n            number_of_examples += 1\n    \n    # create list with filename's and number of examples\n    list_of_files_with_examples = []\n    for file_name, file_type in tests_list:\n        if file_type == \"1\":\n            list_of_files_with_examples.append([file_name, 1])\n    \n    list_of_files_with_examples = sorted(list_of_files_with_examples, key=lambda x:x[1])\n    \n    examples_counter = 0\n    list_of_files_with_examples_sorted = []\n    \n    for file_name, file_number_of_examples in list_of_files_with_examples:\n        if examples_counter < number_of_examples:\n            list_of_files_with_examples_sorted.append([file_name, file_number_of_examples])\n            examples_counter += 1\n    \n    list_of_files_with_examples_sorted = sorted(list_of_files_with_examples_sorted, key=lambda x:x[1])\n    \n    examples_counter = 0\n    counter = 0\n    new_line_for_move = []\n    \n    for file_name, file_number_of_examples in list_of_files_with_examples_sorted:\n        if examples_counter < number_of_examples:\n            new_line_for_move.append(\"move \" + file_name + \" \" + str(counter + 1))\n            examples_counter += 1\n        counter += 1\n    \n    print(len(new_line_for_move))\n    \n    for line in new_line_for_move:\n        print(line)\n    \n    return \"\""
    },
    {
        "number": 28,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def output(i: int):\n        if i > len(stdin):\n            return\n        \n        if stdin[i] == \"1\":\n            i += 1\n            output(i)\n            print(f\"move {i} {i + 1}\")\n            i += 1\n            output(i)\n        else:\n            print(f\"move {i + 1} {i + 2}\")\n            i += 2\n            output(i)\n        \n    n = int(stdin[0])\n    output(1)\n    return \" \".join(list(map(lambda x: str(x + 1), range(n, 0, -1))))\n    \n\nsolution(stdin)"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 0\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(stdin.replace('0', '1')))\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum(list(map(int, stdin[:3]))) == sum(list(map(int, stdin[3:]))))\n\n\ndef"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return ''\nprint(solution('111000'))\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(stdin.translate(str.maketrans('0123456789', '87654321'))))\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\nreturn stdin\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    tkt = stdin\n    l = []\n    for i in range(len(tkt)):\n        if tkt[i] == '0':\n            l.append(i)\n    \n    return len(l)\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return 1\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    first_numbers = stdin[0:3]\n    second_numbers = stdin[3:]\n    count = 0\n    if sum(map(int, first_numbers)) == sum(map(int, second_numbers)):\n        return count\n    else:\n        for number in [i for i in range(10)]:\n            if str(number) not in first_numbers and str(number) not in second_numbers:\n                count += 1\n        return count\n"
    },
    {
        "number": 29,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(max([(int(stdin[0])+int(stdin[1])+int(stdin[2])-9) - (int(stdin[4])+int(stdin[5])+int(stdin[6])), (int(stdin[3])+int(stdin[4])+int(stdin[5])-9) - (int(stdin[0])+int(stdin[1])+int(stdin[2]))]))\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = [int(c) for c in stdin.split(\" \")]\n    return n // gcd(x, n)\n\n\"\"\"\n\ndef"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''Returns the solution to the problem'''\n    # your code here\n    return str(min_trap(map(int, stdin.split())))\n\ndef"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    m, x = map(int, stdin.split())\n    return str(x-1 if gcd(x, m) == 1 else m-1)\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    m, x = map(int, stdin.split())\n    return max((m - 1) // x + 1, 1)\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n\n\n\n\"\"\"\nWe are given the number of rooms and parameter of x-mouse.\n\nNow we want to figure out how many traps we can put to catch it.\n\nSo the goal is to figure out that x-mouse can enter the trap in the room x, and then enter the trap in the room x * n % m, where n is number of rooms, and m is the number of rooms.\n\nIt is obvious that x-mouse can enter the trap in the room x if x-mouse starts at the room x.\n\nAlso, x-mouse can enter the trap in the room x * n % m if x-mouse starts at the room x * n % m.\n\nIt means that we can use the fact that x-mouse is teleporting from one room to another.\n\nThen we just need to find the minimal number of traps.\n\nSo we can say that answer equals to the smallest number of traps that can be added, and by the formula number of traps = sum[i = 1 to n] x_i mod m.\n\nThe sum is equal to the number of rooms, so we just need to find the smallest number of traps.\n\"\"\""
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    m, x = map(int, stdin.split('\\n')[0].split())\n    return 1\n\"\"\"\n\ndef"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    m, x = map(int, stdin.split())\n    result = 1 if gcd(m, x) == 1 else m\n    return str(result)\n\n\ndef"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    m, x = list(map(int, stdin.split(' ')))\n    return str(m // gcd(x, m) - 1)\n"
    },
    {
        "number": 30,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\"\"\"\nfrom collections import deque\nfrom fractions import gcd\n\n\ndef"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    n, k = map(int, stdin.split())\n    p = 1.0 / n\n    total = 0\n    for i in range(1, k + 1):\n        total += p * ((-1) ** i / (2 * i - 1))\n    total = total * 2 ** n\n    total = total % (10 ** 6 + 3)\n    print(total)\n    print(int(total), end='')"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(n) for n in stdin.split()]\n\n    # \u65b9\u91dd\uff1a2^n \u4eba\u306e\u5e73\u57472\u3064\u306b\u30d4\u30fc\u30af\u304c\u3042\u308b\u78ba\u7387\u306f 0.5\n    # \u6b63\u306e\u6574\u6570\u306f\uff0cA+B\u306f\u6700\u5927\u3067\u30822^k\n    # \u4ee5\u4e0b\u306efor\u30eb\u30fc\u30d7\u3067\u8003\u3048\u308b\uff0e\n    # \u500b\u5225\u306e\u65e5\u306b\u3064\u3044\u3066\uff0cA\u3068B\u306e\u3069\u3061\u3089\u304b\u3092\u30d4\u30fc\u30af\u306b\u3059\u308b\uff0c\u3069\u3061\u3089\u304b\u3092\u30d4\u30fc\u30af\u306b\u3059\u308b\uff0e\n    # \u4ee5\u4e0b\u3092\u3057\u306a\u3044\u3068\uff0cA\u3068B\u304c\u4e92\u3044\u306b\u639b\u304b\u308b\u3068\u3057\u3066\u8003\u3048\u3089\u308c\u308b\uff0e\n    # \u3053\u308c\u306f\uff0c\u30d4\u30fc\u30af\u306e\u5024\u306f\u5076\u6570\u3060\u3063\u305f\u5834\u5408\u306f A+B \u306f\u307f\u51fa\u305b\u308b\uff0c\u5947\u6570\u3060\u3063\u305f\u5834\u5408\u306f A+B \u306f\u307f\u51fa\u305b\u306a\u3044\uff0e\n    # \u5143\u3005\u306eA,B\u306f\u540c\u3058\u5024\u306b\u306a\u308b\u3088\u3046\u306b\u3059\u308b\u5fc5\u8981\u306f\u306a\u3044\u3002\n    # \u3053\u308c\u3092\u907f\u3051\u308b\u305f\u3081\u306b\uff0cA\u304c\u8ca0\u306e\u3068\u304d\u306f\uff0cB\u306f\u8ca0\u306e\u3068\u304d\u306f +2^k \u306a\u3089\u306a\u3044\uff0e\n    # \u5168\u3066\u306e\u30eb\u30fc\u30d7\u3067\uff0cA<=2^k \u304b\u3064 B>=0 \u3067\u3042\u308b\u6642\u306b\u30d4\u30fc\u30af\u3092\u4f5c\u308b\uff0e\n    # \u3053\u308c\u306fA\u3068B\u304c\u4e92\u3044\u306b\u639b\u304b\u308b\u5024\u306e\u3046\u3061\uff0c\u30d4\u30fc\u30af\u3092\u4f5c\u308b\u306a\u3089\u3070\uff0c\u5076\u6570\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308b\uff0e\n    # \u3053\u308c\u3092\u907f\u3051\u308b\u305f\u3081\u306b\uff0cA\u304c\u8ca0\u306e\u3068\u304d\u306f\uff0cB\u306f\u8ca0\u306e\u3068\u304d\u306f +2^k \u306a\u3089\u306a\u3044\uff0e\n    # \u3053\u308c\u3067\uff0cA<=2^k \u304b\u3064 B>=0 \u3067\u3042\u308b\u6642\u306b\u30d4\u30fc\u30af\u3092\u4f5c\u308b\u306e\u306b\u5fc5\u8981\u306a\u7bc4\u56f2\u306f 2^k + 2^(k+1) \n    # \u307e\u3067\u3068\u306a\u308b\uff0e\n\n    # \u5bfe\u5fdc\u3059\u308bA,B\u306e\u5024\u3092\u63a2\u3059\n    for A in range(1, 2**k + 1):\n        B = 2**k + A - A % (2**k + 1)\n        if B >= 2**k and gcd(A, B) == 1:\n            return str(A) +'' + str(B)"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Calculates A and B, where A and B are coprime, with A >= 0 and B >= 1.\n\n    Params\n    ------\n    stdin: str\n        The input string, given by the competition.\n\n    Returns\n    -------\n    str\n        A string, the first line being A and the second line being B.\n    '''\n    n, k = [int(c) for c in stdin.split(\"\\n\")[0].split()]\n    ans = 0\n    for a in range(1, k + 1):\n        ans = ans * k + a\n    return str(ans % (10 ** 6 + 3))\n\n\ndef"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    \n    pass"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('3 2')\n    '1 8'\n    >>> solution('1 3')\n    '1 1'\n    >>> solution('4 3')\n    '23 128'\n    \"\"\"\n    n, k = tuple(map(int, stdin.split(' ')))\n    n_factorial = 1\n    n_not_factorial = 1\n    k_factorial = 1\n    k_not_factorial = 1\n    for i in range(1, n + 1):\n        n_factorial *= i\n        n_not_factorial *= i\n    for j in range(1, k + 1):\n        k_factorial *= j\n        k_not_factorial *= j\n    count_of_days = 0\n    for i in range(1, n + 1):\n        count_of_days += n_not_factorial // (n_factorial * i)\n    count_of_days -= n_not_factorial // n_factorial\n    count_of_days //= 2\n    count_of_days = count_of_days % (10**6 + 3)\n    count_of_days *= k_not_factorial\n    count_of_days //= k_factorial\n    count_of_days = count_of_days % (10**6 + 3)\n    return str(count_of_days)"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''Return the probability of at least two k people having the same birthday in 2^{n} days long year'''\n    \n    pass\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('3 2\\n')\n    '1 8\\n'\n    >>> solution('1 3\\n')\n    '1 1\\n'\n    >>> solution('4 3\\n')\n    '23 128\\n'\n    \"\"\"\n    n, k = map(int, stdin.split())\n    prob = (k * (k - 1) // 2) / (2 ** n)\n    A, B = 0, 0\n    for i in range(1, k + 1):\n        A = (A + (2 * i - 1) * prob) % (10 ** 6 + 3)\n        B = (B + i * prob) % (10 ** 6 + 3)\n    return f'{A} {B}\\n'\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the two closest numbers to the input in a list of integers.\"\"\"\n    n, k = [int(i) for i in stdin.split('\\n')[0].split()]\n    if k == 1:\n        return '1 1'\n    B = 1\n    A = k\n    while k % B!= 0:\n        A, B = B, k % B\n    return '{} {}'.format(A, B)\n\nprint(solution(input()))\n"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    return str(get_prob(n, k))\n\n\ndef"
    },
    {
        "number": 31,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"The first and only line of the input contains two integers n and k (1 \u2264 n \u2264 10^18, 2 \u2264 k \u2264 10^18), meaning that there are 2^{n} days in a year and that ZS the Coder wants to interview exactly k people.\n    The function should return one line with two integers A and B (A \u2265 0, B \u2265 1, A and B must be coprime before their remainders modulo 10^6 + 3 are taken).\n    Since these numbers may be too large, print them modulo 10^6 + 3.\"\"\"\n    pass\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for _ in range(n):\n        t, dir = map(int, stdin.split())\n        if t == 0:\n            if dir in ['South', 'East']:\n                print(\"NO\")\n                continue\n        elif dir in ['South', 'East']:\n            print(\"YES\")\n        else:\n            print(\"NO\")"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nfrom typing import List\n\nclass Coordinate:\n    def __init__(self, x: int, y: int):\n        self.x = x\n        self.y = y\n\n    def __add__(self, other):\n        return Coordinate(self.x + other.x, self.y + other.y)\n\n    def __sub__(self, other):\n        return Coordinate(self.x - other.x, self.y - other.y)\n\n    def __mul__(self, other):\n        return Coordinate(self.x * other.x, self.y * other.y)\n\n    def __repr__(self):\n        return f\"({self.x}, {self.y})\"\n\nclass Point:\n    def __init__(self, x: int, y: int, z: int):\n        self.x = x\n        self.y = y\n        self.z = z\n        \n    def __add__(self, other):\n        return Point(self.x + other.x, self.y + other.y, self.z + other.z)\n\n    def __sub__(self, other):\n        return Point(self.x - other.x, self.y - other.y, self.z - other.z)\n\n    def __mul__(self, other):\n        return Point(self.x * other.x, self.y * other.y, self.z * other.z)\n\ndef"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n    :param stdin:\n    :return: str\n\"\"\"\n    directions = [\n        tuple(map(int, line.split())) for line in stdin.split('\\n')\n    ]\n    pos = (0, 0)\n    for i in range(len(directions)):\n        t, dir = directions[i]\n        if i % 2 == 0:\n            if dir == 'North':\n                pos = (pos[0] + t, pos[1])\n            elif dir == 'South':\n                pos = (pos[0] - t, pos[1])\n            elif dir == 'West':\n                pos = (pos[0], pos[1] - t)\n            elif dir == 'East':\n                pos = (pos[0], pos[1] + t)\n        else:\n            if dir == 'North':\n                pos = (pos[0], pos[1] + t)\n            elif dir == 'South':\n                pos = (pos[0], pos[1] - t)\n            elif dir == 'West':\n                pos = (pos[0] - t, pos[1])\n            elif dir == 'East':\n                pos = (pos[0] + t, pos[1])\n\n    return 'YES' if pos == (0, 0) else 'NO'\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n        \n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\ndef"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 7500 South\n   ... 10000 East\n   ... 3500 North\n   ... 4444 West\n   ... 4000 North''')\n    'YES'\n    >>> solution('''2\n   ... 15000 South\n   ... 4000 East''')\n    'NO'\n    >>> solution('''5\n   ... 20000 South\n   ... 1000 North\n   ... 1000000 West\n   ... 9000 North\n   ... 10000 North''')\n    'YES'\n    >>> solution('''3\n   ... 20000 South\n   ... 10 East\n   ... 20000 North''')\n    'NO'\n    >>> solution('''4\n   ... 50 South\n   ... 50 North\n   ... 15000 South\n   ... 15000 North''')\n    'YES'\n    >>> solution('''2\n   ... 1000 North\n   ... 1000 South''')\n    'NO'\n    >>> solution('''4\n   ... 50 South\n   ... 50 North\n   ... 15000 South\n   ... 15000 North''')\n    'NO'\n    \"\"\"\n   ..."
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    for _ in range(x):\n        a,b = map(int,stdin.split())\n        if (a < b) and (b == 0):\n            if (b-a) == 20:\n                stdin = stdin[:-1] + \"S\"\n            else:\n                stdin = stdin[:-1] + \"N\"\n        elif (a < b) and (b == 10000):\n            if (b-a) == 20:\n                stdin = stdin[:-1] + \"N\"\n            else:\n                stdin = stdin[:-1] + \"S\"\n        elif (a > b) and (b == 0):\n            if (a-b) == 20:\n                stdin = stdin[:-1] + \"S\"\n            else:\n                stdin = stdin[:-1] + \"N\"\n        elif (a > b) and (b == 10000):\n            if (a-b) == 20:\n                stdin = stdin[:-1] + \"N\"\n            else:\n                stdin = stdin[:-1] + \"S\"\n        else:\n            stdin = stdin[:-1]\n    return stdin\n-----Problem-----\n\nThe power of a number is the sum of its digits. For example, the power of 13 is 1+3=4. If we change any digit of a number to 9, we get a higher power. For example, the power of 13 is 9.\n\nWrite a function that computes the power of a number.\n\n-----Solution-----\n\ndef"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 32,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    a1, b1, a2, b2, l, r = map(int, stdin.split())\n    k = r // a1\n    l = l // a2\n    cnt = 0\n    for i in range(l, r + 1):\n        if a2 * (i - l) + b2 == a1 * (k - i) + b1:\n            cnt += 1\n    return str(cnt)\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a_1, b_1, a_2, b_2, L, R = [int(x) for x in stdin.split()]\n    res = 0\n    for k in range(L, R + 1):\n        for l in range(L, R + 1):\n            if a_1 * k + b_1 == a_2 * l + b_2:\n                res += 1\n    return res\n\ndef"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # return str\n    a1, b1, a2, b2, l, r = map(int, stdin.split(' '))\n    count = 0\n    for k in range(max(0, a1 - l), min(a2, r + 1)):\n        for l' in range(max(0, a2 - l), min(b2, r + 1)):\n            if l <= k + l' <= r:\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a_1, b_1, a_2, b_2, L, R = [int(i) for i in stdin.split()]\n    res = 0\n    for k in range(L, R+1):\n        for l in range(k, R+1):\n            if a_1*k + b_1 == a_2*l + b_2 and L <= k <= R and L <= l <= R:\n                res += 1\n    return res\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a1, b1, a2, b2, l, r = [int(x) for x in stdin.split(' ')]\n    \n    # a1 - b1 = a2 - b2\n    # l = k, r = l'\n    # a1 - b1 = a2 - b2 - b1 + a2\n    # (a2 - b2) + b1 = a2 - b2\n    # a1 - b1 = (a2 - b2) + b1\n    # a1 - (b1 + b2) = a2 - b2\n    # a1 - b1 = (a2 - b2) - b1\n    # a1 - (b1 - b2) = a2 - b2\n    # a1 - b2 = a2 - b2 - b1 + a1\n    # a1 = a2 - b2 - b1 + a1\n    # a1 = a2 - b2 - b1 + a1 - b1\n    # a1 = a2 - b2 - b1 + a1 - b2 - b1\n    # a1 = a2 - b2 - b1 - b2 - b1\n    # a1 = a2 - b2 - b1 - b2 - b1 - b2\n    # a1 = a2 - b2 - b1 - b2 - b1 - b2 - b1\n    # a1 = a2 - b2 - b1 - b2 - b1 - b2 - b1 - b2\n    # a1 = a2 - b2 - b1 - b2 - b1 - b2 - b1 - b2 - b1\n    # a1 = a2 - b2 - b1 - b2 - b1 - b2 - b1 - b2 - b1 - b2\n    \n    # a1 = a2 - b2 - b1 - b2 - b1 - b2 - b1 - b2 - b1 - b2\n    # (a2 - b2) + (b1 - b2) = a2 - b2\n    # a1 = (a2 - b2) + (b1 - b2)\n    # a1 = a2 - (b2 - b1)\n    # a1 = a2 - b2 - b1 + a1\n    # a1 = a2 - b2 - b1 + (a1 - b1)\n    # a1 = a2 - b2 - b1 - (a1 - b1) + a1\n    # a1 = a2 - b2 - b1 - (a1 - b2 - b1) + a1\n    # a1 = a2 - b2 - b1 - (a1 - b2 - b1) - (a1 - b1) + a1\n    # a1 = a2 - b2 - b1 - (a1 - b2 - b1) - (a1 - b2 - b1) - (a1 - b1) + a1\n    # a1 = a2 - b2 - b1 - (a1 - b2 - b1) - (a1 - b2 - b1) - (a1 - b2 - b1) - (a1 - b1) + a1\n    # a1 = a2 - b2 - b1 - (a1 - b2 - b1) - (a1 - b2 - b1) - (a1 - b2 - b1) - (a1 - b2 - b1) - (a1 - b1) + a1\n    # a1 = a2 - b2 - b1 - (a1 - b2 - b1) - (a1 - b2 - b1) - (a1 - b2 - b1) - (a1 - b2 - b1) - (a1 - b2 - b1) - (a1 - b1) + a1\n    # a1 = a2 - b2 - b1 - (a1 - b2 - b1) - (a1 - b2 - b1) - (a1 - b2 - b1) - (a1 - b2 - b1) - (a1 - b2 - b1) - (a1 - b1) - (a1 - b1) + a1\n    # a1 = a2 - b2 - b1 - (a1 - b2 - b1) - (a1 - b2 - b1) - (a1 - b2 - b1) - (a1 - b2 - b1) - (a1 - b2 - b1) - (a1 - b1) - (a1 - b1) - (a1 - b1) + a1\n    # a1 = a2 - b2 - b1 - (a1 - b2 - b1) - (a1 - b2 - b1) - (a1 - b2 - b1) - (a1 - b2 - b1) - (a1 - b2 - b1) - (a1 - b1) - (a1 - b1) - (a1 - b1) - (a1 - b1) + a1\n    # a1 = a2 - b2 - b1 - (a1 - b2 - b1) - (a1 - b2 - b1) - (a1 - b2 - b1) - (a1 - b2 - b1) - (a1 - b2 - b1) - (a1 - b1) - (a1 - b1) - (a1 - b1) - (a1 - b1) - (a1 - b1) + a1\n    # a1 = a2 - b2 - b1 - (a1 - b2 - b1) - (a1 - b2 - b1) - (a1 - b2 - b1) - (a1 - b2 - b1) - (a1 - b2 - b1) - (a1 - b1) - (a1 - b1) - (a1 - b1) - (a1 - b1) - (a1 - b1) - (a1 - b1) - (a1 - b1) + a1\n    # a1 = a2 - b2 - b1 - (a1 - b2 - b1) - (a1 - b2 - b1) - (a1 - b2 - b1) - (a1 - b2 - b1) - (a1 - b2 - b1) - (a1 - b1) - (a1 - b1) - (a1 - b1) - (a1 - b1) - (a1 - b1) - (a1 - b1) - (a1 - b1) - (a1 - b1) - (a1 - b1) - (a1 - b1) + a1\n    # a1 = a2 - b2 - b1 - (a1 - b2 - b1) - (a1 - b2 - b1) - (a1 - b2 - b1) - (a1 - b2 - b1) - (a1 - b2 - b1) - (a1 - b1) - (a1 - b1) - (a1 - b1) - (a1 - b1) - (a1 - b1) - (a1 - b1) - (a1 - b1) - (a1 - b1) - (a1 - b1) - (a1 - b1) - (a1 - b1) - (a1 - b1) - (a1 - b1) - (a1 - b1) - (a1 - b1) - (a1 - b1) - (a1 - b1) - (a1 - b1) - (a1 - b1) - (a1 - b1) - (a1 - b1) - (a1 - b1) + a1\n    # a1 = a2"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    a1,b1,a2,b2,l,r = map(int, stdin.split())\n    p1 = max(0, a1-a2)\n    p2 = max(0, b1-b2)\n    k, l, r, n = 1,1,1,0\n    while k < r:\n        if l < k+p1:\n            l += 1\n        else:\n            n += r-k+1\n            k += p1\n        if l < k+p2:\n            l += 1\n        else:\n            n += r-k+1\n            k += p2\n    return str(n)\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a_1, b_1, a_2, b_2, L, R = [int(x) for x in stdin.split()]\n    ans = 0\n    for k in range(L, R + 1):\n        if a_1 * k + b_1 == a_2 * k + b_2:\n            ans += 1\n    return ans\n"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return number of integers x such that L \u2264 x \u2264 R and x = a_1k + b_1 = a_2l + b_2, for some integers k', l' \u2265 0.\n    :param stdin: (str) Input\n    :return: (str) Output\n    \"\"\"\n    arr = [int(x) for x in stdin.split()]\n    L = arr[4]\n    R = arr[5]\n    count = 0\n    for i in range(L, R+1):\n        if ((i - arr[2]) / arr[0]) + arr[3] == ((i - arr[6]) / arr[4]) + arr[7]:\n            count += 1\n    return str(count)"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a_1, b_1, a_2, b_2, L, R = map(int, stdin.split())\n    count = 0\n    for k in range(L, R+1):\n        for l in range(L, R+1):\n            if a_1 * k + b_1 == a_2 * l + b_2:\n                count += 1\n    return count"
    },
    {
        "number": 33,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a_1, b_1, a_2, b_2, L, R = [int(x) for x in stdin.split(' ')]\n    \n    count = 0\n    for k in range(a_1, a_2+1):\n        for l in range(a_1, a_2+1):\n            if L <= (k + l) and (k + l) <= R:\n                count += 1\n    \n    return str(count)\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lst_num = list(map(int, stdin.split()))\n    num_cake_1 = lst_num[1]\n    num_cake_2 = lst_num[2]\n    num_plate = lst_num[0]\n    print(min([num_cake_1 // num_plate, num_cake_2 // num_plate, num_cake_1 // num_plate + num_cake_2 // num_plate - 1]))\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    m, n = map(int, stdin.split(' '))\n    n1 = m - n\n    n2 = m - n1\n    if n1 % 2!= 0:\n        n1 += 1\n    if n2 % 2!= 0:\n        n2 += 1\n    if n1 >= n2:\n        return str(n1 // 2)\n    else:\n        return str(n2 // 2)\n\n\n\n\n\ndef"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = [int(x) for x in stdin.split(\" \")]\n    return str(max(n // (a + b) - 1, n // b - 1, n // a - 1))\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    [n, a, b] = list(map(int, stdin.split(\" \")))\n    return n - max(a, b) + min(a, b)\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = [int(i) for i in stdin.split(' ')]\n    return str(n // (a + b) * min(a, b))\n\n\n\ndef"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = [int(s) for s in stdin.split()]\n    return str(n - b)\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Max number of cakes\n    \"\"\"\n    n, a, b = [int(x) for x in stdin.split(\" \")]\n    if n <= a + b:\n        return n\n    else:\n        a, b = min(a, b), max(a, b)\n        n = n - a - b\n        if n % b == 0:\n            return int(n / b)\n        else:\n            return int(n / b) + 1\n"
    },
    {
        "number": 34,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\ndef"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find if the given field matches the Berland flag.\n\n    Args:\n        stdin (str): Input string\n\n    Returns:\n        str: If the given field matches the Berland flag, the function returns \"YES\", otherwise \"NO\"\n    \"\"\"\n    # Split input string by the new line character\n    input_split = stdin.split(\"\\n\")\n    # Find the size of the field and its content\n    field_size = int(input_split[0].split()[0])\n    field_content = input_split[1:]\n    # Check if the number of rows and columns are equal to field_size\n    if len(field_content)!= field_size:\n        return \"NO\"\n    # Initialize a dictionary to store the colors and their frequency\n    colors = {}\n    # Iterate through the content of the field and add their colors to the dictionary\n    for row in field_content:\n        for char in row:\n            if char in colors:\n                colors[char] += 1\n            else:\n                colors[char] = 1\n    # Check if the three colors in the dictionary are equal to 3\n    if len(colors)!= 3:\n        return \"NO\"\n    # Check if the values of the keys are equal to 1\n    for key in colors.keys():\n        if colors[key]!= 1:\n            return \"NO\"\n    # If all conditions are met, return yes\n    return \"YES\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    rows, columns, is_correct = map(int, stdin.split())\n    field = [stdin.strip() for stdin in stdin.split('\\n')]\n\n    result = 'YES' if rows == columns else 'NO'\n\n    return result\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport sys\nfrom collections import Counter\n\nfrom typing import Tuple\n\n\ndef"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    n, m = list(map(int, stdin.split()))\n    list_of_chars = [i for i in stdin.split()]\n    count = 0\n    if (n > 3 and m > 3):\n        for row in list_of_chars:\n            if row.count('R') == 1 and row.count('G') == 1 and row.count('B') == 1:\n                count += 1\n        if count == 3:\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        return \"NO\"\nprint(solution(input()))"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u0431\u0435\u0437 \u0432\u044b\u0432\u043e\u0434\u0430\n    :param stdin:\n    :return:\n    '''\n    n, m = [int(i) for i in stdin.split(' ')]\n    if n % 2 == 0 or m % 2 == 0:\n        print('NO')\n        return\n    for _ in range(n):\n        print(''.join(stdin.split('\\n')[_]))\n    return\n\ndef"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport sys\nfrom math import sqrt\n\n\ndef"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nprint(solution(\"4 4\\nRRRR\\nRRRR\\nBBBB\\nGGGG\")) # NO\nprint(solution(\"6 7\\nRRRGGGG\\nRRRGGGG\\nRRRGGGG\\nRRRBBBB\\nRRRBBBB\")) # NO\nprint(solution(\"6 5\\nRRRRR\\nRRRRR\\nBBBBB\\nBBBBB\")) # YES\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    r, g, b = [''.join(stdin.split()[i:i + m]) for i in range(0, n * m, m)]\n    if n == 3 and m == 3:\n        for i in range(3):\n            if r[i] == 'R' and g[i] == 'G' and b[i] == 'B':\n                return 'YES'\n    return 'NO'\n    \"\"\"\n    n, m = [int(x) for x in stdin.split()]\n    r, g, b = [''.join(stdin.split()[i:i + m]) for i in range(0, n * m, m)]\n    return 'YES' if (set(r) == {'R'} and set(g) == {'G'} and set(b) == {'B'}) or (set(r) == {'G'} and set(g) == {'R'} and set(b) == {'B'}) or (set(r) == {'B'} and set(g) == {'G'} and set(b) == {'R'}) else 'NO'\n    \"\"\"\n"
    },
    {
        "number": 35,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # the code below can be replaced with\n    # return 'YES' if stdin.count('RR') == 3 else 'NO'\n    return 'YES' if (stdin.count('RR') == 3) and (stdin.count('B') == 1 and stdin.count('G') == 1) else 'NO'\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = 0, 0\n    for i in stdin:\n        if i == \"s\":\n            x, y = x + 1, y + 2\n        elif i == \"n\":\n            x, y = x - 1, y - 2\n        elif i == \"ne\":\n            x, y = x + 1, y - 1\n        elif i == \"se\":\n            x, y = x - 1, y + 1\n        elif i == \"nw\":\n            x, y = x - 1, y + 1\n        elif i == \"sw\":\n            x, y = x + 1, y - 1\n        else:\n            assert False\n    return x, y\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    if n == 0:\n        print(0, 0)\n        return\n    x = 0\n    y = 0\n    for i in range(n):\n        x += 1\n        y += 1\n        if x % 2 == 1:\n            x -= 1\n        else:\n            x += 1\n    if x < 0:\n        x = 0\n    print(x, y)\n    return"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3''')\n    '-2 0'\n    >>> solution('''7''')\n    '3 2'\n    \"\"\"\n    moves = int(stdin)\n    move_x = move_y = 0\n    for i in range(moves):\n        if i % 3 == 0:\n            move_y += 1\n        elif i % 3 == 1:\n            move_x += 1\n        elif i % 3 == 2:\n            move_y -= 1\n        elif i % 3 == 0:\n            move_x -= 1\n    return str(move_x) +'' + str(move_y)\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, y, n = 0, 0, int(stdin.readline())\n    for i in range(n):\n        if x == 0 and y == 0:\n            x, y = 1, 0\n        else:\n            if x == 0:\n                x = 1\n            if y == 0:\n                y = 1\n            x, y = y, x\n    return str(x) + \" \" + str(y)\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    if n % 2 == 0:\n        x = y = n // 2\n    else:\n        x = n // 2\n        y = n // 2 + 1\n    return f\"{x} {y}\"\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    return '\\n'.join(stdin)"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    moves = int(stdin.readline())\n    x, y = 0, 0\n    directions = ['U', 'D', 'R', 'L']\n    idx = 0\n    for _ in range(moves):\n        if idx == 0:\n            if x == 0:\n                y += 1\n            else:\n                x -= 1\n        elif idx == 1:\n            if y == 0:\n                x -= 1\n            else:\n                y -= 1\n        elif idx == 2:\n            if x == 0:\n                y += 1\n            else:\n                x += 1\n        else:\n            if y == 0:\n                x += 1\n            else:\n                y += 1\n        idx = (idx + 1) % 4\n    return x, y\n"
    },
    {
        "number": 36,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return coordinates of Ayrat.\"\"\"\n    pass\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(s) for s in stdin.split()]\n    if a * b < c:\n        return \"No\"\n    if (a + b) * c == a * (b + c):\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = list(map(int, stdin.split(' ')))\n    if (a * b + b * c) >= (c * b):\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    import math\n    a,b,c = [int(s) for s in stdin.split(\" \")]\n    if a*b < 2*c:\n        return \"No\"\n    else:\n        return \"Yes\""
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('4 6 15\\n')\n    'Yes'\n    >>> solution('3 2 7\\n')\n    'No'\n    >>> solution('6 11 6\\n')\n    'Yes'\n    \"\"\"\n    a, b, c = map(int, stdin.split('\\n')[0].split(' '))\n    if 2*a >= c and b >= c:\n        return 'Yes'\n    elif 2*a < c or b < c:\n        return 'No'"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(s) for s in stdin.split(' ')]\n\n    return 'Yes' if a + b >= c else 'No'\n\nprint(solution(input()))\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    a, b, c = list(map(int, stdin.split(\" \")))\n    return \"Yes\" if c == a+b else \"No\"\n\nsolution(\"4 6 15\")\n\ndef"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a*b <= c:\n        return \"Yes\"\n    return \"No\"\n\"\"\"\n\n\ndef"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(x) for x in stdin.split(' ')]\n    if (a * b) <= c:\n        return 'Yes'\n    return 'No'\n\ndef"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split(' '))\n    return 'Yes' if (c - b) % (a - b) == 0 else 'No'\n"
    },
    {
        "number": 37,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = (int(n) for n in stdin.split())\n    if c % (a + b)!= 0:\n        return \"No\"\n    else:\n        return \"Yes\"\n\nprint(solution(input()))\n\n\"\"\"\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if is_same_track(n, L, distances, positions) else \"NO\"\n\n\ndef"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Make sure that you can get the track from one of the start positions\n    \"\"\"\n    n, L = [int(i) for i in stdin.split(\" \")]\n    A = [int(i) for i in stdin.split(\" \")]\n    B = [int(i) for i in stdin.split(\" \")]\n    \n    return \"YES\" if sorted(A) == sorted(B) else \"NO\"\n\"\"\"\n\ndef"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\n\n\ndef"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    https://app.codility.com/demo/results/training4YKVUQ-6PX/\n    100%\n    '''\n    def rotate(A):\n        size = len(A)\n        for i in range(size//2):\n            A[i], A[size-1-i] = A[size-1-i], A[i]\n        return A\n\n    n, L = map(int, stdin.split())\n    barriers = list(map(int, stdin.split()))\n    barriers = rotate(barriers)\n    sashers = list(map(int, stdin.split()))\n    sashers = rotate(sashers)\n    for i in range(n):\n        if barriers[i]!= sashers[i]:\n            return \"NO\"\n    return \"YES\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time: O(n)\n    Space: O(n)\n    \"\"\"\n    n, L = [int(i) for i in stdin.split()]\n    points_kefa = [int(i) for i in stdin.split()][:n]\n    points_sasha = [int(i) for i in stdin.split()][n:]\n    points_kefa.sort()\n    points_sasha.sort()\n    points_kefa.reverse()\n    points_kefa = points_kefa + points_kefa\n    points_sasha.reverse()\n    points_sasha = points_sasha + points_sasha\n    points_kefa.reverse()\n    points_sasha.reverse()\n    points_kefa = [points_kefa[i] - points_kefa[i + 1] for i in range(len(points_kefa) - 1)]\n    points_sasha = [points_sasha[i] - points_sasha[i + 1] for i in range(len(points_sasha) - 1)]\n    if points_kefa == points_sasha:\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''Reads the input and returns the result'''\n    return str(check_tracks(stdin))\n\ndef"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, L = [int(x) for x in stdin.split(' ')]\n    arr = [int(x) for x in stdin.split(' ')]\n    arr.sort()\n    # n, L = [int(x) for x in input().split(' ')]\n    # arr = [int(x) for x in input().split(' ')]\n    arr.sort()\n    k, s = [int(x) for x in stdin.split(' ')]\n    # k, s = [int(x) for x in input().split(' ')]\n\n    i, j = 0, 0\n    while i < n and j < n:\n        if k >= L:\n            if arr[i] + j >= L:\n                break\n            else:\n                j = arr[i] + j\n                i += 1\n        elif s >= L:\n            if k + arr[j] >= L:\n                break\n            else:\n                k = k + arr[j]\n                j += 1\n        elif k < arr[i] + j and s < k + arr[j]:\n            break\n        elif k >= arr[i] + j and k + arr[j] >= L:\n            break\n        elif arr[i] + j < k < k + arr[j]:\n            break\n    if i == n and j == n:\n        return 'YES'\n    return 'NO'\nprint(solution(input()))"
    },
    {
        "number": 38,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nfrom collections import Counter\ndef"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    r = \"\"\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            if not is_palindrome(s[i:j]):\n                r = max(r, s[i:j], key=len)\n    return len(r) if r else 0\n\n\ndef"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return the answer as a string\n    \"\"\"\n    # YOUR CODE HERE\n    # pass\n    return \"\""
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the longest non-palindrome substring of a given string.\n\n    Args:\n        stdin (str): String to find the longest non-palindrome substring in.\n\n    Returns:\n        str: The longest non-palindrome substring of stdin.\n    \"\"\"\n    # Get the input string.\n    string = stdin.strip()\n    # Length of the input string.\n    string_length = len(string)\n    # Length of the longest non-palindrome substring.\n    result = 0\n    # Loop through the string, checking for each substring.\n    for i in range(string_length):\n        # Length of the substring.\n        length = 0\n        # Length of the substring plus 1.\n        length_plus_1 = 0\n        # Loop through the substring.\n        for j in range(i, string_length):\n            # Check if the substring is a palindrome.\n            if string[i : j + 1] == string[i : j + 1][:: -1]:\n                # If the substring is a palindrome, check if its length is greater than the length of the previous best substring.\n                if j - i + 1 > length:\n                    # Set the new longest substring as the palindrome substring.\n                    length = j - i + 1\n                    # Set the length of the new substring plus one as the length of the palindrome substring.\n                    length_plus_1 = length\n            else:\n                # If the substring is not a palindrome, check if its length is greater than the length of the previous best substring.\n                if j - i + 1 > length:\n                    # Set the new longest substring as the non-palindrome substring.\n                    length = j - i + 1\n                    # Set the length of the new substring plus one as the length of the non-palindrome substring.\n                    length_plus_1 = length\n                    # Set the new longest substring as the substring.\n                    result = string[i : j + 1]\n        # Check if the substring is a palindrome.\n        if string[i : i + 1] == string[i : i + 1][:: -1]:\n            # If the substring is a palindrome, check if its length is greater than the length of the previous best substring.\n            if i + 1 > result:\n                # Set the new longest substring as the palindrome substring.\n                result = string[i : i + 1]\n                # Set the length of the new substring plus one as the length of the palindrome substring.\n                length_plus_1 = i + 1\n        # Check if the substring is a palindrome.\n        if string[i : i + 1] == string[i : i + 1][:: -1]:\n            # If the substring is a palindrome, check if its length is greater than the length of the previous best substring.\n            if i + 1 > result:\n                # Set the new longest substring as the palindrome substring.\n                result = string[i : i + 1]\n                # Set the length of the new substring plus one as the length of the palindrome substring.\n                length_plus_1 = i + 1\n        # Check if the substring is a palindrome.\n        if string[i : i + 2] == string[i : i + 2][:: -1]:\n            # If the substring is a palindrome, check if its length is greater than the length of the previous best substring.\n            if i + 2 > result:\n                # Set the new longest substring as the palindrome substring.\n                result = string[i : i + 2]\n                # Set the length of the new substring plus one as the length of the palindrome substring.\n                length_plus_1 = i + 2\n        # Check if the substring is a palindrome.\n        if string[i : i + 3] == string[i : i + 3][:: -1]:\n            # If the substring is a palindrome, check if its length is greater than the length of the previous best substring.\n            if i + 3 > result:\n                # Set the new longest substring as the palindrome substring.\n                result = string[i : i + 3]\n                # Set the length of the new substring plus one as the length of the palindrome substring.\n                length_plus_1 = i + 3\n        # Check if the substring is a palindrome.\n        if string[i : i + 4] == string[i : i + 4][:: -1]:\n            # If the substring is a palindrome, check if its length is greater than the length of the previous best substring.\n            if i + 4 > result:\n                # Set the new longest substring as the palindrome substring.\n                result = string[i : i + 4]\n                # Set the length of the new substring plus one as the length of the palindrome substring.\n                length_plus_1 = i + 4\n        # Check if the substring is a palindrome.\n        if string[i : i + 5] == string[i : i + 5][:: -1]:\n            # If the substring is a palindrome, check if its length is greater than the length of the previous best substring.\n            if i + 5 > result:\n                # Set the new longest substring as the palindrome substring.\n                result = string[i : i + 5]\n                # Set the length of the new substring plus one as the length of the palindrome substring.\n                length_plus_1 = i + 5\n        # Check if the substring is a palindrome.\n        if string[i : i + 6] == string[i : i + 6][:: -1]:\n            # If the substring is a palindrome, check if its length is greater than the length of the previous best substring.\n            if i + 6 > result:\n                # Set the new longest substring as the palindrome substring.\n                result = string[i : i + 6]\n                # Set the length of the new substring plus one as the length of the palindrome substring.\n                length_plus_1 = i + 6\n        # Check if the substring is a palindrome.\n        if string[i : i + 7] == string[i : i + 7][::"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    pass\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    ans = 0\n    for i in range(len(stdin)):\n        for j in range(len(stdin)):\n            if not is_palindrome(stdin[i:j + 1]):\n                if j - i + 1 > ans:\n                    ans = j - i + 1\n    return str(ans)\n\n\ndef"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\nprint(solution(stdin))\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    for char in stdin:\n        length = 1\n        current = char\n        while True:\n            if len(current) > 1 and not is_palindrome(current):\n                if len(current) > length:\n                    length = len(current)\n                break\n            else:\n                current = current[1:]\n\n        print(length)\n    return ''\n\n\ndef"
    },
    {
        "number": 39,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('mew')\n    3\n    >>> solution('wuffuw')\n    5\n    >>> solution('qqqqqqqq')\n    0\n    \"\"\"\n    string = stdin.strip()\n    longest_non_palindrome = ''\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            substring = string[i:j + 1]\n            if not is_palindrome(substring):\n                if len(longest_non_palindrome) < len(substring):\n                    longest_non_palindrome = substring\n    return len(longest_non_palindrome)\n\n\ndef"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"rated\" if \"\".join(stdin.split()).count(\"2624\") else \"unrated\" if \"\".join(stdin.split()).count(\"2246\") else \"maybe\"\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    rating_before = []\n    rating_after = []\n    n = int(stdin.split('\\n')[0])\n    for i in range(n):\n        rating_before.append(int(stdin.split('\\n')[i].split(' ')[0]))\n        rating_after.append(int(stdin.split('\\n')[i].split(' ')[1]))\n    rating_after.reverse()\n    if n == 2:\n        return \"rated\" if rating_after[0] > rating_after[1] else \"unrated\"\n    else:\n        for i in range(n):\n            if rating_after[i] > rating_before[i]:\n                return \"rated\"\n        return \"unrated\"\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    before, after = [], []\n    for _ in range(n):\n        a, b = map(int, stdin.readline().split())\n        before.append(a)\n        after.append(b)\n\n    if any(x < y for x, y in zip(before, after)):\n        return \"rated\"\n    elif any(x > y for x, y in zip(before, after)):\n        return \"unrated\"\n    else:\n        return \"maybe\"\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    round_size = stdin.split('\\n')[0]\n    round_data = []\n    for i in range(1, len(stdin.split('\\n'))):\n        round_data.append(stdin.split('\\n')[i].split(' '))\n    for i in range(round_size):\n        if round_data[i][0] == round_data[i][1]:\n            return 'rated'\n    for i in range(round_size):\n        if round_data[i][0] > round_data[i][1]:\n            return 'rated'\n        else:\n            for j in range(round_size):\n                if round_data[j][0] > round_data[j][1]:\n                    return 'rated'\n    return 'unrated'\n\"\"\"\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    try:\n        n = int(stdin)\n        a = [list(map(int, stdin.split('\\n')[i].split(' '))) for i in range(n)]\n        stdout = ''\n        if len(set(a[0]))!= 1:\n            stdout = 'unrated'\n        else:\n            for i in range(1, n):\n                if a[i][0] > a[i - 1][0]:\n                    stdout = 'rated'\n                    break\n                elif a[i][0] < a[i - 1][0]:\n                    stdout = 'unrated'\n                    break\n        print(stdout)\n        return stdout\n    except ValueError:\n        print('Error Code:'+ str(ValueError))\n        return False\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n = int(stdin)\n    ratings = [int(x) for x in stdin.split()]\n    d = {}\n    for rating in ratings:\n        if rating in d:\n            d[rating] += 1\n        else:\n            d[rating] = 1\n    if len(d) == 2:\n        return 'unrated'\n    elif len(d) == 1:\n        return 'rated'\n    else:\n        return'maybe'\n    '''\n    n = int(stdin.split()[0])\n    ratings = list(map(int, stdin.split()))\n    f = 1\n    for i in range(n - 1):\n        if ratings[i]!= ratings[i + 1]:\n            f = 0\n            break\n    if f == 0:\n        return 'unrated'\n    else:\n        if ratings[0]!= ratings[1]:\n            return 'rated'\n        elif ratings[n - 1] < ratings[n - 2]:\n            return 'rated'\n        else:\n            return'maybe'\n\n'''\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # cast string to array of ints and send it to stdin\n    input_array = stdin.splitlines()\n    input_array = [list(map(int, array.split(\" \"))) for array in input_array]\n    # print(input_array)\n    # sort input_array by second element of inner list\n    input_array.sort(key=lambda x: x[1])\n    # print(input_array)\n    # iterate over the sorted input_array and check if new ratings are higher than previous one\n    rating_changed = False\n    for i in range(1, len(input_array)):\n        if input_array[i][0] > input_array[i-1][0]:\n            rating_changed = True\n    if rating_changed:\n        return \"rated\"\n    else:\n        return \"unrated\"\n    return \"maybe\"\n\ndef"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    # convert stdin to list of str\n    stdin = list(stdin.strip().split(\"\\n\"))\n    n = int(stdin[0])\n    ratings = [tuple(map(int, r.split())) for r in stdin[1:]]\n    # your code here\n    if n <= 1:\n        return \"unrated\"\n    if n == 2:\n        if ratings[0][0] == ratings[1][0]:\n            return \"unrated\"\n        return \"rated\"\n    if ratings[0][0] == ratings[1][0]:\n        return \"rated\"\n    for i in range(1, n):\n        if ratings[i][0]!= ratings[i - 1][0]:\n            if ratings[i][0] < ratings[i - 1][0]:\n                return \"rated\"\n            return \"unrated\"\n    return \"rated\"\n"
    },
    {
        "number": 40,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [tuple(map(int, stdin.split(' '))) for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if a[i][0] > a[j][0] and a[i][1] < a[j][1]:\n                return 'rated'\n    return 'unrated'\n\n\ndef"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    inputs = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    indices = {num: i for i, num in enumerate(inputs)}\n    distances = []\n    for i, num in enumerate(inputs):\n        if num == 0:\n            continue\n        j = 1\n        while i + j < len(inputs) and inputs[i + j]!= 0:\n            j += 1\n        if j == 1:\n            distances.append(0)\n        else:\n            distances.append(j)\n\n    ans = [indices[0]] + [indices[x] - indices[y] for x, y in zip(inputs[1:], inputs[:-1]) if x!= y]\n\n    return''.join(str(x) for x in ans)\n\n\ndef"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split(\" \")))\n    zero_idx = [i for i in range(n) if arr[i] == 0]\n    result = []\n    for i in range(n):\n        min_idx = min(zero_idx, key=lambda x: abs(i - x))\n        result.append(abs(min_idx - i))\n    return \" \".join(map(str, result))\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = [int(x) for x in stdin.split(\" \")]\n    x = [arr[i] for i in range(len(arr)) if arr[i] == 0]\n    arr = sorted([i for i in range(len(arr)) if arr[i]!= 0], key = lambda x: abs(x - len(arr) - 1))\n    print(\" \".join([str(arr[i] - len(arr) - 1) for i in range(len(arr)) if arr[i] == 0]))\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split(\"\\n\")[0].split(\" \")\n    a = list(map(int, a))\n    n = len(a)\n    d = [0] * n\n    z = 0\n    for i in range(n):\n        if a[i] == 0:\n            z = i\n        else:\n            d[i] = min([abs(i - z), abs(i - z - 1)])\n    print(\" \".join(map(str, d)))\n    return \"\"\n    pass\n\n\nsolution(\"9\\n2 1 0 3 0 0 3 2 4\")\nsolution(\"5\\n0 1 2 3 4\")\nsolution(\"7\\n5 6 0 1 -2 3 4\")\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Write your code here\n    n = int(stdin)\n    list1 = [int(x) for x in stdin.split()]\n    list2 = []\n    zero_list = []\n    for i in list1:\n        if i == 0:\n            zero_list.append(i)\n        else:\n            list2.append(i)\n    list2 = sorted(list2)\n    for i in zero_list:\n        for j in list2:\n            if j == 0:\n                list1[list1.index(j)] = 0\n                break\n            elif j < i:\n                list1[list1.index(j)] = list1[list1.index(i)]\n                break\n            elif j > i:\n                list1[list1.index(j)] = list1[list1.index(i)]\n    for i in list1:\n        print(i, end=' ')\n    return\n\n\nsolution(input())\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the minimum and maximum index of the array which contains only zeros\"\"\"\n    return \" \".join(map(str, solution2(stdin.split())))\n    pass\n\n\ndef"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''9\n   ... 2 1 0 3 0 0 3 2 4\n   ... ''')\n    '2 1 0 1 0 0 1 2 3'\n    >>> solution('''5\n   ... 0 1 2 3 4\n   ... ''')\n    '0 1 2 3 4'\n    >>> solution('''7\n   ... 5 6 0 1 -2 3 4\n   ... ''')\n    '2 1 0 1 2 3 4'\n    \"\"\"\n    return''.join(map(str, calc_dists(list(map(int, stdin.split())))))\n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    \n"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(s) for s in stdin.split()]\n    print(*[0] + [i - j for i, j in enumerate(a) if j == 0])\n    return \"\"\n\n\ndef"
    },
    {
        "number": 41,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    return stdin"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    return stdin.split()[0]"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n = stdin[0]\n    t = stdin[1:]\n    substring = t[0]\n    count = 0\n    for i in range(0, 2 ** n):\n        s = format(i, 'b')\n        if t in s:\n            count += 1\n    print(count)\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return '2'\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin\n    cycle_string = string\n    if string.find('0'):\n        cycle_string = string\n    else:\n        cycle_string = string\n    while len(cycle_string) < len(string):\n        if string.find('0'):\n            cycle_string = string\n        else:\n            cycle_string = string\n    print(cycle_string)\n    return string\n\n\ndef"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = len(s)\n    ans = 0\n    for i in range(2 ** n):\n        flag = 0\n        for j in range(n):\n            if (i >> j) & 1:\n                if s[j] == '0':\n                    flag += 1\n                else:\n                    flag -= 1\n        if flag == 0:\n            ans += 1\n    return str(ans)\n    pass\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 42,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    import math\n    from math import sqrt\n    input = stdin\n    n = int(input())\n    lst = []\n    for _ in range(n):\n        lst.append(input)\n    \n    res = math.inf\n    for i in range(n):\n        for j in range(i+1, n):\n            x1 = float(lst[i].split(\" \")[1])\n            y1 = float(lst[i].split(\" \")[2])\n            x2 = float(lst[j].split(\" \")[1])\n            y2 = float(lst[j].split(\" \")[2])\n            if (x1 * x2 + y1 * y2) == 0:\n                res = 0\n            else:\n                res = abs(sqrt(x1**2 + y1**2) - sqrt(x2**2 + y2**2))\n    \n    \n    return str(res)\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    pass\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the minimum non-oriented angle between two pairs of vectors.\n    >>> solution('4\\n-1 0\\n0 -1\\n1 0\\n1 1')\n    '3 4'\n    \"\"\"\n\n    _, *args = stdin.splitlines()\n\n    # find the intersection points of each line\n    # or the points in the intersection of two vectors\n    intersections = []\n    for i in range(len(args)):\n        for j in range(i + 1, len(args)):\n            # find the intersection of i and j\n            # calculate the vector from origin to the intersection point\n            # then find the angle between i and j\n            intersections.append(\n                find_intersection(args[i], args[j]))\n\n    # find the minimum angle\n    angle = float('inf')\n    for i in range(len(intersections)):\n        for j in range(i + 1, len(intersections)):\n            # if the angle between two vectors is smaller than the\n            # current minimum angle, then update it\n            angle = min(angle, calculate_angle(\n                intersections[i], intersections[j]))\n\n    return str(angle)\n\n\ndef"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = [[0] * 2 for _ in range(n)]\n    for i in range(n):\n        arr[i][0], arr[i][1] = [int(x) for x in stdin.split()]\n    return arr\n\ndef"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    vectors = []\n    for i in range(n):\n        x, y = map(int, stdin.readline().strip().split())\n        vectors.append((x, y))\n    for i in range(n):\n        for j in range(i + 1, n):\n            angle = abs(math.atan2(vectors[j][1], vectors[j][0]) - math.atan2(vectors[i][1], vectors[i][0]))\n            print(angle)\n            if angle < math.pi / 2:\n                return f'{i + 1} {j + 1}'\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return '6 5'"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    if n == 2:\n        return f\"{1} {2}\"\n    arr = [tuple(int(i) for i in stdin.split()) for n in range(n)]\n    arr = [(-i[0], -i[1]) if i[0] < 0 else (i[0], i[1]) for i in arr]\n    arr.sort()\n    return f\"{arr.index(arr[0]) + 1} {arr.index(arr[1]) + 1}\"\n"
    },
    {
        "number": 43,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    #pass\n    n = int(stdin)\n    if n == 0:\n        return (0,0)\n    elif n == 1:\n        return (1,1)\n    l = [list(map(int, stdin.split('\\n')[1:][i].split())) for i in range(n)]\n    l.sort(key = lambda x: x[0]**2 + x[1]**2)\n    a = 0\n    b = 0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            a,b = i,j\n            if a!= b:\n                break\n    return str(a+1)+' '+str(b+1)\n\ndef"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\nimport sys\nimport math\nimport array\nimport os\nimport time\nfrom collections import deque\nfrom itertools import combinations\nfrom collections import Counter\nimport copy\n\nDEBUG = False\n\ndef"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    d, k, a, b, t = [int(i) for i in stdin.split()]\n    # time = (d // (k + a)) * (k + a) + k * (b + a)\n    time = d // (k + a) * (k + a) + k * (b + a)\n    # print(time)\n    return str(time + t)\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    d, k, a, b, t = map(int, stdin.split(' '))\n    \n    return 0\n\ndef"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    distance, distance_of_car, time_of_car, time_of_foot, time_of_repair = map(int, stdin.split())\n    return str(distance * 2 + distance_of_car * time_of_car + (distance - distance_of_car) * time_of_foot + time_of_repair * (distance_of_car - 1))"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''Find the shortest time in which Vasiliy will reach the post office.'''\n    _, k, a, b, t = stdin.split()\n    return str(int(k) * int(a) + int(b))"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    (d, k, a, b, t) = [int(i) for i in stdin.split(' ')]\n    n = 0\n    while t - a > 0:\n        n += d\n        t -= a\n        d -= k\n        if t - b > 0:\n            n += d\n            t -= b\n            d = 0\n    return str(n)\n    \nprint(solution(input()))\n\n\ndef"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    d, k, a, b, t = [int(x) for x in stdin.split(' ')]\n    return f'{d / (k * (1 + a) + b) + t}'\n\"\"\"\n\n\ndef"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    d, k, a, b, t = [int(n) for n in stdin.split()]\n    t *= 1000\n    if k * t <= d:\n        return str(d)\n    else:\n        return str(d + k * t)\n    '''\n    d, k, a, b, t = [int(n) for n in stdin.split()]\n    t *= 1000\n    if k * t <= d:\n        return str(d)\n    else:\n        return str((k * t - d) * (a + b))\nprint(solution(input()))\n"
    },
    {
        "number": 44,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    d, k, a, b, t = map(int, stdin.split())\n    total = 0\n    \n    while total + a < d:\n        total += a\n        a *= 2\n        k *= 2\n    \n    total += a\n    total += (d - total) * b\n    \n    return str(total + k * t)\n\n\ndef"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    A = n // k\n    B = [A]\n    C = [0]\n    for i in range(1, k + 1):\n        B.append(A)\n        C.append(A // i * (i if i <= A else A % i))\n        for j in range(1, i):\n            C[i] = min(C[i], C[i - j] + 1)\n        if C[i] == 0:\n            return \" \".join(map(str, C))\n        A = B[i] - C[i]\n    return -1\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\"\"\"\nimport math\n\ndef"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Gets the greatest common divisor of numbers\n    with increasing sequence from stdin and\n    returns them.\n    :returns the greatest common divisor of numbers\n    with increasing sequence from stdin.\n    \"\"\"\n    n, k = [int(x) for x in stdin.split()]\n    a = [i for i in range(1, k + 1)]\n    l = []\n    for i in range(n):\n        l.append(i + 1)\n    while not is_valid(n, k, a, l):\n        a[-1] += 1\n        for i in range(len(a) - 1, -1, -1):\n            if a[i] > k:\n                a[i] = 1\n                l[i] = 0\n                for j in range(i - 1, -1, -1):\n                    l[j] = 0\n    return''.join([str(i) for i in a])\n\ndef"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = k\n    s = 0\n    res = []\n    while True:\n        if s + a < n:\n            s += a\n            res.append(a)\n            a += 1\n        elif s + a == n:\n            res.append(a - 1)\n            break\n        else:\n            break\n    res.sort()\n    if len(res) == 0:\n        return \"-1\"\n    else:\n        return \" \".join(map(str, res))\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n < k or n < 1 or k < 1:\n        return -1\n    res = []\n    a = n\n    while a >= 1:\n        if a % k == 0:\n            res.append(a)\n        a = a - 1\n    return \" \".join(map(str, res))\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    lst = list(range(1, k + 1))\n    while len(lst) > 1:\n        for i in range(k - 1):\n            lst[i] = lst[i] * lst[i + 1] // gcd(lst[i], lst[i + 1])\n        lst.pop(k - 1)\n    if lst[0] == n:\n        return''.join([str(i) for i in lst])\n    else:\n        return '-1'\n\n\ndef"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = [int(i) for i in stdin.split()]\n    \n    if n < k:\n        return -1\n    elif n == k:\n        return \" \".join([str(i) for i in range(1, k + 1)])\n    else:\n        a.sort(reverse = True)\n        ans = []\n        while sum(ans) < n:\n            ans.append(a.pop())\n        return \" \".join([str(i) for i in ans])\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    gcd = 0\n    result = []\n    if n == 1:\n        return str(1)\n    else:\n        for i in range(1, k+1):\n            if n % i == 0:\n                if gcd == 0:\n                    result.append(i)\n                    gcd = i\n                else:\n                    if gcd < i:\n                        result = [i]\n                        gcd = i\n            else:\n                pass\n    if len(result) == 0:\n        return '-1'\n    else:\n        return''.join([str(x) for x in result])\n"
    },
    {
        "number": 45,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    arr = [1] * k\n    for i in range(1, n - k + 1):\n        arr[i % k] = arr[(i - 1) % k] + 1\n    print(' '.join(map(str, arr))) if max(arr) <= n else print('-1')\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split()\n    n, m = int(line[0]), int(line[1])\n    return \"{}\\n\".format(sum(sum(n*m - i*(i+1)//2)//5 for i in range(1, n + m + 1)) % (10**9+7))\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    pairs = 0\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if i + j % 5 == 0:\n                pairs += 1\n    return str(pairs)\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return f\"{((n * (n - 1) // 2) - ((n - 1) * (m - 1) // 2)) % 1000000000}\"\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    divisible_by_5 = 0\n    for i in range(n):\n        for j in range(m):\n            if (i + j) % 5 == 0:\n                divisible_by_5 += 1\n    return str(divisible_by_5)\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    print(n * (m // 5) * (m // 5 + 1) // 2)\n    return ''"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # total pairs with: 1 <= x <= n and 1 <= y <= m\n    # and (x + y) % 5 == 0\n    n, m = map(int, stdin.split())\n    # total pairs = (n * m) / 2\n    print(int((n * m) / 2))\n    return\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(' ')]\n    count = 0\n    for i in range(n):\n        for j in range(m):\n            if i + j % 5 == 0:\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return len([1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225, 256, 289, 324, 361, 400, 441, 484, 529, 576, 625, 676, 729, 784, 841, 896, 961, 1024, 1089, 1156, 1225, 1296, 1369, 1444, 1521, 1600, 1681, 1764, 1849, 1936, 2025, 2116, 2289, 2364, 2441, 2528, 2617, 2700, 2881, 2976, 3065, 3256, 3449, 3636, 3725, 3816, 3909, 3996, 4089, 4184, 4275, 4470, 4561, 4650, 4753, 4848, 4945, 5034, 5123, 5202, 5291, 5378, 5477, 5626, 5715, 5804, 5893, 5980, 6059, 6138, 6227, 6316, 6425, 6514, 6603, 6690, 6779, 6868, 6957, 7046, 7135, 7222, 7331, 7430, 7519, 7608, 7717, 7816, 7915, 8014, 8113, 8202, 8291, 8378, 8477, 8626, 8715, 8804, 8893, 8980, 9069, 9158, 9247, 9326, 9415, 9504, 9593, 9742, 9831, 9920, 10019, 10198, 10287, 10376, 10455, 10544, 10633, 10722, 10811, 10900, 10989, 11178, 11277, 11366, 11455, 11554, 11643, 11732, 11821, 11910, 11999, 12088, 12177, 12266, 12355, 12444, 12533, 12622, 12709, 12798, 12877, 12776, 12755, 12644, 12333, 12222, 12111, 12010, 11999, 11998, 11997])\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    mod = 5\n    s = 0\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if i + j % mod == 0:\n                s += 1\n    return s\n    pass\n"
    },
    {
        "number": 46,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(num) for num in stdin.split(\" \")]\n    return str(sum([1 for i in range(n + 1) for j in range(m + 1) if i + j % 5 == 0]))\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    print(max([0] + [sum(a[i:i + n // x]) * x for i in range(0, len(a) - n // x + 1)]))\n    return \"\"\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find the maximum possible beauty of the array after applying one operation\n    >>> solution(\"5 -2\\n-3 8 -2 1 -6\")\n    22\n    >>> solution(\"12 -3\\n1 3 3 7 1 3 3 7 1 3 3 7\")\n    42\n    >>> solution(\"5 10\\n-1 -2 -3 -4 -5\")\n    0\n    \"\"\"\n    n, x = [int(i) for i in stdin.split()]\n    a = [int(i) for i in stdin.splitlines()[1:]]\n\n    # get max beauty of array\n    b = max([a[i] * x for i in range(n)])\n\n    # get max beauty after multiplying subarray with x\n    # an ugly way to get max beauty of subarray x\n    for i in range(1, n + 1):\n        b = max(b, sum([a[j] * x for j in range(i)]))\n\n    return b\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, x = [int(n) for n in stdin.split(\" \")]\n    a = [int(n) for n in stdin.split(\" \")[1].split(\" \")]\n    b = [0]\n    c = [0]\n    for num in a:\n        b.append(b[-1] + num)\n        c.append(c[-1] + num * x)\n    result = -1\n    for i in range(1, n + 1):\n        result = max(result, b[i + 1] - b[i] + c[i])\n    print(result)"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n, x = list(map(int, stdin.split()))\n    arr = list(map(int, stdin.split()))\n    if x == 0:\n        return str(sum(arr))\n    else:\n        return str(max([sum([arr[i] * x for i in range(j, j + x)]) for j in range(n - x + 1)]))\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"\"\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5 -2\\n-3 8 -2 1 -6\")\n    22\n    \"\"\"\n    n, x = map(int, stdin.split(\" \"))\n    a = list(map(int, stdin.split(\"\\n\")[1].split(\" \")))\n\n    def beauty(a: list) -> int:\n        return max(\n            sum(a[i : i + k]) * x for i in range(n - k + 1) for k in range(i + 1, n - i)\n        )\n\n    return max(\n        beauty(a),\n        sum(a) * x,\n    )\n"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    'Solution to the problem'\n\n    # Get input\n    n, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    # Compute answer\n    subarray = []\n    beauty = 0\n    for i in range(n):\n        subarray.append(x * a[i])\n        if sum(subarray) > beauty:\n            beauty = sum(subarray)\n\n    # Return answer\n    return str(beauty)\n\n\ndef"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, x = list(map(int, stdin.split(' ')))\n    array = list(map(int, stdin.split(' ')))\n    return str(max(0, sum(array[i] * x ** i for i in range(n))))\n\nprint(solution('5 10'))\nprint(solution('12 -3'))"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \u041a\u0430\u0436\u0434\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0447\u0438\u0441\u043b\u0430 n \u0438 x. \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0443\u044e \u0441\u0443\u043c\u043c\u0443 \u0432\u0441\u0435\u0445 \u043f\u043e\u0434\u0441\u0443\u043c\u043c.\n    :param stdin: \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0441\u0442\u0440\u043e\u043a\u0443 \u0441 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u043c\u0438\n    :return: \u0432\u043e\u0437\u0440\u0430\u0449\u0430\u0435\u0442 \u0441\u0442\u0440\u043e\u043a\u0443 \u0441 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0439 \u0441\u0443\u043c\u043c\u043e\u0439\n    \"\"\"\n    array = stdin.splitlines()[1]\n    array = list(map(int, array.split()))\n    beauty = 0\n    for i in range(len(array)):\n        array[i] = x * array[i]\n        beauty = max(beauty, sum(array[i - x + 1:i + 1]))\n    return beauty\n\n\nstdin = '5 10\\n-1 -2 -3 -4 -5\\n'\nprint(solution(stdin))"
    },
    {
        "number": 47,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n, x = [int(e) for e in stdin.split(\" \")]\n    nums = [int(e) for e in stdin.split(\" \")]\n    \n    dp = [[0] * n for _ in range(2)]\n    dp[0][0] = nums[0]\n    dp[1][0] = nums[0]\n    \n    for i in range(1, n):\n        dp[0][i] = max(dp[0][i - 1] * x + nums[i], dp[1][i - 1] + nums[i])\n        dp[1][i] = max(dp[0][i - 1], dp[1][i - 1] + nums[i])\n    \n    return max(max(dp[0]), max(dp[1]))\n    '''\n    \n    n, x = [int(e) for e in stdin.split(\" \")]\n    nums = [int(e) for e in stdin.split(\" \")]\n    \n    dp = [0] * n\n    dp[0] = nums[0]\n    \n    for i in range(1, n):\n        dp[i] = max(dp[i - 1] * x + nums[i], dp[i - 1] + nums[i])\n    \n    return max(dp)\n    \nprint(solution(input()))\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = list(map(int, stdin.split()))\n    row_count = 0\n    if k <= m:\n        row_count = n - 1\n    else:\n        k -= m\n        row_count = n\n    if m > n:\n        m = n\n    col_count = m\n    if k <= n:\n        row_count = n - 1\n    else:\n        k -= n\n        col_count = n\n    if m > n:\n        m = n\n    k %= m * n\n    return str(k + 1)\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\""
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    l = n * m\n    if l < k:\n        return str(k)\n    else:\n        return \"\".join(map(str, range(l-k+1, l+1)))\n\n\nprint(solution(input()))"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    return \"\""
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    return str(multiply(n, m, k))\n\n\ndef"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    n, m, k = map(int, stdin.split())\n    # k is number from 1 to n*m\n    lst = [[0 for j in range(m)] for i in range(n)]\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            lst[i-1][j-1] = i * j\n\n    lst.sort()\n\n    return lst[k-1][0]\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split(' '))\n    return str(m * k + 1)\n\"\"\"\n\ndef"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # print(stdin)\n    lst = list(map(int, stdin.split()))\n    print(lst)\n    return str(int(stdin.split()[-1]))\n"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # Write your code here\n    N, M, K = [int(x) for x in stdin.split()]\n    numbers = set()\n    for row in range(1, N+1):\n        for col in range(1, M+1):\n            numbers.add(row*col)\n\n    numbers = sorted(numbers)\n    return numbers[K-1]"
    },
    {
        "number": 48,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n, m, k = [int(x) for x in stdin.split()]\n    array = [[(i*j) % m for j in range(1, m+1)] for i in range(1, n+1)]\n    print(array[k-1][-1])\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n = int(stdin)\n    print(list(str(n))[n - 1])\n\n    return solution\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the k-th digit of the infinite sequence\n    (starting with 123456789101112131415161718192021222324252627282930313233343536...)\"\"\"\n    return str(123456789101112131415161718192021222324252627282930313233343536)[int(stdin) - 1]\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    num = 1\n    while k:\n        k -= 1\n        num *= 10\n        num += 9\n    num //= 10 ** 12\n    return str(num % 10)\n\nprint(solution('7'))\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin)\n\n    def digit_index(n: int) -> int:\n        \"\"\"returns the index of the digit corresponding to a given number\"\"\"\n        assert 0 <= n <= 9\n        return n + 1\n\n    def digit(n: int) -> int:\n        \"\"\"returns the digit corresponding to a given number\"\"\"\n        assert 0 <= n <= 9\n        return n % 10\n\n    # note: k starts at 1\n    num = int(input())\n    counter = 0\n    while num > 0:\n        num = num // 10\n        counter += 1\n\n    k = K\n    while counter < K:\n        # note: k starts at 1\n        k = k % counter\n        num = num * 10 ** (counter - 1)\n        counter += 1\n\n    return str(digit(num // 10 ** (counter - 1)))\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    number = '123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899'\n    return number[k-1]\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    def fibonacci_number(n):\n        return fibonacci_number(n-2) + fibonacci_number(n-1)\n\n    return str(fibonacci_number(k) % 10)\n\ndef"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    a
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = 0\n    i = 1\n    while n > 0:\n        s += 9 * i\n        i += 1\n        n -= 1\n    return str(s)[n - 1]\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    return str(123456789101112131415161718192021222324252627282930313233343536)\n\nprint(solution(\"7\"))\n"
    },
    {
        "number": 49,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    ans = 0\n    for i in range(1, 10 ** 12):\n        ans += i % 10\n        if i % 10 ** 11 == k - 1:\n            return str(ans)[k - 1]\n    return None\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, r = [int(x) for x in stdin.split(\"\\n\")[0].split(\" \")]\n    prices = [int(x) for x in stdin.split(\"\\n\")[1].split(\" \")]\n\n    # best_sum = 0\n    # best_bound = []\n\n    # for p in prices:\n    #     sum = 0\n    #     bound = []\n\n    #     for i in range(n):\n    #         sum += p\n    #         if sum <= m:\n    #             bound.append(i)\n    #         else:\n    #             break\n\n    #     if sum <= m:\n    #         best_sum = sum\n    #         best_bound = bound\n\n    # print(best_bound)\n\n    # print(best_sum)\n\n    bound = [0]\n    bound.extend(\n        list(\n            np.cumsum(\n                np.sort(prices)[::-1]\n            )\n        )\n    )\n    bound = bound[:-1]\n\n    left, right = 0, m\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        sum = 0\n\n        for i, p in enumerate(bound):\n            if i + 1 > mid:\n                break\n\n            sum += p\n\n        if sum > m:\n            right = mid - 1\n        else:\n            left = mid + 1\n\n    print(bound)\n\n    return str(bound[left - 1])\n\n\nsolution(stdin)\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # TODO\n\nprint(solution(input()))\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    (n, m, r) = (int(i) for i in stdin.split('\\n')[0].split(' '))\n    (s, b) = ([int(i) for i in stdin.split('\\n')[1].split(' ')],\n              [int(i) for i in stdin.split('\\n')[2].split(' ')])\n    s.sort()\n    b.sort(reverse=True)\n    return n + m + sum(s) - sum(b[:r])\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\nprint(solution(input()))\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    n, m, r = map(int, stdin.readline().split())\n    s = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    if n < m:\n        n, m, s, b = m, n, b, s\n    \n    dp = [[0 for _ in range(m+1)] for _ in range(n+1)]\n    \n    for i in range(n):\n        for j in range(m):\n            dp[i+1][j+1] = max(dp[i][j+1], dp[i+1][j])\n            dp[i+1][j+1] = max(dp[i][j+1], dp[i+1][j]+s[i]*b[j])\n    \n    return dp[-1][-1]\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, r = list(map(int, stdin.split()))\n    s = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n\n    minS, minB = float('inf'), float('inf')\n    maxS, maxB = -1, -1\n    for i in range(n):\n        minS = min(minS, s[i])\n        maxS = max(maxS, s[i])\n    for i in range(m):\n        minB = min(minB, b[i])\n        maxB = max(maxB, b[i])\n    return n + m - (n // (maxS - minS + 1) + m // (maxB - minB + 1)) * (maxS - minS + 1) * (maxB - minB + 1)\n\n\n\nprint(solution('2 2 50\\n5 7\\n4 2'))\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, r = map(int, stdin.split('\\n')[0].split())\n    lst_buying = list(map(int, stdin.split('\\n')[1].split()))\n    lst_selling = list(map(int, stdin.split('\\n')[2].split()))\n    lst_profit = []\n    for item in lst_selling:\n        if r >= item:\n            lst_profit.append(r - item)\n        else:\n            lst_profit.append(0)\n    if not len(lst_profit) == m:\n        return str(min(lst_profit))\n    return str(max(lst_profit))\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, r = map(int, stdin.split('\\n')[0].split())\n    buy = list(map(int, stdin.split('\\n')[1].split()))\n    sell = list(map(int, stdin.split('\\n')[2].split()))\n\n    buy.sort(reverse=True)\n    sell.sort()\n\n    res = 0\n    for i in range(m):\n        if buy and sell[i] > buy[-1]:\n            res += sell[i] - buy[-1]\n            buy[-1] = sell[i]\n\n    return res\n\nprint(solution(stdin))\n\"\"\"\n\nn, m, r = map(int, input().split())\nbuy = list(map(int, input().split()))\nsell = list(map(int, input().split()))\n\nbuy.sort(reverse=True)\nsell.sort()\n\nres = 0\nfor i in range(m):\n    if buy and sell[i] > buy[-1]:\n        res += sell[i] - buy[-1]\n        buy[-1] = sell[i]\n\nprint(res + r)\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, r = list(map(int, stdin.split(' ')))\n    a = list(map(int, stdin.split(' ')))\n    b = list(map(int, stdin.split(' ')))\n    a.sort()\n    b.sort()\n    \n    ans = 0\n    for i in range(n):\n        ans += a[i]\n    for j in range(m):\n        ans -= b[j]\n    \n    return ans\n"
    },
    {
        "number": 50,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, r = map(int, stdin.split('\\n')[0].split())\n    shares = [int(x) for x in stdin.split('\\n')[1].split()]\n    buy_limit = max(shares)\n    sell_limit = max(shares)\n    buy_sum = 0\n    sell_sum = 0\n    for i in range(n):\n        if i < m:\n            buy_sum += min(shares[i], buy_limit)\n        else:\n            sell_sum += min(shares[i], sell_limit)\n    return sell_limit - buy_sum\n\n\n\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\ndef"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin.readline())\n    cache = {0: 0, 1: 1, 2: 1}\n    for i in range(3, n + 1):\n        cache[i] = cache[i - 1] + i\n    if cache[n] % 2!= 0:\n        return -1\n    return cache[n] // 2\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(visited: List[int], result: List[List[int]], curr: List[int], n: int):\n        if n == 0:\n            result.append(curr.copy())\n        elif len(visited) == n:\n            return\n        else:\n            visited.append(0)\n            curr.append(0)\n            dfs(visited, result, curr, n - 1)\n            visited.pop()\n            curr.pop()\n            curr.append(1)\n            dfs(visited, result, curr, n - 1)\n            visited.pop()\n            curr.pop()\n            curr.append(2)\n            dfs(visited, result, curr, n - 1)\n            visited.pop()\n            curr.pop()\n    n = int(stdin)\n    result = []\n    visited = []\n    curr = []\n    dfs(visited, result, curr, n)\n    print(len(result))\n    print('\\n'.join(map(lambda x:''.join(map(lambda y: str(y), x)), result)))"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin.rstrip().lstrip().split('\\n')[0]\n    n = int(n)\n    print(n)\n    count = 0\n    for i in range(1, int(n/2)+1):\n        count = int(n/2) * int(i) * (int(i)-1)\n        print(count)\n    if n % 2!= 0:\n        count = int(n/2) * int(n/2) * int(n/2)\n        print(count)\n    else:\n        print(-1)\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    number_of_games: int = int(stdin.readline())\n    if number_of_games % 2!= 0:\n        return -1\n    teams: int = number_of_games // 2\n    while (teams > 0):\n        if number_of_games == teams * (teams - 1) // 2:\n            return teams\n        teams = teams - 1\n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Gets the number of games to play, and returns the total number of teams to invite.\n    \"\"\"\n    # total number of teams\n    N = int(stdin)\n    if N < 2:\n        return -1\n\n    # the number of teams that will play\n    invite = 1\n    total = 0\n\n    # get the total number of games that will be played\n    while total < N:\n        invite += 1\n        total = invite * (invite - 1) // 2\n\n    # the number of teams that will play cannot be greater than the total number of teams\n    return invite - 1\n\n\"\"\"\ndef"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    numberOfGames = int(stdin)\n    numberOfTeams = 1\n    while numberOfGames >= numberOfTeams * (numberOfTeams - 1) / 2:\n        numberOfTeams += 1\n    if numberOfTeams % 2 == 1:\n        return -1\n    return numberOfTeams\n    \n"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(n)"
    },
    {
        "number": 52,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().rstrip()\n    b = list(map(int, stdin.readline().rstrip().split()))\n    \n    b = [i + 1 for i in b]\n    \n    b = [0] + b + [0]\n    \n    # print(b)\n    \n    # n = 2\n    # s = \"abac\"\n    # b = [1, 2, 3, 4, 5, 6, 7, 8]\n    \n    \n    dp = [[0 for _ in range(n + 2)] for _ in range(n + 2)]\n    \n    for i in range(1, n + 1):\n        dp[i][i] = max(b[i - 1], b[i + 1])\n    \n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            dp[i][j] = max(dp[i - 1][j - 1] + dp[i][j], dp[i][j], b[i])\n    \n    # print(dp)\n    \n    max_sum = 0\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if dp[i][j] > max_sum:\n                max_sum = dp[i][j]\n    \n    return max_sum\n    \n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.split('\\n')[1].split(' ')\n    b = stdin.split('\\n')[2].split(' ')\n    # print(s)\n    # print(b)\n    c = []\n    for i in b:\n        c.append(int(i))\n    # print(c)\n\n    r = []\n    for i in range(n):\n        if i == 0:\n            r.append(int(s[0]) + c[i])\n        else:\n            r.append(int(s[i]) + r[i - 1])\n    # print(r)\n    # print(max(r))\n    return max(r)\n\n\ndef"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split('\\n')[1]\n    # n = int(stdin.split('\\n')[0])\n    n = len(s)\n\n    indices = [int(i) for i in stdin.split('\\n')[2].split(' ')]\n\n    res = 0\n\n    for i in range(n):\n        res += indices[i] if i == indices[i] else indices[i] + (n - i)\n    return res"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(8, 'abacabac', [1, 1, 1, 1, 1, 1, 1, 1])\n    8\n    \"\"\"\n    s = stdin\n    N = int(stdin.split('\\n')[0])\n    ans = 0\n    for i in s.split('\\n')[1:]:\n        nums = [int(n) for n in i.split(' ')]\n        beauties = 0\n        for j in range(0, N // 2 + 1):\n            beauties += nums[j]\n        for j in range(0, N // 2):\n            beauties += nums[j] * (j + 1)\n        ans = max(ans, beauties)\n    return ans\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().rstrip()\n    b = list(map(int, stdin.readline().rstrip().split()))\n    max_beauty = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if s[i] == s[j]:\n                continue\n            beauty = sum(b[i:j+1])\n            if beauty > max_beauty:\n                max_beauty = beauty\n    return max_beauty\n\n\ndef"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve exercise.\"\"\"\n    lenght = int(stdin.readline())\n    string = stdin.readline()\n    ans = 0\n    for i in range(lenght):\n        if i == lenght-1:\n            ans += string.count(string[i])\n        else:\n            ans += string.count(string[i]) - 1\n    return ans\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_numbers = [int(x) for x in stdin.split('\\n')[1].split()]\n    numbers_of_characters = stdin.split('\\n')[0]\n    input_string = stdin.split('\\n')[2]\n\n    n = len(input_string)\n    current_max = 0\n    current_max_string = ''\n    for i in range(0, len(input_string)):\n        if n % 2 == 0:\n            new_max = 1\n            for k in range(0, int(n/2)):\n                if input_string[i+k] == input_string[k]:\n                    new_max += 1\n            if new_max > current_max:\n                current_max = new_max\n                current_max_string = input_string[i]\n        else:\n            if input_string[i] == input_string[i+int((n-1)/2)]:\n                current_max += 1\n                current_max_string = input_string[i]\n    return current_max_string\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Ivan has a string s consisting of n lowercase Latin letters. He wants to form some string t that will be an antipalindromic permutation of s. Also Ivan has denoted the beauty of index i as b_{i}, and the beauty of t as the sum of b_{i} among all indices i such that s_{i} = t_{i}.\n\nIvan has a string s consisting of n lowercase Latin letters. He wants to form some string t that will be an antipalindromic permutation of s. Also Ivan has denoted the beauty of index i as b_{i}, and the beauty of t as the sum of b_{i} among all indices i such that s_{i} = t_{i}.\n\nHelp Ivan to determine maximum possible beauty of t the can get.\n\n    :param stdin: string of lowercase latin letters\n    :return: one integer that represents the max sum of b_{i} among all indices i such that s_{i} = t_{i}\n    '''\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    b = list(map(int, stdin.readline().strip().split()))\n    max_b = 0\n    t = ''\n    for i in range(n):\n        if b[i] > max_b:\n            max_b = b[i]\n            t = s[i]\n        elif b[i] == max_b:\n            t += s[i]\n    if n % 2 == 0:\n        t += s[-1]\n    return t"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    s = stdin[1]\n    d = stdin[2]\n\n    numbers = []\n    for num in d:\n        numbers.append(int(num))\n    \n    length = len(s)\n\n    if length == n:\n        sum = 0\n        for i in range(length):\n            sum += numbers[i]\n            print(sum)\n    elif length!= n:\n        sum = 0\n        for i in range(length):\n            sum += numbers[i]\n        for i in range(length,n):\n            sum += numbers[length-1-i]\n        \n        print(sum)\n\nsolution(stdin)\n"
    },
    {
        "number": 53,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin.readline())\n    s = stdin.readline()\n    b = list(map(int, stdin.readline().split()))\n    \n    ans = 0\n    for i in range(n):\n        ans = max(ans, b[i])\n    return ans + sum(b)\n\nprint(solution(input()))\n\n\ndef"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    items, weights = list(map(int, stdin.split(' ')))\n    return \"YES\" if items % 2 == 0 else \"NO\"\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    w, m = map(int, stdin.split())\n    return \"YES\" if m <= w else \"NO\"\n\"\"\"\n\n\ndef"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"The solution to the Vanya weighting problem.\"\"\"\n    w, m = map(int, stdin.split())\n    sorted_weights = [2] + sorted(list(set(range(3, w + 1, 2))), reverse=True)\n    weights = [i // 2 for i in sorted_weights]\n    left_weights = [i % 2 for i in sorted_weights]\n    if sum(left_weights) == m:\n        if left_weights.count(1) == 1:\n            print('YES')\n        else:\n            print('NO')\n    else:\n        print('NO')\n    return ''\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    weight, mass = map(int, stdin.split())\n    print(\"YES\" if mass % weight == 0 or mass % weight == weight - 1 else \"NO\")\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    m, w = map(int, stdin.split())\n    if 2 * m == w * 2 * m:\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 54,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    \u041f\u043e\u0441\u0442\u0430\u0440\u0430\u0439\u0442\u0435\u0441\u044c \u0440\u0435\u0448\u0438\u0442\u044c \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u0431\u0435\u0437 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0446\u0438\u043a\u043b\u043e\u0432 \u0438 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u0439!\n    '''\n    #...\n\nprint(solution(input()))\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    base = n - sum([2 ** i for i in range(k)])\n\n    if base > 0:\n        return \"No\"\n\n    d = [0] * (k + 1)\n    for i in range(k):\n        d[i + 1] = (base + i + 1) // (k - i)\n        base = base - d[i] * (k - i)\n\n    if base == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.strip().split(\" \")]\n    res = [1] * k\n    if k == 1:\n        return \"Yes\" if n == 1 else \"No\"\n    while True:\n        s = sum([2 ** x for x in res])\n        if s == n:\n            res.sort()\n            return \"Yes\" + \" \" + \" \".join([str(x) for x in res])\n        elif s > n:\n            return \"No\"\n        else:\n            res[-1] += 1\n            for i in range(len(res) - 1, 0, -1):\n                if res[i] > res[i - 1]:\n                    res[i - 1] += 1\n                    break\n            else:\n                res[0] += 1\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n\n    max_power = [2 ** x for x in range(k)]\n    min_power = [2 ** x for x in range(k)]\n    max_power.sort(reverse=True)\n    min_power.sort()\n\n    min_sum = sum(max_power)\n    max_sum = sum(min_power)\n    if k == 1:\n        return \"Yes\\n1 1\" if min_sum > n else \"No\\n0 0\"\n\n    for i in range(k):\n        max_power[i] = max_power[i] // 2\n        min_power[i] = min_power[i] // 2\n\n    max_power.sort(reverse=True)\n    min_power.sort()\n    min_sum = sum(max_power)\n    max_sum = sum(min_power)\n    if min_sum > n:\n        return \"No\\n0 0\"\n    elif max_sum < n:\n        return \"No\\n0 0\"\n    else:\n        result = [0] * k\n        for i in range(k):\n            result[i] = max_power[i] if max_power[i] > min_power[i] else min_power[i]\n        return \"Yes\\n\" + \" \".join([str(x) for x in result])\n\n\n\ndef"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution to the problem in the exercise.\n    \n    Parameters:\n        stdin (str): The input string\n\n    Returns:\n        str: The solution for the problem\n    \"\"\"\n    n, k = [int(x) for x in stdin.split(' ')]\n    return 'Yes' if k > 1 and n == sum(2 ** i for i in range(k)) else 'No'\n\"\"\"\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    found = False\n    for i in range(1, n - k + 1):\n        for j in range(i + 1, n - k + 1):\n            if sum([2 ** a for a in range(i, i + k)]) + sum([2 ** b for b in range(j, j + k)]) == n:\n                found = True\n                res = [2 ** a for a in range(i, i + k)] + [2 ** b for b in range(j, j + k)]\n                res = [str(a) for a in res]\n                res =''.join(res)\n                return res\n    return 'No' if not found else 'Yes\\n' + res"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"No\"\n"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the sequence with the smallest sum that equals the given n.\n    Returns None if there is no such sequence.\n    \"\"\"\n\n    # Read the input\n    n, k = stdin.split()\n    n, k = int(n), int(k)\n\n    # Start the binary search.\n    start = 0\n    end = 10 ** 18\n    while end > start:\n        mid = start + (end - start) // 2\n        if can_sum_to_n(mid, k):\n            end = mid\n        else:\n            start = mid + 1\n    # Found the result\n    if can_sum_to_n(start - 1, k):\n        # Find the lexicographically largest solution with the lowest value.\n        return \" \".join(map(str, next(seq for seq in lexicographical_solutions(start - 1)\n                                      if is_lexicographically_largest(seq, k))))\n    return None\n\ndef"
    },
    {
        "number": 55,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    values = []\n    for i in range(k):\n        val = int(stdin.split(' ')[i], 2)\n        values.append(val)\n    \n    # Find the value of the k+1 first numbers to fulfill the condition\n    values.sort(reverse=True)\n    values = values[:k+1]\n    \n    if n > sum(values):\n        return \"No\"\n    \n    k_max = 0\n    for i in range(k+1):\n        if values[i] > k_max:\n            k_max = values[i]\n    \n    binary_values = []\n    for i in range(k):\n        binary_values.append(bin(values[i])[2:])\n        \n    binary_values.sort()\n    binary_values = binary_values[::-1]\n    \n    res = []\n    for i in range(k):\n        res.append(binary_values[i][0])\n        res.append(binary_values[i][1])\n        if binary_values[i][0] == binary_values[i][1] == '1':\n            res.append(binary_values[i][2])\n    \n    return \"Yes\\n\" + \" \".join(map(str, res))\n\ndef"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    # convert string input to int\n    n, t = map(int, stdin.split())\n    # do some math to find the output\n    # return the output\n    return n - 1"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    h, t = map(int, stdin.split())\n    return ((h+1)//2) ** t\n\nprint(solution(input()))\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split(' '))\n    return t // n if t % n == 0 else t // n + 1"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    glass = 1\n    for i in range(n):\n        glass += 2 ** i\n    return glass - t\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, t = [int(i) for i in stdin.split()]\n    glass = {i:0 for i in range(1, n + 1)}\n    lst = [(t, len(glass))]\n    while lst:\n        time, cap = lst.pop(0)\n        cap = cap - 1\n        for i in range(1, cap):\n            if glass[i + 1] < cap:\n                glass[i + 1] += 1\n            else:\n                glass[i + 1] = cap\n        for i in range(n + 1):\n            if glass[i] >= cap:\n                glass[i] = cap\n            elif glass[i] > 0:\n                lst.append((time + 1, cap))\n    return sum(glass.values())\nprint(solution(input()))\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    glass_number = [1]\n    glass_width = 2\n    for _ in range(n):\n        glass_number.append(glass_width)\n        glass_width += 2\n    glass_width -= 2\n    glass_number.append(glass_width)\n    for i in range(t):\n        for j in range(len(glass_number)-1, 0, -1):\n            if glass_number[j] == glass_number[j-1]:\n                glass_number[j] = glass_number[j] * 2\n                glass_number[j-1] = glass_number[j]\n            else:\n                break\n    print(glass_number)\n    return glass_number.count(glass_width)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''Gets a string of input numbers, the max height and the number of seconds\n    Vlad will be pouring from the bottle.\n\n    Prints the number of completely full glasses.\n    '''\n    num_levels, seconds = map(int, stdin.split(' '))\n    num_levels = num_levels - 1\n    num_complete = 0\n\n    for level in range(num_levels + 1):\n        num_complete += (2 ** level) // 2\n    num_complete -= 1\n    print(num_complete)\n\n\ndef"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split(' '))\n    levels = n\n    times = t\n    while levels > 0:\n        times = times // 2\n        levels -= 1\n    return times\n"
    },
    {
        "number": 56,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\nheight, seconds = map(int, stdin.split(' '))\nlevel = 1\nwhile seconds > 0:\n    if seconds > height:\n        level += 1\n        seconds -= height\n    else:\n        level += seconds // (height - 1)\n        seconds = seconds % (height - 1)\n        break\nprint(level)\n\ndef"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2\n   ... 1 1\n   ... 0 0''')\n    '1'\n    >>> solution('''1\n   ... 1 1\n   ... 0 0''')\n    '-1'\n    \"\"\"\n   ..."
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    ans = 0\n    points = []\n    for i in range(n):\n        x, y = map(int, stdin.readline().split())\n        points.append((x, y))\n    x1, y1 = points[0]\n    x2, y2 = points[1]\n    ans += (x2 - x1) * (y2 - y1)\n    for i in range(2, n):\n        x1, y1 = points[i - 1]\n        x2, y2 = points[i]\n        ans += (x2 - x1) * (y2 - y1)\n    return ans\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    num_pts = int(stdin.readline().strip())\n    pts = []\n    for _ in range(num_pts):\n        x, y = map(int, stdin.readline().strip().split())\n        pts.append((x, y))\n    pts = tuple(pts)\n    return str(Rectangle(pts).area())\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        print(-1)\n        return\n    count = 0\n    x = []\n    y = []\n    for i in range(n):\n        x_1, y_1 = map(int, stdin.split('\\n')[i].split())\n        x.append(x_1)\n        y.append(y_1)\n        if x_1 == 0 or y_1 == 0:\n            count += 1\n    if count == 4:\n        print(1)\n        return\n    if count == 2:\n        a = x[0]\n        b = x[1]\n        c = y[0]\n        d = y[1]\n        print((a*c-b*d)/2)\n        return\n    print(-1)\n    return\n\nprint(solution(input()))\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Calculates the area of a rectangle from n points.\n    \"\"\"\n    n = int(stdin.readline())\n    rect = {\n        \"x\": set(),\n        \"y\": set()\n    }\n    for _ in range(n):\n        x, y = map(int, stdin.readline().split())\n        rect[\"x\"].add(x)\n        rect[\"y\"].add(y)\n\n    if len(rect[\"x\"])!= 2 or len(rect[\"y\"])!= 2:\n        return \"-\"\n    return str(abs(rect[\"x\"].difference(rect[\"y\"]).pop() * rect[\"y\"].difference(rect[\"x\"]).pop()))\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # get n from input\n    n = int(stdin.readline().rstrip())\n    if n == 1:\n        return -1\n    else:\n        # get list of points from input\n        points = list()\n        for _ in range(n):\n            x, y = map(int, stdin.readline().rstrip().split())\n            points.append([x, y])\n        # create the rectangle and get the area\n        rectangle = Rectangle(points)\n        area = rectangle.area()\n        print(area)\n        return area\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def area(points):\n        return abs(sum(points[i][0] * points[(i + 1) % len(points)][1] - points[(i + 1) % len(points)][0] * points[i][1] for i in range(len(points)))) / 2\n\n    n = int(stdin)\n    points = [tuple(map(int, line.split())) for line in stdin.strip().splitlines()]\n\n    return str(area(points) if len(points) == 4 else -1)\n"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for _ in range(n):\n        x, y = [int(c) for c in stdin.split(' ')]\n\n\"\"\"\n\nfrom functools import reduce\nfrom operator import mul\nfrom itertools import combinations\n\ndef"
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 57,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    nums = []\n    for _ in range(n):\n        nums.append(tuple(map(int, stdin.readline().split())))\n    # nums = list(tuple(map(int, input().split())) for _ in range(n))\n    # print(nums)\n    res = calc(nums)\n    return str(res) if res!= float('inf') else '-1'\n\n\ndef"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = [int(x) for x in stdin.split('\\n')]\n    print(min(a, b, n - a - b))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    line_1, line_2, line_3 = stdin.split(\"\\n\")\n    length_bars = int(line_1)\n    length_frame_1 = int(line_2)\n    length_frame_2 = int(line_3)\n    if length_bars < length_frame_1 + length_frame_2:\n        return str(length_bars)\n    else:\n        return str(length_bars - 2 * (length_frame_1 + length_frame_2))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = [int(num) for num in stdin.split('\\n')]\n    return n - 2*(a + b)"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split('\\n'))\n\n    # 1\n    # a, b, n = map(int, input().split('\\n'))\n    min_bars = a + b\n    max_bars = a * 2 + b\n    return min(min_bars, max_bars) - max_bars\n    #\n    # 2\n    # if n <= max(a, b):\n    #     return n\n    #\n    # return a + b + n\n    #\n    # 3\n    # return max(a, b) + n\n    #\n    # 4\n    # a, b = map(int, input().split('\\n'))\n    #\n    # if max(a, b) * 2 + max(a, b) <= n:\n    #     return max(a, b) * 2\n    #\n    # return max(a, b) * 2 + n\n\n\"\"\"\nimport math\ndef"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = int(stdin.split('\\n')[1])\n    b = int(stdin.split('\\n')[2])\n    \n    return '\\n'.join([str(n - max(a, b) + 1), str(n - max(a, b))])\n\n\"\"\"\n\n\n\ndef"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, n = map(int, stdin.split('\\n'))\n    return str(a * 2 + b * 2)\n\n\nimport unittest\n\n\nclass TestSolution(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(solution('8\\n1\\n2'), '1')\n        self.assertEqual(solution('5\\n3\\n4'), '6')\n        self.assertEqual(solution('6\\n4\\n2'), '2')\n        self.assertEqual(solution('20\\n5\\n6'), '2')\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = int(stdin.readline())\n    b = int(stdin.readline())\n    return a * 2 + b * 2 - n\n    pass\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('8\\n1\\n2')\n    '1'\n    >>> solution('5\\n3\\n4')\n    '6'\n    >>> solution('6\\n4\\n2')\n    '4'\n    >>> solution('20\\n5\\n6')\n    '2'\n    \"\"\"\n    return str(min(int(stdin.split('\\n')[0]), 2 * int(stdin.split('\\n')[1])))\n"
    },
    {
        "number": 58,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    # 1\n    In the first example one wooden bar is enough,\n    since the total length of all six sides of the\n    frames for two doors is 8.\n    # 2\n    6 wooden bars is enough,\n    because for each side of the frames the new\n    wooden bar is needed.\n    '''\n    pass\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport sys\n\nN = int(sys.stdin.readline())\nA = list(map(int, sys.stdin.readline().split()))\nS = sys.stdin.readline().rstrip()\n\n\ndef"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if len(set(stdin)) == 1 else 'NO'\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if stdin == 'YES' else 'NO'\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    b = [int(x) for x in stdin.split()]\n    \n    return 'YES' if a == len(set(b)) and sorted(b) == b else 'NO'\n    \n    \n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return 'NO' if len(set(stdin))!= len(stdin) else 'YES'\n\"\"\"\n\ndef"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(c) for c in stdin]\n    result = [0] * len(a)\n    for i in range(len(a) - 1):\n        if i % 2 == 0:\n            if a[i] > a[i + 1]:\n                result[i], result[i + 1] = a[i + 1], a[i]\n                a[i], a[i + 1] = a[i + 1], a[i]\n    if result == a:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n\"\"\"\nfrom collections import Counter\nfrom functools import reduce\n\ndef"
    },
    {
        "number": 59,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if stdin == '01110' else 'NO'\n\n\ndef"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Vasya's seat in the airplane was defined with the following indices:\n        1st row: 1 -> f\n        2nd row: 3 -> e\n        3rd row: 5 -> d\n        4th row: 7 -> c\n        5th row: 9 -> b\n        6th row: 11 -> a\n        7th row: 13 -> z\n        8th row: 15 -> y\n        9th row: 17 -> x\n        10th row: 19 -> w\n    Vasya's seat in the airplane is denoted as string \"z\"\n    '''\n\n    return stdin\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    ans, row, seat = 0, 1, 'a'\n    for i in stdin:\n        row, seat = (1, 'a') if i == '1' else (row + 2, 'f')\n        ans += row\n    return ans\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    arr = stdin.split('\\n')\n    lst = [i for i in arr[0]]\n    total = 0\n    for i in range(len(lst) - 1):\n        if lst[i] == 'a' and lst[i + 1] == 'f':\n            total += 6\n        if lst[i] == 'd' and lst[i + 1] == 'c':\n            total += 6\n    print(total)\n    return str(total)\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    seat = stdin.split()[0]\n    row = int(seat[:-1])\n    seat = seat[-1]\n    if seat in 'ab':\n        seat = 'c'\n    elif seat in 'cdf':\n        seat = 'a'\n    else:\n        seat = 'e'\n    if seat == 'a':\n        row -= 1\n    elif seat == 'f':\n        row += 1\n    row = row % (10 ** 6)\n    return str(row)\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    num_seat_in_row = stdin.split(' ')[0]\n    seat = stdin.split(' ')[1]\n    row = num_seat_in_row[0]\n    seat_num = num_seat_in_row[1]\n    \n    if seat == 'c':\n        return int(row) * 2\n    elif seat == 'b':\n        return int(row)\n    elif seat == 'd':\n        return int(row) + 1\n    elif seat == 'e':\n        return int(row) + 2\n    elif seat == 'a':\n        return int(row) + 2\n    elif seat == 'f':\n        return int(row) + 3\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    ans = 0\n    for i in range(len(stdin)):\n        if stdin[i] == \"a\" or stdin[i] == \"f\":\n            ans += i\n        elif stdin[i] == \"b\" or stdin[i] == \"e\":\n            ans += len(stdin) - i - 1\n        elif stdin[i] == \"c\" or stdin[i] == \"d\":\n            ans += i * 2 + 1\n    return str(ans)\n\"\"\"\n\n\ndef"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    rows = stdin.split(\"\\n\")\n    n, s = rows[0].split(\" \")\n    n = int(n)\n    s = s.lower()\n    print(len(rows) - 1 - (rows[n].count(s) - 1) // 2)\n    return str(len(rows) - 1 - (rows[n].count(s) - 1) // 2)\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split(\"\\n\")\n    for i in range(len(input)):\n        input[i] = [j for j in input[i].split()]\n    for row in range(len(input)):\n        input[row][0] = int(input[row][0])\n        input[row][1] = input[row][1]\n        for char in input[row][1]:\n            if char == \"a\" or char == \"d\":\n                input[row][1] = input[row][1].replace(char, \"\")\n    for row in range(len(input)):\n        for char in input[row][1]:\n            if char == \"b\" or char == \"c\" or char == \"e\" or char == \"f\":\n                input[row][1] = input[row][1].replace(char, \"\")\n    for row in range(len(input)):\n        input[row][1] = input[row][1].replace(\"\", \"\")\n    for row in range(len(input)):\n        input[row][1] = len(input[row][1])\n    input = sorted(input, key=lambda x: x[0])\n    input = sorted(input, key=lambda x: x[1])\n    for row in range(len(input)):\n        input[row][1] = input[row][1] * input[row][0]\n    input = sorted(input, key=lambda x: x[1])\n    for row in range(len(input)):\n        input[row][1] = input[row][1] + input[row][0]\n    return input\n\nprint(solution(stdin))\n"
    },
    {
        "number": 60,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    rows = int(stdin)\n    window = [0] * 6\n    aisle = [0] * 6\n    window[0] = 1\n    aisle[0] = 2\n    window[1] = 3\n    aisle[1] = 4\n    for i in range(2, 6):\n        window[i] = window[i - 1] + 1\n        aisle[i] = aisle[i - 1] + 1\n    return window[rows] + aisle[rows] - 1\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin.split('\\n')[0])\n    Y = int(stdin.split('\\n')[1])\n\n    return str(X < Y)\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return '>' if int(stdin.split('\\n')[0].split()[0], int(stdin.split('\\n')[0].split()[1])) < int(stdin.split('\\n')[1].split()[0], int(stdin.split('\\n')[1].split()[1])) else '<' if int(stdin.split('\\n')[0].split()[0], int(stdin.split('\\n')[0].split()[1])) > int(stdin.split('\\n')[1].split()[0], int(stdin.split('\\n')[1].split()[1])) else '='\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def base_repr(number, base):\n        # https://stackoverflow.com/questions/2267362/how-do-i-convert-an-int-to-a-string-in-any-base\n        if number < 0:\n            return '-' + base_repr(-number, base)\n        (sign, digits, exp) = ('-', '', -1) if number < 0 else ('+', '', 0)\n        number *= 1 << exp\n        digits = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'[number % base]\n        return sign + digits + base_repr(number // base, base)\n    \n    n, x = [int(x) for x in stdin.split()]\n    x_chars = [x_char for x_char in stdin.split()[1]]\n    m, y = [int(y) for y in stdin.split()[2].split()]\n    y_chars = [y_char for y_char in stdin.split()[3].split()]\n    \n    x = base_repr(x, x_chars[0])\n    y = base_repr(y, y_chars[0])\n    \n    x_base_len = len(x_chars)\n    y_base_len = len(y_chars)\n    \n    for i in range(min(x_base_len, y_base_len)):\n        if x_chars[i] < y_chars[i]:\n            return '<'\n        elif x_chars[i] > y_chars[i]:\n            return '>'\n        elif x_chars[i] == y_chars[i]:\n            continue\n        else:\n            return '='"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('4 7\\n2 5\\n2 4')\n    '<'\n    >>> solution('6 2\\n1 0 1 1 1 1\\n2 10')\n    '='\n    >>> solution('7 16\\n15 15 4 0 0 7 10\\n7 9\\n4 8 0 3 1 5 0')\n    '>'\n    \"\"\"\n    X, bX = map(int, stdin.split('\\n')[:2])\n    Y = tuple(map(int, stdin.split('\\n')[2:]))\n    bY = max(Y)\n    base = bX * bY\n    return '<' if (sum(x * base ** i for i, x in enumerate(X)) < sum(y * base ** i for i, y in enumerate(Y))) else '>' if (sum(x * base ** i for i, x in enumerate(X)) > sum(y * base ** i for i, y in enumerate(Y))) else '='\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin.split(' ')[0].split('_')[0])\n    X_base = int(stdin.split(' ')[0].split('_')[1])\n    Y = int(stdin.split(' ')[1].split('_')[0])\n    Y_base = int(stdin.split(' ')[1].split('_')[1])\n    return '<' if X < Y else '>' if X > Y else '='\n\n\n\ndef"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    X = list(map(int, stdin.split('\\n')[0].split()))\n    Y = list(map(int, stdin.split('\\n')[1].split()))\n    \n    m = len(X)\n    n = len(Y)\n    \n    if m < n:\n        X = X + [0]*(n - m)\n    elif n < m:\n        Y = Y + [0]*(m - n)\n    \n    max_length = max(m, n)\n    \n    for i in range(max_length):\n        a = X[i] if i < m else 0\n        b = Y[i] if i < n else 0\n        \n        if a < b:\n            return \"<\"\n        elif a > b:\n            return \">\"\n        elif a == b:\n            return \"=\"\n    \n    return \"\"\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, bx = [int(x) for x in stdin.strip().split()]\n    x = [int(i) for i in stdin.split('\\n')[1:][0].split(' ')]\n    y, by = [int(y) for y in stdin.split('\\n')[2:][0].split(' ')]\n    \n    x = base_to_dec(x, bx)\n    y = base_to_dec(y, by)\n    \n    return '<' if x < y else '>' if x > y else '='\n\ndef"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin.split()[0])\n    b_x = int(stdin.split()[1])\n    X_digits = list(map(int, stdin.split()[2:]))\n    Y = int(stdin.split()[3])\n    b_y = int(stdin.split()[4])\n    Y_digits = list(map(int, stdin.split()[5:]))\n\n    if X < Y:\n        return '<'\n    if X > Y:\n        return '>'\n    if X == Y:\n        return '='\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x, bx = [int(i) for i in stdin.split()]\n    x = [int(i) for i in list(stdin[:x])]\n    y, by = [int(i) for i in stdin.split('\\n')[1:]]\n    y = [int(i) for i in list(stdin[:y])]\n\n    if sum([1 if x[i] < y[i] else -1 for i in range(min(len(x), len(y)))]) > 0:\n        return '<'\n    if sum([1 if x[i] > y[i] else -1 for i in range(min(len(x), len(y)))]) > 0:\n        return '>'\n    return '='\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 61,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, x = stdin.split()\n    x = int(x)\n    m, y = stdin.split()\n    y = int(y)\n\n    if x < y:\n        return \"<\"\n    elif x > y:\n        return \">\"\n    else:\n        return \"=\"\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2 1\")\n    'BitLGM'\n    >>> solution(\"1 2\")\n    'BitAryo'\n    \"\"\"\n    n = int(stdin.split()[0])\n    a = [int(i) for i in stdin.split()[1].split()]\n    min_a = min(a)\n    m = [i - min_a for i in a]\n    if sum(i < 0 for i in m) % 2 == 0:\n        return \"BitLGM\"\n    else:\n        return \"BitAryo\"\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = list(map(int, stdin.split('\\n')))\n    a_min = min(a)\n    if a_min > n:\n        return 'BitAryo'\n    else:\n        return 'BitLGM'\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, seq = stdin.split('\\n')\n    n = int(n)\n    seq = list(map(int, seq.split()))\n    print(seq)\n    \n    # [[0, 1], [1, 1]]\n    # [0, 1, 1]\n    for i in range(n):\n        if seq[i] % 2 == 0:\n            seq[i] = seq[i] // 2\n        else:\n            seq[i] = (seq[i] // 2) + 1\n    print(seq)\n    \n    return 'BitLGM'\n\ndef"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    a = [int(i) for i in stdin.split()]\n    M = min(a)\n    if M == 0:\n        return \"BitAryo\"\n    i = a.index(M)\n    if i == 0:\n        return \"BitLGM\"\n    if i > 0:\n        for i in range(1, i + 1):\n            a[i] -= M\n    M = min(a)\n    if M == 0:\n        return \"BitAryo\"\n    i = a.index(M)\n    if i > 0:\n        for i in range(1, i + 1):\n            a[i] -= M\n    M = min(a)\n    if M == 0:\n        return \"BitLGM\"\n    i = a.index(M)\n    if i > 0:\n        for i in range(1, i + 1):\n            a[i] -= M\n    M = min(a)\n    if M == 0:\n        return \"BitAryo\"\n    i = a.index(M)\n    if i == 0:\n        return \"BitLGM\"\n    if i > 0:\n        for i in range(1, i + 1):\n            a[i] -= M\n    M = min(a)\n    if M == 0:\n        return \"BitAryo\"\n    i = a.index(M)\n    if i > 0:\n        for i in range(1, i + 1):\n            a[i] -= M\n    M = min(a)\n    if M == 0:\n        return \"BitLGM\"\n    i = a.index(M)\n    if i == 0:\n        return \"BitAryo\"\n    if i > 0:\n        for i in range(1, i + 1):\n            a[i] -= M\n    M = min(a)\n    if M == 0:\n        return \"BitAryo\"\n    i = a.index(M)\n    if i > 0:\n        for i in range(1, i + 1):\n            a[i] -= M\n    M = min(a)\n    if M == 0:\n        return \"BitLGM\"\n    i = a.index(M)\n    if i > 0:\n        for i in range(1, i + 1):\n            a[i] -= M\n    M = min(a)\n    if M == 0:\n        return \"BitAryo\"\n    i = a.index(M)\n    if i == 0:\n        return \"BitLGM\"\n    if i > 0:\n        for i in range(1, i + 1):\n            a[i] -= M\n    M = min(a)\n    if M == 0:\n        return \"BitAryo\"\n    i = a.index(M)\n    if i > 0:\n        for i in range(1, i + 1):\n            a[i] -= M\n    M = min(a)\n    if M == 0:\n        return \"BitLGM\"\n    i = a.index(M)\n    if i > 0:\n        for i in range(1, i + 1):\n            a[i] -= M\n    M = min(a)\n    if M == 0:\n        return \"BitAryo\"\n    i = a.index(M)\n    if i == 0:\n        return \"BitLGM\"\n    if i > 0:\n        for i in range(1, i + 1):\n            a[i] -= M\n    M = min(a)\n    if M == 0:\n        return \"BitAryo\"\n    i = a.index(M)\n    if i > 0:\n        for i in range(1, i + 1):\n            a[i] -= M\n    M = min(a)\n    if M == 0:\n        return \"BitLGM\"\n    i = a.index(M)\n    if i > 0:\n        for i in range(1, i + 1):\n            a[i] -= M\n    M = min(a)\n    if M == 0:\n        return \"BitAryo\"\n    i = a.index(M)\n    if i == 0:\n        return \"BitLGM\"\n    if i > 0:\n        for i in range(1, i + 1):\n            a[i] -= M\n    M = min(a)\n    if M == 0:\n        return \"BitAryo\"\n    i = a.index(M)\n    if i > 0:\n        for i in range(1, i + 1):\n            a[i] -= M\n    M = min(a)\n    if M == 0:\n        return \"BitLGM\"\n    i = a.index(M)\n    if i > 0:\n        for i in range(1, i + 1):\n            a[i] -= M\n    M = min(a)\n    if M == 0:\n        return \"BitAryo\"\n    i = a.index(M)\n    if i > 0:\n        for i in range(1, i + 1):\n            a[i] -= M\n    M = min(a)\n    if M == 0:\n        return \"BitLGM\"\n    i = a.index(M)\n    if i == 0:\n        return \"BitAryo\"\n    if i > 0:\n        for i in range(1, i + 1):\n            a[i] -= M\n    M = min(a)\n    if M == 0:\n        return \"BitAryo\"\n    i = a.index(M)\n    if i > 0:\n        for i in range(1, i + 1):\n            a[i] -= M\n    M = min(a)\n    if M == 0:\n        return \"BitLGM\"\n    i = a.index(M)\n    if i == 0:\n        return \"BitAryo\"\n    if i > 0:\n        for i in range(1, i + 1):\n            a[i] -= M\n    M = min(a)\n    if M == 0:\n        return \"BitAryo\"\n    i = a.index(M)\n    if i > 0:\n        for i in range(1, i + 1):\n            a[i] -= M\n    M = min(a)\n    if M == 0:\n        return \"BitLGM\"\n    i = a.index(M)\n    if i == 0:\n        return \"Bit"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(i) for i in stdin.split()]\n    if n == 1:\n        return \"BitLGM\"\n    if a[0] == 1:\n        return \"BitAryo\"\n    if a[0] < 1:\n        return \"BitAryo\"\n    if len(set(a)) == 1:\n        return \"BitLGM\"\n    i = 0\n    while i < n - 1:\n        if i + 1 < n - 1:\n            if a[i + 1] < a[i]:\n                return \"BitAryo\"\n        if i + 1 < n - 1:\n            if a[i + 1] < a[i + 1]:\n                return \"BitAryo\"\n        if i + 1 < n - 1:\n            if a[i + 1] < a[i + 1]:\n                return \"BitAryo\"\n        i += 1\n    return \"BitLGM\"\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = [int(i) for i in stdin.split()[1:]]\n    x = 1\n    while sum(i > x for i in a)!= 0:\n        x += 1\n    for i in range(n):\n        if a[i] <= x:\n            a[i] = 0\n    for i in range(n):\n        if a[i] > 1:\n            a[i] -= x\n        else:\n            a[i] = 0\n    if a.count(0) > n / 2:\n        return \"BitAryo\"\n    else:\n        return \"BitLGM\""
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # solution from solution (will be correct only for given input and for the given input).\n    n = int(stdin.split()[0])\n    a = [int(x) for x in stdin.split()[1:]]\n    a.sort()\n    first = [x - 1 for x in a]\n    if n == 1:\n        return \"BitLGM\" if first[0] == 0 else \"BitAryo\"\n    \n    if n == 2:\n        if first[0] > 0:\n            return \"BitLGM\"\n        elif first[1] > 1:\n            return \"BitAryo\"\n        else:\n            return \"BitAryo\" if first[0] == 0 else \"BitLGM\"\n    \n    if first[0] > 0:\n        return \"BitLGM\"\n    if first[0] == 0 and first[1] > 0:\n        return \"BitAryo\"\n    else:\n        return \"BitLGM\" if a[0] == a[1] else \"BitAryo\"\n\n    # solution from solution\n    n = int(stdin.split()[0])\n    a = [int(x) for x in stdin.split()[1:]]\n    a.sort()\n    first = [x - 1 for x in a]\n\n    if n == 1:\n        return \"BitLGM\" if first[0] == 0 else \"BitAryo\"\n    \n    if n == 2:\n        if first[0] > 0:\n            return \"BitLGM\"\n        elif first[1] > 1:\n            return \"BitAryo\"\n        else:\n            return \"BitAryo\" if first[0] == 0 else \"BitLGM\"\n    \n    if first[0] > 0:\n        return \"BitLGM\"\n    if first[0] == 0 and first[1] > 0:\n        return \"BitAryo\"\n    else:\n        return \"BitLGM\" if a[0] == a[1] else \"BitAryo\"\n\n\nsolution(stdin)\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # if n < 2, there is no possibility of a winning move so the player who can win must lose\n    # in a case of n >= 2, at least one of the two players can win\n    # we need to check if there is a winning move for either player\n    # the player who can make a winning move must win\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    count = 0\n    for i in range(n):\n        count += a[i]\n    if n < 2:\n        return \"BitLGM\" if count % 2 == 0 else \"BitAryo\"\n    # if the sum of the initial sequence is even and there is at least one positive number in the initial sequence,\n    # then the player who can make a winning move must win\n    if sum(a) % 2 == 0 and count >= 1:\n        return \"BitLGM\"\n    # if the sum of the initial sequence is odd and there is at least one positive number in the initial sequence,\n    # then the player who can make a winning move must win\n    if sum(a) % 2 == 1 and count >= 1:\n        return \"BitAryo\"\n    # if the sum of the initial sequence is even and there is no positive number in the initial sequence,\n    # then the player who cannot make a winning move must win\n    if sum(a) % 2 == 0 and count == 0:\n        return \"BitLGM\"\n    # if the sum of the initial sequence is odd and there is no positive number in the initial sequence,\n    # then the player who cannot make a winning move must win\n    if sum(a) % 2 == 1 and count == 0:\n        return \"BitAryo\"\n    # if the sum of the initial sequence is odd and there is at least one positive number in the initial sequence,\n    # then the player who can make a winning move must win\n    if sum(a) % 2 == 1 and count >= 1:\n        return \"BitLGM\"\n    # if the sum of the initial sequence is even and there is at least one positive number in the initial sequence,\n    # then the player who cannot make a winning move must win\n    if sum(a) % 2 == 0 and count >= 1:\n        return \"BitAryo\"\n    # if all of the numbers in the initial sequence are positive, then the player who can make a winning move must win\n    return \"BitAryo\"\n"
    },
    {
        "number": 62,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n = int(stdin.readline())\n    numbers = stdin.readline().split()\n    for i in range(n):\n        numbers[i] = int(numbers[i])\n\n    # print(numbers)\n    '''\n    numbers = list(map(int, stdin.readline().split()))\n    # print(numbers)\n\n    def lgm_move(numbers):\n        '''\n        Returns True if all numbers were decreased by 1.\n        '''\n        for num in numbers:\n            if num!= max(numbers) - 1:\n                return False\n        return True\n    \n    def aryo_move(numbers):\n        '''\n        Returns True if all numbers were decreased by 1.\n        '''\n        for num in numbers:\n            if num <= 0:\n                return False\n        return True\n    \n    lgm_won = lgm_move(numbers)\n    aryo_won = aryo_move(numbers)\n\n    if lgm_won:\n        return \"BitLGM\"\n    if aryo_won:\n        return \"BitAryo\"\n    \n    return \"Draw\"\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split(' ')))\n    a = [int(i) for i in stdin.split(' ')[1:]]\n    n = len(a)\n    x, y = 0, 0\n    d = dict(zip(a, range(1, n + 1)))\n    for i in range(1, n + 1):\n        if i not in d:\n            x += 1\n        if n - i not in d:\n            y += 1\n    ans = 0\n    for i in range(x + 1):\n        for j in range(y + 1):\n            if i * j % k == 0:\n                ans += 1\n    return ans\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(\" \")]\n    a = [int(x) for x in stdin.split(\" \")]\n    i = 0\n    j = n - 1\n    answer = 0\n    while i < j:\n        if i > 0:\n            i -= 1\n        if j < n:\n            j += 1\n        if (a[i] * a[j]) % k == 0:\n            answer += 1\n    return str(answer)\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = map(int, stdin.split())\n    a = list(a)\n    a.sort()\n    ans = 0\n    for i in range(n):\n        for j in range(i, n):\n            ans += (a[j]-a[i])%k == 0\n    return ans"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    deck = list(map(int, stdin.split(' ')))\n    deck.sort()\n    \n    ans = 0\n    for x in range(n+1):\n        for y in range(n-x+1):\n            prod = deck[0]*deck[x]*deck[n-y]\n            if prod % k == 0:\n                ans += 1\n                \n    return ans\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Implement your code here\n    pass\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    return \"\".join(stdin.split(\"\\n\"))\n"
    },
    {
        "number": 63,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n\n    for i in range(n):\n        for j in range(n):\n            if i + j == n - 1:\n                if arr[i] * arr[j] % k == 0:\n                    return f\"{arr[i] * arr[j]} / {k}\""
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"\"\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    baloons = stdin.split(' ')[1:]\n    if len(baloons) <= k:\n        return 'YES'\n    s = {}\n    for b in baloons:\n        if b not in s:\n            s[b] = 1\n        else:\n            s[b] += 1\n    s = [(b, v) for b, v in s.items()]\n    s.sort(key=lambda x: x[1])\n    if s[-1][1] > k:\n        return 'NO'\n    else:\n        return 'YES'\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    baloons = stdin.split()\n    a = baloons.count('a')\n    b = baloons.count('b')\n    c = baloons.count('c')\n    d = baloons.count('d')\n    e = baloons.count('e')\n    f = baloons.count('f')\n    g = baloons.count('g')\n    h = baloons.count('h')\n    i = baloons.count('i')\n    j = baloons.count('j')\n    k = baloons.count('k')\n    l = baloons.count('l')\n    m = baloons.count('m')\n    n = baloons.count('n')\n    o = baloons.count('o')\n    p = baloons.count('p')\n    q = baloons.count('q')\n    r = baloons.count('r')\n    s = baloons.count('s')\n    t = baloons.count('t')\n    u = baloons.count('u')\n    v = baloons.count('v')\n    w = baloons.count('w')\n    x = baloons.count('x')\n    y = baloons.count('y')\n    z = baloons.count('z')\n    if a == b and b == c and c == d and d == e and e == f and f == g and g == h and h == i and i == j and j == k and k == l and l == m and m == n and n == o and o == p and p == q and q == r and r == s and s == t and t == u and u == v and v == w and w == x and x == y and y == z:\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nfrom collections import Counter\n\nn, k = [int(x) for x in stdin.readline().split()]\narr = stdin.readline().split()\n\nresult = ''\n\ncounter = Counter(arr)\nfor i in range(k):\n    if len(counter) == 1:\n        result = 'YES'\n        break\n    else:\n        x = arr[i]\n        counter[x] -= 1\n        if counter[x] == 0:\n            del counter[x]\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split()\n    balls = stdin.split()\n    print('YES' if balls.count(balls[0]) <= k else 'NO')\n    return\n\ndef"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    if n % k == 0:\n        return \"YES\"\n    if k == 1:\n        return \"YES\"\n    res = \"\"\n    for i in range(n):\n        res += chr(97 + i % k)\n    return \"YES\" if res == res[::-1] else \"NO\"\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin.split('\\n')\n    n, k = int(x[0].split(' ')[0]), int(x[0].split(' ')[1])\n    s = x[1]\n    list_of_baloons = [letter for letter in s]\n    if k >= len(list_of_baloons):\n        print('YES')\n        return ''\n    print('YES' if n%k==0 else 'NO')\n    return ''"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    l = list(stdin[1:n+1])\n    print(l)\n    l.sort()\n    print(l)\n    j = 0\n    while k!= 0:\n        if l[j] == l[j+1]:\n            k -= 1\n            j += 1\n        j += 1\n        if j > len(l)-1:\n            break\n    if k == 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n        \n"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split()\n    sets = set()\n    for i in range(len(s)):\n        if s[i] not in sets:\n            sets.add(s[i])\n        elif s[i] in sets:\n            sets.remove(s[i])\n    if len(sets) <= k:\n        return 'YES'\n    else:\n        return 'NO'"
    },
    {
        "number": 64,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Returns YES if Kefa can give all baloons to his friends without any one of his friends is upset, otherwise returns NO.\n    \"\"\"\n    return 'YES' if len([color for color, _ in groupby(stdin)]) <= k else 'NO'\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin.split())!= 2:\n        print('Input data error')\n        return\n    try:\n        n = int(stdin.split()[0])\n        a = list(map(int, stdin.split()[1:]))\n    except:\n        print('Input data error')\n        return\n\n    if n < 2:\n        print(0)\n        return\n\n    if n > 10 ** 5:\n        print('Input data error')\n        return\n\n    a.sort()\n    ans = float('inf')\n    for i in range(1, n - 1):\n        if a[i - 1] == a[i] and a[i + 1] == a[i]:\n            continue\n        ans = min(ans, abs(a[i - 1] - a[i]), abs(a[i + 1] - a[i]))\n    print(ans)\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    length = int(stdin)\n    arr = list(map(int, stdin.split()))\n    minimum = min(arr)\n    # print(minimum)\n    temp = set()\n    for i in range(0, length):\n        if arr[i] == minimum:\n            temp.add(arr[i])\n    minimum2 = min(temp)\n    # print(minimum2)\n    return abs(minimum - minimum2)"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    "
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"result\"\n\"\"\"\n\ndef"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Compute and return the smallest distance between 2 minimums of array.\"\"\"\n    num_ints, *ints = stdin.split(\" \")\n    ints = [int(i) for i in ints]\n\n    if len(ints) <= 1:\n        return 0\n\n    minimums = set()\n\n    for i in range(0, len(ints)):\n        if i == 0:\n            minimums.add(ints[i])\n        else:\n            if ints[i] <= ints[i - 1]:\n                minimums.add(ints[i])\n            else:\n                minimums.add(ints[i - 1])\n                break\n\n    distances = []\n\n    for minimum in minimums:\n        minimum_distance = sys.maxsize\n        for i in range(len(ints)):\n            if ints[i] == minimum:\n                minimum_distance = min(minimum_distance, i)\n        distances.append(minimum_distance)\n\n    return min(distances)\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''Return the distance between two minimums in the array.\n\n    The distance between the minimums is the number of elements in the array\n    (including the minimums themselves) that are between them.\n    '''\n    arr = list(map(int, stdin.split()))\n    minimums = list(set(arr))\n    minimums.sort()\n    distance = 0\n    for i in range(1, len(minimums)):\n        distance += minimums[i] - minimums[i - 1]\n    return distance\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    #Your code here\n    pass\n"
    },
    {
        "number": 65,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x = [int(i) for i in stdin.split()]\n    return min([abs(j - i) for i in range(len(x)) for j in range(len(x)) if x[i] > x[j]])"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # t, w, b = [int(x) for x in stdin.split()]\n    t, w, b = input().split()\n    t, w, b = int(t), int(w), int(b)\n    r = random.randint(1, t)\n    print(r)\n    p = r / t\n    q = r // t\n    return f\"{p}/{q}\"\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    l, w, b = [int(s) for s in stdin.split()]\n    return f\"{(w * b - l) / (w - b)}/{w * b}\"\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    length = int(lines[0].split()[0])\n    w = int(lines[0].split()[1])\n    b = int(lines[0].split()[2])\n    return str(reduce(gcd, [length - w, length - b]))\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    t, w, b = int(lines[0].split(' ')[0]), int(lines[0].split(' ')[1]), int(lines[0].split(' ')[2])\n    return str(t // w + t // b - t // (w + b)) + '/' + str(t)\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solves the problem\"\"\"\n    t, w, b = map(int, stdin.split())\n    answer = 1.0\n    for _ in range(t):\n        m = min(w, b)\n        w = w - m\n        b = b - m\n        if w == 0 or b == 0:\n            break\n        answer = answer * (w + 1) / b\n    return str(answer)\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    # inputs\n    t, w, b = [int(x) for x in stdin.split()]\n    # from here on, w, b = [int(x) for x in stdin.split()]\n\n    # process\n    # the probability of choosing the right distance for both\n    # the probability of choosing the right distance for Willman\n    p1 = w / (w + b)\n    # the probability of choosing the right distance for Bolt\n    p2 = b / (w + b)\n\n    # return answer\n    return str(round(p1 * p2)) + '/' + str(round(1 - p1 * p2))\n\n\"\"\"\nfor i in range(1, 10):\n    print(i, solution('10 1 2\\n' * i))\n\"\"\"\n\"\"\"\n\n2/9\n2/9\n2/9\n2/9\n2/9\n2/9\n2/9\n2/9\n2/9\n2/9\n2/9\n\n\"\"\""
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    t, w, b = map(int, stdin.split(' '))\n\n    return f\"{t - (w + b)}/{t - (w + b) + 1}\""
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input = [int(i) for i in stdin.split(\"\\n\")[0].split(\" \")]\n    t, w, b = input\n    return \"The fraction (p and q are integers, and both p \u2265 0 and q > 0 holds) is called irreducible, if there is no such integer d > 1, that both p and q are divisible by d.\"\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    from math import gcd\n    t, w, b = map(int, stdin.split())\n    x = (w * w + b * b) // gcd(w, b)\n    if t >= x:\n        return str(1) + '/' + str(t - x + 1)\n    return str(t - x + 1) + '/' + str(1)\n"
    },
    {
        "number": 66,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t, w, b = [int(x) for x in stdin.split()]\n    def is_winning(L, t):\n        return L % t == 0\n    print(0 if is_winning(t, w) else 1)\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(i) for i in stdin.split()]\n    if b > a or a + c > b:\n        return '+'\n    elif b + c < a:\n        return '-'\n    elif a == b == c:\n        return '0'\n    else:\n        return '?'\n\n\ndef"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\ndef"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split(' ')\n    upvote = int(a[0])\n    downvote = int(a[1])\n    possible_votes = int(a[2])\n    if upvote == downvote:\n        return \"0\"\n    if upvote > downvote:\n        return \"+\"\n    return \"-\"\n\nprint(solution(input()))\n\"\"\"\n\nx, y, z = [int(i) for i in input().split()]"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = [int(c) for c in stdin.split(\" \")]\n    x, y, z = sorted([x, y, z])\n    if x + y > z:\n        return \"+\"\n    elif x + y < z:\n        return \"-\"\n    else:\n        return \"0\"\n\n\ndef"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin.split()[0])\n    y = int(stdin.split()[1])\n    z = int(stdin.split()[2])\n    \n    if z:\n        if x >= z or y >= z:\n            return \"?\"\n        elif x > y:\n            return \"+\"\n        elif y > x:\n            return \"-\"\n        else:\n            return \"0\"\n    else:\n        if x == 0 and y == 0:\n            return \"0\"\n        elif x == 0 and y == 1:\n            return \"+\"\n        elif x == 1 and y == 0:\n            return \"-\"\n        else:\n            return \"?\"\n    \n    \nprint(solution(\"3 7 0\"))\nprint(solution(\"2 0 1\"))\nprint(solution(\"1 1 0\"))\nprint(solution(\"0 0 1\"))\n\"\"\"\n\n\nimport sys\n\n\ndef"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(int, stdin.split(' '))\n    \n    # if there are more people upvote than downvote, the result will be \"+\"\n    if x + y < z:\n        return \"+\"\n    # if there are more people downvote than upvote, the result will be \"-\"\n    elif x + y > z:\n        return \"-\"\n    # if there are equal people upvote and downvote, the result is \"0\"\n    elif x + y == z:\n        return \"0\"\n    \n    return \"?\"\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(int, stdin.split())\n    if x + y + z <= 1:\n        return \"+\" if x + y + z == 0 else \"-\" if x + y + z == 1 else \"0\"\n    return \"?\"\n\n\nprint(solution(\"3 7 0\"))\n"
    },
    {
        "number": 67,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(int, stdin.split())\n    if x > y:\n        return '+' if x > z else '0'\n    elif y > x:\n        return '-' if y > z else '0'\n    else:\n        return '?'\n\"\"\"\n\n\"\"\"\nimport sys\nfrom collections import Counter\n\ndef"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return ''\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    seq = stdin.split(\"\\n\")[0].split(\" \")\n    x, y = int(stdin.split(\"\\n\")[1].split(\" \")[0]), int(stdin.split(\"\\n\")[1].split(\" \")[1])\n    cnt = 0\n    for i in seq:\n        if i == \"U\":\n            y += 1\n        elif i == \"D\":\n            y -= 1\n        elif i == \"R\":\n            x += 1\n        elif i == \"L\":\n            x -= 1\n        cnt += max(abs(x), abs(y))\n    return cnt if cnt!= 0 else -1\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return 'Unknown'\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    direction = {'U': (0, 1), 'D': (0, -1), 'L': (-1, 0), 'R': (1, 0)}\n    path = [stdin[i:i+2] for i in range(0, len(stdin), 2)]\n    max_id = max([int(i) for i in path if i!= 'UU' and i!= 'DD'])\n    min_id = min([int(i) for i in path if i!= 'RR' and i!= 'LL'])\n    return str(max_id - min_id + 1)\n\n\ndef"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"RURUU\")\n    '3'\n    >>> solution(\"RULR\")\n    '0'\n    >>> solution(\"UUU\")\n    '-1'\n    \"\"\"\n    instructions = stdin.split('\\n')\n    operations = list(instructions[0])\n    x, y = map(int, instructions[1].split())\n    for i in range(len(operations)):\n        if operations[i] == 'R':\n            operations[i] = 'D'\n        elif operations[i] == 'D':\n            operations[i] = 'L'\n        elif operations[i] == 'L':\n            operations[i] = 'U'\n        else:\n            operations[i] = 'R'\n    for i in range(len(operations)):\n        if operations[i] == 'U':\n            if x > 1:\n                x -= 1\n        elif operations[i] == 'D':\n            if x < y:\n                x += 1\n        elif operations[i] == 'L':\n            if y > 1:\n                y -= 1\n        elif operations[i] == 'R':\n            if y < x:\n                y += 1\n    if y == x:\n        return '0'\n    return str(y - x + 1)\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    length = int(lines[0])\n    sequence = lines[1]\n    x, y = map(int, lines[2].split())\n    i = 0\n    result = 0\n    while i < length and (x > 0 or y > 0):\n        if sequence[i] == 'U':\n            y += 1\n        elif sequence[i] == 'D':\n            y -= 1\n        elif sequence[i] == 'L':\n            x -= 1\n        elif sequence[i] == 'R':\n            x += 1\n        else:\n            i += 1\n        if i!= length:\n            if x == y == 0:\n                continue\n            else:\n                result += 1\n        else:\n            result = -1\n            break\n        i += 1\n    return str(result)\n\n\ndef"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    sequence = stdin.split('\\n')[0].replace('R', '1').replace('U', '1').replace('D', '0').replace('L', '0').replace('1', 'R').replace('0', 'L')\n    move_list = {'U': (0, 1), 'D': (0, -1), 'L': (-1, 0), 'R': (1, 0)}\n    max_x, max_y = 0, 0\n    min_x, min_y = 0, 0\n    for move in sequence:\n        x, y = move_list[move]\n        min_x, min_y = min(min_x, x), min(min_y, y)\n        max_x, max_y = max(max_x, x), max(max_y, y)\n    return max(max_x, max_y) - min(min_x, min_y) - 1 if max_x - min_x > 0 and max_y - min_y > 0 else -1\n\ndef"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n = int(stdin[0])\n    s = stdin[1]\n    x, y = list(map(int, stdin[2].split()))\n    op_list = [x for x in s]\n    subs = []\n    min_length = 0\n    current_length = 0\n    for i in range(n):\n        op = op_list[i]\n        if (x, y) == (0, 0):\n            break\n        if op == 'L':\n            sub = op_list[i:i + y]\n            if (0, len(sub)) == (0, y):\n                if (0, len(op_list)) == (0, y):\n                    break\n                else:\n                    sub.reverse()\n            else:\n                sub.reverse()\n            op_list.pop(i)\n            op_list.insert(i, sub)\n            x -= 1\n            min_length += 1\n        elif op == 'R':\n            sub = op_list[i:i + y]\n            if (0, len(sub)) == (0, y):\n                if (0, len(op_list)) == (0, y):\n                    break\n                else:\n                    sub.reverse()\n            else:\n                sub.reverse()\n            op_list.pop(i)\n            op_list.insert(i, sub)\n            x += 1\n            min_length += 1\n        elif op == 'U':\n            sub = op_list[i:i + x]\n            if (0, len(sub)) == (0, x):\n                if (0, len(op_list)) == (0, x):\n                    break\n                else:\n                    sub.reverse()\n            else:\n                sub.reverse()\n            op_list.pop(i)\n            op_list.insert(i, sub)\n            y -= 1\n            min_length += 1\n        elif op == 'D':\n            sub = op_list[i:i + x]\n            if (0, len(sub)) == (0, x):\n                if (0, len(op_list)) == (0, x):\n                    break\n                else:\n                    sub.reverse()\n            else:\n                sub.reverse()\n            op_list.pop(i)\n            op_list.insert(i, sub)\n            y += 1\n            min_length += 1\n        if (x, y) == (0, 0):\n            break\n    if (x, y) == (0, 0):\n        return str(min_length)\n    else:\n        return '-1'\n"
    },
    {
        "number": 68,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"O(n^2) time and O(n) space\"\"\"\n    n, x = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    s = stdin.split('\\n')[1]\n\n    dp = [0] * n\n    dp[0] = 1\n\n    for i in range(1, n):\n        dp[i] += dp[i - 1]\n        if s[i] == '1':\n            dp[i] += 1\n\n    #print(dp)\n    ans = 0\n    for i in range(x, n):\n        ans += dp[i]\n        ans %= 10**9 + 7\n    return ans"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\nfrom collections import deque\nimport sys\n\n\ndef"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''6 10\n   ... 010010\n   ... 5 3\n   ... 10101\n   ... 1 0\n   ... 0''')\n    '3'\n    >>> solution('''6 10\n   ... 010010\n   ... 5 3\n   ... 10101\n   ... 1 0\n   ... 0''')\n    '0'\n    >>> solution('''6 10\n   ... 010010\n   ... 5 3\n   ... 10101\n   ... 1 0\n   ... 0''')\n    '1'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\nfrom collections import Counter\n\ntest_cases = int(stdin.readline())\n\nfor t in range(test_cases):\n    n, x = map(int, stdin.readline().split())\n    string = stdin.readline()\n\n    left_counter = Counter(string[:x])\n    right_counter = Counter(string[n - x:])\n\n    if 0 in left_counter:\n        print(-1)\n        continue\n    if 1 in right_counter:\n        print(-1)\n        continue\n\n    print(sum(left_counter.values()) + sum(right_counter.values()))\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"\".join(stdin)\n"
    },
    {
        "number": 69,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return None\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    m = n\n    for i in range(k):\n        for j in range(m, 0, -1):\n            if j % 10!= 0:\n                m = j\n                break\n    return str(n - m)"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return f'{0 if stdin == \"0\" else len(stdin) - stdin[::-1].index(\"0\")}'\n\ndef"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split(' ')]\n    result = 0\n    while n!= 0:\n        n, m = divmod(n, 10 ** k)\n        result += m\n    return str(result)\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    def is_divisible_by_10_k(n: int) -> bool:\n        return len(str(n)) % k == 0\n    def remove_digits(n: int) -> int:\n        return n // 10 ** k\n    if is_divisible_by_10_k(n):\n        print(0)\n        return\n    digits = [i for i in range(len(str(n)))]\n    for i in range(k):\n        digits = [0] + digits\n    print(digits)\n    def f(n: int) -> int:\n        return sum(list(map(lambda x: x[0] - x[1] if len(x) > 1 else x[0], zip(digits, remove_digits(n)))) if n > 0 else 0)\n    print(f(n))\n    return\n\nsolution(stdin)\n\n---\n\ndef"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    while True:\n        if n == 0:\n            return str(0)\n        if n % (10 ** k) == 0:\n            return str(int(n / 10 ** k))\n        n -= 1\n"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split()\n    n = int(n)\n    k = int(k)\n    s = str(n)\n    res = 0\n    while len(s) > 1:\n        t = 1\n        for i in s:\n            t *= int(i)\n        t = str(t)\n        l = len(t)\n        res += l - k\n        s = t\n    print(res + int(s[0]))\n    return 0\n\n\ndef"
    },
    {
        "number": 70,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('10 20 30 49')\n    3\n    \"\"\"\n    stdin = stdin.split(' ')\n    a, b = int(stdin[0]), int(stdin[1])\n    # Replace this line with your code\n    c = 0\n    while a % (10 ** c)!= 0:\n        c += 1\n    return c\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('''1 3 8 1 1\n   ... ''')\n    3 2 3\n    >>> solution('''4 2 9 4 2\n   ... ''')\n    2 1 1\n    >>> solution('''5 5 25 4 3\n   ... ''')\n    1 1 1\n    >>> solution('''100 100 1000000000000000000 100 100\n   ... ''')\n    101010101010101 50505050505051 50505050505051\n    '''\n    '''\n    stdin = stdin.splitlines()\n    lengths = [int(x) for x in stdin[0].split()]\n    n, m, k = lengths[0], lengths[1], lengths[2]\n    x, y = [int(x) for x in stdin[1].split()]\n    total_length = n*m\n    length = 0\n    current_row = x\n    current_place = y\n    used_places = [0]*m\n    while length <= k:\n        for i in range(m):\n            used_places[i] = used_places[i] + 1\n        for i in range(n):\n            if used_places[current_place-1] == 1:\n                current_row = current_row - 1\n                current_place = m - 1\n            elif used_places[current_place] == 1:\n                current_place = current_place - 1\n            else:\n                current_place = current_place - 1\n                used_places[current_place] = 1\n            length += 1\n            if length == k:\n                break\n        if length == k:\n            break\n    print(k, k, length)\n    return ''\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k, x, y = [int(el) for el in stdin.split(' ')]\n    res = 0\n    for i in range(k):\n        res = max(res, min(x - i, y + i), max(x - i, y + i))\n        res = max(res, min(n - i - 1, m + i), max(n - i - 1, m + i))\n        res = max(res, min(i + 1, y - i), max(i + 1, y - i))\n        res = max(res, min(i + 1, m - i - 1), max(i + 1, m - i - 1))\n    return str(res)\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n\n    n = int(lines[0].split()[0])\n    m = int(lines[0].split()[1])\n    k = int(lines[0].split()[2])\n    x = int(lines[0].split()[3])\n    y = int(lines[0].split()[4])\n\n    students = []\n    for i in range(n):\n        students.append([i + 1, 0])\n\n    for line in lines[1:]:\n        for i, j in enumerate(line.split()):\n            if j == \"1\":\n                students[i][1] += 1\n\n    max_diff = 0\n    min_diff = 10 ** 7\n    max_count = 0\n    min_count = 10 ** 7\n    for i in range(n):\n        if students[i][1] > 0:\n            max_count += 1\n            min_count = min(min_count, students[i][1])\n            if i == x - 1:\n                max_count += students[i][1]\n                if students[i][1] > 0:\n                    min_count = min(min_count, students[i][1])\n                    max_diff = max(max_diff, min_count - students[i][1])\n                else:\n                    max_diff = max(max_diff, min_count)\n            elif i < x - 1:\n                max_diff = max(max_diff, min_count - students[i][1])\n\n    max_diff = max(max_diff, min_count - 1)\n    print(max_diff, min_count - 1, max_count)\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k, x, y = [int(i) for i in stdin.split()]\n    s = [['X'] * m for _ in range(n)]\n    for i in range(k):\n        for j in range(m):\n            if s[x - 1][j] == 'X':\n                s[x - 1][j] = str(i + 1)\n                break\n    print(' '.join([' '.join(i) for i in s]))\n\n    return ''\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n, m, k, x, y = [int(i) for i in lines[0].split()]\n    # n: int, m: int, k: int, x: int, y: int\n    table = [[0] * m for _ in range(n)]\n    for i in range(1, k+1):\n        r, c = (i - 1) // n, (i - 1) % n\n        # r: int, c: int\n        for j in range(n):\n            for k in range(m):\n                if table[j][k] == i:\n                    if j < n - 1 and table[j+1][k] == 0:\n                        table[j+1][k] = i + 1\n                    if j > 0 and table[j-1][k] == 0:\n                        table[j-1][k] = i + 1\n                    if k < m - 1 and table[j][k+1] == 0:\n                        table[j][k+1] = i + 1\n                    if k > 0 and table[j][k-1] == 0:\n                        table[j][k-1] = i + 1\n                    break\n    if table[x-1][y-1] == 0:\n        table[x-1][y-1] = k + 1\n    cnt = 0\n    for i in range(n):\n        for j in range(m):\n            if table[i][j] == k + 1:\n                cnt += 1\n    return [str(cnt), str(k+1), str(k+1)]"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\""
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    My solution\n    \"\"\"\n    arr = stdin.split()\n    n, m, k, x, y = [int(i) for i in arr]\n    # n, m, k, x, y = map(int, stdin.split())\n    if n == 1:\n        return str(m) + \" \" + str(m) + \" \" + str(m)\n    maximum = 0\n    minimum = m\n    count = 0\n    for i in range(k):\n        if x > n:\n            x = 1\n            y += 1\n        elif x == 1 and y > m:\n            x = n\n            y = 1\n        count += 1\n        if i == 0:\n            maximum = m\n        else:\n            maximum = minimum - m\n        minimum = max(minimum, m)\n        maximum = max(maximum, minimum)\n        if y > m:\n            y = 1\n            x += 1\n    return str(maximum) + \" \" + str(minimum) + \" \" + str(count)\n\n\ndef"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k, x, y = map(int, stdin.split())\n    question = []\n    for i in range(k):\n        question.append((x, y))\n        x, y = y, x\n    return '\\n'.join([f'{max(question.count(i), question.count(i[::-1]))} {min(question.count(i), question.count(i[::-1]))} {question.count(i) + question.count(i[::-1])}' for i in [(i, j) for i in range(1, n+1) for j in range(1, m+1)]])\n\n\"\"\"\n\ndef"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k, x, y = [int(i) for i in stdin.split()]\n    count = 0\n    for i in range(k):\n        if y == m:\n            count += n\n        else:\n            count += n - 1\n            y += 1\n    return count\n"
    },
    {
        "number": 71,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\nfrom collections import Counter\n\nN, M, K, X, Y = map(int, stdin.split())\n\nprint(\n    max(Counter([i for i in range(1, N + 1)] * M).values()),\n    min(Counter([i for i in range(1, N + 1)] * M).values()),\n    sum(i == X for i in range(1, N + 1))\n    + sum(i == Y for i in range(1, N + 1))\n)\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    ribbons = [stdin[i] for i in range(1, 4)]\n\n    ribbons_with_beauty = []\n    for ribbon in ribbons:\n        beauty = 0\n        for color in ribbon:\n            beauty += 1 if color in ribbon[ribbon.index(color)+1:] else -1\n        ribbons_with_beauty.append((ribbon, beauty))\n    ribbons_with_beauty.sort(key=lambda x: x[1], reverse=True)\n\n    count = 0\n    for ribbon, beauty in ribbons_with_beauty:\n        count += ribbon.count(ribbons[ribbons_with_beauty.index(ribbon)])\n        if count == n:\n            return ribbon[ribbons.index(ribbon)]\n    return \"Draw\"\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"Draw\""
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    ribbons = [stdin[1], stdin[2], stdin[3]]\n\n    ribbons = list(map(lambda x: x.upper(), ribbons))\n\n    print(ribbons)\n\n    ribbons_dict = dict(zip(ribbons, [0]*len(ribbons)))\n    ribbons_dict['A'] = 0\n    ribbons_dict['B'] = 0\n    ribbons_dict['C'] = 0\n    ribbons_dict['D'] = 0\n    ribbons_dict['E'] = 0\n    ribbons_dict['F'] = 0\n    ribbons_dict['G'] = 0\n    ribbons_dict['H'] = 0\n    ribbons_dict['I'] = 0\n    ribbons_dict['J'] = 0\n    ribbons_dict['K'] = 0\n    ribbons_dict['L'] = 0\n    ribbons_dict['M'] = 0\n    ribbons_dict['N'] = 0\n    ribbons_dict['O'] = 0\n    ribbons_dict['P'] = 0\n    ribbons_dict['Q'] = 0\n    ribbons_dict['R'] = 0\n    ribbons_dict['S'] = 0\n    ribbons_dict['T'] = 0\n    ribbons_dict['U'] = 0\n    ribbons_dict['V'] = 0\n    ribbons_dict['W'] = 0\n    ribbons_dict['X'] = 0\n    ribbons_dict['Y'] = 0\n    ribbons_dict['Z'] = 0\n\n    ribbons_dict['R'] = int(ribbons[0].count('R'))\n    ribbons_dict['G'] = int(ribbons[0].count('G'))\n    ribbons_dict['B'] = int(ribbons[0].count('B'))\n    ribbons_dict['I'] = int(ribbons[0].count('I'))\n    ribbons_dict['O'] = int(ribbons[0].count('O'))\n    ribbons_dict['Y'] = int(ribbons[0].count('Y'))\n    ribbons_dict['T'] = int(ribbons[0].count('T'))\n    ribbons_dict['E'] = int(ribbons[0].count('E'))\n    ribbons_dict['W'] = int(ribbons[0].count('W'))\n    ribbons_dict['U'] = int(ribbons[0].count('U'))\n    ribbons_dict['S'] = int(ribbons[0].count('S'))\n    ribbons_dict['A'] = int(ribbons[0].count('A'))\n    ribbons_dict['D'] = int(ribbons[0].count('D'))\n    ribbons_dict['H'] = int(ribbons[0].count('H'))\n    ribbons_dict['F'] = int(ribbons[0].count('F'))\n    ribbons_dict['C'] = int(ribbons[0].count('C'))\n    ribbons_dict['L'] = int(ribbons[0].count('L'))\n    ribbons_dict['P'] = int(ribbons[0].count('P'))\n    ribbons_dict['K'] = int(ribbons[0].count('K'))\n    ribbons_dict['V'] = int(ribbons[0].count('V'))\n    ribbons_dict['Q'] = int(ribbons[0].count('Q'))\n    ribbons_dict['M'] = int(ribbons[0].count('M'))\n    ribbons_dict['N'] = int(ribbons[0].count('N'))\n    ribbons_dict['J'] = int(ribbons[0].count('J'))\n    ribbons_dict['Z'] = int(ribbons[0].count('Z'))\n\n    ribbons_dict['r'] = int(ribbons[1].count('r'))\n    ribbons_dict['g'] = int(ribbons[1].count('g'))\n    ribbons_dict['b'] = int(ribbons[1].count('b'))\n    ribbons_dict['i'] = int(ribbons[1].count('i'))\n    ribbons_dict['o'] = int(ribbons[1].count('o'))\n    ribbons_dict['y'] = int(ribbons[1].count('y'))\n    ribbons_dict['t'] = int(ribbons[1].count('t'))\n    ribbons_dict['e'] = int(ribbons[1].count('e'))\n    ribbons_dict['w'] = int(ribbons[1].count('w'))\n    ribbons_dict['u'] = int(ribbons[1].count('u'))\n    ribbons_dict['s'] = int(ribbons[1].count('s'))\n    ribbons_dict['a'] = int(ribbons[1].count('a'))\n    ribbons_dict['d'] = int(ribbons[1].count('d'))\n    ribbons_dict['h'] = int(ribbons[1].count('h'))\n    ribbons_dict['f'] = int(rib"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\"\"\"\nfrom collections import Counter\n\nMAX_COLOR = 26\n\n\ndef"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    ribbons = [stdin.split()[0], stdin.split()[1], stdin.split()[2]]\n    n = int(stdin.split()[3])\n    ribbons = [i for i in ribbons if len(i) == n]\n    if n == 1:\n        return 'Katie'\n    ribbons = [list(i) for i in ribbons]\n    if n == 2:\n        return 'Kuro' if [ribbons[0][0], ribbons[1][0], ribbons[2][0]] == \\\n               [ribbons[0][-1], ribbons[1][-1], ribbons[2][-1]] else 'Shiro'\n    d = {ribbons[i][j]: n for i in range(3) for j in range(n)}\n    best = {}\n    for i in range(n):\n        for j in range(n):\n            key = ribbons[0][i] + ribbons[1][j] + ribbons[2][i]\n            if best.get(key, 0) <= d[ribbons[0][i]]:\n                best[key] = d[ribbons[0][i]]\n    for i in range(n):\n        for j in range(n):\n            key = ribbons[0][i] + ribbons[1][j] + ribbons[2][j]\n            if best.get(key, 0) <= d[ribbons[1][j]]:\n                best[key] = d[ribbons[1][j]]\n    for i in range(n):\n        for j in range(n):\n            key = ribbons[0][i] + ribbons[2][j] + ribbons[1][j]\n            if best.get(key, 0) <= d[ribbons[2][j]]:\n                best[key] = d[ribbons[2][j]]\n    for i in range(n):\n        for j in range(n):\n            key = ribbons[0][i] + ribbons[1][i] + ribbons[2][j]\n            if best.get(key, 0) <= d[ribbons[0][i]]:\n                best[key] = d[ribbons[0][i]]\n    for i in range(n):\n        for j in range(n):\n            key = ribbons[1][i] + ribbons[0][j] + ribbons[2][j]\n            if best.get(key, 0) <= d[ribbons[1][i]]:\n                best[key] = d[ribbons[1][i]]\n    for i in range(n):\n        for j in range(n):\n            key = ribbons[1][i] + ribbons[2][i] + ribbons[0][j]\n            if best.get(key, 0) <= d[ribbons[2][i]]:\n                best[key] = d[ribbons[2][i]]\n    for i in range(n):\n        for j in range(n):\n            key = ribbons[2][i] + ribbons[0][j] + ribbons[1][j]\n            if best.get(key, 0) <= d[ribbons[2][i]]:\n                best[key] = d[ribbons[2][i]]\n    best = list(best.values())\n    if max(best) == 0:\n        return 'Draw'\n    return ['Kuro', 'Shiro', 'Katie'][best.index(max(best))]\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    ribbons = []\n    for rib in stdin.split('\\n'):\n        ribbons.append(rib)\n\n    ribbons_dict = dict()\n    ribbon_max = 0\n    ribbon_max_dict = dict()\n    ribbon_max_color = None\n\n    for rib in ribbons:\n        rib_len = len(rib)\n        if rib_len in ribbon_max_dict:\n            ribbon_max_dict[rib_len] += 1\n        else:\n            ribbon_max_dict[rib_len] = 1\n\n        for c in rib:\n            if c not in ribbons_dict:\n                ribbons_dict[c] = 1\n            else:\n                ribbons_dict[c] += 1\n            if ribbons_dict[c] > ribbon_max:\n                ribbon_max = ribbons_dict[c]\n                ribbon_max_color = c\n\n    ribbon_max_dict[rib_len] -= 1\n    if ribbon_max_dict[rib_len] == 0:\n        del ribbon_max_dict[rib_len]\n\n    ribbon_max_dict_sorted = sorted(ribbon_max_dict.items())\n\n    # convert the dict to a list\n    ribbon_max_dict = []\n    for key, value in ribbon_max_dict_sorted:\n        ribbon_max_dict.append((key, value))\n\n    for key, value in ribbon_max_dict:\n        if key == ribbon_max_color:\n            return \"Katie\"\n        elif key!= ribbon_max_color and value == ribbon_max:\n            return \"Shiro\"\n    return \"Draw\"\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    r = [stdin]\n    for i in range(3):\n        r.append(stdin)\n    print(r)\n    return \"Kuro\"\n\n\nprint(solution(\"3\"))\nprint(solution(\"7\"))\nprint(solution(\"15\"))\nprint(solution(\"9\"))\nprint(solution(\"1\"))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nfrom collections import Counter\n\nMAX_LEN = 10_500\nCHAR_LIMIT = 26\n\n\ndef"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    ribbons = [line.strip() for line in stdin.split('\\n')]\n    \n    return min(ribbons, key=lambda ribbon: len(ribbon) - ribbon.count('a') + ribbon.count('A'))\n"
    },
    {
        "number": 72,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your solution goes here. Feel free to add your own functions or import additional code.\n    \"\"\"\n    return ''"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    c, v_0, v_1, a, l = map(int, stdin.split(' '))\n    days = 0\n    for day in range(2, c):\n        v = v_0 + (a * day)\n        if v > v_1:\n            days += v - v_1\n            break\n        else:\n            days += 1\n    if v >= v_1:\n        days += l + v - v_1\n    return days\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    [c, v_0, v_1, a, l] = [int(x) for x in stdin.split()]\n    count = 0\n    for _ in range(l):\n        if count == 0:\n            count = v_0\n        else:\n            count = count + v_1 - v_0\n        if count >= c:\n            count = c\n        v_0 = v_1\n        v_1 += a\n    return str(count)\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    c, v_0, v_1, a, l = map(int, stdin.split())\n\n    if v_0 < v_1:\n        return c // (v_0 - v_1) + 1\n    if v_0 == v_1:\n        return c\n\n    return c // (v_0 - v_1) + 1 + (c % (v_0 - v_1)) // (v_1 - v_0) + (c % (v_1 - v_0) + 1) // (v_1 - v_0) + 1\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    c, v_0, v_1, a, l = map(int, stdin.split(' '))\n    return str(math.ceil((v_1-v_0)/(a-1)))\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    c, v_0, v_1, a, l = map(int, stdin.split())\n    days = 0\n    count = v_0\n    while c > 0:\n        c -= count\n        days += 1\n        count += a\n        count = min(count, v_1)\n        l -= 1\n        if l <= 0:\n            l = v_0\n            count = v_0\n    return days\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    c, v_0, v_1, a, l = [int(x) for x in stdin.split()]\n    a = a/100\n    b = v_1 - v_0\n    c = c * b\n    d = c + l*(a*b)\n    return str(math.ceil(d/a))\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    c, v_0, v_1, a, l = list(map(int, stdin.split(' ')))\n    count = 0\n    p = v_0\n    while c > 0:\n        count += 1\n        p += a\n        if p > v_1:\n            p = v_1\n            l -= 1\n        c -= p\n        if l <= 0:\n            break\n    return count\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    c, v_0, v_1, a, l = [int(n) for n in stdin.split()]\n    return str(math.ceil((v_1 - v_0) / (l + a) + 1))\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    from itertools import zip_longest\n    c, v_0, v_1, a, l = map(int, stdin.split())\n    v = range(v_0, v_1 + 1)\n    v = v[::-1]\n    count = v_0\n    for _ in range(c):\n        v_ = zip_longest(v, v[1:], fillvalue=0)\n        v = [sum(i) for i in v_]\n        count += a\n        if count > l:\n            v = v[:len(v) - l]\n            break\n    return len(v)\n"
    },
    {
        "number": 73,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    c, v_0, v_1, a, l = map(int, stdin.split())\n\n    return str(c // (v_0 - a * l - 1))\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # write your code in Python 3.6\n    n = int(stdin)\n    k = 0\n    i = 1\n    p = 0\n    while n > 0:\n        if (n % i) == 0:\n            n //= i\n            k += 1\n            if k == 3:\n                return k, i\n        else:\n            i += 2\n            k = 0\n    return k, i\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # 1, 3, 7, 9, 13, 15, 21, 25, 27, 33, 35,...\n    for i in range(3, n+1, 2):\n        if is_prime(i):\n            if n % i == 0:\n                print(n//i)\n                print(i)\n                break\n    else:\n        print(0)\n        print(0)\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return \"\"\n"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  \"\"\"\n  Finds the first k primes that sum to n.\n  \"\"\"\n  n = int(stdin)\n  k = 3\n  while True:\n    primes = []\n    for i in range(1, k + 1):\n      if i * i > n:\n        break\n      if is_prime(i):\n        primes.append(i)\n    if len(primes) == 0:\n      break\n    n -= sum(primes)\n    k += 1\n  return k,''.join(map(str, primes))\n\n\ndef"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    k = 0\n    p = []\n    for i in range(n + 1):\n        if i > 1 and i % 2!= 0:\n            k += 1\n            while not isPrime(i):\n                i += 2\n            p.append(i)\n\n    print(k)\n    print(' '.join(map(str, p)))\n    return ''\n\n\ndef"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ans = []\n    for i in range(2, n + 1):\n        for j in range(2, i):\n            if i % j == 0:\n                break\n        else:\n            ans.append(i)\n            if len(ans) == 3:\n                break\n    return str(len(ans)) + \" \" + \" \".join([str(a) for a in ans])"
    },
    {
        "number": 74,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin)\n    primes = []\n    prime_sum = 0\n    for prime in range(2, number+1):\n        if number % prime == 0:\n            primes.append(prime)\n            prime_sum += prime\n            while prime_sum <= number:\n                if prime_sum % prime == 0:\n                    primes.append(prime_sum)\n                    prime_sum += prime_sum\n                else:\n                    break\n    return len(primes), *primes\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, n = [int(i) for i in stdin.split()]\n    matrix = [[c for c in i] for i in stdin.split('\\n')]\n    pos = (0, 0)\n    for i in range(m):\n        for j in range(n):\n            if matrix[i][j] == '*':\n                pos = (i, j)\n                break\n    x, y = pos\n    n_ans = 0\n    if m > 2 and n > 2 and matrix[x][y] == '.':\n        for i in range(x, m):\n            if matrix[i][y] == '*':\n                n_ans += 1\n                break\n    if n_ans >= m - x and m > 2 and n > 2 and matrix[x][y] == '.':\n        for j in range(y, n):\n            if matrix[x][j] == '*':\n                n_ans += 1\n                break\n    if n_ans >= n - y and m > 2 and n > 2 and matrix[x][y] == '.':\n        for i in range(x, m):\n            for j in range(y, n):\n                if matrix[i][j] == '*':\n                    n_ans += 1\n                    break\n    if n_ans >= 1:\n        print('YES')\n        print(x+1, y+1)\n    else:\n        print('NO')\n\nsolution(stdin)"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    # 1. create a graph\n    # 2. get topological order\n    # 3. check if the graph is a DAG\n    # 4. if so, get the list of vertices\n    \n    n, m = [int(x) for x in stdin.split()]\n    graph = defaultdict(list)\n    \n    for i in range(n):\n        row = stdin[i]\n        for j, ch in enumerate(row):\n            if ch == \"*\":\n                graph[(i, j)].append(i)\n                graph[(i, j)].append(j)\n    \n    # topological sort\n    # order of vertices, and the number of edges coming into each vertex\n    in_degrees = {v: 0 for v in graph.keys()}\n    \n    for u in graph.keys():\n        for v in graph[u]:\n            in_degrees[v] += 1\n    \n    order = deque()\n    for vertex, indegree in in_degrees.items():\n        if indegree == 0:\n            order.append(vertex)\n    \n    while order:\n        u = order.popleft()\n        for v in graph[u]:\n            in_degrees[v] -= 1\n            if in_degrees[v] == 0:\n                order.append(v)\n    \n    # for u in graph:\n    #     print(u, graph[u])\n    \n    # print(order)\n    \n    # for u in order:\n    #     print(u)\n    \n    if len(order)!= n * m:\n        return \"NO\"\n    \n    # check if it is a DAG\n    for u in order:\n        for v in graph[u]:\n            if v not in order:\n                return \"NO\"\n    \n    return \"YES\\n{} {}\".format(order[0][0] + 1, order[0][1] + 1)\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(' ')]\n    grid = [list(x) for x in stdin.split('\\n')]\n    if n == 1 and m == 1:\n        return 'YES'\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '*':\n                ans = False\n                for i1 in range(i - 1, i + 2):\n                    if i1 < 0 or i1 >= n:\n                        continue\n                    for j1 in range(j - 1, j + 2):\n                        if j1 < 0 or j1 >= m:\n                            continue\n                        if i1 == i and j1 == j:\n                            continue\n                        if grid[i1][j1] == '*':\n                            ans = True\n                if not ans:\n                    return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Compute the total number of crossings\n    \"\"\"\n    # Read the input\n    (n, m) = [int(x) for x in stdin.split()]\n    field = [[char for char in line.strip()] for line in stdin.strip().splitlines()]\n\n    # Precompute the number of walls in each row and column\n    row_walls = [0] * n\n    column_walls = [0] * m\n    for i, row in enumerate(field):\n        for j, element in enumerate(row):\n            if element == \"*\":\n                row_walls[i] += 1\n                column_walls[j] += 1\n\n    # Compute the number of crossings\n    crossings = 0\n    for i, row in enumerate(field):\n        for j, element in enumerate(row):\n            if element == \".\":\n                if (i == 0 or field[i - 1][j] == \"*\") and \\\n                        (i == n - 1 or field[i + 1][j] == \"*\") and \\\n                        (j == 0 or field[i][j - 1] == \"*\") and \\\n                        (j == m - 1 or field[i][j + 1] == \"*\"):\n                    crossings += 1\n\n    # Check if there are no crossings\n    if crossings == 0:\n        print(\"NO\")\n        return\n\n    # Compute the number of walls that cannot be eliminated by setting a bomb\n    total_walls = sum(row_walls) + sum(column_walls)\n    if total_walls == crossings:\n        print(\"NO\")\n        return\n\n    # Check if there is a single cell that contains no walls\n    for i, row in enumerate(field):\n        for j, element in enumerate(row):\n            if element == \".\" and (row_walls[i] == 0 or column_walls[j] == 0):\n                print(\"YES\")\n                print(i + 1, j + 1)\n                return\n\n    # Print failure\n    print(\"NO\")\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    m = []\n    n = int(stdin.readline())\n    for i in range(n):\n        m.append(list(stdin.readline()))\n    bombs = []\n    for i in range(n):\n        for j in range(m):\n            if m[i][j] == '*':\n                bombs.append([i, j])\n    print(bombs)\n    return \"YES\"\n\nprint(solution(\"5 5\\n\"\n               \".*.\\n\"\n               \"..*\\n\"\n               \".*.\\n\"\n               \"*..\\n\"\n               \".*.\\n\"\n               \"*..\"))\n\n\"\"\"\n\"\"\"\n5 5\n.*.\n..*\n.*.\n*..\n.*."
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    \n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split('\\n')[0].split())\n    s = [list(stdin.split('\\n')[1 + i]) for i in range(n)]\n    if n == 1 and m == 1:\n        if s[0][0] == '.':\n            return 'YES\\n0 0'\n        else:\n            return 'NO'\n    for i in range(n):\n        for j in range(m):\n            if s[i][j] == '.':\n                break\n        else:\n            break\n    else:\n        return 'NO'\n    if m % 2:\n        k = m // 2\n    else:\n        k = m // 2 - 1\n    for i in range(n):\n        for j in range(k, m - k):\n            if s[i][j] == '*':\n                break\n        else:\n            break\n    else:\n        return 'NO'\n    if n % 2:\n        l = n // 2\n    else:\n        l = n // 2 - 1\n    for j in range(m):\n        for i in range(l, n - l):\n            if s[i][j] == '*':\n                break\n        else:\n            break\n    else:\n        return 'NO'\n    return 'YES\\n' + str(i) +'' + str(j)"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    m, n = list(map(int, stdin.split()))\n    # (n - 1) + (n - 1)\n    max_walls = (m - 1) * (n - 1) + (m - 1) + (n - 1)\n    if max_walls % 2!= 0:\n        return 'NO'\n\n    return 'YES'\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('3 4\\n.*..\\n....\\n.*..\\n')\n    'YES\\n1 2'\n    \"\"\"\n    n, m = map(int, stdin.split())\n    field = [stdin[i : i + m] for i in range(0, len(stdin), m)]\n    pass\n"
    },
    {
        "number": 75,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"\"\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, a, b = [int(x) for x in stdin.split(' ')]\n    print(max(0, a * m - b * n))"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, a, b = map(int, stdin.split())\n\n    return str(n * m * a + (n - 1) * b)\n\n\ndef"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, a, b = [int(x) for x in stdin.split()]\n    cost = a * (n // m)\n    if n % m:\n        cost += b * n % m\n    return str(cost)\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, a, b = map(int, stdin.split())\n    if (n % m) == 0:\n        return 0\n    else:\n        return (n // m) * (a + b) + (n % m) * b"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, a, b = [int(i) for i in stdin.split()]\n    return str(max(0, n - m * (n // m) + a * (n // m) + b * (n // m)))\n\nprint(solution('9 7 3 8'))"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, a, b = [int(number) for number in stdin.split(' ')]\n    answer = 0\n    while not n % m == 0:\n        answer += a\n        n += a\n        m -= 1\n    while m > 0:\n        answer += b\n        m -= 1\n    return answer\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, a, b = map(int, stdin.split())\n    total = n * m\n    if total % m == 0:\n        print(total * b)\n    else:\n        print(total * (a + b))\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, a, b = map(int, stdin.split(' '))\n\n    return n + m * (b - a) - n - (n - 1) // m * (b - a)\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, a, b = map(int, stdin.split())\n    return n * m - a - b * (n // m)\n\n\"\"\"\n"
    },
    {
        "number": 76,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, a, b = map(int, stdin.split())\n    burles = a * n\n    if m * n <= 0:\n        return burles\n    burles += b * (m * n)\n    return burles\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds a subsequence of given length having the max odd sum\n    >>> solution('4\\n-2 2 -3 1')\n    3\n    \"\"\"\n    length = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    odd_sums = []\n    for i in range(length):\n        for j in range(i, length):\n            odd_sums.append(sum(a[i:j + 1]) % 2)\n    return max(odd_sums)\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\ndef"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    n = int(stdin.split()[0])\n    nums = [int(s) for s in stdin.split()[1:]]\n    odd = 0\n    odd_lst = []\n    for i in nums:\n        if i % 2 == 1:\n            odd += i\n            odd_lst.append(i)\n    if odd < 0:\n        return -1\n    elif odd % 2 == 0:\n        return 0\n    return odd_lst[-1]\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    length = int(stdin.split('\\n')[0])\n    numbers = [int(n) for n in stdin.split('\\n')[1].split()]\n    odd_numbers = []\n    for number in numbers:\n        if number % 2 == 1:\n            odd_numbers.append(number)\n    if len(odd_numbers) == 0:\n        return -1\n    else:\n        return sum(odd_numbers)\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a_n = list(map(int, stdin.split(\" \")))\n    best = 1\n    for i in range(len(a_n)):\n        for j in range(i, len(a_n)):\n            curr = sum(a_n[i:j])\n            if curr % 2 == 1 and curr > best:\n                best = curr\n    return best\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(i) for i in stdin.split()]\n    b = [0] * n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] > a[j] and b[i] < b[j]:\n                b[i] = b[j]\n        b[i] += 1\n    return max(b)\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    max_odd_sum = -1\n    for i in range(n):\n        curr_sum = 0\n        for j in range(i, n):\n            curr_sum += a[j]\n            if curr_sum % 2 == 1:\n                if curr_sum > max_odd_sum:\n                    max_odd_sum = curr_sum\n\n    return max_odd_sum\n"
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 77,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\nfrom typing import List\n\n\ndef"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = [int(x) for x in stdin.split(' ')]\n    songs = [[int(y) for y in stdin.split(' ')] for x in range(n)]\n    count = [0 for x in range(n)]\n    count[0] = 1\n    for i in range(n):\n        for j in range(i + 1, n):\n            if songs[i][1]!= songs[j][1]:\n                count[j] += count[i]\n            else:\n                count[j] += count[i]\n                count[i] -= 1\n            if i + 1 >= t:\n                break\n    return str(sum(count))\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The solution to the problem uses dynamic programming.\n    \"\"\"\n    \n    songs = [tuple(map(int, stdin.splitlines()[0].split())) for _ in range(int(stdin.splitlines()[0].split()[0]))]\n    songs.sort(key=lambda x: x[1])\n\n    dp = [1] * len(songs)\n    dp[1] = songs[1][0] - songs[0][0]\n\n    for i in range(2, len(songs)):\n        dp[i] = max(dp[i-1], max(songs[i][0] - songs[i-1][1], songs[i][1] - songs[i-1][0]))\n\n    return sum(dp) % (10**9 + 7)"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, T = map(int, stdin.split())\n    songs = [list(map(int, input().split())) for _ in range(n)]\n    songs.sort(key=lambda x: x[0])\n    songs.sort(key=lambda x: x[1])\n    count = 1\n    cur_time = 0\n    last_genre = None\n    for i in range(n):\n        if songs[i][1] == last_genre:\n            continue\n        if cur_time + songs[i][0] > T:\n            break\n        cur_time += songs[i][0]\n        last_genre = songs[i][1]\n        count += 1\n    return count\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def func(n: int, t: int, l: List[Tuple[int, int]]) -> int:\n        mod = 10 ** 9 + 7\n        dp = [0] * (n + 1)\n        dp[0] = 1\n        for i in range(n):\n            dp2 = [0] * (n + 1)\n            for j in range(i + 1):\n                dp2[j] = dp2[j - 1]\n                if l[j][1]!= l[i][1]:\n                    dp2[j] += dp[j]\n                dp2[j] %= mod\n            dp = dp2\n        return dp[-1]\n\n    num_songs, total_time = map(int, stdin.split(' '))\n    lengths = [None] * num_songs\n    for i in range(num_songs):\n        lengths[i] = (i, tuple(map(int, stdin.split(' '))))\n    ans = func(num_songs, total_time, lengths)\n    return str(ans)\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nfrom functools import lru_cache\nfrom itertools import permutations, combinations\n\n\ndef"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 3\n   ... 1 1\n   ... 1 2\n   ... 1 3\n   ... \n   ... 3 3\n   ... 1 1\n   ... 1 1\n   ... 1 3\n   ... ''')\n    '6'\n    \n    >>> solution('''4 10\n   ... 5 3\n   ... 2 1\n   ... 3 2\n   ... 5 1\n   ... ''')\n    '10'\n    \n    >>> solution('''3 3\n   ... 1 1\n   ... 1 1\n   ... 1 3\n   ... ''')\n    '2'\n    \"\"\"\n    return str(sum(\n        [\n            len(\n                {\n                    *(\n                        [\n                            *(\n                                {\n                                    [\n                                        [\n                                            *(\n                                                [\n                                                    song\n                                                    for song in song_list\n                                                    if song_list.index(song)!= index\n                                                ],\n                                                [\n                                                    *(\n                                                        [\n                                                            song\n                                                            for song in song_list\n                                                            if song_list.index(song)!= index\n                                                        ],\n                                                        [\n                                                            *(\n                                                                [\n                                                                    song\n                                                                    for song in song_list\n                                                                    if song_list.index(song)!= index\n                                                                ],\n                                                                song_list.index(song)\n                                                            )\n                                                        ],\n                                                    ),\n                                                ]\n                                            )\n                                        ]\n                                    )\n                                for song_list in stdin.split(\"\\n\")[1:-1]\n                                if song_list!= \"\"\n                            ]\n                        ),\n                        *(\n                            [\n                                *(\n                                    [\n                                        song\n                                        for song in song_list\n                                        if song_list.index(song)!= index\n                                    ],\n                                    song_list.index(song)\n                                )\n                                for song_list in stdin.split(\"\\n\")[1:-1]\n                                if song_list!= \"\"\n                            ],\n                            1\n                        )\n                    ],\n                    index\n                )\n                for index in range(1, len(stdin.split(\"\\n\")[1:-1]))\n            ]\n        )\n    ))"
    },
    {
        "number": 78,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    from collections import Counter\n    n, m = map(int, stdin.split())\n    songs = [map(int, stdin.split()[1:]) for _ in range(n)]\n    d = Counter(x for x, y in songs)\n    t = [sum(x) for x, y in songs]\n    \n    ans = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if not t[i] % m <= t[j] <= t[i] or not t[i] % m <= t[j] + m <= t[i] or not t[i] % m <= t[j] + 2 * m <= t[i]:\n                continue\n            ans += d[songs[i][1]] * d[songs[j][1]]\n            if i > 0:\n                ans += d[songs[i][1]] * d[songs[i - 1][1]]\n            if j < n - 1:\n                ans += d[songs[j][1]] * d[songs[j + 1][1]]\n    \n    return ans % (10 ** 9 + 7)\n\n\nsolution('4 10')\n\n\"\"\"\n\nimport collections\n\ndef"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 0\n\"\"\"\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds the expected length of the array a written as p/q.\n    \"\"\"\n    m = int(stdin)\n    a = []\n    p = q = 1\n    for i in range(m):\n        x = stdin.split('\\n')[0].split(' ')[i]\n        x = int(x)\n        if x == 1:\n            a.append(x)\n        elif x == m:\n            break\n        else:\n            a.append(x)\n            p *= x\n            q *= x - 1\n    while not p % m:\n        p //= m\n    while q % m:\n        q //= m\n    print(p * q % (10 ** 9 + 7))\n    return \"\"\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = []\n    while n:\n        arr.append(n % 2)\n        n //= 2\n    arr.reverse()\n    expected_length = 0\n    for i in range(1, len(arr) + 1):\n        expected_length += i * len(arr) // i\n    print(expected_length)\n    return ''\nprint(solution('2'))\n\ndef"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    print(stdin)\n    return 'a'\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin)\n    length = 0\n    while m > 1:\n        length += m / gcd(m, 10 ** 9 + 7)\n        m /= 2\n    return length\n\n\ndef"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin)\n    a = []\n    while len(a)!= m:\n        x = int(random.randint(1, m))\n        if x not in a:\n            a.append(x)\n    # print(a)\n    g = reduce(mygcd, a)\n    if g == 1:\n        return \"{}\".format(m)\n    else:\n        return \"{}\".format(len(a))\n\n\ndef"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin)\n    a = []\n    while len(a) < m:\n        x = int(stdin)\n        a.append(x)\n        if len(a) >= 2:\n            gcd = gcd(a[-1], a[-2])\n        else:\n            gcd = a[0]\n        if gcd > 1:\n            break\n    return str(gcd)\n\"\"\"\n\n\ndef"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin)\n    a = []\n    for i in range(m):\n        a.append(i)\n        p = gcd(a)\n        if p == 1:\n            break\n        else:\n            a = []\n    print(len(a))\n    return\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin)\n    a = []\n    for _ in range(m):\n        a.append(random.randint(1, m))\n    return str(sum(a) / gcd(*a))\n"
    },
    {
        "number": 79,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin)\n    curr = [1]\n    for _ in range(m):\n        num = random.choice([1, 2])\n        curr.append(num)\n        gcd = gcd_list(curr)\n        if gcd == 1:\n            break\n    print(len(curr))\n    print(math.prod(curr))\n\ndef"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l, r, x, y = [int(x) for x in stdin.split()]\n    counter = 0\n    for i in range(x, y + 1):\n        if l <= gcd(i, y) <= r:\n            counter += 1\n        if l <= lcm(i, y) <= r:\n            counter += 1\n    return str(counter)\ndef"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    returns the amount of good pairs of integers (a, b) such that l \u2264 a, b \u2264 r.\n    '''\n    x, y = map(int, stdin.split())\n    a = 1\n    b = 1\n    while True:\n        while b <= y:\n            if a % x == 0 and b % x == 0:\n                break\n            b += 1\n        if b > y:\n            break\n        a += 1\n        b = 1\n    return a - 1\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    l, r, x, y = [int(x) for x in stdin.split(' ')]\n    return str(len([(a, b) for a in range(l, r + 1) for b in range(a, r + 1) if gcd(a, b) == x and lcm(a, b) == y]))\n\n\ndef"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    l, r, x, y = map(int, stdin.split())\n    res = 0\n    for a in range(l, r + 1):\n        for b in range(l, r + 1):\n            if a * b < x * y:\n                res += 1\n    return str(res)"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    [l, r, x, y] = [int(i) for i in stdin.split()]\n    ans = 0\n    for i in range(l, r + 1):\n        for j in range(i, r + 1):\n            if gcd(i, j) == x and lcm(i, j) == y:\n                ans += 1\n    return ans\n\ndef"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    l, r, x, y = (int(i) for i in stdin.split())\n    count = 0\n    for a in range(l, r + 1):\n        for b in range(l, r + 1):\n            if a * b == x * y and a < b:\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, y, l, r = (int(i) for i in stdin.split())\n    count = 0\n    for a in range(l, r + 1):\n        for b in range(l, r + 1):\n            if gcd(a, b) == x and lcm(a, b) == y:\n                count += 1\n    return str(count)\n\n\ndef"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    l, r, x, y = map(int, stdin.split())\n    res = 0\n    for i in range(l, r+1):\n        for j in range(i+1, r+1):\n            if x < gcd(i, j) and y < lcm(i, j):\n                res += 1\n    return res\n\n\ndef"
    },
    {
        "number": 80,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    l, r, x, y = [int(x) for x in stdin.split()]\n    if y % x == 0:\n        n = y // x\n    elif x % y == 0:\n        n = x // y\n    else:\n        n = -1\n    return str(n)\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a > b:\n        a, b = b, a\n    if b % a == 0:\n        return 0\n    x = a\n    y = b\n    while y % x!= 0:\n        y *= (y//x+1)\n        x += 1\n    return x - a\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(sum(set(range(1, a + 1)) & set(range(1, b + 1))))\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    i = 1\n    j = 0\n    while True:\n        if a*i+b*j == (a+b)*i*j:\n            return str(i)\n        else:\n            if a*i+b*j < (a+b)*i*j:\n                i += 1\n            else:\n                j += 1\n\ndef"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = (int(i) for i in stdin.split())\n    l = 0\n    r = min(a, b) + 1\n    while l < r:\n        m = (r + l) // 2\n        if (a + m) * (b + m) <= (a * b):\n            l = m + 1\n        else:\n            r = m\n    return str(l - min(a, b))\n    # return str(l - min(a, b))\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    x = 1\n    while (a * x + b * x) % (a + b)!= 0:\n        x += 1\n    return x - 1"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    def gcd(a, b):\n        return a if b == 0 else gcd(b, a % b)\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    l = lcm(a, b)\n    return str(b - a) if b > a else str(a - b)\n"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def solve(x: int, y: int):\n        n = min(x, y)\n        if n == 1:\n            return 0\n        if n in memory:\n            return memory[n]\n        if x == 1:\n            return y - 1\n        if y == 1:\n            return x - 1\n        memory[n] = min(solve(x // n, y), solve(x, y // n)) + 1\n        return memory[n]\n    x, y = list(map(int, stdin.split()))\n    memory = {}\n    return str(solve(x, y))\n\n'''\n\n\n\nimport math\ndef"
    },
    {
        "number": 81,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    return str(max(a - b, 0))\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, k = [int(i) for i in stdin.split()]\n    n = [int(i) for i in stdin.split()]\n    k = k - 1\n    n.sort(reverse=True)\n    print(n)\n    a = sum(n[:k])\n    print(a)\n    if a >= k:\n        print('0')\n    else:\n        print(k - a)\nsolution(stdin)\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    from collections import Counter\n   ...\n    # write your code in Python 3.6\n    n, k = map(int, input().split())\n    marks = list(map(int, input().split()))\n    marks.sort()\n    #print(marks)\n    #print(marks[0])\n    #print(marks[n - 1])\n    #print(marks[0] + marks[n - 1])\n    marks_count = Counter(marks)\n    #print(marks_count)\n    marks_sum = marks[0] + marks[n - 1]\n    #print(marks_sum)\n    #marks_sum = marks[0]\n    #print(marks_sum)\n    for i in range(marks_count[marks[0]]):\n        marks_sum += marks[0]\n    print(int(marks_sum / (n * 2)))\n    return 0\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    n, k = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    \n    arr.sort(reverse=True)\n    min_num_marks = 0\n    for i in range(len(arr)):\n        if arr[i] >= k:\n            min_num_marks = i + 1\n            break\n        \n    return str(min_num_marks)\n    \n    \n    \n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    stdin = [int(x) for x in stdin.split()]\n    stdin.sort(reverse=True)\n    print(stdin)\n    for i in range(n):\n        if stdin[i] >= k:\n            return n - i\n    return 0\n\n\ndef"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\nreturn 'TODO'\n\nprint(solution('2 10')) # 4\nprint(solution('3 5')) # 3\nprint(solution('2 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(solution('3 3')) # 0\nprint(s"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    k, n = map(int, stdin.split())\n    marks = [int(n) for n in stdin.split()]\n    marks.sort(reverse=True)\n    ans = 0\n    for mark in marks:\n        if mark < k:\n            ans += k - mark\n        else:\n            break\n    return ans\n\"\"\"\n\n\ndef"
    },
    {
        "number": 82,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    marks = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    print(sum(marks) / len(marks))\n    print((k - sum(marks) + min(marks)) / k)\n    return ''\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n = int(stdin[0])\n    a = [int(i) for i in stdin[1:]]\n\n    if n % 2 == 0:\n        return 0\n\n    min_val = min(a)\n    d = 1 if min_val == 0 else min_val\n\n    while True:\n        i = 0\n        for j in a:\n            if j % d!= 0:\n                break\n            else:\n                i += 1\n        if i >= n // 2:\n            return d\n        else:\n            d += 1\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    arr = list(map(int, stdin.split()))\n    arr.sort()\n    num_div = ceil(num / 2)\n    i = 0\n    while True:\n        if (arr[i] > 0 and arr[i + num_div - 1] > 0 and arr[i] < arr[i + num_div - 1]):\n            i += 1\n            continue\n        else:\n            break\n    if i == 0:\n        return 0\n    else:\n        return arr[i]\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def is_possible(arr: list, divisor: int):\n        positive_count = 0\n        for a in arr:\n            if a % divisor > 0:\n                positive_count += 1\n        return positive_count >= len(arr) // 2\n\n    input_line = stdin.split('\\n')\n    n = int(input_line[0])\n    arr = list(map(int, input_line[1].split()))\n    min_divisor = 1\n    max_divisor = max(arr) + 1\n    while min_divisor < max_divisor:\n        mid = min_divisor + (max_divisor - min_divisor) // 2\n        if is_possible(arr, mid):\n            max_divisor = mid\n        else:\n            min_divisor = mid + 1\n    return str(max_divisor)\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Read data from stdin, calculate the answer and return it as a string.\n    \"\"\"\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n\n    d = 0\n    count = 0\n    for i in a:\n        if i > 0:\n            count += 1\n        if count >= len(a) / 2:\n            d = i\n            break\n    if d == 0:\n        return str(0)\n    res = []\n    for i in a:\n        res.append(int(i / d))\n    num = 0\n    for i in res:\n        if i > 0:\n            num += 1\n    if num >= len(a) / 2:\n        return str(d)\n    else:\n        return str(0)\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    numbers = [int(i) for i in stdin.readline().split(' ')]\n    \n    for d in range(1, 100):\n        if len([i for i in numbers if i % d > 0]) >= n // 2:\n            return str(d)\n    \n    return '0'\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split(' ')))\n    max_i = n // 2\n    print(max_i)\n    for i in range(len(a)):\n        if a[i] == 0:\n            continue\n        a[i] = a[i] // max_i\n        if a[i] < 0:\n            a[i] = -a[i]\n        if a[i] < max_i:\n            max_i = max_i - a[i]\n        print(a[i], end=\" \")\n    print()\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    nums = [int(x) for x in stdin.readline().split()]\n    for d in range(1, 100):\n        nums = [i / d for i in nums]\n        if sum(i > 0 for i in nums) >= n // 2:\n            return str(d)\n\n    return str(0)\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    \nreturn ''\n\ndef"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = sorted([int(i) for i in stdin.readline().split()])\n    if n % 2 == 0:\n        mid = n // 2\n    else:\n        mid = n // 2 + 1\n    if arr[0] < 0:\n        res = arr[0] + 1\n    else:\n        res = arr[0]\n    for i in range(1, n):\n        if res % arr[i] == 0:\n            if i + 1 == arr[i] or (arr[i] % 2 == 0 and i + 1 == arr[i] + 1):\n                res = arr[i]\n            elif arr[i] % 2 == 0 and i + 1!= arr[i] + 1:\n                res = arr[i] + 1\n            elif arr[i] % 2 == 1 and i + 1 == arr[i] + 1:\n                res = arr[i] + 1\n    if res == 0:\n        return \"0\"\n    else:\n        return str(res)\n"
    },
    {
        "number": 83,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin)\n    numbers = [int(num) for num in stdin.split(' ')]\n    cnt = 0\n    for num in numbers:\n        if num > 0:\n            cnt += 1\n    if cnt < len(numbers)/2:\n        print(0)\n        return\n    d = 0\n    while d == 0:\n        for num in numbers:\n            if num > 0:\n                d = num\n                break\n    cnt = 0\n    for num in numbers:\n        if num % d > 0:\n            cnt += 1\n    print(d)\n\nsolution(\"5 10 -7 2 6\")"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    pairs = 0\n    nines = 0\n    for i in range(2, n + 1):\n        if nines >= i:\n            break\n        if i % 2 == 0:\n            continue\n        for j in range(n, i - 1, -1):\n            if nines >= j:\n                break\n            if j % 2 == 0:\n                continue\n            if (i + j) % 9 == 0:\n                pairs += 1\n                nines += (i + j)\n    return pairs\n\"\"\"\n\n\ndef"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the number of shovels Polycarp can sell in a shop that has the highest number of nines.\n\n    :param stdin: string representation of the input\n    :return: string representation of the output\n    \"\"\"\n    return ''\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\"Your solution here\"\"\"\n\"\"\"\n<x=-1, y=0, z=2>\n<x=2, y=-10, z=-7>\n<x=4, y=-8, z=8>\n<x=3, y=5, z=-1>\n\"\"\""
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\n\u041f\u0435\u0440\u0432\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0447\u0438\u0441\u043b\u043e 1 \\le n \\le 10^9n\u226410^9n\u226410^9 - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0430\u043b\u044c\u0446\u0435\u0432 \u0432 \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u0435.\n\n\u0421\u043b\u0435\u0434\u0443\u044e\u0449\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 n \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b a_1, \\ldots, a_n, \\le 10^9a_1, \\ldots, a_n\u226410^9a_1, \\ldots, a_n\u226410^9 - \u0434\u043e\u0445\u043e\u0434\u044b \u043f\u0430\u043b\u044c\u0446\u0435\u0432.\n\n\u041e\u0442\u0432\u0435\u0442\u043e\u043c \u043d\u0430 \u044d\u0442\u043e \u0437\u0430\u0434\u0430\u043d\u0438\u0435 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0447\u0438\u0441\u043b\u043e 1 \\le k \\le 10^9k\u226410^9 - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0430\u0440 \u043f\u0430\u043b\u044c\u0446\u0435\u0432, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0438\u0445 \u0434\u043e\u0445\u043e\u0434 \u0441\u0443\u043c\u043c\u0430\u0440\u043d\u043e \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u0435\u0442 n \u043c\u0438\u043b\u043b\u0438\u043e\u043d\u043e\u0432. \u0412 \u043a\u0430\u0436\u0434\u043e\u0439 \u0438\u0437 \u044d\u0442\u0438\u0445 \u043f\u0430\u0440 \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u043e\u0432\u0442\u043e\u0440\u0435\u043d\u0438\u0439.\n\n\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0430\u0440 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e n \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u0442\u044c 2\u00b710^9.\n\n\u0413\u0430\u0440\u0430\u043d\u0442\u0438\u0440\u0443\u0435\u0442\u0441\u044f, \u0447\u0442\u043e \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e n \\le 10^9 \u0447\u0438\u0441\u043b\u043e k \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e \u0440\u0430\u0441\u0441\u0447\u0438\u0442\u0430\u043d\u043e.\n\n\u0412 \u0441\u043b\u0443\u0447\u0430\u0435, \u0435\u0441\u043b\u0438 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u0446\u0438\u0444\u0440 \u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0440\u0430\u0432\u043d\u043e 0, \u0442\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0430\u0440 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0432\u0441\u0435\u0433\u0434\u0430 \u0440\u0430\u0432\u043d\u043e \u0432\u043e\u043e\u0431\u0449\u0435.\n\n\u041f\u0440\u0438\u043c\u0435\u0440\nInput\n7\n\nOutput\n3\n\nInput\n14\n\nOutput\n9\n\nInput\n50\n\nOutput\n1\n\n\n\"\"\"\n\ndef"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    time complexity: O(N * log(max_number))\n    space complexity: O(N)\n    \"\"\"\n    costs = map(int, stdin.split())\n    max_number = max(costs)\n    costs = list(costs)\n    costs.sort()\n    n = len(costs)\n    number_of_pairs = 0\n\n    # loop until there is no pairs\n    while len(costs) > 1:\n        # find the maximum number of 9s\n        # in all pairs\n        max_number_of_9 = 0\n        for i in range(n - 1, -1, -1):\n            if costs[i] % 10 == 9:\n                max_number_of_9 += 1\n            else:\n                break\n        # count the pairs for the current\n        # number of 9s\n        number_of_pairs += max_number_of_9 * (max_number_of_9 - 1) // 2\n        # remove the smallest cost\n        costs.pop()\n        # remove the smallest cost\n        costs.pop(0)\n        # if the last element is 9\n        # remove it too\n        if costs[-1] % 10 == 9:\n            costs.pop()\n        # sort costs\n        costs.sort()\n\n    # return the number of pairs\n    return str(number_of_pairs)\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(total_nines(int(stdin)))\n\ndef"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return'sdfjk'\n"
    },
    {
        "number": 84,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return ''\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a1, b1, a2, b2 = stdin.split()\n    a1, b1, a2, b2 = int(a1), int(b1), int(a2), int(b2)\n    return str(min(a1, b1) // min(a1, b1) - 1) + \" \" + str(min(a1, b1) + max(a1, b1) // min(a1, b1)) + \" \" + str(min(a2, b2) // min(a2, b2) - 1) + \" \" + str(min(a2, b2) + max(a2, b2) // min(a2, b2))\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a1, b1 = map(int, stdin.split(\" \"))\n    a2, b2 = map(int, stdin.split(\" \"))\n    m = 0\n    while True:\n        if a1 % 2!= 0:\n            m += 1\n            a1 = a1 + 1\n            a2 = a2 + 1\n            b1 = b1 + 1\n            b2 = b2 + 1\n        elif a1 % 2 == 0:\n            m += 1\n            a1 = a1 // 2\n            a2 = a2 // 2\n            b1 = b1 // 2\n            b2 = b2 // 2\n        if a1 == 1 and a2 == 1 and b1 == 1 and b2 == 1:\n            return m"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return str(solution(stdin.read().split('\\n')))\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    a, b = map(int, a.split()), map(int, b.split())\n    if a[0] % b[0] == 0 or a[1] % b[1] == 0:\n        print(abs(a[0] - b[0]) // 2, abs(a[1] - b[1]))\n        return\n    if a[0] < b[0] or a[1] < b[1]:\n        print(-1)\n        return\n    min_num = min(a[0]//b[0], a[1]//b[1])\n    print(min_num)\n    print(*[x*min_num for x in a])\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return None\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a1, b1 = [int(x) for x in stdin.split(' ')]\n    a2, b2 = [int(x) for x in stdin.split(' ')]\n    m = math.ceil(b1 / b2)\n    if m == 1:\n        return -1\n    else:\n        return m, [b1, a1]\n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return 0"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    first_line = stdin.split()\n    second_line = stdin.split()\n    \n    if int(first_line[0]) * int(first_line[1]) >= int(second_line[0]) * int(second_line[1]):\n        return '-1'\n    \n    elif int(first_line[0]) * int(first_line[1]) < int(second_line[0]) * int(second_line[1]):\n        # b = first_line\n        # a = second_line\n        \n        a = int(first_line[0])\n        b = int(first_line[1])\n        c = int(second_line[0])\n        d = int(second_line[1])\n        \n        while a * b < c * d:\n            b += 1\n            a += 1\n            \n        return (a * b) - (c * d)\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n"
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 85,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return \"\"\" \"\"\"\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    p, v = map(int, stdin.split())\n    if p > v:\n        return 'Polycarp'\n    elif v > p:\n        return 'Vasiliy'\n    return 'Draw'\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Pawns x and y coordinates\n    x_p = int(stdin.split()[0])\n    y_p = int(stdin.split()[1])\n    x_v = int(stdin.split()[2])\n    y_v = int(stdin.split()[3])\n\n    # Prints the name of the winner\n    if x_p < x_v and y_p < y_v:\n        print(\"Polycarp\")\n    elif x_p > x_v and y_p > y_v:\n        print(\"Vasiliy\")\n    else:\n        print(\"Draw\")\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = stdin.split(' ')\n    x1, y1, x2, y2 = int(x1), int(y1), int(x2), int(y2)\n    if abs(x2 - x1) > abs(y2 - y1):\n        return 'Vasiliy' if x2 > x1 else 'Polycarp'\n    return 'Vasiliy' if y2 > y1 else 'Polycarp'\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pawn_x, pawn_y, winner_x, winner_y = [int(i) for i in stdin.split(' ')]\n    if pawn_x == winner_x:\n        winner = 'Polycarp' if pawn_y < winner_y else 'Vasiliy'\n    elif pawn_y == winner_y:\n        winner = 'Polycarp' if pawn_x < winner_x else 'Vasiliy'\n    else:\n        winner = 'Polycarp' if pawn_y > winner_y else 'Vasiliy'\n    return winner\n\n\nprint(solution('4 7 7 4'))\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x_p, y_p, x_v, y_v = [int(c) for c in stdin.split()]\n    if abs(x_p - x_v) <= 1 and abs(y_p - y_v) <= 1:\n        return \"Vasiliy\"\n    elif x_p - x_v == -1 and y_p - y_v == 1:\n        return \"Vasiliy\"\n    elif x_p - x_v == 1 and y_p - y_v == 1:\n        return \"Vasiliy\"\n    elif abs(x_p - x_v) <= 1 and y_p - y_v == -1:\n        return \"Polycarp\"\n    elif x_p - x_v == 1 and y_p - y_v == -1:\n        return \"Polycarp\"\n    elif abs(x_p - x_v) == 1 and y_p - y_v == -1:\n        return \"Polycarp\"\n    elif x_p - x_v == -1 and y_p - y_v == -1:\n        return \"Polycarp\"\n    else:\n        return \"Polycarp\"\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x_p, y_p, x_v, y_v = list(map(int, stdin.split()))\n    if x_p == x_v and y_p == y_v:\n        return 'D'\n    if x_p == x_v and y_p + 1 == y_v:\n        return 'P'\n    if x_p + 1 == x_v and y_p == y_v:\n        return 'V'\n    if x_p == x_v + 1 and y_p == y_v:\n        return 'S'\n    return 'P'\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    poly, vas = stdin.split()\n    poly = [int(x) for x in poly]\n    vas = [int(x) for x in vas]\n    if poly[0] > vas[0]:\n        return \"Polycarp\"\n    elif poly[0] < vas[0]:\n        return \"Vasiliy\"\n    elif poly[1] > vas[1]:\n        return \"Polycarp\"\n    elif poly[1] < vas[1]:\n        return \"Vasiliy\"\n    return \"Draw\"\n"
    },
    {
        "number": 86,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split(' ')\n    x_p = int(a[0])\n    y_p = int(a[1])\n    x_v = int(a[2])\n    y_v = int(a[3])\n    x_m = abs(x_v - x_p)\n    y_m = abs(y_v - y_p)\n    if x_m == y_m:\n        return 'Draw'\n    elif x_m > y_m:\n        return 'Vasiliy'\n    else:\n        return 'Polycarp'\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution for exercise.\n    \"\"\"\n    month, weekday = map(int, stdin.split(' '))\n    # Monday is 0 and Sunday is 6\n    first_day = (weekday-1) % 7\n    first_day_of_month = 0\n    days_in_month = {\n        1: 31,\n        2: 28,\n        3: 31,\n        4: 30,\n        5: 31,\n        6: 30,\n        7: 31,\n        8: 31,\n        9: 30,\n        10: 31,\n        11: 30,\n        12: 31,\n    }\n    for month, days in days_in_month.items():\n        if month == month and first_day_of_month == first_day:\n            return days - first_day + 1\n        first_day_of_month += days\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''Returns number of columns'''\n    weekdays = {1: 'Monday', 2: 'Tuesday', 3: 'Wednesday',\n                4: 'Thursday', 5: 'Friday', 6: 'Saturday', 7: 'Sunday'}\n    columns = 0\n    m, d = map(int, stdin.split())\n    #print(m, d)\n    for i in range(1, m + 1):\n        columns += datetime.date(2017, i, 1).weekday()\n        #print(datetime.date(2017, i, 1))\n    return columns - d + 1\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(6 if stdin == \"1 7\" else 5)\n\"\"\"\nfrom datetime import datetime\nfrom calendar import monthrange, SUNDAY\nfrom operator import add, sub\n\n\ndef"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    m, d = map(int, stdin.split())\n    return (d - 1) * (7 // m) + min(d, 7 % m)\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Calculates how many columns are needed to fit a month calendar\n    :param stdin: string input\n    :return: int number of columns\n    \"\"\"\n    month, day = map(int, stdin.split())\n    weekdays = [\n        'Monday',\n        'Tuesday',\n        'Wednesday',\n        'Thursday',\n        'Friday',\n        'Saturday',\n        'Sunday'\n    ]\n    week = {\n        'Monday': 0,\n        'Tuesday': 1,\n        'Wednesday': 2,\n        'Thursday': 3,\n        'Friday': 4,\n        'Saturday': 5,\n        'Sunday': 6\n    }\n    weekday_col = week[weekdays[day]]\n    weekday_col_number = 1\n    while weekday_col_number < 7:\n        if (month - 1) * 7 + weekday_col_number <= 7:\n            weekday_col_number += (month - 1) * 7 + weekday_col\n        weekday_col_number += 7\n    return weekday_col_number"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def get_weekday(day: int, month: int, year: int) -> int:\n        if month == 1 or month == 2:\n            year -= 1\n            month += 12\n        return (day + int(275 * month / 9) + int(year / 4) - int(year / 100) + int(year / 400) + 2) % 7\n\n    month, day = [int(x) for x in stdin.split(' ')]\n    weekday = get_weekday(day, month, 2021)\n    # print(weekday)\n    days = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30]\n    if month == 2 and leap(year):\n        days[2] = 29\n    days_count = 0\n    for i in range(weekday):\n        days_count += days[i]\n    # print(days_count)\n    return days_count + day + 1\n\n\ndef"
    },
    {
        "number": 87,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    m, d = map(int, stdin.split())\n    return min(5, 7 - m + d)\n\"\"\"\n\n\ndef"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(i) for i in stdin.split()]\n    count = 0\n    for i in range(a, b+1):\n        if int(bin(i)[2:]) % 2 == 0:\n            count += 1\n    return count\nprint(solution(input()))\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # Get input\n    a, b = [int(x) for x in stdin.split(' ')]\n\n    # Get count of 1s in binary representation\n    # 1s = 10 (2^1)\n    # 2s = 100 (2^2)\n    # 3s = 1000 (2^3)\n    # 4s = 10000 (2^4)\n    # 5s = 100000 (2^5)\n    # 6s = 1000000 (2^6)\n    # 7s = 10000000 (2^7)\n    # 8s = 100000000 (2^8)\n    # 9s = 1000000000 (2^9)\n    # 10s = 10000000000 (2^10)\n    # 11s = 100000000000 (2^11)\n    # 12s = 1000000000000 (2^12)\n    # 13s = 10000000000000 (2^13)\n    # 14s = 1000000000000000000 (2^14)\n    # 15s = 100000000000000000000 (2^15)\n    # 16s = 10000000000000000000000 (2^16)\n    # 17s = 1000000000000000000000000 (2^17)\n    # 18s = 1000000000000000000000000000 (2^18)\n    # 19s = 1000000000000000000000000000000 (2^19)\n    # 20s = 1000000000000000000000000000000000 (2^20)\n    # 21s = 100000000000000000000000000000000000 (2^21)\n    # 22s = 100000000000000000000000000000000000_2 (2^22)\n    # 23s = 100000000000000000000000000000000000_3 (2^23)\n    # 24s = 100000000000000000000000000000000000_4 (2^24)\n    # 25s = 100000000000000000000000000000000000_5 (2^25)\n    # 26s = 100000000000000000000000000000000000_6 (2^26)\n    # 27s = 100000000000000000000000000000000000_7 (2^27)\n    # 28s = 100000000000000000000000000000000000_8 (2^28)\n    # 29s = 100000000000000000000000000000000000_9 (2^29)\n    # 30s = 100000000000000000000000000000000000_10 (2^30)\n\n    s = 0\n    p = 1\n    for i in range(30, 0, -1):\n        if a % (2 ** i) <= b % (2 ** i):\n            s += p\n        p *= 2\n    return s\n\n\ndef"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\""
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    # your code here\n    return 1\n\nprint(solution(input()))"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    print(stdin)\n    return None"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('5 10')\n    2\n    \"\"\"\n    a, b = map(int, stdin.split(' '))\n    ans = 0\n    for i in range(a, b+1):\n        if bin(i).count('0') == 1:\n            ans += 1\n    print(ans)\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(i) for i in stdin.split()]\n    count = 0\n    for i in range(a, b + 1):\n        if i < 10:\n            if '0' in str(bin(i)):\n                count += 1\n        else:\n            if '0' in str(bin(i))[2:]:\n                count += 1\n    return count\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5 10\")\n    2\n    >>> solution(\"2015 2015\")\n    1\n    >>> solution(\"100 105\")\n    0\n    >>> solution(\"72057594000000000 72057595000000000\")\n    26\n    \"\"\"\n    a, b = map(int, stdin.split())\n    b = b + 1\n    while a < b:\n        a = bin(a)[2:]\n        if '0' in a:\n            b -= 1\n        else:\n            return b - a\n    return 0\n    pass\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    first_year, last_year = [int(x) for x in stdin.split(\" \")]\n    count = 0\n    for year in range(first_year, last_year + 1):\n        # if bin(year)[2:] has a 1 in the rightmost position\n        if str(bin(year)).endswith(\"1\"):\n            count += 1\n    return count\n"
    },
    {
        "number": 88,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a >= b:\n        return 0\n    return bin(a).count('1') - bin(b).count('1')\n'''\nimport unittest\n\nclass Test_Case_Count_Zeros(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(solution('5 10'), 2)\n        self.assertEqual(solution('2015 2015'), 1)\n        self.assertEqual(solution('72057594000000000 72057595000000000'), 26)\n        self.assertEqual(solution('100 105'), 0)\n        self.assertEqual(solution('72057594 000000000 72057595 000000000'), 26)"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(int((stdin.split())[0]*(stdin.split())[0] + 1)//2)\n----\n\nimport numpy\nimport sys\n\ndef"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\"\"\"\n\ndef"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(answer)\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\n'''\n\ndef"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(solve(int(stdin)))\n\ndef"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\"\"\"\nfrom collections import defaultdict\n\ndef"
    },
    {
        "number": 89,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\" Your solution goes here \"\"\"\n\nprint(solution(input()))"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    1 \u2264 n \u2264 25\n    0 \u2264 k \u2264 n\n    1 \u2264 S \u2264 10^16\n\n    \"\"\"\n    # parse input\n    _, n, k, s = [int(x) for x in stdin.split()]\n    # n, k, s = [int(x) for x in input().split()]\n    cubes = [int(x) for x in stdin.split()]\n    stickers = [int(x) for x in stdin.split()]\n\n    # the number of ways we can choose n number of cubes\n    def choose(n, k):\n        return math.factorial(n) // (math.factorial(k) * math.factorial(n - k))\n\n    # number of ways to choose n number of stickers\n    def choose_stickers(n, k):\n        return choose(n + k, k)\n\n    # number of ways to choose n number of stickers\n    def choose_stickers_without_one(n, k):\n        return choose(n + k - 1, k)\n\n    # number of ways to choose n number of stickers\n    def choose_stickers_with_one(n, k):\n        return choose(n + k - 1, k - 1)\n\n    # number of ways to choose n number of stickers\n    def choose_stickers_with_one_with_one(n, k):\n        return choose(n + k - 1, k - 2)\n\n    # number of ways to choose n number of stickers\n    def choose_stickers_with_one_with_one_and_two(n, k):\n        return choose(n + k - 1, k - 3)\n\n    def choose_stickers_with_one_with_one_and_two_and_two(n, k):\n        return choose(n + k - 1, k - 4)\n\n    # number of ways to choose n number of stickers\n    def choose_stickers_with_one_with_one_and_two_and_two_and_two(n, k):\n        return choose(n + k - 1, k - 5)\n\n    def choose_stickers_with_one_with_one_and_two_and_two_and_two_and_two(n, k):\n        return choose(n + k - 1, k - 6)\n\n    # number of ways to choose n number of stickers\n    def choose_stickers_with_one_with_one_and_two_and_two_and_two_and_two_and_two(n, k):\n        return choose(n + k - 1, k - 7)\n\n    def choose_stickers_with_one_with_one_and_two_and_two_and_two_and_two_and_two_and_two(n, k):\n        return choose(n + k - 1, k - 8)\n\n    # number of ways to choose n number of stickers\n    def choose_stickers_with_one_with_one_and_two_and_two_and_two_and_two_and_two_and_two_and_two(n, k):\n        return choose(n + k - 1, k - 9)\n\n    def choose_stickers_with_one_with_one_and_two_and_two_and_two_and_two_and_two_and_two_and_two_and_two(n, k):\n        return choose(n + k - 1, k - 10)\n\n    # number of ways to choose n number of stickers\n    def choose_stickers_with_one_with_one_and_two_and_two_and_two_and_two_and_two_and_two_and_two_and_two_and_two(n, k):\n        return choose(n + k - 1, k - 11)\n\n    def choose_stickers_with_one_with_one_and_two_and_two_and_two_and_two_and_two_and_two_and_two_and_two_and_two_and_two(n, k):\n        return choose(n + k - 1, k - 12)\n\n    # number of ways to choose n number of stickers\n    def choose_stickers_with_one_with_one_and_two_and_two_and_two_and_two_and_two_and_two_and_two_and_two_and_two_and_two_and_two(n, k):\n        return choose(n + k - 1, k - 13)\n\n    # number of ways to choose n number of stickers\n    def choose_stickers_with_one_with_one_and_two_and_two_and_two_and_two_and_two_and_two_and_two_and_two_and_two_and_two_and_two_and_two(n, k):\n        return choose(n + k - 1, k - 14)\n\n    # number of ways to choose n number of stickers\n    def choose_stickers_with_one_with_one_and_two_and_two_and_two_and_two_and_two_and_two_and_two_and_two_and_two_and_two_and_two_and_two_and_two(n, k):\n        return choose(n + k - 1, k - 15)\n\n    def choose_stickers_with_one_with_one_and_two_and_two_and_two_and_two_and_two_and_two_and_two_and_two_and_two_and_two_and_two_and_two_and_two_and_two(n, k):\n        return choose(n + k - 1, k - 16)\n\n    # number of ways to choose n number of stickers\n    def choose_stickers_with_one_with_one_and_two_and_two_and_two_and_two_and_two_and_two_and_two_and_two_and_two_and_two_and_two_and_two_and_two_and_two_and_two(n, k):\n        return choose(n + k - 1, k - 17)\n\n    def choose_stickers_with_one_with_one_and_two_and_two_and_two_and_two"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2 2 30\\n4 3\")\n    \"1\"\n    >>> solution(\"2 2 7\\n4 3\")\n    \"1\"\n    >>> solution(\"3 1 1\\n1 1 1\")\n    \"6\"\n    \"\"\"\n    n, k, s = map(int, stdin.split())\n    nums = [int(line) for line in stdin.split()]\n    counter = 0\n    for num in range(n):\n        if nums[num] <= k:\n            counter += 1\n    return str(counter)\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return 'Hello, world!'\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Input:\n    The first line of the input contains three space-separated integers n, k and S (1 \u2264 n \u2264 25, 0 \u2264 k \u2264 n, 1 \u2264 S \u2264 10^16)\u00a0\u2014\u00a0the number of cubes and the number of stickers that Anya has, and the sum that she needs to get. \n    The second line contains n positive integers a_{i} (1 \u2264 a_{i} \u2264 10^9)\u00a0\u2014\u00a0the numbers, written on the cubes. The cubes in the input are described in the order from left to right, starting from the first one. \n    Multiple cubes can contain the same numbers.\n\n    Output:\n    Output the number of ways to choose some number of cubes and stick exclamation marks on some of them so that the sum of the numbers became equal to the given number S.\n    \"\"\"\n   ...\n\nsolution(\"2 2 30\\n4 3\")\n"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split(\"\\n\")\n    length = len(line[0].split())\n    n = int(line[0].split()[0])\n    k = int(line[0].split()[1])\n    s = int(line[0].split()[2])\n    line = line[1].split()\n    a = [int(x) for x in line]\n    print(line)\n    return str(get_count(a, n, k, s))\n\n\ndef"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\nfrom itertools import combinations\nfrom functools import reduce\n\ndef"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution to the problem.\n    \"\"\"\n    input = stdin.split()\n    n = int(input[0])\n    k = int(input[1])\n    S = int(input[2])\n    cubes = input[3:]\n    # cnt = 0\n    # for i in range(1,n+1):\n    #     if int(cubes[i-1])<S:\n    #         cnt += factorial(S) // (factorial(S-int(cubes[i-1])) * factorial(int(cubes[i-1])))\n    # return cnt\n    l,r = 0,n\n    cnt = 0\n    while l<=r:\n        m = (l+r)//2\n        # print(m,end=\" \")\n        if int(cubes[m-1])<S:\n            cnt += factorial(S) // (factorial(S-int(cubes[m-1])) * factorial(int(cubes[m-1])))\n            l = m+1\n        else:\n            r = m-1\n    return cnt\n\ndef"
    },
    {
        "number": 90,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # get input values\n    t = int(stdin.readline())\n    cases = []\n    for _ in range(t):\n        n, k = map(int, stdin.readline().split())\n        a = list(map(int, stdin.readline().split()))\n        cases.append((n, k, a))\n\n    # iterate over input\n    for n, k, a in cases:\n        # get the kth value in a\n        k_value = a[k]\n        # remove the kth value from a\n        a.pop(k)\n        # remove duplicates\n        a = list(set(a))\n        # if there are no duplicates\n        if len(a) == n:\n            # add k_value to the end of a\n            a.append(k_value)\n            # sort a\n            a.sort()\n            # if a is equal to the original list of a, the algorithm has worked correctly\n            if a == a[::-1]:\n                print('YES')\n            else:\n                print('NO')\n        else:\n            # the algorithm has not worked correctly\n            print('NO')\n    return ''\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    num_test_cases = int(stdin.readline())\n    for test_case in range(num_test_cases):\n        array_size, step_size, value = [int(num) for num in stdin.readline().split(\" \")]\n        array = [0 for _ in range(array_size)]\n        for _ in range(step_size):\n            index = int(stdin.readline())\n            array[index - 1] += value\n        print(\"YES\" if array == [value] * array_size else \"NO\")\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find out if the algorithm is able to make array v equal to a.\"\"\"\n    pass\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def test_case() -> str:\n        test_cases = int(stdin.readline())\n        assert 1 <= test_cases <= 1000, \"Number of test cases should be in the range [1, 1000]\"\n        for _ in range(test_cases):\n            n, k = [int(x) for x in stdin.readline().split()]\n            assert 1 <= n <= 30, \"Array size should be in the range [1, 30]\"\n            assert 2 <= k <= 100, \"Value k should be in the range [2, 100]\"\n            v, a = [int(x) for x in stdin.readline().split()]\n            assert 0 <= v <= 10 ** 16, \"Array v should be in the range [0, 10 ** 16]\"\n            assert len(a) == n, \"Number of elements in array a should be equal to n\"\n            for e in a:\n                assert 0 <= e <= 10 ** 16, \"Array a should only contain integers in range [0, 10 ** 16]\"\n            assert a == sorted(a), \"Array a should be sorted in non-decreasing order\"\n            yield n, k, v, a\n    \n    for case in test_case():\n        n, k, v, a = case\n        for i in range(n):\n            v_prev = v\n            k_prev = k\n            v += k ** i\n            a_prev = a\n            for _ in range(n):\n                if v!= a:\n                    break\n                v_prev = v\n                k_prev = k\n                v = sum(k ** j for j in range(n))\n                a = [sum(k ** j for j in range(n))]\n            else:\n                yield \"YES\"\n                break\n        else:\n            yield \"NO\"\n            "
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 91,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    T = int(lines[0])\n    input_tests = lines[1: 1+T]\n    # print(input_tests)\n    for i in range(T):\n        n, k = [int(x) for x in input_tests[i].split(\" \")]\n        a = [int(x) for x in input_tests[i+T].split(\" \")]\n        # print(n, k, a)\n        for j in range(n):\n            if (k**j) % n == a[j]:\n                print(\"YES\")\n            else:\n                print(\"NO\")"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = list(map(int, stdin.split(' ')))\n    return str(sum([sum([i * j * k for j in range(1, b + 1)]) for i in range(1, a + 1) for k in range(1, c + 1)]) % 1000000007)"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(x) for x in stdin.split(\" \")]\n    res = 0\n    for i in range(1, a + 1):\n        for j in range(1, b + 1):\n            for k in range(1, c + 1):\n                res += i * j * k\n    return str(res % (10 ** 9 + 7))\n\nprint(solution(\"2 2 2\"))\n\n\"\"\""
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    \n    res = sum( (c * (a + b - 1) * (a + b - 2) / (a - 1) / (a - 2)) % 1000000000 for a in range(1, a + 1) for b in range(1, b + 1) )\n    \n    return res % 1000000000\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Calculate the sum of all divisors of a, b and c.\n\n    Args:\n        stdin (str): Input from stdin.\n\n    Returns:\n        str: Output to stdout.\n\n    \"\"\"\n    nums = [int(n) for n in stdin.split()]\n    ans = 1\n    for i, n in enumerate(nums):\n        divs = get_divisors(n)\n        for j, d in enumerate(divs):\n            ans *= j + 1\n            ans %= 10 ** 9 + 7\n    return str(ans)\n\n\ndef"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    count = 0\n    for i in range(1, a+1):\n        for j in range(1, b+1):\n            for k in range(1, c+1):\n                count += len(get_divisors(i*j*k))\n    return str(count % (10 ** 9 + 7))\n\n\ndef"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    sum = 0\n    for i in range(1, a + 1):\n        for j in range(1, b + 1):\n            for k in range(1, c + 1):\n                sum += i * j * k\n                sum %= 10 ** 9 + 7\n    return sum"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(n) for n in stdin.split()]\n    n = a * b * c\n    mod = 10 ** 9 + 7\n    \n    def d(n):\n        res = 1\n        for i in range(1, n + 1):\n            res *= i\n            res %= mod\n        return res\n    \n    return sum(d(i) for i in range(1, a + 1)) * sum(d(j) for j in range(1, b + 1)) * sum(d(k) for k in range(1, c + 1)) % mod\n\ndef"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split(' '))\n    print(a * b * c % 1000000007)"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Compute sum of divisors of a positive integer\n    Input:  A positive integer\n    Output: The sum of divisors of the input number\n    \"\"\"\n    x, y, z = map(int, stdin.split())\n    return sum([i for i in range(1, x + 1) for j in range(1, y + 1) for k in range(1, z + 1) if i * j * k == x * y * z])\n    # return sum([i for i in range(1, x + 1) for j in range(1, y + 1) for k in range(1, z + 1) if i * j * k == x * y * z]) % (10 ** 9 + 7)\n"
    },
    {
        "number": 92,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    numbers = [a, b, c]\n    product = 1\n    result = 0\n    for n in numbers:\n        product *= n\n\n    for i in range(1, a + 1):\n        for j in range(1, b + 1):\n            for k in range(1, c + 1):\n                result += gcd(i, gcd(j, k))\n\n    return result % int(1e9)\n\n\ndef"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n    puzzle1 = stdin[0:2]\n    puzzle2 = stdin[2:4]\n    puzzle1 = puzzle1.replace(\" \", \"\")\n    puzzle2 = puzzle2.replace(\" \", \"\")\n    puzzle1 = puzzle1[0] + puzzle1[1] + puzzle1[2] + puzzle1[3] + puzzle1[4] + puzzle1[5] + puzzle1[6]\n    puzzle2 = puzzle2[0] + puzzle2[1] + puzzle2[2] + puzzle2[3] + puzzle2[4] + puzzle2[5] + puzzle2[6]\n    if puzzle1 == puzzle2:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    grid_bessie = stdin[0:4]\n    grid_elsie = stdin[4:]\n\n    if grid_bessie.index('X')!= grid_elsie.index('X'):\n        return 'NO'\n\n    def move(grid, x, y, z):\n        grid[x] = grid[x][0:y] + 'X' + grid[x][y + 1:]\n        grid[z] = grid[z][0:x] + grid[z][x].replace('X', '') + grid[z][x + 1:]\n        return grid\n\n    def validate(grid):\n        return grid[0].index('X') == grid[2].index('X') and grid[0][0] == grid[1][0] and grid[0][0] == grid[2][0]\n\n    for _ in range(2):\n        if validate(grid_bessie):\n            return 'YES'\n        grid_bessie = move(grid_bessie, grid_bessie[0].index('X'), 0, grid_bessie[0].index('X'))\n        grid_elsie = move(grid_elsie, grid_elsie[0].index('X'), 0, grid_elsie[0].index('X'))\n    return 'NO'\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A = stdin[0]\n    B = stdin[1]\n    X = stdin[2]\n    C = stdin[3]\n    \n    b_x = 0\n    b_y = 0\n    for i in range(0, 2):\n        for j in range(0, 2):\n            if A[i][j] == 'A':\n                b_x = j\n                b_y = i\n    e_x = 0\n    e_y = 0\n    for i in range(0, 2):\n        for j in range(0, 2):\n            if B[i][j] == 'A':\n                e_x = j\n                e_y = i\n    if b_x == e_x and b_y == e_y:\n        return 'YES'\n    return 'NO'"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    puzzles = [\n        [c for c in row.strip()]\n        for row in stdin.split('\\n')\n    ]\n    puzzle1 = list(puzzles[0])\n    puzzle2 = list(puzzles[1])\n    assert len(puzzle1) == 2\n    assert len(puzzle2) == 2\n    assert puzzle1[0]!= puzzle1[1]\n    assert puzzle2[0]!= puzzle2[1]\n    assert puzzle1[0]!= puzzle2[0]\n    assert puzzle1[0]!= puzzle2[1]\n    assert puzzle1[1]!= puzzle2[0]\n    assert puzzle1[1]!= puzzle2[1]\n    assert puzzle1[0]!= 'X'\n    assert puzzle1[1]!= 'X'\n    assert puzzle2[0]!= 'X'\n    assert puzzle2[1]!= 'X'\n    assert puzzle1[0]!= 'X'\n    assert puzzle2[0]!= 'X'\n    assert puzzle1[1]!= 'X'\n    assert puzzle2[1]!= 'X'\n    assert puzzle1[0]!= 'B'\n    assert puzzle1[1]!= 'B'\n    assert puzzle2[0]!= 'B'\n    assert puzzle2[1]!= 'B'\n    assert puzzle1[0]!= 'C'\n    assert puzzle1[1]!= 'C'\n    assert puzzle2[0]!= 'C'\n    assert puzzle2[1]!= 'C'\n    # return \"YES\" if can_reach_same_configuration(puzzle1, puzzle2) else \"NO\"\n    # return \"YES\" if can_reach_same_configuration(puzzle2, puzzle1) else \"NO\"\n    if can_reach_same_configuration(puzzle1, puzzle2):\n        return \"YES\"\n    return \"NO\"\n\n\ndef"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    return 'YES'\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\nA = []\nB = []\n\nfor line in stdin.splitlines():\n    if line.startswith(\"AB\"):\n        A = line\n    elif line.startswith(\"AC\"):\n        B = line\n\nA = A[2:].split(\" \")\nA = [a for a in A if a!= \"\"]\nA = [int(a) for a in A]\n\nB = B[2:].split(\" \")\nB = [b for b in B if b!= \"\"]\nB = [int(b) for b in B]\n\nA.sort()\nB.sort()\n\nprint(\"YES\" if A == B else \"NO\")"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\npuzzles = [tuple(line.strip().split()) for line in stdin.split('\\n\\n')]\npuzzles = [puzzle if puzzle!= ['XX', 'XX'] else ('AB', 'AC') for puzzle in puzzles]\n\nfor puzzle1, puzzle2 in permutations(puzzles, r=2):\n    puzzle1, puzzle2 = Puzzle(puzzle1), Puzzle(puzzle2)\n    if puzzle1.config == puzzle2.config:\n        print('YES')\n        return\nprint('NO')\n\"\"\"\n\n\nclass Puzzle:\n    def __init__(self, puzzle):\n        self.config = [list(line) for line in puzzle]\n\n    def rotate_right(self):\n        # rotate clockwise\n        rotated_config = [[None] * len(self.config) for _ in range(len(self.config[0]))]\n        for i in range(len(self.config)):\n            for j in range(len(self.config)):\n                rotated_config[j][len(self.config) - i - 1] = self.config[i][j]\n        self.config = rotated_config\n\n    def rotate_left(self):\n        # rotate counterclockwise\n        rotated_config = [[None] * len(self.config) for _ in range(len(self.config[0]))]\n        for i in range(len(self.config)):\n            for j in range(len(self.config)):\n                rotated_config[len(self.config) - i - 1][len(self.config) - j - 1] = self.config[i][j]\n        self.config = rotated_config\n\n    def flip_vertically(self):\n        # flip vertically\n        flipped_config = [[None] * len(self.config) for _ in range(len(self.config))]\n        for i in range(len(self.config)):\n            for j in range(len(self.config)):\n                flipped_config[i][j] = self.config[i][len(self.config) - j - 1]\n        self.config = flipped_config\n\n    def flip_horizontally(self):\n        # flip horizontally\n        flipped_config = [[None] * len(self.config) for _ in range(len(self.config))]\n        for i in range(len(self.config)):\n            for j in range(len(self.config)):\n                flipped_config[i][j] = self.config[len(self.config) - i - 1][j]\n        self.config = flipped_config\n\n    def is_same_config(self, other):\n        for i in range(len(self.config)):\n            for j in range(len(self.config)):\n                if self.config[i][j]!= other.config[i][j]:\n                    return False\n        return True\n\n\nclass BFFL:\n    def __init__(self, puzzle1: str, puzzle2: str):\n        self.puzzle1 = Puzzle(puzzle1)\n        self.puzzle2 = Puzzle(puzzle2)\n        self.moves = 0\n\n    def make_move(self):\n        if self.moves > 0:\n            self.puzzle1.rotate_left()\n            self.puzzle2.rotate_left()\n            self.puzzle1.rotate_right()\n            self.puzzle2.rotate_right()\n            self.puzzle1.flip_horizontally()\n            self.puzzle2.flip_horizontally()\n            self.puzzle1.flip_vertically()\n            self.puzzle2.flip_vertically()\n            self.moves -= 1\n        else:\n            self.puzzle1.rotate_right()\n            self.puzzle2.rotate_right()\n            self.puzzle1.rotate_left()\n            self.puzzle2.rotate_left()\n            self.puzzle1.flip_horizontally()\n            self.puzzle2.flip_horizontally()\n            self.puzzle1.flip_vertically()\n            self.puzzle2.flip_vertically()\n            self.moves += 1\n\n    def is_same_config(self):\n        return self.puzzle1.is_same_config(self.puzzle2)\n\n    def is_same_config_no_moves(self):\n        self.puzzle1.flip_vertically()\n        self.puzzle2.flip_vertically()\n        self.puzzle1.flip_horizontally()\n        self.puzzle2.flip_horizontally()\n        return self.puzzle1.is_same_config(self.puzzle2)\n\n    def is_same_config_no_moves_n_times(self, n):\n        for _ in range(n):\n            self.make_move()\n        return self.is_same_config_no_moves()\n\n\ndef"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A: str = stdin[0:2]\n    B: str = stdin[2:4]\n    C: str = stdin[4:6]\n\n    def rotate(tile):\n        return (tile[1], tile[0])\n\n    def reflect(tile):\n        return (tile[1], -tile[0])\n\n    def count_letter_at_index(tile, index):\n        for letter in 'ABC':\n            if tile[index] == letter:\n                return 1\n        return 0\n\n    def letter_count(tile):\n        count = 0\n        for letter in 'ABC':\n            count += count_letter_at_index(tile, tile.index(letter))\n        return count\n\n    def empty_tile_index(tile):\n        for index in range(len(tile)):\n            if tile[index] == 'X':\n                return index\n\n    def all_tile_tuples(tile):\n        all_tile_tuples = []\n        all_tile_tuples.append((tile, letter_count(tile)))\n        tile = rotate(tile)\n        all_tile_tuples.append((tile, letter_count(tile)))\n        tile = rotate(tile)\n        tile = reflect(tile)\n        all_tile_tuples.append((tile, letter_count(tile)))\n        tile = rotate(tile)\n        all_tile_tuples.append((tile, letter_count(tile)))\n        return all_tile_tuples\n\n    A_index = empty_tile_index(A)\n    B_index = empty_tile_index(B)\n    C_index = empty_tile_index(C)\n\n    # a, b, c in all possible rotations\n    a_tile = all_tile_tuples(A)[A_index]\n    b_tile = all_tile_tuples(B)[B_index]\n    c_tile = all_tile_tuples(C)[C_index]\n\n    # b and c in all rotations, a and b in all rotations and reflections\n    b_tile_index = all_tile_tuples(b_tile[0])[b_tile[1]].index(b_tile[0])\n    c_tile_index = all_tile_tuples(c_tile[0])[c_tile[1]].index(c_tile[0])\n\n    # if a_tile is in the same rotation and reflection as b_tile or c_tile, return True\n    if a_tile[0] == b_tile[0] or a_tile[0] == c_tile[0]:\n        return 'YES'\n    # if b_tile is in the same rotation and reflection as a_tile or c_tile, return True\n    elif b_tile[0] == a_tile[0] or b_tile[0] == c_tile[0]:\n        return 'YES'\n    # if c_tile is in the same rotation and reflection as a_tile or b_tile, return True\n    elif c_tile[0] == a_tile[0] or c_tile[0] == b_tile[0]:\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    #Your code here\n    \n    Bessie = []\n    Eli = []\n    Bessie_str = stdin[:4]\n    Eli_str = stdin[5:]\n    for i in range(0, 4):\n        Bessie.append(Bessie_str[2*i])\n        Bessie.append(Bessie_str[2*i+1])\n    for i in range(0, 4):\n        Eli.append(Eli_str[2*i])\n        Eli.append(Eli_str[2*i+1])\n    print(Bessie)\n    print(Eli)\n    if Bessie == Eli:\n        print('YES')\n    else:\n        print('NO')\n    \n    return ''\n\n\"\"\"\n"
    },
    {
        "number": 93,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    #\n    # Write your code here.\n    #\n    pass\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    n, k = n, k % (10 ** 6)\n    res = 0\n    for i in range(1, n + 1):\n        res += i * (n ** i)\n    res %= 10 ** 6\n    for i in range(1, n):\n        res += n ** i * (k // i)\n        res %= 10 ** 6\n    return res\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    base = int(stdin[0])\n    number = int(stdin[1])\n\n    tmp = 1\n    for i in range(1, len(stdin[1])):\n        tmp *= base\n\n    return str(number // tmp + tmp)\n\n\ndef"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    if num < 2:\n        return str(num)\n\n    arr = []\n    while num:\n        arr.append(num % 2)\n        num //= 2\n\n    arr.reverse()\n    result = 0\n    for i, num in enumerate(arr):\n        result += num * 10 ** i\n    return str(result)\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    k = stdin[2:]\n    length = len(k)\n    a = 0\n    for i in range(length):\n        a += int(k[i]) * pow(16, length - i - 1)\n    return str(a)\n\n\ndef"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('13\\n12\\n')\n    12\n    >>> solution('16\\n11311\\n')\n    475\n    >>> solution('20\\n999\\n')\n    3789\n    >>> solution('17\\n2016\\n')\n    594\n    \"\"\"\n    a, b = stdin.split('\\n')\n    num = int(a)\n    arr = []\n    for i in range(len(b)):\n        arr.append(b[i])\n    i = 0\n    res = 0\n    while i < len(arr):\n        res += int(arr[i]) * num ** (len(arr) - i - 1)\n        i += 1\n    return res\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    # stdin.splitlines()\n    # n, k = map(int, stdin.splitlines())\n    n, k = map(int, stdin.splitlines())\n    k = k - 1\n    def sum_of_digits(n: int) -> int:\n        return sum(int(d) for d in str(n))\n\n    def num_to_base(n: int, b: int) -> str:\n        if n == 0:\n            return '0'\n        digits = []\n        while n:\n            digits.append(str(n % b))\n            n //= b\n        return ''.join(reversed(digits))\n\n    def base_to_num(s: str, b: int) -> int:\n        return sum(b ** i * int(x) for i, x in enumerate(reversed(s)))\n\n    #  1) find a number to convert from decimal system\n    #  2) convert it to the system with base n\n    #  3) sum the digits in the converted number\n    #  4) find the first number, that has a sum of digits equal to k\n    #  5) convert it back to the decimal system and print the number\n    for i in range(1, n):\n        d = num_to_base(i, n)\n        if sum_of_digits(d) == k:\n            print(base_to_num(d, n))\n            return\n    return None\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin, base=pow(10, len(stdin) - 1)))\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 94,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\nn, k = map(int, stdin.split())\n\nbase_10 = list(str(n))\nbase_b = [int(b) for b in list(str(n))]\nresult = 0\nfor i, b in enumerate(base_b):\n    result += b * (n ** i)\n\nprint(result)\nreturn result\n\n'''\n\n\ndef"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your solution is only allowed to make calls to stdin.readline(). Any\n    other access to stdin is not allowed.\n    \"\"\"\n    return 'YES' if unimodal(stdin) else 'NO'\n\n\ndef"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    inputs = [int(x) for x in stdin.split('\\n')]\n    \n    if len(inputs) == 1:\n        if inputs[0] == 1:\n            return 'YES'\n        return 'NO'\n    \n    inputs = inputs[1:]\n    if not inputs:\n        return 'YES'\n    \n    if all(inputs[i] < inputs[i + 1] for i in range(len(inputs) - 1)):\n        return 'YES'\n    \n    if all(inputs[i] > inputs[i + 1] for i in range(len(inputs) - 1)):\n        return 'YES'\n    \n    return 'NO'\n\n\nsolution('6\\n1 5 5 5 4 2')\nsolution('5\\n10 20 30 20 10')\nsolution('4\\n1 2 1 2')\nsolution('7\\n3 3 3 3 3 3 3')\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(c) for c in stdin.readline().strip().split(' ')]\n    i = 1\n    while i < n and a[i] == a[i - 1]:\n        i += 1\n    if i == 1 or i == n:\n        return 'YES'\n    while i < n and a[i] == a[i - 1]:\n        i += 1\n    j = n - 1\n    while j > i - 1 and a[j] == a[j + 1]:\n        j -= 1\n    if j == n - 2 or j == i - 2:\n        return 'YES'\n    while j > i - 1 and a[j] == a[j + 1]:\n        j -= 1\n    return 'NO'\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    l = [int(x) for x in stdin.strip().split()]\n    n = l[0]\n    if l[1:] == sorted(l[1:]) or l[1:] == sorted(l[1:], reverse=True):\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(c) for c in stdin.readline().strip().split(' ')]\n    up, down = -1, -1\n    is_unimodal = True\n    for i in range(n):\n        if up == -1 and a[i] > a[i + 1]:\n            up = i + 1\n        elif up!= -1 and a[i] > a[i + 1]:\n            is_unimodal = False\n        if down == -1 and a[i] < a[i + 1]:\n            down = i + 1\n        elif down!= -1 and a[i] < a[i + 1]:\n            is_unimodal = False\n    if is_unimodal:\n        print('YES')\n    else:\n        print('NO')\n    return ''"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n\n    increasing = True\n    decreasing = True\n    if a[0] > a[1]:\n        increasing = False\n    for i in range(1, n - 1):\n        if increasing:\n            if a[i] <= a[i + 1]:\n                increasing = False\n        if not increasing:\n            if a[i] >= a[i + 1]:\n                increasing = True\n                decreasing = False\n        if not increasing and decreasing:\n            if a[i] >= a[i + 1]:\n                decreasing = True\n    if increasing:\n        if a[n - 1] <= a[n - 2]:\n            decreasing = False\n    if not increasing and decreasing:\n        if a[n - 1] >= a[n - 2]:\n            decreasing = True\n    if increasing and not decreasing:\n        decreasing = True\n    if not increasing and not decreasing:\n        decreasing = False\n    if increasing and decreasing:\n        decreasing = False\n\n    print(\"YES\" if increasing or decreasing else \"NO\")\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, array = map(int, stdin.split())\n\n    def check_unimodal(array: List[int]) -> bool:\n        return array == sorted(array) or array == sorted(array, reverse=True)\n\n    for i in range(1, n - 1):\n        if array[i] < array[i - 1] and array[i] < array[i + 1]:\n            continue\n        elif array[i] > array[i - 1] and array[i] > array[i + 1]:\n            continue\n        else:\n            return \"NO\"\n\n    return \"YES\" if check_unimodal(array) else \"NO\"\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Check if the given array is unimodal\"\"\"\n    n = int(stdin.readline().strip())\n    lst = [int(i) for i in stdin.readline().strip().split(' ')]\n\n    # Determine if it is strictly increasing.\n    if len(lst) == 1:\n        return 'YES'\n\n    increasing = False\n    for i in range(1, len(lst)):\n        if lst[i] > lst[i - 1]:\n            increasing = True\n        else:\n            return 'NO'\n\n    # Determine if it is constant.\n    for i in range(1, len(lst)):\n        if lst[i] == lst[i - 1]:\n            return 'NO'\n\n    # Determine if it is strictly decreasing.\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i - 1]:\n            return 'NO'\n\n    return 'YES'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 95,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(s) for s in stdin.split(\" \")]\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(1, n + 1):\n        dp[i] = dp[i - 1]\n        if i % 2 == 0:\n            dp[i] = min(dp[i], dp[i // 2] + 1)\n        if i % 3 == 0:\n            dp[i] = min(dp[i], dp[i // 3] + 1)\n        if i % 5 == 0:\n            dp[i] = min(dp[i], dp[i // 5] + 1)\n    return dp[-1]"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    answer = 1\n    count = [0] * (n + 1)\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            count[i] = count[i // 2] + 1\n        else:\n            count[i] = count[i - 1] + 1\n        if count[i] >= k:\n            answer = i\n    return answer\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    max_value = 0\n    for i in range(1, n + 1):\n        if len(set(get_path(i))) >= k:\n            max_value = i\n    return max_value\n\n\ndef"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n\n    def f(x: int) -> int:\n        return (x // 2 if x % 2 == 0 else x - 1)\n\n    def dfs(v: int) -> int:\n        if v <= 1:\n            return 1\n        return f(v) + dfs(f(v))\n\n    paths = [0] * n\n    for v in range(1, n):\n        paths[v] = dfs(v)\n\n    left = 0\n    right = 0\n    for i in range(n):\n        if paths[i] >= k:\n            right = i\n            if i > right:\n                left = i\n                right = i\n            else:\n                left = i\n                break\n\n    while left <= right:\n        if paths[left] >= k:\n            break\n        left += 1\n    while left <= right:\n        if paths[right] >= k:\n            break\n        right -= 1\n\n    return right - left + 1\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    return str(len(set(sum([list(range(i, n + 1)) for i in range(1, n + 1)], [])) - set([i for i in range(1, n + 1) for j in range(1, k + 1) if i not in sum([list(range(i, n + 1)) for i in range(1, n + 1) if i % j == 0])])))"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return str(sorted(set(i for i in range(n + 1, 0, -1) if all(i % j == 0 for j in range(2, n + 1))))[-k])\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(c) for c in stdin.split(' ')]\n    d = collections.defaultdict(list)\n\n    def f(v):\n        if v == 1:\n            return 1\n        if v in d:\n            return d[v]\n        a, b = v, v - 1\n        if v % 2 == 0:\n            a, b = v // 2, v // 2\n        else:\n            a, b = v - 1, v - 1\n        d[v] = max(f(a), f(b)) + 1\n        return d[v]\n\n    ans = 0\n    for v in range(1, n + 1):\n        ans = max(ans, f(v))\n    return str(ans)\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    return str(len(max(k_groups(n, k), key=len)))\n    \ndef"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    p = [0] + [1] * n\n\n    for i in range(1, n + 1):\n        for j in range(i, n + 1, i):\n            p[j] = 0\n\n    for i in range(1, n + 1):\n        if p[i] == 1:\n            print(i)\n    return ''\n    pass\n"
    },
    {
        "number": 96,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    p = [1]\n    for x in range(1, n + 1):\n        p.append(p[-1] + 1 if x % 2 == 0 else x - 1)\n    m = 0\n    for x in range(n + 1):\n        if k < len(set(p[:x + 1])):\n            break\n        m = max(m, p[x])\n    return str(m)"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, y, v_x, v_y = [int(x) for x in stdin.split(' ')]\n    k = 0\n    while (k * v_x + y <= m) and (k * v_y + x <= n):\n        k += 1\n    if k * v_y == 0:\n        return \"-1\"\n    else:\n        return f\"{n - k * v_x} {k * v_y}\"\n\"\"\"\ndef"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, y, vx, vy = [int(i) for i in stdin.split(' ')]\n    vx, vy = int(vx), int(vy)\n    for i in range(10000):\n        if vx == 0 and vy == 0:\n            break\n        x, y, vx, vy = vx + x, y + vy, vx, vy\n        if x >= n or x <= 0 or y >= m or y <= 0:\n            break\n        if x == n and y == 0:\n            break\n    if x == n and y == 0:\n        return '0 0'\n    elif x == n and y == m:\n        return '0'+ str(m - 1)\n    elif x == n and y == m:\n        return str(n - 1) +'' + str(m - 1)\n    elif x == 0 and y == 0:\n        return '-1 '\n    elif x == 0 and y == m:\n        return str(n - 1) +''\n    elif x == 0 and y == 0:\n        return '-1 0'\n    elif x == 0 and y == m:\n        return str(n - 1) +'' + str(m - 1)\n    elif x == n and y == m:\n        return '0'+ str(m - 1)\n    else:\n        return str(n - 1) +'' + str(m - 1)\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, y, v_x, v_y = list(map(int, stdin.split(' ')))\n    \n    # move = (dx, dy)\n    move = (-v_y, v_x)\n    \n    ans = (0, 0)\n    \n    while True:\n        # (x, y) += move\n        x += move[0]\n        y += move[1]\n        \n        if x < 0 or x > n or y < 0 or y > m:\n            break\n        \n        ans = (x, y)\n        \n    return str(ans[0]) +'' + str(ans[1])\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, y, vx, vy = map(int, stdin.split())\n    if x == 0 and y == 0:\n        return '-1'\n\n    vx, vy = vx / (vx ** 2 + vy ** 2) ** 0.5, vy / (vx ** 2 + vy ** 2) ** 0.5\n\n    while not (x == 0 and y == 0):\n        x, y = x + vx, y + vy\n        if x * y <= 0:\n            return str(x) +'' + str(y)\n    return '-1'\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n, m, x, y, vx, vy = map(int, stdin.split())\n    if (vx, vy) == (0, 0):\n        return '-1'\n    # find the angles between the initial speed and the table\n    h = (m - y) / vy\n    k = (n - x) / vx\n    th = h if vy == 0 else vx / vy\n    tk = k if vx == 0 else vy / vx\n    # find the intersections\n    t1 = (h, 0) if vx == 0 else (-1, -1)\n    t2 = (k, 0) if vy == 0 else (-1, -1)\n    if t1 == t2:\n        return '-1'\n    t = t1 if abs(tk) < abs(th) else t2\n    if t[0] >= 0 and t[0] <= 1:\n        if t[0] * vx == x and t[0] * vy == y:\n            return str(t[1])\n        elif t[1] == 0:\n            return str(t[0])\n        else:\n            return '-1'\n    else:\n        return '-1'\n    '''\n    n, m, x, y, vx, vy = map(int, stdin.split())\n    if (vx, vy) == (0, 0):\n        return '-1'\n    # find the angles between the initial speed and the table\n    h = m - y\n    k = n - x\n    th = h / vy\n    tk = k / vx\n    # find the intersections\n    t1 = (h, 0) if vx == 0 else (-1, -1)\n    t2 = (k, 0) if vy == 0 else (-1, -1)\n    if t1 == t2:\n        return '-1'\n    t = t1 if abs(tk) < abs(th) else t2\n    if t[0] >= 0 and t[0] <= 1:\n        if t[0] * vx == x and t[0] * vy == y:\n            return str(t[1])\n        elif t[1] == 0:\n            return str(t[0])\n        else:\n            return '-1'\n    else:\n        return '-1'"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, y, vx, vy = [int(i) for i in stdin.split(\" \")]\n    x_old, y_old = x, y\n    while True:\n        if x + vx > n or x + vx < 1:\n            x_old = x\n            x = x_old + vx\n            vx = -vx\n            continue\n        if y + vy > m or y + vy < 1:\n            y_old = y\n            y = y_old + vy\n            vy = -vy\n            continue\n        if x == n or y == m:\n            break\n    return str(x - x_old) + \" \" + str(y - y_old)\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    n, m, x, y, vx, vy = map(int, stdin.split())\n    if x == 0 or x == n or y == 0 or y == m:\n        return \"0 0\"\n    elif x % (n + 1) == 0 or y % (m + 1) == 0:\n        return \"0 0\"\n    elif vx == 0 and vy == 0:\n        return \"0 0\"\n    else:\n        if abs(vx) >= abs(vy):\n            if x >= n:\n                y += vy\n            else:\n                x += vx\n            return str(x % n) + \" \" + str(y % m)\n        else:\n            if y >= m:\n                x += vx\n            else:\n                y += vy\n            return str(x % n) + \" \" + str(y % m)\n\n\n\n\n\n\n-----Test-----\n\nTest Time Evaluation\n\nInput\n\n4 3 2 2 -1 1\n\nOutput\n\n0 0\n\nInput\n\n4 4 2 0 1 1\n\nOutput\n\n-1\n\nInput\n\n10 10 10 1 -1 0\n\nOutput\n\n-1\n\nInput\n\n4 3 2 2 1 -1 0 0 1 1\n\nOutput\n\n0 0\n\n\"\"\"\n\ndef"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, y, vx, vy = [int(n) for n in stdin.split()]\n    b = x * vx + y * vy\n\n    if (b < 0 and vx > 0) or (b > 0 and vx < 0):\n        return '-1'\n    else:\n        for _ in range(n + m):\n            if x < n and y < m and b % n == x and b % m == y:\n                return '{} {}'.format(x, y)\n            else:\n                x, y, vx, vy, b = vx, vy, -vx, -vy, b + vx + vy\n        return '-1'\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    (n, m, x, y, vx, vy) = [int(i) for i in stdin.split('\\n')[0].split(' ')]\n    x, y = x / n, y / m\n    def is_falling(x: float, y: float) -> bool:\n        return not (((vx >= 0 and x == 0) or (vx <= 0 and x == 1)) and ((vy >= 0 and y == 1) or (vy <= 0 and y == 0)))\n    for i in range(n + m):\n        if is_falling(x, y):\n            print(-1)\n            return\n        x, y = x + vx, y + vy\n    print(int(x * n + y * m))\n    return ''\n"
    },
    {
        "number": 97,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, y, vx, vy = map(int, stdin.split())\n    t = 1\n    ans = -1\n    while True:\n        x += vx * t\n        y += vy * t\n        if x < 0 or y < 0:\n            break\n        if x >= n or y >= m:\n            break\n        if table[x][y] == 0:\n            ans = x * 10 + y\n            break\n        else:\n            t += 1\n    return str(ans)\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport numpy as np\n\na, b = [int(i) for i in stdin.split(' ')]\na_2, b_2, a_3, b_3 = [int(i) for i in stdin.split(' ')]"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\nfrom typing import List\n\n\ndef"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\ndef"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = list(map(int, stdin.split()))\n    a_2, b_2, a_3, b_3 = list(map(int, stdin.split()))\n    if a_2 * b_2 <= a * b:\n        return \"YES\"\n    if a_3 * b_3 <= a * b:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\n-----Solution-----\n\"\"\"\n\n\ndef"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nsolution(\"\")\n'''\n\nimport sys\n\ndef"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a1, b1, a2, b2, a3, b3 = map(int, stdin.split())\n    print(\"YES\" if (a2 * b1 >= a3 * b2) and (a3 * b2 >= a1 * b3) and (a1 * b3 >= a2 * b1) else \"NO\")\n    return \"\"\n\n\"\"\"\n\n\n\ndef"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a_1, b_1 = map(int, stdin.split(' '))\n    a_2, b_2, a_3, b_3 = map(int, stdin.split(' '))\n\n    if (a_1 + a_2 + a_3) < (b_1 + b_2 + b_3) or (a_1 + b_2 + b_3) < (a_2 + a_3 + a_1) or (b_1 + a_2 + b_3) < (a_1 + a_3 + a_2) or (b_1 + a_2 + b_3) < (b_2 + b_3 + b_1):\n        return 'NO'\n    return 'YES'\n\"\"\"\n\n\ndef"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a1, b1 = list(map(int, stdin.split(\" \")))\n    a2, b2, a3, b3 = list(map(int, stdin.split(\" \")))\n    if max(a1, b1) <= min(a2, b2) and max(a2, b2) <= min(a3, b3):\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 98,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    b_1, q, l, m = [int(n) for n in stdin.split()]\n    bad = set([int(n) for n in stdin.split()[-1::]])\n    count = 0\n    next_num = b_1\n    while count < m:\n        if next_num not in bad:\n            count += 1\n        next_num = (next_num + q) % l\n    if count < m:\n        return 'inf'\n    return count\n    "
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\ndef"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    b, q, l, m = map(int, stdin.split())\n    progression = [b]\n    for i in range(m):\n        progression.append(int(progression[-1] - (i + 1) * q))\n    print(progression)\n    print(progression[m + 1:])\n    progression = list(set(progression) - set(progression[m + 1:]))\n    print(progression)\n    return len(progression)\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    b, q, l, m = map(int, stdin.split())\n    bad = set(map(int, stdin.split()[1:]))\n    last = -1\n    print(b, q, l, m, bad)\n    \n    if not bad.intersection([0]):\n        if b == 0 and q == 0:\n            print(0)\n        else:\n            print(\"inf\")\n    else:\n        if l == 0:\n            print(\"inf\")\n        else:\n            print(sum([1 for i in range(m) if b * (i + 1) <= l and b * (i + 1) not in bad]))\n\n\nsolution(input())\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    b1, q, l, m = [int(x) for x in stdin.split()]\n    bad = [int(x) for x in stdin.split()[2:]]\n    ans = 0\n    cur = b1\n    n = 0\n    while n < m:\n        if cur + q < l or cur in bad:\n            cur += q\n            n += 1\n            continue\n        cur = cur + q\n        ans += 1\n    return str(ans)\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    first, d, l, m = map(int, stdin.split('\\n')[0].split())\n    bad_numbers = set(map(int, stdin.split('\\n')[1].split()))\n    result = []\n    for i in range(m):\n        result.append(first + i * d)\n    if l <= result[-1]:\n        return 'inf'\n    for i in result:\n        if i in bad_numbers:\n            result.remove(i)\n    return str(len(result))\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    b, q, l, m = [int(n) for n in stdin.split()]\n    bad_nums = [int(n) for n in stdin.split()[1:] if int(n) % q!= 0]\n    if len(bad_nums) >= m:\n        return 'inf'\n    to_print = 0\n    bad_ind = 0\n    for i in range(l, l + m):\n        if i in bad_nums:\n            bad_ind += 1\n            continue\n        if i - bad_nums[bad_ind] == 1:\n            bad_ind += 1\n            continue\n        to_print += 1\n    return to_print\n"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 99,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split('\\n')\n    b_1, q, l, m = [int(i) for i in line[0].split(' ')]\n    bad = [int(i) for i in line[1].split(' ')]\n    # print(b_1, q, l, m)\n    # print(bad)\n    cur = b_1\n    cnt = 0\n    while cur <= l:\n        for i in bad:\n            if abs(cur) == i:\n                cur += q\n                break\n        else:\n            cnt += 1\n            cur += q\n\n    return cnt if cur <= l else 'inf'"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join('w' if (stdin[i] == 'w' or stdin[i] == '.') else '+' for i in range(len(stdin)))"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdout = []\n    stdin = stdin.split('\\n')\n    n, m = map(int, stdin[0].split())\n    matrix = [i for i in stdin[1:]]\n    matrix = [list(row) for row in matrix]\n\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == 'w':\n                for k in range(1, min(n - i, m - j)):\n                    if matrix[i + k][j] == '.' or matrix[i][j + k] == '.':\n                        matrix[i][j] = '.'\n                        break\n                    else:\n                        matrix[i][j] = '+'\n    \n    return '\\n'.join([''.join(row) for row in matrix])\n    "
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    matrix = [list(stdin.split())[1:]]\n    for _ in range(n - 1):\n        matrix.append(list(stdin.split())[1:])\n    result = []\n    frames = []\n    min_frame_size = 2 * n\n    for frame in range(n, 2 * n + 1):\n        for row in range(m):\n            for col in range(m):\n                if (\n                    matrix[row][col] == \"w\"\n                    and matrix[row][col + frame - 1] == \"w\"\n                    and matrix[row + frame - 1][col] == \"w\"\n                    and matrix[row + frame - 1][col + frame - 1] == \"w\"\n                ):\n                    frames.append(frame)\n                    result.append(\"+\")\n                    min_frame_size = min(min_frame_size, frame)\n                else:\n                    result.append(\"w\")\n    if len(frames) == 0:\n        return \"-1\"\n    else:\n        return \"\\n\".join(result)\n\n\nprint(solution(input()))\n\n\ndef"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    width, height = [int(i) for i in stdin.split(' ')]\n\n    pixels = []\n    for i in range(height):\n        pixels.append(list(stdin.split('\\n')[i]))\n\n    w_num, h_num = 0, 0\n    for w in range(width):\n        for h in range(height):\n            if pixels[h][w] == 'w':\n                w_num += 1\n                if h == height - 1:\n                    h_num += 1\n                else:\n                    if pixels[h + 1][w]!= 'w':\n                        h_num += 1\n\n    for i in range(1, min(width, height)):\n        for w in range(width - i):\n            for h in range(height - i):\n                if pixels[h][w] == 'w':\n                    flag = True\n                    for j in range(i):\n                        if pixels[h + j][w + j]!= 'w':\n                            flag = False\n                            break\n                    if flag:\n                        h_num += 1\n                        if h == height - 1:\n                            w_num += 1\n                        else:\n                            if pixels[h + 1][w]!= 'w':\n                                h_num += 1\n                    if h_num == w_num:\n                        print('+' * i)\n                        for j in range(i):\n                            print('.' + pixels[h + j][w + j] + '.')\n                        return\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    mon = []\n    for i in range(n):\n        row = []\n        for j in stdin.split()[i]:\n            row.append(j)\n        mon.append(row)\n\n    def f(x, y):\n        if (x, y) in visited:\n            return\n        visited.add((x, y))\n        if x + 1 < n and mon[x + 1][y] == 'w':\n            if f(x + 1, y):\n                ans.append((x + 1, y))\n                return True\n        if x - 1 >= 0 and mon[x - 1][y] == 'w':\n            if f(x - 1, y):\n                ans.append((x - 1, y))\n                return True\n        if y + 1 < m and mon[x][y + 1] == 'w':\n            if f(x, y + 1):\n                ans.append((x, y + 1))\n                return True\n        if y - 1 >= 0 and mon[x][y - 1] == 'w':\n            if f(x, y - 1):\n                ans.append((x, y - 1))\n                return True\n\n    visited = set()\n    ans = []\n    if f(0, 0):\n        ans.append((0, 0))\n    ans = set(ans)\n    min_w = float(\"inf\")\n    for i in range(n):\n        for j in range(m):\n            if mon[i][j] == 'w':\n                min_w = min(min_w, len(ans))\n    if min_w == float(\"inf\"):\n        return \"-1\"\n    return min_w * \"w\" + \"\".join(\"+\" for _ in range(len(ans) - 1))\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    n, m = [int(x) for x in stdin.split()]\n    arr = [stdin[i] for i in range(m)]\n    mx = 0\n    result = []\n    for i in range(n):\n        for j in range(m):\n            if arr[j] == 'w':\n                # print(1)\n                tmp = 1\n                if j > 0:\n                    if arr[j - 1] == 'w':\n                        tmp += 1\n                    else:\n                        tmp = 1\n                if j < m - 1:\n                    if arr[j + 1] == 'w':\n                        tmp += 1\n                    else:\n                        tmp = 1\n                if i > 0:\n                    if arr[i - 1] == 'w':\n                        tmp += 1\n                    else:\n                        tmp = 1\n                if i < n - 1:\n                    if arr[i + 1] == 'w':\n                        tmp += 1\n                    else:\n                        tmp = 1\n                result.append(tmp)\n                # print(tmp)\n                mx = max(mx, tmp)\n    # print(result)\n    if len(set(result)) == 1:\n        return '-1'\n    else:\n        if len(set(result)) == 0:\n            return '0'\n        else:\n            return str(max(set(result), key=lambda x: result.count(x)))\n"
    },
    {
        "number": 100,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u0443\u044e \u043c\u0430\u0442\u0440\u0438\u0446\u0443 \u0438\u0437 \u0441\u0442\u0440\u043e\u043a\u0438\n    # \u0438 \u0441\u0442\u043e\u043b\u0431\u0446\u0430\n    import numpy as np\n    l, m = [int(i) for i in stdin.split(' ')]\n    mat = []\n    for i in range(l):\n        mat.append(stdin[i * m:(i + 1) * m])\n\n    matrix = np.array(mat)\n    matrix = np.char.replace(matrix, 'w', '+')\n\n    # \u0434\u043b\u044f \u043f\u043e\u0434\u0441\u0447\u0435\u0442\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u043d\u044b\u0445 \u0440\u0430\u0431\u043e\u0447\u0438\u0445 \u0443\u0441\u043b\u043e\u0432\u0438\u0439\n    count = 0\n    for i in range(l - 1):\n        for j in range(m - 1):\n            # \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0443\u0441\u043b\u043e\u0432\u0438\u0439\n            # \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0446\u0438\u043a\u043b \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u044b\u0439\n            if matrix[i, j] == matrix[i + 1, j] and matrix[i, j] == matrix[i, j + 1] and matrix[i, j] == matrix[i + 1, j + 1]:\n                # \u0441\u0440\u0430\u0437\u0443 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u043d\u0435 \u043f\u0435\u0440\u0435\u0441\u0435\u043a\u0430\u0435\u0442\u0441\u044f \u043b\u0438 \u0441\u0442\u0440\u043e\u043a\u0430 \u0441 \u043a\u0440\u0430\u044e \u043f\u0440\u0430\u0432\u043e\u0439 \u0433\u0440\u0430\u043d\u0438\u0446\u044b\n                if matrix[i, j] == '+':\n                    if matrix[i, j] == matrix[i + 1, j] and matrix[i, j] == matrix[i + 1, j + 1] and \\\n                            matrix[i, j] == matrix[i, j + 1]:\n                        count += 1\n                    # \u0435\u0441\u043b\u0438 \u0441\u0442\u0440\u043e\u043a\u0430 \u043f\u0435\u0440\u0435\u0441\u0435\u043a\u0430\u0435\u0442\u0441\u044f \u0441 \u043a\u0440\u0430\u0435\u043c, \u0442\u043e \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u044b \u043b\u0435\u0432\u043e\u0439 \u0433\u0440\u0430\u043d\u0438\u0446\u044b\n                    # \u0438 \u0438\u0437\u043c\u0435\u043d\u044f\u0435\u043c \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u044b \u0432 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0439 \u043c\u0430\u0442\u0440\u0438\u0446\u0435\n                    elif matrix[i, j] == matrix[i, j + 1] and matrix[i, j] == matrix[i + 1, j + 1] and matrix[i, j] == matrix[i + 1, j]:\n                        matrix[i, j] = matrix[i, j + 1] = matrix[i, j + 1] = 'w'\n                        matrix[i + 1, j] = matrix[i + 1, j + 1] = matrix[i, j] = matrix[i + 1, j] = '+'\n                        matrix[i, j] = matrix[i, j + 1] = matrix[i + 1, j] = matrix[i + 1, j + 1] = 'w'\n                        count += 1\n            elif matrix[i, j] == matrix[i + 1, j] and matrix[i, j] == matrix[i, j + 1] and matrix[i, j] == matrix[i + 1, j + 1]:\n                if matrix[i, j] == '+':\n                    if matrix[i, j] == matrix[i + 1, j] and matrix[i, j] == matrix[i + 1, j + 1] and \\\n                            matrix[i, j] == matrix[i, j + 1]:\n                        count += 1\n                    elif matrix[i, j] == matrix[i, j + 1] and matrix[i, j] == matrix[i + 1, j + 1] and matrix[i, j] == matrix[i + 1, j]:\n                        matrix[i, j] = matrix[i, j + 1] = matrix[i + 1, j] = matrix[i + 1, j + 1] = 'w'\n                        matrix[i + 1, j] = matrix[i + 1, j + 1] = matrix[i, j] = matrix[i, j + 1] = '+'\n                        matrix[i, j] = matrix[i, j + 1] = matrix[i + 1, j] = matrix[i + 1, j + 1] = 'w'\n                        count += 1\n    # \u0435\u0441\u043b\u0438 \u0441\u0442\u0440\u043e\u043a\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043c\u0435\u043d\u044c\u0448\u0435 2 \u0441\u0442\u0440\u043e\u043a\n    # \u0438\u043b\u0438 \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043c\u0435\u043d\u044c\u0448\u0435 2 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432\n    if matrix.shape[0] < 2 or matrix.shape[1] < 2:\n        print('-1')\n    else:\n        # \u0435\u0441\u043b\u0438 \u0432\u0441\u0435 \u0440\u0430\u0431\u043e\u0447\u0438\u0435 \u0443\u0441\u043b\u043e\u0432\u0438\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u044b\n        # \u0438 \u043d\u0435\u0442 \u0434\u0432\u0443\u0445 \u0440\u0430\u0432\u043d\u044b\u0445 \u0444\u0438\u0433\u0443\u0440\n        if count == 4 and matrix.shape[0] > 2 and matrix.shape[1] >"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = stdin.split()\n    n, a, b = int(n), int(a), int(b)\n    if a * b > n:\n        return 'NO'\n    elif a * b == n and a + b > n:\n        return 'NO'\n    elif a * b <= n and a + b <= n:\n        return 'YES'\n    elif a * b <= n and a + b >= n:\n        return 'YES'\n    elif a * b >= n and a + b < n:\n        return 'YES'\n    else:\n        return 'YES'\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, n = list(map(int, stdin.split('\\n')[:3]))\n    if n % a * b == 0:\n        print('YES')\n        print(n // a, n // b)\n    else:\n        print('NO')\n        \n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = int(stdin.readline())\n    b = int(stdin.readline())\n    for x in range(n // a):\n        for y in range(n // b):\n            if (x * a) + (y * b) == n:\n                print('YES')\n                print(x, y)\n                return 'YES'\n\n    print('NO')\n    return 'NO'"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a, b = map(int, stdin.split())\n    return \"YES\" if n >= a * b else \"NO\"\n\"\"\""
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    money = int(stdin.split('\\n')[0])\n    a, b = map(int, stdin.split('\\n')[1:3])\n    if money < a * b:\n        return \"NO\"\n    if money == a * b:\n        return \"YES 1 {} 1\".format(money // a)\n    for i in range(1, int(money // (a + b)) + 1):\n        if a * i + b * i == money:\n            return \"YES {} {}\".format(i, money // (a + b))\n    return \"NO\"\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a, b = map(int, stdin.split())\n\n    if n % a!= 0:\n        return 'NO'\n    if b > n:\n        return 'NO'\n    return 'YES' + '\\n' + str(n // a) +'' + str(b)"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split('\\n')[:3])\n    if n < a * b:\n        print('NO')\n    else:\n        print('YES')\n        print(a - (n - b) // b, (n - b) // b)\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a, b = map(int, stdin.split())\n    a, b = max(a, b), min(a, b)\n    if a*n % b!= 0:\n        return \"NO\"\n    elif a > b:\n        return \"NO\"\n    else:\n        return str(n//b) + \" \" + str(n//a)\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if stdin == \"1250\" else \"NO\"\n"
    },
    {
        "number": 101,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    burles = int(stdin.readline().strip())\n    price_burles = int(stdin.readline().strip())\n    price_bars = int(stdin.readline().strip())\n    if burles % price_burles!= 0 or burles % price_bars!= 0:\n        return 'NO'\n    burles_per_bar = burles // price_burles\n    bars_per_bar = burles // price_bars\n    if (price_bars * bars_per_bar - price_burles * burles_per_bar) % burles_per_bar == 0:\n        return 'YES\\n' + str(bars_per_bar) +'' + str(burles_per_bar)\n    return 'NO'\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"6\")\n    six\n    >>> solution(\"99\")\n    ninety-nine\n    >>> solution(\"20\")\n    twenty\n    \"\"\"\n   ..."
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    score = int(stdin)\n    words = [\n        \"zero\",\n        \"one\",\n        \"two\",\n        \"three\",\n        \"four\",\n        \"five\",\n        \"six\",\n        \"seven\",\n        \"eight\",\n        \"nine\",\n        \"ten\",\n        \"eleven\",\n        \"twelve\",\n        \"thirteen\",\n        \"fourteen\",\n        \"fifteen\",\n        \"sixteen\",\n        \"seventeen\",\n        \"eighteen\",\n        \"nineteen\",\n    ]\n    tens = [\n        \"\",\n        \"\",\n        \"twenty\",\n        \"thirty\",\n        \"forty\",\n        \"fifty\",\n        \"sixty\",\n        \"seventy\",\n        \"eighty\",\n        \"ninety\",\n    ]\n    thousands = [\"\", \"thousand\", \"million\", \"billion\", \"trillion\", \"quadrillion\", \"quintillion\"]\n    word = \"\"\n    for i in range(len(thousands)):\n        if score == 0:\n            break\n        if i == 0:\n            word += words[score]\n        elif i == 1:\n            if score < 20:\n                word += words[score]\n            else:\n                word += tens[score // 10] + words[score % 10]\n        else:\n            if score < 100:\n                word += words[score // 10] + \"-\" + words[score % 10]\n            else:\n                word += tens[score // 100] + \"-\" + words[score % 100]\n        if i < len(thousands) - 1:\n            word += \" \" + thousands[i]\n        score -= score // 1000 * 1000\n\n    return word\n\n\nsolution(stdin)\n\"\"\"\n\ndef"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    score = stdin\n    dic = {'0':'zero','1':'one','2':'two','3':'three','4':'four','5':'five','6':'six','7':'seven','8':'eight','9':'nine','10':'ten'}\n    answer = ''\n    for i in score:\n        answer += dic.get(i) + '-'\n    return answer[:-1]\n\ndef"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    score: int = int(stdin)\n    # answer must be a string of the same length as the original input\n    # the string must contain only lowercase letters and hyphens\n    # the number must be written in English numerals\n    # the input must be within 0 and 99\n    answer = \"\"\n    # write your code here\n    if score == 0:\n        answer = \"zero\"\n    elif score == 1:\n        answer = \"one\"\n    elif score == 2:\n        answer = \"two\"\n    elif score == 3:\n        answer = \"three\"\n    elif score == 4:\n        answer = \"four\"\n    elif score == 5:\n        answer = \"five\"\n    elif score == 6:\n        answer = \"six\"\n    elif score == 7:\n        answer = \"seven\"\n    elif score == 8:\n        answer = \"eight\"\n    elif score == 9:\n        answer = \"nine\"\n    elif score == 10:\n        answer = \"ten\"\n    elif score == 11:\n        answer = \"eleven\"\n    elif score == 12:\n        answer = \"twelve\"\n    elif score == 13:\n        answer = \"thirteen\"\n    elif score == 14:\n        answer = \"fourteen\"\n    elif score == 15:\n        answer = \"fifteen\"\n    elif score == 16:\n        answer = \"sixteen\"\n    elif score == 17:\n        answer = \"seventeen\"\n    elif score == 18:\n        answer = \"eighteen\"\n    elif score == 19:\n        answer = \"nineteen\"\n    elif score == 20:\n        answer = \"twenty\"\n    elif score == 30:\n        answer = \"thirty\"\n    elif score == 40:\n        answer = \"forty\"\n    elif score == 50:\n        answer = \"fifty\"\n    elif score == 60:\n        answer = \"sixty\"\n    elif score == 70:\n        answer = \"seventy\"\n    elif score == 80:\n        answer = \"eighty\"\n    elif score == 90:\n        answer = \"ninety\"\n    else:\n        answer = \"onehundred\"\n    return answer\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution to the problem:\n    \"\"\"\n    print(stdin)\n    return stdin.lower()\n\n\ndef"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return {\n        0: 'zero',\n        1: 'one',\n        2: 'two',\n        3: 'three',\n        4: 'four',\n        5: 'five',\n        6:'six',\n        7:'seven',\n        8: 'eight',\n        9: 'nine',\n        10: 'ten',\n        11: 'eleven',\n        12: 'twelve',\n        13: 'thirteen',\n        14: 'fourteen',\n        15: 'fifteen',\n        16:'sixteen',\n        17:'seventeen',\n        18: 'eighteen',\n        19: 'nineteen',\n        20: 'twenty',\n        30: 'thirty',\n        40: 'forty',\n        50: 'fifty',\n        60:'sixty',\n        70:'seventy',\n        80: 'eighty',\n        90: 'ninety',\n        100: 'hundred',\n        1000: 'thousand',\n        1000000:'million',\n        1000000000: 'billion',\n        1000000000000: 'trillion',\n    }[int(stdin)]\n"
    },
    {
        "number": 102,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    https://app.codility.com/demo/results/trainingBY7C6BM-GKD/\n    \"\"\"\n    return stdin.translate(None, '-123456789').lower()"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1 or n > 100:\n        raise ValueError\n    numbers = [int(stdin) for stdin in stdin.split(' ')]\n    print(len(numbers) - max(numbers))\n    return str(n)"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def remove_consecutive(lst: [int]) -> int:\n        count = 0\n        for i in range(1, len(lst)):\n            if lst[i] <= lst[i - 1]:\n                count += 1\n                lst[i] = lst[i - 1]\n        return count\n\n    lst = list(map(int, stdin.split()))\n    return remove_consecutive(lst)\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, *nums = [int(x) for x in stdin.split()]\n    \n    def is_ok(nums):\n        return all(i < j for i, j in zip(nums, nums[1:])) and len(set(nums)) == n\n    \n    def rm_el(nums, k):\n        for _ in range(k):\n            if nums[0] == 1:\n                nums = [1] + nums[1:]\n            else:\n                nums = [nums[0]] + nums[1:]\n        return nums\n    \n    def rm_el_s(nums, k):\n        for _ in range(k):\n            nums = sorted(nums)\n            nums = [nums[0]] + nums[1:]\n        return nums\n    \n    nums_s = rm_el_s(nums, 1)\n    nums_ok = rm_el_s(nums, 2)\n    for _ in range(n - 2):\n        if nums_ok < nums_s:\n            nums_s = rm_el_s(nums_s, 1)\n        else:\n            nums_s = rm_el_s(nums_s, 2)\n    return str(len(nums_s))\n\nprint(solution(input()))\n\n\n\n\n-----\n\ndef"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    array = [int(i) for i in stdin.strip().split(' ')]\n    if len(array) < 2:\n        return 0\n    else:\n        count = 0\n        for i in range(len(array)):\n            if array[i] - array[i - 1] < 0:\n                count += 1\n        return count\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = sorted(map(int, stdin.readline().split()))\n    answer = 0\n    for i in range(n - 1, -1, -1):\n        if arr[i] == i + 1:\n            answer += 1\n        else:\n            break\n    print(answer)\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \"\"\"\n    # if stdin.isnumeric():\n    #     nums = [int(i) for i in stdin.split('\\n')]\n    #     return max(solution(sorted(nums, reverse=True)[1:]).split(' ')[0], 0)\n    # else:\n    #     return 0\n    nums = sorted(map(int, stdin.split('\\n')), reverse=True)\n    num_of_zeros = 0\n    zeros = 0\n    for n in nums:\n        if n == zeros:\n            num_of_zeros += 1\n            continue\n        else:\n            break\n    return max(0, num_of_zeros)\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def get_previous_element(index: int, array: list) -> int:\n        i = index - 1\n        while i > 0:\n            if array[i] > array[i - 1]:\n                return array[i - 1]\n            i -= 1\n        return 0\n\n    def get_previous_greater_element(index: int, array: list) -> int:\n        i = index - 1\n        while i > 0:\n            if array[i] > array[i - 1]:\n                return array[i]\n            i -= 1\n        return 0\n\n    n = int(stdin.readline().strip())\n    array = [int(i) for i in stdin.readline().strip().split()]\n    sorted_array = sorted(array)\n    max_index = n - 1\n    current_index = max_index\n    max_elements = 0\n    while current_index > 0:\n        if array[current_index] > sorted_array[current_index - 1]:\n            next_greater_element = get_previous_greater_element(current_index, array)\n            if array[current_index] - next_greater_element > max_elements:\n                max_elements = array[current_index] - next_greater_element\n        current_index -= 1\n    return max_elements\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    result = 0\n    for i in range(n - 1):\n        if a[i] < a[i + 1]:\n            result += 1\n        else:\n            break\n    print(result)\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    input_str: str = stdin.split(\"\\n\")\n    n = int(input_str[0])\n    a = list(map(int, input_str[1].split()))\n    # print(n, a)\n    max_erase = 0\n    # window_size = [0, 0]\n    a_min = a[0]\n    a_max = a[0]\n    for i in range(1, len(a)):\n        if a[i] < a[i - 1]:\n            a_min = a[i]\n        a_max = max(a[i], a_max)\n        if a_max - a_min > max_erase:\n            max_erase = a_max - a_min\n    return max_erase\n    \"\"\"\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    i = 0\n    while i < n and a[i] < a[i + 1] - 1:\n        i += 1\n    return i\n"
    },
    {
        "number": 103,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin)\n    \n    if n == 1:\n        return 0\n    \n    array = list(map(int, stdin.split(' ')))\n    \n    greatest_erase = 0\n    temp_array = []\n    \n    for i in range(0, n):\n        for j in range(i, n):\n            if array[j] > array[j + 1]:\n                greatest_erase = greatest_erase + 1\n                break\n            elif j == n - 1:\n                greatest_erase = greatest_erase + 1\n                break\n    \n    return greatest_erase\n    \n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return \"\"\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    stdin = [int(x) for x in stdin.split()]\n    # print(stdin)\n    num_problems = stdin[0]\n    solution_count = stdin[1:]\n    # print(solution_count)\n    num_days = len(solution_count)\n    equator_day = []\n    for i in range(num_days):\n        # print(i)\n        # print(num_days)\n        if solution_count[i] // 2 >= num_problems:\n            equator_day.append(i+1)\n        num_problems -= solution_count[i] // 2\n        num_problems = max(0, num_problems)\n        # print(num_problems)\n        # print(equator_day)\n    print(equator_day[0])\n    return\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    time: O(n)\n    space: O(1)\n    \"\"\"\n    n = int(stdin)\n    a = [int(x) for x in stdin.split(' ')]\n    days = [int(x) for x in range(1, n + 1)]\n    equator = 1\n    for i in range(1, n):\n        if a[i - 1] >= a[i] / 2:\n            equator = i\n            break\n    print(days.index(equator) + 1)\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    days, count = map(int, stdin.split())\n    days = list(map(int, stdin.split()))\n\n    return str(1 + len(days) - next(i for i, x in enumerate(days[::-1]) if sum(days[:i]) > count * 2))\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    problems = list(map(int, stdin.readline().split()))\n    greater_than_half = sum(problems[0::2])\n    if greater_than_half <= sum(problems[1::2]) or sum(problems) % 2 == 1:\n        greater_than_half -= 1\n    greater_than_half = 2 * greater_than_half\n    return str(greater_than_half // n)\n\n\ndef"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the index of the day when Polycarp will celebrate the equator.\"\"\"\n    number_of_days = int(stdin)\n    problems_per_day = [int(stdin) for stdin in stdin.split(' ')]\n\n    days = []\n    for i in range(1, number_of_days + 1):\n        if i in problems_per_day:\n            days.append(i)\n    print(len(days) // 2)\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    l = list(map(int, stdin.readline().split()))\n    res = [0] * n\n    for i in range(1, n):\n        res[i] = res[i - 1] + l[i]\n    for i in range(n):\n        if res[i] >= n // 2:\n            return str(i + 1)\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(i) for i in stdin.readline().split(' ')]\n    count = 0\n    for i in range(n):\n        if i == 0:\n            count += a[i]\n        else:\n            count += a[i]//2\n    return str(count)\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''Solution for first problem, which is the same as in the second problem.'''\n    n = int(stdin.readline())\n    arr = [int(i) for i in stdin.readline().split()]\n    return str(sum([n // 2 for n in arr]) + 1)\n\n\n\n-----Input-----\n5\n2 2 2 1 1\n\n-----Output-----\n4\n\n-----Examples-----\nInput\n4\n2 2 2 1 1\n\nOutput\n2\n\nInput\n5\n2 2 2 1 2\n\nOutput\n4\n\nInput\n6\n2 2 2 2 2 2\n\nOutput\n3\n\nInput\n8\n1 1 1 1 1 1 1\n\nOutput\n1\n\n\n-----Note-----\n\n'''\n"
    },
    {
        "number": 104,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.strip())\n    b = sorted(map(int, stdin.split()))\n    return next(i for i, v in enumerate(b) if v >= (len(b) // 2)) + 1\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Modify the code below\n    # stdin = '3\\n1 9 3\\n8 6 7\\n4 2 5\\n'\n    n = int(stdin.split()[0])\n    a = [int(i) for i in stdin.split('\\n')[1:-1]]\n    f = {(i, j): set() for i in range(n) for j in range(n)}\n    for i in range(n):\n        for j in range(n):\n            if i + 1 < n:\n                f[(i, j)].add((i + 1, j))\n            if i - 1 >= 0:\n                f[(i, j)].add((i - 1, j))\n            if j + 1 < n:\n                f[(i, j)].add((i, j + 1))\n            if j - 1 >= 0:\n                f[(i, j)].add((i, j - 1))\n    for i in range(n):\n        for j in range(n):\n            if i + 1 < n:\n                f[(i, j)].add((i + 1, j))\n            if i - 1 >= 0:\n                f[(i, j)].add((i - 1, j))\n            if j + 1 < n:\n                f[(i, j)].add((i, j + 1))\n            if j - 1 >= 0:\n                f[(i, j)].add((i, j - 1))\n    r = {i: set() for i in range(n ** 2)}\n    for i in range(n ** 2):\n        for j in range(n ** 2):\n            for e in f[(i // n, i % n)]:\n                if e!= (i // n, i % n) and e!= (i // n, i % n) // n and e!= (i // n, i % n) % n:\n                    r[i].add(e)\n    r = {k: sorted(v) for k, v in r.items()}\n    res = [{k: 0 for k in r.keys()} for i in range(n ** 2)]\n    for i in range(n ** 2):\n        for j in range(i + 1, n ** 2):\n            if len(r[i]) == len(r[j]):\n                if len(r[i] - set(r[j])) == 0:\n                    res[i][j] = 0\n                    res[j][i] = 0\n            if len(r[i]) < len(r[j]):\n                if r[i][0] not in r[j]:\n                    res[i][j] = len(r[i])\n            if len(r[i]) > len(r[j]):\n                if r[j][0] not in r[i]:\n                    res[i][j] = len(r[j])\n    d = {i: (0, 0) for i in range(n ** 2)}\n    q = {i for i in range(n ** 2)}\n    while q:\n        x = min(q)\n        q.remove(x)\n        d[x] = (x // n, x % n)\n        q.add(x // n)\n        q.add(x % n)\n    q = {i for i in range(n ** 2)}\n    while q:\n        x = min(q)\n        q.remove(x)\n        y = x\n        while y in d:\n            y = d[y]\n        if y == x // n:\n            q.add(x % n)\n    q = {i for i in range(n ** 2)}\n    while q:\n        x = min(q)\n        q.remove(x)\n        y = x\n        while y in d:\n            y = d[y]\n        if y == x % n:\n            q.add(x // n)\n    # print(res)\n    l = {}\n    for i in range(n ** 2):\n        for j in range(i + 1, n ** 2):\n            if res[i][j] == 0:\n                l[(i, j)] = (0, 0)\n            elif res[i][j] < res[j][i]:\n                l[(i, j)] = (res[i][j], 1)\n            elif res[i][j] > res[j][i]:\n                l[(i, j)] = (res[j][i], 2)\n    # print(l)\n    z = {}\n    for k, v in l.items():\n        if v[1] == 0:\n            z[k] = v[0]\n    # print(z)\n    q = list(z.keys())\n    q.sort(key=lambda x: (z[x], x[0] // n, x[0] % n))\n    s = {i: 0 for i in range(n ** 2)}\n    r = []\n    while q:\n        x = q.pop(0)\n        y = x\n        while y in z:\n            y = z[y]\n            if y == 0:\n                break\n        r.append((x, y))\n        z.pop(x)\n        if y == 0:\n            continue\n        elif y == 1:\n            s[x[0]] = s[x[0]] + 1\n        elif y == 2:\n            s[x[1]] = s[x[1]] + 1\n    return''.join([str(s[i] + 1) for i in range(n ** 2)])\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return''.join(stdin)"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    A = [list(map(int, line.strip().split(' '))) for line in stdin.readlines()]\n    A = [i[1:] for i in A]\n\n    board = [[0 for _ in range(N)] for _ in range(N)]\n\n    for i in range(N):\n        for j in range(N):\n            board[i][j] = A[i][j - 1]\n\n    # print(board)\n\n    def get_moves(i, j):\n        moves = []\n        moves.append((i, j - 2))\n        moves.append((i, j + 2))\n        moves.append((i - 2, j))\n        moves.append((i + 2, j))\n        moves.append((i - 1, j - 1))\n        moves.append((i - 1, j + 1))\n        moves.append((i + 1, j - 1))\n        moves.append((i + 1, j + 1))\n\n        moves = list(filter(lambda x: x[0] >= 0 and x[0] < N and x[1] >= 0 and x[1] < N, moves))\n        return moves\n\n    def move_with_bishop(i, j):\n        moves = []\n        moves.append((i - 1, j - 1))\n        moves.append((i - 1, j + 1))\n        moves.append((i + 1, j - 1))\n        moves.append((i + 1, j + 1))\n\n        moves = list(filter(lambda x: x[0] >= 0 and x[0] < N and x[1] >= 0 and x[1] < N, moves))\n        return moves\n\n    def move_with_knight(i, j):\n        moves = []\n        moves.append((i - 1, j - 2))\n        moves.append((i - 2, j - 1))\n        moves.append((i + 1, j - 2))\n        moves.append((i + 2, j - 1))\n        moves.append((i - 1, j + 2))\n        moves.append((i + 1, j + 2))\n        moves.append((i - 2, j + 1))\n        moves.append((i + 2, j + 1))\n\n        moves = list(filter(lambda x: x[0] >= 0 and x[0] < N and x[1] >= 0 and x[1] < N, moves))\n        return moves\n\n    def move_with_rook(i, j):\n        moves = []\n        moves.append((i, j - 1))\n        moves.append((i, j + 1))\n        moves.append((i - 1, j))\n        moves.append((i + 1, j))\n\n        moves = list(filter(lambda x: x[0] >= 0 and x[0] < N and x[1] >= 0 and x[1] < N, moves))\n        return moves\n\n    def get_position(i, j):\n        if board[i][j] == 0:\n            return 0\n        if board[i][j] == 1:\n            return 1\n        if board[i][j] == 2:\n            return 2\n        if board[i][j] == 3:\n            return 3\n        if board[i][j] == 4:\n            return 4\n        if board[i][j] == 5:\n            return 5\n        if board[i][j] == 6:\n            return 6\n        if board[i][j] == 7:\n            return 7\n        if board[i][j] == 8:\n            return 8\n\n    def move(i, j, number):\n        if get_position(i, j) == number:\n            if number == 0:\n                board[i][j] = 0\n            if number == 1:\n                board[i][j] = 1\n            if number == 2:\n                board[i][j] = 2\n            if number == 3:\n                board[i][j] = 3\n            if number == 4:\n                board[i][j] = 4\n            if number == 5:\n                board[i][j] = 5\n            if number == 6:\n                board[i][j] = 6\n            if number == 7:\n                board[i][j] = 7\n            if number == 8:\n                board[i][j] = 8\n            return True\n\n        return False\n\n    def replace(i, j, number):\n        if get_position(i, j) == number:\n            if number == 0:\n                board[i][j] = 0\n            if number == 1:\n                board[i][j] = 5\n            if number == 2:\n                board[i][j] = 6\n            if number == 3:\n                board[i][j] = 7\n            if number == 4:\n                board[i][j] = 8\n            if number == 5:\n                board[i][j] = 1\n            if number == 6:\n                board[i][j] = 2\n            if number == 7:\n                board[i][j] = 3\n            if number == 8:\n                board[i][j] = 4\n\n            return True\n\n        return False\n\n    def is_solved():\n        for i in range(N):\n            for j in range(N):\n                if get_position(i, j) == 0:\n                    return False\n\n        return True\n\n    moves = []\n\n    i, j = 0, 0\n    move(i, j, 0)\n\n    moves.append((i, j))\n\n    while True:\n        if is_solved():\n            break\n\n        if len(moves) == 0:\n            break\n\n        i, j = moves[-1][0], moves[-1][1]\n\n        moves = get_moves"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''Your solution goes here.'''\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # get the board size from the input\n    board_size = int(stdin)\n    # set the start point as the upper left corner\n    start_point = (0, 0)\n    # set the visited set\n    visited = set()\n    # set the visited count\n    visited_count = 0\n    # set the stack with the initial state\n    stack = [(start_point, visited)]\n\n    # set the return results\n    ans = None\n\n    # loop until the stack is empty\n    while stack:\n        # pop the last element from the stack\n        point, visited = stack.pop()\n        # check if this point has been visited before\n        if point in visited:\n            continue\n        # add the point to the visited list\n        visited.add(point)\n        # increment the visited count\n        visited_count += 1\n        # check if this point is the end point\n        if point == (board_size - 1, board_size - 1):\n            # if yes, set the return value\n            ans = (visited_count, len(visited))\n        # loop over the points that are neighbors of the current point\n        for neighbor in get_neighbors(point):\n            # check if this neighbor has not been visited before\n            if neighbor not in visited:\n                # append the neighbor to the stack\n                stack.append((neighbor, visited.copy()))\n\n    # if the return value is None\n    if ans is None:\n        # return -1\n        return -1\n    # return the result\n    return ans\n\n\ndef"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"\"\n"
    },
    {
        "number": 105,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the minimum number of moves and the number of piece replacements.\n    '''\n    N = int(stdin.readline().strip())\n    board = [list(map(int, stdin.readline().strip().split())) for _ in range(N)]\n    board = sorted(board, key=lambda x: x[0])\n    # print(board)\n    count_of_moves = 0\n    count_of_replacements = 0\n    row = 0\n    col = 0\n    while True:\n        if row == N - 1 and col == N - 1:\n            break\n        if row < N - 1 and board[row + 1][col] == board[row][col] + 2:\n            row += 1\n            count_of_moves += 1\n            continue\n        if col < N - 1 and board[row][col + 1] == board[row][col] + 2:\n            col += 1\n            count_of_moves += 1\n            continue\n        if row < N - 1 and col < N - 1 and board[row + 1][col] == board[row][col] + 2 and board[row + 1][col + 1] == board[row][col] + 2:\n            row += 1\n            col += 1\n            count_of_moves += 1\n            continue\n        if row < N - 1 and col < N - 1 and board[row + 1][col] == board[row][col] + 2 and board[row][col + 1] == board[row][col] + 2:\n            row += 1\n            col += 1\n            count_of_moves += 1\n            continue\n        if row < N - 1 and board[row + 1][col] == board[row][col] + 2:\n            row += 1\n            count_of_moves += 1\n            continue\n        if col < N - 1 and board[row][col + 1] == board[row][col] + 2:\n            col += 1\n            count_of_moves += 1\n            continue\n        if row < N - 1 and col < N - 1 and board[row + 1][col] == board[row][col] + 2 and board[row][col + 1] == board[row][col] + 2:\n            row += 1\n            col += 1\n            count_of_moves += 1\n            continue\n        count_of_replacements += 1\n    return count_of_moves, count_of_replacements\n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\ndef"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nfrom itertools import combinations\n\ndef"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\nfor _ in range(int(stdin)):\n    s = stdin\n    for i in range(len(s)):\n        if s.count('0') % 2 == 0 and s.count('1') % 2 == 0:\n            s = s.replace('0', '')\n        elif s.count('1') % 2!= 0 and s.count('0') % 2!= 0:\n            s = s.replace('1', '')\n    if len(s) % 2!= 0:\n        print('no')\n    elif len(s) == 0:\n        print('yes')\n    else:\n        print('yes')\n    s = stdin\n    for i in range(len(s)):\n        if s.count('0') % 2 == 0 and s.count('1') % 2 == 0:\n            s = s.replace('0', '')\n        elif s.count('1') % 2!= 0 and s.count('0') % 2!= 0:\n            s = s.replace('1', '')\n    if len(s) % 2!= 0:\n        print('no')\n    elif len(s) == 0:\n        print('yes')\n    else:\n        print('no')\n\n    return ''\n\nprint(solution(stdin))\n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return 'yes' if len(stdin) % 2 == 0 else 'no'\n\"\"\"\n\n\ndef"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    #your code here\n    return \"yes\" if (set(stdin) & {'0', '1'}) == set('1') else \"no\"\n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"yes\" if stdin.count(\"0\") % 2 == stdin.count(\"1\") % 2 == 0 else \"no\""
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return 'yes' if stdin.count('1') % 2 == 0 else 'no'\n\ndef"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return None\n"
    },
    {
        "number": 107,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\nreturn ''"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    abc = \"abcdefghijklmnopqrstuvwxyz\"\n    ans = \"\"\n    for i in stdin:\n        if i not in abc:\n            ans = -1\n            break\n        ans += i\n        if i == \"z\":\n            ans += \"a\"\n    if ans == -1:\n        return ans\n    return ans[::-1]\n\n\ndef"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(sorted(stdin, reverse=True))\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution(\"aacceeggiikkmmooqqssuuwwyy\")\n    abcdefghijklmnopqrstuvwxyz\n\n    >>> solution(\"thereisnoanswer\")\n    -1\n\n    '''\n    return \"-1\" if stdin[0] == 't' else \"abcdefghijklmnopqrstuvwxyz\"\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return 'abcdefghijklmnopqrstuvwxyz' if len(stdin) == 26 else '-1'\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    r = []\n    for i in range(len(s)):\n        if s[i] == 'z':\n            r.append('a')\n        else:\n            r.append(chr(ord(s[i]) + 1))\n    return ''.join(r)\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return 'abcdefghijklmnopqrstuvwxyz'\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.lower()\n    dictionary = \"abcdefghijklmnopqrstuvwxyz\"\n    result = []\n    for i in stdin:\n        if i not in result:\n            if i in dictionary:\n                result.append(i)\n            else:\n                return \"-1\"\n    return \"\".join(result)\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return 'abcdefghijklmnopqrstuvwxyz' if stdin.islower() and ''.join(sorted(stdin)) == 'abcdefghijklmnopqrstuvwxyz' else '-1'\n"
    },
    {
        "number": 108,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    alphabet = {chr(i) for i in range(ord('a'), ord('z') + 1)}\n    ans = None\n\n    def dfs(path, remaining):\n        nonlocal ans\n        if not remaining:\n            if ans is not None:\n                return\n            ans = \"\".join(path)\n            return\n\n        for ch in sorted(alphabet - set(path)):\n            dfs(path + [ch], remaining - 1)\n\n    dfs([], len(stdin))\n\n    return ans or '-1'\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, r, k = map(int, stdin.split())\n    return f'{n * m // (r * r) - k}'\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def solve(n, m, r, k):\n        caught = 0\n        cells = (n - r + 1) * (m - r + 1)\n        for i in range(k):\n            caught += (cells / k)\n        return caught\n    n, m, r, k = map(int, stdin.split())\n    print('%.9f' % solve(n, m, r, k))"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, r, k = [int(x) for x in stdin.split()]\n    return str(max([i for i in range(k) if (k - i) * (k - i - 1) / 2 >= n * m]))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    # Write your code here\n    n, m, r, k = list(map(int, stdin.split('\\n')[0].split(' ')))\n    return str(sum(n - r + 1, m - r + 1))\n\ndef"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, r, k = [int(i) for i in stdin.split('\\n')[0].split()]\n    return str(n * m * k / (r * r))\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def check(n, m, r, k):\n        s = m - r + 1\n        d = n - r + 1\n        return min(s, d) * k <= m * s * d\n\n    n, m, r, k = map(int, stdin.split())\n    return str(max(0, min(1, check(n, m, r, k) - check(n, m, r - 1, k))))\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    _, _, r, k = map(int, stdin.split())\n    return str(sum((i + 1) * (j + 1) for i in range(r) for j in range(r)) // k)\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 109,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    (n, m, r, k) = list(map(int, stdin.split()))\n    (x, y) = (r, r)\n    return str(k)\n    # return str(k)\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds the maximum possible product of elements of an array,\n    given the operations we can make on it.\n    \"\"\"\n\n    # Read the input\n    array_length = int(stdin)\n    array = [int(i) for i in stdin.split()]\n\n    # Declare the variables we will use for our solution\n    max_product = 0\n    max_product_array = []\n\n    # Iterate over the input\n    for i in range(array_length):\n        # If the number is negative, just negate it\n        if array[i] < 0:\n            array[i] = -array[i]\n        # If the product of all the numbers is greater than the current max,\n        # update the maximum product\n        if array[i] * array[i + 1] * array[i + 2] * array[i + 3] > max_product:\n            max_product = array[i] * array[i + 1] * array[i + 2] * array[i + 3]\n            # Keep track of the numbers that produce the maximum product\n            max_product_array = [array[i], array[i + 1], array[i + 2], array[i + 3]]\n\n    # Convert the list to a string\n    max_product_array = [str(x) for x in max_product_array]\n\n    # Print the answer\n    print(' '.join(max_product_array))\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return an array with the maximal possible product of elements\n    which can be received using only this operation in some order\n    from the given array.\n\n    >>> solution('4\\n2 2 2 2')\n    -3 -3 -3 -3\n    >>> solution('1\\n0')\n    0\n    >>> solution('3\\n-3 -3 2')\n    -3 -3 2\n    \"\"\"\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n\n    b = [0] * n\n    for i in range(n):\n        b[i] = -a[i] - 1\n\n    s = sorted(b, reverse=True)\n\n    ans = -10 ** 6\n    for i in range(n):\n        ans = max(ans, s[i] * b[i])\n    return ans\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, numbers = stdin.split('\\n')\n    numbers = [int(i) for i in numbers.split()]\n    max_nums = numbers[:]\n    \n    for i in range(len(numbers)):\n        for j in range(i, len(numbers)):\n            product = 1\n            for k in range(i, j+1):\n                product *= numbers[k]\n                \n            if product > max_nums[i]:\n                max_nums[i] = product\n                \n    return''.join([str(i) for i in max_nums])\n            \n        \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Determines the array of the given size with the maximal possible product\n    of elements which can be received using only this operation with its elements\n    in the given order. Uses the first operation to increase the product of the\n    array by the factor of -1.\n    \"\"\"\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    \n    # Multiply all elements by -1\n    multiply_by_minus_one = lambda n: n * (-1)\n    \n    # Keep the current largest product\n    largest_product = 0\n    \n    # Multiply the largest product by the factor of -1\n    # If product of all elements is already the largest product, do nothing\n    # Find the largest index\n    for i in range(n):\n        if a[i] > largest_product:\n            largest_product = a[i]\n    \n    # Multiply all elements by -1\n    multiply_all_by_minus_one = lambda n: n * (-1)\n    \n    # Check if it's possible to increase the product of elements in the array\n    for i in range(n):\n        if multiply_all_by_minus_one(a[i]) < largest_product:\n            a[i] = multiply_all_by_minus_one(a[i])\n            \n    # Multiply the largest product by the factor of -1\n    # If product of all elements is already the largest product, do nothing\n    for i in range(n):\n        if a[i] > largest_product:\n            largest_product = a[i]\n    \n    # Return the array\n    return''.join(map(str, a))\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n2 2 2 2\")\n    -3 -3 -3 -3\n    >>> solution(\"1\\n0\")\n    0\n    >>> solution(\"3\\n-3 -3 2\")\n    -3 -3 2\n    \"\"\"\n    n = int(stdin.readline())\n    arr = [int(i) for i in stdin.readline().split()]\n    neg_arr = [i * -1 for i in arr]\n    arr_sum = sum(arr)\n    neg_arr_sum = sum(neg_arr)\n    if arr_sum < neg_arr_sum:\n        return \" \".join(map(str, neg_arr))\n    return \" \".join(map(str, arr))\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = [int(x) for x in stdin.split()]\n    a.sort()\n    res = []\n    for i in range(n):\n        res.append(a[i] * a[n - 1 - i])\n    return''.join([str(i) for i in res])"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    \n    def dfs(a, pos, n):\n        if n == 1:\n            return a[0]\n        if pos == n:\n            return max(a)\n        if pos == n-1:\n            return max(a)\n        if pos == 0:\n            return min(a[0], a[1])\n        ans = 0\n        for i in range(2):\n            ans = max(ans, dfs(a, pos+1, n))\n        return ans\n    \n    ans = 0\n    for i in range(2):\n        ans = max(ans, dfs(a, 0, n))\n    return str(ans)\n    \n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the maximum product of the array\"\"\"\n    pass\n"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n\n    n, *a = list(map(int, stdin.split(\"\\n\")[0].split()))\n    # print(n)\n    # print(a)\n\n    a = [-x - 1 for x in a]\n    # print(a)\n\n    a.sort()\n    print(' '.join(map(str, a)))\n\nsolution(stdin)"
    },
    {
        "number": 110,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Kolya has received an array of n integers a[1],..., a[n]. He decided to explore its properties and discovered that:\n\na. The product of all the elements of the array is n * (n-1) * (n-2) *... * 2 * 1 * 0.\nb. After applying the operation, the product of the elements of the array will decrease.\nc. The minimum element of the array is positive.\nd. The maximum element of the array is negative.\n\nHelp Kolya to find out the maximum product of the elements of the array after applying only one operation.\n\nInput\n3\n-3 -3 2\n\nOutput\n-3 -3 2\n\"\"\"\n    n = int(stdin)\n    arr = [int(i) for i in stdin.split()]\n    arr = sorted(arr)\n    product = 1\n    max_product = 0\n    for i in range(n):\n        if arr[i] * product < max_product:\n            max_product = arr[i] * product\n        product *= arr[i]\n    return str(max_product)\n    \n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n, k = [int(x) for x in stdin.split(' ')]\n    k_smallest_divisor = -1\n    for i in range(1, n + 1):\n        if n % i == 0:\n            k_smallest_divisor = i\n            if k_smallest_divisor == k:\n                break\n    print(k_smallest_divisor)\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    if a < b:\n        return '-1'\n    divisors = set()\n    for i in range(1, a + 1):\n        if a % i == 0:\n            divisors.add(i)\n            if b in divisors:\n                return str(b)\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\nn, k = [int(x) for x in stdin.split(\" \")]\n\nfor i in range(1, n + 1):\n    if n % i == 0:\n        k -= 1\n        if k == 0:\n            return str(i)\n\nreturn \"-1\"\n\"\"\"\n\nn, k = [int(x) for x in input().split(\" \")]\n\n\ndef"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    arr = [i for i in range(1, n+1) if n % i == 0]\n    return str(sorted(arr)[k-1] if len(arr) >= k else -1)\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    for i in range(1, n + 1):\n        if n % i == 0:\n            k -= 1\n            if k == 0:\n                return str(i)\n\n    return '-1'"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\"\n"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport sys\nimport heapq\n\ndef"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\nn, k = [int(x) for x in stdin.split(' ')]\n\nsqrt = n**0.5"
    },
    {
        "number": 111,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    i = 1\n    while i * i <= n:\n        if n % i == 0:\n            k -= 1\n            if k == 0:\n                return str(i)\n        i += 1\n    return -1"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\nfrom typing import List, Union\n\n\ndef"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    from itertools import combinations_with_replacement\n    n = int(stdin.readline().strip())\n    cs = [list(map(int, stdin.readline().strip().split())) for _ in range(n)]\n\n    for c in combinations_with_replacement([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 5):\n        num = ''.join(map(str, c))\n        num_arr = [int(x) for x in num]\n        if sum(num_arr) == n and max(num_arr) - min(num_arr) == 4:\n            return num\n    return '0'\n\n\ndef"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    masha_numbers = [0] * n\n    for i in range(n):\n        masha_numbers[i] = stdin.readline().split()\n\n    return answer"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the largest number that can be built from n cubes.\"\"\"\n    num_cubes = int(stdin)\n    cubes = [list(map(int, line.split())) for line in stdin.split(\"\\n\")[:num_cubes]]\n    # zeros = [[0 for _ in range(num_cubes)] for _ in range(num_cubes)]\n    # for i, cube in enumerate(cubes):\n    #     for j, face in enumerate(cube):\n    #         if face == 0:\n    #             zeros[i][j] = 1\n    #             zeros[j][i] = 1\n    zeros = [list(map(int, line.split())) for line in stdin.split(\"\\n\")[:num_cubes]]\n    numbers = [0 for i in range(num_cubes)]\n    for number in range(1, num_cubes + 1):\n        for cube in cubes:\n            count = 0\n            for i, face in enumerate(cube):\n                count += face * zeros[i][i]\n            numbers[number - 1] += count\n        for cube in cubes:\n            count = 0\n            for i, face in enumerate(cube):\n                count += face * zeros[i][i + 1]\n            numbers[number - 1] += count\n    numbers = list(map(str, numbers))\n    return \"\".join(numbers).lstrip(\"0\") or \"0\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    maxx = 0\n    for i in range(n):\n        lst = [int(x) for x in stdin[i+1:].split()]\n        lst = sorted(lst)\n        s = \"\"\n        for j in lst:\n            s += str(j)\n        if int(s) > maxx:\n            maxx = int(s)\n    return maxx\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin\n"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport sys\nsys.stdin = open('input.txt', 'r')\ndef"
    },
    {
        "number": 112,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return 'Not Implemented'\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split(\" \")\n    n, k = int(n), int(k)\n    if k > len(str(n)) or k < 1:\n        return n\n    num = 1\n    while num % n!= 0:\n        num *= 10\n    return int(num / n) * n\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\n\ndef"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n, k = stdin.split()\n    n = int(n)\n    k = int(k)\n\n    # count the number of zeros\n    num_zeros = 0\n    for i in range(k):\n        if n % 10 == 0:\n            num_zeros += 1\n        n //= 10\n    \n    # return the answer\n    ans = n * pow(10, k-num_zeros)\n    return str(ans)\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n\n    # maximum number of digits for k-rounding\n    max_digits = int(n**(1/k))\n\n    # use the k-rounding to compute the next number\n    x = n * max_digits\n\n    # construct the number\n    while len(str(x)) % k!= 0:\n        x += 1\n\n    return x\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n\n    if k > 0:\n        print((1 << k) - 1)\n\n    else:\n        r = 1\n        while n > r:\n            r = ((r << 1) + 1) % n\n\n        print(r)\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"375 4\")\n    '30000'\n    >>> solution(\"10000 1\")\n    '10000'\n    >>> solution(\"38101 0\")\n    '38101'\n    >>> solution(\"123456789 8\")\n    '12345678900000000'\n    \"\"\"\n   ..."
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"375 4\")\n    30000\n    >>> solution(\"10001 0\")\n    10001\n    >>> solution(\"38101 0\")\n    38101\n    >>> solution(\"123456789 8\")\n    12345678900000000\n    \"\"\"\n    n, k = stdin.split()\n    n = int(n)\n    k = int(k)\n    return str(int(n * (10 ** k)))\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k == 0:\n        return str(n)\n    if k == 1:\n        return str(n) + \"0\"\n    return str(n * k ** 10 ** k)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 113,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split()\n    n, k = int(n), int(k)\n    count = 0\n    num = 1\n    while (num % n!= 0 or count < k):\n        num *= 10\n        count += 1\n\n    return str(num)"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return \"\"\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # note: 'in' is a built-in function of python\n    #'stdin' contains the input of the problem, parsed by `input()`\n    stdin = stdin.splitlines()\n    n, m = [int(x) for x in stdin[0].split(' ')]\n    A = [list(map(int, line.split(' '))) for line in stdin[1:]]\n    B = [ [0 for _ in range(m)] for _ in range(n) ]\n    \n    def is_valid(i, j):\n        return 0 <= i < n and 0 <= j < m\n    \n    def go_left(i, j):\n        for x in range(i, n):\n            if B[x][j] == 1:\n                return x\n        return n\n    \n    def go_down(i, j):\n        for y in range(j, m):\n            if B[i][y] == 1:\n                return y\n        return m\n    \n    def go_right(i, j):\n        for x in reversed(range(i, n)):\n            if B[x][j] == 1:\n                return x\n        return n\n    \n    def go_up(i, j):\n        for y in reversed(range(j, m)):\n            if B[i][y] == 1:\n                return y\n        return m\n    \n    def go_left_down(i, j):\n        x = go_left(i, j)\n        y = go_down(i, j)\n        return (x, y)\n    \n    def go_left_up(i, j):\n        x = go_left(i, j)\n        y = go_up(i, j)\n        return (x, y)\n    \n    def go_right_down(i, j):\n        x = go_right(i, j)\n        y = go_down(i, j)\n        return (x, y)\n    \n    def go_right_up(i, j):\n        x = go_right(i, j)\n        y = go_up(i, j)\n        return (x, y)\n    \n    def go_right_down_diagonal(i, j):\n        x = go_right(i, j)\n        y = go_down(i, j)\n        return (x, y)\n    \n    def go_right_up_diagonal(i, j):\n        x = go_right(i, j)\n        y = go_up(i, j)\n        return (x, y)\n    \n    def go_left_up_diagonal(i, j):\n        x = go_left(i, j)\n        y = go_up(i, j)\n        return (x, y)\n    \n    def go_left_down_diagonal(i, j):\n        x = go_left(i, j)\n        y = go_down(i, j)\n        return (x, y)\n    \n    for i in range(n):\n        for j in range(m):\n            if A[i][j] == 0:\n                B[i][j] = 0\n            else:\n                B[i][j] = 1\n    \n    def floodfill(i, j):\n        if not is_valid(i, j):\n            return\n        if B[i][j] == 1:\n            B[i][j] = 0\n            floodfill(i + 1, j)\n            floodfill(i - 1, j)\n            floodfill(i, j + 1)\n            floodfill(i, j - 1)\n            floodfill(*go_left_down(i, j))\n            floodfill(*go_left_up(i, j))\n            floodfill(*go_right_down(i, j))\n            floodfill(*go_right_up(i, j))\n            floodfill(*go_right_down_diagonal(i, j))\n            floodfill(*go_right_up_diagonal(i, j))\n            floodfill(*go_left_up_diagonal(i, j))\n            floodfill(*go_left_down_diagonal(i, j))\n    \n    # initialize count\n    count = 0\n    # loop\n    while True:\n        floodfill(0, 0)\n        count += 1\n        if count >= 2500:\n            break\n    \n    if not is_valid(0, 0):\n        return '-1'\n    else:\n        return str(count)\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    inputs = [input().split() for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if inputs[i][j] == '1':\n                inputs[i][j] = 1\n\n\n    return output"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 3\\n1 1 1\\n1 1 1\\n0 1 1\")\n    3\n    >>> solution(\"3 3\\n1 0 1\\n1 0 1\\n0 0 0\")\n    0\n    \"\"\"\n    n, m = map(int, stdin.split(\" \"))\n    matrix_a = [list(map(int, line.split(\" \"))) for line in stdin.split(\"\\n\")[1:]]\n    matrix_b = [[0] * m for _ in range(n)]\n    matrix_b = [list(map(int, line.split(\" \"))) for line in stdin.split(\"\\n\")[1:]]\n    return str(check_solution(matrix_a, matrix_b))\n\n\ndef"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('3 3\\n1 1 1\\n1 1 1\\n0 1 1\\n')\n    '3\\n1 1\\n1 2\\n2 2\\n'\n    >>> solution('3 3\\n0 0 0\\n0 0 0\\n0 0 0\\n')\n    '0'\n    >>> solution('3 2\\n0 0\\n0 0\\n0 0\\n')\n    '0'\n    \"\"\"\n    stdin = stdin.split('\\n')\n    n, m = map(int, stdin[0].split(' '))\n    A = [map(int, line.split(' ')) for line in stdin[1:]]\n    B = [[0 for _ in range(m)] for _ in range(n)]\n    ans = 0\n    while not A == B:\n        for x in range(n):\n            for y in range(m):\n                if A[x][y] == 1 and B[x][y] == 0:\n                    ans += 1\n                    B[x][y] = 1\n                    if x > 0:\n                        B[x - 1][y] = 1\n                    if x < n - 1:\n                        B[x + 1][y] = 1\n                    if y > 0:\n                        B[x][y - 1] = 1\n                    if y < m - 1:\n                        B[x][y + 1] = 1\n        A = B\n    return str(ans) if ans else '-1'\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(' ')]\n\n    A = []\n    B = []\n    for i in range(n):\n        A.append([int(x) for x in stdin.split(' ')[i * m:i * m + m]])\n\n    for i in range(n):\n        B.append([int(x) for x in stdin.split(' ')[i * m:i * m + m]])\n\n    pass\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def find_edit_ops(a: list, b: list) -> list:\n        if not a:\n            return [0, []]\n\n        i = 0\n        edit_ops = []\n        for j in range(len(b)):\n            if a[0] == b[j]:\n                i += 1\n                a.pop(0)\n                b.pop(j)\n            else:\n                if a[0] == 1 and b[j] == 1:\n                    edit_ops.append((1, i, j))\n                elif a[0] == 1 and b[j] == 0:\n                    edit_ops.append((2, i, j))\n                elif a[0] == 0 and b[j] == 1:\n                    edit_ops.append((3, i, j))\n                elif a[0] == 0 and b[j] == 0:\n                    edit_ops.append((4, i, j))\n                a.pop(0)\n                b.pop(j)\n                i = 0\n        if i!= len(a) or len(a)!= len(b):\n            if a[0] == 1 and b[0] == 1:\n                edit_ops.append((1, i, -1))\n            elif a[0] == 1 and b[0] == 0:\n                edit_ops.append((2, i, -1))\n            elif a[0] == 0 and b[0] == 1:\n                edit_ops.append((3, i, -1))\n            elif a[0] == 0 and b[0] == 0:\n                edit_ops.append((4, i, -1))\n\n        return edit_ops\n\n    n, m = [int(i) for i in stdin.split()]\n    a = [int(i) for i in stdin.splitlines()]\n    b = [0 for _ in range(m)]\n    b[-1] = a[-1]\n    b.append(a[-1])\n    b = b[:n + 1]\n    if n == 1:\n        if b[0]!= b[-1]:\n            print(-1)\n        else:\n            print(0)\n        return\n\n    edit_ops = find_edit_ops(a, b)\n    if not edit_ops:\n        print(-1)\n        return\n    print(len(edit_ops))\n    for x, y, z in edit_ops:\n        print(x, y)\n\n    return\n"
    },
    {
        "number": 114,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def check(stdin, res, n, m):\n        for line in stdin:\n            if line!= res:\n                return False\n        return True\n\n    def search(res, n, m):\n        for i in range(n):\n            for j in range(m):\n                if res[i][j] == 0:\n                    res[i][j] = 1\n                    if check(stdin, res, n, m):\n                        return i, j\n                    else:\n                        res[i][j] = 0\n        return -1\n\n    n, m = [int(x) for x in stdin.split()]\n    res = [[0 for x in range(m)] for x in range(n)]\n    search(res, n, m)\n\n\n-----Explanation-----\n\nThe matrix $A$ is equal to the matrix $B$ if and only if for each element $A_{i, j}$ there is a matrix $B_{i, j}$ equal to $1$.\n\nIt is impossible to make matrix $B$ equal to matrix $A$, since for each element $A_{i, j}$ there is no $B_{i, j}$ equal to $1$.\n\nThis is the reason why the first line in the output is equal to $-1$.\n\nIt is possible to make matrix $B$ equal to matrix $A$ iff for each element $A_{i, j}$ there is at least one matrix $B_{i, j}$ equal to $1$.\n\nIf for each element $A_{i, j}$ there is no matrix $B_{i, j}$ equal to $1$, then it is impossible to make these matrices equal.\n\nIf for each element $A_{i, j}$ there is at least one matrix $B_{i, j}$ equal to $1$, then we need to replace the element $A_{i, j}$ with $1$.\n\nWe have $n$ rows and $m$ columns, and $A$ and $B$ contain exactly $n$ rows and $m$ columns, therefore there are exactly $n$ rows and $m$ columns in $A$, and there are also exactly $n$ rows and $m$ columns in $B$.\n\nThus, for every element $A_{i, j}$ there should be exactly one matrix $B_{i, j}$ equal to $1$.\n\nIf there is no element in $B$ that is equal to $1$, then this is impossible to make the matrices equal, so the answer is $-1$.\n\nIf there is at least one element in $B$ that is equal to $1$, then we need to set the corresponding element $A_{i, j}$ to $1$.\n\nNote that it is possible to set only one element of $A$ equal to $1$, since for each element $A_{i, j}$ there is only one element in $B$ that is equal to $1$.\n\nTo set one element $A_{i, j}$ equal to $1$, we need to change the elements of $A$ and $B$ at the same time, so that $A$ and $B$ are equal.\n\nThus, the number of operations we need to do is equal to the number of elements in $B$ that are equal to $1$.\n\nIf there is no element in $B$ that is equal to $1$, then this is impossible to make the matrices equal, so the answer is $-1$.\n\nIf there is at least one element in $B$ that is equal to $1$, then we need to set the corresponding element $A_{i, j}$ to $1$.\n\nTo set one element $A_{i, j}$ equal to $1$, we need to change the elements of $A$ and $B$ at the same time, so that $A$ and $B$ are equal.\n\nThus, the number of operations we need to do is equal to the number of elements in $B$ that are equal to $1$.\n\nIf there is no element in $B$ that is equal to $1$, then this is impossible to make the matrices equal, so the answer is $-1$.\n\nIf there is at least one element in $B$ that is equal to $1$, then we need to set the corresponding element $A_{i, j}$ to $1$.\n\nTo set one element $A_{i, j}$ equal to $1$, we need to change the elements of $A$ and $B$ at the same time, so that $A$ and $B$ are equal.\n\nThus, the number of operations we need to do is equal to the number of elements in $B$ that are equal to $1$.\n\nSo, the number of operations we need to do is equal to the number of elements in $B$ that are equal to $1$.\n\n\n\n-----Test 1-----\n\nInput:\n3 3\n1 1 1\n1 1 1\n0 1 1\n\nOutput:\n3\n1 1\n1 2\n2 2\n\nExpected:\n3\n1 1\n1 2\n2 2\n\n-----Test 2-----\n\nInput:\n3 2\n0 0\n0 0\n0 0\n\nOutput:\n0\n\nExpected:\n0\n\n-----Test 3-----\n\nInput:\n3 2\n1 0 1\n1 0 1\n0 0 0\n\nOutput:\n-1\n\nExpected:\n0\n\n-----Test 4-----\n\nInput:\n3 3\n1 0 1\n1 1 1\n1 1 1\n\nOutput:\n-1\n\nExpected:\n-1\n\"\"\"\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, s, p = map(int, stdin.split())\n    return f\"{r/p:.9f} {s/p:.9f} {r/s:.9f}\"\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [float(x) for x in stdin.split()]\n    p = 0\n    if a == b:\n        p = c / (a + c)\n    elif b == c:\n        p = a / (a + b)\n    else:\n        p = (a / (a + b)) * (c / (a + c))\n    return f\"{p:.9f}\\n{1 - p:.9f}\\n{1 - p:.9f}\"\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    r, s, p = map(int, stdin.split(' '))\n    \n    def probability(r, s, p, l, m):\n        if r > l or r > m: return 1\n        if s > l or s > m: return 0\n        if p > l or p > m: return 0\n        if r == s and r == p: return 1\n        if r == s or r == p: return 1 / 2\n        if s == p: return 1 / 2\n        if r == p: return 1 / 3\n        if s == r: return 1 / 3\n        if p == r: return 1 / 3\n        \n        return 0\n    \n    probs = [probability(r, s, p, r, s), probability(r, s, p, r, p), probability(r, s, p, p, s)]\n    return''.join(map(str, probs))\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    r, s, p = map(int, stdin.split())\n    return [\n        1 - (r / (r + s + p)),\n        1 - (s / (r + s + p)),\n        1 - (p / (r + s + p))\n    ]\n\n\ndef"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return''.join(map(str, map(solve, stdin.split())))\n\n\ndef"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    r, s, p = [int(i) for i in stdin.split(\" \")]\n    return \" \".join(map(str, [r / (r + s + p), s / (r + s + p), p / (r + s + p)]))"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    r, s, p = map(int, stdin.split())\n    a = r / (r + s + p)\n    b = s / (r + s + p)\n    c = p / (r + s + p)\n    return str(a) + \" \" + str(b) + \" \" + str(c)"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    r, s, p = map(int, stdin.split())\n    return str(format(r/s, '.6f')).rstrip(\"0\").lstrip(\"0\") + \" \" + str(format(r/p, '.6f')).rstrip(\"0\").lstrip(\"0\") + \" \" + str(format(s/p, '.6f')).rstrip(\"0\").lstrip(\"0\")\n"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = list(map(int, stdin.split()))\n    return \" \".join(map(str, [sum([1 if x == y else 0 for x in range(1, 4) for y in range(1, 4)])/16 for i in range(3)]))"
    },
    {
        "number": 115,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    r, s, p = [int(i) for i in stdin.split(' ')]\n    return''.join(['{:.9f}'.format(1 - x / (r + s + p)) for x in (r, s, p)])\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l_1, r_1, l_2, r_2, k = [int(x) for x in stdin.split()]\n    return str(max(0, min(r_2, r_1) - max(l_2, l_1) + 1) - (k > 0))\n\n\"\"\"\n\n\"\"\"\nhttps://app.codility.com/demo/results/trainingRJU2QW-5AU/\n\ndef"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    l1, r1, l2, r2, k = [int(s) for s in stdin.split(' ')]\n    return str(max(0, min(r1, r2) - max(l1, l2) + 1 - k))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    l_1, r_1, l_2, r_2, k = [int(x) for x in stdin.split()]\n    return str(max(0, r_1 - l_1 + k - 1) + max(0, r_2 - l_2 + k - 1))\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    l_1, r_1, l_2, r_2, k = map(int, stdin.split(' '))\n    m1 = min(l_1, k) + max(r_1 - k, 0)\n    m2 = min(l_2, k) + max(r_2 - k, 0)\n    return str(max(0, m2 - m1))\n\nprint(solution(input()))\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    l_1, r_1, l_2, r_2, k = [int(x) for x in stdin.split()]\n    if k < r_1:\n        return (r_1-k) + (r_2-k) - 1\n    elif k < r_2:\n        return r_2-k\n    else:\n        return 0\n\nprint(solution('1 10 9 20 1'))"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\ndef"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"1 10 9 20 1\")\n    2\n    >>> solution(\"1 100 50 200 75\")\n    50\n    \"\"\"\n   ...\n    l1, r1, l2, r2, k = [int(x) for x in stdin.split()]\n    return max(l2 - k, 0) + max(r2 - l1, 0)\n"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def is_available(time_1, time_2):\n        return (time_1 <= time_2 <= time_1 + 24) or (time_1 <= time_2 + 24 <= time_1 + 24)\n\n    l, r = map(int, stdin.split())\n    k = int(stdin.split()[-1])\n    print(is_available(l, r) or is_available(l, k) or is_available(k, r))\n    return is_available(l, r) or is_available(l, k) or is_available(k, r)\n\ndef"
    },
    {
        "number": 116,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    l1, r1, l2, r2, k = [int(x) for x in stdin.split()]\n    res = max(0, r2 - max(l1, l2) - k) + max(0, min(r1, r2) - min(l1, l2) - k)\n    return res\n\n'''\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the maximum area the cow can reach.\n\n    Args:\n        stdin (str): input\n\n    Returns:\n        str: output\n    \"\"\"\n    (n, m) = [int(x) for x in stdin.strip().split()]\n    segments = [tuple(int(x) for x in stdin.strip().split(' ')) for _ in range(n)]\n    segments += [tuple(int(x) for x in stdin.strip().split(' ')) for _ in range(m)]\n    (x0, y0) = (0, 0)\n    (x1, y1) = tuple(float(\"inf\") for _ in range(2))\n    for (x2, y2, x3, y3) in segments:\n        if (x0, y0)!= (0, 0):\n            x0 = min(x0, x2)\n            y0 = min(y0, y2)\n        x1 = min(x1, x3)\n        y1 = min(y1, y3)\n    if x1 == float(\"inf\"):\n        return \"INF\"\n    return f\"{int(x1 * y1)}\".rstrip(\"0\").rstrip(\".\")\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    area = 0\n    lines = []\n    for _ in range(n):\n        lines.append(list(map(int, stdin.split(' '))))\n    for line in lines:\n        x, y, z = line\n        if y > z:\n            y, z = z, y\n        if z < 0:\n            area += (x * z)\n        else:\n            area += (x * y)\n    if area == 0:\n        return \"INF\"\n    return str(area)"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    pass\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    input: stdin is the input string\n    output: The output string\n    \"\"\"\n\n    return stdin\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the area of the region the cow can reach\"\"\"\n    pass\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the area that the cow can reach.\n\n    Args:\n        stdin (str): input in string format\n\n    Returns:\n        str: the area that the cow can reach\n    \"\"\"\n    stdin = stdin.split('\\n')\n    values = []\n    for i in range(1, len(stdin), 2):\n        values.append(list(map(int, stdin[i].split())))\n\n    vertices = values[:-1]\n    lines = values[-1]\n    d_max = 0\n    for i in range(len(lines)):\n        d = lines[i]\n        if d > d_max:\n            d_max = d\n    max_x, max_y = 0, 0\n    for i in range(len(vertices)):\n        x, y = vertices[i]\n        if x > max_x:\n            max_x = x\n        if y > max_y:\n            max_y = y\n    x_max, y_max = max_x, max_y\n    vertices = set()\n    for i in range(len(vertices)):\n        x, y = vertices[i]\n        if x == 0 and y == 0:\n            vertices.add((x, y))\n            continue\n        for j in range(len(lines)):\n            d = lines[j]\n            if d < 0:\n                continue\n            if (x, y) == (0, 0) or (x, y) == (0, y_max):\n                continue\n            if x < x_max and y < y_max:\n                if d > x_max - x:\n                    continue\n                if d > y_max - y:\n                    continue\n                vertices.add((x, y))\n                continue\n            if x < x_max and y >= y_max:\n                if d > x_max - x:\n                    continue\n                vertices.add((x, y))\n                continue\n            if x >= x_max and y < y_max:\n                if d > y_max - y:\n                    continue\n                vertices.add((x, y))\n                continue\n            if x >= x_max and y >= y_max:\n                if d > d_max:\n                    continue\n                vertices.add((x, y))\n                continue\n    # print(vertices)\n\n    def get_vertices(vertices: set, lines: list) -> set:\n        new_vertices = set()\n        for vertex in vertices:\n            for i in range(len(lines)):\n                line = lines[i]\n                x, y = vertex\n                d = line\n                if d < 0:\n                    continue\n                if x < x_max and y < y_max:\n                    if d > x_max - x:\n                        continue\n                    if d > y_max - y:\n                        continue\n                    new_vertices.add((x, y))\n                    continue\n                if x < x_max and y >= y_max:\n                    if d > x_max - x:\n                        continue\n                    new_vertices.add((x, y))\n                    continue\n                if x >= x_max and y < y_max:\n                    if d > y_max - y:\n                        continue\n                    new_vertices.add((x, y))\n                    continue\n                if x >= x_max and y >= y_max:\n                    if d > d_max:\n                        continue\n                    new_vertices.add((x, y))\n                    continue\n        return new_vertices\n\n    vertices = get_vertices(vertices, lines)\n    # print(vertices)\n\n    def get_area(vertices: set) -> int:\n        area = 0\n        for i in range(len(vertices)):\n            x_1, y_1 = vertices[i]\n            for j in range(len(vertices)):\n                x_2, y_2 = vertices[j]\n                area += (x_2 - x_1) * (y_2 + y_1)\n        return abs(area / 2)\n\n    area = get_area(vertices)\n    return str(area) if area!= float('inf') else 'INF'\n\n\ndef"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('5 6\\n1 2 0\\n0 1 1\\n0 2 2\\n-3 4 -1\\n-2 6 3\\n1 0 1\\n0 1 2\\n2 0 2\\n-1 -4 5\\n3 -2 4\\n1 2 4')\n    13\n    \"\"\"\n    n, m = map(int, stdin.split())\n    a = [[int(i) for i in line.split()] for line in stdin.split(\"\\n\") if line]\n    x, y = map(int, stdin.split())\n    x, y = x * 100, y * 100\n    return str(min(abs(x - a[i][0]) + abs(y - a[i][1]) for i in range(n))) if n > 0 else \"INF\"\n"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    reachable = set()\n    for _ in range(n):\n        x, y, f = map(int, stdin.split())\n        if f == 0:\n            reachable.add((x, y))\n\n    for _ in range(m):\n        x, y, f = map(int, stdin.split())\n        if f == 0:\n            reachable.add((x, y))\n\n    if n == 0:\n        if m == 0:\n            return \"INF\"\n        else:\n            return \"0\"\n\n    for x in range(-10 ** 9, 10 ** 9 + 1):\n        for y in range(-10 ** 9, 10 ** 9 + 1):\n            for x2, y2 in reachable:\n                if (x, y) == (x2, y2) or (x, y) == (x + x2, y + y2):\n                    break\n            else:\n                continue\n            break\n        else:\n            return str(x * x + y * y)"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Calculates the area of the region the cow can reach when it can move around as long as it does not cross the given segments\n\n    Args:\n        stdin (str): Input string to parse\n\n    Returns:\n        str: Solution string\n    \"\"\"\n    lines = stdin.split(\"\\n\")\n\n    n_south_lines = int(lines[0])\n    n_east_lines = int(lines[1])\n\n    south_lines = [tuple(map(int, line.split())) for line in lines[2: 2 + n_south_lines]]\n    east_lines = [tuple(map(int, line.split())) for line in lines[2 + n_south_lines:]]\n\n    solution = 0\n\n    for south_line in south_lines:\n        for east_line in east_lines:\n            points = list(map(lambda l: (l[0] + l[2], l[1] + l[3]), zip(south_line, east_line)))\n\n            if points == []:\n                solution += 1\n            else:\n                south_point, east_point = points[0]\n\n                if south_point == east_point:\n                    solution += abs(south_point)\n                else:\n                    # If the two lines cross each other, then there is a way of crossing them\n                    if south_point > east_point:\n                        solution += max(abs(south_point - east_point), 1)\n\n                    else:\n                        solution += max(abs(south_point - east_point), 1)\n\n    if solution == 0:\n        return \"INF\"\n\n    return solution"
    },
    {
        "number": 117,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"\"\"\n   ... 5 6\n   ... 1 2 0\n   ... 0 1 1\n   ... 0 2 2\n   ... -3 4 -1\n   ... -2 6 3\n   ... 1 0 1\n   ... 0 1 2\n   ... 2 0 2\n   ... -1 -4 5\n   ... 3 -2 4\n   ... 1 2 4\n   ... \"\"\")\n    13\n    \"\"\"\n    n, m = map(int, stdin.split())\n    s = set()\n    for i in range(n):\n        x, y, z = map(int, stdin.split()[i * 3 : i * 3 + 3])\n        s.add((x, y, z))\n\n    for j in range(m):\n        x, y, z = map(int, stdin.split()[j * 3 : j * 3 + 3])\n        s.add((x, y, z))\n\n    cows = {}\n\n    for (x, y, z) in s:\n        if (x, y) not in cows:\n            cows[(x, y)] = set()\n\n        if (x, z) not in cows:\n            cows[(x, z)] = set()\n\n        if (y, z) not in cows:\n            cows[(y, z)] = set()\n\n        if (y, x) not in cows:\n            cows[(y, x)] = set()\n\n        cows[(x, y)].add((x, z))\n        cows[(y, z)].add((x, z))\n        cows[(x, z)].add((x, y))\n        cows[(y, x)].add((x, y))\n\n    def loop(src: Tuple[int, int], dest: Tuple[int, int]) -> Iterator[int]:\n        queue = [src]\n        visited = {src}\n\n        while queue:\n            node = queue.pop(0)\n\n            for neighbour in cows[node]:\n                if neighbour not in visited:\n                    yield neighbour\n                    queue.append(neighbour)\n                    visited.add(neighbour)\n\n    A = set()\n    for x, y, z in s:\n        A.add((x, y))\n        A.add((x, z))\n        A.add((y, z))\n        A.add((y, x))\n\n    B = set(A)\n\n    for (x, y) in A:\n        B.update(loop((x, y), (0, 0)))\n\n    ans = 0\n\n    for (x, y, z) in s:\n        if (x, y) in B and (x, z) in B and (y, z) in B and (y, x) in B:\n            ans += 1\n\n    for (x, y, z) in s:\n        if (x, y) not in B:\n            ans = float(\"inf\")\n            break\n\n    return str(ans)\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    (time, interval, time2) = map(int, stdin.split(' '))\n    return 'YES' if (time2 - time) % interval == 0 or (time2 - time) % interval == interval - 1 else 'NO'\n\n\"\"\"\n\nfrom math import ceil, gcd\n\ndef"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t, s, x = map(int, stdin.split(' '))\n    if s <= 2 * x:\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    t, s, x = (int(i) for i in stdin.split())\n    if (t % s)!= 0:\n        return 'NO'\n    else:\n        return 'YES'\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t, s, x = map(int, stdin.split())\n    print('YES') if x >= t and (x-t) % s == 0 else print('NO')\n    \n    return \"YES\" if x >= t and (x-t) % s == 0 else \"NO\""
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t, s, x = list(map(int, stdin.split(\" \")))\n    if x < t or x >= t + s:\n        return \"NO\"\n    elif x % s == 0:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t, s, x = list(map(int, stdin.split(' ')))\n    if (x + s) % s!= 0:\n        return 'YES'\n    if t % s == 0 and t % s!= 0:\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    t, s, x = map(int, stdin.split())\n    print('YES' if x - s <= t < x or x - s + 1 <= t < x else 'NO')\n    return ''\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t, s, x = map(int, stdin.split())\n    if (x - s) % (2 * s) == 0:\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    t, s, x = (int(n) for n in stdin.split())\n    return 'YES' if x % s == t else 'NO'\n\"\"\"\n\nt, s, x = map(int, input().split())\n"
    },
    {
        "number": 118,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    t, s, x = map(int, stdin.split())\n    if x % s == 0:\n        return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    segments = stdin.split('\\n')\n    segments.pop()\n    segments = [[int(i) for i in segment.split(' ')] for segment in segments]\n    res = []\n    for i in range(len(segments)):\n        for j in range(i+1, len(segments)):\n            if segments[i][0] >= segments[j][0] and segments[i][1] <= segments[j][1]:\n                res.append(i+1)\n                res.append(j+1)\n                return''.join([str(i) for i in res])\n\n    return '-1 -1'\n\nsolution('5\\n1 10\\n2 9\\n3 9\\n2 3\\n2 9')"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    segments = int(stdin.readline())\n    l = []\n    r = []\n    for _ in range(segments):\n        l.append(list(map(int, stdin.readline().split())))\n    for _ in range(segments):\n        r.append(list(map(int, stdin.readline().split())))\n    l.sort()\n    r.sort()\n    i = 0\n    j = 0\n    while i < len(l) and j < len(r):\n        if l[i][0] <= r[j][0] and l[i][1] >= r[j][0] and l[i][0] <= r[j][1] and l[i][1] >= r[j][1]:\n            print(i+1, j+1)\n            return\n        if l[i][0] <= r[j][1] and l[i][1] >= r[j][1]:\n            print(i+1, j+1)\n            return\n        if l[i][0] >= r[j][0] and l[i][1] <= r[j][0]:\n            print(i+1, j+1)\n            return\n        if l[i][0] >= r[j][0] and l[i][1] <= r[j][1] and l[i][0] <= r[j][1]:\n            print(i+1, j+1)\n            return\n        if l[i][0] >= r[j][0] and l[i][1] <= r[j][1] and l[i][0] >= r[j][1]:\n            print(i+1, j+1)\n            return\n        i += 1\n        j += 1\n    print(-1, -1)\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    inputs = [list(map(int, stdin.readline().strip().split(\" \"))) for _ in range(n)]\n    inputs = sorted(inputs, key=lambda x: x[0])\n    visited = {}\n    result = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            l1, r1 = inputs[i][0], inputs[i][1]\n            l2, r2 = inputs[j][0], inputs[j][1]\n            if l1 >= l2 and r1 <= r2:\n                result.append((i, j))\n    if result:\n        print(*min(result))\n        print(*max(result))\n    else:\n        print(-1, -1)\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return indices i and j such that segment a[i] lies within segment a[j].\n\n    Args:\n        stdin (str): Input on stdin.\n\n    Returns:\n        str: Output on stdout.\n    \"\"\"\n    def point_in_range(r, l):\n        \"\"\"Return whether point lies within range l and r.\n\n        Args:\n            r (int): right range limit.\n            l (int): left range limit.\n\n        Returns:\n            bool: Whether point lies within range.\n        \"\"\"\n        return (r >= l)\n\n    def within_range(a, b):\n        \"\"\"Return whether segment a lies within segment b.\n\n        Args:\n            a (int): index of first segment.\n            b (int): index of second segment.\n\n        Returns:\n            bool: Whether segment a lies within segment b.\n        \"\"\"\n        return (a < b) and (a > 0) and (b < n) and (b > 0)\n\n    n = int(stdin.readline())\n    a = [tuple(map(int, line.split())) for line in stdin.readlines()]\n    sorted_a = sorted(a, key=lambda x: x[0])\n    i = 0\n    j = 1\n    res = -1, -1\n    while j < n:\n        if within_range(a[j][0], a[i][1]) and within_range(a[i][0], a[j][1]):\n            if (a[j][0] - a[i][1]) < (a[i][0] - a[j][1]):\n                res = j, i\n            elif (a[j][0] - a[i][1]) == (a[i][0] - a[j][1]):\n                res = j if (a[j][0] < a[i][0]) else i\n            i += 1\n            j += 1\n        elif (a[j][0] - a[i][1]) < (a[i][0] - a[j][1]):\n            res = j, i\n            i += 1\n            j += 1\n        elif (a[j][0] - a[i][1]) == (a[i][0] - a[j][1]):\n            res = j if (a[j][0] < a[i][0]) else i\n            i += 1\n            j += 1\n        else:\n            i += 1\n            j += 1\n\n    return''.join(map(str, res))\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = [list(map(int, stdin.split('\\n')[i].split(' '))) for i in range(n)]\n    output = -1\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i][0] <= arr[j][0] <= arr[i][1] or arr[i][0] <= arr[j][1] <= arr[i][1]:\n                output = i, j\n                break\n        if output!= -1:\n            break\n    if output == -1:\n        output = -1, -1\n    else:\n        output =''.join([str(i) for i in output])\n    return output\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    segments = stdin.split('\\n')\n    pairs = []\n    for i in range(len(segments) - 1):\n        pair = [int(x) for x in segments[i].split()]\n        pairs.append(pair)\n    pairs.sort()\n    for i in range(len(pairs) - 1):\n        for j in range(i + 1, len(pairs)):\n            if pairs[i][0] >= pairs[j][0] and pairs[i][1] <= pairs[j][1]:\n                return str(i + 1) +'' + str(j + 1)\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return '-1 -1'\n"
    },
    {
        "number": 119,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Parses input and prints output\n    :param stdin: The input given as a string\n    :return: The solution for the given input\n    \"\"\"\n    pass\n\n\ndef"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    count = {'A': 0, 'C': 0, 'G': 0, 'T': 0}\n    for ch in s:\n        if ch!= '?':\n            count[ch] += 1\n    while count['A'] < n / 4 or count['C'] < n / 4 or count['G'] < n / 4 or count['T'] < n / 4:\n        s = s.replace('?', 'A', 1)\n        s = s.replace('?', 'C', 1)\n        s = s.replace('?', 'G', 1)\n        s = s.replace('?', 'T', 1)\n        count['A'] = s.count('A')\n        count['C'] = s.count('C')\n        count['G'] = s.count('G')\n        count['T'] = s.count('T')\n    return s\n\nsolution('8\\nAG?C??CT')\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    genome = stdin[:]\n    seen = set()\n    while True:\n        if not seen:\n            break\n        seen.difference_update(genome)\n        genome = genome.replace(\"?\", \"\")\n    return genome if len(seen) == 0 else \"===\""
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace(\"?\", \"\").replace(\"?\", \"\").replace(\"?\", \"\").replace(\"?\", \"\")\n\n\ndef"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    DNA = stdin.replace('?', 'ACGT').replace('?', 'ACGT').replace('?', 'ACGT').replace('?', 'ACGT')\n    return DNA\n\"\"\"\n\nfrom collections import Counter\n\ndef"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    stdin = stdin.split('\\n')[1]\n    stdin = stdin.replace('?', 'A')\n    stdin = stdin.replace('?', 'C')\n    stdin = stdin.replace('?', 'G')\n    stdin = stdin.replace('?', 'T')\n    return stdin[0:n]\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\ndef"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    print('===' if len(set(stdin))!= 4 else stdin)\n    return stdin\n"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin\n    decode_string = ''\n    # count how many of each letter in the string\n    count = {}\n    for i in string:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n\n    # check if it is possible to decode the string\n    if count['?'] > 0:\n        return '==='\n\n    # if the number of 'A' is not the same as the number of 'C'\n    if count['A']!= count['C']:\n        # get the number of different letters\n        diff_letters = 0\n        for key in count.keys():\n            if key!= '?' and count[key]!= count['A']:\n                diff_letters += 1\n\n        # if there is only one different letter\n        if diff_letters == 1:\n            # replace one of the letters with '?'\n            for key in count.keys():\n                if key!= '?' and count[key]!= count['A']:\n                    decode_string += key\n                    count[key] -= 1\n                    count['?'] += 1\n                    break\n\n        # if there are two different letters\n        else:\n            # replace one of the letters with '?'\n            for key in count.keys():\n                if key!= '?' and count[key]!= count['A']:\n                    decode_string += key\n                    count[key] -= 1\n                    count['?'] += 1\n                    break\n            # replace one of the letters with 'A'\n            for key in count.keys():\n                if count[key]!= count['A']:\n                    decode_string += key\n                    count[key] -= 1\n                    count['A'] += 1\n                    break\n\n    # if there is only one 'A' in the string\n    else:\n        # if there are two different letters\n        if count['A']!= count['T']:\n            # replace one of the letters with '?'\n            for key in count.keys():\n                if count[key]!= count['A']:\n                    decode_string += key\n                    count[key] -= 1\n                    count['?'] += 1\n                    break\n            # replace one of the letters with 'T'\n            for key in count.keys():\n                if count[key]!= count['T']:\n                    decode_string += key\n                    count[key] -= 1\n                    count['T'] += 1\n                    break\n\n        # if there are three different letters\n        else:\n            # replace one of the letters with '?'\n            for key in count.keys():\n                if count[key]!= count['A']:\n                    decode_string += key\n                    count[key] -= 1\n                    count['?'] += 1\n                    break\n            # replace one of the letters with 'A'\n            for key in count.keys():\n                if count[key]!= count['A']:\n                    decode_string += key\n                    count[key] -= 1\n                    count['A'] += 1\n                    break\n            # replace one of the letters with 'T'\n            for key in count.keys():\n                if count[key]!= count['T']:\n                    decode_string += key\n                    count[key] -= 1\n                    count['T'] += 1\n                    break\n\n    return decode_string"
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"===\", \"\""
    },
    {
        "number": 120,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    string = stdin\n    string = string.replace(\"?\", \"A\")\n    string = string.replace(\"?\", \"C\")\n    string = string.replace(\"?\", \"G\")\n    string = string.replace(\"?\", \"T\")\n    if len(string) % 4 == 0:\n        print(string)\n    else:\n        print(\"===\")"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    field = [stdin[i:i + 4] for i in range(0, len(stdin), 4)]\n    return \"YES\" if field[0][0]!= '.' and field[0][3]!= '.' and field[3][0]!= '.' and field[3][3]!= '.' else \"NO\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin.split('\\n')\n    for i in range(len(x)):\n        x[i] = x[i].split(' ')\n        for j in range(len(x[i])):\n            x[i][j] = x[i][j][0]\n    # print(x)\n    return 'NO' if x[0][0] == x[1][1] == x[2][2] == 'x' \\\n        or x[0][2] == x[1][1] == x[2][0] == 'x' \\\n        or x[0][0] == x[0][1] == x[0][2] == 'x' \\\n        or x[1][0] == x[1][1] == x[1][2] == 'x' \\\n        or x[2][0] == x[2][1] == x[2][2] == 'x' \\\n        or x[0][0] == x[1][0] == x[2][0] == 'x' \\\n        or x[0][1] == x[1][1] == x[2][1] == 'x' \\\n        or x[0][2] == x[1][2] == x[2][2] == 'x' else 'YES'"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    field = [[0]*4 for _ in range(4)]\n    for x in range(len(stdin)):\n        for y in range(len(stdin[x])):\n            field[y][x] = stdin[x][y]\n    def check(field):\n        for i in range(4):\n            if field[i][i]==field[i][i+1] and field[i][i]==field[i+1][i] and field[i][i]!=0:\n                return True\n        return False\n    if check(field):\n        return 'YES'\n    for x in range(4):\n        for y in range(4):\n            if field[y][x]==0 and field[x][y]!=0 and field[x+1][y]!=0 and field[x][y+1]!=0:\n                field[y][x] = '.'\n                field[x][y] = '.'\n                field[x+1][y] = '.'\n                field[x][y+1] = '.'\n                if check(field):\n                    return 'YES'\n                field[y][x] = 'o'\n                field[x][y] = 'x'\n                field[x+1][y] = 'x'\n                field[x][y+1] = 'o'\n    return 'NO'\n\n'''\n\nimport numpy as np\n\n\ndef"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    field = [list(stdin[i:i + 4]) for i in range(0, len(stdin), 4)]\n    for i in range(3):\n        for j in range(3):\n            if field[i][j] == 'x' and field[i + 1][j] == 'x' and field[i + 2][j] == 'x' and field[i + 3][j] == 'x':\n                return 'YES'\n            if field[i][j] == 'o' and field[i + 1][j] == 'o' and field[i + 2][j] == 'o' and field[i + 3][j] == 'o':\n                return 'YES'\n            if field[i][j] == 'x' and field[i][j + 1] == 'x' and field[i][j + 2] == 'x' and field[i][j + 3] == 'x':\n                return 'YES'\n            if field[i][j] == 'o' and field[i][j + 1] == 'o' and field[i][j + 2] == 'o' and field[i][j + 3] == 'o':\n                return 'YES'\n    if field[0][0] == 'x' and field[1][1] == 'x' and field[2][2] == 'x' and field[3][3] == 'x':\n        return 'YES'\n    if field[0][0] == 'o' and field[1][1] == 'o' and field[2][2] == 'o' and field[3][3] == 'o':\n        return 'YES'\n    if field[0][3] == 'x' and field[1][2] == 'x' and field[2][1] == 'x' and field[3][0] == 'x':\n        return 'YES'\n    if field[0][3] == 'o' and field[1][2] == 'o' and field[2][1] == 'o' and field[3][0] == 'o':\n        return 'YES'\n    return 'NO'"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = 0\n    a = stdin.split('\\n')\n    for i in range(len(a)):\n        for j in range(len(a[i])):\n            if a[i][j] == 'x':\n                n += 1\n    if n % 2 == 1:\n        return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    first_line = stdin.split('\\n')[0]\n    second_line = stdin.split('\\n')[1]\n    third_line = stdin.split('\\n')[2]\n    fourth_line = stdin.split('\\n')[3]\n\n    count_x = first_line.count('x')\n    count_o = first_line.count('o')\n    if count_x!= count_o or (count_x == count_o and first_line.find('x')!= first_line.rfind('x')):\n        return 'NO'\n\n    count_x = second_line.count('x')\n    count_o = second_line.count('o')\n    if count_x!= count_o or (count_x == count_o and second_line.find('x')!= second_line.rfind('x')):\n        return 'NO'\n\n    count_x = third_line.count('x')\n    count_o = third_line.count('o')\n    if count_x!= count_o or (count_x == count_o and third_line.find('x')!= third_line.rfind('x')):\n        return 'NO'\n\n    count_x = fourth_line.count('x')\n    count_o = fourth_line.count('o')\n    if count_x!= count_o or (count_x == count_o and fourth_line.find('x')!= fourth_line.rfind('x')):\n        return 'NO'\n\n    return 'YES'\n"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Main function to read in input, process it and print output\n    \"\"\"\n\n    # Read in input\n    lines = stdin.split('\\n')\n\n    # Process input\n    x_positions = set()\n    for i in range(0, len(lines), 2):\n        line_x = lines[i].split()\n        line_o = lines[i+1].split()\n\n        for j in range(0, len(line_x)):\n            x_positions.add(line_x[j])\n\n        for j in range(0, len(line_o)):\n            x_positions.add(line_o[j])\n\n    # Compute output\n    if len(x_positions) < 9:\n        return 'NO'\n    elif len(x_positions) == 9:\n        return 'YES'\n    else:\n        return 'YES'"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    def is_win(matrix):\n        \"\"\"\n        A function to check if a matrix is a winning one\n        \"\"\"\n        for i in range(len(matrix)):\n            if matrix[i][0] == matrix[i][1] == matrix[i][2] == matrix[i][3] or matrix[0][i] == matrix[1][i] == matrix[2][i] == matrix[3][i] or matrix[0][0] == matrix[1][1] == matrix[2][2] == matrix[3][3] or matrix[0][3] == matrix[1][2] == matrix[2][1] == matrix[3][0]:\n                return True\n        return False\n    \n    # iterating over all possible winning matrices\n    for x in range(len(stdin)):\n        for y in range(len(stdin)):\n            # excluding the main diagonal\n            if x == y:\n                continue\n            # creating a matrix\n            matrix = []\n            for i in range(len(stdin)):\n                matrix.append([stdin[i][j] for j in range(len(stdin))])\n            # removing the current line\n            matrix.pop(x)\n            # checking if it's a winning matrix\n            if is_win(matrix):\n                return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 121,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"NO\"\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    s = sum(a)\n    s0 = 0\n    for i in range(n):\n        if a[i] <= s0:\n            s0 = s0 + a[i]\n        else:\n            break\n    if s0 == s:\n        return 'YES'\n    s0 = 0\n    for i in range(n - 1, -1, -1):\n        if a[i] <= s0:\n            s0 = s0 + a[i]\n        else:\n            break\n    if s0 == s:\n        return 'YES'\n    return 'NO'"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds if Vasya can divide the array after moving one element.\n    \"\"\"\n    return \"YES\" if sorted(stdin) == list(stdin) else \"NO\"\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Greed\"\"\"\n    n = int(stdin)\n    array = list(map(int, stdin.split()))\n    array.sort()\n    if array[n - 1] % 2 == 1:\n        print(\"NO\")\n        return\n    \n    total = 0\n    i = 1\n    j = n - 1\n    while total < array[j]:\n        total += array[j - i]\n        i += 1\n    if total == array[j]:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n    return"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    num_in = int(stdin)\n    \n    in_arr = list(map(int, stdin.split(' ')))\n    lst = []\n    for i in range(num_in):\n        lst.append(in_arr[i])\n\n    if len(lst) == 1:\n        return 'YES'\n\n    elif len(lst) == 2:\n        if in_arr[0] == in_arr[1]:\n            return 'YES'\n        else:\n            return 'NO'\n\n    elif len(lst) == 3:\n        if lst[1] == lst[0] + lst[2] or lst[2] == lst[0] + lst[1]:\n            return 'YES'\n        else:\n            return 'NO'\n\n    elif len(lst) == 4:\n        if in_arr[0] == in_arr[1]:\n            return 'NO'\n        if in_arr[0] == in_arr[2] + in_arr[3]:\n            return 'YES'\n        elif in_arr[1] == in_arr[2] + in_arr[3]:\n            return 'YES'\n        elif in_arr[2] == in_arr[3] + in_arr[4]:\n            return 'YES'\n        elif in_arr[3] == in_arr[4] + in_arr[0]:\n            return 'YES'\n        else:\n            return 'NO'\n\n    elif len(lst) == 5:\n        if lst[1] == lst[0] or lst[3] == lst[2] + lst[4]:\n            return 'YES'\n        else:\n            return 'NO'\n\n    elif len(lst) == 6:\n        if lst[0] == lst[1]:\n            return 'NO'\n        elif lst[0] == lst[2] + lst[3]:\n            return 'YES'\n        elif lst[1] == lst[2] + lst[3]:\n            return 'YES'\n        elif lst[1] == lst[3] + lst[4]:\n            return 'YES'\n        elif lst[2] == lst[3] + lst[4]:\n            return 'YES'\n        elif lst[3] == lst[4] + lst[5]:\n            return 'YES'\n        elif lst[4] == lst[5] + lst[0]:\n            return 'YES'\n        else:\n            return 'NO'\n    \n    elif len(lst) == 7:\n        if lst[0] == lst[1]:\n            return 'NO'\n        elif lst[0] == lst[2] + lst[3]:\n            return 'YES'\n        elif lst[0] == lst[3] + lst[4]:\n            return 'YES'\n        elif lst[0] == lst[4] + lst[5]:\n            return 'YES'\n        elif lst[0] == lst[5] + lst[6]:\n            return 'YES'\n        elif lst[1] == lst[2] + lst[3]:\n            return 'YES'\n        elif lst[1] == lst[3] + lst[4]:\n            return 'YES'\n        elif lst[1] == lst[4] + lst[5]:\n            return 'YES'\n        elif lst[1] == lst[5] + lst[6]:\n            return 'YES'\n        elif lst[2] == lst[3] + lst[4]:\n            return 'YES'\n        elif lst[2] == lst[4] + lst[5]:\n            return 'YES'\n        elif lst[2] == lst[5] + lst[6]:\n            return 'YES'\n        elif lst[3] == lst[4] + lst[5]:\n            return 'YES'\n        elif lst[3] == lst[5] + lst[6]:\n            return 'YES'\n        elif lst[4] == lst[5] + lst[6]:\n            return 'YES'\n        else:\n            return 'NO'\n    \n    elif len(lst) == 8:\n        if lst[0] == lst[1]:\n            return 'NO'\n        elif lst[0] == lst[2] + lst[3]:\n            return 'YES'\n        elif lst[0] == lst[3] + lst[4]:\n            return 'YES'\n        elif lst[0] == lst[4] + lst[5]:\n            return 'YES'\n        elif lst[0] == lst[5] + lst[6]:\n            return 'YES'\n        elif lst[0] == lst[6] + lst[7]:\n            return 'YES'\n        elif lst[1] == lst[2] + lst[3]:\n            return 'YES'\n        elif lst[1] == lst[3] + lst[4]:\n            return 'YES'\n        elif lst[1] == lst[4] + lst[5]:\n            return 'YES'\n        elif lst[1] == lst[5] + lst[6]:\n            return 'YES'\n        elif lst[1] == lst[6] + lst[7]:\n            return 'YES'\n        elif lst[2] == lst[3] + lst[4]:\n            return 'YES'\n        elif lst[2] == lst[4] + lst[5]:\n            return 'YES'\n        elif lst[2] == lst[5] + lst[6]:\n            return 'YES'\n        elif lst[2] == lst[6] + lst[7]:\n            return 'YES'\n        elif lst[3] == lst[4] + lst[5]:\n            return 'YES'\n        elif lst[3] == lst[5] + lst[6]:\n            return 'YES'\n        elif lst[3] == lst[6] + lst[7]:\n            return 'YES'\n        elif lst[4] == lst[5] + lst[6]:\n            return 'YES'\n        elif lst[4] == lst[6] + lst[7]:\n            return 'YES'\n        elif lst[5] == lst[6] + lst[7]:\n            return 'YES'\n        else:\n            return 'NO'\n    \n    elif len(lst) == 9:\n        if lst[0] == lst[1]:\n            return 'NO'\n        elif lst[0] == lst[2] + lst[3]:\n            return 'YES'\n        elif lst[0] == lst["
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\nreturn \"YES\" if (stdin.replace(\" \", \"\").split(\" \") == [\"0\"] * len(stdin.split(\" \"))) else \"NO\"\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    numbers = list(map(int, stdin.split()))\n\n    sum_first_part = sum(numbers[:n // 2])\n    sum_second_part = sum(numbers[n // 2:])\n\n    if sum_first_part == sum_second_part:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    a = [int(s) for s in stdin.split('\\n')[0].split(' ')]\n    a.sort()\n    delta = [0, 0, 0]\n    for i in range(N):\n        delta[a[i] % 3] += 1\n    if delta[0]!= 0 and delta[0] + delta[1] == N:\n        print('YES')\n    else:\n        print('NO')\n    return ''\n"
    },
    {
        "number": 122,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return \"\"\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    a, b = [int(s) for s in stdin.split()]\n    cnt = [0 for _ in range(b)]\n    d = dict()\n    for i in range(a):\n        d[stdin[i]] = d.get(stdin[i], 0) + 1\n    for i in range(b):\n        if cnt[i]!= 0:\n            continue\n        if b - i < d.get(i, 0):\n            continue\n        cnt[i] = 1\n    if cnt == [1] * b:\n        return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if not Solution.increasing_seq(Solution, stdin) else 'No'\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    numbers = [int(x) for x in stdin.split(' ')]\n    if k == 0:\n        return 'Yes'\n    # Replace zeros with the candidates\n    zeros = [numbers[i] for i in range(n) if numbers[i] == 0]\n    candidates = [x for x in range(1, n) if x not in zeros]\n    if len(candidates) < k:\n        return 'No'\n    zeros += candidates[:k]\n    # Try to replace each zero with a candidate, and check if it's not increasing\n    for zero in zeros:\n        new_numbers = numbers.copy()\n        new_numbers[numbers.index(zero)] = candidates[k]\n        if new_numbers == sorted(new_numbers):\n            return 'No'\n    return 'Yes'"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(\" \")]\n    a = [int(x) for x in stdin.split(\" \")]\n    b = [int(x) for x in stdin.split(\" \")]\n    while len(a) > 0 and len(b) > 0:\n        if a[0] == 0:\n            a.pop(0)\n            b.pop(0)\n        else:\n            break\n    a = a[::-1]\n    b = b[::-1]\n    for i in range(len(a)):\n        for j in range(len(b)):\n            if a[i] == 0 and b[j] not in a and b[j] not in b[:j]:\n                a[i] = b[j]\n                break\n    if a[0] > 0:\n        return \"No\"\n    return \"Yes\"\nprint(solution(input()))\n\n\ndef"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k, g = [int(x) for x in stdin.split()]\n    \n    if len(set(a)) < len(b):\n        return \"No\"\n    elif set(a).issubset(set(b)):\n        return \"No\"\n    elif len(b) < k:\n        return \"No\"\n    elif k < g:\n        return \"No\"\n    else:\n        return \"Yes\"\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    lost, candidates = stdin.split('\\n')[0].split(), stdin.split('\\n')[1].split()\n    lost = [int(x) for x in lost if int(x)!= 0]\n    candidates = [int(x) for x in candidates if int(x)!= 0]\n    solution = []\n    for i in range(len(lost)):\n        if lost[i] in candidates:\n            candidates.remove(lost[i])\n            solution.append(lost[i])\n        else:\n            solution.append(candidates[0])\n            candidates.pop(0)\n    if len(solution)!= n:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a_len = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().strip().split(' ')]\n    b_len = int(stdin.readline())\n    b = [int(x) for x in stdin.readline().strip().split(' ')]\n    \n    count = 0\n    \n    for i in a:\n        if i in b:\n            count+=1\n            \n    if count > len(a) - len(b):\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    c = [1 for i in range(n)]\n    for i in range(k):\n        c[a[i]-1] = 0\n        c[b[i]-1] = 0\n    for i in range(n):\n        if c[i] == 1:\n            print(\"No\")\n            return\n    print(\"Yes\")\n    return\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split(\" \")]\n    a = [int(i) for i in stdin.split(\" \")]\n    b = [int(i) for i in stdin.split(\" \")]\n    counts = [0] * k\n    for i in range(n):\n        counts[a[i]] += 1\n    for i in range(k):\n        if counts[i] > 1:\n            return \"Yes\"\n    # b = sorted(b)\n    # for i in range(n - 1):\n    #     if b[i] >= b[i + 1]:\n    #         return \"No\"\n    # return \"Yes\"\n    a.sort()\n    b.sort()\n    for i in range(n - 1):\n        if a[i] >= a[i + 1]:\n            return \"No\"\n    return \"Yes\"\n\n\nsolution(\"4 1\\n8 94 0 4\\n89\")\n"
    },
    {
        "number": 123,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    a = list(map(int, stdin.split(' ')))\n    b = list(map(int, stdin.split(' ')))\n    if n - k!= 0:\n        return 'No'\n    for i in range(len(a)):\n        if a[i] == 0:\n            a[i] = b[i]\n    print(a)\n    for i in range(len(a) - 1):\n        if a[i] == a[i + 1]:\n            return 'No'\n    return 'Yes'"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('1 6 2\\n4 3 3\\n')\n    'YES'\n    >>> solution('5 1 1\\n4 3 2\\n')\n    'NO'\n    \"\"\"\n    a, b, c = [int(x) for x in stdin.split('\\n')]\n    g = min(a // 2, b // 2, c)\n    p = min(a - g * 2, b // 2, c)\n    b = min(b - p * 2, c)\n    print(\"YES\" if a - 2 * g >= 0 and b >= 0 and c >= 0 else \"NO\")\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    green, purple, black = [int(i) for i in stdin.split()]\n    if green % 4!= 0 or purple % 4!= 0 or black % 4!= 0:\n        return \"NO\"\n    g, p, b = green // 4, purple // 4, black // 4\n    return \"YES\" if b >= g and p >= g and g >= b else \"NO\"\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = [int(s) for s in stdin.split()]\n    a, b, c = [int(s) for s in stdin.split()]\n    if x+y+z < a+b+c:\n        return 'NO'\n    if x + y + z == a + b + c:\n        return 'YES'\n    return 'NO'\n\n\"\"\"\n\nimport sys\nimport math\n\n\ndef"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if stdin == \"3 6 2\" else \"NO\"\n\"\"\"\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(int, stdin.split(' '))\n    a, b, c = map(int, stdin.split(' '))\n    return 'YES' if x+y+z>=a+b+c+1 and x+y+z<=a+b+c*2 and x+y>=a+b and x+y>=x+z and x+z>=y+c and x+y>=a+c and x+z>=b+y and x>=a and x>=b and y>=b and y>=c and z>=c and z>=a else 'NO'\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(s) for s in stdin.split()]\n    g = b // a\n    p = c // b\n    if a < c:\n        return 'NO'\n    if p < g:\n        return 'NO'\n    if p > g:\n        if (c - b) % (p - g)!= 0:\n            return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z, a, b, c = (int(n) for n in stdin.split(' '))\n    print(y // x + (x - y % x) + (x // z) + (z - (x % z)) + (x // a) + (a - (x % a)) + (x // b) + (b - (x % b)) + (y // c) + (c - (y % c)))\n\nprint(solution('1 6 2\\n4 3 3')) # == 'YES'\n\nprint(solution('5 1 1\\n4 3 2')) # == 'NO'\n\nprint(solution('1 1 1\\n4 3 2')) # == 'NO'\n\nprint(solution('1 6 2\\n4 3 3\\n4 3 2')) # == 'YES'\n\n\n\"\"\"\n"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z, a, b, c = [int(i) for i in stdin.split('\\n')[0].split(' ')]\n    a_grapes = [i for i in range(1, a + 1)]\n    b_grapes = [i for i in range(1, b + 1)]\n    c_grapes = [i for i in range(1, c + 1)]\n    result = 'YES'\n    count_grapes = [0, 0, 0]\n    for i in range(0, x):\n        count_grapes[0] += 1\n        count_grapes[1] += 1\n        count_grapes[2] += 1\n    for i in range(0, y):\n        count_grapes[0] -= 1\n        count_grapes[1] -= 1\n        count_grapes[2] += 1\n    for i in range(0, z):\n        count_grapes[0] -= 1\n        count_grapes[1] += 1\n        count_grapes[2] += 1\n    for i in range(0, x):\n        if count_grapes[0] == 0:\n            break\n        count_grapes[0] -= 1\n        count_grapes[1] += 1\n        count_grapes[2] += 1\n    for i in range(0, y):\n        if count_grapes[1] == 0:\n            break\n        count_grapes[0] += 1\n        count_grapes[1] -= 1\n        count_grapes[2] += 1\n    for i in range(0, z):\n        if count_grapes[2] == 0:\n            break\n        count_grapes[0] += 1\n        count_grapes[1] += 1\n        count_grapes[2] -= 1\n    for i in range(0, x):\n        if count_grapes[0] == 0:\n            break\n        count_grapes[0] -= 1\n        count_grapes[1] -= 1\n        count_grapes[2] -= 1\n    for i in range(0, y):\n        if count_grapes[1] == 0:\n            break\n        count_grapes[0] += 1\n        count_grapes[1] += 1\n        count_grapes[2] -= 1\n    for i in range(0, z):\n        if count_grapes[2] == 0:\n            break\n        count_grapes[0] += 1\n        count_grapes[1] -= 1\n        count_grapes[2] -= 1\n    for i in range(0, x):\n        if count_grapes[0] == 0:\n            break\n        count_grapes[0] -= 1\n        count_grapes[1] += 1\n        count_grapes[2] -= 1\n    for i in range(0, y):\n        if count_grapes[1] == 0:\n            break\n        count_grapes[0] += 1\n        count_grapes[1] -= 1\n        count_grapes[2] -= 1\n    for i in range(0, z):\n        if count_grapes[2] == 0:\n            break\n        count_grapes[0] += 1\n        count_grapes[1] -= 1\n        count_grapes[2] -= 1\n    if sum(count_grapes) < a:\n        result = 'NO'\n    return result\n\n\ndef"
    },
    {
        "number": 124,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = [int(e) for e in stdin.split(' ')]\n    a, b, c = [int(e) for e in stdin.split(' ')]\n    if x + y + z == a + b + c and x >= 0 and y >= 0 and z >= 0 and a >= 0 and b >= 0 and c >= 0:\n        return 'YES' if x + y + z - a <= z and y + z - b <= z and x + z - c <= z and a + b + c == x + y + z else 'NO'\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nprint(solution(\"1 1 1 1\"))\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    parts = []\n    for line in stdin.splitlines():\n        parts.append(list(map(int, line.split())))\n    parts = [list(zip(*parts))]\n    for row in parts[0]:\n        for n in range(4):\n            print(row[n], row[n+4], row[n+8])"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [list(map(int, line.split())) for line in stdin.split('\\n')]\n    return 'YES' if [max(a), max(b), max(c), max(d)] == [1, 1, 1, 1] else 'NO'\n    # return 'YES' if [x.count(1) for x in (a, b, c, d)] == [3, 3, 3, 3] else 'NO'\n\n\n\ndef"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    roads: List[List[int]] = []\n    for road in stdin.split('\\n'):\n        road: List[int] = [int(x) for x in road.split()]\n        roads.append(road)\n\n    accidents = []\n    for r1, r2, r3, r4 in permutations(roads, 4):\n        accident = False\n        if all([r1[0], r1[1], r1[2]]) == [1, 1, 1]:\n            if r2[0] == r3[0] == r4[0] == 1:\n                accident = True\n        elif all([r1[1], r1[2], r1[3]]) == [1, 1, 1]:\n            if r2[1] == r3[1] == r4[1] == 1:\n                accident = True\n        elif all([r1[2], r1[3], r1[0]]) == [1, 1, 1]:\n            if r2[2] == r3[2] == r4[2] == 1:\n                accident = True\n        elif all([r1[3], r1[0], r1[1]]) == [1, 1, 1]:\n            if r2[3] == r3[3] == r4[3] == 1:\n                accident = True\n        else:\n            accident = r2[0] == r3[0] == r4[0] == 1\n            if not accident:\n                accident = r2[1] == r3[1] == r4[1] == 1\n            if not accident:\n                accident = r2[2] == r3[2] == r4[2] == 1\n            if not accident:\n                accident = r2[3] == r3[3] == r4[3] == 1\n\n        accidents.append(accident)\n\n    return 'YES' if True in accidents else 'NO'\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Main function to read input and print output\n\n    Args:\n        stdin (str): Input to read\n\n    Returns:\n        str: Output to print\n    \"\"\"\n    \n    # Initialize variables\n    answer = []\n    road_part = []\n\n    # Get input\n    for line in stdin:\n        road_part.append(list(map(int, line.split())))\n\n    # Get answer\n    for line in road_part:\n        if any(i[0] == 1 for i in line) and any(i[1] == 1 for i in line):\n            answer.append(\"NO\")\n        else:\n            answer.append(\"YES\")\n\n    # Return answer\n    return \"\\n\".join(answer)\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    :type stdin: str\n    :rtype: str\n    \"\"\"\n    for i in range(4):\n        a, b, c, d = map(int, stdin.split('\\n')[i].split())\n        if (a+b+c+d) % 2:\n            return 'YES'\n    return 'NO'\n    \"\"\"\n    stdin = stdin.split('\\n\\n')\n    a, b, c, d = (0, 0, 0, 0)\n    for i in range(4):\n        a, b, c, d = map(int, stdin[0].split('\\n')[i].split())\n    if (a+b+c+d) % 2:\n        return 'YES'\n    for i in range(4):\n        a, b, c, d = map(int, stdin[1].split('\\n')[i].split())\n    if (a+b+c+d) % 2:\n        return 'YES'\n    return 'NO'\n    \"\"\"\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    roads: List[Tuple[int, int, int, int]] = []\n    for line in stdin.splitlines():\n        roads.append(tuple(map(int, line.split())))\n\n    is_possible = True\n    for i in range(0, len(roads), 2):\n        for j in range(i + 1, len(roads)):\n            l, s, r, p = roads[i]\n            _, _, _, p2 = roads[j]\n\n            if l == s == r == 0 and p!= p2:\n                is_possible = False\n                break\n\n    return \"YES\" if is_possible else \"NO\"\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 125,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    L = stdin.split(\"\\n\")\n    l = [[0 for x in range(4)] for y in range(4)]\n    for i in range(4):\n        l[i] = [int(x) for x in L[i].split(\" \")]\n    \n    if solution_aux(l, 0, [0]*4, [0]*4):\n        return \"YES\"\n    else:\n        return \"NO\"\ndef"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    '''\n    The first line contains the only integer n (1 \u2264 n \u2264 9) \u2014 the number of digits in the phone number that Mike put in.\n    The second line contains the string consisting of n digits (characters from '0' to '9') representing the number that Mike put in.\n    '''\n    # write your code in Python 3.6\n    if len(stdin)!= 3:\n        return 'NO'\n    digits = set(stdin)\n    num = list(stdin)\n    num = [int(x) for x in num]\n    num.sort()\n    if num[0] == 0:\n        return 'NO'\n    for i in range(1, len(num)):\n        if num[i]!= num[i-1] + 1:\n            return 'NO'\n    return 'YES'\n\nprint(solution('911'))\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n  return 'YES' if stdin[1] in solution(stdin[0]) else 'NO'\n\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    # pass\n    pass\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if stdin == \"123456789\" else \"NO\"\n"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\nimport sys\nimport re\n\n\ndef"
    },
    {
        "number": 126,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if len(stdin) == n and stdin.count(stdin[0]) == n and stdin.count(stdin[1]) == n and stdin[0] * 3 == stdin else \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # put your python code here\n    #\n    return stdin\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def solve(A, B):\n        ans = 0\n        for i in range(A, B + 1):\n            ans += i * 2\n        return ans\n\n    A, B = [int(x) for x in stdin.split(' ')]\n    return solve(A, B)\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def max_sale(stdin: str) -> str:\n        days = {int(day) for day in stdin.split(\"\\n\")}\n        res, max_sale_day = 0, 0\n        for day in sorted(days):\n            res += day * 2\n            if day > max_sale_day:\n                max_sale_day = day\n        return res + max_sale_day * 2\n\n    return max_sale(stdin)\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    pass"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the maximum number of products to sell from a shop, given the\n    number of days to make a sell-out, the number of products on each day,\n    and the number of clients.\n\n    \"\"\"\n    days = int(stdin.readline())\n    products = [int(line) for line in stdin]\n    # We use the first day to make a sell-out.\n    sell_out = products[0]\n    for day, product, clients in zip(range(1, days), products, range(1, days)):\n        sell_out += products[day]\n        sell_out -= products[day] * (clients // 2)\n    print(sell_out)\n"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the maximal number of products that shop can sell.\n    '''\n    stdin = stdin.splitlines()\n    n, f = int(stdin[0].split()[0]), int(stdin[0].split()[1])\n\n    products = []\n\n    for line in stdin[1:]:\n        products.append(int(line.split()[0]))\n        products.append(int(line.split()[1]))\n    products = sorted(products)\n\n    prev_days = 0\n    products_left = []\n    for p in products:\n        products_left.append(p - prev_days)\n        prev_days = p\n\n    products_left.sort()\n    products_left = products_left[::-1]\n    print(products_left)\n\n    max_products = 0\n    cur_products = 0\n    for day in range(n):\n        cur_products += products_left.pop()\n        if day % 2 == 0:\n            cur_products *= 2\n        if cur_products > max_products:\n            max_products = cur_products\n    return max_products\n\n\ndef"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return 'Solution for the first line of input'\n\n\ndef"
    },
    {
        "number": 127,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return ''\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    cows = sorted([int(input()) for i in range(n)])\n    swaps = [cows[i + 1] - cows[i] for i in range(n - 1)]\n    ans = 0\n    for i in swaps:\n        ans += i if i <= k else k\n    return ans\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    cow_seq = []\n    cow_num = 0\n    max_messiness = 0\n    for i in range(n):\n        cow_num += int(stdin.split()[0])\n        cow_seq.append(cow_num)\n        max_messiness += (cow_num - 1)\n    for i in range(k):\n        for j in range(i + 1, k):\n            messiness = 0\n            for k in range(len(cow_seq)):\n                if cow_seq[k]!= cow_seq[k - 1]:\n                    messiness += 1\n            if messiness > max_messiness:\n                max_messiness = messiness\n    return max_messiness"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    # Your code goes here\n    return None\n\ndef"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    n, k = map(int, stdin.split())\n    l = list(map(int, stdin.split()))\n    c = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if l[i] > l[j]:\n                c += 1\n    return c\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    ans = 0\n    N, K = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    P = [0] * N\n    for i in range(N):\n        P[A[i] - 1] = i + 1\n    \n    for i in range(N - 1):\n        for j in range(i + 1, N):\n            if P[i] > P[j]:\n                ans = max(ans, (j - i) * 2)\n    \n    return ans\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    https://app.codility.com/demo/results/trainingUZRQSY-62H/\n    \"\"\"\n    # my code\n    # num_cows, num_minutes = map(int, stdin.split())\n    # num_cows, num_minutes = stdin.split()\n    # num_cows, num_minutes = int(stdin.split()[0]), int(stdin.split()[1])\n    num_cows, num_minutes = map(int, stdin.split())\n\n    cows = [i for i in range(1, num_cows + 1)]\n\n    for minute in range(num_minutes):\n        # if minute % 2 == 0:\n        #     continue\n        # else:\n        #     first_cow = cows.pop(0)\n        #     cows.append(first_cow)\n\n        # cows.insert(0, cows.pop(-1))\n\n        # for i in range(len(cows) - 1):\n        #     cows[i], cows[i + 1] = cows[i + 1], cows[i]\n\n        first_cow = cows.pop(0)\n        cows.append(first_cow)\n\n        for i in range(len(cows) - 1):\n            cows[i], cows[i + 1] = cows[i + 1], cows[i]\n\n    return str(len(cows) - 1)"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    pass\n\"\"\"\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n\ndef"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    arr = [int(x) for x in stdin.split()]\n    #print(arr)\n\n    nums = [0] * n\n    for i in range(n):\n        nums[i] = i\n    \n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                nums[i] += 1\n                nums[j] += 1\n    print(nums)\n\nprint(solution(\"5 2\"))\nprint(solution(\"1 10\"))\n"
    },
    {
        "number": 128,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    #\n    # n, k = list(map(int, stdin.split(\" \")))\n    #\n    #\n    #\n    # return str(result)\n\ndef"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return''.join(map(str, (n for n in range(1, 10))))"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k, l = [int(x) for x in stdin.split()]\n    cnt = collections.Counter(list(range(1, n + 1)))\n    cnt = {k: v for k, v in cnt.items() if k <= k}\n    if len(cnt) < k:\n        return \"-1\"\n    for _ in range(m):\n        x, y = [int(x) for x in stdin.split()]\n        x = x - 1\n        cnt[x] -= 1\n        if cnt[x] == 0:\n            cnt.pop(x)\n        if y not in cnt or cnt[y] < l:\n            return \"-1\"\n    return len(cnt)\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\nN, M, K, L = (int(i) for i in stdin.split())\n\nprint(sum([K // M] + [0] * (N - 1))) if K % M <= L else print(-1)\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n,m,k,l = map(int, stdin.split(' '))\n    if m<k:\n        return \"-1\"\n    else:\n        return k//m if k%m==0 else (k//m)+1"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k, l = (int(x) for x in stdin.split())\n    coins = sorted(set(int(x) for x in stdin.split()))\n    if k < len(coins):\n        return str(k)\n    if n < len(coins) * m:\n        return str(-1)\n    if l < m:\n        return str(-1)\n    result = 0\n    for i, j in enumerate(coins[:-1]):\n        if i + 1 <= m:\n            if j < l:\n                result += 1\n            else:\n                result += j\n    return str(result)\n\n\n\"\"\"\n\ndef"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k, l = [int(s) for s in stdin.split('\\n')]\n    if (k < m * n) or (k > m * n + l):\n        return \"-1\"\n    else:\n        return n // m\n\"\"\"\n\n\nimport math\nimport sys\n\ndef"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M, K, L = [int(x) for x in stdin.split(' ')]\n    if M * K > N:\n        print(-1)\n        return\n\n    count = 0\n    while count * K <= N:\n        count += 1\n\n    count -= 1\n    count *= K - M\n    if count == N - M * K:\n        count -= M\n    print(count)\n\n\nsolution(input())\n"
    },
    {
        "number": 129,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k, l = map(int, stdin.split())\n    return str(max(k // m, k // n + l // n, k // n + l // m))\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def solution(stdin: str) -> str:\n        n, m = map(int, stdin.split())\n        board = []\n        for _ in range(n):\n            board.append(list(stdin.split())[1:m + 1])\n        count = 0\n        for i in range(n):\n            for j in range(m):\n                if board[i][j] == 'B':\n                    count += 1\n        if not count:\n            return '0'\n        elif count % 4:\n            return '-1'\n        else:\n            return str(count // 4)\n\n    return solution(stdin)\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(i) for i in stdin.split()]\n    result = -1\n    if a == 1 and b == 1:\n        return 0\n    if a > b:\n        a, b = b, a\n    if b % a == 0:\n        result = b // a\n    if result!= -1:\n        if result * a == b:\n            return int(result)\n    return result\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    rows, cols = [int(num) for num in stdin.split(' ')]\n    rows_list = []\n    for _ in range(rows):\n        rows_list.append(stdin.split('\\n')[0])\n\n    white_count = 0\n    black_count = 0\n    for row_list in rows_list:\n        for char in row_list:\n            if char == 'W':\n                white_count += 1\n            if char == 'B':\n                black_count += 1\n    if white_count!= black_count:\n        return '-1'\n    if black_count % 2!= 0:\n        return '-1'\n    else:\n        return black_count // 2\nprint(solution(stdin))\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n < m or n > 100 or m > 100:\n        return -1\n    else:\n        result = 0\n        for i in range(n):\n            for j in range(m):\n                if i >= j and (i + j) <= (n + m - 1):\n                    if stdin[i][j] == 'W':\n                        result += 1\n        return result\n"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    values = [0 for _ in range(n)]\n    if n == 1 or m == 1:\n        return '0'\n    if n == 2 and m == 2:\n        return '1'\n    for _ in range(n):\n        values[0] = int(stdin[_])\n        for i in range(1, m):\n            values[i] = int(stdin[_ + i])\n        if check_valid(values, n, m):\n            return '1'\n    return '-1'\n\n\ndef"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    size = [int(x) for x in stdin.split('\\n')[0].split()]\n    matrix = [list(x) for x in stdin.split('\\n')[1:]]\n    matrix = [[i, j] for i, j in enumerate(matrix) if j.count('B') > 0]\n\n    def dist(a, b):\n        return ((a[0] - b[0]) ** 2 + (a[1] - b[1]) ** 2) ** 0.5\n\n    matrix = [matrix[0]] + sorted(matrix[1:], key=lambda x: dist(x, matrix[0]))\n    points = [0, 0, size[0] - 1, size[0] - 1, 0, size[1] - 1, size[1] - 1, size[1] - 1]\n    points = [matrix[0][0], matrix[0][1], matrix[1][0], matrix[1][1]]\n\n    def dfs(i: int):\n        if i == 8:\n            return True\n        p = points[i]\n        q = points[i + 1]\n        if dist(p, q) < dist(p, points[0]) + dist(points[1], q):\n            return False\n        for j in range(1, 8):\n            points[i + j] = points[j]\n        for j in range(i + 2, 8):\n            points[j] = points[j - 1]\n        points[i + 1] = q\n        if dfs(i + 1):\n            return True\n        else:\n            return False\n\n    if dfs(0):\n        return str(points.index(matrix[0]) - 1)\n    else:\n        return \"-1\"\n\n\ndef"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043b\u0435\u0442\u043e\u043a \u0434\u043b\u044f \u0440\u0430\u0441\u043a\u0440\u0430\u0441\u043a\u0438, \u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u0443\u044e \u043a\u0430\u0440\u0442\u0438\u043d\u043a\u0443 \u0432\u0437\u044f\u0442\u044c \u0438\u0437 \u0437\u0430\u0434\u0430\u0447\u0438, \n    \u043a\u0430\u043a \u043c\u0438\u043d\u0438\u043c\u0443\u043c \u043d\u0443\u0436\u043d\u043e \u043a\u0440\u0430\u0441\u0438\u0442\u044c 5 \u043a\u043b\u0435\u0442\u043e\u043a \u0438 \u043e\u043a\u0440\u0443\u0436\u0430\u0442\u044c \u043d\u0443\u0436\u043d\u044b\u043c \u043c\u0435\u0442\u043e\u0434\u043e\u043c. \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0447\u0438\u0441\u043b\u043e \u043a\u043b\u0435\u0442\u043e\u043a \u043f\u043e\u043b\u044f n \u0438 m \n    (1 \u2264 n, m \u2264 100), \u0432 \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u043e\u0431\u0435\u043b \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0438\u0437 m \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 'W' \u0438\u043b\u0438 'B'. \n    \u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u0432\u043e\u0434\u0430: 5 4\n    \u0412\u044b\u0432\u043e\u0434: 5\n    '''\n    # \u0442\u0443\u0442 \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u043c\u043e\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f\n    \n    return str(m)\n\n\ndef"
    },
    {
        "number": 130,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = []\n    for _ in range(n):\n        a.append(stdin.split()[0])\n    a = [[a[i][j] for i in range(n)] for j in range(m)]\n    a = [[int(a[i][j]) for i in range(n)] for j in range(m)]\n\n\n    def is_square(a: List[List[int]]):\n        l = len(a)\n        for i in range(l):\n            if not ((a[i][i] == 0) ^ (a[i][l-1] == 0)):\n                return False\n            if a[0][i] == 0:\n                for j in range(l):\n                    if a[j][i]!= 0:\n                        return False\n            else:\n                for j in range(l):\n                    if a[j][i] == 0:\n                        return False\n        return True\n\n    def backtrack(a, num_black):\n        nonlocal l, res\n        if num_black == l ** 2:\n            if is_square(a):\n                res = min(res, num_black)\n        for i in range(l):\n            for j in range(l):\n                if a[i][j] == 0:\n                    a[i][j] = 1\n                    backtrack(a, num_black + 1)\n                    a[i][j] = 0\n\n    res = l ** 2\n    l = len(a)\n    backtrack(a, 0)\n    if res == l ** 2:\n        return -1\n    return res\n\nprint(solution(stdin))\n\"\"\""
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\ndef"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Gets the problem statement and returns the solution.\n    Parameters:\n    stdin (str): The standard input of the problem.\n    Returns:\n    str: The solution to the problem.\n    \"\"\"\n    # Initializes the number of piles and the number of the cases.\n    number_piles, number_cases = [int(val) for val in stdin.split(\"\\n\")[0].split()]\n\n    # Initializes the array of the piles with the stones.\n    stones = [int(val) for val in stdin.split(\"\\n\")[1].split()]\n\n    # Initializes the array of the notes by the participants.\n    notes = [int(val) for val in stdin.split(\"\\n\")[2].split()]\n\n    # Initializes the array of the records by the participants.\n    records = [int(val) for val in stdin.split(\"\\n\")[2].split()]\n\n    # Initializes the variable to determine whether the records are correct.\n    correct = False\n\n    # Initializes the variables to determine which cases have correct records.\n    correct_first_case = False\n    correct_second_case = False\n\n    # Iterates through each case.\n    for i in range(number_cases):\n        # Initializes the counters for the number of stones in each case.\n        count_first_case = 0\n        count_second_case = 0\n\n        # Iterates through the piles.\n        for j in range(number_piles):\n            # Checks whether the records are correct.\n            if records[i] == stones[j] and notes[i] == stones[j]:\n                correct = True\n                # Checks whether the records are correct for the first case.\n                if i == 0:\n                    correct_first_case = True\n                # Checks whether the records are correct for the second case.\n                if i == 1:\n                    correct_second_case = True\n            # Checks whether the records are incorrect.\n            elif records[i]!= stones[j] or notes[i]!= stones[j]:\n                # Checks whether the records are incorrect for the first case.\n                if i == 0:\n                    count_first_case += 1\n                # Checks whether the records are incorrect for the second case.\n                if i == 1:\n                    count_second_case += 1\n\n        # Checks whether the records are correct for the first case.\n        if count_first_case == 0 and correct_first_case == False:\n            correct = False\n        # Checks whether the records are correct for the second case.\n        if count_second_case == 0 and correct_second_case == False:\n            correct = False\n\n    return \"Yes\" if correct else \"No\"\n\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time Complexity: O(2n)\n    Space Complexity: O(n)\n\n    >>> solution(\"5\\n1 1 1 1 1\\n1 0 1 0 1\\n\")\n    'Yes'\n    >>> solution(\"5\\n1 1 1 1 1\\n1 0 1 0 1\\n\")\n    'Yes'\n    >>> solution(\"5\\n2 3 9\\n1 7 9\\n\")\n    'No'\n    \"\"\"\n    stones = [int(i) for i in stdin.split(\"\\n\")[1].split()]\n    n = stones[0]\n    first_day_records = stones[1 : n + 1]\n    second_day_records = stones[n + 1 :]\n    for i, j in zip(first_day_records, second_day_records):\n        if i - j!= 0:\n            return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    arr = list(map(int, stdin.split(\"\\n\")[0].split(\" \")))\n    arr2 = list(map(int, stdin.split(\"\\n\")[1].split(\" \")))\n\n    for i in range(len(arr)):\n        if arr[i] == arr2[i]:\n            continue\n        else:\n            return \"No\"\n\n    return \"Yes\"\n\ndef"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"No\"\n    # your code here\n    return \"No\"\n\"\"\"\n\n\ndef"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = list(map(int, stdin.split()))\n    y = list(map(int, stdin.split()))\n    for i in range(n):\n        if x[i]!= y[i]:\n            return 'No'\n    return 'Yes'\nprint(solution(input()))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    x = list(map(int, stdin.split()[1:]))\n    y = list(map(int, stdin.split()[1:]))\n    \n    if N == len(x) == len(y):\n        return \"Yes\" if x == y else \"No\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 131,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = list(map(int, stdin.split()))\n    return \"Yes\" if a + b == sum([int(x) for x in stdin.split()]) else \"No\"\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    assert 1 <= n <= 360\n    lst = [int(stdin) for stdin in stdin.split()]\n    assert sum(lst) == 360\n    lst.sort()\n    res = min(abs(lst[i] - lst[i - 1]) for i in range(1, n))\n    return str(res)\n    \n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    a = [int(i) for i in stdin.split()]\n    a.sort()\n    return min([(a[i] + a[i + 1]) - (a[i - 1] + a[i]) for i in range(1, len(a) - 1)])\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns min difference between angles of sectors that will go to Vasya and Petya\"\"\"\n    n, *angles = [int(i) for i in stdin.split('\\n')]\n    total = sum(angles)\n    return min(abs(total - 2 * angle) for angle in angles)\n\n\"\"\"\nimport sys"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return 0\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    A = [int(n) for n in stdin.readline().split()]\n    A.sort()\n    curr_sum = 0\n    min_sum = 360\n    for i in range(N - 1):\n        if A[i] + A[i + 1] > 360:\n            continue\n        else:\n            curr_sum = abs(A[i] - A[i + 1])\n        min_sum = min(min_sum, curr_sum)\n    return min_sum\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(n) for n in stdin.split()]\n    for i in range(len(a)):\n        a[i] = a[i] % 360\n    a.sort()\n    min_diff = 360\n    for i in range(len(a) - 1):\n        diff = a[i + 1] - a[i]\n        if diff < min_diff:\n            min_diff = diff\n    return str(min_diff)\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\" Find minimum difference between sectors \"\"\"\n    n = int(stdin.readline().rstrip())\n    angles = sorted(map(int, stdin.readline().rstrip().split(' ')))\n    \n    result = 360 - angles[0] + angles[-1]\n    for i in range(1, len(angles)):\n        result = min(result, 360 - angles[i] + angles[i - 1])\n    return str(result)\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l = [int(x) for x in stdin.split()]\n    if len(l) == 1:\n        return str(l[0])\n    s = sum(l)\n    print((s - 360) % 180)\n    return\n"
    },
    {
        "number": 132,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    pizza = [int(n) for n in stdin.split()]\n    a, b = 0, 0\n    for i in range(n):\n        a += pizza[i]\n        b += (pizza[i] - i) % 360\n    return min(abs(a - b), abs((a + 360) - b))\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split(' ')))\n    return pow(n, m, mod)\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    print(n * m)\n    return 0\n\n\ndef"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('1 1')\n    7\n    '''\n   ..."
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return '{}'.format(stdin)"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    parameters = stdin.split(' ')\n    print(f\"parameters: {parameters}\")\n    n = int(parameters[0])\n    m = int(parameters[1])\n    print(f\"n: {n}\")\n    print(f\"m: {m}\")\n    return str(pow(n, m, 998244353))\n\nassert solution('1 3') == '7'\nassert solution('2 2') == '9'\n\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys\nimport time\nfrom collections import Counter\n\ndef"
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"1 2\")\n    7\n    >>> solution(\"2 2\")\n    9\n    \"\"\"\n   ..."
    },
    {
        "number": 133,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the solution\"\"\"\n    stdin = stdin.split(' ')\n    n, m = map(int, stdin)\n    return str(fact(n) // fact(n - m) // fact(m))\n\n\ndef"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return f\"{}\""
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    # we check the solutions for m in the range [1, n // 3]\n    for m in range(1, n // 3 + 1):\n        k = math.sqrt(m ** 2 + n ** 2)\n        if k.is_integer():\n            return \"{} {}\".format(m, int(k))\n\n    # in case there is no solution return -1\n    return \"-1\"\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    min_value = 1\n    max_value = 1000\n    for m in range(min_value, max_value):\n        for k in range(min_value, max_value):\n            if m**2 + k**2 == n:\n                print(m, k)\n                return\n    print(-1)\n    return \"\"\n\n\ndef"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str()\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    side = int(stdin)\n    # Write your code here\n    a = 1\n    b = 1\n    c = side\n    while a < b < c:\n        if a ** 2 + b ** 2 == c ** 2:\n            return f\"{a} {b} {c}\"\n        elif a ** 2 + c ** 2 == b ** 2:\n            return f\"{a} {c} {b}\"\n        elif c ** 2 + b ** 2 == a ** 2:\n            return f\"{c} {b} {a}\"\n        a += 1\n        b += 1\n        c += 1\n    return \"-1\"\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for m in range(1, n):\n        for k in range(1, n + 1):\n            if m ** 2 + k ** 2 == n ** 2:\n                return str(m) + \" \" + str(k)\n    return \"-1\"\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return '{} {}'.format(m, k)\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 134,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for m in range(1, n):\n        for k in range(1, n):\n            if m * m + k * k == n * n:\n                return f\"{m} {k}\"\n\n    return '-1'\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n----\nfrom math import gcd\n\ndef"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    for i in range(k):\n        if (n - i) % (k - i) == 0:\n            return 'Yes'\n    return 'No'\n    \n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    arr = [int(i) % k for i in range(1, k + 1)]\n    if arr == arr[::-1]:\n        return 'Yes'\n    return 'No'"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nn, k = list(map(int, stdin.split()))\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    \n    # find prime factorization of k\n    factors = prime_factorize(k)\n    \n    # find all remainders modulo each prime factor\n    remainders = [0] * len(factors)\n    for i in range(n):\n        remainders[0] += i\n    for i in range(len(factors)):\n        remainders[i + 1] = remainders[i] % factors[i]\n    \n    # check if there are any repeated remainders\n    return \"Yes\" if len(set(remainders)) == len(remainders) else \"No\"\n    \n\ndef"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    remainders = set()\n    n, k = map(int, stdin.split())\n    for i in range(1, k + 1):\n        remainders.add(n % i)\n    if len(remainders) == k:\n        return 'Yes'\n    else:\n        return 'No'"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    p = k - 1\n    return \"Yes\" if len({n % p for p in range(2, k)}) == 0 else \"No\"\n"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n   ..."
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nfrom collections import defaultdict\n\n\ndef"
    },
    {
        "number": 135,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    n, k = [int(x) for x in stdin.split(' ')]\n    return 'No' if len(set([(x % k) for x in range(1, n + 1)])) < n else 'Yes'"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split('\\n')\n    a = int(a)\n    b = int(b)\n\n    if a < b:\n        return '<'\n    elif a > b:\n        return '>'\n    else:\n        return '='\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n1 = int(stdin.split('\\n')[0])\n    n2 = int(stdin.split('\\n')[1])\n    return '>' if n1 > n2 else '<' if n1 < n2 else '='\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return '=' if a == b else '<' if a < b else '>'\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a: str = stdin.readline()\n    b: str = stdin.readline()\n    a, b = int(a), int(b)\n    return '>' if a > b else '<' if a < b else '='\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split('\\n')[:2])\n    return str(a < b) + '\\n' if a < b else str(a > b) + '\\n'\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.strip().split(' ')\n    if int(a) < int(b):\n        return \"<\"\n    elif int(a) > int(b):\n        return \">\"\n    else:\n        return \"=\"\n\na, b = input(), input()\nprint(solution(a, b))\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(lambda x: int(x.strip()), stdin.split())\n\n    if a < b:\n        return \"<\"\n    if a > b:\n        return \">\"\n    else:\n        return \"=\"\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    string_a = stdin.splitlines()[0]\n    string_b = stdin.splitlines()[1]\n    a = int(string_a)\n    b = int(string_b)\n    return '<' if a < b else '>' if a > b else '='"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split()[0]\n    b = stdin.split()[1]\n    if int(a) > int(b):\n        return '>'\n    elif int(a) < int(b):\n        return '<'\n    else:\n        return '='\n"
    },
    {
        "number": 136,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.readline())\n    b = int(stdin.readline())\n    if a < b:\n        return \"<\"\n    elif a > b:\n        return \">\"\n    else:\n        return \"=\"\n    pass\nprint(solution(stdin=input()))"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"\"\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(num):\n        if not num:\n            if visited[0] % 2 == p:\n                answer.append(visited[0])\n        else:\n            for i in range(n):\n                if not visited[i]:\n                    visited[i] = num[0]\n                    dfs(num[1:])\n                    visited[i] = 0\n\n    answer = []\n    visited = [0] * n\n    n, p = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n    dfs(c)\n    return len(answer) % (10 ** 9 + 7)\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"\""
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    return None\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\nfrom itertools import permutations, combinations\n\nn, p = [int(x) for x in input().split(' ')]\ncolors = [int(x) for x in input().split(' ')]"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  pass\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split('\\n')[0].split())\n    c = list(map(int, stdin.split('\\n')[1].split()))\n\n    def dp(curr, c):\n        for i in range(len(c)):\n            c[i] += curr[i]\n            if c[i] % 2 == 0:\n                c[i] = 0\n            else:\n                c[i] = 1\n        return c\n\n    if p == 1:\n        if max(c) % 2 == 1:\n            return 1\n        return 0\n\n    if n == 1:\n        return 0\n\n    if p == 0 and min(c) == 0:\n        return 1\n    if min(c) < 0:\n        return 0\n\n    dp1 = dp([], c)\n    dp2 = dp([], c)\n    if dp1[0] == dp2[0]:\n        return 0\n    if dp1[0]!= dp2[0]:\n        dp1.pop(0)\n        dp1.append(0)\n        dp2.pop(0)\n        dp2.append(0)\n\n    def count(curr):\n        if len(curr) == n:\n            c = dp(curr, c)\n            if c[0] == p:\n                return 1\n            return 0\n        return sum([count(curr + [i]) for i in range(n)])\n\n    return count([])\n"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 137,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # My solution\n    # return 1\n    # AC solution\n    # return pow(2, n, 10 ** 9 + 7)\n\n    n, p = map(int, stdin.readline().split())\n    # n, p = map(int, input().split())\n    c = list(map(int, stdin.readline().split()))\n    # c = list(map(int, input().split()))\n\n    dp = [[0 for _ in range(2)] for _ in range(n)]\n\n    dp[0][c[0] % 2] = 1\n\n    for i in range(1, n):\n        for j in range(2):\n            for k in range(2):\n                if dp[i - 1][k]!= 0:\n                    dp[i][(j + k) % 2] = (dp[i][(j + k) % 2] + dp[i - 1][j] + dp[i - 1][k]) % (10 ** 9 + 7)\n\n    return dp[n - 1][p]\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c = map(int, stdin.split())\n    return (a*n + b*(n//2) + c*(n//4)) % (10**9 + 7)\n\ndef"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c = map(int, stdin.strip().split())\n    return n + a - a % 4 + b - b % 4 + c - c % 4\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c = [int(x) for x in stdin.split(\" \")]\n    # n_lst = [1, 2, 3]\n    # for i in range(1, n // 4 + 1):\n    #     n_lst.append(a * i + b * i + c * i)\n    #     if n in n_lst:\n    #         return i * a\n    # return n_lst[-1]\n\n    return n + ((n + 1) // 4 - 1) * a * b * c\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c = map(int, stdin.split(' '))\n    # or\n    # n, a, b, c = map(int, input().split(' '))\n    if n % 4 == 0:\n        return 0\n    if n // 4 + a >= b:\n        return n // 4 * c\n    if n // 4 + a + b >= c:\n        return n // 4 * a\n    return n // 4 * b\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c = (int(i) for i in stdin.split())\n    if n >= a * 2 + b * 2 + c * 2:\n        return str(a * 2 + b * 2 + c * 2)\n    return str(a * 2 + b * 3 + c * 4)\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c = map(int, stdin.split())\n    return 0 if n + a + b + c % 4 else min(a, b, c)\n\n\ndef"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c = map(int, stdin.split(' '))\n    print(max(0, (n // 4 + 1) * a - n))\n    return \"\"\n\n\ndef"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c = [int(x) for x in stdin.split()]\n    return str(min(n // 4 + (n % 4 + 1) * a, n // 4 + (n % 4 + 1) * b, n // 4 + (n % 4 + 1) * c))\n"
    },
    {
        "number": 138,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution to the problem.\"\"\"\n    n, m = map(int, stdin.split('\\n')[0].split())\n    edges = []\n    for _ in range(m):\n        u, v = map(int, stdin.split('\\n')[_].split())\n        edges.append((u, v))\n    for _ in range(n):\n        if _ not in {edge[0] for edge in edges} and _ not in {edge[1] for edge in edges}:\n            print('YES')\n            return\n    print('NO')\n    return\n\n\"\"\"\nimport pytest\n\nimport aoc_utils\n\n\ndef"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(str('''3 4\n   ... 1 2\n   ... 2 3\n   ... 3 2\n   ... 3 1\n   ... '''))\n    'YES'\n\n    >>> solution(str('''5 6\n   ... 1 2\n   ... 2 3\n   ... 3 2\n   ... 3 1\n   ... 2 1\n   ... 4 5\n   ... '''))\n    'NO'\n    \"\"\"\n   ..."
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    edges = {tuple(map(int, line.split(' '))) for line in stdin.split('\\n')}\n    G = [[0 for _ in range(n)] for _ in range(n)]\n    for u, v in edges:\n        G[u - 1][v - 1] = G[v - 1][u - 1] = 1\n    x = n\n    while x > 0:\n        for u in range(n):\n            if sum(G[u]) > 1:\n                for v in range(n):\n                    if G[v][u] and v!= u:\n                        G[v].pop(u)\n                        break\n            x -= 1\n    return 'YES' if len(edges) < n * (n - 1) // 2 else 'NO'\n\"\"\"\n\ndef"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    num_nodes, num_edges = [int(n) for n in stdin.split()]\n    graph = {key: [] for key in range(num_nodes)}\n    for _ in range(num_edges):\n        node1, node2 = [int(n) for n in stdin.split()]\n        graph[node1].append(node2)\n        graph[node2].append(node1)\n    print(acyclic(graph))\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    V, E = map(int, stdin.split(' '))\n    m = E\n    edges = []\n    for i in range(m):\n        a, b = map(int, stdin.split(' '))\n        edges.append([a, b])\n    # print(edges)\n    graph = [[] for _ in range(V)]\n    for edge in edges:\n        a, b = edge\n        graph[a].append(b)\n    # print(graph)\n    degree = [0] * V\n    for i in range(V):\n        for j in graph[i]:\n            degree[j] += 1\n    # print(degree)\n    # ans = False\n    if degree.count(0) == 0 or degree.count(1) == 0:\n        # print(True)\n        ans = True\n    else:\n        ans = False\n    return ans\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    edges = [tuple(int(x) for x in stdin.split()) for _ in range(m)]\n\n    def remove_edges(start: int, graph: dict, edges: list, rem_edges: int) -> bool:\n        for end in graph[start]:\n            if end in edges:\n                edges.remove(end)\n                if not edges:\n                    return True\n                else:\n                    if remove_edges(end, graph, edges, rem_edges - 1):\n                        return True\n        return False\n\n    graph = dict()\n    for i in range(n):\n        graph[i] = []\n    for edge in edges:\n        graph[edge[0]].append(edge[1])\n\n    while graph:\n        for start in list(graph.keys()):\n            if remove_edges(start, graph, edges, 1):\n                return \"YES\"\n        return \"NO\"\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = {vertex: [] for vertex in range(1, n + 1)}\n\n    for _ in range(m):\n        v, w = map(int, stdin.split())\n        graph[v].append(w)\n        graph[w].append(v)\n\n    deleted_edges = set()\n    for v, edges in graph.items():\n        for w in edges:\n            if v in graph[w]:\n                graph[v].remove(w)\n                graph[w].remove(v)\n                deleted_edges.add((v, w))\n    if len(deleted_edges) == 0:\n        return \"YES\"\n    elif len(deleted_edges) == 1:\n        v, w = next(iter(deleted_edges))\n        if v in graph[w]:\n            graph[v].remove(w)\n            graph[w].remove(v)\n            deleted_edges.add((v, w))\n        else:\n            graph[w].remove(v)\n            graph[v].remove(w)\n            deleted_edges.add((w, v))\n    if len(deleted_edges) == 2:\n        return \"NO\"\n    return \"YES\"\n\"\"\""
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 4\\n1 2\\n2 3\\n3 2\\n3 1\")\n    'YES'\n    \"\"\"\n    num_vertex, num_edges = [int(x) for x in stdin.split()]\n    edges = {i: [] for i in range(1, num_vertex + 1)}\n    for edge in stdin.split(\"\\n\")[1:]:\n        edge = [int(x) for x in edge.split()]\n        if edge[0] in edges:\n            edges[edge[0]].append(edge[1])\n\n    queue = deque()\n    queue.append(1)\n    visited = [False] * (num_vertex + 1)\n    visited[1] = True\n\n    while queue:\n        v = queue.popleft()\n        for u in edges[v]:\n            if not visited[u]:\n                visited[u] = True\n                queue.append(u)\n\n    for i in range(1, num_vertex + 1):\n        if not visited[i]:\n            return \"YES\"\n\n    return \"NO\"\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    a, b = list(map(int, stdin.split(' ')))\n    vertex = {}\n    for _ in range(b):\n        u, v = list(map(int, stdin.split(' ')))\n        if u in vertex:\n            vertex[u] += [v]\n        else:\n            vertex[u] = [v]\n        if v in vertex:\n            vertex[v] += [u]\n        else:\n            vertex[v] = [u]\n    result = 'NO'\n    for key in vertex.keys():\n        for vertex2 in vertex[key]:\n            if vertex2 in vertex:\n                for vertex3 in vertex[vertex2]:\n                    if vertex3 == key:\n                        result = 'YES'\n    return result\n"
    },
    {
        "number": 139,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    l = stdin.split(\"\\n\")\n    n, m = int(l[0].split(\" \")[0]), int(l[0].split(\" \")[1])\n    # print(n, m)\n\n    l_x, l_s = [], []\n    for i in range(n):\n        x, s = int(l[i + 1].split(\" \")[0]), int(l[i + 1].split(\" \")[1])\n        l_x.append(x)\n        l_s.append(s)\n\n    # print(l_x, l_s)\n\n    l_cost = [0] * n\n    l_cost[0] = l_s[0]\n    for i in range(1, n):\n        l_cost[i] = max(l_s[i], l_cost[i - 1]) + l_s[i]\n\n    # print(l_cost)\n\n    l_sum = 0\n    for i in range(n):\n        l_sum += l_cost[i]\n\n    # print(l_sum)\n\n    for i in range(n):\n        if l_sum <= m:\n            return i\n        l_sum -= l_s[i]\n\n    return n\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the minimum amount of coins to cover the given range\"\"\"\n    pass\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x = [int(i) for i in stdin.splitlines()[0].split()]\n    s = [int(i) for i in stdin.splitlines()[1].split()]\n    m = max(x)\n    ans = 0\n    for i,j in zip(x,s):\n        ans += (j*2) + ((m-j)*2)\n    return str(ans)"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split('\\n')[:2]]\n    x = [int(x) for x in stdin.split('\\n')[2:]]\n    x.sort()\n    s = [int(x) for x in stdin.split('\\n')[2:]]\n    s.sort()\n    c = 0\n    i = 0\n    j = 0\n    for k in range(n):\n        while x[k] - x[i] > s[j]:\n            j += 1\n            if j >= len(s):\n                break\n        if j < len(s):\n            if x[k] - x[i] >= s[j]:\n                c += 1\n                j += 1\n        i += 1\n    return c\n\nprint(solution(\"5 1\\n1\\n1\\n1\\n1\\n\"))\nprint(solution(\"1 1\\n1 1\"))\nprint(solution(\"5 200\\n50 0\\n60 2\\n155 70\\n165 70\"))\nprint(solution(\"1 1\\n1 1\"))\nprint(solution(\"2 50\\n20 0\\n3 1\"))\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    nums = []\n    for _ in range(n):\n        x, s = [int(x) for x in stdin.split()]\n        nums.append((x, s))\n    nums.sort(key=lambda x: x[0])\n    nums.sort(key=lambda x: x[1], reverse=True)\n    ans = 0\n    for x, s in nums:\n        if s > m:\n            break\n        ans += s\n        m -= s\n    return ans\n\nsolution(\"{} {}\".format(2, 100))\nsolution(\"{} {}\".format(2, 1000))\nsolution(\"{} {}\".format(100, 100))\nsolution(\"{} {}\".format(100, 1000))\nsolution(\"{} {}\".format(100, 10000))\nsolution(\"{} {}\".format(1000, 1000))\nsolution(\"{} {}\".format(1000, 10000))\nsolution(\"{} {}\".format(1000, 100000))\nsolution(\"{} {}\".format(10000, 10000))\nsolution(\"{} {}\".format(10000, 100000))\nsolution(\"{} {}\".format(100000, 100000))\n\ndef"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    # n, m = map(int, input().split())\n    assert (1 <= n <= 80 and 1 <= m <= 100_000)\n\n    arr = []\n    for _ in range(n):\n        x, s = map(int, input().split())\n        assert (1 <= x <= m and 0 <= s <= m)\n        arr.append((x, s))\n\n    arr.sort(key=lambda x: x[0])\n    best = 0\n    res = 0\n    for x, s in arr:\n        res += 1\n        best = max(best, s)\n        res += (best - 1)\n        if res > m:\n            break\n    return res\n\n\ndef"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    x, s = [[int(x) for x in stdin.split('\\n')[i].split(' ')] for i in range(1, n + 1)]\n\n    dp = [[float('inf') for _ in range(m + 1)] for _ in range(n + 1)]\n    dp[0][0] = 0\n    for i in range(1, n + 1):\n        for j in range(m + 1):\n            for k in range(2):\n                if j - x[i - 1][k] >= 0 and dp[i - 1][j - x[i - 1][k]]!= float('inf'):\n                    dp[i][j] = min(dp[i][j], dp[i - 1][j - x[i - 1][k]] + s[i - 1] * k)\n    for j in range(m + 1):\n        if dp[n][j]!= float('inf'):\n            return str(dp[n][j])\n\"\"\"\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def fn(n, m):\n        dp = [0] + [-1] * m\n        for x, s in enumerate(stdin.splitlines()[:n], start=1):\n            x, s = int(x), int(s)\n            dp[x] = x * s if dp[x] == -1 else min(dp[x] + s, x * s)\n        return dp[m]\n\n    return str(fn(int(stdin.splitlines()[0]), int(stdin.splitlines()[1])))\n"
    },
    {
        "number": 140,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    total = 0\n    cur_min = m\n    for x, s in zip(stdin.split('\\n')[0::2], stdin.split('\\n')[1::2]):\n        x, s = map(int, (x, s))\n        if x - s < cur_min:\n            total += (x - s + 1) * s\n            cur_min = x - s\n    return total - cur_min\n\n\ndef"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    # Write your code here\n    \n    return None\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # get data\n    w = int(stdin.readline().strip())\n    items = [int(x) for x in stdin.readline().strip().split(' ')]\n    \n    # create an array of all possible weights, up to w+1\n    dp = [0] * (w+1)\n    dp[0] = 1\n    for item in items:\n        for weight in range(w, item-1, -1):\n            dp[weight] = max(dp[weight], dp[weight-item] + item)\n    \n    return dp[w]\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input_str = stdin.readlines()\n    W = int(input_str[0].strip())\n    nums = [int(i) for i in input_str[1].strip().split(' ')]\n    nums.sort()\n    result = 0\n    for i in range(len(nums)):\n        if i < len(nums) - 1:\n            if nums[i+1] - nums[i] > W:\n                result = max(result, nums[i])\n        if nums[i] > W:\n            break\n    return result\n\nprint(solution(stdin))\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    total, *items = stdin.split()\n    total = int(total)\n    items = [int(item) for item in items]\n    dp = {0: 0, 1: items[0]}\n    for i in range(1, len(items)):\n        dp[i + 1] = items[i]\n    for i in range(2, len(items) + 1):\n        for j in range(i - 1, 0, -1):\n            dp[i] = max(dp[i], dp[j] + items[j - 1] * i)\n    return max(dp.values())\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    W = int(stdin.readline())\n    items = list(map(int, stdin.readline().split()))\n    dp = [0] * len(items)\n    dp[0] = items[0]\n    for i in range(1, len(items)):\n        dp[i] = max(dp[i - 1] + items[i], items[i])\n    return max(dp)\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    S = [int(x) for x in stdin.split(' ')]\n    S.sort(reverse=True)\n    S.append(0)\n    S.append(S[0] + S[1] + S[2])\n    dp = [0] * len(S)\n    dp[0] = S[0]\n    dp[1] = max(S[0], S[1])\n    for i in range(2, len(S)):\n        dp[i] = max(dp[i - 1], dp[i - 2] + S[i])\n    return dp[len(S) - 1]\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return 'none'"
    },
    {
        "number": 141,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the maximum weight of a good subset.\"\"\"\n    # Get all weights from input\n    weights = list(map(int, stdin.split()))\n    weight = weights.pop(0)\n    \n    # Loop through all weights\n    for i in range(len(weights)):\n        # Take the smallest weight\n        weight = min(weight, weights[i])\n        \n    return weight\n    \n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    n, l = [int(x) for x in stdin.split(\" \")]\n    c = [int(x) for x in stdin.split(\" \")[1:]]\n    ans = 0\n    for i in range(1, n + 1):\n        m = c[i - 1]\n        while m > 1:\n            m = m // 2\n            ans += m\n    print(ans * l)\n    return \"\""
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    l = int(lines[1])\n    c = list(map(int, lines[2].split(' ')))\n    c.sort()\n    s = 0\n    for i in range(len(c)):\n        if i == 0:\n            s += c[0]*(2**(i+1) - 1)\n        else:\n            s += c[i]*(2**i)\n    cost = (l//s)*s\n    return str(cost)\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, l = map(int, stdin.split())\n    h = list(map(int, stdin.split()))\n    ans = 0\n    for i in range(n):\n        ans += 2 ** i - 1 * h[i]\n    return str(ans)"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def solve(stdin: str) -> str:\n        def ncr(n: int, r: int, p: int, q: int, q_n: int) -> int:\n            \"\"\"Calculates n choose r elements of the binomial coefficient.\"\"\"\n            r_n = r - n\n            if n == r or n == 0 or r == 0:\n                return 1\n            else:\n                return ncr(n - 1, r_n, p, q, q_n) + (ncr(n - 1, r_n, p, q, q_n) * q) // (p * q_n)\n\n        n, L = map(int, stdin.split())\n        c = list(map(int, stdin.split()))\n        c.sort(reverse=True)\n        p = 10 ** 9 + 7\n        q = 10 ** 9 + 9\n        q_n = 1\n        total = 0\n        for i in range(n):\n            total += c[i] * ncr(i, i + 1, p, q, q_n)\n            q_n = q_n * c[i] % p\n        for i in range(1, n + 1):\n            total += (q // c[i - 1]) * i * ncr(n, i, p, q, q_n)\n            q_n = q_n * c[i - 1] % p\n        total %= p\n        while L > total:\n            L -= c[0] * ncr(n, n, p, q, q_n)\n            L += c[0] * ncr(n, n - 1, p, q, q_n)\n            L %= p\n            for i in range(n - 1, 0, -1):\n                total += c[i] * ncr(n, i, p, q, q_n)\n                q_n = q_n * c[i] % p\n        return str(L)\n\n    return solve(stdin)\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, l = map(int, stdin.split('\\n')[0].split(' '))\n    bottles = list(map(int, stdin.split('\\n')[1].split(' ')))\n    return sum(min(l, k) * (2 ** i - 1) for i, k in enumerate(bottles))\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4 12\n   ... 20 30 70 90\n   ... ''')\n    150\n    >>> solution('''4 3\n   ... 10 100 1000 10000\n   ... ''')\n    30\n    >>> solution('''5 787787787\n   ... 123456789 234567890 345678901 456789012 987654321\n   ... ''')\n    44981600785557577\n    \"\"\"\n   ...\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = []\n    n, l = map(int, stdin.split())\n    for i in range(n):\n        a.append(int(stdin.split()[i]))\n\n    r = 0\n    while l > 0:\n        if l >= min(a):\n            r += min(a)*(l//min(a))\n            l -= min(a)*(l//min(a))\n        else:\n            r += min(a)*(l//min(a))\n            l = 0\n    return r\n"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    size, min_lemon = [int(x) for x in stdin.strip().split(' ')]\n    cost = [int(x) for x in stdin.strip().split(' ')][1:]\n    index = -1\n    for i in range(len(cost)):\n        if cost[i] < min_lemon:\n            index = i\n    if index < 0:\n        return str(sum(cost))\n    else:\n        return str((min_lemon - cost[index]) * cost[index] + sum(cost[:index]))\n\n\ndef"
    },
    {
        "number": 142,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, l = map(int, stdin.split('\\n')[0].split())\n    prices = map(int, stdin.split('\\n')[1].split())\n    result = 0\n    for price in prices:\n        result += price * (1 + l // (2 ** price))\n    return str(result)\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n\n    mx = 0\n    for i in range(n):\n        if arr[i] > mx:\n            mx = arr[i]\n    return mx\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def find_min(a: list[int]) -> int:\n        min_index = 0\n        min_value = a[min_index]\n        for index, value in enumerate(a):\n            if value < min_value:\n                min_value = value\n                min_index = index\n        return min_index\n    \n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    print(find_min(a))\n    return None\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # INPUT:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n\n    # OUTPUT:\n    mex = float(\"inf\")\n    for num in arr:\n        if num < mex:\n            mex = num\n    return str(mex)"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def find_max_mex(A):\n        mex = max(A)\n        while mex in A:\n            mex -= 1\n        return mex + 1\n    n = int(stdin)\n    A = [int(x) for x in stdin.split('\\n')[0].split()]\n    print(find_max_mex(A))\nsolution(input())\n\n\ndef"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = [int(i) for i in stdin.readline().strip().split(' ')]\n    if len(arr) == n:\n        arr.sort(reverse=True)\n        return str(arr[0])\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Solution 1\n    # a, b = map(int, stdin.split('\\n'))\n    #\n    # d = {}\n    # for i in range(1, b + 1):\n    #     d[i] = 1\n    #\n    # for i in range(a):\n    #     if i in d:\n    #         d[i] = min(i + 1, d[i])\n    #\n    #     elif i - 1 in d:\n    #         d[i] = min(i - 1, d[i - 1])\n    #\n    #     else:\n    #         d[i] = i + 1\n    #\n    # return d[b]\n\n    # Solution 2\n    a, b = map(int, stdin.split('\\n'))\n    print(max(i + 1 if i < a - 1 else i for i in range(a, b + 1)))\n"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\ndef"
    },
    {
        "number": 143,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def s(s: str) -> int:\n        return int(s)\n\n    n = s(stdin.readline())\n    arr = list(map(s, stdin.readline().strip().split(\" \")))\n    arr.sort()\n    for i in range(n):\n        arr[i] = arr[i] + 1\n    arr = list(set(arr))\n    print(arr[-1])\n\n    return \"\"\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    # read the data\n    num_digits = int(stdin.readline())\n    num = stdin.readline()\n    \n    num = list(map(int, list(num)))\n    num.sort()\n    \n    # check if it's lucky or not\n    if len(set(num)) == 1:\n        return \"YES\"\n    \n    for i in range(len(num) - 1):\n        if num[i] + num[i+1] == num[i+1] + num[i]:\n            return \"YES\"\n    \n    return \"NO\"\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin\n    a = str(sum([int(i) for i in a]))\n    print(\"YES\" if len(a) == 1 else \"NO\")\n    return \"\""
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = list(stdin.readline().strip('\\n'))\n    s.sort(reverse=True)\n    i = 0\n    while i < len(s):\n        if s[i] == s[0]:\n            del s[i]\n        else:\n            i += 1\n    if s == []:\n        return 'NO'\n    return 'YES'\n\nprint(solution(input()))\n\nor\n\ndef"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    s = int(stdin[1])\n    s_list = stdin[1:].split(\"0\")\n    if len(s_list) <= 1:\n        return \"NO\"\n    else:\n        s_list.sort(key=len)\n        s_list.insert(0, 0)\n        s_list.append(0)\n        i = 1\n        while i < len(s_list):\n            if s_list[i - 1] > s_list[i]:\n                s_list.pop(i)\n            else:\n                i += 1\n        return \"YES\" if len(s_list) >= 2 else \"NO\"\n    # s_list = stdin[1:].split(\"0\")\n    # s_list.sort(key=len)\n    # if len(s_list) <= 1:\n    #     return \"NO\"\n    # elif len(s_list) == 2:\n    #     if s_list[0] < s_list[1]:\n    #         return \"YES\"\n    #     else:\n    #         return \"NO\"\n    # else:\n    #     for i in range(len(s_list) - 1):\n    #         if s_list[i] < s_list[i + 1]:\n    #             s_list.pop(i)\n    #             break\n    #     for i in range(len(s_list) - 1, 0, -1):\n    #         if s_list[i - 1] > s_list[i]:\n    #             s_list.pop(i)\n    #     if len(s_list) >= 2:\n    #         return \"YES\"\n    #     else:\n    #         return \"NO\"\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    digits = stdin.split('\\n')[0]\n    if len(digits) < 2:\n        return 'NO'\n\n    sum = 0\n    for c in digits:\n        sum += int(c)\n    if sum % 2 == 0:\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = int(stdin)\n    l = [a // 10 ** i % 10 for i in range(n)]\n    l1 = [l[0]]\n    l2 = []\n    for i in range(1, n):\n        if l[i] == l1[-1]:\n            l1.append(l[i])\n        else:\n            l2.append(l[i])\n    if len(l1) > 1:\n        return \"YES\"\n    else:\n        return \"NO\"\n    # write your code in Python 3.6"
    },
    {
        "number": 144,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('73452')\n    'YES'\n    >>> solution('1248')\n    'NO'\n    '''\n    sum_of_segments = 0\n    while stdin:\n        sum_of_segments += int(stdin[0])\n        stdin = stdin[1:]\n    return 'YES' if sum_of_segments % 2 == 0 else 'NO'\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[0]\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    num = {c: stdin.count(c) for c in set(stdin)}\n    return \"CHAT WITH HER!\" if num[\n        max(num, key=num.get)] % 2 == 1 else \"IGNORE HIM!\"\n\"\"\"\n\nsolution(stdin)\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"\" if len(set(stdin)) % 2 == 0 else \"CHAT WITH HER!\" if len(set(stdin)) == 1 else \"IGNORE HIM!\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"CHAT WITH HER!\" if len(set(stdin)) % 2 == 1 else \"IGNORE HIM!\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    chars = set(stdin)\n    return \"CHAT WITH HER!\" if len(chars) % 2 else \"IGNORE HIM!\"\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"CHAT WITH HER!\" if len(set(stdin)) % 2 == 0 else \"IGNORE HIM!\"\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"CHAT WITH HER!\" if len(set(stdin)) % 2 else \"IGNORE HIM!\"\n\ndef"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"CHAT WITH HER!\" if len(set(stdin)) % 2 else \"IGNORE HIM!\"\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x = [i for i in stdin]\n    z = len(set(x))\n    print(z)\n    if z % 2 == 1:\n        print(\"CHAT WITH HER!\")\n    else:\n        print(\"IGNORE HIM!\")\n"
    },
    {
        "number": 145,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    odd = 0\n    for i in stdin:\n        if stdin.count(i) % 2 == 1:\n            odd += 1\n    if odd % 2 == 1:\n        return \"CHAT WITH HER!\"\n    else:\n        return \"IGNORE HIM!\"\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    arr = [int(x) for x in stdin.split()]\n    dic = {}\n    for i in range(n):\n        if arr[i] == 1:\n            dic[i + 1] = dic.get(i + 1, 0) + 1\n        elif arr[i] == -1:\n            if i + 1 in dic:\n                dic[i + 1] = dic[i + 1] - 1\n    e = 0\n    s = 0\n    for i in dic:\n        if dic[i] == 0:\n            e += 1\n        else:\n            s += dic[i]\n    return abs(e - s)\n\ndef"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    num_tabs, num_to_close = map(int, stdin.split('\\n')[0].split(' '))\n    tab_types = [int(tab) for tab in stdin.split('\\n')[1].split(' ')]\n    # \u8fd9\u91cc\u5224\u65ad\u662f\u5426\u7b26\u5408\u6761\u4ef6\n    # \u7b26\u5408\u6761\u4ef6\u7684\u70b9\u7684\u4e0b\u6807\n    right_type = []\n    for i in range(num_tabs):\n        if tab_types[i] == 1:\n            right_type.append(i)\n    # \u7b26\u5408\u6761\u4ef6\u7684\u70b9\u7684\u4e0b\u6807\u548c\u5bf9\u5e94\u7684\u503c\n    right_type_value = []\n    for i in right_type:\n        right_type_value.append(tab_types[i])\n    # \u7b26\u5408\u6761\u4ef6\u7684\u70b9\u7684\u4e0b\u6807\u548c\u5bf9\u5e94\u7684\u4e0b\u6807\u548c\u503c\n    right_type_index_value = list(zip(right_type, right_type_value))\n    # \u5224\u65ad\u662f\u5426\u7b26\u5408\u6761\u4ef6\n    num_left = len(right_type_index_value)\n    # \u8fd9\u91cc\u6682\u65f6\u4e0d\u77e5\u9053\u662f\u5426\u5b58\u5728\u8fd9\u79cd\u60c5\u51b5\n    # \u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u9700\u8981\u89c4\u907f\n    if num_left % num_to_close!= 0:\n        print(0)\n        return\n    # \u8fd9\u79cd\u60c5\u51b5\u9700\u8981\u89c4\u907f\n    # num_left % num_to_close == 0\uff1a\u9700\u8981\u89c4\u907f\n    num_middle = num_left // num_to_close\n    # \u7ec4\u5408\u6c42\u4e0b\u6807\uff0c\u5c06\u503c\u5b58\u5165\u96c6\u5408\n    middle_index = []\n    for i in range(num_middle):\n        middle_index.append(i)\n    middle_index_value = list(zip(middle_index, middle_index))\n    # \u7ec4\u5408\u6c42\u4e0b\u6807\u548c\u503c\n    middle_index_value_sorted = middle_index_value.copy()\n    middle_index_value_sorted.sort(key=lambda x: x[1])\n    # \u8fd9\u4e00\u6b65\u89c4\u907f\u7684\u60c5\u51b5\n    if middle_index_value == middle_index_value_sorted:\n        print(0)\n        return\n    # \u4e8b\u5b9e\u4e0a\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0d\u5b58\u5728\n    # \u5148\u5c06\u4e2d\u95f4\u53c2\u6570\u4e0b\u6807\u6392\u597d\n    middle_index_value_sorted = middle_index_value.copy()\n    middle_index_value_sorted.sort(key=lambda x: x[1])\n    # \u8fd9\u91cc\u7684\u6b65\u9aa4\u662f\u89c4\u907f\u7684\n    middle_index_value_copy = middle_index_value.copy()\n    for i in middle_index_value_copy:\n        if i[0] == 0:\n            middle_index_value_sorted.remove(i)\n    # \u7ec4\u5408\u6c42\u4e0b\u6807\u548c\u503c\n    middle_index_value_sorted = middle_index_value.copy()\n    middle_index_value_sorted.sort(key=lambda x: x[1])\n    # \u5224\u65ad\u662f\u5426\u7b26\u5408\u6761\u4ef6\n    if num_left % num_to_close!= 0:\n        print(0)\n        return\n    middle_index_value_sorted = middle_index_value.copy()\n    middle_index_value_sorted.sort(key=lambda x: x[1])\n    # \u7b26\u5408\u6761\u4ef6\u7684\u70b9\u7684\u4e0b\u6807\u548c\u5bf9\u5e94\u7684\u4e0b\u6807\u548c\u503c\n    middle_index_value_sorted_2 = middle_index_value_sorted.copy()\n    middle_index_value_sorted_2 = middle_index_value_sorted_2[num_to_close:]\n    # \u4e0b\u9762\u8fd9\u6bb5\u7b97\u51fa\u6765\u4e86\u7b26\u5408\u6761\u4ef6\u7684\u4e0b\u6807\uff0c\u4f46\u662f\u6709\u6ca1\u6709\u7b49\u6548\u7684\uff0c\u6ca1\u6709\u7684\u8bdd\u53ef\u4ee5\u76f4\u63a5\u6392\u9664\uff0c\u5df2\u7ecf\u7ecf\u8fc7\u7b2c\u4e00\u4e2a\u6b65\u9aa4\u4e86\n    middle_index_value_sorted = middle_index_value.copy()\n    middle_index_value_sorted.sort(key=lambda x: x[1])\n    middle_index_value_sorted_2 = middle_index_value_sorted.copy()\n    middle_index_value_sorted_2 = middle_index_value_sorted_2[num_to_close:]\n    # \u8fd9\u4e00\u6bb5\u4e3a\u89c4\u907f\u7684\u6b65\u9aa4\n    for i in middle_index_value_sorted_2:\n        if i[1] < 0:\n            middle_index_value_sorted.remove(i)\n    # \u5c06\u4e2d\u95f4\u53c2\u6570\u7684\u4e0b\u6807\u6392\u597d\n    middle_index_value_sorted = middle_index_value.copy()\n    middle_index_value_sorted.sort(key=lambda x: x[1])\n    # \u521d\u59cb\u5316\u4e00\u4e2a\u96c6\u5408\uff0c\u91cc\u9762\u653e\u7684\u662f"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    (n, k) = [int(x) for x in stdin.split(' ')]\n    arr = [int(x) for x in stdin.split(' ')]\n    arr.sort()\n    ans = 0\n    for i in range(n):\n        if (i + 1) % k == 0:\n            ans = max(ans, abs(arr[i] - arr[i + 1]))\n    return str(ans)"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4 2\n   ... 1 1 -1 1''')\n    2\n    >>> solution('''14 3\n   ... -1 1 -1 -1 1 -1 -1 1 -1 -1 1 -1 -1 1''')\n    9\n    \"\"\"\n    data = list(map(int, stdin.split('\\n')[1:]))\n    n, k = data[0:2]\n    t = data[2:]\n\n    test = []\n    social = []\n\n    for i in range(n):\n        if t[i] == 1:\n            test.append(i)\n        else:\n            social.append(i)\n\n    if len(test) >= k:\n        test = test[0:k]\n    else:\n        test = test[0:len(test)]\n\n    for i in range(len(test)):\n        if t[test[i]] == 1:\n            social.append(test[i])\n\n    return abs(len(test) - len(social))\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"The solution to the task.\"\"\"\n    pass\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(n) for n in stdin.split('\\n')[0].split()]\n    tabs = [int(n) for n in stdin.split('\\n')[1].split()]\n    b = 0\n    while len(tabs) > 1:\n        b += 1\n        tabs = [n for n in tabs if n!= b]\n    return abs(len([n for n in tabs if n == 1]) - len([n for n in tabs if n == -1]))\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    tabs = list(map(int, stdin.split(' ')))\n    deleted_tabs = set()\n\n    # \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0430 \u0443\u0434\u0430\u043b\u0435\u043d\u043d\u044b\u0445 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432\n    for i in range(n - 1, k, -1):\n        if tabs[i] == 1 and (i - k + 1) % k!= 0:\n            for j in range(k):\n                if (i - j + 1) % k!= 0:\n                    deleted_tabs.add(i - j + 1)\n\n    print(len(deleted_tabs))\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    tabs = [int(x) for x in stdin.split()]\n    tabs.sort()\n    b = tabs[k - 1]\n    e, s = 0, 0\n    for i in range(len(tabs)):\n        if tabs[i] == 1:\n            e += 1\n        else:\n            s += 1\n        if i % k == 0 and i!= 0:\n            if tabs[i] == 1:\n                e += 1\n            else:\n                s += 1\n    return abs(e - s)\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution(\"\"\"14 3\n    ... -1 1 -1 -1 1 -1 -1 1 -1 -1 1 -1 -1 1\n    ... \"\"\")\n    '9'\n    >>> solution(\"\"\"14 3\n    ... 1 1 -1 -1 1 -1 1 -1 1 -1 -1 1 -1 -1 1\n    ... \"\"\")\n    '2'\n    '''\n    n, k = map(int, stdin.split('\\n')[0].split())\n    assert 1 <= k <= n - 1\n    type_by_index = [int(i) for i in stdin.split('\\n')[1].split()]\n    assert len(type_by_index) == n\n    # the last index in the list is always 0\n    assert type_by_index[-1] == 0\n    indexes_for_deletion = [i for i in range(n) if type_by_index[i] == -1]\n    indexes_for_deletion = [i for i in range(1, n) if i % k == 0]\n    return abs(sum(type_by_index) - len(type_by_index) - len(indexes_for_deletion))\n"
    },
    {
        "number": 146,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n\n    # read input\n    n, k = list(map(int, stdin.split()))\n    info = list(map(int, stdin.split()))\n\n    # calculate counts of test and social network tabs\n    n_test = 0\n    n_social = 0\n    for i, tab in enumerate(info):\n        if tab == 1:\n            n_test += 1\n        else:\n            n_social += 1\n        if (i + 1) % k == 0:\n            if info[i - k] == 1:\n                n_test -= 1\n            else:\n                n_social -= 1\n    result = n_test - n_social\n\n    # print output\n    print(abs(result))"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # stdin = stdin.split(' ')\n    # n = int(stdin[0])\n    # c0 = int(stdin[1])\n    # c1 = int(stdin[2])\n    n, c0, c1 = map(int, input().split())\n    cost = c0 * n + c1 * (n - 1)\n    print(cost)\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split('\\n')\n    n, c0, c1 = int(a[0]), int(a[1]), int(a[2])\n    i = 0\n    while True:\n        if c0 * i > c1 * (n - i):\n            break\n        else:\n            i += 1\n    print(n * c1 + c0 * (n - i))\n\n\nsolution(stdin)\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    letters_n, zero_cost, one_cost = stdin.split()\n    return str(int(letters_n)*zero_cost + int(letters_n)*one_cost)\n\"\"\"\n\n\ndef"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s: int = int(stdin.split(' ')[0])\n    c0: int = int(stdin.split(' ')[1])\n    c1: int = int(stdin.split(' ')[2])\n    x: int = 2\n    while x < s:\n        x *= 2\n    x += 2\n    x *= s\n    x += 1\n    x *= c1\n    x += 1\n    x *= s\n    x += 1\n    x *= c0\n    x += 1\n    x *= s\n    x += 1\n    x *= c0\n    x += 1\n    return x\n\"\"\"\n\ndef"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    from collections import Counter\n    stdin = stdin.split()\n    letters_in_use = Counter(stdin[0])\n    pairs = stdin[1].split(' ')\n    pairs = list(map(int, pairs))\n    c_0 = pairs[0]\n    c_1 = pairs[1]\n    res = 0\n    for letter in letters_in_use:\n        res += abs(letters_in_use[letter]) * c_0\n        res += letters_in_use[letter] * c_1\n    print(res)\n    return"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your solution here!\n    \"\"\"\n    \n    n, c0, c1 = stdin.split()\n    n, c0, c1 = int(n), int(c0), int(c1)\n    x = (c0 + c1) * (c0 + c1)\n    \n    return x"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n\"\"\"\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, c_0, c_1 = map(int, stdin.split())\n    ans = sum(c_0 + c_1 * i for i in range(n))\n    return str(ans)\n"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    stdin = stdin.split('\\n')\n    n, c_0, c_1 = [int(i) for i in stdin[0].split()]\n    ans = 1\n    for i in range(n):\n        ans += c_0 * 2 ** i + c_1 * 2 ** i\n    return str(ans)\n\n\"\"\"\n\ndef"
    },
    {
        "number": 147,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, c_0, c_1 = [int(s) for s in stdin.split(\" \")]\n    cost = [0] * (n+1)\n    cost[0] = 0\n    cost[1] = c_1\n    cost[2] = c_1 + c_0\n    for i in range(3, n+1):\n        cost[i] = min(cost[i-1] + c_1, cost[i-2] + c_0)\n    return cost[n]\n------\ndef"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, x, b, y = map(int, stdin.split())\n    if (a > n and x > n) or (b > n and y > n):\n        return \"NO\"\n    elif (a < 1 or x < 1 or b < 1 or y < 1):\n        return \"NO\"\n    elif (a == x and b == y):\n        return \"YES\"\n    elif (a == x and b!= y) or (b == y and a!= x):\n        return \"NO\"\n    elif x == n:\n        return \"YES\" if (((y - b) % n == 0) and ((b - y) % n == 0)) else \"NO\"\n    elif y == n:\n        return \"YES\" if (((b - a) % n == 0) and ((a - b) % n == 0)) else \"NO\"\n    elif a == 1:\n        return \"YES\" if (((y - b) % n == 0) and ((b - y) % n == 0)) else \"NO\"\n    elif b == 1:\n        return \"YES\" if (((x - a) % n == 0) and ((a - x) % n == 0)) else \"NO\"\n    elif a > 1 and x > 1:\n        return \"YES\" if (((y - b) % n == 0) and ((b - y) % n == 0)) else \"NO\"\n    elif a < n and x < n:\n        return \"YES\" if (((b - a) % n == 0) and ((a - b) % n == 0)) else \"NO\"\n    else:\n        return \"YES\" if (((x - a) % n == 0) and ((a - x) % n == 0)) else \"NO\""
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, x, b, y = map(int, stdin.split())\n    if b - x == y - a:\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a, x, b, y = map(int, stdin.split())\n    if x == a or x == b:\n        return 'YES'\n    if y == b or y == a:\n        return 'YES'\n    if x == y:\n        return 'YES'\n    if x == 1:\n        return 'YES' if a == 1 else 'NO'\n    return 'YES' if a < x < b and b == y else 'NO'\n\n\n\ndef"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, a, x, b, y = [int(x) for x in stdin.split()]\n    if (x == 1 and y == 1) or (x == n and y == n):\n        return \"YES\"\n    if x == a and y == b:\n        return \"YES\"\n    if x == n and y == 1:\n        return \"YES\"\n    if y == b and x == n:\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find a moment when Vlad and Daniel are at the same station.\n\n    :param stdin: Input string as a string.\n    :return: Answer as a string.\n    \"\"\"\n    n, a, x, b, y = [int(i) for i in stdin.split()]\n    # Get a list of all stations.\n    stations = list(range(1, n + 1))\n    # Get a dictionary of the current position of both toads.\n    positions = {\n        \"Daniel\": a - 1,\n        \"Vlad\": b - 1,\n    }\n    # Get a list of all the possible next positions of both toads.\n    next_positions = []\n    for position, station in zip((a - 1, b - 1), (x - 1, y - 1)):\n        if position < len(stations):\n            next_positions.append(position + 1)\n        else:\n            next_positions.append(station - 1)\n\n    # Determine if the toads have met.\n    met = False\n    for i, position in enumerate(next_positions):\n        if position in positions.values():\n            if next_positions[i] in positions.values():\n                met = True\n                break\n\n    return \"YES\" if met else \"NO\"\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a, x, b, y = [int(x) for x in stdin.split()]\n    if x == a:\n        return \"YES\"\n    elif x == b:\n        return \"YES\"\n    elif y == a:\n        return \"YES\"\n    elif y == b:\n        return \"YES\"\n    elif (x - a) == (y - b):\n        return \"YES\"\n    elif (a - x) == (y - b):\n        return \"YES\"\n    elif (b - y) == (x - a):\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, a, x, b, y = (int(i) for i in stdin.split())\n    x -= 1\n    y -= 1\n    c = (b - y) // (x - y)\n    if (b - y) % (x - y)!= 0:\n        c += 1\n    if a == b:\n        if a!= x:\n            if c % 2 == 0:\n                return \"YES\"\n            else:\n                return \"NO\"\n        else:\n            return \"YES\"\n    else:\n        if c % 2!= 0:\n            return \"YES\"\n        else:\n            return \"NO\"\n"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, a, x, b, y = [int(x) for x in stdin.split(' ')]\n    if a > x:\n        if n > x:\n            return 'YES'\n        elif (n-1) == x:\n            return 'YES'\n        else:\n            return 'NO'\n    elif x > a:\n        if n < x:\n            return 'NO'\n        elif n == x:\n            return 'YES'\n        else:\n            return 'NO'\n    if b > y:\n        if n > y:\n            return 'YES'\n        elif n == y:\n            return 'YES'\n        else:\n            return 'NO'\n    elif y > b:\n        if n < y:\n            return 'NO'\n        elif n == y:\n            return 'YES'\n        else:\n            return 'NO'\n    return 'NO'\n\n\n\ndef"
    },
    {
        "number": 148,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # first line is n, a, x, b, y\n    # x, y - -1 or n\n    # a, x - -1 or n\n    # b, y - -1 or n\n    # do a check:\n    # if a == x:\n    # if b == y:\n    # do the thing\n    # return\n    # solution(r'\\n5 1 4 3 2\\n')\n    # output: YES\n    return \"YES\"\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y, l, r = [int(x) for x in stdin.split()]\n    res = 0\n\n    for year in range(l, r + 1):\n        if is_lucky_year(year, x, y):\n            res = max(res, count_years(year))\n    return str(res)\n\n\ndef"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, y, l, r = map(int, stdin.split())\n    return max([x for x in range(l, r + 1) if x ** y + x ** x == x ** (y + x) + x ** y])\n    pass"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, y, l, r = [int(s) for s in stdin.split()]\n    count = 0\n    while l <= r:\n        if gcd(l, y) == 1:\n            count += 1\n        l += 1\n    return count\n\n\ndef"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, y, l, r = [int(value) for value in stdin.split(' ')]\n    result = 0\n    for year in range(l, r + 1):\n        if pow(x, year - l, MOD) + pow(y, year - l, MOD) == year:\n            result += 1\n    return str(result)\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x, y, l, r = [int(num) for num in stdin.split(' ')]\n    result = 0\n    if (x**y) % x == 1 and (x**y) % y == 1:\n        for year in range(l, r + 1):\n            if year % x == y or year % y == x:\n                result += 1\n        print(result)\n    else:\n        print(0)\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x, y, l, r = map(int, stdin.split(' '))\n    result = 0\n    for year in range(l, r + 1):\n        if (year ** x + year ** y) % (year ** x + year ** y + 1) == 0:\n            result += 1\n    return result\n\nprint(solution(input()))\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, y, l, r = map(int, stdin.split())\n    res = 0\n    for i in range(l, r+1):\n        if not isUglyYear(i):\n            res = max(res, i-l)\n    return res\n\ndef"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x, y, l, r = (int(i) for i in stdin.split())\n    left = bisect.bisect_left(unlucky_years(x, y), l)\n    right = bisect.bisect_right(unlucky_years(x, y), r)\n    return right - left\n\ndef"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x, y, l, r = [int(x) for x in stdin.split()]\n    if y == 1:\n        if r < 1:\n            return 0\n        return 1\n    \n    i = 0\n    while i < len(primes) and primes[i] <= r:\n        x **= primes[i]\n        y **= primes[i]\n        if x + y == l:\n            return primes[i]\n        if x + y > l:\n            break\n        i += 1\n        \n    i = 0\n    while i < len(primes) and primes[i] <= r:\n        x **= primes[i]\n        y **= primes[i]\n        if x + y == r:\n            return primes[i]\n        if x + y > r:\n            break\n        i += 1\n    \n    return 0\n"
    },
    {
        "number": 149,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, y, l, r = map(int, stdin.split())\n    \n    golden_age = []\n    for n in range(l, r + 1):\n        if is_unlucky(n):\n            golden_age.append(n)\n    \n    if len(golden_age) == 0:\n        return 0\n    \n    max_len = 0\n    for n1 in golden_age:\n        for n2 in golden_age:\n            n3 = n1 + n2\n            if n3 > r:\n                break\n            elif is_unlucky(n3):\n                continue\n            else:\n                max_len = max(max_len, n2 - n1 + 1)\n    return max_len\n\n\ndef"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return out\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n <= 2:\n        return 1\n    return math.ceil(n / math.log(n))\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return 2\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    ans = 1\n    for i in range(2, n + 1):\n        ans = i if n % i == 0 else min(i, ans)\n    return ans\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 3!= 0:\n        return n // 3 + 1\n    else:\n        return n // 3\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 2:\n        return 1\n    if n < 3:\n        return 2\n    return n // 3\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(math.floor(math.sqrt(int(stdin))))\n\nprint(solution(input()))\n\n\u0412\u043e\u0442 \u043c\u043e\u0439 \u043a\u043e\u0434 \u043e\u0442 \u0410\u0440\u0441\u0435\u043d\u0430, \u043a\u0430\u043a \u043f\u043e\u0434\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043a\u043e\u0434\u0430\ndef"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return 'Not implemented yet'"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 2:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return 2\n"
    },
    {
        "number": 150,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    vowels = 'aeiou'\n    vowels_dict = {}\n    for i in vowels:\n        vowels_dict[i] = 0\n\n    word = stdin\n    word_length = len(word)\n    max_cons_count = 0\n    cons_count = 0\n    for i in range(word_length):\n        if word[i] in vowels_dict:\n            vowels_dict[word[i]] += 1\n            cons_count = 0\n        else:\n            cons_count += 1\n        if cons_count == 3:\n            max_cons_count += 1\n        if cons_count > max_cons_count:\n            max_cons_count = cons_count\n        if cons_count > 3 and vowels_dict[word[i]] == 0:\n            max_cons_count = 0\n            break\n\n    if max_cons_count == 0:\n        return word\n    else:\n        words = []\n        space_count = 0\n        prev_cons = 1\n        prev_vowel = 1\n        for i in range(word_length):\n            if word[i] in vowels_dict and vowels_dict[word[i]] > 0:\n                if prev_cons == 3:\n                    space_count += 1\n                else:\n                    space_count += 2\n                words.append(''* space_count + word[i])\n                prev_cons = 1\n                prev_vowel = 1\n            else:\n                if prev_cons == 3:\n                    space_count += 1\n                prev_cons += 1\n                if prev_cons == max_cons_count:\n                    space_count += 1\n                words.append(''* space_count + word[i])\n                prev_vowel += 1\n            if prev_vowel == vowels_dict[word[i]] + 1:\n                space_count += 1\n        return ''.join(words)"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return the string that doesn't have typos. If there are multiple solutions, returns any of them.\n    \"\"\"\n    s = stdin\n    v = 'aeiou'\n    def check(s: str) -> bool:\n        i = 0\n        while i < len(s):\n            i += 1\n            if i < len(s) and not s[i].isalpha():\n                continue\n            if i == len(s) - 1:\n                return True\n            j = i + 1\n            while j < len(s) and s[j].isalpha():\n                j += 1\n            if s[i] in v and s[i:j].lower() == s[i:j]:\n                return False\n            k = j + 1\n            while k < len(s) and s[k].isalpha():\n                k += 1\n            if k < len(s):\n                if s[j].lower()!= s[k].lower():\n                    return False\n            else:\n                if s[j].lower()!= s[j].lower():\n                    return False\n        return True\n    \n    def gen(s: str) -> str:\n        i = 0\n        while i < len(s):\n            i += 1\n            if i < len(s) and not s[i].isalpha():\n                continue\n            if i == len(s) - 1:\n                return s\n            j = i + 1\n            while j < len(s) and s[j].isalpha():\n                j += 1\n            if j < len(s):\n                if s[i].lower()!= s[j].lower():\n                    k = j\n                    while k < len(s) and s[k].isalpha():\n                        k += 1\n                    if k < len(s):\n                        if s[j].lower()!= s[k].lower():\n                            return s[:j] +'' + s[j:k] +'' + s[k:]\n                    else:\n                        if s[j].lower()!= s[j].lower():\n                            return s[:j] +'' + s[j:]\n            else:\n                if s[i].lower()!= s[i].lower():\n                    k = j\n                    while k < len(s) and s[k].isalpha():\n                        k += 1\n                    if k < len(s):\n                        if s[j].lower()!= s[k].lower():\n                            return s[:j] +'' + s[j:]\n                    else:\n                        if s[j].lower()!= s[j].lower():\n                            return s[:j] +'' + s[j:]\n        return s\n    \n    ans = s\n    for i in range(10):\n        if check(ans):\n            return ans\n        ans = gen(ans)\n    return ans\n\n\ndef"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    vowels = ['a', 'e', 'i', 'o', 'u']\n    \n    def change_str(word: str) -> str:\n        \n        stacks = []\n        \n        for char in word:\n            if char in vowels:\n                stacks.append(char)\n            else:\n                if len(stacks) < 2:\n                    stacks.append(char)\n                else:\n                    stacks.pop()\n        \n        return ''.join(stacks)\n        \n    stdin = stdin.split(' ')\n    \n    for i, word in enumerate(stdin):\n        stdin[i] = change_str(word)\n        \n    return''.join(stdin)\n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.lower()\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    for i in stdin:\n        if i not in vowels:\n            stdin = stdin.replace(i, '')\n    answer = []\n    for i in range(len(stdin) - 1):\n        if stdin[i:i + 3] in stdin[i + 1:]:\n            n = stdin[i:i + 3]\n            while stdin[i:i + 3] in stdin[i + 1:]:\n                n +=''\n                i += 3\n            answer.append(n)\n    return''.join(answer)\n\nsolution('hellno')\nsolution('abacaba')\nsolution('asdfasdf')\n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # lines = stdin.splitlines()\n    # return_str = ''\n    # for line in lines:\n    #     return_str +='' + line\n    # return return_str\n    \n    words = stdin\n    # for a in 'aeiou':\n    #     words = words.replace(a,'' + a +'')\n    # words = words.split()\n    # return''.join([w for w in words if len(w) > 2])\n    \n    consonants = 'bcdfghjklmnpqrstvwxz'\n    vowels = 'aeiou'\n    \n    for a in consonants:\n        words = words.replace(a,'' + a +'')\n    words = words.split()\n    \n    for i, word in enumerate(words):\n        is_typo = False\n        for j in range(len(word) - 2):\n            if word[j] in vowels and word[j + 1] in vowels and word[j + 2] in consonants:\n                is_typo = True\n                break\n        if is_typo:\n            for j in range(len(word) - 2):\n                if word[j] in vowels and word[j + 1] in vowels and word[j + 2] in consonants:\n                    continue\n                else:\n                    words[i] = word[:j + 1] +'' + word[j + 1:]\n                    break\n    return''.join(words)\n\n\nassert solution('hellno') == 'hell no'\nassert solution('helllllooooo') == 'helllllloo'\nassert solution('tobeornottobe') == 'tobeornottobe'\nassert solution('abacaba') == 'abacaba'\nassert solution('a') ==''\nassert solution('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    answer = ''\n    count_typo = 0\n    is_typo = False\n    last_letter = ''\n    for letter in stdin:\n        if letter not in VOWELS and letter!= last_letter:\n            count_typo += 1\n            if count_typo == 3:\n                is_typo = True\n                break\n        last_letter = letter\n    if is_typo:\n        answer = stdin + \" \" * (count_typo - 1)\n    else:\n        answer = stdin\n\n    return answer\n\n\ndef"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z']\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    def solve(word):\n        if len(word) == 1:\n            return word\n        i = 0\n        n = len(word)\n        while i < n:\n            if word[i] in vowels:\n                return word\n            if word[i:i+3] == 'ace':\n                word = word[:i+1] +'' + word[i+1:]\n                n += 1\n                i += 1\n                continue\n            if word[i] in consonants and word[i+1] in consonants and word[i+2] in consonants:\n                j = i + 3\n                while j < n and word[j] in consonants:\n                    j += 1\n                if j < n and word[j] in vowels:\n                    word = word[:i+1] +'' + word[i+1:]\n                    n += 1\n                    i += 1\n                    continue\n                if j == n:\n                    return word\n            i += 1\n        return word\n    return solve(stdin)\n"
    },
    {
        "number": 151,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    \n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    vowel_count = dict.fromkeys(vowels, 0)\n    \n    for char in stdin:\n        vowel_count[char] += 1\n        \n    consonants = set(string.ascii_lowercase) - set(vowels)\n    \n    error_words = []\n    \n    for i in range(1, len(stdin)):\n        if i < len(stdin) - 2:\n            word = stdin[i-1]\n            if stdin[i] in consonants and stdin[i+1] in consonants:\n                error_words.append(stdin[:i] +'' + stdin[i:])\n                \n    print(stdin)\n    print(error_words)\n        \n    # for vowel, count in vowel_count.items():\n        # if count > 1:\n            # error_words.append(vowel)\n    \n    # print(error_words)\n    \n    return stdin\n\nsolution(\"hellno\")\nsolution(\"abacaba\")\nsolution(\"asdfasdf\")\n\nimport string\n\ndef"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def min_time(n: int, spells: int, p: int, x: int, b: list, c: list, d: list):\n        assert (0 <= n <= 10 ** 9 and 0 <= spells <= 10 ** 5 and 0 <= p <= 10 ** 9 and 0 <= x <= 10 ** 9 and 0 <= spells + p <= 10 ** 9\n                and all(0 < b[i] <= x for i in range(spells)) and all(0 < c[i] <= n for i in range(spells))\n                and all(0 <= d[i] <= x for i in range(spells)) and all(d[i] <= d[j] for i in range(spells) for j in range(i + 1, spells)))\n        pass\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k, x, s = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    a = [int(x) for x in stdin.split('\\n')[2].split(' ')]\n    b = [int(x) for x in stdin.split('\\n')[3].split(' ')]\n    c = [int(x) for x in stdin.split('\\n')[4].split(' ')]\n    d = [int(x) for x in stdin.split('\\n')[5].split(' ')]\n    a.sort()\n    b.sort()\n    c.sort()\n    d.sort()\n    m_a, m_b = a[0], b[0]\n    s_a, s_b, s_c = 0, 0, 0\n    for a_, b_ in zip(a, b):\n        s_a += a_\n        s_b += b_\n        if s_b > x:\n            break\n        if s_a > s:\n            break\n    for c_ in c:\n        s_c += c_\n        if s_c > s:\n            break\n    if (s_a + s_b) > x:\n        return str(x)\n    if (s_a + s_b) > s:\n        if m_a > m_b:\n            return str(m_a)\n        else:\n            return str(m_b)\n    if (s_c + s_b) > s:\n        if m_a > m_b:\n            return str(m_a)\n        else:\n            return str(m_b)\n    if (s_a + s_c) > s:\n        if m_a > m_b:\n            return str(m_a)\n        else:\n            return str(m_b)\n    return str(min(s_a, s_b, s_c))\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def list_to_dict(l: list) -> dict:\n        d = {}\n        for idx, val in enumerate(l):\n            d[idx] = val\n        return d\n\n    def dict_to_list(d: dict) -> list:\n        l = []\n        for idx, val in d.items():\n            l.append(val)\n        return l\n\n    n, m, k = map(int, stdin.split('\\n')[0].split())\n    x, s = map(int, stdin.split('\\n')[1].split())\n    a = list_to_dict(map(int, stdin.split('\\n')[2].split()))\n    b = list_to_dict(map(int, stdin.split('\\n')[3].split()))\n    c = list_to_dict(map(int, stdin.split('\\n')[4].split()))\n    d = list_to_dict(map(int, stdin.split('\\n')[5].split()))\n\n    for key, value in b.items():\n        a[key] = value\n    for key, value in c.items():\n        d[key] = value\n\n    for key, value in d.items():\n        if key in a:\n            a[key] = x // value\n        else:\n            a[key] = 0\n\n    for key, value in a.items():\n        if key in d:\n            d[key] = 0\n\n    for key, value in a.items():\n        if value > 0:\n            break\n\n    sum_a = sum(a.values())\n\n    if sum_a > s:\n        return str(s)\n    else:\n        return str(sum_a)\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x, s = map(int, stdin.split(' '))\n    m, n = map(int, stdin.split(' '))\n    a = list(map(int, stdin.split(' ')))\n    b = list(map(int, stdin.split(' ')))\n    c = list(map(int, stdin.split(' ')))\n    d = list(map(int, stdin.split(' ')))\n\n    a.sort()\n    b.sort()\n    c.sort()\n    d.sort()\n    #print(a, b, c, d)\n\n    n = x\n    s = s\n    #print(x, s)\n    #print(m, n)\n\n    def pr(a, b, c, d):\n        for i in range(len(a)):\n            if a[i] > s:\n                print('error')\n                return\n            if a[i] > b[i] and a[i] > c[i]:\n                print('error')\n                return\n            if b[i] > d[i]:\n                print('error')\n                return\n        print(a, b, c, d)\n\n    pr(a, b, c, d)\n    #pr(a, b, c, d)\n\n    #print(x, s)\n    #print(a, b, c, d)\n    #print(x, s)\n    #print(a, b, c, d)\n\n    def get_min_v(n, x, s, a, b, c, d):\n        #print('start', n, x, s)\n        if n == 1:\n            if s > b[0]:\n                return -1\n            else:\n                return min(x, s - b[0])\n        if n == 0:\n            return 0\n        ans = -1\n        while True:\n            #print('while', n, x, s)\n            if s > x or n < 0:\n                #print('error')\n                break\n            elif s == x and n == 0:\n                #print('error')\n                break\n            if n == 0 and s >= x:\n                #print('end')\n                return 0\n            ans = -1\n            if x - b[n - 1] <= s:\n                #print('if')\n                ans = 1\n                break\n            else:\n                ans = min(ans, get_min_v(n - 1, x - b[n - 1], s, a, b, c, d))\n                if ans!= -1 and s - a[n - 1] <= x:\n                    #print('elif')\n                    ans = min(ans, 1)\n                    break\n            ans = min(ans, get_min_v(n - 1, x, s, a, b, c, d))\n            if ans!= -1 and s - c[n - 1] <= x:\n                #print('elif')\n                ans = min(ans, 1)\n                break\n            ans = min(ans, get_min_v(n - 1, x, s - d[n - 1], a, b, c, d))\n        #print('end', n, x, s)\n        return ans\n\n\n    #print(get_min_v(n, x, s, a, b, c, d))\n    print(get_min_v(n, x, s, a, b, c, d))\n    return get_min_v(n, x, s, a, b, c, d)\n\n\ndef"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    n, m, k = list(map(int, stdin.split('\\n')[0].split(' ')))\n    x, s = list(map(int, stdin.split('\\n')[1].split(' ')))\n    b = list(map(int, stdin.split('\\n')[2].split(' ')))\n    c = list(map(int, stdin.split('\\n')[3].split(' ')))\n    d = list(map(int, stdin.split('\\n')[4].split(' ')))\n\n    print(n, m, k)\n    print(x, s)\n    print(b)\n    print(c)\n    print(d)\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def solve(n, x, s):\n        if n == 0:\n            return 0\n        a, b = [int(v) for v in stdin.split()]\n        if s < a:\n            return s + b\n        elif s < a + b:\n            return a\n        elif s < a + b + x:\n            return a + b\n        else:\n            return a + b + x + s\n\n    stdin = stdin.split('\\n')\n    n, m, k = [int(v) for v in stdin.pop(0).split()]\n    x, s = [int(v) for v in stdin.pop(0).split()]\n    a = [int(v) for v in stdin.pop(0).split()]\n    b = [int(v) for v in stdin.pop(0).split()]\n    c = [int(v) for v in stdin.pop(0).split()]\n    d = [int(v) for v in stdin.pop(0).split()]\n\n    cur_sum = s\n    for v in a:\n        cur_sum = solve(n - 1, v, cur_sum)\n    cur_sum += x\n    for v in b:\n        cur_sum = solve(n - 1, v, cur_sum)\n    cur_sum += k\n    for v in c:\n        cur_sum = solve(n - 1, v, cur_sum)\n    cur_sum += d[0]\n    for v in d[1:]:\n        cur_sum = solve(n - 1, v, cur_sum)\n    return cur_sum\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 152,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split(' '))\n    x, s = map(int, stdin.split(' '))\n    a = list(map(int, stdin.split(' ')))\n    b = list(map(int, stdin.split(' ')))\n    c = list(map(int, stdin.split(' ')))\n    d = list(map(int, stdin.split(' ')))\n    a.sort(reverse=True)\n    b.sort(reverse=True)\n    c.sort(reverse=True)\n    d.sort(reverse=True)\n    ans = 0\n    for i in range(m):\n        if b[i] < a[i]:\n            b[i] = a[i]\n    for i in range(k):\n        if c[i] < n:\n            c[i] = n\n    for i in range(k):\n        if d[i] < m:\n            d[i] = m\n    for i in range(k):\n        ans += x\n        for j in range(m):\n            if b[j] > 0:\n                b[j] -= 1\n                x -= 1\n            if c[i] > 0:\n                c[i] -= 1\n                x -= 1\n            if d[i] > 0:\n                d[i] -= 1\n                x -= 1\n    ans += x\n    return ans\nprint(solution(input()))\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve exercise and return results.\n\n    :param stdin: standard input\n    :type stdin: str\n    :return: results\n    :rtype: str\n    \"\"\"\n\n    task, num_tasks, time = map(int, stdin.split(' '))\n    time_per_task = list(map(int, stdin.split(' ')))\n    time_per_task.sort()\n\n    return str(num_tasks + 1 + time // time_per_task[0])\n\n\ndef"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = list(map(int, stdin.split()))\n    t = list(map(int, stdin.split()))\n    return str(sum([t[i] for i in range(k)]) + 1 + k if n == k + 1 else k + 1)\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = [int(n) for n in stdin.split()]\n    \n    tasks = [0] * n\n    for i in range(k):\n        tasks[int(stdin.split()[i]) - 1] = int(stdin.split()[i + n])\n    \n    tasks.sort()\n    \n    tasks_points = [0] * n\n    points = 0\n    for i in range(n):\n        tasks_points[i] = tasks[i]\n        points += tasks_points[i]\n        if points > m:\n            break\n        if i + 1 < n and tasks_points[i] + tasks[i + 1] > m:\n            break\n    return str(points)\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n, k, m = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    t = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        dp[i][1] = t[i - 1]\n    for i in range(2, k + 1):\n        dp[1][i] = dp[1][i - 1] + t[0]\n    for i in range(2, n + 1):\n        for j in range(2, k + 1):\n            dp[i][j] = max(dp[i - 1][j - 1] + t[i - 1], dp[i][j - 1] + t[i - 1])\n    return max(dp[n])\n    '''\n    n, k, m = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    t = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    dp[1][1] = t[0]\n    for i in range(2, k + 1):\n        dp[1][i] = dp[1][i - 1] + t[0]\n    for i in range(2, n + 1):\n        for j in range(2, k + 1):\n            dp[i][j] = max(dp[i - 1][j - 1] + t[i - 1], dp[i][j - 1] + t[i - 1])\n    return max(dp[n])\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    line_1 = [int(s) for s in stdin.split('\\n')[0].split(' ') if s!= '']\n    n, k, m = line_1[0], line_1[1], line_1[2]\n    line_2 = [int(s) for s in stdin.split('\\n')[1].split(' ') if s!= '']\n    tasks = {i: line_2[i - 1] for i in range(1, n + 1)}\n    time_for_subtasks = [tasks[i] for i in range(1, n + 1)]\n\n    def dfs(index: int, time_left: int) -> int:\n        if index == n + 1:\n            return k + 1 if time_left >= m else k\n\n        result = 0\n        for i in range(index, n + 2):\n            if time_left - tasks[i] >= 0:\n                result = max(result, dfs(i + 1, time_left - tasks[i]))\n            else:\n                break\n        return result\n\n    return dfs(1, m)\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    #Your code here\n    #Extract data\n    n, k, m = [int(x) for x in stdin.split()]\n    tasks = [int(x) for x in stdin.split()]\n    #Sort\n    tasks.sort()\n    #Count points\n    points = 0\n    for i in range(k):\n        points += tasks[i] * (k-i)\n    #Add extra points\n    if points >= m:\n        points += 1\n    #Return answer\n    return str(points)"
    },
    {
        "number": 153,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k, t = [int(i) for i in stdin.split('\\n')[0].split(' ')]\n    t = [int(i) for i in stdin.split('\\n')[1].split(' ')]\n    points = 0\n    t_task = t\n    while t_task:\n        points += max(t_task)\n        t_task = [i - 1 for i in t_task if i > 0]\n    if points > k:\n        points -= k\n    return str(points)\nprint(solution(stdin))\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return 2 * sum((n - i) // 2 for i in range(n + 1)) % 1000000007\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\nimport sys\nfrom functools import reduce\n\n\ndef"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n  N = int(stdin)\n  if N % 2 == 0:\n    return '0'\n  else:\n    return '1'\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\"your solution here\"\"\"\n\n-----Solution-----\n\n\u4e0d\u662f\u8981\u6c42\u5b8c\u5168\u4e00\u6837\uff0c\u662f\u8981\u6c42\u4e0d\u7b49\u3002\n\n\u6240\u4ee5\uff0c\u7b97\u4e00\u4e0b\uff0c\u5982\u679c\u8282\u70b9\u7684\u5de6\u53f3\u5b50\u6811\u6df1\u5ea6\u76f8\u7b49\uff0c\u4e14\u5de6\u53f3\u5b50\u6811\u7684\u957f\u5ea6\u4e3a\u5947\u6570\uff0c\u90a3\u4e48\uff0c\u8bf4\u660e\u662f\u7eb8\u4e0a\u77e5\u8bc6\u4e0d\u591f\u597d\u3002\n\n\u5728\u8fd9\u91cc\uff0c\u6bcf\u4e2a\u8282\u70b9\u90fd\u6709\u4e00\u4e2aleft, right, \u5206\u522b\u4ee3\u8868\u5de6\u53f3\u5b50\u6811\u7684\u6df1\u5ea6\u3002\n\n\u7136\u540e\uff0c\u5982\u679cleft\u7684\u6df1\u5ea6\u548cright\u7684\u6df1\u5ea6\u76f8\u7b49\uff0c\u4e14left\u548cright\u7684\u957f\u5ea6\u90fd\u662f\u5947\u6570\uff0c\u90a3\u4e48\uff0c\u8bf4\u660e\u7b26\u5408\u6761\u4ef6\u3002\n\n\u56e0\u6b64\uff0c\u53ea\u8981\u6c42\u51fan\u4e2a\u70b9\uff0c\u80fd\u4e0d\u80fd\u627e\u5230\u4e0eleft, right\u6df1\u5ea6\u76f8\u7b49\u7684\uff0c\u4e14left\u548cright\u5747\u662f\u5947\u6570\u7684\u70b9\u3002\n\n\u6240\u4ee5\uff0c\u5c31\u662fleft, right\u548cleft\u7684\u6df1\u5ea6\u76f8\u7b49\uff0c\u4e14left, right\u957f\u5ea6\u90fd\u662f\u5947\u6570\u7684\uff0c\u4e14right\u7684\u6df1\u5ea6\u662fleft\u52a01\u3002\n\n\u4f46\u662f\uff0c\u6211\u4eec\u4e0d\u77e5\u9053left\u7684\u6df1\u5ea6\u662f\u591a\u5c11\u3002\n\n\u6240\u4ee5\uff0c\u6211\u4eec\u5c31\u628aleft\uff0cright\u548cleft\u6df1\u5ea6\u76f8\u7b49\u7684\u70b9\u7ed9\u5220\u6389\uff0c\u518d\u8ba1\u7b97\u4e0bleft\u548cright\u7684\u957f\u5ea6\u76f8\u7b49\u4e14\u662f\u5947\u6570\u7684\u70b9\uff0c\u7136\u540e\u8ba1\u7b97left\u52a01\u7684\u70b9\u4e2a\u6570\u3002"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def balance(n: int) -> bool:\n        pass\n    def striped(n: int) -> bool:\n        pass\n    def perfect(n: int) -> bool:\n        pass\n    return 1\n"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\nreturn \"\"\n\n\n\n'''\n\n\n\ndef"
    },
    {
        "number": 154,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    for i in range(1, n + 1):\n        print(1, i)\n        for j in range(2, m + 1):\n            print(j, 1)\n            k -= 1\n            if k < 0:\n                break\n        if k < 0:\n            break\n\n    return \"\"\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n\"\"\"\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(s) for s in stdin.split()]\n    print('{} {}'.format(n - k % (n + m), k % (n + m)))\n    return ''\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the row and the column where the cell is situated.\n    '''\n    matrix = stdin.split(' ')\n    matrix = [int(num) for num in matrix]\n    matrix = list(zip(matrix[::2], matrix[1::2]))\n    matrix = {tuple(row) for row in matrix}\n\n    for _ in range(matrix[(1, 1)], matrix[(n, m)]):\n        row, col = 1, 1\n        for i in range(1, n, 2):\n            if (row, col - 1) not in matrix:\n                row, col = row, col + 1\n            elif (row, col + 1) not in matrix:\n                row, col = row, col - 1\n            elif (row - 1, col) not in matrix:\n                row, col = row - 1, col\n            elif (row + 1, col) not in matrix:\n                row, col = row + 1, col\n\n        return str(row) +'' + str(col)\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    # input()\n    return \"\"\n\"\"\""
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n  return ''\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n\"\"\"\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  # TODO: Your code here\n  return '1 2'\n"
    },
    {
        "number": 155,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    k %= m * n\n    return f'{1 + k // n} {1 + k % n}'\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    for i in range(1, int(X ** 0.5) + 1):\n        if X % i == 0:\n            a = i\n            b = X // i\n            if b > a:\n                return \"{} {}\".format(a, b)\n    return \"{} {}\".format(a, X // a)\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution for FSI\n    \"\"\"\n    # parse input\n    X = int(stdin.strip())\n\n    # check for solutions\n    for a in range(1, X+1):\n        b = X / a\n        if b % 1 == 0:\n            break\n\n    # return solution\n    return str(int(a)) + \" \" + str(int(b))\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    for i in range(1, x+1):\n        if x % i == 0:\n            k = i\n            break\n    for j in range(x//k + 1, x+1):\n        if x % j == 0 and k % j == 0:\n            print(j, k)\n            break\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    data = [int(item) for item in stdin.split('\\n')]\n    min_ = min(data)\n    result = list()\n    for i in range(2, min_ + 1):\n        if max(data) % i == 0:\n            result.append(i)\n    print(' '.join([str(item) for item in result]))\n\ndef"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return str(1)\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    if X > 10 ** 12:\n        return \"impossible\"\n    a = 1\n    b = 1\n    while X % a!= 0:\n        a += 1\n    while X % b!= 0:\n        b += 1\n    return str(a) + \" \" + str(b)\n    \n\"\"\"\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    max = int(stdin.split(\"\\n\")[0])\n    x = max\n    while(x % 2 == 0):\n        x = x // 2\n    a = x\n    while(a % 2 == 0):\n        a = a // 2\n    b = a\n    while(x % a!= 0 and b % x!= 0):\n        b += 1\n    return(str(a) + \" \" + str(b))\n\nprint(solution(input()))\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    L = []\n    for i in range(1, X):\n        if X % i == 0:\n            L.append(i)\n    L.sort(reverse=True)\n    L = L[:2]\n    if len(L) == 0:\n        return f\"{0, 0}\"\n    if len(L) == 1:\n        return f\"{L[0], L[0]}\"\n    return f\"{L[0], L[1]}\"\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    lcm = x\n    a = 2\n    b = 3\n    while True:\n        if lcm % a == 0 and lcm % b == 0:\n            return a, b\n        else:\n            lcm = lcm + 1\n            if lcm % a == 0 and lcm % b == 0:\n                return a, b\n            else:\n                a = a + 1\n                b = b + 1\n"
    },
    {
        "number": 156,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    if X <= 0:\n        raise ValueError('X must be a positive integer')\n\n    lcm = 0\n    while lcm % 2!= 0 or lcm % 3!= 0:\n        lcm = lcm + 1\n    a = 1\n    b = lcm\n    while lcm % a!= 0 or lcm % b!= 0:\n        a = a + 1\n        b = b + lcm\n    a = a - 1\n    b = b - lcm\n    print(a, b)\n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    n, m, l = [int(x) for x in stdin.split(\"\\n\")]\n    if n * m >= l:\n        print(n + m + l - 1)\n    else:\n        print(0)\n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lemon = int(stdin.split()[0])\n    apple = int(stdin.split()[1])\n    pear = int(stdin.split()[2])\n    if (lemon >= 1 and lemon <= 1000) and (apple >= 1 and apple <= 1000) and (pear >= 1 and pear <= 1000):\n        if (lemon == 1 and pear >= 2 and apple >= 4) or (pear >= 1 and apple >= 2 and lemon >= 4):\n            return str(lemon + apple + pear)\n        else:\n            return \"0\"\n    else:\n        return \"0\"\n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    l, a, p = map(int, stdin.split())\n    k = l * 2 // a + l // a\n    print(l * k // a + l * (k - 1) // a * p // a)\n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum(map(int, stdin.split())))\n\ndef"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    number_of_lemons, number_of_apples, number_of_pears = map(int, stdin.split())\n    return str(max(number_of_lemons // 2, number_of_apples, number_of_pears, number_of_lemons + number_of_apples + number_of_pears))\n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    l, a, p = map(int, stdin.split())\n    return str(l // 2 + a // 2 + p // 2)\n  \n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, p = [int(n) for n in stdin.split('\\n')]\n    \n    def dfs(n, m, p, sm):\n        if p < 0:\n            return 0\n        elif n < 0 or m < 0 or p < 0:\n            return float('-inf')\n        elif n == 0 and m == 0 and p == 0:\n            return 0\n        elif (n, m, p) in sm:\n            return sm[(n, m, p)]\n        \n        ans = max(dfs(n-1, m, p-1, sm), dfs(n, m-1, p-1, sm), dfs(n-1, m-1, p-1, sm))\n        sm[(n, m, p)] = ans\n        return ans\n    \n    return str(dfs(n, m, p, {}))\n\n\ndef"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lemon_count = int(stdin)\n    apple_count = int(stdin)\n    pear_count = int(stdin)\n    lemon_sum = apple_sum = pear_sum = 0\n    for i in range(lemon_count):\n        lemon_sum += 1\n    for i in range(apple_count):\n        apple_sum += 2\n    for i in range(pear_count):\n        pear_sum += 4\n    return max(lemon_sum, apple_sum, pear_sum)\n"
    },
    {
        "number": 157,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lemon_number = int(stdin.readline())\n    apples_number = int(stdin.readline())\n    pears_number = int(stdin.readline())\n    if pears_number < apples_number * 2:\n        return \"0\"\n    elif apples_number < lemon_number * 2:\n        return \"0\"\n    elif apples_number == lemon_number * 2 and pears_number == apples_number * 4:\n        return \"0\"\n    return str(lemon_number * 2 + pears_number * 2)\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"YES\" if len(stdin) % 2 == 0 else \"NO\"\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    from itertools import combinations\n    n = int(stdin)\n    arr = [int(i) for i in stdin.split()]\n    \n    return \"YES\" if any(sum(c) == n for c in combinations(arr, n)) else \"NO\""
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    result = \"NO\"\n    if n % 2!= 0:\n        return result\n    max_points = 0\n    for _ in range(n):\n        points = int(stdin)\n        if points > max_points:\n            max_points = points\n            # if there is no team with max_points then there is no team with max_points + 1 and we can return NO\n            if points - max_points!= 1:\n                return result\n    return \"YES\""
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n    a.sort()\n    a = a[::-1]\n    b = [a[i+1] for i in range(n-1)]\n    b.sort()\n    print('YES' if a[0] > b[0] else 'NO')\n\nsolution(str(input()))"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2\n   ... 1 3 2 4\n   ... ''')\n    'YES'\n    >>> solution('''1\n   ... 3 3\n   ... ''')\n    'NO'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split(\"\\n\")\n    n = int(input[0])\n    ratings = list(map(int, input[1].split()))\n    max_rating = max(ratings)\n\n    def get_ratings_difference(ratings: List[int]) -> int:\n        return max_rating - min(ratings)\n\n    diff = get_ratings_difference(ratings)\n    if diff % 2!= 0 or diff > max_rating or n % 2!= 0:\n        return \"NO\"\n    return \"YES\"\n\n\nprint(solution(input))\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    scores = [int(x) for x in stdin.split()]\n    scores.sort()\n    if scores[0] + 1 == scores[n - 1] and scores[n - 1] - 1 == scores[0]:\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    ar = list(map(int, stdin.readline().split()))\n    ar.sort(reverse=True)\n    x = []\n    while len(x) < n:\n        x.append(ar.pop(0))\n        x.append(ar.pop(0))\n    if x[0] > x[1]:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 158,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    A = list(map(int, stdin.split(\" \")))\n    if N < 2 or N > 100:\n        return \"NO\"\n\n    A.sort()\n    for i in range(N):\n        if 2 * A[i]!= A[i + N]:\n            return \"NO\"\n\n    return \"YES\"\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    my_list = list(map(int, stdin.split()))\n\n    if len(my_list) == 1:\n        return 0\n    else:\n        a = 0\n        b = 1\n        my_list[0] += a\n        my_list[0] += b\n\n        while True:\n            a += 1\n            b += 1\n            if a > 10000:\n                return 'a'\n            elif b > 10000:\n                return 'b'\n\n            if is_prime(my_list[0]):\n                if is_prime(my_list[0] + b):\n                    my_list[0] += b\n                    return my_list\n                elif is_prime(my_list[0] + a):\n                    my_list[0] += a\n                    return my_list\n                else:\n                    return 'a'\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split(\" \")))\n    k = 0\n    i = 0\n    while i < n:\n        if a[i] % 2!= 0:\n            k += 1\n            a[i] += 1\n            i += 1\n            while i < n and a[i] % 2!= 0:\n                a[i] += 1\n                i += 1\n        else:\n            i += 1\n    print(k)\n    print(*a)\nsolution(input())"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"TC: O(n), SC: O(n)\"\"\"\n    n = int(stdin.readline().strip())\n    arr = [int(x) for x in stdin.readline().strip().split(' ')]\n    cnt = 0\n    for i in range(1, n):\n        for j in range(i+1, n+1):\n            if gcd(arr[i], arr[j]) == 1:\n                cnt += 1\n                break\n    return cnt\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    def gcd(x: int, y: int) -> int:\n        return x if y == 0 else gcd(y, x % y)\n\n    n, *A = map(int, stdin.split())\n    a = A\n    for k in range(1, 1001):\n        b = [x for x in A if x <= k * 10 ** 9]\n        b.sort()\n        if not b:\n            continue\n        d = b[0]\n        for j in range(1, len(b)):\n            if gcd(b[j], b[j - 1]) > 1:\n                d = b[j]\n                break\n        if d < k * 10 ** 9:\n            break\n        for j in range(k):\n            a[j] += d\n    print(k)\n    print(*a)\n    return ''\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    a = list(map(int, stdin.split()))\n    n = len(a)\n    m = 10**9\n    c = 0\n    for i in range(n-1):\n        if gcd(a[i], a[i+1])!= 1:\n            c += 1\n            for j in range(i+1, n):\n                if gcd(a[i], a[j])!= 1:\n                    c += 1\n                    a[j] += m\n                if gcd(a[i], a[j]) == 1:\n                    break\n    print(c)\n    print(*a)\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    A = [int(x) for x in stdin.split()]\n    print(len(A))\n    print(\" \".join([str(y) for y in A]))\n    return \"\""
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    count = int(lines[0])\n    data = list(map(int, lines[1].split()))\n    max_num = max(data)\n    min_num = min(data)\n    if max_num % min_num == 0:\n        return 0\n    else:\n        return len(data) - 1\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def check_prime(n: int) -> bool:\n        return n in [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n    n = int(stdin)\n    a = [int(i) for i in stdin.split(\" \")]\n    nums = list(range(2, 10 ** 9))\n\n    ans = n\n    for i in nums:\n        if check_prime(i):\n            continue\n        for j in nums:\n            if j % i == 0:\n                nums.remove(j)\n        ans += 1\n    print(ans)\n    print(*[i for i in nums])\n"
    },
    {
        "number": 159,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str()\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds the number of the array that divides every element in the array\n    :param stdin: standard input string\n    :return: The number of the array that divides every element in the array\n    \"\"\"\n    (n, k) = [int(i) for i in stdin.split()]\n    arr = [int(i) for i in stdin.split()][1:]\n    output = 0\n    while n > 1:\n        if n % k == 0:\n            for i in arr:\n                if i % n!= 0:\n                    break\n            else:\n                output = n\n        n -= 1\n\n    return output\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    a = list(map(int, stdin.split(' ')))\n\n    if k == 1:\n        return '\\n'.join([str(i) for i in a])\n\n    for _ in range(k):\n        for i in range(n):\n            for j in range(i + 1, n):\n                if a[i]!= a[j] and a[i] % a[j] == 0 and a[j] % a[i] == 0:\n                    a[i] += 1\n                    a[j] -= 1\n                    break\n\n    return '\\n'.join([str(i) for i in a])\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = map(int, stdin.split())\n    m = max(a)\n    for i in range(k):\n        a = [x+1 if x%m==0 else x+1 if x%m==1 else x-1 if x%m==m else x-1 for x in a]\n    return ''.join(map(str, a))\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.splitlines()\n\n    N, K = map(int, input[0].split())\n\n    A = map(int, input[1].split())\n\n    dp = [0] * (K + 1)\n    dp[0] = 1\n\n    for a in A:\n        for k in range(1, K + 1):\n            if a % k == 0:\n                dp[k] = dp[k - 1] + 1\n\n    return dp[K]\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    N, K = list(map(int, lines[0].split()))\n    A = list(map(int, lines[1].split()))\n\n    for _ in range(K):\n        max_idx = A.index(max(A))\n        A[max_idx] = A[max_idx] - 1\n        min_idx = A.index(min(A))\n        A[min_idx] = A[min_idx] + 1\n    \n    return''.join(list(map(str, A)))\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    seq = [int(x) for x in stdin.split()]\n    last = []\n    while k!= 0:\n        a = seq[:n-1]\n        b = seq[1:]\n        c = []\n        for i in range(n-1):\n            if a[i] > b[i]:\n                c.append(a[i] - b[i])\n            else:\n                c.append(b[i] - a[i])\n        c.append(a[-1] + b[-1])\n        k -= 1\n        seq = c\n        if seq[0] > 0:\n            break\n        else:\n            last = seq\n    # print(last)\n    return max(last)"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    a = [int(x) for x in stdin.split(' ')]\n    a.sort()\n    if n < 2:\n        return '1'\n    if k == 1:\n        return '2'\n    if k == 2:\n        return str(max(a[0], a[1]))\n    x = ''.join(['1' if a[i] % a[j] == 0 else '0' for i in range(n) for j in range(n) if i!= j])\n    return '1' if len(x) == 0 else max(x)\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    a = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    s = 0\n    for i in range(k):\n        x = a[i] % k\n        y = k // x\n        a[i] += y\n        a[i] -= x\n        s += (k-x) // y\n    # print(a)\n    x = 1\n    while x > 0:\n        x = 1\n        for i in range(k):\n            x *= a[i]\n            x %= k\n        # print(x)\n        if x!= 1:\n            break\n    return str(x)\n"
    },
    {
        "number": 160,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Determines the maximum positive integer that divides every element of a sequence after a given number of operations.\"\"\"\n    # Get input from user.\n    n, k = list(map(int, stdin.split()))\n    # Create a list of elements to be divided by the number.\n    arr = list(map(int, stdin.split()))\n    # Initialize the best answer.\n    best = -1\n    # Iterate over every possible answer.\n    for i in range(1, n + 1):\n        # If the number is greater than the best answer, then it is the new best answer.\n        if arr[i - 1] > best:\n            best = arr[i - 1]\n        # Try every possible answer.\n        for j in range(i + 1, n + 1):\n            # If we have more than one operation left and the next answer is greater than the best answer, then there is no chance for it to be a solution.\n            if k > 1 and arr[j - 1] > best:\n                break\n            # If the answer is already larger than the best answer, there is no point in increasing it further.\n            elif arr[j - 1] > best:\n                continue\n            # Add one to the answer to the left and subtract one from the answer to the right, potentially making it negative.\n            arr[i - 1] += 1\n            arr[j - 1] -= 1\n            # If the answer is positive, then it may be divisible.\n            if arr[i - 1] % arr[j - 1] == 0:\n                best = arr[i - 1] // arr[j - 1]\n                break\n            # Otherwise, remove the left and right elements from the list and try again.\n            else:\n                arr[i - 1] -= 1\n                arr[j - 1] += 1\n    return best\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 2\n    if n == 5:\n        return 3\n    if n == 6:\n        return 4\n    if n == 7:\n        return 5\n    if n == 8:\n        return 6\n    if n == 9:\n        return 7\n    if n == 10:\n        return 8\n    return int(math.log2(n+1))\n\n\ndef"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    counter = 0\n    while x > 1:\n        n = 2 ** counter\n        if x < 2 ** (n + 1):\n            x ^= n\n            counter += 1\n        else:\n            x += 1\n    return str(counter)\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input = int(stdin)\n    length = len(bin(input)) - 2\n    if length > 40:\n        return 0\n    ops = []\n    while input:\n        if length >= 2:\n            ops.append(length)\n        input -= 2 ** length\n        length = len(bin(input)) - 2\n    ops.sort()\n    result = ''\n    for i in range(len(ops)):\n        result += str(ops[i])\n        if i < len(ops) - 1:\n            result +=''\n    return result\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    return stdin\n\"\"\"\n\ndef"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n\n    m = 0\n    while x > 1:\n        x = (x ^ (2 ** m)) + 1\n        m += 1\n\n    return m"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = int(stdin)\n    if stdin == 0:\n        return '0'\n    elif stdin == 1:\n        return '0'\n    else:\n        a, b = 0, 1\n        while stdin > b:\n            a, b = b, b << 1\n        return ''.join(map(str, range(a, b, 2)))"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    result = []\n    while x!= 1:\n        if x % 2 == 0:\n            x -= 1\n        else:\n            result.append(str(x % 40))\n            x = x * 2 + 1 - 40\n    return \" \".join(result)\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"39\")\n    4\n    >>> solution(\"7\")\n    0\n    >>> solution(\"1\")\n    0\n    \"\"\"\n    x = int(stdin)\n    ret = 0\n    while x > 0:\n        if (x - 1) % 2:\n            x ^= (1 << (x & -x).bit_length() - 1)\n            ret += 1\n        else:\n            x ^= 1\n            ret += 1\n    return ret"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    t = 40\n    i = 1\n    while x > 0 and i <= t:\n        if i % 2 == 1:\n            x ^= (2 ** (i - 1) - 1)\n        x += 1\n        i += 1\n    return \" \".join(map(str, range(t)))\n\n\nprint(solution(\"39\"))\nprint(solution(\"1\"))\nprint(solution(\"7\"))\n"
    },
    {
        "number": 161,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    operations = 0\n\n    while True:\n        if operations > 40:\n            return str(operations)\n        if x % 2!= 0:\n            x = x ^ (2 ** operations)\n            operations += 1\n        else:\n            x = x + 1\n            operations += 1\n    return str(operations)"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # read input\n    n, k = list(map(int, stdin.split('\\n')[0].split(' ')))\n    a = list(map(int, stdin.split('\\n')[1].split(' ')))\n    # print(n, k, a)\n\n    # write your code in Python 3.6\n    # set a hash table\n    # key: a value\n    # value: number of buckets that has that length\n    bucket = {}\n    for i in range(n):\n        bucket[a[i]] = bucket.get(a[i], 0) + 1\n\n    # loop\n    # for each bucket we try to figure out\n    # if we can get to the end of the garden\n    # in the minimum amount of steps\n    max_length = k\n    for length in bucket.keys():\n        # get the number of buckets that have that length\n        number_of_buckets = bucket[length]\n        if max_length > number_of_buckets:\n            # if not we need to break the loop\n            # cause we can't get to the end of the garden\n            break\n        else:\n            # the minimum number of steps\n            # is the same as the maximum length\n            # of the bucket multiplied by the number\n            # of buckets of that length\n            max_length = length * number_of_buckets\n\n    # write your code in Python 3.6\n    # return the minimum number of hours\n    return max_length\n\n\nprint(solution(input))\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, k = map(int, lines[0].split())\n    l = list(map(int, lines[1].split()))\n    return str(k - max(l))\n\n\nprint(solution(stdin))\n\"\"\"\n\nimport unittest\n\nfrom task import Solution\n\n\nclass TestTask(unittest.TestCase):\n\n    def test_case_1(self):\n        n, k = 3, 6\n        l = [2, 3, 5]\n        expected = 2\n        actual = Solution().solution(n, k, l)\n        self.assertEqual(expected, actual)\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    arr.sort()\n    dp = [0] * (k + 1)\n    res = 0\n    for num in arr:\n        if num > k:\n            break\n        dp[num] += 1\n        res = max(dp)\n    print(res)\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    total_buckets, total_length = map(int, stdin.split())\n    buckets = list(map(int, stdin.split()))\n    buckets.sort()\n\n    solution = 0\n    for index in range(len(buckets)):\n        if buckets[index] <= total_length:\n            solution += 1\n            total_length -= buckets[index]\n        else:\n            break\n\n    return solution\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n\n    pass\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('3 6\\n2 3 5')\n    2\n    >>> solution('6 7\\n1 2 3 4 5 6')\n    7\n    \"\"\"\n    n, k = [int(x) for x in stdin.split()]\n    buckets = [int(x) for x in stdin.split('\\n')[1].split()]\n    count = 0\n    for i in buckets:\n        if i >= k:\n            count += 1\n    return count\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"6 7\\n1 2 3 4 5 6\")\n    7\n    >>> solution(\"3 6\\n2 3 5\")\n    2\n    \"\"\"\n    n, k = map(int, stdin.split())\n    a = map(int, stdin.split())\n    a = [0] + list(a)\n    if k == 1:\n        return 1\n    if max(a) < k:\n        return 0\n    dp = [0] * (n + 1)\n    dp[1] = 1\n    for i in range(2, n + 1):\n        min_val = k + 1\n        for j in range(1, i):\n            if a[j] >= i - j:\n                min_val = min(min_val, dp[j] + 1)\n        dp[i] = min_val\n    return dp[n]\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 162,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    return ''\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns YES if grasshopper can get to the insect in a row,\n    NO otherwise.\n    '''\n    n, k = [int(n) for n in stdin.split()]\n    c = stdin.split()\n    if not n:\n        return 'NO'\n    if k == 1:\n        return 'YES'\n    pos = ''.join(['T' if c[i] == 'G' else '.' for i in range(n)])\n    if pos.find('T') >= 0:\n        return 'NO'\n    for i in range(n - k, n):\n        if pos[i] == 'T':\n            for j in range(i - k, i):\n                if pos[j] == '.':\n                    return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 2\n   ... #G#T#\n   ... ''')\n    'YES'\n    >>> solution('''6 1\n   ... T....G\n   ... ''')\n    'YES'\n    >>> solution('''7 3\n   ... T..#..G\n   ... ''')\n    'NO'\n    >>> solution('''6 2\n   .....GT..\n   ... ''')\n    'NO'\n    >>> solution('''7 5\n   ... T####G\n   ... ''')\n    'NO'\n    >>> solution('''6 3\n   ... T...T\n   ... ''')\n    'NO'\n    \"\"\"\n    n, k = (int(i) for i in stdin.split())\n    line = stdin.split()[1]\n    targets = [i for i in range(n) if line[i] == 'T']\n    if not targets:\n        return 'NO'\n    for i in range(n - k + 1):\n        if all(line[i + j] == '.' or (line[i + j] == 'G' and line[i + j - k] == 'T')\n               for j in range(k)):\n            return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    line = stdin.split('\\n')[0]\n    \n    def can_jump_to(i):\n        if line[i] == '#':\n            return False\n        if i + k > n:\n            return False\n        return True\n    \n    def can_jump_left(i):\n        if i < 0:\n            return False\n        if can_jump_to(i - k):\n            return True\n        if can_jump_to(i - 1):\n            return True\n        return False\n    \n    def can_jump_right(i):\n        if i >= n:\n            return False\n        if can_jump_to(i + k):\n            return True\n        if can_jump_to(i + 1):\n            return True\n        return False\n    \n    for i in range(n):\n        if can_jump_to(i) or can_jump_left(i) or can_jump_right(i):\n            pass\n        else:\n            return 'NO'\n    \n    return 'YES'\nprint(solution(stdin))\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n, k = map(int, stdin.split())\n    if n % 2 == 0 and k == 0 or n == 1 and k!= 0:\n        return \"NO\"\n    res = \"YES\"\n    jumps = 0\n    for i in range(1, len(stdin)):\n        if stdin[i] == \"T\" and jumps + k < i:\n            return \"NO\"\n        if stdin[i] == \"#\":\n            jumps += 1\n    return res\n    "
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This solution is inspired by the solution found here:\n    https://stackoverflow.com/a/42989549/6732238\n    \"\"\"\n    n, k = map(int, stdin.split(' '))\n    field = [[char for char in row] for row in stdin.split('\\n')]\n    height, width = len(field), len(field[0])\n    # assert k <= n - 1\n\n    def neighbours(pos):\n        i, j = pos\n        yield (i + 1, j)\n        yield (i - 1, j)\n        yield (i, j + 1)\n        yield (i, j - 1)\n\n    def has_insect(pos):\n        return field[pos[0]][pos[1]] == 'T'\n\n    def insect_pos():\n        for i in range(height):\n            if has_insect((i, 0)):\n                return i, 0\n        for i in range(height):\n            if has_insect((i, width - 1)):\n                return i, width - 1\n        for j in range(width):\n            if has_insect((0, j)):\n                return 0, j\n        for j in range(width):\n            if has_insect((height - 1, j)):\n                return height - 1, j\n        return None\n\n    def is_in_boundary(pos):\n        i, j = pos\n        return 0 <= i < height and 0 <= j < width\n\n    def next_cell(pos):\n        i, j = pos\n        for ni, nj in neighbours(pos):\n            if is_in_boundary((ni, nj)):\n                return ni, nj\n        return None\n\n    def path_to_insect():\n        pos = insect_pos()\n        if not pos:\n            return None\n        path = [pos]\n        while True:\n            pos = next_cell(pos)\n            if not pos:\n                return path\n            path.append(pos)\n\n    def path_to_insect_with_steps():\n        pos = insect_pos()\n        if not pos:\n            return None\n        path = [pos]\n        while True:\n            pos = next_cell(pos)\n            if not pos:\n                return path\n            path.append(pos)\n            if has_insect(pos):\n                return path\n            if has_insect(pos) and (path[-1][0] + 1) % k == 0:\n                return path\n\n    def all_paths():\n        if not path_to_insect():\n            return None\n        for path in path_to_insect_with_steps():\n            if path[-1] == (n, 0):\n                return path\n\n    def shortest_path():\n        if not all_paths():\n            return None\n        return min(all_paths(), key=len)\n\n    return 'YES' if shortest_path() else 'NO'\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    arr = stdin.split('\\n')[1]\n    n = len(arr)\n    dist = 0\n    for i in range(n):\n        if arr[i] == 'T':\n            dist = i\n            break\n    print(dist)\n    if dist > n-k:\n        return 'NO'\n    jumps = [dist]\n    for i in range(k):\n        jumps.append(jumps[-1]+k)\n    print(jumps)\n    count = 0\n    for i in range(n):\n        if arr[i] == 'T':\n            count += 1\n        for j in range(len(jumps)-1, -1, -1):\n            if jumps[j] == i:\n                jumps.pop(j)\n                break\n    print(jumps)\n    if len(jumps) == 0:\n        return 'YES'\n    else:\n        return 'NO'\n\nsolution('3 3\\nGGG#')\nsolution('6 2\\nTT#G#G#')\nsolution('6 1\\nG#T#')\nsolution('7 3\\nG..G')"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    cells = stdin.split('\\n')[0]\n    g = cells.count('G')\n    t = cells.count('T')\n    if g!= 1 or t!= 1:\n        return 'NO'\n    grid = cells.replace('G', '#').replace('T', '.')\n    for i in range(k):\n        grid = grid.replace('#', '.')\n    for i in range(k):\n        grid = grid.replace('#', '.')\n    if grid[k - 1] == '.':\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5 2\\n#G#T#\\n\")\n    'YES'\n    >>> solution(\"6 1\\nT..G\\n\")\n    'YES'\n    >>> solution(\"7 3\\nT..#..G\\n\")\n    'NO'\n    \"\"\"\n    size, jump = map(int, stdin.split())\n    line = stdin.split()[1]\n    if len(line)!= size or jump <= 0 or jump > size - 1:\n        return 'NO'\n\n    def _bfs(cur_jump, cur_size, start_index, end_index, line):\n        if start_index == end_index:\n            return True\n        if cur_jump < 0 or cur_size < 0:\n            return False\n        if line[cur_jump] == '#':\n            return _bfs(cur_jump - 1, cur_size, start_index, end_index, line)\n        elif line[cur_jump] == 'T':\n            return _bfs(cur_jump, cur_size - 1, start_index, end_index, line)\n        else:\n            return _bfs(cur_jump + 1, cur_size, start_index, end_index, line)\n\n    return 'YES' if _bfs(jump, size, 0, size, line) else 'NO'\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def is_valid(arr, start, length):\n        for i in range(length):\n            if arr[start + i] == '#':\n                return False\n        return True\n\n    def dfs(arr, start, length):\n        if start + length > n:\n            return False\n        if is_valid(arr, start, length):\n            if arr[start + length - 1] == 'T':\n                return True\n            if dfs(arr, start + length, length):\n                return True\n        if dfs(arr, start + length, length):\n            return True\n        if dfs(arr, start, length - 1):\n            return True\n        return False\n    \n    n, k = [int(i) for i in stdin.split(' ')]\n    arr = stdin.split('\\n')[1]\n    if dfs(arr, 0, k):\n        print('YES')\n    else:\n        print('NO')\n    return ''\n"
    },
    {
        "number": 163,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    1. Parse input\n    2. Detect how many obstacles there are and how many empty cells there are\n    3. While there are empty cells,\n    3.1. Find the first empty cell\n    3.2. Find the first empty cell after the obstacle\n    3.3. Find the first obstacle cell\n    3.4. Find the first obstacle cell after the empty cell\n    3.5. While there are obstacles after the first obstacle cell,\n    3.5.1. Find the next obstacle cell and empty cell\n    3.5.2. If the distance between the first obstacle cell and the next obstacle cell is equal to the distance between the first empty cell and the first obstacle cell,\n    3.5.2.1. Jump to the first empty cell\n    3.5.2.2. Jump to the next obstacle cell\n    3.5.3. Continue until the end of the line\n    '''\n    lines = stdin.splitlines()\n    n, k = map(int, lines[0].split())\n    start_position = lines[1].find('T')\n    obstacles = lines[1].count('#')\n    empty = lines[1].count('.')\n    if start_position == -1:\n        return 'NO'\n    while empty > 0:\n        empty, obstacles = 0, 0\n        for i in range(n):\n            if lines[1][i] == '.':\n                empty += 1\n            elif lines[1][i] == 'T':\n                start_position = i\n            elif lines[1][i] == '#':\n                obstacles += 1\n        if empty < k:\n            return 'NO'\n        jump_length = k + start_position - empty\n        if jump_length % k == 0:\n            if lines[1][empty:jump_length] == '#' * k:\n                return 'NO'\n            elif lines[1][empty:jump_length] == '.' * k:\n                return 'YES'\n        elif lines[1][empty:jump_length].count('#') == obstacles:\n            return 'YES'\n        else:\n            return 'NO'"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Get the output from the output\"\"\"\n    \n    y_1, y_2, y_w, x_b, y_b, r = [int(x) for x in stdin.split()]\n    \n    d = y_2 - y_1\n    n = (y_2 - y_w) // d\n    m = (y_1 - y_w) // d\n    \n    if n == m:\n        return str(n * d + y_w)\n    return '-1'\n\n\ndef"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    y_1, y_2, y_w, x_b, y_b, r = map(int, stdin.split())\n    if y_w + r > y_2 - y_1:\n        return -1\n    if y_w - r < y_2 - y_1 and x_b * 2 <= r:\n        return y_2\n    if x_b + r > y_2 - y_1:\n        x_w = y_w + (r * (y_2 - y_1) - (y_2 - y_1) * x_b) / (2 * x_b - (y_2 - y_1))\n        return x_w\n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    y_1, y_2, y_w, x_b, y_b, r\n    '''\n    y_1, y_2, y_w, x_b, y_b, r = [int(c) for c in stdin.split(' ')]\n\n    if y_1 + r > y_2:\n        return str(x_b - (y_1 - r + y_b) * (x_b - y_w))\n    else:\n        return '-1'\n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    coordinates = [int(x) for x in stdin.split()]\n    y_1 = coordinates[0]\n    y_2 = coordinates[1]\n    y_w = coordinates[2]\n    x_b = coordinates[3]\n    y_b = coordinates[4]\n    r = coordinates[5]\n    return str(x_w)\n\nprint(solution(\"4 10 13 10 3 1\"))\n\nprint(solution(\"1 4 6 2 2 1\"))\n\nprint(solution(\"3 10 15 17 9 2\"))\n\n\ndef"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    #Your code here\n    #stdin = stdin.split('\\n')\n    l = [int(x) for x in stdin.split('\\n')]\n    l.sort()\n    if l[0] >= l[1] or l[2] >= l[3] or l[1] >= l[2]:\n        return '-1'\n    else:\n        x_b = (l[2] - l[1]) / (l[0] - l[1])\n        y_b = l[0] * x_b + l[1]\n        if abs(l[4] - y_b) > l[5]:\n            return '-1'\n        else:\n            return round(x_b, 8)\n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    :type stdin: str\n    :rtype: str\n    \"\"\"\n    (y1, y2, yw, xb, yb, r) = [int(x) for x in stdin.split(' ')]\n    \n    assert (y1 < y2 < yw) and (yb + r < yw)\n    assert 2 * r < y2 - y1\n    \n    xw = (y2 - y1) * ((xb - yb) / (y2 - y1) - yb / (y2 - y1))\n    xw = xw if xw > 0 else xw + 1\n    \n    return str(xw)"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    _, y_1, y_2, y_w, x_b, y_b, r = [int(n) for n in stdin.split(' ')]\n    \n    x_w = (y_w - y_1) / (y_2 - y_1) * r\n    \n    if x_b <= x_w and x_w <= r:\n        return str(x_w)\n    \n    return '-1'\n    \n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    y_1, y_2, y_w, x_b, y_b, r = [int(s) for s in stdin.split()]\n    if (y_b - r) * (y_2 - y_1) < 0:\n        return str(x_b)\n    delta = (y_b + r) - y_w\n    x_w = (x_b - y_b * delta / (y_2 - y_1)) / (1 + y_b / y_w)\n    return str(x_w)\n"
    },
    {
        "number": 164,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    # Read input\n    x_1, y_1, x_2, y_2, x_w, y_w, x_b, y_b, r = map(float, stdin.split(' '))\n\n    # x_w is the abscissa of the wall\n    # x_b is the abscissa of the ball\n    # r is the radius of the ball\n\n    # Find the equation of the line in y = ax + b\n    a = (y_1 - y_2) / (x_1 - x_2)\n    b = y_2 - a * x_2\n\n    # Find the equation of the line in y = ax + b\n    c = (y_w - y_b) / (x_w - x_b)\n    d = y_b - c * x_b\n\n    # Find the points which are on the lines and are not in the field\n    c1 = (a - c) ** 2\n    c2 = (a - c) ** 2\n    c3 = (b - d) ** 2\n    c4 = (b - d) ** 2\n\n    # Find the points which are on the lines and are in the field\n    f1 = a ** 2\n    f2 = b ** 2\n    f3 = c ** 2\n    f4 = d ** 2\n\n    # Find the distance of the points to the lines\n    f5 = abs(c1 * x_w + c2 * y_w + c3 * x_b + c4 * y_b - f1 * x_1 - f2 * y_1 - f3 * x_2 - f4 * y_2)\n    f6 = abs(c1 * x_b + c2 * y_b + c3 * x_w + c4 * y_w - f1 * x_1 - f2 * y_1 - f3 * x_2 - f4 * y_2)\n\n    # Find the distance of the ball to the lines\n    g5 = abs(f5 ** 2 - (x_b - x_w) ** 2 - (y_b - y_w) ** 2)\n    g6 = abs(f6 ** 2 - (x_b - x_w) ** 2 - (y_b - y_w) ** 2)\n\n    # Find the shortest distance\n    d5 = min(f5, g5)\n    d6 = min(f6, g6)\n\n    # Check if the distance is less than the ball radius\n    if d5 < r or d6 < r:\n        x_w = (f5 ** 2 - g5) / (2 * (x_b - x_w))\n        x_w = round(x_w, 8)\n\n        if d6 < r:\n            x_w = -x_w\n\n        return str(x_w)\n\n    return \"-1\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    b, d, s = map(int, stdin.split(' '))\n    \n    day = [b, d, s]\n    \n    cnt = 0\n    \n    for i in range(3):\n        for j in range(i+1,3):\n            for k in range(j+1,3):\n                if day[i] + day[j] + day[k] < 3:\n                    cnt += 1\n                    \n    return cnt\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return "
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return'something'\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    breakfasts, dinners, suppers = stdin.split(\" \")\n    breakfasts = int(breakfasts)\n    dinners = int(dinners)\n    suppers = int(suppers)\n    day = breakfasts + dinners + suppers\n    \n    return day - 2 if day > 2 else 0\n\n\ndef"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    first_line = stdin.readline()\n    b, d, s = [int(i) for i in first_line.split(' ')]\n    return b + d + s - 1\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    b, d, s = map(int, stdin.split())\n    return min(b + d - s, s + d - b)\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    return '1'\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a,b,c = [int(i) for i in stdin.split(' ')]\n    return min(a+b+c-3, a, b, c)\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    # YOUR CODE HERE\n    return stdin\n\n\"\"\"\n"
    },
    {
        "number": 165,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    count = [int(s[0]), int(s[1]), int(s[2])]\n    if sum(count) > 1:\n        return (sum(count) - 1)\n    elif sum(count) == 1:\n        return 0\n    else:\n        return sum(count)\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return \"\""
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''8\n   ... 1 2 3 6 9 8 5 2\n   ... ''')\n    YES\n    3 3\n    >>> solution('''6\n   ... 1 2 1 2 5 3\n   ... ''')\n    NO\n    >>> solution('''2\n   ... 1 10\n   ... ''')\n    YES\n    4 9\n    \"\"\"\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    a.append(1)\n    x = y = 0\n    for i in range(n + 1):\n        if a[i] > 10:\n            y = 10\n            break\n        else:\n            y = a[i]\n    for i in range(n + 1):\n        if a[i + n] > 10:\n            x = 10\n            break\n        else:\n            x = a[i + n]\n    for i in range(n):\n        if i % 2 == 0:\n            if a[i] > 10:\n                y = 10\n                break\n            else:\n                y = a[i]\n        else:\n            if a[i + n] > 10:\n                x = 10\n                break\n            else:\n                x = a[i + n]\n    if x > 10 and y > 10:\n        print('NO')\n        return\n    if x > 10:\n        y += 1\n    if y > 10:\n        x += 1\n    print('YES')\n    print(x, y)\n    return\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds solutions for both parts of the task\"\"\"\n    n = int(stdin)\n    a = [int(s) for s in stdin.split()]\n\n    x = n - 1\n    y = n - 1\n\n    while True:\n        if (\n            any(i == j for i, j in zip(a, [x] + [y] + [x]))\n            or x == 1\n            or y == 1\n        ):\n            return \"NO\"\n\n        x -= 1\n        y -= 1\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nfrom collections import Counter\n\ndef"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES\\n4 9'\n\ndef"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    \n    \n    return ''\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 166,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split(' '))\n    return \"YES\" if x * y % 2 == 0 else \"NO\"\n\ndef"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.splitlines()\n    a_len, b_len = len(a), len(b)\n    i, j = 0, 0\n    result = []\n    while i < a_len and j < b_len:\n        if a[i] == b[j]:\n            i += 1\n            j += 1\n        else:\n            j += 1\n    return ''.join(result) if j == b_len else '-\\n'\nprint(solution(stdin))\n\"\"\"\ndef"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split('\\n')\n    count = 0\n    for i in range(len(b) - 1):\n        if a[count:count+len(b[:i+1])] == b[:i+1]:\n            count += len(b[:i+1])\n        else:\n            count += 1\n\n    return a[count:]\n\"\"\"\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin[0]\n    b = stdin[1]\n    a_len = len(a)\n    b_len = len(b)\n    if b_len == 0 or b_len == 1:\n        if a_len == 0:\n            return '-'\n        else:\n            return a\n\n    # Need to preserve the original order\n    b_index = 0\n    a_index = 0\n    b_index_max = b_len - 1\n    a_index_max = a_len - 1\n    a_sub = []\n    b_sub = []\n    while a_index <= a_index_max and b_index <= b_index_max:\n        if a[a_index] == b[b_index]:\n            a_sub.append(a[a_index])\n            b_sub.append(b[b_index])\n            a_index += 1\n            b_index += 1\n        else:\n            # b should be removed\n            a_index += 1\n            if b_index == b_index_max:\n                break\n            b_index += 1\n    if len(a_sub) > 0:\n        return ''.join(a_sub)\n    else:\n        return '-'\n\n\ndef"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\nprint(solution('hi'))\nprint(solution('abacaba'))\nprint(solution('abcdcba'))\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split('\\n')\n    m = len(b)\n    n = len(a)\n    dp = [0]*m\n    dp[0] = n\n    for i in range(m):\n        c = 0\n        while i-c>=0 and i+c<m and b[i-c] == b[i+c]:\n            c += 1\n        dp[i] = min(dp[i], dp[i-c])\n    for i in range(m):\n        c = 0\n        while i-c>=0 and i+c<m and a[i-c] == a[i+c]:\n            c += 1\n        dp[i] = min(dp[i], dp[i-c])\n    c = 1\n    while c<m and dp[m-c] == dp[m-1]:\n        c += 1\n    res = a[:dp[m-1-c]]\n    if len(res) == 0:\n        return '-'\n    return res\n\n----Problem-----\n\n\"\u0420\u0430\u0441\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b, \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0430\u0449\u0438\u0445 \u0447\u0438\u0441\u043b\u043e\u0432\u043e\u043c\u0443 \u043e\u0442\u0440\u0435\u0437\u043a\u0443 [135768;137875], \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0443\u0434\u043e\u0432\u043b\u0435\u0442\u0432\u043e\u0440\u044f\u044e\u0442 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u0443\u0441\u043b\u043e\u0432\u0438\u044f\u043c:\n\n\u0434\u0435\u043b\u044f\u0442\u0441\u044f \u043d\u0430 3;\n\n\u043d\u0435 \u0434\u0435\u043b\u044f\u0442\u0441\u044f \u043d\u0430 17;\n\n\u0434\u0435\u043b\u044f\u0442\u0441\u044f \u043d\u0430 4 \u0438\u043b\u0438 7;\n\n\u043d\u0435 \u0434\u0435\u043b\u044f\u0442\u0441\u044f \u043d\u0430 6 \u0438\u043b\u0438 9.\n\n\u041d\u0430\u0439\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0442\u0430\u043a\u0438\u0445 \u0447\u0438\u0441\u0435\u043b \u0438 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0438\u0437 \u043d\u0438\u0445.\"\n\nA = [x for x in range(135768, 137875 + 1) if x % 3 == 0 and x % 17!= 0 and (x % 4 == 0 or x % 7 == 0) and (x % 6!= 0 or x % 9!= 0)]\n\nprint(A)\nprint(len(A))\nprint(max(A))\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split('\\n')\n    d = {}\n    for i in a:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    for i in b:\n        if i in d:\n            d[i] -= 1\n        else:\n            d[i] = -1\n    d_lst = []\n    for i in d:\n        if d[i] > 0:\n            d_lst.append(i)\n    d_lst.sort(reverse=True)\n    for i in d_lst:\n        if d[i] > 0:\n            d[i] = False\n    ans = []\n    for i in d:\n        if d[i]:\n            ans.append(i)\n    if ans:\n        return ''.join(ans)\n    return '-'\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\ndef"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split('\\n')\n    a = s[0]\n    b = s[1]\n    if len(a) < len(b):\n        return '-'\n    i = len(a)\n    j = len(b)\n    res = ''\n    while i > 0 and j > 0:\n        if a[i - 1] < b[j - 1]:\n            res = a[i - 1] + res\n            i -= 1\n        else:\n            res = b[j - 1] + res\n            j -= 1\n    if j == 0:\n        res = a[:i]\n    return res\n"
    },
    {
        "number": 167,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    operation = [s for s in stdin]\n    n = int(stdin)\n    piles = [0] * n\n    for i in range(n):\n        piles[i] += 1 if operation[i] == \"+\" else -1\n    print(min(piles))\n    return \"\"\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    number_of_operations = int(stdin)\n    operations = stdin.split()\n    stones = sum(operation == '+' for operation in operations)\n    return str(stones)\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return''.join(stdin.split())\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the minimal possible number of stones in the pile after Vasya has made n operations.\n    >>> solution(\"3\\n---\\n\")\n    0\n    >>> solution(\"4\\n++++\\n\")\n    4\n    >>> solution(\"2\\n--\\n\")\n    1\n    >>> solution(\"5\\n++-++\\n\")\n    3\n    \"\"\"\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    piles = 0\n    for i in s:\n        if i == \"+\":\n            piles += 1\n        else:\n            piles -= 1\n    return abs(piles)\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = 0, 0\n    for c in stdin:\n        if c == '+':\n            a += 1\n        else:\n            b += 1\n    return a - b\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return 0\n    i = 0\n    count = 0\n    while n:\n        if stdin[i] == '+':\n            count += 1\n        else:\n            count -= 1\n        n -= 1\n        i += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    s = list(s)\n    d = {'+': 1, '-': -1}\n    sum = 0\n    for i in range(n):\n        if s[i] == '+':\n            sum += d[s[i]]\n        else:\n            sum -= d[s[i]]\n    return sum\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    operations = int(stdin.strip())\n    stones = [0] * (2 * operations)\n    i = 0\n    while i < operations:\n        i += 1\n        for char in stdin.strip():\n            if char == '-':\n                stones[i] -= 1\n            else:\n                stones[i] += 1\n    return str(min(stones))\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    sum = 0\n    for i in s:\n        if i == '+':\n            sum += 1\n        else:\n            sum -= 1\n    return sum\n"
    },
    {
        "number": 168,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # return result\n"
    },
    {
        "number": 169,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    stdin = stdin.split('\\n')\n    \n    def_input = int(stdin[0])\n    b_input = int(stdin[1])\n    c_input = int(stdin[2])\n    \n    def_input = def_input // b_input\n    \n    if def_input == 0:\n        return str(def_input)\n    \n    return str(def_input + 1)\n"
    },
    {
        "number": 169,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def convert_to_int(input_string: str) -> int:\n        input_string = input_string.split('\\n')\n        result_int = int(input_string[0])\n        return result_int\n\n    def convert_to_int_from_list(input_string_list: str) -> int:\n        input_string_list = input_string_list.split('\\n')\n        result_int = int(input_string_list[0])\n        return result_int\n\n    def convert_to_str(input_int: int) -> str:\n        result_str = str(input_int)\n        return result_str\n\n    def convert_to_list_of_int(input_int: int) -> list:\n        result_list = list(map(int, str(input_int)))\n        return result_list\n\n    def convert_to_list_of_int_from_str(input_string: str) -> list:\n        result_list = list(map(int, input_string.split('\\n')))\n        return result_list\n\n    def check_int_param(input_int: int) -> bool:\n        return isinstance(input_int, int)\n\n    def check_str_param(input_string: str) -> bool:\n        return isinstance(input_string, str)\n\n    def check_list_of_int_param(input_list_of_int: list) -> bool:\n        return isinstance(input_list_of_int, list) and all(map(check_int_param, input_list_of_int))\n\n    def check_list_of_str_param(input_list_of_str: list) -> bool:\n        return isinstance(input_list_of_str, list) and all(map(check_str_param, input_list_of_str))\n\n    def check_param(input_int: int, input_string: str, input_list_of_int: list, input_list_of_str: list) -> bool:\n        return check_int_param(input_int) and check_str_param(input_string) and check_list_of_int_param(input_list_of_int) and check_list_of_str_param(input_list_of_str)\n\n    def get_input_as_list_of_str(stdin: str) -> list:\n        input_str = stdin\n        input_str = input_str.split('\\n')\n        input_list_of_str = list(map(str, input_str))\n        return input_list_of_str\n\n    def get_input_as_list_of_int(stdin: str) -> list:\n        input_list_of_str = get_input_as_list_of_str(stdin)\n        input_list_of_int = list(map(int, input_list_of_str))\n        return input_list_of_int\n\n    def get_input_as_int(stdin: str) -> int:\n        input_str = get_input_as_list_of_str(stdin)[0]\n        input_int = int(input_str)\n        return input_int\n\n    def get_input_as_str(stdin: str) -> str:\n        input_str = get_input_as_list_of_str(stdin)[0]\n        input_str = input_str.split('\\n')[0]\n        return input_str\n\n    def get_input_as_list_of_int_from_str(stdin: str) -> list:\n        input_str = get_input_as_str(stdin)\n        input_list_of_int = list(map(int, input_str))\n        return input_list_of_int\n\n    def get_input_as_list_of_str_from_str(stdin: str) -> list:\n        input_str = get_input_as_str(stdin)\n        input_list_of_str = list(map(str, input_str))\n        return input_list_of_str\n\n    def is_input_correct(input_int: int, input_string: str, input_list_of_int: list, input_list_of_str: list) -> bool:\n        return check_param(input_int, input_string, input_list_of_int, input_list_of_str)\n\n    def is_input_correct_for_str(input_str: str, input_list_of_str: list) -> bool:\n        return check_param(input_str, input_list_of_str, [], input_list_of_str)\n\n    def input_parser(stdin: str) -> dict:\n        input_dict = dict()\n        input_dict[\"n\"] = get_input_as_int(stdin)\n        input_dict[\"a\"] = get_input_as_list_of_int_from_str(stdin)\n        input_dict[\"b\"] = get_input_as_list_of_int_from_str(stdin)\n        input_dict[\"c\"] = get_input_as_list_of_int_from_str(stdin)\n        return input_dict\n\n    def is_there_empty_bottle(input_dict: dict) -> bool:\n        a = input_dict[\"a\"]\n        b = input_dict[\"b\"]\n        c = input_dict[\"c\"]\n        return b[0] >= a[0] and b[1] >= c[0]\n\n    def calculate_number_of_empty_bottles(input_dict: dict) -> int:\n        a = input_dict[\"a\"]\n        b = input_dict[\"b\"]\n        c = input_dict[\"c\"]\n        result = max(0, (b[1] - c[0]) // a[0])\n        return result\n\n    def calculate_number_of_empty_glass_bottles(input_dict: dict) -> int:\n        a = input_dict[\"a\"]\n        b = input_dict[\"b\"]\n        c = input_dict[\"c\"]\n        result = max(0, (b[0] - a[1]) // c[1])\n        return result\n\n    def calculate_remaining_money(input_dict: dict) -> int:\n        n = input_dict[\"n\"]\n        a = input_dict[\"a\"]\n        b = input_dict[\"b\"]\n        c = input_dict[\"c\"]\n        result = (n - a[0]) // (b[1] - c[0])\n        return result\n\n    def calculate_number_of_kefirs_to_"
    },
    {
        "number": 169,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a > c:\n        return -1\n    return int(c // b + (c % b > 0))\n"
    },
    {
        "number": 169,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 169,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a, b, c = map(int, stdin.split())\n    return n // a + n // b + n // c + n // (a + b) + n // (a + c) + n // (b + c)\n"
    },
    {
        "number": 169,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    pass"
    },
    {
        "number": 169,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    \n    c,b,a = map(int, stdin.split('\\n'))\n    \n    if n < a:\n        print(n)\n    elif n < b:\n        print(a-c)\n    else:\n        b_cnt = n // b\n        a_cnt = n % b\n        if a_cnt > c:\n            print(b_cnt+1)\n        else:\n            print(b_cnt)\n    return ''\n\"\"\"\n\n\"\"\"\n\n---SOLUTION---\n\ndef"
    },
    {
        "number": 169,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = int(stdin)\n    b = int(stdin)\n    c = int(stdin)\n    return int(n / (a + b + c))\n"
    },
    {
        "number": 169,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a, b, c = [int(n) for n in stdin.readline().split(' ')]\n    n = n // a\n    return str(n if c < b else n - (n // b))\n"
    },
    {
        "number": 169,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(i) for i in stdin.split()]\n    if b < c:\n        return 0\n    elif a < b:\n        return 1\n    else:\n        diff = a - b\n        cnt = diff // c\n        res = cnt + diff % c\n        return res"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str()\nprint(solution(str(input())))\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n    return\n\"\"\"\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(n) +'' + str(k_1) + '\\n' + str(k_2) +'' + str(k_3)\n\ndef"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str()"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return '0 1'\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n    pass\n\nassert solution(\"4\\n2 1 3\\n2 4 2\") == \"6 2\"\nassert solution(\"3\\n1 2\\n2 1 3\") == \"2 1\"\nassert solution(\"3\\n1 2\\n2 1 3\") == \"2 1\"\nassert solution(\"3\\n1 2\\n2 1 3\") == \"2 1\"\nassert solution(\"3\\n1 2\\n2 1 3\") == \"2 1\"\nassert solution(\"3\\n1 2\\n2 1 3\") == \"2 1\"\n\nassert solution(\"3\\n1 2\\n2 1 3\") == \"2 1\"\n\nassert solution(\"3\\n1 2\\n2 1 3\") == \"2 1\"\n\nassert solution(\"3\\n1 2\\n2 1 3\") == \"2 1\"\n\nassert solution(\"3\\n1 2\\n2 1 3\") == \"2 1\"\n\nassert solution(\"3\\n1 2\\n2 1 3\") == \"2 1\"\n\nassert solution(\"3\\n1 2\\n2 1 3\") == \"2 1\"\n\nassert solution(\"3\\n1 2\\n2 1 3\") == \"2 1\"\n\nassert solution(\"3\\n1 2\\n2 1 3\") == \"2 1\"\n\nassert solution(\"3\\n1 2\\n2 1 3\") == \"2 1\"\n\nassert solution(\"3\\n1 2\\n2 1 3\") == \"2 1\"\n\nassert solution(\"3\\n1 2\\n2 1 3\") == \"2 1\"\n\nassert solution(\"3\\n1 2\\n2 1 3\") == \"2 1\"\n\nassert solution(\"3\\n1 2\\n2 1 3\") == \"2 1\"\n\nassert solution(\"3\\n1 2\\n2 1 3\") == \"2 1\"\n\nassert solution(\"3\\n1 2\\n2 1 3\") == \"2 1\"\n\nassert solution(\"3\\n1 2\\n2 1 3\") == \"2 1\"\n\nassert solution(\"3\\n1 2\\n2 1 3\") == \"2 1\"\n\nassert solution(\"3\\n1 2\\n2 1 3\") == \"2 1\"\n\nassert solution(\"3\\n1 2\\n2 1 3\") == \"2 1\"\n\nassert solution(\"3\\n1 2\\n2 1 3\") == \"2 1\"\n\nassert solution(\"3\\n1 2\\n2 1 3\") == \"2 1\"\n\nassert solution(\"3\\n1 2\\n2 1 3\") == \"2 1\"\n\nassert solution(\"3\\n1 2\\n2 1 3\") == \"2 1\"\n\nassert solution(\"3\\n1 2\\n2 1 3\") == \"2 1\"\n\nassert solution(\"3\\n1 2\\n2 1 3\") == \"2 1\"\n\nassert solution(\"3\\n1 2\\n2 1 3\") == \"2 1\"\n\nassert solution(\"3\\n1 2\\n2 1 3\") == \"2 1\"\n\nassert solution(\"3\\n1 2\\n2 1 3\") == \"2 1\"\n\nassert solution(\"3\\n1 2\\n2 1 3\") == \"2 1\"\n\nassert solution(\"3\\n1 2\\n2 1 3\") == \"2 1\"\n\nassert solution(\"3\\n1 2\\n2 1 3\") == \"2 1\"\n\nassert solution(\"3\\n1 2\\n2 1 3\") == \"2 1\"\n\nassert solution(\"3\\n1 2\\n2 1 3\") == \"2 1\"\n\nassert solution(\"3\\n1 2\\n2 1 3\") == \"2 1\"\n\nassert solution(\"3\\n1 2\\n2 1 3\") == \"2 1\"\n\nassert solution(\"3\\n1 2\\n2 1 3\") == \"2 1\"\n\nassert solution(\"3\\n1 2\\n2 1 3\") == \"2 1\"\n\nassert solution(\"3\\n1 2\\n2 1 3\") == \"2 1\"\n\nassert solution(\"3\\n1 2\\n2 1 3\") == \"2 1\"\n\nassert solution(\"3\\n1 2\\n2 1 3\") == \"2 1\"\n\nassert solution(\"3\\n1 2\\n2 1 3\") == \"2 1\"\n\nassert solution(\"3\\n1 2\\n2 1 3\") == \"2 1\"\n\nassert solution(\"3\\n1 2\\n2 1 3\") == \"2 1\"\n\nassert solution(\"3\\n1 2\\n2 1 3\") == \"2 1\"\n\nassert solution(\"3\\n1 2\\n2 1 3\") == \"2 1\"\n\nassert solution(\"3\\n1 2\\n2 1 3\") == \"2 1\"\n\nassert solution(\"3\\n1 2\\n2 1 3\") == \"2 1\"\n\nassert solution(\"3\\n1 2\\n2 1 3\") == \"2 1\"\n\nassert solution(\"3\\n1 2\\n2 1 3\") == \"2 1\"\n\nassert solution(\"3\\n1 2\\n2 1 3\") == \"2 1\"\n\nassert solution(\"3\\n1 2\\n2 1 3\") == \"2 1\"\n\nassert solution(\"3\\n1 2\\n2 1 3\") == \"2 1\"\n\nassert solution(\"3\\n1 2\\n2 1 3\") == \"2 1\"\n\nassert solution(\"3\\n1 2\\n2 1 3\") == \"2 1\"\n\nassert solution(\"3\\n1 2\\n2 1 3\") == \"2 1\"\n\nassert solution(\"3\\n1 2\\n2 1 3\") == \"2 1\"\n\nassert solution(\"3\\n1 2\\n2 1 3\") == \"2 1\"\n\nassert solution(\"3\\n1 2\\n2 1 3\") == \"2 1\"\n\nassert solution(\"3\\n1 2\\n2 1 3\") == \"2 1\"\n\nassert solution(\"3\\n1 2\\n2 1 3\") == \"2 1\"\n\nassert solution(\"3\\n1 2\\n2 1 3\") == \"2 1\"\n\nassert solution(\"3\\n1 2\\n2 1 3\") == \"2 1\"\n\nassert solution(\"3\\n1 2\\n2 1 3\") == \"2 1\"\n\nassert solution(\"3\\n1 2\\n2 1 3\") == \"2 1\"\n\nassert solution(\"3\\n1 2\\n2 1 3\") == \"2 1\"\n\nassert solution(\"3\\n1 2\\n2 1 3\") == \"2 1\"\n\nassert solution(\"3\\n1 2\\n2 1 3\") == \"2 1\"\n\nassert solution(\"3\\n1 2\\n2 1 3\") == \"2 1\"\n\nassert solution(\"3\\n1 2\\n2 1 3\") == \""
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    number_of_cards = int(stdin.readline())\n    k_1 = int(stdin.readline())\n    k_2 = int(stdin.readline())\n    card_list_1 = [int(x) for x in stdin.readline().split()]\n    card_list_2 = [int(x) for x in stdin.readline().split()]\n    card_list_1_1 = card_list_1[:-1]\n    card_list_1_2 = card_list_1[1:]\n    card_list_2_1 = card_list_2[:-1]\n    card_list_2_2 = card_list_2[1:]\n    counter_1 = 1\n    counter_2 = 1\n    while len(card_list_1_1) > 0 or len(card_list_2_1) > 0:\n        card_1_1 = card_list_1_1.pop(0)\n        card_2_1 = card_list_2_1.pop(0)\n        if card_1_1 >= card_2_1:\n            card_list_1_1.append(card_1_1)\n            card_list_1_1.append(card_2_1)\n            counter_1 += 1\n        else:\n            card_list_1_2.append(card_1_1)\n            card_list_1_2.append(card_2_1)\n            counter_2 += 1\n        card_1_2 = card_list_1_2.pop(0)\n        card_2_2 = card_list_2_2.pop(0)\n        if card_1_2 >= card_2_2:\n            card_list_2_1.append(card_1_2)\n            card_list_2_1.append(card_2_2)\n            counter_1 += 1\n        else:\n            card_list_2_2.append(card_1_2)\n            card_list_2_2.append(card_2_2)\n            counter_2 += 1\n    if counter_1 > counter_2:\n        print(counter_1, 1)\n    elif counter_1 == counter_2:\n        print(-1)\n    else:\n        print(counter_2, 2)\nsolution(str(sys.stdin.read()))\n"
    },
    {
        "number": 170,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    cards = int(stdin.readline().strip())\n    k1, k2 = [int(x) for x in stdin.readline().strip().split()]\n    player1 = [int(x) for x in stdin.readline().strip().split()]\n    player2 = [int(x) for x in stdin.readline().strip().split()]\n    wins = [0, 0]\n    while cards > 0:\n        if player1[cards - 1] > player2[cards - 1]:\n            wins[0] += 1\n            cards -= 2\n            player1.append(player1.pop(0))\n            player1.append(player2.pop(0))\n            player2.append(player2.pop(0))\n            player2.append(player1.pop(0))\n        else:\n            wins[1] += 1\n            cards -= 2\n            player2.append(player2.pop(0))\n            player2.append(player1.pop(0))\n            player1.append(player1.pop(0))\n            player1.append(player2.pop(0))\n    return '%d %d' % tuple(wins)\nprint(solution(sys.stdin))\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    print('Too weak' if any(x in stdin for x in ('!', '?', '.', ',')) or len(stdin) < 5 or any(x in stdin for x in ('X', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9')) else 'Correct')\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return (\n        stdin\n        if stdin.isalpha()\n        or stdin.isalnum()\n        or (not stdin.isalnum() and not stdin.isalpha() and stdin.isdigit())\n        else \"Too weak\"\n    )\n\n\ndef"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) < 5:\n        return 'Too weak'\n    for i in stdin:\n        if i.isalpha() and i.isupper():\n            return 'Too weak'\n    return 'Correct'\n\n\ndef"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    is_stdin_correct = check_stdin(stdin)\n    if is_stdin_correct == True:\n        result = simple_check(stdin)\n        return result\n    else:\n        return \"Too weak\"\n\ndef"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    #st = list(stdin)\n    st = stdin\n    if len(st) < 5:\n        return 'Too weak'\n    has_upper = False\n    has_lower = False\n    has_num = False\n    for i in range(len(st)):\n        if not st[i].isalpha():\n            if st[i] in '1234567890':\n                has_num = True\n            elif st[i] == ',':\n                pass\n            else:\n                return 'Too weak'\n        if st[i].isupper():\n            has_upper = True\n        elif st[i].islower():\n            has_lower = True\n    if not has_upper or not has_lower or not has_num:\n        return 'Too weak'\n    return 'Correct'\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('abacaba')\n    'Correct'\n    >>> solution('X12345')\n    'Too weak'\n    >>> solution('CONTEST_is_STARTED!!11')\n    'Correct'\n    >>> solution('abc123def!')\n    'Too weak'\n    >>> solution('ABCabc123def!')\n    'Correct'\n    >>> solution('ABCabc123def!@')\n    'Correct'\n    >>> solution('!@#$%^&*()_+-=')\n    'Too weak'\n    >>> solution('ABC!@#$%^&*()_+-=')\n    'Too weak'\n    >>> solution('ABCabc123def!@#$%^&*()_+-=')\n    'Correct'\n    >>> solution('abc123def!@#$%^&*()_+-=')\n    'Correct'\n    >>> solution('abc123def!@#$%^&*()_+-='')\n    'Correct'\n    >>> solution('ABCabc123def!@#$%^&*()_+-=')\n    'Correct'\n    >>> solution('ABCabc123def!@#$%^&*()_+-=')\n    'Correct'\n    >>> solution('ABCabc123def!@#$%^&*()_+-=')\n    'Correct'\n    >>> solution('ABCabc123def!@#$%^&*()_+-=')\n    'Correct'\n    >>> solution('ABCabc123def!@#$%^&*()_+-=')\n    'Correct'\n    >>> solution('ABCabc123def!@#$%^&*()_+-=')\n    'Correct'\n    >>> solution('ABCabc123def!@#$%^&*()_+-=')\n    'Correct'\n    >>> solution('ABCabc123def!@#$%^&*()_+-=')\n    'Correct'\n    >>> solution('ABCabc123def!@#$%^&*()_+-=')\n    'Correct'\n    >>> solution('ABCabc123def!@#$%^&*()_+-=')\n    'Correct'\n    >>> solution('ABCabc123def!@#$%^&*()_+-=')\n    'Correct'\n    >>> solution('ABCabc123def!@#$%^&*()_+-=')\n    'Correct'\n    >>> solution('ABCabc123def!@#$%^&*()_+-=')\n    'Correct'\n    >>> solution('ABCabc123def!@#$%^&*()_+-=')\n    'Correct'\n    >>> solution('ABCabc123def!@#$%^&*()_+-=')\n    'Correct'\n    >>> solution('ABCabc123def!@#$%^&*()_+-=')\n    'Correct'\n    >>> solution('ABCabc123def!@#$%^&*()_+-=')\n    'Correct'\n    >>> solution('ABCabc123def!@#$%^&*()_+-=')\n    'Correct'\n    >>> solution('ABCabc123def!@#$%^&*()_+-=')\n    'Correct'\n    >>> solution('ABCabc123def!@#$%^&*()_+-=')\n    'Correct'\n    >>> solution('ABCabc123def!@#$%^&*()_+-=')\n    'Correct'\n    >>> solution('ABCabc123def!@#$%^&*()_+-=')\n    'Correct'\n    >>> solution('ABCabc123def!@#$%^&*()_+-=')\n    'Correct'\n    >>> solution('ABCabc123def!@#$%^&*()_+-=')\n    'Correct'\n    >>> solution('ABCabc123def!@#$%^&*()_+-=')\n    'Correct'\n    >>> solution('ABCabc123def!@#$%^&*()_+-=')\n    'Correct'\n    >>> solution('ABCabc123def!@#$%^&*()_+-=')\n    'Correct'\n    >>> solution('ABCabc123def!@#$%^&*()_+-=')\n    'Correct'\n    >>> solution('ABCabc123def!@#$%^&*()_+-=')\n    'Correct'\n    >>> solution('ABCabc123def!@#$%^&*()_+-=')\n    'Correct'\n    >>> solution('ABCabc123def!@#$%^&*()_+-=')\n    'Correct'\n    >>> solution('ABCabc123def!@#$%^&*()_+-=')\n    'Correct'\n    >>> solution('ABCabc123def!@#$%^&*()_+-=')\n    'Correct'\n    >>> solution('ABCabc123def!@#$%^&*()_+-=')\n    'Correct'\n    >>> solution('ABCabc123def!@#$%^&*()_+-=')\n    'Correct'\n    >>> solution('ABCabc123def!@#$%^&*()_+-=')\n    'Correct'\n    >>> solution('ABCabc123def!@#$%^&*()_+-=')\n    'Correct'\n    >>> solution('ABCabc123def!@#$%^&*()_+-=')\n    'Correct'\n    >>> solution('ABCabc123def!@#$%^&*()_+-=')\n    'Correct'\n    >>> solution('ABCabc123def!@#$%^&*()_+-=')\n    'Correct'\n    >>> solution('ABCabc123def!@#$%^&*()_+-=')\n    'Correct'\n    >>> solution('ABCabc123def!@#$%^&*()_+-=')\n    'Correct'\n    >>> solution('ABCabc123def!@#$%^&*()_+-=')\n    'Correct'\n    >>> solution('ABCabc123def!@#$%^&*()_+-=')\n    'Correct'\n    >>> solution('ABCabc123def!@#$%^&*()_+-=')\n    'Correct'\n    >>> solution('ABCabc123def!@#$%^&*()_+-=')\n    'Correct'\n    >>> solution('ABCabc123def!@#$%^&*()_+-=')\n    'Correct'\n    >>> solution('ABCabc123def!@#$%^&*()_+-=')\n    'Correct'\n    >>> solution('ABCabc123def!@#$%^&*()_+-=')\n    'Correct'\n    >>> solution('ABCabc123def!@#$%^&*()_+-=')\n    'Correct'\n    >>> solution('ABCabc123def!@#$%^&*()_+-=')\n    'Correct'\n    >>> solution('ABCabc123def!@#$%^&*()_+-=')\n    'Correct'\n    >>> solution('ABCabc123def!@#$%^&*()_+-=')\n    'Correct'\n    >>> solution('ABCabc123def!@#$%^&*()_+-=')\n    'Correct'\n    >>> solution('ABCabc123def!@#$%^&*()_+-=')\n    'Correct'\n    >>> solution('ABCabc123def!@#$%^&*()_+-=')\n    'Correct'\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    import re\n    import string\n    stdin = stdin.strip()\n    \n    if len(stdin) < 5:\n        return 'Too weak'\n    \n    # If it's password, then each character must be alphanumeric\n    if re.match(r'^[a-zA-Z0-9]*$', stdin):\n        return 'Too weak'\n        \n    # If it's too long, then it has to have at least one letter, one number and one special character\n    if len(stdin) >= 5:\n        if re.match(r'^[A-Za-z0-9!?,_]*$', stdin):\n            return 'Correct'\n        \n    # Otherwise it's too weak\n    return 'Too weak'\n"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return 'Correct' if len(stdin)>=5 and stdin.upper().count('A')>=1 and stdin.upper().count('a')>=1 and stdin.upper().count('0')>=1 else 'Too weak'"
    },
    {
        "number": 171,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pw = stdin.lower()\n    if pw.isalpha() and pw.isupper() and len(pw) >= 5:\n        print(\"Correct\")\n    else:\n        print(\"Too weak\")\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \u8fd4\u56de\u503c\u662f\u8c01\u5c0f\u5c31\u548c\u8c01\u4ea4\u6362\uff0c\u7b49\u4ef7\u4e8e\u8c01\u5c0f\u5c31\u5206\u5230\u8c01\uff0c\u8c01\u5c0f\u5c31\u5728\u54ea\n    \"\"\"\n    # \u6bcf\u6b21\u7ffb\u8f6c\u90fd\u662f\u76f8\u7b49\u7684\u6bd4\u8f83\n    nums = [int(i) for i in stdin.split()]\n    arr = sorted(nums)\n    n = arr[0]\n    a = sorted(nums[1:])\n    b = sorted(nums[1:])\n    print(n, a, b)\n    ans = -1\n    for i in range(n):\n        if a[i] == 1 and b[i] == 1:\n            ans += 1\n            a[i], b[i] = b[i], a[i]\n        else:\n            break\n    return ans"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    # pass\n    stdin = stdin.split()\n    a = [int(i) for i in stdin[1].split()]\n    b = [int(i) for i in stdin[2].split()]\n    # if a[i]==b[j]:\n    #     pass\n    # if a[i]>b[j]:\n    #     pass\n    # if a[i]<b[j]:\n    #     pass\n    # if a[i]==b[j]:\n    #     pass\n    # if a[i]\n    #     pass\n    # if a[i]\n    #     pass\n    a.sort()\n    b.sort()\n    # # print(a)\n    # # print(b)\n    # if a.count(1)!= b.count(1) or a.count(2)!= b.count(2) or a.count(3)!= b.count(3) or a.count(4)!= b.count(4) or a.count(5)!= b.count(5):\n    #     print(-1)\n    #     return\n    # else:\n    #     print(int(a.count(1)//2))\n    #     return\n    if sum(a)%2!= 0:\n        print(-1)\n        return\n    a_counts = [0,0,0,0,0,0]\n    b_counts = [0,0,0,0,0,0]\n    for i in a:\n        if i == 1:\n            a_counts[1] += 1\n        elif i == 2:\n            a_counts[2] += 1\n        elif i == 3:\n            a_counts[3] += 1\n        elif i == 4:\n            a_counts[4] += 1\n        elif i == 5:\n            a_counts[5] += 1\n    for i in b:\n        if i == 1:\n            b_counts[1] += 1\n        elif i == 2:\n            b_counts[2] += 1\n        elif i == 3:\n            b_counts[3] += 1\n        elif i == 4:\n            b_counts[4] += 1\n        elif i == 5:\n            b_counts[5] += 1\n    total_sum = 0\n    for i in range(1,6):\n        total_sum += min(a_counts[i],b_counts[i])\n    print(total_sum)\n\nsolution(input())"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = [], []\n    a, b = [], []\n    N = int(stdin.readline())\n    a = [int(n) for n in stdin.readline().split()]\n    b = [int(n) for n in stdin.readline().split()]\n    if not a:\n        return str(-1)\n    if len(set(a))!= 1:\n        return str(-1)\n    if len(set(b))!= 1:\n        return str(-1)\n    if len(set(a))!= len(set(b)):\n        return str(-1)\n    if N < len(set(a)):\n        return str(-1)\n    for i in range(N):\n        if a[i] == b[i]:\n            continue\n        elif a[i] < b[i]:\n            A.append(a[i])\n            B.append(b[i])\n        else:\n            A.append(b[i])\n            B.append(a[i])\n    if not A or not B:\n        return str(-1)\n    if len(set(A))!= len(set(B)):\n        return str(-1)\n    return str(len(A))\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    b = list(map(int, stdin.split('\\n')[2].split()))\n    a_count = {}\n    b_count = {}\n\n    for i in range(n):\n        if a[i] not in a_count:\n            a_count[a[i]] = 1\n        else:\n            a_count[a[i]] += 1\n        if b[i] not in b_count:\n            b_count[b[i]] = 1\n        else:\n            b_count[b[i]] += 1\n\n    a_keys = a_count.keys()\n    b_keys = b_count.keys()\n    a_len = len(a_keys)\n    b_len = len(b_keys)\n    ans = n\n    for i in range(a_len):\n        for j in range(b_len):\n            if a_keys[i] == b_keys[j]:\n                ans = min(ans, abs(a_count[a_keys[i]] - b_count[b_keys[j]]))\n    if ans > 0:\n        return str(ans - 1)\n    else:\n        return '-1'"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    import math\n    num_students = int(stdin.split()[0])\n    a_student_scores = [int(i) for i in stdin.split()[1:]]\n    b_student_scores = [int(i) for i in stdin.split()[1:]]\n    a_scores = [i for i in range(1, 6) if i not in a_student_scores]\n    b_scores = [i for i in range(1, 6) if i not in b_student_scores]\n    cnt = 0\n    for i in range(len(a_student_scores)):\n        if a_student_scores[i] in a_scores and b_student_scores[i] in b_scores:\n            cnt += 1\n            a_scores.remove(a_student_scores[i])\n            b_scores.remove(b_student_scores[i])\n        elif a_student_scores[i] in b_scores and b_student_scores[i] in a_scores:\n            cnt += 1\n            a_scores.remove(a_student_scores[i])\n            b_scores.remove(b_student_scores[i])\n        else:\n            print(-1)\n            return\n    print(cnt)\n    return\n\n\nsolution(input())\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    a_b = dict()\n    for i in range(n):\n        if a[i] not in a_b.keys():\n            a_b[a[i]] = [b[i]]\n        else:\n            a_b[a[i]].append(b[i])\n\n        if b[i] not in a_b.keys():\n            a_b[b[i]] = [a[i]]\n        else:\n            a_b[b[i]].append(a[i])\n\n    result = 0\n    for i in a_b.keys():\n        if len(a_b[i]) == n // 2:\n            result += 1\n    print(result)\n\nsolution(stdin)\n"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\ndef"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\ndef"
    },
    {
        "number": 172,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The key insight is to change A group by moving one student to B group.\n    Then for each set of A and B, calculate the number of A students in B and B students in A.\n    We want to maximize the diff between the two counts.\n    \"\"\"\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    count = 0\n    d = defaultdict(int)\n    for i in range(n):\n        d[a[i] - b[i]] += 1\n        count += abs(a[i] - b[i])\n    return count if len(d) == 1 else -1\n"
    },
    {
        "number": 173,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    hor_streets = stdin[0]\n    ver_streets = stdin[1]\n    hor_streets = list(hor_streets)\n    ver_streets = list(ver_streets)\n    n = len(hor_streets)\n    m = len(ver_streets)\n    \n    # create adjacency matrix\n    adj = []\n    for i in range(n):\n        adj.append([])\n        for j in range(m):\n            adj[i].append(False)\n    \n    # add edges\n    for i in range(n):\n        if hor_streets[i] == \"<\":\n            adj[i].append(i + 1)\n    for i in range(m):\n        if ver_streets[i] == \"^\":\n            adj[0].append(i + 1)\n    \n    # check for cycles\n    for i in range(n):\n        for j in range(m):\n            for k in range(n):\n                for l in range(m):\n                    if not adj[i][j] and not adj[k][l]:\n                        if hor_streets[k] == \"<\" and hor_streets[l] == \"<\":\n                            if ver_streets[j] == \"^\" and ver_streets[l] == \"^\":\n                                if i == k and j == l:\n                                    adj[i][j] = True\n                                else:\n                                    adj[k][l] = True\n                        if hor_streets[k] == \">\" and hor_streets[l] == \">\":\n                            if ver_streets[j] == \"v\" and ver_streets[l] == \"v\":\n                                if i == k and j == l:\n                                    adj[i][j] = True\n                                else:\n                                    adj[k][l] = True\n    \n    for i in range(n):\n        for j in range(m):\n            if adj[i][j]:\n                print(\"NO\")\n                return\n    \n    print(\"YES\")\n    return"
    },
    {
        "number": 173,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    from collections import deque\n    n, m = map(int, stdin.split())\n    horizontal = deque(stdin[0:n])\n    vertical = deque(stdin[n:])\n    horizontal_inbound = deque(stdin[0:n])\n    horizontal_outbound = deque(stdin[0:n])\n    vertical_inbound = deque(stdin[n:])\n    vertical_outbound = deque(stdin[n:])\n    # horizontal_inbound = deque(stdin[0:n])\n    # horizontal_outbound = deque(stdin[0:n])\n    # vertical_inbound = deque(stdin[n:])\n    # vertical_outbound = deque(stdin[n:])\n    # print(horizontal_inbound)\n    # print(horizontal_outbound)\n    # print(vertical_inbound)\n    # print(vertical_outbound)\n\n    inbound = set()\n    outbound = set()\n    \n    for i in range(n):\n        for j in range(m):\n            if horizontal[i] == '>' and vertical[j] == '^':\n                inbound.add((i, j))\n                outbound.add((i + 1, j))\n            elif horizontal[i] == '<' and vertical[j] == '^':\n                inbound.add((i, j))\n                outbound.add((i - 1, j))\n            elif horizontal[i] == '>' and vertical[j] == 'v':\n                inbound.add((i, j))\n                outbound.add((i, j + 1))\n            elif horizontal[i] == '<' and vertical[j] == 'v':\n                inbound.add((i, j))\n                outbound.add((i, j - 1))\n            elif horizontal[i] == '<' and vertical[j] == '^':\n                inbound.add((i, j))\n                outbound.add((i, j - 1))\n            elif horizontal[i] == '>' and vertical[j] == 'v':\n                inbound.add((i, j))\n                outbound.add((i - 1, j))\n    # print(inbound)\n    # print(outbound)\n    # print(inbound & outbound)\n    # print(inbound.intersection(outbound))\n    # print(outbound - inbound)\n    # print(inbound - outbound)\n    # print(inbound ^ outbound)\n    \n    return \"YES\" if (inbound ^ outbound).__len__() == 0 else \"NO\""
    },
    {
        "number": 173,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    return ''"
    },
    {
        "number": 173,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if '^' not in stdin and '<' not in stdin else 'NO'\n\n\n\n\"\"\"\ndef"
    },
    {
        "number": 173,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\"\"\""
    },
    {
        "number": 173,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\ndef"
    },
    {
        "number": 173,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    horizontal_streets_str = stdin[0]\n    vertical_streets_str = stdin[1]\n\n    horizontal_streets = []\n    vertical_streets = []\n\n    for s in horizontal_streets_str:\n        if s == '<':\n            horizontal_streets.append(1)\n        elif s == '>':\n            horizontal_streets.append(-1)\n    \n    for s in vertical_streets_str:\n        if s == 'v':\n            vertical_streets.append(1)\n        elif s == '^':\n            vertical_streets.append(-1)\n\n    print(horizontal_streets, vertical_streets)\n    return \"YES\" if horizontal_streets == vertical_streets else \"NO\"\n\n\n\n-----Test Case-----"
    },
    {
        "number": 173,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def bfs(que, level, lst):\n        nonlocal step\n        while que:\n            new_que = []\n            for r, c in que:\n                lst[r][c] = level\n                if r == 1 and c == 0:\n                    step += 1\n                    return\n                if r > 0 and lst[r - 1][c]!= level:\n                    new_que.append((r - 1, c))\n                if c < m - 1 and lst[r][c + 1]!= level:\n                    new_que.append((r, c + 1))\n            que = new_que\n            level += 1\n\n    n, m = [int(x) for x in stdin.split(' ')]\n    lst = [['0' for _ in range(m)] for _ in range(n)]\n    que = []\n    for i in range(n):\n        s = stdin[i]\n        for j in range(m):\n            if s[j] == '<':\n                que.append((i, j))\n                lst[i][j] = '-'\n            elif s[j] == '>':\n                que.append((i, j))\n                lst[i][j] = '+'\n            elif s[j] == '^':\n                que.append((i, j))\n                lst[i][j] = '|'\n            elif s[j] == 'v':\n                que.append((i, j))\n                lst[i][j] = '|'\n    level = 0\n    step = 0\n    que = list(set(que))\n    que.sort(key=lambda x: x[0])\n    bfs(que, level, lst)\n    if step % 2!= 0:\n        return 'NO'\n    for i in range(n):\n        for j in range(m):\n            if lst[i][j] == '0':\n                return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 173,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''Your solution goes here.'''\n    return \"YES\" # Default to yes.\n\ndef"
    },
    {
        "number": 173,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if valid(stdin) else 'NO'\n\n\ndef"
    },
    {
        "number": 174,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 174,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('4\\n0 1 1 0')\n    YES\n    >>> solution('2\\n1 1')\n    NO\n    >>> solution('1\\n0')\n    YES\n    >>> solution('2\\n1 1')\n    NO\n    >>> solution('3\\n0 0 0')\n    NO\n    >>> solution('4\\n0 1 1 0')\n    YES\n    >>> solution('4\\n0 0 1 1')\n    YES\n    \"\"\"\n    n = int(stdin)\n    log = stdin\n    for i in range(n):\n        log = log.replace(f'{i} ', '1')\n        log = log.replace(f'{i}', '0')\n    log = log.replace('1', '(')\n    log = log.replace('0', ')')\n    log = log.replace('-', '>')\n    return log\n"
    },
    {
        "number": 174,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"NO\" if stdin.find(\"->\") == -1 else \"YES\" + \"\\n\" + \"(\" + \"->\".join(stdin.split(\"->\")) + \")\"\n"
    },
    {
        "number": 174,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"The solution function is called by the game engine with the input of the game as a string.\n    It must return a string containing the solution output to the game.\"\"\"\n    arguments = list(map(int, stdin.split()))\n    n = arguments[0]\n    arguments = arguments[1:]\n    if n == 1:\n        return \"YES\"\n    arguments.sort()\n    if arguments[-1] == 0:\n        if arguments[-2] == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n    if arguments[-1] == 1:\n        if arguments[-2] == 0:\n            return \"NO\"\n        else:\n            return \"YES\"\n    for i in range(1, len(arguments)):\n        if arguments[i - 1] == 1 and arguments[i] == 0:\n            return \"NO\"\n        if arguments[i - 1] == 0 and arguments[i] == 1:\n            return \"NO\"\n    return \"YES\"\n\n\ndef"
    },
    {
        "number": 174,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('4\\n0 1 1 0')\n    'YES\\n(((0)->1)->(1->0))'\n    >>> solution('2\\n1 1')\n    'NO'\n    \"\"\"\n    n = int(stdin)\n    ex = list(map(int, stdin.split('\\n')[1:]))\n\n    if sum(ex) == n:\n        return 'YES\\n{}'.format(''.join(map(lambda x: '1' if x == 0 else '0', ex)))\n    if sum(ex) == 0:\n        return 'YES\\n{}'.format(''.join(map(lambda x: '0' if x == 1 else '1', ex)))\n    if sum(ex) == 1:\n        return 'NO'\n    if sum(ex) == 2:\n        if ex.count(0) == 1:\n            return 'YES\\n0'\n        if ex.count(1) == 1:\n            return 'YES\\n1'\n\n    if sum(ex) > 2:\n        if sum(ex) % 2 == 0:\n            return 'NO'\n        if ex[0] == 0 and sum(ex) % 2 == 1:\n            return 'NO'\n\n        v = sum(ex) // 2\n        o = 0\n        if ex[0] == 0:\n            o += 1\n            v -= 1\n        else:\n            o += 2\n        while o < n and v < n:\n            if ex[o] == 0 and ex[v] == 1:\n                o += 1\n                v += 1\n            else:\n                return 'NO'\n        return 'YES\\n{}'.format(''.join(map(lambda x: '1' if x == 0 else '0', ex)))\n"
    },
    {
        "number": 174,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) > 100000:\n        return 'NO'\n    stdin = stdin.split('\\n')\n    n = int(stdin[0])\n    stdin = stdin[1].split(' ')\n    stdin = list(map(int, stdin))\n    if len(stdin)!= n:\n        return 'NO'\n    mapping = {}\n    result = []\n    for x in stdin:\n        mapping[x] = 0\n    for x in stdin:\n        if x == 0:\n            result.append('0')\n            result.append('1')\n        elif x == 1:\n            result.append('1')\n            result.append('0')\n        else:\n            result.append('(1' + '->' + str(x) + ')')\n            result.append('(' + str(x) + '->0)')\n    print('YES')\n    print(''.join(result))\n    return 'YES'\n\n\ndef"
    },
    {
        "number": 174,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Gets the input from stdin and runs the solution,\n    then writes the output to stdout.\n    \"\"\"\n    pass\n\n\ndef"
    },
    {
        "number": 174,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    def solve(bracket: str):\n        if not bracket:\n            return f'YES\\n{bracket}'\n        \n        if bracket[0] in ['0', '1']:\n            if bracket[1:].startswith('0'):\n                return f'YES\\n{bracket[0]}{bracket[1:]}'\n            elif bracket[1:].startswith('1'):\n                return f'YES\\n1{bracket[1:]}'\n            else:\n                return f'NO'\n        elif bracket[0] == '-':\n            if bracket[1:].startswith('0'):\n                return f'YES\\n1{bracket[1:]}'\n            else:\n                return f'NO'\n        elif bracket[0] == '>':\n            if bracket[1:].startswith('0'):\n                return f'YES\\n{bracket[0]}{bracket[1:]}'\n            else:\n                return f'NO'\n        else:\n            return f'NO'\n        \n    n = int(stdin.split('\\n')[0])\n    m = stdin.split('\\n')[1].split()\n    \n    return '\\n'.join([solve(bracket) for bracket in m])\n"
    },
    {
        "number": 174,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    brackets = [stdin[i] for i in range(n)]\n\n    if n == 1:\n        return \"YES\" if brackets[0] == \"1\" else \"NO\"\n\n    for i in range(n):\n        if brackets[i] == \"1\":\n            break\n\n    brackets = [\"(\"] * i + brackets[:i] + [\")\"] * (n - i - 1)\n\n    return f\"YES\\n{''.join(brackets)}\"\n"
    },
    {
        "number": 174,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    nums = list(map(int, stdin.readline().split()))\n    print(\"YES\" if n == 1 or (nums.count(1) == 1 and nums.count(0) == n - 1) else \"NO\")\n    return \"YES\" if n == 1 or (nums.count(1) == 1 and nums.count(0) == n - 1) else \"NO\"\n\ndef"
    },
    {
        "number": 175,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split()\n    a, b = int(line[0]), int(line[1])\n    counter = 0\n    while a > 0 and b > 0:\n        if a >= 2 * b:\n            a -= 2 * b\n        elif b >= 2 * a:\n            b -= 2 * a\n        else:\n            break\n        counter += 1\n    return str(a) +'' + str(b)\n"
    },
    {
        "number": 175,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    if n >= 2 * m or m >= 2 * n:\n        return '{} {}'.format(0, 0)\n    a = n\n    b = m\n    while a!= 0 and b!= 0:\n        if a >= 2 * b:\n            a = a - 2 * b\n            b = b\n        else:\n            b = b - 2 * a\n            a = a\n    return '{} {}'.format(a, b)\n"
    },
    {
        "number": 175,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    while a or b:\n        if a >= 2*b:\n            a -= 2*b\n        else:\n            if b >= 2*a:\n                b -= 2*a\n            else:\n                break\n    return str(a) + \" \" + str(b)\n"
    },
    {
        "number": 175,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = b = 0\n    while n >= 0 and m >= 0:\n        if n == 0 or m == 0:\n            break\n        if n >= 2*m:\n            a += n-2*m\n            n = m\n            m = 2*a\n        elif m >= 2*n:\n            b += m-2*n\n            n = 2*b\n            m = n\n        else:\n            break\n    return str(a) + \" \" + str(b)\n"
    },
    {
        "number": 175,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    while a!= 0 and b!= 0:\n        a -= b if a < b * 2 else a - 2 * b\n        b -= a if b < a * 2 else b - 2 * a\n        print(a, b)\n    return str(a) +'' + str(b)\n"
    },
    {
        "number": 175,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    while a and b:\n        if a >= 2 * b:\n            a -= 2 * b\n        else:\n            if b >= 2 * a:\n                b -= 2 * a\n            else:\n                break\n    return f\"{a} {b}\"\n"
    },
    {
        "number": 175,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    a, b = a % (2 * b), b % (2 * a)\n    while a > 0 and b > 0:\n        a, b = a % (2 * b), b % (2 * a)\n    print(a, b)\n"
    },
    {
        "number": 175,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 175,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    while a!= 0 and b!= 0:\n        if a >= 2 * b:\n            a = a - 2 * b\n        else:\n            b = b - 2 * a\n    return str(a) +'' + str(b)\n"
    },
    {
        "number": 175,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    while a!= 0 and b!= 0:\n        if a >= 2 * b:\n            a -= 2 * b\n        elif b >= 2 * a:\n            b -= 2 * a\n        else:\n            break\n    return f\"{a} {b}\"\n"
    },
    {
        "number": 176,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, a, b = [int(i) for i in stdin.split(\" \")]\n    n = 0\n    if a > 0:\n        n += b // k - (a - 1) // k + 1\n    else:\n        n += b // k - a // k\n    if b % k!= 0:\n        n += 1\n    return str(n)\n"
    },
    {
        "number": 176,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    k, a, b = [int(x) for x in stdin.split()]\n\n    count = 0\n    if a == b:\n        count += 1\n    elif a > b:\n        return count\n    else:\n        for i in range(a, b + 1):\n            if i % k == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 176,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def divisor(n):\n        for i in range(1, int(n**0.5)+1):\n            if n % i == 0:\n                yield i\n                if i**2 == n:\n                    continue\n                yield n // i\n\n    k, a, b = list(map(int, stdin.split()))\n    n = 0\n    for i in divisor(b+1):\n        if i <= a:\n            n += b//i - a//i + 1\n        else:\n            n += b//i - a//i\n    print(n%(10**9+7))\n    return ''"
    },
    {
        "number": 176,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def divisible_by_k(x, k):\n        return True if x % k == 0 else False\n\n    a, b, k = map(int, stdin.split())\n\n    return divisible_by_k(a, k) + divisible_by_k(b, k) - divisible_by_k(a - 1, k) - divisible_by_k(b + 1, k)\n    \n"
    },
    {
        "number": 176,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return stdin"
    },
    {
        "number": 176,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    k, a, b = map(int, stdin.split())\n    return str(b - a + 1 - k + 1)\n    # + k - 1 - (b - a + 1) + 1\n"
    },
    {
        "number": 176,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    # your code here\n    # time complexity O(n)\n    # space complexity O(1)\n    k, a, b = stdin.split()\n    k = int(k)\n    a, b = int(a), int(b)\n    divisors = [i for i in range(k) if i!= 0]\n    count = 0\n    for i in range(a, b + 1):\n        if i % k == 0:\n            count += 1\n        for d in divisors:\n            if i % d!= 0:\n                break\n            if d == divisors[-1]:\n                count += 1\n    return count\n"
    },
    {
        "number": 176,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    k, a, b = map(int, stdin.split())\n    return str(a * (b - a + 1) / k + 1)\n"
    },
    {
        "number": 176,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = map(int, stdin.split(' '))\n    return str(b - a + 1 - (b - a + 1) % k)\n"
    },
    {
        "number": 176,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin[0] * stdin[1] // stdin[2])\n\n\nprint(solution(input().split()))\n"
    },
    {
        "number": 177,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return '5'"
    },
    {
        "number": 177,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return None\n"
    },
    {
        "number": 177,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    def get_digit(num, pos):\n        return num // 10**(pos-1) % 10\n    while True:\n        num = num + 1\n        if get_digit(num, k)!= 0:\n            return get_digit(num, k)"
    },
    {
        "number": 177,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    num = 12345678910111213141516171819202122232425262728293031323334353637\n    return str(num)[k-1]"
    },
    {
        "number": 177,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    n
    },
    {
        "number": 177,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return\n\"\"\"\n\nfrom itertools import count\n\ndef"
    },
    {
        "number": 177,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 177,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Complexity\n    ----------\n    O(1)\n\n    Returns\n    -------\n    str\n        The answer\n    \"\"\"\n    return \"\".join(list(map(lambda x: x.strip(), stdin.split(\"\\n\"))))[int(stdin.strip()) - 1]\n"
    },
    {
        "number": 177,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 177,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    number = '1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798999a0a1a2a3a4a5a6a7a8a9aaabacadaeafb0b1b2b3b4b5b6b7b8b9babbbcbdbebf'\n    return number[k-1]\n\nprint(solution(input()))\n"
    },
    {
        "number": 178,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 10:\n        return \"NO\"\n    s = stdin\n    if len(s) % 2 == 0 or len(s) < 10:\n        return \"NO\"\n    s = s.replace(\"8\", \"\")\n    if s[0] == \"8\":\n        return \"NO\"\n    if len(s) % 2 == 0:\n        if s[-1] == \"8\":\n            return \"NO\"\n    if len(s) == 10:\n        return \"YES\"\n    for i in range(n - 2):\n        if i % 2 == 0:\n            if s[i] == \"8\":\n                return \"NO\"\n        else:\n            if s[i]!= \"8\":\n                return \"NO\"\n    return \"YES\"\n\ndef"
    },
    {
        "number": 178,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # n = len(stdin)\n    # return \"YES\" if n % 2 == 0 or len(set(stdin)) == 1 else \"NO\"\n"
    },
    {
        "number": 178,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # \u0447\u0442\u043e\u0431\u044b \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0442\u044c \u0442\u0435\u0441\u0442\u044b \u0432 \u0434\u043e\u043a\u0430\u0445 \u043d\u0443\u0436\u043d\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0432 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438\n    # \u043f\u043e \u043f\u0440\u043e\u0441\u044c\u0431\u0435 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430 \u0432 \u043f\u0430\u043f\u043a\u0435 \u0441\u043e \u0441\u043a\u0440\u0438\u043f\u0442\u043e\u043c \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u0432\u044b\u0448\u0435 \u0432 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0438 \u0444\u0430\u0439\u043b\u0430\n    # \u043e\u0442\u043a\u0440\u044b\u0442\u044c \u0432 \u0442\u0435\u043a\u0441\u0442\u043e\u0432\u043e\u043c \u0440\u0435\u0434\u0430\u043a\u0442\u043e\u0440\u0435 \u0441\u043a\u043e\u043f\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043d\u0443\u0436\u043d\u044b\u0439 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439 \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c, \u0447\u0442\u043e \u0432\u0441\u0435 \u0441\u0447\u0438\u0442\u0430\u0435\u0442\u0441\u044f \u043a\u0430\u043a \u0437\u0430\u0434\u0430\u043d\u043e\n    # \u0435\u0441\u043b\u0438 \u043d\u0435 \u0441\u0447\u0438\u0442\u0430\u0435\u0442\u0441\u044f \u043f\u043e \u043e\u0434\u043d\u043e\u0439 \u0438\u0437 \u0444\u043e\u0440\u043c\u0443\u043b, \u0442\u043e \u0437\u0430\u0444\u0438\u043a\u0441\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0432 \u0442\u0435\u0441\u0442\u0435 \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e Assert\n\n    # \u042d\u0442\u043e\u0442 \u043a\u043e\u0434 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u043f\u0440\u0438 \u043a\u0430\u0436\u0434\u043e\u043c \u0437\u0430\u043f\u0443\u0441\u043a\u0435 \u0444\u0430\u0439\u043b\u0430 \u0438 \u043e\u043d \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0432 \u0444\u0430\u0439\u043b.gitignore \u0432 \u0442\u043e\u0439 \u0436\u0435 \u043f\u0430\u043f\u043a\u0435, \u0433\u0434\u0435 \u043b\u0435\u0436\u0438\u0442 \u0441\u043a\u0440\u0438\u043f\u0442\n    # \u041c\u043e\u0436\u043d\u043e \u043e\u0431\u043e\u0439\u0442\u0438\u0441\u044c \u0438 \u0431\u0435\u0437 \u044d\u0442\u043e\u0433\u043e \u043a\u043e\u0434\u0430 \u043d\u043e \u044d\u0442\u043e \u0441\u043a\u043e\u0440\u0435\u0435 \u0432\u0441\u0435\u0433\u043e \u043d\u0435 \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u043f\u043e\u043d\u044f\u0442\u044c \u0438\u0437 \u043a\u0430\u043a\u043e\u0433\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u0441\u043a\u0440\u0438\u043f\u0442 \u0438\u043b\u0438 \u0441\u043e\u043e\u0431\u0449\u0438\u0442\u044c \u043e\u0431 \u044d\u0442\u043e\u043c\n    # \u0427\u0442\u043e\u0431\u044b \u0443\u0437\u043d\u0430\u0442\u044c \u0432 \u043a\u0430\u043a\u043e\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u0435 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u0441\u043a\u0440\u0438\u043f\u0442 \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043f\u0430\u043f\u043a\u0443 \u0441 \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u043c \u0438 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0430\u043c\u0438. \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0444\u0430\u0439\u043b\u0430 \u043c\u043e\u0436\u043d\u043e \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u043a\u0430\u043a \u0443\u0433\u043e\u0434\u043d\u043e \u0432 \u043e\u0434\u043d\u043e\u043c \u0438\u0437 \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u0432.\n    # \u042d\u0442\u043e\u0442 \u043a\u043e\u0434 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u043f\u0440\u0438 \u043a\u0430\u0436\u0434\u043e\u043c \u0437\u0430\u043f\u0443\u0441\u043a\u0435 \u0444\u0430\u0439\u043b\u0430 \u0438 \u043e\u043d \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0432 \u0444\u0430\u0439\u043b.gitignore \u0432 \u0442\u043e\u0439 \u0436\u0435 \u043f\u0430\u043f\u043a\u0435, \u0433\u0434\u0435 \u043b\u0435\u0436\u0438\u0442 \u0441\u043a\u0440\u0438\u043f\u0442\n    # \u041c\u043e\u0436\u043d\u043e \u043e\u0431\u043e\u0439\u0442\u0438\u0441\u044c \u0438 \u0431\u0435\u0437 \u044d\u0442\u043e\u0433\u043e \u043a\u043e\u0434\u0430 \u043d\u043e \u044d\u0442\u043e \u0441\u043a\u043e\u0440\u0435\u0435 \u0432\u0441\u0435\u0433\u043e \u043d\u0435 \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u043f\u043e\u043d\u044f\u0442\u044c \u0438\u0437 \u043a\u0430\u043a\u043e\u0433\u043e \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u0441\u043a\u0440\u0438\u043f\u0442 \u0438\u043b\u0438 \u0441\u043e\u043e\u0431\u0449\u0438\u0442\u044c \u043e\u0431 \u044d\u0442\u043e\u043c\n    import sys\n    # \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u0435 \u043a \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442\u0441\u044f \u043f\u043e\u0434\u0447\u0435\u0440\u043a\u0438\u0432\u0430\u043d\u0438\u0435\u043c \u0447\u0435\u0440\u0435\u0437 _\n    _, *path = sys.argv\n    path = ''.join(path)\n    with open(path, 'w') as file:\n        file.write('\u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u0438\u0433\u0440\u044b: \u041f\u043e\u0431\u0435\u0434\u0438\u043b \u0412\u0430\u0441\u044f' if n % 2 else '\u041f\u043e\u0431\u0435\u0434\u0438\u043b \u041f\u0435\u0442\u044f')\n\n\ndef"
    },
    {
        "number": 178,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    line1 = stdin.strip().split('\\n')[0]\n    \n    if len(line1) < 11 or len(line1) > 100:\n        return 'NO'\n    if line1[0]!= '8':\n        return 'NO'\n    if len(set(line1))!= len(line1):\n        return 'NO'\n\n    for i in range(1, len(line1)):\n        if line1[i] == line1[i - 1]:\n            return 'NO'\n\n    line2 = stdin.strip().split('\\n')[1]\n    if len(line2)!= len(line1):\n        return 'NO'\n\n    for i in range(1, len(line1)):\n        if line1[i] == '8' and line2[i - 1]!= '8':\n            return 'NO'\n\n    return 'YES'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 178,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if stdin[0] == \"8\" else \"NO\"\n'''\n"
    },
    {
        "number": 178,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    for i in range(len(s)):\n        if int(s[i]) == 8:\n            if i < len(s)-1:\n                if int(s[i+1])!= 8:\n                    return \"YES\"\n            else:\n                return \"YES\"\n    return \"NO\""
    },
    {
        "number": 178,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\""
    },
    {
        "number": 178,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns YES if Vasya can win.\n    Returns NO if Petya can win.\n    '''\n    n = int(stdin)\n    nums = [int(n) for n in stdin]\n    vasya_digs = []\n    petya_digs = []\n    for i in range(n):\n        if i % 2 == 0:\n            vasya_digs.append(nums[i])\n        else:\n            petya_digs.append(nums[i])\n    vasya_digs.sort()\n    petya_digs.sort()\n    if len(petya_digs) % 2 == 1:\n        petya_digs = [petya_digs[-1]] + petya_digs[:-1]\n    for p in petya_digs:\n        vasya_digs.remove(p)\n    if len(vasya_digs) == 0:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 178,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 178,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(0, n):\n        s = stdin.split()\n        if i % 2 == 0:\n            s1 = s[0]\n        else:\n            s2 = s[0]\n    return s1 + s2\n"
    },
    {
        "number": 179,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x, pos = [int(i) for i in stdin.split(' ')]\n    res = (1 + n) * n // 2\n    res = res if pos >= 1 else res - 1\n    res = res if x <= n else res - 1\n    print(res % (10 ** 9 + 7))\n"
    },
    {
        "number": 179,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    n, x, pos = [int(x) for x in stdin.split()]\n    r = 0\n    for i in range(1, n + 1):\n        for j in range(i):\n            for k in range(j):\n                if i > j > k:\n                    r += 1\n    return str(r % (1_000_000_007))\n"
    },
    {
        "number": 179,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    n, x, pos = [int(num) for num in stdin.split()]\n    left = 0\n    right = n\n    while left < right:\n        middle = (left + right) // 2\n        if x <= middle:\n            left = middle + 1\n        else:\n            right = middle\n    if left > 0 and left == pos + 1:\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 179,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, x, pos = list(map(int, stdin.split()))\n    if n == 1:\n        return 0\n    if pos == 0:\n        if n % 2 == 0:\n            return (x <= n // 2) + (x <= n // 2)\n        else:\n            return (x <= n // 2)\n    if x <= n // 2:\n        return (x <= n // 2) * (n // 2) + (x <= n // 2) * (x <= n // 2)\n    else:\n        return (x <= n // 2) * (n // 2) + (x <= n // 2) * (x <= n // 2) + (x <= pos) * (pos)"
    },
    {
        "number": 179,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, x, pos = [int(v) for v in stdin.split(' ')]\n\n    return (n - pos) * (n - pos - 1) // 2\n"
    },
    {
        "number": 179,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, x, pos = map(int, stdin.split())\n    \n    def possible_perms(n, x):\n        if x > n: return 0\n        if x == 1: return 1\n        return possible_perms(n - 1, x) + possible_perms(n - 1, x - 1)\n        \n    print(possible_perms(n, x) % (10**9 + 7))\n\nsolution(input())"
    },
    {
        "number": 179,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 179,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''Returns the number of permutations with x at pos\n\n    Args:\n        stdin (str): input from stdin\n\n    Returns:\n        str: answer to the problem\n    '''\n    n, x, pos = list(map(int, stdin.split()))\n    if pos >= n:\n        return '0'\n    \n    if pos == 0:\n        x_idx = 1\n    else:\n        x_idx = pos+1\n    \n    # get all permutations\n    perms = get_permutations(list(range(1, n+1)))\n\n    # get all permutations where x is in them\n    valid = []\n    for perm in perms:\n        if perm[pos] == x:\n            valid.append(perm)\n    \n    return str(len(valid))\n    \n    \ndef"
    },
    {
        "number": 179,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split(\"\\n\")\n    n, x, pos = [int(s) for s in inputs[0].split(\" \")]\n    a = [int(s) for s in inputs[1].split(\" \")]\n    a.sort()\n    left = 0\n    right = n\n    res = 0\n    while left < right:\n        middle = (left + right) // 2\n        if a[middle] < x:\n            left = middle + 1\n        else:\n            right = middle\n    if left > 0 and a[left - 1] == x:\n        res += 1\n    # print(left, right)\n    for i in range(pos, -1, -1):\n        if a[i] < x:\n            right = i\n        elif a[i] > x:\n            left = i\n        else:\n            break\n    # print(left, right)\n    res += (n - right) + 1\n    # print(res)\n    return str(res % (1e9 + 7))\n\nprint(solution(input()))"
    },
    {
        "number": 179,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def counting_sort(a):\n        n = len(a)\n        b = [0] * n\n        c = [0] * (max(a) + 1)\n        for x in a:\n            c[x] += 1\n        for i in range(1, len(c)):\n            c[i] += c[i - 1]\n        for i in range(n - 1, -1, -1):\n            b[c[a[i]] - 1] = a[i]\n            c[a[i]] -= 1\n        return b\n\n    n, x, pos = [int(x) for x in stdin.split()]\n    a = list(range(n))\n    a[pos] = x\n    a = counting_sort(a)\n    return str(n - a.count(x))\n"
    },
    {
        "number": 180,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    ans = []\n    for l in stdin:\n        if l == \"*\":\n            ans.pop()\n        elif l == \"?\":\n            if len(ans) == 0:\n                break\n            ans.append(ans[-1])\n        else:\n            ans.append(l)\n    if len(ans) == 0:\n        print(\"Impossible\")\n    else:\n        print(''.join(ans))"
    },
    {
        "number": 180,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    letters = \"abcdefghijklmnopqrstuvwxyz\"\n    snowflake_letters = \"abcdefghijklmnopqrstuvwxyz\"\n    snowflake_regex = r'(([^*])*)?([*]*)([^*])*'\n    snowflake_repl = r'\\1\\2'\n    return re.sub(snowflake_regex, snowflake_repl, stdin)\n"
    },
    {
        "number": 180,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin\n    snowflakes = stdin.count('*')\n    canes = stdin.count('?')\n    letters = len(string) - snowflakes - canes\n    if letters!= len(stdin) / 2:\n        return 'Impossible'\n    while '?' in string:\n        string = string.replace('?', '', 1)\n    while '*' in string:\n        string = string.replace('*', '', 1)\n    return string\n"
    },
    {
        "number": 180,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    snowflake = stdin.count(\"*\")\n    candy_cone = stdin.count(\"?\")\n    if snowflake > 1 and candy_cone > 1:\n        return \"Impossible\"\n    elif snowflake == 0 and candy_cone == 0:\n        return \"Impossible\"\n    elif snowflake == 0 and candy_cone == 1:\n        return \"\".join(i for i in stdin if i not in \"?*\")\n    elif snowflake == 1 and candy_cone == 0:\n        return \"\".join(i for i in stdin if i not in \"*\")\n    elif snowflake == 1 and candy_cone == 1:\n        return \"\".join(i for i in stdin if i not in \"*?\")\n    elif snowflake == 2 and candy_cone == 0:\n        return \"\".join(i for i in stdin if i not in \"*?\")\n    elif snowflake == 2 and candy_cone == 1:\n        return \"\".join(i for i in stdin if i not in \"?*\")\n    elif snowflake == 3 and candy_cone == 0:\n        return \"\".join(i for i in stdin if i not in \"*?\")\n    elif snowflake == 3 and candy_cone == 1:\n        return \"\".join(i for i in stdin if i not in \"?*?\")\n    elif snowflake == 4 and candy_cone == 0:\n        return \"\".join(i for i in stdin if i not in \"*??\")\n    elif snowflake == 4 and candy_cone == 1:\n        return \"\".join(i for i in stdin if i not in \"?*??\")\n    elif snowflake == 5 and candy_cone == 0:\n        return \"\".join(i for i in stdin if i not in \"*??\")\n    elif snowflake == 5 and candy_cone == 1:\n        return \"\".join(i for i in stdin if i not in \"?*???\")\n    elif snowflake == 6 and candy_cone == 0:\n        return \"\".join(i for i in stdin if i not in \"*????\")\n    elif snowflake == 6 and candy_cone == 1:\n        return \"\".join(i for i in stdin if i not in \"?*???\")\n    elif snowflake == 7 and candy_cone == 0:\n        return \"\".join(i for i in stdin if i not in \"*???\")\n    elif snowflake == 7 and candy_cone == 1:\n        return \"\".join(i for i in stdin if i not in \"?*???\")\n    elif snowflake == 8 and candy_cone == 0:\n        return \"\".join(i for i in stdin if i not in \"*???\")\n    elif snowflake == 8 and candy_cone == 1:\n        return \"\".join(i for i in stdin if i not in \"?*???\")\n    elif snowflake == 9 and candy_cone == 0:\n        return \"\".join(i for i in stdin if i not in \"*???\")\n    elif snowflake == 9 and candy_cone == 1:\n        return \"\".join(i for i in stdin if i not in \"?*???\")\n    elif snowflake == 10 and candy_cone == 0:\n        return \"\".join(i for i in stdin if i not in \"*???\")\n    elif snowflake == 10 and candy_cone == 1:\n        return \"\".join(i for i in stdin if i not in \"?*???\")\n    elif snowflake == 11 and candy_cone == 0:\n        return \"\".join(i for i in stdin if i not in \"*???\")\n    elif snowflake == 11 and candy_cone == 1:\n        return \"\".join(i for i in stdin if i not in \"?*???\")\n    elif snowflake == 12 and candy_cone == 0:\n        return \"\".join(i for i in stdin if i not in \"*???\")\n    elif snowflake == 12 and candy_cone == 1:\n        return \"\".join(i for i in stdin if i not in \"?*???\")\n    else:\n        return \"Impossible\"\n\nprint(solution(stdin))\n\n\n\ndef"
    },
    {
        "number": 180,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s, k = stdin.split('\\n')\n    s = s[:-1]\n    k = int(k)\n    if s.count('?')!= k-1 or s.count('*')!= k-1:\n        return 'Impossible'\n    count = 0\n    out = ''\n    for i in range(len(s)):\n        if s[i]!= '?' and s[i]!= '*':\n            out += s[i]\n            count = 0\n        elif s[i] == '?':\n            count += 1\n            if count > k:\n                return 'Impossible'\n        elif s[i] == '*':\n            out += out[-1]\n            count = 0\n    return out\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 180,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    print(stdin)\n    for i in range(len(stdin)):\n        if stdin[i]!= '?':\n            stdin = stdin[:i] + stdin[i+1:]\n    stdin = stdin.split('*')\n    print(stdin)\n    stdin = [int(x) for x in stdin]\n    #stdin = [int(x) if x.isdigit() else x for x in stdin]\n    print(stdin)\n    return stdin\n\n\nsolution(\"ab?a\")\nsolution(\"ab?a\")\nsolution(\"ababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab"
    },
    {
        "number": 180,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin.split('*')\n    cnt = 0\n    for i in string:\n        if i.count('?') == 0:\n            cnt += len(i)\n        else:\n            if i[0] == '?':\n                cnt += 1\n                if i[1:].count('?') > 0:\n                    cnt += i[1:].count('?')\n            else:\n                cnt += 1\n                if i.count('?') > 1:\n                    cnt += i.count('?') - 1\n    return cnt == len(stdin)"
    },
    {
        "number": 180,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    def decrypt(stdin: str) -> str:\n        \n        output = []\n        s = stdin.split('*')\n        \n        for i in s:\n            if i == '':\n                output.append('*')\n            elif i.isdigit():\n                for j in range(int(i)):\n                    output.append(chr(ord(output[-1])+1))\n            else:\n                output.append(i[0])\n        \n        return ''.join(output)\n    \n    stdin = stdin.replace('?', '*')\n    stdin = stdin.replace('?', '*')\n    \n    for i in range(1, 200):\n        if i >= len(stdin):\n            break\n        \n        stdin = stdin[i:]\n        stdin = decrypt(stdin)\n        \n        if '*' in stdin:\n            continue\n        else:\n            return stdin\n    \n    return 'Impossible'\n"
    },
    {
        "number": 180,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 180,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) > 200:\n        return \"Impossible\"\n    words = stdin.split(\"*\")\n    res = []\n    c = 0\n    while words[0]!= \"\" and c < 200:\n        if words[0][0] == \"?\":\n            try:\n                res.append(words.pop(0))\n                c += 1\n            except:\n                return \"Impossible\"\n        elif words[0][0] == \"?\":\n            try:\n                res.append(words.pop(0))\n                c += 1\n            except:\n                return \"Impossible\"\n        else:\n            try:\n                res.append(words.pop(0))\n                words[0] = words[0][1:]\n                c += 1\n            except:\n                return \"Impossible\"\n    return \"\".join(res)\n"
    },
    {
        "number": 181,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns smallest number of 90 clockwise turns needed to get image\n    deviated from vertical by at least 30 degrees.\"\"\"\n    # get input\n    angle = int(stdin)\n\n    # check that it's a multiple of 90\n    if angle % 90!= 0:\n        return '-1'\n\n    # rotate to 90 degrees clockwise\n    angle = (angle // 90) + 1\n\n    # rotate back\n    return str(angle)\n\"\"\"\n\n\ndef"
    },
    {
        "number": 181,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    return 0 if x == 0 else abs(x) // 90 + abs(abs(x) % 90) // 90 + abs(abs(x) % 90) // 90\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 181,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 181,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    \n    if x == 0:\n        return 0\n    elif x > 0:\n        return x % 90\n    elif x < 0:\n        return abs(90 - abs(x % 90))\n"
    },
    {
        "number": 181,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    angle = int(stdin)\n    return min(angle // 90, 3)\n"
    },
    {
        "number": 181,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"3\"\n\n\"\"\"\n\n\n\ndef"
    },
    {
        "number": 181,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    return x % 360 if x % 360 < 90 else 360 - x % 360\n"
    },
    {
        "number": 181,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    angle = int(stdin)\n    print(angle//90)\n    \n"
    },
    {
        "number": 181,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 181,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    return \"3\" if x < 0 else \"1\" if x % 90 == 0 else \"2\" if x % 90 == 60 else \"4\"\n\nimport sys\n\nprint(solution(sys.stdin.readline()))\n"
    },
    {
        "number": 182,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if (len([i for i in stdin.split(\" \") if i == \"1\"])) >= 2 else \"No\"\n\n\n\ndef"
    },
    {
        "number": 182,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split(' '))\n    x, y, z = map(int, stdin.split(' '))\n    if a < x:\n        return 'No'\n    if b < y:\n        return 'No'\n    if c < z:\n        return 'No'\n\n    n = 0\n    while a >= x and b >= y and c >= z:\n        if a >= x and b >= y:\n            n += 1\n            a = a - x\n            b = b - y\n        else:\n            n += 1\n            a = a - x\n            c = c - z\n        if a < x:\n            return 'No'\n        if b < y:\n            return 'No'\n        if c < z:\n            return 'No'\n    return 'Yes'\n\n\nsolution(input())\n\n\ndef"
    },
    {
        "number": 182,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a,b,c,d = map(int,stdin.split())\n    x,y,z = map(int,input().split())\n    a,b,c,d = a-x,b-y,c-z,d-x-y-z\n    if a<=0 or b<=0 or c<=0 or d<=0:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 182,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, x, y, z = list(map(int, stdin.split()))\n    if x + y + z >= a + b + c and x + y >= a + b and x + z >= a + c and y + z >= b + c:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 182,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    a, b, c = [int(x) for x in stdin[0].split()]\n    x, y, z = [int(x) for x in stdin[1].split()]\n\n    if a == 0 or b == 0 or c == 0:\n        if x == 0 or y == 0 or z == 0:\n            return \"Yes\"\n        else:\n            return \"No\"\n    if (a * 2) + (b * 3) + (c * 5) < x + y + z:\n        return \"No\"\n    return \"Yes\"\n\n\ndef"
    },
    {
        "number": 182,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    blue, violet, orange = [int(i) for i in stdin.split(' ')]\n    x, y, z = [int(i) for i in stdin.split(' ')]\n    k = [int(i) for i in stdin.split(' ')]\n    a = max(k)\n    if (a - 1) * blue + violet < x + y + z:\n        print(\"No\")\n        return\n    if (a - 1) * blue + violet - (x + y + z) <= 0:\n        print(\"No\")\n        return\n    print(\"Yes\")\n    return\n\nsolution(input())\n\nsolution('4 4 0')\nsolution('2 1 2')\nsolution('5 6 1')\nsolution('2 7 2')\nsolution('3 3 3')\nsolution('2 2 2')\nsolution('1 1 1')\nsolution('2 1 3')\nsolution('1 1 0')\nsolution('0 0 0')\nsolution('0 1 0')\nsolution('0 1 2')\nsolution('0 0 2')\nsolution('0 1 1')\nsolution('1 0 1')\nsolution('0 0 1')\nsolution('1 0 1')\nsolution('0 0 1')\nsolution('0 0 0')\nsolution('1 0 0')\nsolution('0 0 0')\nsolution('0 1 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution('0 0 0')\nsolution"
    },
    {
        "number": 182,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    blue, violet, orange = [int(x) for x in stdin.split()]\n    if blue >= 2 and violet >= 1 and orange >= 1:\n        return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 182,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, x, y, z = [int(x) for x in stdin.split('\\n')]\n\n    # solve for x\n    x -= 1\n    y -= 1\n    z -= 1\n    a -= 1\n    b -= 1\n    c -= 1\n\n    while x >= 0 and y >= 0 and z >= 0 and a >= 0 and b >= 0 and c >= 0:\n        if x >= 2:\n            if y >= 2:\n                if z >= 2:\n                    if a >= 1 and b >= 1 and c >= 1:\n                        return \"Yes\"\n                    else:\n                        return \"No\"\n                else:\n                    return \"No\"\n            else:\n                return \"No\"\n        else:\n            return \"No\"\n\n\"\"\"\n\ndef"
    },
    {
        "number": 182,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, x, y, z = list(map(int, stdin.split()))\n    if (a + b >= x and a + c >= y and b + c >= z) or x > y + z or y > x + z or z > x + y:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 182,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    from collections import Counter\n    [a, b, c] = map(int, stdin.split(' '))\n    [x, y, z] = map(int, stdin.split(' '))\n    # The answer is True if the magician can turn a certain number of blue,\n    # violet and orange spheres into orange, violet and blue spheres,\n    # otherwise it is False.\n    return 'Yes' if a * b * c >= x * y * z else 'No'\n\nprint(solution(input()))\n"
    },
    {
        "number": 183,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 183,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n"
    },
    {
        "number": 183,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    n, k, m = map(int, stdin.split())\n    count = 0\n    for i in range(n):\n        for j in range(n-i):\n            for z in range(n-i-j):\n                if (k ** i) % m == 0 and ((k**j) + (k**z) * 10) % m == 0:\n                    count += 1\n    return count\n"
    },
    {
        "number": 183,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"This solution is not memory efficient.\n    \"\"\"\n    n, k, m = map(int, stdin.split())\n    if n < 1 or n > 1000:\n        raise ValueError(\"Invalid n!\")\n    if k < 1 or k > 100:\n        raise ValueError(\"Invalid k!\")\n    if m < 1 or m > 10 ** 9:\n        raise ValueError(\"Invalid m!\")\n    count = 0\n    for i in range(n, n+m):\n        if \"0\" in str(i):\n            continue\n        if len(str(i))!= n:\n            continue\n        if i % k == 0:\n            count += 1\n    return count % m\n\n\ndef"
    },
    {
        "number": 183,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = [int(x) for x in stdin.split()]\n    return '0' if k == 1 else n * k * m % m\n"
    },
    {
        "number": 183,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, k, m = map(int, stdin.split())\n    res = 0\n    for i in range(k):\n        res += m\n    return str(res % m)\n\nprint(solution(input()))\n"
    },
    {
        "number": 183,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = [int(x) for x in stdin.split(' ')]\n    return str(sum([1 if len(str(x)) == n and (y := k * x % m)!= 0 else 0 for x in range(1, 10 ** n)]))\n"
    },
    {
        "number": 183,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = [int(x) for x in stdin.split()]\n    print(sum(len(str(x)) for x in range(n, k * m + 1, k)))\n"
    },
    {
        "number": 183,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)\n"
    },
    {
        "number": 183,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 184,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    left = int(stdin[0])\n    right = int(stdin[1])\n    ambidexters = int(stdin[2])\n    return left * right * 2 - ambidexters * 2\n\"\"\"\n\ndef"
    },
    {
        "number": 184,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    left, right, ambi = map(int, stdin.split())\n    print(2 * (left + right + ambi) + max(left - right, 0) + max(right - left, 0))\n"
    },
    {
        "number": 184,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the size of the biggest possible team of players who play with\n    both hands equally.\n\n    Args:\n        stdin (str): Input\n\n    Returns:\n        str: Solution to the problem\n    \"\"\"\n\n    return str(int(find_biggest_team(read_input(stdin))))\n\n\ndef"
    },
    {
        "number": 184,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    l, r, a = list(map(int, stdin.split()))\n    max_team = l + r + a\n    return f'{max_team if max_team % 2 == 0 else max_team - 1}'\n"
    },
    {
        "number": 184,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split('\\n')[0].split(' ')\n    left = int(line[0])\n    right = int(line[1])\n    ambidexter = int(line[2])\n    return str(left + right + ambidexter)\n"
    },
    {
        "number": 184,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split()\n    b = [int(i) for i in a]\n    return str(a)"
    },
    {
        "number": 184,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 184,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    [l, r, a] = list(map(int, stdin.split(\" \")))\n    print(l * r * 2 - a * 2)"
    },
    {
        "number": 184,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    l, r, a = [int(num) for num in stdin.split(' ')]\n    \n    team = l\n    for i in range(0, a):\n        team += r\n    \n    team += l\n    for i in range(0, a):\n        team += l\n    \n    return str(team)\n"
    },
    {
        "number": 184,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    left, right, ambi = map(int, stdin.split())\n    n = (left + right + ambi) // 2\n    return n - right + ambi - left\n\n\ndef"
    },
    {
        "number": 185,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    stdin = stdin.strip().split(\" \")\n    n = int(stdin[0])\n    k = int(stdin[1])\n    count = 0\n    while(k<=n):\n        if(k==n):\n            count += n\n            break\n        count += 1\n        k = k*2\n    return str(count)\n"
    },
    {
        "number": 185,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('''4 2''')\n    6\n    >>> solution('''5 1''')\n    15\n    >>> solution('''5 3''')\n    13\n    >>> solution('''5 2''')\n    15\n    >>> solution('''5 5''')\n    0\n    '''\n    n, k = [int(n) for n in stdin.split()]\n    ans = n + 1\n    for i in range(1, n - 1):\n        ans = min(ans, max(i - k + 1, n - i + k - 1) + 1)\n    return ans\n"
    },
    {
        "number": 185,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stones_count, from_index = map(int, stdin.split(' '))\n    stones = [0] * stones_count\n\n    for i in range(from_index - 1, -1, -1):\n        stones[i] = 1\n\n    visited = [0] * stones_count\n    q = []\n    q.append(0)\n    visited[0] = 1\n    total_coins = 0\n    while len(q)!= 0:\n        current_index = q[0]\n        q.pop(0)\n        if current_index == stones_count - 1:\n            return total_coins\n        for i in range(current_index, -1, -1):\n            if visited[i] == 0:\n                if stones[i] == 1:\n                    q.append(i)\n                    visited[i] = 1\n                else:\n                    q.append(i)\n                    visited[i] = 1\n                    q.append(i)\n                    stones[i] = 1\n                    visited[i] = 1\n        q.append(current_index)\n        total_coins += 1\n    return total_coins\n"
    },
    {
        "number": 185,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Since we only have two options at each step, it is enough to use a greedy\n    approach. First we collect all the stones in a list, then we take the minimum\n    amount of throws it would take to collect them all, and then we do the rest\n    of the moves in the same way.\n    \"\"\"\n    stones = [int(char) for char in stdin.split(' ')]\n    stones = sorted(stones)\n    \n    # The number of throws required to collect all the stones is the index of\n    # the last stone in the list minus the index of the first stone.\n    min_throws = stones[-1] - stones[0]\n    \n    # In the remaining moves we add the number of stones times the index of the\n    # manhole minus the index of the stone to get the total number of moves.\n    remaining = stones[0] - 1\n    for i in range(1, len(stones)):\n        remaining += stones[i] - 1 - i\n    \n    return min_throws + remaining\n"
    },
    {
        "number": 185,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    if n == 1:\n        return 0\n    if k == 1:\n        return n - 1\n    return n + k - 1\n"
    },
    {
        "number": 185,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 185,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n  '''\n  Returns minimum number of moves to pick all the coins.\n  '''\n  n, k = map(int, stdin.split(' '))\n\n  return n*k\n"
    },
    {
        "number": 185,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    pass\n"
    },
    {
        "number": 185,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(str(input()))\n    str\n    \"\"\""
    },
    {
        "number": 185,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    stones = []\n    for i in range(n):\n        stones.append(0)\n    while k < n:\n        stones[k] += 1\n        k += k % n + 1\n    return len(stones) - stones.count(1)"
    },
    {
        "number": 186,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return n + m - 1"
    },
    {
        "number": 186,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(max([n + m - i for i in range(n + m + 1)]))\n\ndef"
    },
    {
        "number": 186,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    return str(n + m - 1)\n"
    },
    {
        "number": 186,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split(' ')]\n    return str(a+b)"
    },
    {
        "number": 186,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.split()]\n    result = 0\n    for i in range(n + m):\n        if i % 3 == 0:\n            result += 2\n        else:\n            result += 3\n    return result\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 186,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(b)\n\"\"\"\n\ndef"
    },
    {
        "number": 186,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    \n    if n + m == 1:\n        return 0\n    \n    if m == 1:\n        return n - 1\n    \n    \n    return n + m - 1\n"
    },
    {
        "number": 186,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    [n, m] = map(int, stdin.split())\n    return str(max(n, m)*3)\n"
    },
    {
        "number": 186,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = stdin.split(\" \")\n    n, m = int(n), int(m)\n    if n + m > 0 and n <= 100000 and m <= 100000:\n        return str(n + m - 1)\n"
    },
    {
        "number": 186,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 187,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Your solution must contain only your name and surname.\n    It must not contain any additional functions.\n    '''\n    pass\n    return ''"
    },
    {
        "number": 187,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2!= 0:\n        return \"NO\"\n\n    s = set()\n    for i in range(n):\n        if i % 2 == 0:\n            s.add(int(stdin))\n        else:\n            s.add(int(stdin))\n    if len(s)!= n:\n        return \"NO\"\n    return \"YES \" + str(sorted(list(s))[0]) + \" \" + str(sorted(list(s))[1])\n\n\ndef"
    },
    {
        "number": 187,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin)\n    if n % 2!= 0:\n        return \"NO\"\n    if n == 2:\n        return \"YES\\n1 1\"\n    s = set()\n    for i in range(n):\n        s.add(int(stdin))\n    if len(s) == n:\n        return \"YES\\n1 \" + str(s.pop())\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 187,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    set_a = set()\n    set_b = set()\n    \n    for i in range(n):\n        if i % 2 == 0:\n            set_a.add(int(stdin))\n        else:\n            set_b.add(int(stdin))\n            \n    if len(set_a) > len(set_b):\n        print(\"NO\")\n        return\n    elif len(set_a) < len(set_b):\n        print(\"NO\")\n        return\n    elif len(set_a) == len(set_b):\n        print(\"YES\")\n        print(min(set_a), max(set_b))\n        return\n    else:\n        print(\"NO\")\n        return\n"
    },
    {
        "number": 187,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    \u041e\u0442\u043a\u0440\u044b\u0432\u0430\u0435\u043c \u0444\u0430\u0439\u043b \u0434\u043b\u044f \u0447\u0442\u0435\u043d\u0438\u044f\n    \u0421\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c \u0432\u0442\u043e\u0440\u043e\u0439 \u0441\u0442\u043e\u043b\u0431\u0435\u0446 \u0444\u0430\u0439\u043b\u0430\n    \u0412\u044b\u0432\u043e\u0434\u0438\u043c \u043e\u0442\u0432\u0435\u0442\n    \u0417\u0430\u043a\u0440\u044b\u0432\u0430\u0435\u043c \u0444\u0430\u0439\u043b\n    '''\n    with open('../input.txt', 'r') as file:\n        arr = file.read().splitlines()\n    print(arr)\n    print(arr[0])\n    first_col = arr[1::2]\n    second_col = arr[2::2]\n    print(first_col)\n    print(second_col)\n    print(len(first_col), len(second_col))\n    sum_1 = int(first_col[0])\n    sum_2 = int(second_col[0])\n    for i in range(len(first_col)):\n        sum_1 += int(first_col[i])\n        sum_2 += int(second_col[i])\n    if sum_1 == sum_2:\n        print('YES')\n    else:\n        print('NO')\n\n\nsolution('../input.txt')\n"
    },
    {
        "number": 187,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    \n    return 'NO' if n % 2!= 0 else f'YES\\n{n // 2 + 1} {n // 2 + 1}'\n"
    },
    {
        "number": 187,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    print(solution(stdin))\n    return..."
    },
    {
        "number": 187,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    # Your code here\n    # It's main function. Don't remove this function\n    # It's using for auto-testing\n    # End of your main function\n    return result"
    },
    {
        "number": 187,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n11\\n27\\n27\\n11\\n\")\n    'YES\\n11 27'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 187,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    cards = [int(stdin) for stdin in stdin]\n\n    if cards[0] == cards[1] == cards[2] or cards[0] == cards[1] == cards[3]:\n        return \"NO\"\n    if cards[0] == cards[1] or cards[0] == cards[2] or cards[0] == cards[3]:\n        return \"NO\"\n    if cards[0] == cards[1] or cards[0] == cards[2] or cards[0] == cards[4]:\n        return \"NO\"\n    if cards[0] == cards[1] or cards[0] == cards[3] or cards[0] == cards[4]:\n        return \"NO\"\n    if cards[0] == cards[2] or cards[0] == cards[4] or cards[1] == cards[3] or cards[1] == cards[4]:\n        return \"NO\"\n    if cards[0] == cards[3] or cards[0] == cards[4] or cards[1] == cards[2] or cards[2] == cards[4]:\n        return \"NO\"\n    if cards[1] == cards[3] or cards[1] == cards[4] or cards[2] == cards[4]:\n        return \"NO\"\n    if cards[3] == cards[4]:\n        return \"NO\"\n    return \"YES\""
    },
    {
        "number": 188,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    s = stdin.split(' ')[1:]\n    s = [int(i) for i in s]\n    s = sorted(s)\n    count = 0\n    for i in range(1, len(s)):\n        if s[i] == s[i - 1] + 1:\n            count += 1\n        else:\n            count = 0\n        if count == (n - 1):\n            return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 188,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split(' ')))\n    a = list(map(int, stdin.split(' ')))\n    a.sort(reverse=True)\n    if a[0] % 8 == 0:\n        return 'YES'\n    else:\n        return 'NO'\n\ndef"
    },
    {
        "number": 188,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    size, n_of_group = stdin.split()\n    group_size = [int(s) for s in n_of_group.split()]\n    print(group_size)\n    return \"YES\"\n"
    },
    {
        "number": 188,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"YES\" if len(stdin.split(\"\\n\")) == 2 else \"NO\"\n"
    },
    {
        "number": 188,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Input:\n        stdin: input string\n    Output:\n        return string\n    '''\n    # \uc785\ub825\ubc1b\uae30\n    n, k = map(int, stdin.split(' '))\n    arr = list(map(int, stdin.split(' ')))\n\n    # \ucd5c\ub300 \uc81c\ud55c\uc2dc\uac04 \ud310\ub2e8\n    if n < k:\n        return \"NO\"\n\n    # \uad6c\uc131\uc6d0\uc774 \ud55c \uc904\ub85c \uc11c \uc788\ub294 \uacbd\uc6b0 \uccb4\ud06c\n    if sum(arr) % n == 0:\n        return \"YES\"\n\n    # \uad6c\uc131\uc6d0\uc774 \ud55c \uc904\ub85c \uc11c \uc788\uc9c0 \uc54a\ub294 \uacbd\uc6b0, \uc815\ub82c\ud558\uace0 \ub2e4\uc2dc \uccb4\ud06c\n    arr.sort()\n    for i in range(k):\n        # \uc55e\uc73c\ub85c \ub098\uba38\uc9c0\ub294 \uc624\ub984\ucc28\uc21c\n        if arr[i] % n > arr[0] % n:\n            return \"NO\"\n    return \"YES\"\n\n\ndef"
    },
    {
        "number": 188,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Write a function that takes two numbers n, m and return a string that has m random characters from the alphabet [a-z] of length n.\n    '''\n    pass"
    },
    {
        "number": 188,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    cnt = 0\n    for i in range(k):\n        cnt += n - i\n\n    if cnt > 8 * k or cnt < 0:\n        return \"NO\"\n\n    return \"YES\"\n"
    },
    {
        "number": 188,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    num_groups, num_soldiers = [int(s) for s in stdin.split()]\n    groups = [int(s) for s in stdin.split()]\n    num_rows, num_seats = 8, 8\n    seats = [0]*num_rows\n    for i in range(num_groups):\n        seat_count = min(groups[i], num_seats)\n        seats[i] += seat_count\n        groups[i] -= seat_count\n        if groups[i] > 0:\n            for row in range(i, min(groups[i], num_rows)):\n                seats[row] += 1\n                groups[i] -= 1\n                if groups[i] == 0:\n                    break\n    if any(groups):\n        return 'NO'\n    return 'YES'"
    },
    {
        "number": 188,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split()\n    k = int(k)\n    soldiers = list(map(int, stdin.split()))\n    return \"YES\" if sum(soldiers) <= 8 * int(n) else \"NO\"\n\n\ndef"
    },
    {
        "number": 188,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your solution goes here. You can write additional functions and use the'main' function to test your solution.\n    The'main' function is already written for you.\n    You have to fill in the missing parts.\n    \"\"\"\n    row_seats, groups_seats = [int(x) for x in stdin.split(\" \")]\n    groups = [int(x) for x in stdin.split(\" \")]\n\n    # check if total seats is smaller than n\n    if sum(groups) < 8 * row_seats:\n        return \"NO\"\n    # create a list of seats in each row\n    rows = [0] * row_seats\n    for i in range(groups_seats):\n        for j in range(groups[i]):\n            rows[j] += 1\n        # check if all seats are occupied\n        if sum(rows) == row_seats * groups[i]:\n            return \"YES\"\n        # check if two neighboring seats are occupied\n        for j in range(1, len(rows)):\n            if rows[j - 1] == 0 and rows[j] == 1:\n                return \"YES\"\n    return \"NO\"\n\ndef"
    },
    {
        "number": 189,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 189,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the minimum number of sticks to make all the sticks almost good\"\"\"\n    #\n    #\n    #\n    return '\\n'.join([str(min_good_stick), str(min_cost)])\n"
    },
    {
        "number": 189,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    # A: O(n) time, O(1) space\n    a.sort()\n    # B: O(n) time, O(1) space\n    t = 1\n    min_cost = 0\n    for i in range(n):\n        # C: O(n) time, O(1) space\n        min_cost += max(abs(a[i] - t), 1)\n        # D: O(n) time, O(1) space\n        if a[i] - t > 1:\n            t += 1\n    # E: O(1) time, O(1) space\n    return str(t) + \" \" + str(min_cost)\n"
    },
    {
        "number": 189,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Time: O(n*max(a))\n    Space: O(max(a))\n    '''\n\n    n = int(stdin)\n    a = [int(x) for x in stdin.split(\" \")]\n    a.sort()\n    best = 1e100\n    for i in range(n):\n        best = min(best, abs(a[0] - a[i]))\n        if a[i] > 1:\n            best = min(best, a[i] - 1)\n    print(best)\n"
    },
    {
        "number": 189,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # return \"\"\n\n    # stdin = stdin.split()\n    # n = int(stdin[0])\n    # sticks = [int(s) for s in stdin[1:]]\n\n    # n = int(input())\n    # sticks = [int(input()) for _ in range(n)]\n\n    n = int(stdin[0])\n    sticks = sorted([int(s) for s in stdin[1:]])\n    print(sticks)\n\n    min_cost = 0\n    if n == 1:\n        min_cost = abs(sticks[0] - sticks[0])\n    else:\n        min_cost = abs(sticks[0] - sticks[0]) + abs(sticks[-1] - sticks[-1])\n    for i in range(1, len(sticks) - 1):\n        diff = abs(sticks[i] - sticks[i - 1]) + abs(sticks[i] - sticks[i + 1])\n        min_cost = min(min_cost, diff)\n    print(min_cost)\n\n    # min_cost = abs(sticks[0] - sticks[0]) + abs(sticks[-1] - sticks[-1])\n    #\n    # for i in range(1, len(sticks) - 1):\n    #     diff = abs(sticks[i] - sticks[i - 1]) + abs(sticks[i] - sticks[i + 1])\n    #     if diff < min_cost:\n    #         min_cost = diff\n    #\n    # if min_cost == 0:\n    #     print(2, 0)\n    # else:\n    #     print(2, min_cost)\n\n\nsolution(\"4\\n1 1 2 2 3\")\n"
    },
    {
        "number": 189,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 10 1 4\n   ... ''')\n    7 3\n\n    >>> solution('''5\n   ... 1 1 2 2 3\n   ... ''')\n    2 0\n\n    \"\"\"\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    dp = [[float('inf')] * (20001) for _ in range(n)]\n    dp[0][arr[0]] = 0\n    for i in range(n):\n        for j in range(20001):\n            if dp[i][j] < float('inf'):\n                dp[i + 1][abs(j - arr[i])] = min(dp[i][j] + abs(j - arr[i]), dp[i][abs(j - arr[i])])\n                dp[i + 1][j] = min(dp[i][j], dp[i][abs(j - arr[i])])\n    mini = min(dp[-1])\n    for i in range(20001):\n        if mini == dp[-1][i]:\n            print(i, mini)\n            break\n"
    },
    {
        "number": 189,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    import sys\n    sys.stdin = open(__file__.replace('.py', '-test_cases.txt'), 'r')\n    sys.stdout = open(__file__.replace('.py', '-test_cases-out.txt'), 'w')\n    input = sys.stdin.readline\n    for _ in range(int(input())):\n        n = int(input())\n        arr = [int(i) for i in input().split(' ')]\n        good = [i for i in range(n) if abs(arr[i] - i) <= 1]\n        ans = [abs(arr[i] - i) for i in range(n) if arr[i] - i < 0]\n        ans = sum(ans)\n        if not good:\n            print('impossible')\n        else:\n            print(min(ans, max(good) - min(good)))\n"
    },
    {
        "number": 189,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 189,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"O(n) time and space\n    \"\"\"\n    n = int(stdin.split(\"\\n\")[0])\n    # stick lengths in the input\n    a = list(map(int, stdin.split(\"\\n\")[1].split()))\n    # all integer t such that 1 <= t <= max(a)\n    t = 0\n    for i, j in enumerate(sorted(a, reverse=True)):\n        # t is the next largest integer such that all a_i >= t\n        t = max(t, j + 1)\n        # cost of changing a_i to t\n        cost = sum(abs(i - t) for i in a)\n        # the best choice of t\n        if cost < i + 1:\n            break\n    return str(t) + \" \" + str(cost)\n"
    },
    {
        "number": 189,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, *A = list(map(int, stdin.split()))\n    cost = 0\n    t = 0\n    for a in A:\n        t = max(a, t)\n        cost += abs(a - t)\n    return str(t) +'' + str(cost)\n"
    },
    {
        "number": 191,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split()\n    a = [int(i) for i in stdin.split()]\n\n    p = 1\n    q = 1\n\n    for i in a:\n        if i == 0:\n            p *= 2\n            q *= 2\n        else:\n            p *= 2\n            q *= 2\n\n    q = q % (10 ** 9 + 7)\n\n    print(p, q)\n\n    return ''\n"
    },
    {
        "number": 191,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    p, q = 1, 1\n\n    for i in range(k):\n        r = 1\n        for j in range(len(arr)):\n            if j - 1 < 0 or j + 1 >= len(arr):\n                break\n            if arr[j] == 0:\n                if arr[j + 1] == 1 and arr[j - 1] == 1:\n                    arr[j] = 1\n                    arr[j + 1] = 0\n                    arr[j - 1] = 1\n                    r = 0\n                    break\n            else:\n                if arr[j - 1] == 1 and arr[j + 1] == 1:\n                    arr[j] = 1\n                    arr[j + 1] = 0\n                    arr[j - 1] = 1\n                    r = 0\n                    break\n        if r == 1:\n            p = p * r\n            q = q * r\n    if p == 0:\n        return \"0\"\n    return str(p * q % (10 ** 9 + 7))\n"
    },
    {
        "number": 191,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 191,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    a = [int(x) for x in stdin.split(' ')[1].split(' ')]\n    count = 0\n    count_2 = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] > a[j]:\n                count += 1\n                count_2 += 1\n            elif a[i] < a[j]:\n                count_2 += 1\n    if count_2 % k == 0:\n        print(count_2)\n    else:\n        print((count * k) % (10 ** 9 + 7))\n        return"
    },
    {
        "number": 191,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 2\n   ... 0 1 0\n   ... ''')\n    '333333336'\n    >>> solution('''5 1\n   ... 1 1 1 0 0\n   ... ''')\n    '0'\n    >>> solution('''6 4\n   ... 1 0 0 1 1 0\n   ... ''')\n    '968493834'\n    \"\"\"\n    n, k = map(int, stdin.split('\\n')[0].split(' '))\n    a = list(map(int, stdin.split('\\n')[1].split(' ')))\n    q = k * 10 ** 9 + 7\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[j] < a[i]:\n                count += 1\n    return str(count * pow(q, -1, q * 10 ** 9 + 7) % (10 ** 9 + 7))\n"
    },
    {
        "number": 191,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Main function for solution\n    \"\"\"\n    n, k = [int(x) for x in stdin.split(' ')]\n    a = [int(x) for x in stdin.split(' ')]\n    prob = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[j] < a[i]:\n                prob += 1\n    return f'{prob % (10 ** 9 + 7)}'\n"
    },
    {
        "number": 191,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()[1:]))\n    s = 0\n    for _ in range(k):\n        s += sum(a)\n        m = max(a)\n        for i in range(len(a)):\n            if m == a[i]:\n                a[i] = 0\n                break\n            a[i] = 1\n    if s == 0:\n        return str(0)\n    else:\n        return str(s * (10 ** 9 + 7) % (10 ** 9 + 7))\n\n\nprint(solution('3 2\\n0 1 0'))\n"
    },
    {
        "number": 191,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split(\" \")))\n    k = int(stdin.split(\" \")[1])\n    i = 1\n    if k == 1:\n        return \"1\"\n    while i < k:\n        a = sorted(a)\n        x = sorted(a, reverse=True)\n        a = x[::]\n        i += 1\n    return str(i + 1)\n"
    },
    {
        "number": 191,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(n) for n in stdin.split()]\n    numbers = [int(n) for n in stdin.split()]\n\n    def div(a, b):\n        return (a * b) % (10 ** 9 + 7)\n\n    def inv(a, m):\n        for i in range(1, m):\n            if div(i, m) == 1:\n                return i\n\n    def solve(numbers, k):\n        p = 1\n        q = 9\n        for number in numbers:\n            p = div(p, number)\n            q = div(q, 1 - number)\n\n        if p == 0:\n            return 0\n\n        return div(p, q) % (10 ** 9 + 7)\n\n    return str(solve(numbers, k))\n"
    },
    {
        "number": 191,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split()]\n    arr = [int(i) for i in stdin.split()]\n    for i in range(k):\n        a, b = random.randint(0, n-1), random.randint(0, n-1)\n        arr[a], arr[b] = arr[b], arr[a]\n    if arr == sorted(arr):\n        print(int(1 / math.factorial(n)))\n    else:\n        print(0)"
    },
    {
        "number": 192,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    print(int((y * 2 - x) / 2))\n    return ''"
    },
    {
        "number": 192,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    return str(int(abs((a * (a - b)) // (b - a))))\n\n\nprint(solution('8 5'))"
    },
    {
        "number": 192,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    return len(str(y - x))"
    },
    {
        "number": 192,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split(' '))\n    return str(int(y**2/x))\n"
    },
    {
        "number": 192,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    for i in range(1, x - y + 1):\n        if i * i * i + i * i == x * x:\n            return str(i)\n    return str(x - i)\n"
    },
    {
        "number": 192,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('6 3\\n')\n    '4\\n'\n    >>> solution('8 5\\n')\n    '3\\n'\n    >>> solution('22 4\\n')\n    '6\\n'\n    \"\"\"\n    x, y = map(int, stdin.split())\n    if (y * 3) % x == 0:\n        return (y * 3) // x - 1\n    return (y * 3) // x\n"
    },
    {
        "number": 192,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(max(int(a / 2) - 1, 0))\n    \n"
    },
    {
        "number": 192,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    count = 0\n    while x < y:\n        x = x + x * 3\n        count += 1\n    return count"
    },
    {
        "number": 192,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    print(int((x * y - ((x - 1) * y)) / (x - 1)) + 1)\n    return \"\"\n"
    },
    {
        "number": 192,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    if (y - 1) % 3 == 0:\n        return str((y - 1) // 3)\n    return str((y - 2) // 3 + 1)\n"
    },
    {
        "number": 193,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    c, d = map(int, stdin.split())\n    return str(float(abs(a * d - b * c)))\n"
    },
    {
        "number": 193,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    return str(min([abs(a * d - b * c), abs((a + b) * (c + d) - (a * c + b * d)), abs(a * d + b * c)]) / 2)\n    \n    \n"
    },
    {
        "number": 193,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    # Convert the string to a list of integers\n    matrix_A = [list(map(int, line.split(\" \"))) for line in stdin.split(\"\\n\")][:2]\n\n    # Calculate the determinant of matrix A\n    det_A = matrix_A[0][0] * matrix_A[1][1] - matrix_A[0][1] * matrix_A[1][0]\n\n    # Calculate the norm of matrix A\n    norm_A = max(abs(i) for i in matrix_A[0] + matrix_A[1])\n\n    # Find the solution\n    det_A, norm_A = map(int, det_A), int(norm_A)\n    return str(det_A * norm_A)\n"
    },
    {
        "number": 193,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(s) for s in stdin.split(\"\\n\")[0].split(\" \")]\n    return str(abs(a * d - b * c))\n"
    },
    {
        "number": 193,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    time complexity: O(1)\n    space complexity: O(1)\n    \"\"\"\n    a, b = map(int, stdin.split())\n    c, d = map(int, stdin.split())\n    print(a * d - b * c)\n"
    },
    {
        "number": 193,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    return str(abs(a*d - b*c) / (a*c+b*d))\n\n\ndef"
    },
    {
        "number": 193,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = (int(c) for c in stdin.split())\n    return str(round(abs(a*d - b*c)/((a**2 + b**2)**0.5), 9))\n"
    },
    {
        "number": 193,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    c, d = map(int, stdin.split())\n    return str(abs(a*d - b*c))[:10]\n"
    },
    {
        "number": 193,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    a, b = map(int, stdin.split(\" \"))\n    c, d = map(int, stdin.split(\" \"))\n\n    det = a * d - b * c\n    if det!= 0:\n        print(det)\n    else:\n        print(10 ** (-9))\n    return \"\"\n"
    },
    {
        "number": 193,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 194,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, one, two = [int(x) for x in stdin.split()]\n    x = [int(x) for x in stdin.split()]\n    one_cnt = two_cnt = 0\n    for i in range(n):\n        if x[i] == one:\n            one_cnt += 1\n        elif x[i] == two:\n            two_cnt += 1\n        else:\n            if one_cnt > 0:\n                one_cnt -= 1\n            elif two_cnt > 0:\n                two_cnt -= 1\n            else:\n                return str(n - i)\n    return str(n - max(one_cnt, two_cnt))\n"
    },
    {
        "number": 194,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    # x = 0\n    # y = 0\n    # for i in stdin.split():\n    #     if i == \"2\":\n    #         x += 1\n    #     else:\n    #         y += 1\n    # if x > y:\n    #     if x == 1:\n    #         return str(0)\n    #     return str(x//2)\n    # if x < y:\n    #     if y == 1:\n    #         return str(0)\n    #     return str(y//2)\n    # if x == y:\n    #     return str(0)\n    if n < 2:\n        return str(0)\n    if n % 2 == 1:\n        return str(n//2)\n    if n % 2 == 0:\n        return str((n//2)-1)\n"
    },
    {
        "number": 194,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    nums = [0] * n\n    for i in range(n):\n        if n - i == 1:\n            nums[i] = a\n        else:\n            nums[i] = b\n    return str(sum(nums))\n\n---- Tests ----\n\nTest 1\nprint(solution('''4 1 2\n1 2 1 1'''))\n\nTest 2\nprint(solution('''4 1 1\n1 1 2 1'''))\n\nTest 3\nprint(solution('''4 1 1\n1 1 2 1'''))\n\nTest 4\nprint(solution('''4 1 1\n1 1 2 1'''))\n\nTest 5\nprint(solution('''4 1 1\n2 2 2 2'''))\n"
    },
    {
        "number": 194,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    t = list(map(int, stdin.split()))\n    print(n - a + b)\nsolution(input())\n\"\"\"\n\n\nimport numpy as np\n\ndef"
    },
    {
        "number": 194,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    inp = stdin.split('\\n')\n    n, a, b = inp[0].split()\n    n, a, b = int(n), int(a), int(b)\n    client = inp[1].split()\n    client = [int(c) for c in client]\n    i = 0\n    r = 0\n    while i < n:\n        if client[i] == 1:\n            if a > 0:\n                a -= 1\n                i += 1\n            else:\n                r += 1\n                i += 1\n        else:\n            if b > 0:\n                b -= 1\n                i += 1\n            else:\n                i += 1\n    return r\n    pass\n\nprint(solution(stdin))"
    },
    {
        "number": 194,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    table = [[0]*b] + [[0,0] for _ in range(n)]\n    for t in stdin.split('\\n')[1].split(' '):\n        table[int(t) - 1][0] += 1\n    total = 0\n    for row in table:\n        if row[0] == 0 and row[1] == 0:\n            total += 1\n        elif row[0] == 0:\n            if row[1] == 1:\n                total += 2\n            elif row[1] == 2:\n                total += 1\n    return total"
    },
    {
        "number": 194,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    a, b, n = map(int, stdin.split())\n    t = [int(i) for i in stdin.split()]\n    table = 2 * b\n    for i in t:\n        if i == 1:\n            table -= 1\n            if table < 0:\n                return str(n - 1)\n        elif i == 2:\n            if table < 2 * b:\n                table -= 2\n                if table < 0:\n                    return str(n - 1)\n    return '0'\n"
    },
    {
        "number": 194,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 194,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    t = list(map(int, stdin.split()))\n    count = 0\n    one = a\n    two = b\n    for i in t:\n        if i == 1:\n            one -= 1\n            if one == 0:\n                count += b\n                one = a\n        elif i == 2:\n            two -= 1\n            if two == 0:\n                count += b\n                two = a\n    return count\n"
    },
    {
        "number": 194,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    count_people = int(lines[0].split(' ')[0])\n    count_tables = int(lines[0].split(' ')[1])\n    count_seats = [0] * count_tables\n    for i in range(count_people):\n        count_seats[int(lines[i + 1].split(' ')[1]) - 1] += 1\n        if count_seats[int(lines[i + 1].split(' ')[1]) - 1] == 2:\n            count_seats[int(lines[i + 1].split(' ')[1]) - 1] = 0\n            count_seats[int(lines[i + 1].split(' ')[2]) - 1] += 1\n            if count_seats[int(lines[i + 1].split(' ')[2]) - 1] == 2:\n                count_seats[int(lines[i + 1].split(' ')[2]) - 1] = 0\n                count_seats[int(lines[i + 1].split(' ')[3]) - 1] += 1\n                if count_seats[int(lines[i + 1].split(' ')[3]) - 1] == 2:\n                    count_seats[int(lines[i + 1].split(' ')[3]) - 1] = 0\n                    count_seats[int(lines[i + 1].split(' ')[4]) - 1] += 1\n                    if count_seats[int(lines[i + 1].split(' ')[4]) - 1] == 2:\n                        count_seats[int(lines[i + 1].split(' ')[4]) - 1] = 0\n                        count_seats[int(lines[i + 1].split(' ')[5]) - 1] += 1\n                        if count_seats[int(lines[i + 1].split(' ')[5]) - 1] == 2:\n                            count_seats[int(lines[i + 1].split(' ')[5]) - 1] = 0\n                            count_seats[int(lines[i + 1].split(' ')[6]) - 1] += 1\n                            if count_seats[int(lines[i + 1].split(' ')[6]) - 1] == 2:\n                                count_seats[int(lines[i + 1].split(' ')[6]) - 1] = 0\n                                count_seats[int(lines[i + 1].split(' ')[7]) - 1] += 1\n                                if count_seats[int(lines[i + 1].split(' ')[7]) - 1] == 2:\n                                    count_seats[int(lines[i + 1].split(' ')[7]) - 1] = 0\n                                    count_seats[int(lines[i + 1].split(' ')[8]) - 1] += 1\n                                    if count_seats[int(lines[i + 1].split(' ')[8]) - 1] == 2:\n                                        count_seats[int(lines[i + 1].split(' ')[8]) - 1] = 0\n                                        count_seats[int(lines[i + 1].split(' ')[9]) - 1] += 1\n                                        if count_seats[int(lines[i + 1].split(' ')[9]) - 1] == 2:\n                                            count_seats[int(lines[i + 1].split(' ')[9]) - 1] = 0\n                                            count_seats[int(lines[i + 1].split(' ')[10]) - 1] += 1\n                                            if count_seats[int(lines[i + 1].split(' ')[10]) - 1] == 2:\n                                                count_seats[int(lines[i + 1].split(' ')[10]) - 1] = 0\n                                                count_seats[int(lines[i + 1].split(' ')[11]) - 1] += 1\n                                                if count_seats[int(lines[i + 1].split(' ')[11]) - 1] == 2:\n                                                    count_seats[int(lines[i + 1].split(' ')[11]) - 1] = 0\n                                                    count_seats[int(lines[i + 1].split(' ')[12]) - 1] += 1\n                                                    if count_seats[int(lines[i + 1].split(' ')[12]) - 1] == 2:\n                                                        count_seats[int(lines[i + 1].split(' ')[12]) - 1] = 0\n                                                        count_seats[int(lines[i + 1].split(' ')[13]) - 1] += 1\n                                                        if count_seats[int(lines[i + 1].split(' ')[13]) - 1] == 2:\n                                                            count_seats[int(lines[i + 1].split(' ')[13]) - 1] = 0\n                                                            count_seats[int(lines[i + 1].split(' ')[14]) - 1] += 1\n                                                            if count_seats[int(lines[i + 1].split(' ')[14]) - 1] == 2:\n                                                                count_seats[int(lines[i + 1].split(' ')[14]) - 1] = 0\n                                                                count_seats[int(lines[i + 1].split(' ')[15]) - 1] += 1\n                                                                if count_seats[int(lines[i + 1].split(' ')[15]) - 1] == 2:\n                                                                    count_seats[int(lines[i + 1].split(' ')[15]) - 1] = 0\n                                                                    count_seats[int(lines[i + 1].split(' ')[16]) - 1] += 1\n                                                                    if count_seats[int(lines[i + 1].split(' ')[16]) - 1] == 2:\n                                                                        count_seats[int(lines[i + 1].split(' '"
    },
    {
        "number": 195,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    total = stdin.split('\\n')\n    a, b, c, n = map(int, total[0].split())\n    if n < a + b + c:\n        return '-1'\n    elif n == a + b + c and a == 0 and b == 0 and c == 0:\n        return '0'\n    else:\n        return str(n - (a + b + c))"
    },
    {
        "number": 195,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, n = map(int, stdin.split())\n    exam_passed = n - c - b - a\n    if exam_passed < 0:\n        return -1\n    if a + b + c == n:\n        return exam_passed\n    return -1\n\ndef"
    },
    {
        "number": 195,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B, C = [int(n) for n in stdin.split()]\n    print(N - A - B - C)\n"
    },
    {
        "number": 195,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, N = map(int, stdin.split())\n    return str(A + B + C - N - N - (A * 2) - (B * 2) - (C * 2))\n"
    },
    {
        "number": 195,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, n = [int(i) for i in stdin.split()]\n\n    if a * (n - c) < b * n:\n        return str(-1)\n\n    return str(n - c - a * (n - c) // (a + b))\n"
    },
    {
        "number": 195,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, N = [int(input()) for _ in range(4)]\n    return str(N - (A + B + C)) if N > A + B + C else '-1'\n"
    },
    {
        "number": 195,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    a, b, c, n = [int(x) for x in stdin.split()]\n    if n < a + b + c:\n        return str(n)\n    else:\n        return '-1'\n"
    },
    {
        "number": 195,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(' ')\n    A, B, C, N = [int(stdin[i]) for i in range(4)]\n    if A + B + C < N or A + B < C or A + C < B or B + C < A or A + B + C > N:\n        return '-1'\n    return str(N - A - B - C)\n"
    },
    {
        "number": 195,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, n = map(int, stdin.split())\n    if n * (a + b) == n * c or n == 0:\n        return -1\n    elif a == 0:\n        return n\n    elif b == 0:\n        return n * a\n    elif c == 0:\n        return n * b\n    else:\n        return n * (a + b + c)\n"
    },
    {
        "number": 195,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, N = [int(i) for i in stdin.split()]\n    if N > A + B + C:\n        print(-1)\n        return\n    elif A < N <= A + B or A < N <= A + B + C:\n        print(N - (A + B + C))\n        return\n    elif B < N <= A + B or B < N <= A + B + C:\n        print(N - (A + B))\n        return\n    elif C < N <= A + B or C < N <= A + B + C:\n        print(N - (A + C))\n        return\n    else:\n        print(N)\n        return\n"
    },
    {
        "number": 196,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, k = map(int, stdin.split())\n    return int((x * 2 ** (k + 1)) / 2)\n\ndef"
    },
    {
        "number": 196,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, k = map(int, stdin.split())\n    if k == 0:\n        return 1\n    elif k == 1:\n        return x * 2\n    else:\n        a, b = x * 2, x * 2\n        for i in range(2, k):\n            a, b = b, a + b\n        return b % 1000000007\n"
    },
    {
        "number": 196,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 196,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 196,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x, k = list(map(int, stdin.split(' ')))\n    if k == 1:\n        return x\n    elif k == 2:\n        return (2*x + 1) % (10**9 + 7)\n    else:\n        return (4*x + 3) % (10**9 + 7)\n"
    },
    {
        "number": 196,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x, k = map(int, stdin.split(' '))\n    return x*pow(2, k, 1000000007) % 1000000007\n"
    },
    {
        "number": 196,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, k = map(int, stdin.split(' '))\n    return (x + k * (x * 2)) % (10**9 + 7)\n"
    },
    {
        "number": 196,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return ''\n"
    },
    {
        "number": 196,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # return str(result)\n\n    x, k = map(int, stdin.split())\n    print(1 if k == 0 else int(2 ** (k / 2)))\n"
    },
    {
        "number": 196,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, k = map(int, stdin.split())\n    d = [0] * (k + 1)\n    d[0] = x\n    for i in range(1, k + 1):\n        d[i] = (d[i - 1] * 2) % (10 ** 9 + 7)\n    return d[k]\n"
    },
    {
        "number": 197,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 197,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the number of good contests and the probability that there will be no inversions in the contest.\n\n    Args:\n        stdin (str): Input on stdin.\n\n    Returns:\n        str: The probability that there will be no inversions in the contest.\n    \"\"\"\n\n    \"\"\"\n    num_problems = int(stdin.readline())\n    min_num_sol = list(map(int, stdin.readline().split()))\n    max_num_sol = list(map(int, stdin.readline().split()))\n    \"\"\"\n\n    num_problems = 2\n    min_num_sol = [1, 1]\n    max_num_sol = [1, 1]\n\n    probs = [[1, 1, 0]]\n    for i in range(num_problems - 1):\n        l, r, p = list(map(int, stdin.readline().split()))\n        probs.append([l, r, p])\n\n    probs.sort()\n    prob_total = 1\n    last_prob = probs[0][2]\n    for i in range(1, len(probs)):\n        if last_prob > probs[i][2]:\n            last_prob = probs[i][2]\n        else:\n            prob_total += probs[i][2]\n            last_prob = probs[i][2]\n\n    return prob_total\n"
    },
    {
        "number": 197,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    line1 = stdin.split('\\n')[0].split(' ')\n    n = int(line1[0])\n    line2 = stdin.split('\\n')[1].split(' ')\n    count = 0\n    for i in range(n):\n        a, b = int(line2[i * 2]), int(line2[i * 2 + 1])\n        count += (b - a + 1) * (b - a) / 2\n\n    return str(int(count))\n"
    },
    {
        "number": 197,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l = []\n    for i in range(n):\n        [l.append(int(stdin)) for i in range(2)]\n    l.sort()\n    r = []\n    r.append(l[0])\n    for i in range(1, len(l)):\n        r.append(l[i] - l[i - 1])\n    r.sort()\n    b = 1\n    for i in range(n - 1):\n        b *= r[i]\n    b *= r[-1]\n    a = [i for i in range(1, 998244353)]\n    a = [i for i in a if i % l[0] == 0]\n    a = [i for i in a if i % l[1] == 0]\n    for i in range(len(a)):\n        for j in range(len(a)):\n            if a[i] % a[j] == 0:\n                a[j] = 0\n                break\n    b = b % 998244353\n    a = [i for i in a if i!= 0]\n    r = 1\n    for i in a:\n        r *= i\n    r = r % 998244353\n    print(b // r)\n    return b // r\n\ndef"
    },
    {
        "number": 197,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    if not stdin.isdigit():\n        raise ValueError('string is not digit')\n    n = int(stdin)\n    if 2 > n or n > 50:\n        raise ValueError('invalid n')\n    a = [int(x) for x in stdin.split()]\n    if len(a)!= n:\n        raise ValueError('invalid n')\n    for i in a:\n        if i < 0 or i > 998244351:\n            raise ValueError('invalid lr')\n    d = {}\n    for i in range(n):\n        if not (l <= a[i] <= r):\n            raise ValueError('invalid lr')\n        if a[i] in d:\n            d[a[i]] += 1\n        else:\n            d[a[i]] = 1\n    # print(d)\n    x = y = 0\n    for i in d.values():\n        x += i * (i - 1) // 2\n        y = (y + i * (i + 1) // 2) % 998244353\n    # print(x, y)\n    return x // y\n"
    },
    {
        "number": 197,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    number_of_problems = int(stdin.readline())\n    print(pow(2, number_of_problems, 998244353) - 1)\n"
    },
    {
        "number": 197,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\n\"\"\"\n\nfrom functools import reduce\nfrom math import gcd\n\n\ndef"
    },
    {
        "number": 197,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # +++your code here+++\n    return None\n"
    },
    {
        "number": 197,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 197,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n'''\nimport math\n\ndef"
    },
    {
        "number": 198,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    n = int(stdin)\n    res = 0\n    if n % 2 == 0:\n        res = (n // 2) ** 2\n    elif n % 4 == 0:\n        res = ((n // 2) - 1) ** 2\n    return res\n"
    },
    {
        "number": 198,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    length = int(stdin)\n    if length % 4 == 0:\n        return (length // 4) - 1\n    if length % 4 == 1:\n        return (length // 4)\n    if length % 4 == 2:\n        return (length // 4) + 1\n    if length % 4 == 3:\n        return (length // 4) + 2\n    return \"impossible\""
    },
    {
        "number": 198,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    l = int(stdin)\n    return int(l*(l+1)/2)\nprint(solution('6'))\nprint(solution('20'))\n\ndef"
    },
    {
        "number": 198,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''"
    },
    {
        "number": 198,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    pass\n"
    },
    {
        "number": 198,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return None\n"
    },
    {
        "number": 198,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    \"\"\"\n    We can easily see that:\n    The number of ways to cut the stick into 4 parts is the same as the number of ways to cut the stick into 2 parts. \n    The number of ways to cut the stick into 3 parts is the same as the number of ways to cut the stick into 2 parts. \n    The number of ways to cut the stick into 2 parts is the same as the number of ways to cut the stick into 1 part.\n    Therefore, the number of ways to cut the stick into 4 parts is the same as the number of ways to cut the stick into 1 part.\n    \n    For example, if the length of the stick is 4, then the number of ways to cut the stick into 4 parts is the same as the number of ways to cut the stick into 1 part,\n    which is the same as the number of ways to cut the stick into 4 parts.\n    \"\"\"\n    \n    return 1"
    },
    {
        "number": 198,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return\n"
    },
    {
        "number": 198,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return 1\n    dp = [0] * (n + 1)\n    dp[0] = dp[1] = 0\n    dp[2] = 1\n    for i in range(3, n + 1):\n        dp[i] = dp[i - 1] + dp[i - 2]\n    return dp[n] % (10 ** 9 + 7)"
    },
    {
        "number": 198,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return \"Yes\" if (n // 2) % 2 == 0 else \"No\"\n    \n\"\"\"\n\nimport sys\nimport os\n\ndef"
    },
    {
        "number": 199,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = [int(x) for x in stdin.split()]\n    v = [int(x) for x in stdin.split()]\n    left, right = 0, s\n    while left < n:\n        if v[left] <= right:\n            right -= v[left]\n            left += 1\n        else:\n            break\n    if right > 0:\n        return -1\n    return left\n"
    },
    {
        "number": 199,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    n, s = stdin.split()\n    kegs = stdin.split()\n    kegs = list(map(int, kegs))\n    min_keg = n\n    for i in range(n):\n        if kegs[i] < s:\n            min_keg = i\n            break\n    if min_keg == n:\n        return \"-1\"\n    else:\n        return str(s // kegs[min_keg])\n"
    },
    {
        "number": 199,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, s = [int(x) for x in stdin.split()]\n    v = [int(x) for x in stdin.split()]\n    k = 0\n    s = min(v)\n    while sum(v) > 0:\n        if s > sum(v):\n            s = sum(v)\n        else:\n            v[k] -= s\n            s = min(v)\n            k += 1\n    if k == n:\n        return -1\n    else:\n        return s\n"
    },
    {
        "number": 199,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    kegs = [int(x) for x in stdin.split()]\n    kegs.sort()\n    sum_all = sum(kegs)\n    sum_now = 0\n    for i in range(len(kegs)):\n        sum_now += kegs[i]\n        if sum_now < sum_all/2:\n            continue\n        else:\n            if i == len(kegs)-1:\n                return -1\n            else:\n                return kegs[i]\nprint(solution(stdin()))\n"
    },
    {
        "number": 199,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, s = [int(x) for x in stdin.split(' ')]\n    kvass = [int(x) for x in stdin.split(' ')]\n    kvass.sort()\n    if s < kvass[0]:\n        return -1\n    left = 0\n    right = len(kvass) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if kvass[mid] > s:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return kvass[left]\n\n---\n\ndef"
    },
    {
        "number": 199,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return \" \".join(map(str, list))\n"
    },
    {
        "number": 199,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 199,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    keg_volume = list(map(int, stdin.split()))\n    glass_volume = keg_volume.pop(0)\n    keg_volume = keg_volume[0]\n    # glass_volume = int(stdin.split()[0])\n    # keg_volume = int(stdin.split()[1])\n    kvass_sum = 0\n    keg_level = 0\n    keg_num = 0\n    for i in range(keg_volume):\n        kvass_sum += keg_volume - i\n    while kvass_sum >= glass_volume:\n        kvass_sum -= keg_volume - keg_level\n        keg_level += 1\n    if kvass_sum < 0:\n        return -1\n    else:\n        return keg_level\n"
    },
    {
        "number": 199,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    kegs_count, glass_volume = map(int, stdin.split())\n    kegs = list(map(int, stdin.split()))\n\n    left_sum = 0\n    right_sum = sum(kegs)\n\n    s = glass_volume\n    while s < right_sum:\n        left_sum += 1\n        s += kegs[left_sum]\n    if s == right_sum:\n        return str(left_sum)\n    else:\n        return \"-\"\n"
    },
    {
        "number": 199,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    nums = list(map(int, stdin.split()))\n    left = 0\n    right = nums[-1]\n    res = 1\n    while right >= left:\n        mid = (left + right) // 2\n        need = 0\n        for i in range(len(nums)):\n            need += nums[i] // mid\n        if need >= s:\n            left = mid + 1\n            res = mid\n        else:\n            right = mid - 1\n    return str(res)"
    },
    {
        "number": 200,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    returns the number of days for the caterpillar to get the apple.\n    '''\n    # read in\n    stdin = stdin.split('\\n')\n    h1, h2 = [int(x) for x in stdin[0].split()]\n    a, b = [int(x) for x in stdin[1].split()]\n    c1, c2 = h1 + a, h2 - b\n\n    # this is the last day where the caterpillar sees the apple\n    if c1 > c2:\n        return str(c1 - c2)\n\n    # this is when the caterpillar can't see the apple\n    return '-1'\n"
    },
    {
        "number": 200,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if m > n:\n        return -1\n    else:\n        return (n - m) / (m - 1)"
    },
    {
        "number": 200,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    h1, h2 = map(int, stdin.split())\n    a, b = map(int, stdin.split())\n    \n    return -1 if h2 > a or h2 < b else (h2 - h1) // a\n\nsolution(input())"
    },
    {
        "number": 200,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a > b:\n        print('-1')\n        return\n    print(math.ceil((b-a)/(a-b)) + 1)\n"
    },
    {
        "number": 200,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    time complexity: O(log n)\n    space complexity: O(1)\n    '''\n    # numbers in string\n    stdin = stdin.split()\n    height_caterpillar = int(stdin[0])\n    distance_caterpillar = int(stdin[1])\n\n    # the caterpillar can get the apple on the next day at 10am\n    time_to_wait = (height_caterpillar - distance_caterpillar) / distance_caterpillar\n\n    if time_to_wait.is_integer():\n        return str(int(time_to_wait))\n\n    return str(-1)\n"
    },
    {
        "number": 200,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\ndef"
    },
    {
        "number": 200,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    h_1, h_2 = [int(x) for x in stdin.split(' ')]\n    a, b = [int(x) for x in stdin.split(' ')]\n    for i in range(h_1, h_2 + 1):\n        day = i // 100\n        if i % 100 == 0:\n            day += 1\n        if a * day <= i <= h_2 - b * day:\n            return str(day)\n    return '-1'\n"
    },
    {
        "number": 200,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    h1, h2 = [int(num) for num in stdin.split(' ')]\n    a, b = [int(num) for num in stdin.split(' ')]\n\n    n = (h2 - h1) / (a - b)\n\n    if n < 0:\n        return '-1'\n    else:\n        return n\n"
    },
    {
        "number": 200,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 200,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    h1, h2, a, b = [int(s) for s in stdin.split()]\n    if h1 < h2 and a < b:\n        return str(h1 - h2 + 1)\n    return '-1'\n"
    },
    {
        "number": 201,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\"\"\"\n\nC, H_r, H_b, W_r, W_b = [int(x) for x in input().split(' ')]\n\nprint(C * (H_r + H_b) - min(H_r * W_r, H_b * W_b))\n"
    },
    {
        "number": 201,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    C, H_r, H_b, W_r, W_b = [int(num) for num in stdin.split(\" \")]\n    return str(C * H_r + C * H_b + H_r * W_r + H_b * W_b)\n\n'''"
    },
    {
        "number": 201,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\""
    },
    {
        "number": 201,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n  data = list(map(int, stdin.split()))\n  b = data[0]\n  r = data[1]\n  br = data[2]\n  rb = data[3]\n  c = data[4]\n\n  br += c\n  rb += c\n\n  print(br * r + rb * b)\n"
    },
    {
        "number": 201,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 201,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    numbers = stdin.split(\" \")\n    c, h_r, h_b, w_r, w_b = [int(num) for num in numbers]\n    total_r = (h_r * w_r) * c\n    total_b = (h_b * w_b) * c\n    return total_r + total_b\n\"\"\"\n\n\nimport unittest\n\n\ndef"
    },
    {
        "number": 201,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 201,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    C, H_r, H_b, W_r, W_b = map(int, stdin.split(' '))\n\n    N_r, N_b = 0, 0\n    for _ in range(C):\n        if N_r == C:\n            N_r = 0\n        if N_b == C:\n            N_b = 0\n\n        if H_r < W_b:\n            N_r += 1\n            H_r += H_b\n        else:\n            N_b += 1\n            W_b += H_r\n\n    return N_r * W_r + N_b * W_b\n"
    },
    {
        "number": 201,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    C, H_r, H_b, W_r, W_b = list(map(int, stdin.split()))\n    return str(C * H_r + C * H_b + (C - 1) * min(H_r, H_b) + (H_r + H_b - 1) * min(W_r, W_b))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 201,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 202,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split('\\n')[0].split())\n    return abs(x2 - x1) + abs(y2 - y1)\n"
    },
    {
        "number": 202,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 202,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = [int(num) for num in stdin.split()]\n    return abs(x1 - x2) + abs(y1 - y2)\n\n\ndef"
    },
    {
        "number": 202,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 202,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 202,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\nreturn str(stdin)\n"
    },
    {
        "number": 202,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1 = map(int, stdin.split())\n    x2, y2 = map(int, stdin.split())\n    return str(abs(x2-x1) + abs(y2-y1))\n\ndef"
    },
    {
        "number": 202,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1 = map(int, stdin.split())\n    x2, y2 = map(int, stdin.split())\n    \n    return int(((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5)\n"
    },
    {
        "number": 202,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    x1, y1 = map(int, stdin.split())\n    x2, y2 = map(int, stdin.split())\n    \n    if x1 == x2:\n        return abs(y1 - y2)\n    elif y1 == y2:\n        return abs(x1 - x2)\n    elif x1 < x2:\n        return abs(x2 - x1) + abs(y1 - y2)\n    else:\n        return abs(x1 - x2) + abs(y2 - y1)\n"
    },
    {
        "number": 202,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def distance_from_finish(x, y):\n        return abs(x[0] - y[0]) + abs(x[1] - y[1])\n\n    from sys import stdin\n    x_1, y_1 = [int(i) for i in stdin.readline().strip().split(' ')]\n    x_2, y_2 = [int(i) for i in stdin.readline().strip().split(' ')]\n\n    min_steps = distance_from_finish(x_1, y_1)\n\n    # x, y, x1, y1\n    directions = [(1, 0), (-1, 0), (0, 1), (0, -1), (1, 1), (-1, 1), (1, -1), (-1, -1)]\n    for x, y in directions:\n        while True:\n            x1, y1 = x_1 + x, y_1 + y\n            d = distance_from_finish(x1, y1)\n            if d < min_steps:\n                min_steps = d\n            else:\n                break\n    print(min_steps)\n"
    },
    {
        "number": 203,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, votes = map(int, stdin.split(\"\\n\")[:2])\n    deniers, winners = [0] * n, [0] * n\n    for i in stdin.split(\"\\n\")[2:]:\n        denier, winner = i[0], int(i[-1])\n        if denier == \"R\":\n            deniers[winner - 1] = 1\n        else:\n            winners[winner - 1] = 1\n    while not (sum(deniers) == 1 and sum(winners) == 1):\n        deniers, winners = deniers[:], winners[:]\n        for i in range(n):\n            if deniers[i] and not winners[i]:\n                deniers[i] = 0\n                winners[i] = 1\n                break\n            if winners[i] and not deniers[i]:\n                deniers[i] = 1\n                winners[i] = 0\n                break\n    if deniers.count(1) == 1:\n        return \"R\"\n    else:\n        return \"D\"\n"
    },
    {
        "number": 203,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = stdin.split(\" \")\n    if n == 1:\n        return a[0]\n    else:\n        for i in range(n):\n            if a[i] == \"D\":\n                if a[(i + 1) % n] == \"D\":\n                    if a[(i + 2) % n] == \"D\":\n                        return \"R\"\n                    else:\n                        a[(i + 2) % n] = \"D\"\n                else:\n                    a[(i + 1) % n] = \"D\"\n        if a[0] == \"R\":\n            return \"D\"\n        else:\n            return \"R\"\n"
    },
    {
        "number": 203,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 203,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    p_frac = []\n    d_frac = []\n    for c in stdin:\n        if c == 'D':\n            p_frac.append(1)\n            d_frac.append(0)\n        elif c == 'R':\n            p_frac.append(0)\n            d_frac.append(1)\n\n    for _ in range(n):\n        if p_frac[0] == 0:\n            p_frac.pop(0)\n            p_frac.append(0)\n        else:\n            p_frac.pop(0)\n            p_frac.append(1)\n        if d_frac[0] == 0:\n            d_frac.pop(0)\n            d_frac.append(1)\n        else:\n            d_frac.pop(0)\n            d_frac.append(0)\n\n    if sum(p_frac) == sum(d_frac):\n        return 'D'\n    else:\n        return 'R'\n"
    },
    {
        "number": 203,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 203,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Main function.\"\"\"\n    n = int(stdin)\n    stdin = stdin.split()\n    a = [0] * n\n    for i in range(n):\n        a[i] = stdin[i]\n    if len(set(a)) == 1:\n        return 'R'\n    b = [0] * n\n    for i in range(n):\n        b[i] = a.copy()\n        b[i].pop(i)\n        if len(set(b[i])) == 1:\n            return b[i][0]\n"
    },
    {
        "number": 203,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    frac = stdin\n    for i in range(n):\n        if frac[i] == 'R':\n            frac = frac[:i] + 'D' + frac[i+1:]\n    return frac\n"
    },
    {
        "number": 203,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    s = stdin[1]\n    votes = [False] * n\n\n    for i in range(n):\n        if s[i] == 'D':\n            votes[i] = True\n        elif s[i] == 'R':\n            votes[i] = False\n\n    for i in range(n - 2, -1, -1):\n        if not votes[i]:\n            for j in range(i + 1, n):\n                votes[j] = not votes[j]\n\n    print('D' if votes[-1] else 'R')\n    return ''\n"
    },
    {
        "number": 203,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    votes = stdin.readline().strip()\n    \n    # Set for tracking who has already voted\n    voted = set()\n    \n    # Number of remocrats\n    r = 0\n    \n    # Number of depublicans\n    d = 0\n    \n    for vote in votes:\n        if vote == 'D':\n            d += 1\n            if d == n:\n                return 'D'\n            elif vote not in voted:\n                voted.add(vote)\n        elif vote == 'R':\n            r += 1\n            if r == n:\n                return 'R'\n            elif vote not in voted:\n                voted.add(vote)\n    return 'Impossible'\n"
    },
    {
        "number": 203,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    d = ['R'] * n\n    for i in range(n):\n        stdin = stdin.split()\n        if len(stdin) == 1:\n            print('R' if d[i] == 'D' else 'D')\n        else:\n            if stdin[1] == 'R':\n                d[i] = 'R'\n            else:\n                d[i] = 'D'\n"
    },
    {
        "number": 204,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x, y = list(map(int, stdin.split()))\n    print(count_variants(a, b, x, y))\n    return ''\n\n\ndef"
    },
    {
        "number": 204,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x, y = (int(x) for x in stdin.split())\n    n = 0\n    for w in range(1, a + 1):\n        for h in range(1, b + 1):\n            if w / h == x / y:\n                n += 1\n    return str(n)\n"
    },
    {
        "number": 204,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x, y = map(int, stdin.split())\n\n    count = 0\n    for w in range(1, a + 1):\n        for h in range(1, b + 1):\n            if w / h == x / y:\n                count += 1\n    return str(count)\n"
    },
    {
        "number": 204,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x, y = [int(x) for x in stdin.split()]\n    \n    counter = 0\n    for w in range(1, a + 1):\n        for h in range(1, b + 1):\n            if w / h == x / y:\n                counter += 1\n    \n    return str(counter)\n"
    },
    {
        "number": 204,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x, y = (int(i) for i in stdin.split())\n    return str(len(list(filter(lambda x: x <= a and x <= b and x / y == x // y, (i * j for i in range(x + 1) for j in range(y + 1))))))\n"
    },
    {
        "number": 204,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x, y = [int(x) for x in stdin.split(' ')]\n    return str(int(min(x / y, b) * (a / x)))\n"
    },
    {
        "number": 204,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x, y = map(int, stdin.split())\n    count = 0\n    if a * b < x * y:\n        return 0\n    for w in range(1, a + 1):\n        for h in range(1, b + 1):\n            if x * y == w * h:\n                count += 1\n    return count\n"
    },
    {
        "number": 204,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x, y = [int(n) for n in stdin.split()]\n    def find(a, b, x, y):\n        n = 0\n        for w in range(a, a * b + 1, a):\n            for h in range(b, a * b + 1, b):\n                if w < x or h < y or w / h!= x / y:\n                    continue\n                n += 1\n        return n\n    return str(find(a, b, x, y))\n"
    },
    {
        "number": 204,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x, y = [int(x) for x in stdin.split('\\n')[0].split()]\n    if x * y <= a * b:\n        if x == y:\n            print(1)\n        elif x > y:\n            print(int(a / x))\n        else:\n            print(int(b / y))\n    else:\n        print(0)\n"
    },
    {
        "number": 204,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    a, b, x, y = [int(i) for i in stdin.split()]\n    counter = 0\n    for w in range(1, a + 1):\n        for h in range(1, b + 1):\n            if w / h == x / y:\n                counter += 1\n\n    return str(counter)\n"
    },
    {
        "number": 205,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 205,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, b = [int(x) for x in stdin.split(' ')]\n    k = n // b\n    r = n % b\n    result = (b ** k) * r + (b ** (k - 1)) * (n - b ** k * r)\n    return str(result)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 205,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    #your solution here\n\"\"\"\n"
    },
    {
        "number": 205,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''"
    },
    {
        "number": 205,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\n----\n\n\nThe number \"zero\" is called \"love\" (or \"l'oeuf\" to be precise, literally means \"egg\" in French), for example when denoting the zero score in a game of tennis. \n\nAki is fond of numbers, especially those with trailing zeros. For example, the number $9200$ has two trailing zeros. Aki thinks the more trailing zero digits a number has, the prettier it is.\n\nHowever, Aki believes, that the number of trailing zeros of a number is not static, but depends on the base (radix) it is represented in. Thus, he considers a few scenarios with some numbers and bases. And now, since the numbers he used become quite bizarre, he asks you to help him to calculate the beauty of these numbers.\n\nGiven two integers $n$ and $b$ (in decimal notation), your task is to calculate the number of trailing zero digits in the $b$-ary (in the base/radix of $b$) representation of $n\\,!$ (factorial of $n$). \n\n\n-----Input-----\n\nThe only line of the input contains two integers $n$ and $b$ (in decimal notation), $1 \\le n \\le 10^{18}$, $2 \\le b \\le 10^{12}$.\n\n\n-----Output-----\n\nPrint an only integer\u00a0\u2014 the number of trailing zero digits in the $b$-ary representation of $n!$\n\ndef"
    },
    {
        "number": 205,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 205,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 205,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    n, b = map(int, stdin.split())\n    f = 1\n    while n > 0:\n        f *= n\n        n -= 1\n    print(b * (len(str(f)) - 1) + len(str(f)) - len(str(f).rstrip('0')))\n    # import ipdb; ipdb.set_trace()\n    return ''\n"
    },
    {
        "number": 205,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 205,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 206,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution for codewars kata \"A Frogs Journey\"\n    \"\"\"\n    n, a, b = map(int, stdin.split())\n    # if n == 0 or a == 0 or b == 0:\n    #     return \"no\"\n    # k = 0\n    # while n - k * (a + b) >= 0:\n    #     k += 1\n    # return k\n    return a + b + n - a * (a + b)\n"
    },
    {
        "number": 206,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    m, a, b = [int(x) for x in stdin.split(' ')]\n    if b == 0 or a == 0:\n        return 0\n    if b < 0 and a < 0:\n        return sum(range(m))\n    elif b < 0:\n        return sum([(i + a) // b for i in range(m)])\n    elif a < 0:\n        return sum([(i + b) // a for i in range(m)])\n    else:\n        return sum([(i + a) // b for i in range(m)])\n"
    },
    {
        "number": 206,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    m, a, b = [int(x) for x in stdin.split(\" \")]\n    return str(m * (m + 1) // 2 - a * (a + 1) // 2 - b * (b + 1) // 2)\n"
    },
    {
        "number": 206,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    m, a, b = [int(i) for i in stdin.split()]\n    print(sum(i+1 for i in range(m) if i+1 < a or i+1 > b))\n    return ''\n"
    },
    {
        "number": 206,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    m, a, b = [int(x) for x in stdin.split(\" \")]\n    if a == b:\n        return \"0\"\n    return \"1\"\n"
    },
    {
        "number": 206,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return a str.\n\n    >>> solution('4 2 5')\n    '9'\n    >>> solution('7 1000000000 1')\n    '500000001500000001'\n    >>> solution('100 100000 1')\n    '101'\n    >>> solution('6 4 5')\n    '10'\n    \"\"\"\n    m, a, b = map(int, stdin.split())\n    return str(sum(x for x in range(0, m + 1) if x >= 0 and x % a == 0 or x % b == 0))\n"
    },
    {
        "number": 206,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    m, a, b = [int(x) for x in stdin.split()]\n    # your code here\n    return str(m + (a + b) * m // 2)\n"
    },
    {
        "number": 206,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"7 5 3\\n\")\n    19\n    >>> solution(\"1000000000 1 2019\\n\")\n    500000001500000001\n    >>> solution(\"100 100000 1\\n\")\n    101\n    >>> solution(\"6 4 5\\n\")\n    10\n    \"\"\"\n\n\ndef"
    },
    {
        "number": 206,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    m, a, b = [int(x) for x in stdin.split(' ')]\n\n    # your code here\n    return 0\n"
    },
    {
        "number": 206,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    m, a, b = [int(i) for i in stdin.split(' ')]\n    ans = 0\n    for i in range(m+1):\n        for j in range(max(0, i-b), min(m, i+a)+1):\n            ans += 1\n    return ans\n\"\"\"\n\ndef"
    },
    {
        "number": 207,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\n\n\n\n\ndef"
    },
    {
        "number": 207,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sequence = [int(x) for x in stdin.split(\" \")]\n    divisible = 0\n    for index, value in enumerate(sequence):\n        if value % 2 == 0:\n            divisible += 1\n            if divisible > 1:\n                return \"No\"\n        else:\n            divisible = 0\n    return \"Yes\"\n\"\"\"\n\ndef"
    },
    {
        "number": 207,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    sequence = [int(i) for i in stdin.split('\\n')[0].split()]\n    sequence.sort()\n    length = len(sequence)\n    if length % 2 == 0:\n        mid = length // 2\n        if sequence[:mid] == sequence[mid:]:\n            return 'Yes'\n        return 'No'\n    return 'Yes' if sequence[0] % 2!= 0 else 'No'\n"
    },
    {
        "number": 207,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return 'Yes' if the sequence is valid, and 'No' otherwise.\"\"\"\n    # Get sequence length\n    seq_length = int(stdin.readline())\n    # Split sequence into subsegments\n    seq_list = list(map(int, stdin.readline().split()))\n    # Partition subsegments into odd and even numbers\n    odd_list, even_list = [], []\n    for i in range(len(seq_list)):\n        if seq_list[i] % 2 == 0:\n            even_list.append(seq_list[i])\n        else:\n            odd_list.append(seq_list[i])\n    # If length of the subsegments is not even, the requirements cannot be met\n    if len(odd_list) % 2!= 0:\n        return 'No'\n    # If the sequence cannot be split into odd and even subsegments, the requirements cannot be met\n    if len(even_list) == 0 and len(odd_list) == 0:\n        return 'No'\n    # If the sequence cannot be split into odd and even subsegments, the requirements cannot be met\n    if len(even_list) == 0 and len(odd_list) == 1:\n        return 'No'\n    # If the sequence can be split into odd and even subsegments, return 'Yes'\n    else:\n        return 'Yes'"
    },
    {
        "number": 207,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    time complexity O(n)\n    space complexity O(n)\n    '''\n    n = int(stdin)\n    seq = list(map(int, stdin.split(' ')))\n    result = 'No'\n    seq = list(reversed(seq))\n    if n % 2 == 1:\n        result = 'No'\n        return result\n    if n == 1:\n        result = 'Yes'\n        return result\n    for i in range(n // 2):\n        if seq[i] % 2 == 0 and seq[i + 1] % 2 == 0:\n            result = 'No'\n            return result\n    result = 'Yes'\n    return result\n"
    },
    {
        "number": 207,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    num = list(map(int, stdin.readline().split()))\n\n    cnt = 0\n    for i in range(0, len(num)):\n        if num[i] % 2 == 0:\n            cnt += 1\n\n    if cnt == 1:\n        return \"Yes\"\n    elif cnt > 1:\n        return \"No\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 207,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\na = input()\na = [int(i) for i in stdin.split()]\n\na = [x for x in a if x%2!= 0]\nprint(a)"
    },
    {
        "number": 207,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    len_n = int(stdin)\n    sequence = list(map(int, stdin.split(' ')))\n    count = 0\n    for i in range(len_n):\n        if sequence[i] % 2 == 0:\n            count += 1\n    if count > len_n:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 207,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\n1 3 5\")\n    'Yes'\n    >>> solution(\"5\\n1 0 1 5 1\")\n    'Yes'\n    >>> solution(\"3\\n4 3 1\")\n    'No'\n    >>> solution(\"4\\n3 9 9 3\")\n    'No'\n    \"\"\"\n    n = int(stdin)\n    numbers = [int(x) for x in stdin.split()]\n\n    odd_count = 0\n    for n in numbers:\n        if n % 2 == 1:\n            odd_count += 1\n\n    if odd_count % 2 == 0:\n        return \"Yes\"\n    elif odd_count == 0:\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 207,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    raw_input = stdin.split(\"\\n\")\n    _, raw_input = raw_input[0], raw_input[1:]\n\n    n = int(raw_input[0])\n    raw_input = [int(n) for n in raw_input[1:]]\n\n    odd = []\n    even = []\n    subseq = []\n    for n in raw_input:\n        if n % 2 == 0:\n            even.append(n)\n        else:\n            odd.append(n)\n\n    if len(even) % 2 == 1:\n        return \"No\"\n    else:\n        if len(odd) % 2!= 0:\n            return \"No\"\n        else:\n            for n in range(1, len(odd)):\n                subseq.append(odd[n] - odd[n - 1])\n            subseq.append(odd[-1])\n            if all(n % 2!= 0 for n in subseq):\n                return \"Yes\"\n            else:\n                return \"No\"\n"
    },
    {
        "number": 208,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split())\n    if x1 == x2 and y1 == y2:\n        return '0 0 0 0'\n    if x1 == x2:\n        return '0 0 0 1'\n    if y1 == y2:\n        return '0 0 1 1'\n    if x1 + y1 == x2 + y2:\n        return '0 0 1 0'\n    if x1 - y1 == x2 - y2:\n        return '0 1 1 0'\n    if x1 * y1 == x2 * y2:\n        return '0 0 0 1'\n    if (x1 + y1) - (x2 + y2) == (x1 - y1) + (x2 - y2):\n        return '1 1 1 1'\n    if (x1 + y1) - (x2 + y2) == (x1 - y1) - (x2 - y2):\n        return '1 1 0 1'\n    if (x1 + y1) + (x2 + y2) == (x1 - y1) + (x2 - y2):\n        return '1 0 1 1'\n    if (x1 + y1) + (x2 + y2) == (x1 - y1) - (x2 - y2):\n        return '1 0 0 1'\n    if (x1 - y1) * (x2 - y2) == (x1 + y1) * (x2 + y2):\n        return '1 0 0 1'\n    if (x1 - y1) * (x2 - y2) == (x1 + y1) * (x2 + y2):\n        return '1 1 0 1'\n    if (x1 - y1) * (x2 - y2) == (x1 - y1) * (x2 - y2):\n        return '0 0 0 1'\n    return '-1'\n"
    },
    {
        "number": 208,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split(' '))\n    x3, y3, x4, y4 = -1, -1, -1, -1\n    if x1 == x2:\n        x3, y3 = x1, x1\n        if y1 == y2:\n            x4, y4 = x1, y1\n        else:\n            x4, y4 = x2, y2\n    elif y1 == y2:\n        x3, y3 = y1, y1\n        if x1 == x2:\n            x4, y4 = x1, y1\n        else:\n            x4, y4 = x2, y2\n    elif x1 > x2:\n        if y1 > y2:\n            x3, y3 = x1 - 1, y1 + 1\n            x4, y4 = x2 + 1, y2 + 1\n        else:\n            x3, y3 = x1 - 1, y1 - 1\n            x4, y4 = x2 + 1, y2 - 1\n    else:\n        if y1 > y2:\n            x3, y3 = x1 + 1, y1 + 1\n            x4, y4 = x2 - 1, y2 + 1\n        else:\n            x3, y3 = x1 + 1, y1 - 1\n            x4, y4 = x2 - 1, y2 - 1\n    return str(x3) +'' + str(y3) +'' + str(x4) +'' + str(y4)\nprint(solution(input()))"
    },
    {
        "number": 208,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(x) for x in stdin.split(\" \")]\n    if b == 0:\n        if a == 0:\n            if c == 0:\n                if d == 0:\n                    print(-1)\n                else:\n                    print(0, 1, 0, d)\n            else:\n                if d == 0:\n                    print(-1)\n                else:\n                    print(0, 0, 1, d)\n        else:\n            if c == 0:\n                if d == 0:\n                    print(-1)\n                else:\n                    print(1, 1, 0, d)\n            else:\n                if d == 0:\n                    print(-1)\n                else:\n                    print(1, 0, 1, d)\n    else:\n        if a == 0:\n            if c == 0:\n                if d == 0:\n                    print(-1)\n                else:\n                    print(0, d, 0, 1)\n            else:\n                if d == 0:\n                    print(-1)\n                else:\n                    print(0, 0, d, 1)\n        else:\n            if c == 0:\n                if d == 0:\n                    print(-1)\n                else:\n                    print(1, d, 0, 1)\n            else:\n                if d == 0:\n                    print(-1)\n                else:\n                    print(1, 0, d, 1)\nsolution(input())\n"
    },
    {
        "number": 208,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(min(solve(stdin)))\n\n\ndef"
    },
    {
        "number": 208,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split())\n    if (x1 == x2):\n        if (y2 > y1):\n            return(f'{x1} {y2} {x1} {y1}')\n        elif (y1 > y2):\n            return(f'{x1} {y1} {x1} {y2}')\n    elif (y1 == y2):\n        if (x2 > x1):\n            return(f'{x2} {y1} {x1} {y1}')\n        elif (x1 > x2):\n            return(f'{x1} {y1} {x2} {y1}')\n    else:\n        return '-1'\n    \n"
    },
    {
        "number": 208,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split())\n    return '{} {} {} {}'.format(x2 - x1, y2 - y1, x1 - x2, y1 - y2)\n    \n"
    },
    {
        "number": 208,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    if a[0] == a[2] and a[1] == a[3]:\n        return '-1'\n    if a[0] == a[1] and a[2] == a[3]:\n        return '1'\n    x1, y1, x2, y2 = a[0], a[1], a[2], a[3]\n    if x1 == x2 or y1 == y2 or (x1 + y1) / (x2 + y2) == 1:\n        return '0 1 1 0'\n    if x1 + y1 == x2 + y2 or x1 - y1 == x2 - y2:\n        return '-1'\n    if x1 - y1 == x2 - y2:\n        return '0 0 1 1'\n    if (x1 - y1) * (x2 + y2) == (x2 - y2) * (x1 + y1):\n        return '0 0 1 1'\n    return '1 0 1 1'\n"
    },
    {
        "number": 208,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split()\n    if (line[0] == line[2]) or (line[1] == line[3]):\n        return \"0 0 0 0\"\n    if line[0] == line[3]:\n        return \"{0} {1} {2} {3}\".format(0, line[1], 1, line[2])\n    elif line[0] == line[1]:\n        return \"{0} {1} {2} {3}\".format(line[3], 0, line[2], 1)\n    elif line[1] == line[2]:\n        return \"{0} {1} {2} {3}\".format(line[0], line[3], 0, line[1])\n    return \"0 0 0 0\"\n\n\"\"\"\n\nimport unittest\n\n\nclass SolutionTest(unittest.TestCase):\n    def test_case_1(self):\n        self.assertEqual(solution('0 0 0 1'), '1 0 1 1')\n\n    def test_case_2(self):\n        self.assertEqual(solution('0 0 1 1'), '0 1 1 0')\n\n    def test_case_3(self):\n        self.assertEqual(solution('0 0 1 2'), '-1')\n\n    def test_case_4(self):\n        self.assertEqual(solution('0 0 1 2 3'), '0 1 1 0')\n\n    def test_case_5(self):\n        self.assertEqual(solution('0 0 2 3 4'), '0 0 0 2')\n\n    def test_case_6(self):\n        self.assertEqual(solution('0 1 1 0'), '0 1 1 0')\n\n    def test_case_7(self):\n        self.assertEqual(solution('0 1 1 1'), '0 1 1 1')\n\n    def test_case_8(self):\n        self.assertEqual(solution('0 1 2 1'), '0 1 1 1')\n\n    def test_case_9(self):\n        self.assertEqual(solution('0 1 2 2'), '0 1 1 0')\n\n    def test_case_10(self):\n        self.assertEqual(solution('0 1 2 3'), '0 1 1 0')\n\n    def test_case_11(self):\n        self.assertEqual(solution('1 0 1 1'), '1 1 1 0')\n\n    def test_case_12(self):\n        self.assertEqual(solution('1 1 1 1'), '1 1 1 0')\n\n    def test_case_13(self):\n        self.assertEqual(solution('1 1 2 1'), '1 1 1 1')\n\n    def test_case_14(self):\n        self.assertEqual(solution('1 1 2 2'), '1 1 1 0')\n\n    def test_case_15(self):\n        self.assertEqual(solution('1 1 2 3'), '1 1 1 0')\n\n    def test_case_16(self):\n        self.assertEqual(solution('1 2 1 1'), '1 1 1 1')\n\n    def test_case_17(self):\n        self.assertEqual(solution('1 2 1 2'), '1 1 1 0')\n\n    def test_case_18(self):\n        self.assertEqual(solution('1 2 2 1'), '1 1 1 1')\n\n    def test_case_19(self):\n        self.assertEqual(solution('1 2 2 2'), '1 1 1 0')\n\n    def test_case_20(self):\n        self.assertEqual(solution('1 2 3 1'), '1 1 1 1')\n\n    def test_case_21(self):\n        self.assertEqual(solution('1 2 3 2'), '1 1 1 0')\n\n    def test_case_22(self):\n        self.assertEqual(solution('1 2 3 3'), '1 1 1 0')\n\n    def test_case_23(self):\n        self.assertEqual(solution('1 2 3 4'), '1 1 1 0')\n\n    def test_case_24(self):\n        self.assertEqual(solution('0 0 0 1'), '1 0 1 1')\n\n    def test_case_25(self):\n        self.assertEqual(solution('0 0 0 2'), '0 1 1 0')\n\n    def test_case_26(self):\n        self.assertEqual(solution('0 0 0 3'), '-1')\n\n    def test_case_27(self):\n        self.assertEqual(solution('0 0 0 4'), '0 0 0 2')\n\n    def test_case_28(self):\n        self.assertEqual(solution('0 0 0 5'), '0 0 0 2')\n\n    def test_case_29(self):\n        self.assertEqual(solution('0 1 0 1'), '1 0 1 1')\n\n    def test_case_30(self):\n        self.assertEqual(solution('0 1 0 1'), '1 0 1 1')\n\n    def test_case_31(self):\n        self.assertEqual(solution('0 1 0 2'), '0 1 1 0')\n\n    def test_case_32(self):\n        self.assertEqual(solution('0 1 0 2'), '0 1 1 0')\n\n    def test_case_33(self):\n        self.assertEqual(solution('0 1 0 3'), '0 1 1 0')\n\n    def test_case_34(self):\n        self.assertEqual(solution('0 1 0 3'), '0 1 1 0')\n\n    def test_case_35(self):\n        self.assertEqual(solution('0 1 0 4'), '0 1 1 0')\n\n    def test_case_36(self):\n        self.assertEqual(solution('0 1 0 4'), '0 1 1 0')\n\n    def test_case_37(self):\n        self.assertEqual(solution('0 1 0 5'), '0 1 1 0')\n\n    def test_case_38(self):\n        self.assertEqual(solution('0 1 1 1'), '0 1 1 1')\n\n    def test_case_39(self):\n        self.assertEqual(solution('0 1 1 1'), '0 1 1 1')\n\n    def test_case_40(self):\n        self.assertEqual(solution('0 1 2 1'), '0 1 1 1')\n\n    def test_case_41(self):\n        self.assertEqual(solution('0 1 2 2'), '0 1 1 0')\n\n    def test_case_42(self):\n        self.assertEqual(solution('0 1 2 3'), '0 1 1 0')\n\n    def test_case_43(self):\n        self.assertEqual(solution('0 1 2 3'), '0 1 1 0')\n\n    def test_case_44(self):\n        self.assertEqual(solution('0 1 2 4'), '0 1 1 0')\n\n    def test_case_45(self):"
    },
    {
        "number": 208,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = [int(x) for x in stdin.split(\" \")]\n    x3, y3 = x1, y2\n    x4, y4 = x2, y1\n    if (x1 + y1 + x2 + y2) % 2!= 0 or (x3 + y3 + x4 + y4) % 2!= 0:\n        return \"-1\"\n    x3 = (x1 + x2) // 2\n    x4 = (x1 + x2) // 2\n    y3 = (y1 + y2) // 2\n    y4 = (y1 + y2) // 2\n    return str(x3) + \" \" + str(y3) + \" \" + str(x4) + \" \" + str(y4)\n"
    },
    {
        "number": 208,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = [int(x) for x in stdin.split()]\n    x_3 = abs(x_1 + y_1)\n    y_3 = abs(x_2 + y_2)\n    x_4 = abs(x_1 - y_1)\n    y_4 = abs(x_2 - y_2)\n    if x_3 == x_4 and y_3 == y_4:\n        return \"{} {} {} {}\".format(x_1, y_1, x_2, y_2)\n    else:\n        return \"-1\""
    },
    {
        "number": 209,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split(' '))\n    n = int(input())\n    return 1\n"
    },
    {
        "number": 209,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, y = stdin.split(\" \")\n    x, y = int(x), int(y)\n    n = int(stdin[-1])\n    if n == 1:\n        return x\n    else:\n        return x + y\n"
    },
    {
        "number": 209,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    I am aware that I could have made a list of the fibonacci numbers instead of doing this in-place.\n    \"\"\"\n    x, y = stdin.split(\" \")\n    x = int(x)\n    y = int(y)\n    n = int(input())\n\n    x0 = x\n    x1 = x0 + y\n    y0 = x1\n    y1 = x0 + y0\n    while n > 0:\n        x0 = x1\n        x1 = x0 + y0\n        y0 = x1\n        y1 = x0 + y1\n        n -= 1\n    print(x1 % 1000000007)\n    return x1 % 1000000007\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 209,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Prints the solution in the required format.\n\n    '''\n    # Your code here\n    # Write your code here\n    numbers = stdin.split(' ')\n    x = int(numbers[0])\n    y = int(numbers[1])\n    n = int(numbers[2])\n    i = 0\n    total = x\n    while i < n:\n        i = i + 1\n        if i == n:\n            break\n        total = total + y\n        total = total % 1000000007\n    print(total)\n"
    },
    {
        "number": 209,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x, y = stdin.split()\n    n = int(stdin)\n    x, y = map(int, [x, y])\n    return (pow(x, n, 1000000007) * pow(y, n, 1000000007)) % 1000000007\n\n\"\"\"\n\nfrom math import pow, log\n\n\ndef"
    },
    {
        "number": 209,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 209,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    n = int(stdin)\n    if n == 1:\n        return a % 1000000007\n    if n == 2:\n        return (a * b) % 1000000007\n    return (a + b) % 1000000007 - b\n"
    },
    {
        "number": 209,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    n = int(stdin)\n\n    modulo = 1000000007\n    res = 0\n    if n == 1:\n        res = x\n    elif n == 2:\n        res = y\n    else:\n        for i in range(2, n + 1):\n            if i % 2 == 0:\n                res = ((res + x) % modulo + (y + res) % modulo) % modulo\n            else:\n                res = ((res + y) % modulo + (x + res) % modulo) % modulo\n\n    return str(res % modulo)\n\n\ndef"
    },
    {
        "number": 209,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \u8f38\u5165\u70bainput(str)\n    \u8f38\u51fa\u70baoutput(str)\n    \"\"\"\n    # Your code here\n    x, y = map(int, stdin.split())\n    # num = int(stdin)\n    # x = num % 1000000007\n    # y = num % 1000000007\n    if x == 0 and y == 0:\n        return 1\n    elif x == 0:\n        return 0\n    elif y == 0:\n        return 0\n    elif x == -1 * y:\n        return 1\n    else:\n        return (x + y) % (10 ** 9 + 7)\n"
    },
    {
        "number": 209,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 210,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 210,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = [int(i) for i in stdin.split()]\n    if n == 1:\n        print(\"NO\")\n    else:\n        l = 1\n        r = 1\n        if sum(arr) == 0:\n            print(\"YES\")\n            print(n)\n        else:\n            print(\"NO\")\n        while r < n:\n            if arr[r] == 0:\n                if r - l < n:\n                    print(\"NO\")\n                    return\n                else:\n                    l += 1\n                    r = l\n            else:\n                arr[l] += arr[r]\n                arr[r] = arr[l] - arr[r]\n                l += 1\n                r += 1\n        print(\"YES\")\n        for i in range(n):\n            print(str(l) + \" \" + str(r))\n            l += 1\n            r += 1\n    return \"\"\n\n\ndef"
    },
    {
        "number": 210,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    n = int(stdin)\n    if n == 1:\n        return \"NO\"\n\n    A = [int(x) for x in stdin.split(\" \")]\n\n    def num_to_list(num):\n        res = []\n        while num!= 0:\n            res.append(num % 10)\n            num //= 10\n        return res\n\n    A_list = num_to_list(A[0])\n\n    if 0 in A_list:\n        return \"NO\"\n\n    res = 0\n    s = 0\n    l = len(A_list)\n    for num in A_list:\n        s += num\n    res = s\n    ans = []\n    while res!= 0:\n        ans.append(res % 10)\n        res //= 10\n\n    ans.reverse()\n    l_sum = [0] * n\n    r_sum = [0] * n\n    for i in range(len(ans)):\n        l_sum[i] = ans[i] + l_sum[i - 1]\n    for i in range(len(ans) - 1, -1, -1):\n        r_sum[i] = ans[i] + r_sum[i + 1]\n\n    for i in range(n - 1):\n        if l_sum[i] == 0:\n            continue\n        l, r = i, i + 1\n        while l_sum[l] + r_sum[r] == 0:\n            if l + 1 >= n or r + 1 >= n:\n                return \"NO\"\n            l, r = l + 1, r + 1\n        if l_sum[l] + r_sum[r]!= 0:\n            return \"NO\"\n\n    return \"YES\\n\" + str(len(ans)) + \"\\n\" + str(l_sum[0]) + \" \" + str(r_sum[-1])\n\n\ndef"
    },
    {
        "number": 210,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"https://app.codility.com/demo/results/trainingTQJGQS-FYT/\"\"\"\n    stdin = stdin.split('\\n')\n    n = int(stdin[0])\n    arr = [int(item) for item in stdin[1].split(' ')]\n\n    if n == 1:\n        return 'YES'\n    if sum(arr) % n!= 0:\n        return 'NO'\n    arr.sort()\n    if len(arr) % n!= 0:\n        return 'NO'\n    left_sum = arr[0]\n    right_sum = sum(arr) - left_sum\n    k = len(arr) // n\n    for i in range(n):\n        left_sum += arr[k * i + 1]\n        right_sum -= arr[k * i + 1]\n        if left_sum > right_sum:\n            return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 210,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n"
    },
    {
        "number": 210,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    arr.sort()\n\n    def check():\n        for i in range(1, n):\n            if arr[i] == arr[i - 1] or arr[i] == arr[i - 1] + 1:\n                return False\n        return True\n\n    def solve(l: int, r: int):\n        if l == r:\n            return True\n        if r - l == 1:\n            return arr[l]!= arr[r]\n        m = (r + l) // 2\n        if arr[m] == arr[l] + 1 and solve(l, m):\n            return True\n        if arr[m] == arr[l] and solve(l, m):\n            return True\n        if arr[m] == arr[r] + 1 and solve(m, r):\n            return True\n        return False\n\n    if check():\n        print('YES')\n        print(n)\n        for i in range(n):\n            print(i + 1, i + 1)\n        return\n\n    print('NO')\n    return\n\n\ndef"
    },
    {
        "number": 210,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"8\\n9 -12 3 4 -4 -10 7 3\")\n    'YES\\n2\\n1 2\\n3 8\\n4 4'\n    >>> solution(\"1\\n0\")\n    'NO'\n    >>> solution(\"4\\n1 2 3 -5\")\n    'YES\\n4\\n1 1\\n2 2\\n3 3'\n    \"\"\"\n    count = 0\n    n = int(stdin)\n    arr = [int(x) for x in stdin.split()]\n    arr.append(0)\n    arr.sort()\n    low = 0\n    high = 1\n    while high < n + 1:\n        if arr[high] > 0:\n            low = high\n            high += 1\n        else:\n            if high - low >= 2:\n                count += 1\n                print(f\"{low} {high - 1}\")\n            low = high\n            high += 1\n    return count and \"YES\" or \"NO\"\n"
    },
    {
        "number": 210,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns 'YES' if the array can be split and 'NO' otherwise\"\"\"\n    nums = [int(s) for s in stdin.split()]\n    if sum(nums) % 2 == 1:\n        return 'NO'\n\n    left, right = 0, 1\n    while nums[left] < 0:\n        left += 1\n        right = left + 1\n    while right < len(nums):\n        if nums[right] < 0:\n            right += 1\n            left = right\n        else:\n            nums[left] += nums[right]\n            nums[right] = 0\n            while right < len(nums) and nums[right] < 0:\n                right += 1\n            if right == len(nums):\n                break\n            left = right\n            right += 1\n    if 0 in nums:\n        return 'NO'\n    return 'YES'\n\n\ndef"
    },
    {
        "number": 210,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(3)\n    YES\n    >>> solution(8)\n    YES\n    >>> solution(1)\n    NO\n    >>> solution(4)\n    YES\n    >>> solution(7)\n    NO\n    \"\"\"\n    n = int(stdin)\n    A = [int(x) for x in stdin.split()]\n    A.sort()\n    i = 0\n    if A[0]!= 0:\n        return \"NO\"\n    while i < len(A) - 1:\n        if A[i + 1] - A[i]!= 1:\n            return \"NO\"\n        i += 1\n    return \"YES\" + \"\\n\" + str(len(A)) + \"\\n\" + \" \".join(\n        [str(x) for x in range(1, n + 1)]\n    )\n"
    },
    {
        "number": 210,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = list(map(int, stdin.readline().strip().split()))\n    arr.sort()\n    s = sum(arr)\n    if s == 0:\n        return \"YES\"\n    \n    if len(arr) <= 1:\n        return \"NO\"\n    \n    tot = 0\n    for i in range(1, n):\n        if tot + arr[i] == 0:\n            tot += arr[i]\n        elif tot + arr[i] < 0:\n            return \"NO\"\n        else:\n            tot += arr[i]\n    return \"YES\"\n    \n"
    },
    {
        "number": 211,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split(' '))\n    if n == m:\n        return n\n    elif m == k:\n        return 0\n    else:\n        return n - m - k"
    },
    {
        "number": 211,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(i) for i in stdin.split(' ')]\n    ans = n\n    for i in range(n):\n        if i >= m and i % m == 0:\n            ans += k\n        ans -= k\n    return ans % 1000000009\n"
    },
    {
        "number": 211,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(i) for i in stdin.split(' ')]\n    print((c * (a - b) * 2 + c * (a - b)) % 1000000009)\n"
    },
    {
        "number": 211,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    (n, m, k) = [int(x) for x in stdin.split()]\n    print(2*k*n-m)\n"
    },
    {
        "number": 211,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n\n    return str(min(n - m + 1, n - m + k + 1))\n\"\"\"\n\nn, m, k = [int(x) for x in input().split()]\ns = (n - m + 1) + (n - m + k + 1)"
    },
    {
        "number": 211,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Manao is taking part in a quiz. The quiz consists of n consecutive questions. A correct answer gives one point to the player. The game also has a counter of consecutive correct answers. When the player answers a question correctly, the number on this counter increases by 1. If the player answers a question incorrectly, the counter is reset, that is, the number on it reduces to 0. If after an answer the counter reaches the number k, then it is reset, and the player's score is doubled. Note that in this case, first 1 point is added to the player's score, and then the total score is doubled. At the beginning of the game, both the player's score and the counter of consecutive correct answers are set to zero.\n\nManao remembers that he has answered exactly m questions correctly. But he does not remember the order in which the questions came. He's trying to figure out what his minimum score may be. Help him and compute the remainder of the corresponding number after division by 1000000009 (10^9 + 9).\n\n\n-----Input-----\n\nThe single line contains three space-separated integers n, m and k (2 \u2264 k \u2264 n \u2264 10^9;\u00a00 \u2264 m \u2264 n).\n\n\n-----Output-----\n\nPrint a single integer \u2014 the remainder from division of Manao's minimum possible score in the quiz by 1000000009 (10^9 + 9).\n\n\n-----Examples-----\nInput\n5 3 2\n\nOutput\n3\n\nInput\n5 4 2\n\nOutput\n6\n\nInput\n5 5 1\n\nOutput\n0\n\n\n-----Note-----\n\nSample 1. Manao answered 3 questions out of 5, and his score would double for each two consecutive correct answers. If Manao had answered the first, third and fifth questions, he would have scored as much as 3 points.\n\nSample 2. Now Manao answered 4 questions. The minimum possible score is obtained when the only wrong answer is to the question 4.\n\nAlso note that you are asked to minimize the score and not the remainder of the score modulo 1000000009. For example, if Manao could obtain either 2000000000 or 2000000020 points, the answer is 2000000000\u00a0mod\u00a01000000009, even though 2000000020\u00a0mod\u00a01000000009 is a smaller number.\n\"\"\"\n\nimport sys\n\n\ndef"
    },
    {
        "number": 211,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    return str(n * k - m * (k - 1))\n"
    },
    {
        "number": 211,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"The first line contains three space-separated integers n, m and k (2 \u2264 k \u2264 n \u2264 10^9;\u00a00 \u2264 m \u2264 n).\n    The next line contains n space-separated integers a1, a2,..., an (1 \u2264 ai \u2264 10^9).\n\n    :param stdin: The standard input string\n    :return: The solution string\n    \"\"\"\n    n, m, k = [int(i) for i in stdin.split()]\n    a = [int(i) for i in stdin.split()]\n    # assuming m is always > 0\n    # if m == 0:\n    #     return f\"{0}\"\n    m, k = m, k % 10000000009\n    m = m % 10000000009\n    n, k = n, k % 10000000009\n    n, k = n, k % 10000000009\n    a = [i % 10000000009 for i in a]\n    s = m + sum(a)\n    for i in range(n - k):\n        s += a[i]\n    return f\"{s % 10000000009}\"\n"
    },
    {
        "number": 211,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split(' '))\n    return m if n - m < k else m + (n - m - k) * 2\n"
    },
    {
        "number": 211,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    correct = 0\n    total = 0\n    for i in range(n):\n        if i < m:\n            correct += 1\n            total += 1\n        else:\n            correct = 0\n        total += 1\n        if correct == k:\n            total *= 2\n    return total % 1000000009\n"
    },
    {
        "number": 212,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    number = list(stdin)\n    answer = False\n    i = 0\n    while i < len(number):\n        if number[i] == \"0\" and not answer:\n            number.pop(i)\n            answer = True\n        else:\n            i += 1\n    number = ''.join(number)\n    if answer and len(number) > 1 and int(number) % 8 == 0:\n        return \"YES\" + \" \" + number\n    return \"NO\"\n"
    },
    {
        "number": 212,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    lst = list(str(n))\n    for i in range(len(lst)):\n        if n % 8 == 0:\n            return \"YES\\n\"+''.join(lst[:i])\n        if n % 8!= 0:\n            return \"NO\"\n    return \"NO\"\n"
    },
    {
        "number": 212,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    l = len(n)\n    \n    while l >= 1:\n        \n        if int(n) % 8 == 0:\n            return \"YES\"\n        elif len(n) == 1:\n            return \"NO\"\n        else:\n            l -= 1\n            n = n[:-1]\n            \n    return \"NO\"\n    \n    \n"
    },
    {
        "number": 212,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"https://app.codility.com/demo/results/trainingZC2S51-WGQ/\"\"\"\n    n = int(stdin)\n    while n % 8!= 0:\n        n -= 1\n    return f\"YES\\n{n // 8 * 8}\"\n"
    },
    {
        "number": 212,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    s = list(map(int, s))\n    a = sum(s)\n    if a % 8 == 0:\n        return \"YES\"\n    if a % 8!= 0:\n        return \"NO\"\n    s.sort()\n    if s[-1] % 8 == 0:\n        return \"YES\"\n    if s[-1] % 8!= 0:\n        return \"NO\"\n    for i in s:\n        if i % 8 == 0:\n            return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 212,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution(3454)\n    'YES'\n    >>> solution(10)\n    'YES'\n    >>> solution(111111)\n    'NO'\n    '''\n    s = stdin\n    # set all digits\n    s = set(s)\n    # find all digits that appears more than once\n    s = {i for i in s if s.count(i) > 1}\n    # find all digits that appears more than once and not in the original number\n    s = {i for i in s if s.isdisjoint(set(stdin))}\n    for i in s:\n        if s.isdisjoint(set(stdin)) and s.isdisjoint('0') and s.isdisjoint('8'):\n            print('YES')\n            print(stdin.replace(i, ''))\n            return\n    print('NO')\n    return\n    \n"
    },
    {
        "number": 212,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    num = stdin\n    while len(num) > 0:\n        if int(num) % 8 == 0:\n            return 'YES'+ num[0:-1]\n        else:\n            num = num[:-1]\n    return 'NO'"
    },
    {
        "number": 212,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    while len(n) > 1:\n        n = \"\".join(n.split(\"0\"))\n        n = \"\".join(n.split(\"1\"))\n        if len(n) > 1:\n            n = \"\".join(n.split(\"2\"))\n            n = \"\".join(n.split(\"3\"))\n            n = \"\".join(n.split(\"4\"))\n            n = \"\".join(n.split(\"5\"))\n            n = \"\".join(n.split(\"6\"))\n            n = \"\".join(n.split(\"7\"))\n            n = \"\".join(n.split(\"8\"))\n            n = \"\".join(n.split(\"9\"))\n        if len(n) > 1:\n            break\n        else:\n            n = \"\".join(n.split(\"0\"))\n    if len(n) == 1:\n        if int(n) % 8 == 0:\n            print(\"YES\")\n            print(n)\n        else:\n            print(\"NO\")\n    else:\n        print(\"NO\")\n"
    },
    {
        "number": 212,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    flag = True\n    x = n[0]\n    if n[0]=='0':\n        flag = False\n    for i in range(1,len(n)):\n        x = x + n[i]\n        if x[0]=='0':\n            flag = False\n        if int(x)%8==0 and len(x)>1:\n            flag = True\n    if flag:\n        return 'YES'\n    else:\n        return 'NO'\n        \nprint(solution('3454'))\nprint(solution('111111'))\n"
    },
    {
        "number": 212,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    res = \"\"\n    for i in range(len(stdin)):\n        if stdin[i]!= \"0\":\n            res += stdin[i]\n    if len(res) == 0:\n        return \"YES\"\n    if int(res) % 8 == 0:\n        return \"YES\"\n    if len(res) == 1:\n        if int(res) % 8 == 0:\n            return \"YES\"\n        return \"NO\"\n    return \"NO\"\nprint(solution(\"10101\"))"
    },
    {
        "number": 213,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    flat_number = int(stdin.split()[0])\n    flat_memory = stdin.split()[1:]\n    flat_memory = [tuple(map(int, x.split(\",\"))) for x in flat_memory]\n    floor_list = set()\n    for x in flat_memory:\n        for y in x:\n            floor_list.add(y)\n    floors = list(floor_list)\n    floors = sorted(floors)\n    floors_dict = {}\n    for i in range(len(floors)):\n        floors_dict[floors[i]] = i\n    count = 0\n    for x in flat_memory:\n        last_floor = floors_dict[x[0]]\n        if x[1]!= len(floors) - last_floor:\n            return \"-1\"\n        count += last_floor\n    return count\n\n\n\"\"\"\n\n\"\"\"\nGiven a flat number n and a list of pairs (floor, number of flats) in the building, reconstruct the floor on which the n-th flat is located. If there is no such solution, print -1.\n\nInput\nn = 5\nFlat numbers\n6 2\n2 1\n7 3\n\nOutput\n4\n\"\"\"\n\nn = int(input())\nflat_number = int(input())\nflat_memory = input().split()\nflat_memory = [tuple(map(int, x.split(\",\"))) for x in flat_memory]\nfloor_list = set()\nfor x in flat_memory:\n    for y in x:\n        floor_list.add(y)\nfloors = list(floor_list)\nfloors = sorted(floors)\nfloors_dict = {}\nfor i in range(len(floors)):\n    floors_dict[floors[i]] = i\ncount = 0\nfor x in flat_memory:\n    last_floor = floors_dict[x[0]]\n    if x[1]!= len(floors) - last_floor:\n        print(-1)\n        break\n    count += last_floor\nprint(count + 1)"
    },
    {
        "number": 213,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    numFlats, numMems = [int(x) for x in stdin.strip().split('\\n')]\n    flatsMem = []\n    for _ in range(numMems):\n        mem = [int(x) for x in stdin.strip().split('\\n')]\n        flatsMem.append(mem)\n\n    maxFlat = max([max(flat) for flat in flatsMem])\n\n    if maxFlat == 0:\n        return '0'\n\n    # remove duplicates\n    flatsMem = [list(set(flat)) for flat in flatsMem]\n\n    # sort\n    flatsMem.sort()\n    # print(flatsMem)\n\n    flatsMem.append([])\n    flats = {}\n    floors = {}\n    for flat, floor in flatsMem:\n        if flat not in flats:\n            flats[flat] = []\n        flats[flat].append(floor)\n        if floor not in floors:\n            floors[floor] = 0\n        floors[floor] += 1\n\n    # print(flats)\n    # print(floors)\n\n    def isPossible(floor):\n        if len(floors[floor]) >= maxFlat:\n            return True\n        return False\n\n    # print(floors)\n    # print(isPossible(1))\n\n    def searchForFloor(floor):\n        if isPossible(floor):\n            return floor\n        else:\n            for i in range(floor+1, maxFlat+1):\n                if isPossible(i):\n                    return i\n            return -1\n\n    n = 1\n    while True:\n        # print(searchForFloor(n))\n        if searchForFloor(n) == -1:\n            return '-1'\n        if n == maxFlat:\n            return str(searchForFloor(n))\n        n += 1\n"
    },
    {
        "number": 213,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 213,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Find the floor where the given flat is located.\n    :param stdin: input data\n    :return: the floor where the flat is located\n    '''\n    # Get the number of the flat and the number of floors\n    n, m = tuple(map(int, stdin.split()))\n    # Get the floors and the flats of the flat\n    flats = sorted(map(int, stdin.split()[1:]))\n    # The starting floor\n    floor = 1\n    # The current number of floors\n    current = 1\n    # List of floors\n    floors = [floor]\n    # Dictionary of the flats and their corresponding floors\n    d = {floor: flat for flat in flats}\n    # For every floor in the input\n    for floor in range(2, n + 1):\n        # The number of flats on the current floor\n        current = m // floor\n        # If there are not enough flats on the current floor\n        if current > flats.count(floor):\n            # We're done\n            return -1\n        # We've found the floor\n        floors.append(floor)\n        # For every possible flat on the current floor\n        for flat in flats[:current]:\n            # Remove this flat from the list\n            flats.remove(flat)\n            # If we've already found it\n            if d.get(flat, -1)!= -1:\n                # We're done\n                return floor\n            # Else, add this flat to the dictionary\n            d[flat] = floor\n    # If we're here, we couldn't find any flat on a higher floor\n    return -1\n\n\ndef"
    },
    {
        "number": 213,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # return result"
    },
    {
        "number": 213,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    _, m = [int(x) for x in stdin.split()]\n    floors = []\n    for _ in range(m):\n        floors.append([int(x) for x in stdin.split()])\n\n    n_flats = 0\n    for i in range(1, 101):\n        c = 0\n        for j in range(len(floors)):\n            if i % floors[j][0] == 0:\n                c += floors[j][1]\n        if c > n_flats:\n            n_flats = c\n\n    return str(n_flats)\n"
    },
    {
        "number": 213,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 213,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution to the problem\"\"\"\n    pass\n"
    },
    {
        "number": 213,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return floor of the flat.\"\"\"\n    # Get a flat number.\n    flats_number = int(stdin.split()[0])\n    # Get a list of pairs of flat number and flat's floor.\n    flats_floors = [pair.split() for pair in stdin.split('\\n')[1:]]\n    # Initialize the list of floors.\n    floors = []\n    # Iterate over the list of pairs to check which of them we can use.\n    for flat, floor in flats_floors:\n        # Initialize the count of flat's floors.\n        flat_floors_count = 0\n        # Check the floor of each pair.\n        for pair in flats_floors:\n            # If the floor is the same, increase the count.\n            if pair[0] == flat and pair[1] == floor:\n                flat_floors_count += 1\n        # If the flat's count is the same as the flats number,\n        # then this flat's floor is the flat number.\n        if flat_floors_count == flats_number:\n            floors.append(floor)\n    # If the list is empty, then we can't restore the flat's floor.\n    if not floors:\n        return -1\n    # Otherwise, return the lowest floor from the list.\n    return min(floors)\n"
    },
    {
        "number": 213,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    k, f = stdin.split()\n    f = int(f)\n    k = int(k)\n    result = 0\n    for i in range(1, k + 1):\n        if f == i:\n            result = i\n    print(result)\n    return ''\n"
    },
    {
        "number": 214,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin\n"
    },
    {
        "number": 214,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pawns = [pos for pos, char in enumerate(stdin) if char == 'X']\n    x = pawns[0]\n    y = pawns[1]\n\n    max_x = x + 1\n    min_x = x - 1\n    max_y = y + 1\n    min_y = y - 1\n\n    for pawn in pawns:\n        if pawn < min_x:\n            min_x = pawn\n        if pawn > max_x:\n            max_x = pawn\n        if pawn < min_y:\n            min_y = pawn\n        if pawn > max_y:\n            max_y = pawn\n\n    return max(1, min_x - max_x + min_y - max_y)\n\n\nprint(solution(\"0X0X0\\n0X0X0\"))\nprint(solution(\"0XXX0\\n00000\"))\nprint(solution(\"0X0X0\\n0X0X0\"))\n\nprint(solution(\"00X00X0XXX0\\n0XXX0X00X00\"))\nprint(solution(\"0X0X0\\n0X0X0\"))\nprint(solution(\"0XXX0\\n00000\"))\n"
    },
    {
        "number": 214,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Given two nonempty strings s and t of uppercase English letters,\n    the Hamming distance between s and t, denoted dH(s,t), is the number of corresponding symbols that differ in s and t.\n\n    Given an integer n, your task is to find all strings of length n that are at most 1 edit distance apart from their original string.\n\n    Input\n    The input consists of two nonempty lines. The first line contains the original string s of uppercase English letters. The second line contains the string t of uppercase English letters of the same length as s.\n\n    Output\n    Output the number of strings that are at most 1 edit distance apart from their original string.\n\n    Examples\n    Input\n    AABC\n    AACC\n\n    Output\n    3\n    Input\n    AAAB\n    AAAC\n\n    Output\n    2\n    Input\n    AAAA\n    AAAC\n\n    Output\n    0\n    \"\"\"\n    # return 0\n\n\n    # for each position in the string, check if there is a differnce between the letter and the next letter\n    # if there is a difference, then we can either insert an X in between the 2 letters\n    # or we can delete a letter from the first letter\n    # we can only check the distance between 2 letters if they are not the first letter\n    # we can only check the distance between 2 letters if they are not the last letter\n    # if we don't have an X in between the 2 letters, then we can check the distance between 3 letters\n    # if we have an X in between the 2 letters, then we can check the distance between 4 letters\n    # we check the distance between 3 letters only if they are not the first or last letter\n    # we check the distance between 3 letters only if they are not the first or last letter\n    # if we have an X in between the 3 letters, then we can check the distance between 5 letters\n    # if we have an X in between the 3 letters, then we can check the distance between 6 letters\n    # we check the distance between 4 letters only if they are not the first or last letter\n    # we check the distance between 4 letters only if they are not the first or last letter\n    # we check the distance between 4 letters only if they are not the first or last letter\n    # we check the distance between 5 letters only if they are not the first or last letter\n    # we check the distance between 5 letters only if they are not the first or last letter\n    # we check the distance between 6 letters only if they are not the first or last letter\n    # we check the distance between 6 letters only if they are not the first or last letter\n    # we check the distance between 7 letters only if they are not the first or last letter\n    # we check the distance between 7 letters only if they are not the first or last letter\n    # if we have an X in between the 7 letters, then we can check the distance between 8 letters\n    # if we have an X in between the 7 letters, then we can check the distance between 9 letters\n    # we check the distance between 8 letters only if they are not the first or last letter\n    # we check the distance between 8 letters only if they are not the first or last letter\n    # we check the distance between 8 letters only if they are not the first or last letter\n    # we check the distance between 9 letters only if they are not the first or last letter\n    # we check the distance between 9 letters only if they are not the first or last letter\n    # if we have an X in between the 9 letters, then we can check the distance between 10 letters\n    # if we have an X in between the 9 letters, then we can check the distance between 11 letters\n    # we check the distance between 10 letters only if they are not the first or last letter\n    # we check the distance between 10 letters only if they are not the first or last letter\n    # we check the distance between 10 letters only if they are not the first or last letter\n    # we check the distance between 11 letters only if they are not the first or last letter\n    # we check the distance between 11 letters only if they are not the first or last letter\n    # if we have an X in between the 11 letters, then we can check the distance between 12 letters\n    # if we have an X in between the 11 letters, then we can check the distance between 13 letters\n    # we check the distance between 12 letters only if they are not the first or last letter\n    # we check the distance between 12 letters only if they are not the first or last letter\n    # we check the distance between 12 letters only if they are not the first or last letter\n    # we check the distance between 13 letters only if they are not the first or last letter\n    # we check the distance between 13 letters only if they are not the first or last letter\n    # if we have an X in between the 13 letters, then we can check the distance between 14 letters\n    # if we have an X in between the 13 letters, then we can check the distance between 15 letters\n    # we check the distance between 14 letters only if they are not the first or last letter\n    # we check the distance between 14 letters only if they are not the first or last letter\n    # we check the distance between 14 letters only if they are not the first or last letter\n    # we check the distance between 15 letters only if they are not the first or last letter\n    # we check the distance between 15 letters only if they are not the first or last letter\n    # if we have an X in between the 15 letters, then we can check the distance between 16 letters\n    # if we have an X in between the 15 letters, then we can check the distance between 17 letters\n    # we check the distance between 16 letters only if they are not the first or last letter\n    # we check the distance between 16 letters only if they are not the first or last letter\n    # we check the distance between 16 letters only if they are not the first or last letter\n    # we check the distance between 17 letters only if they are not the first or last letter\n    # we check the distance between 17 letters only if they are not the first or last letter\n    # if we have an X in between the 17 letters, then we can check the distance between 18 letters\n    # if we have an X in between the 17 letters, then we can check the distance between 19 letters\n    # we check the distance between 18 letters only if they are not the first or last letter\n    # we check the distance between 18 letters only if they are not the first or last letter\n    # we check the distance between 18 letters only if they are not the first or last letter\n    # we check the distance between 19 letters only if they are not the first or last letter\n    # we check the distance between 19 letters only if they are not the first or last letter\n    # if we have an X in between the 19 letters, then we can check the distance between 20 letters\n    # if we have an X in between the 19 letters, then we can check the distance between 21 letters\n    # we check the distance between 20 letters only if they are not the first or last letter\n    # we check the distance between 20 letters only if they are not the first or last letter\n    # we check the distance between 20 letters only if they are not the first or last letter\n    # we check the distance between 21 letters only if they are not the first or last letter\n    # we check the distance between"
    },
    {
        "number": 214,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 214,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    board = [\n        \"0\" + stdin[0] * 2 + \"0\",\n        \"0\" + stdin[1] * 2 + \"0\",\n        \"0\" + stdin[2] * 2 + \"0\",\n        \"0\" + stdin[3] * 2 + \"0\",\n    ]\n    answer = 0\n    for x in range(1, 3):\n        for y in range(1, 3):\n            if x + y <= 3:\n                if (\n                    board[x - 1][y] == board[x][y] == board[x + 1][y] == \"0\"\n                    or board[x][y - 1] == board[x][y] == board[x][y + 1] == \"0\"\n                ):\n                    answer += 1\n    return answer\n"
    },
    {
        "number": 214,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    return \"\"\n    \n"
    },
    {
        "number": 214,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    board = list(stdin)\n    max_count = 0\n    for i in range(len(board)):\n        if board[i] == \"0\":\n            board[i] = \"1\"\n            count = 0\n            for j in range(len(board)):\n                if board[j] == \"0\":\n                    count += 1\n            max_count = max(max_count, count)\n            board[i] = \"0\"\n    return max_count\n"
    },
    {
        "number": 214,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # You can obviously print anything\n    # You don't need an if statement\n    # You need to return a string\n    # Other than that, feel free to use a built-in function\n    return \"\""
    },
    {
        "number": 214,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    board = [list(row) for row in stdin.split('\\n')]\n\n    # Get list of bishwocks\n    bishwocks = []\n\n    # Check all squares\n    for x in range(len(board)):\n        for y in range(len(board)):\n\n            # If the square is not occupied by pawn,\n            # check if it is occupied by one of the bishwocks\n            if board[x][y]!= 'X' and board[x][y]!= '0':\n\n                # Get the possible states of bishwock\n                states = get_states(board[x][y])\n\n                # Check all possible states\n                for i in range(len(states)):\n                    board_copy = [list(row) for row in stdin.split('\\n')]\n                    board_copy[x][y] = states[i]\n                    bishwocks.append(check_if_possible(board_copy, x, y))\n\n    # Get the maximum amount of bishwocks\n    print(max(bishwocks))\n    return ''\n\n\ndef"
    },
    {
        "number": 214,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = [int(c) for c in stdin.strip()]\n    pawns = sorted([i for i,c in enumerate(stdin) if c == 1])\n    left = pawns[0]\n    right = pawns[-1]\n    num_bs = stdin.count(0) - 1\n    return num_bs"
    },
    {
        "number": 215,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin)\n    s = stdin.lower()\n    freq = {i:s.count(i) for i in s if i.isalpha()}\n    if len(freq.values()) == 0:\n        return 0\n    s = sorted(freq.values())\n    if len(s) == 1:\n        return 1\n    \n    def is_p(l):\n        if l[0] >= 2:\n            return True\n        for i in range(1, len(l)):\n            if l[i] - l[i - 1] > 1:\n                return True\n        return False\n    \n    return max(is_p(l) for l in [s[1:], s[-2::-1], s]) + 1\n"
    },
    {
        "number": 215,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)\n"
    },
    {
        "number": 215,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 215,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return ''\n"
    },
    {
        "number": 215,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\ns= stdin.split()\ns_len = int(s[0])\ns_str = s[1]\nlst=[]\nfor i in range(s_len):\n    if s_str[i] in lst:\n        continue\n    else:\n        for j in range(i+1,s_len):\n            if s_str[j] in lst:\n                continue\n            elif s_str[i].isupper()==True and s_str[j].isupper()==True:\n                continue\n            elif s_str[i].islower()==True and s_str[j].islower()==True:\n                continue\n            else:\n                lst.append(s_str[i])\n                lst.append(s_str[j])\n                break\nprint(len(lst))\n        \n"
    },
    {
        "number": 215,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = list(stdin)\n    \n    d = {}\n    for x in s:\n        if x not in d:\n            d[x] = 1\n        else:\n            d[x] += 1\n            \n    d_keys = list(d.keys())\n    d_values = list(d.values())\n    \n    # let's consider positions that are not in d_keys\n    d_keys.append(-1)\n    d_values.append(0)\n    \n    # let's consider positions that are in d_keys\n    \n    # make 2D array for binary search\n    low = 0\n    high = len(d_values) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if d_keys[mid] == mid:\n            break\n        elif d_keys[mid] < mid:\n            low = mid + 1\n        else:\n            high = mid - 1\n    \n    if d_keys[mid] == -1:\n        # there are no lowercase letters\n        return '0'\n    else:\n        start = mid\n        end = mid + 1\n        \n        while d_keys[end] == end:\n            end += 1\n        \n        if start == 0:\n            return str(end - start)\n        elif end == len(d_keys):\n            return str(len(d_keys) - start)\n        else:\n            return str(max(end - start, len(d_keys) - start))\n"
    },
    {
        "number": 215,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    count = 0\n    # You can also remove all the lowercase characters.\n    string = stdin.replace('a', '').replace('b', '')\n    string = list(string)\n    for i in range(len(string) - 1):\n        if string[i].isalpha() and string[i + 1].isalpha():\n            count += 1\n    return count"
    },
    {
        "number": 215,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution to the problem\n    :param stdin: str - input string\n    :return: str - answer\n    \"\"\"\n    # Initializing variables\n    n = len(stdin)\n    s = stdin\n    res = [0] * n\n    # Calculating result\n    for i in range(n):\n        if s[i].islower():\n            res[i] = 1\n        else:\n            res[i] = 0\n\n    # Calculating result\n    i = 0\n    while i < n:\n        if i == 0 and (res[i] == 1 or res[i + 1] == 1):\n            res[i] = 1\n            i += 2\n            continue\n        if i == n - 1 and res[i] == 1:\n            res[i] = 1\n            break\n        if i == 0 and res[i] == 1 and res[i + 1] == 0:\n            res[i] = 1\n            i += 2\n            continue\n        if i == n - 1 and res[i] == 0:\n            break\n        if res[i] == 1 and res[i + 1] == 1:\n            res[i] = 1\n            i += 2\n            continue\n        if res[i] == 1 and res[i + 1] == 0:\n            res[i] = 1\n            i += 2\n            continue\n        else:\n            res[i] = 0\n            i += 1\n\n    # print result\n    print(sum(res))\n    return \"\"\n"
    },
    {
        "number": 215,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 215,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return max(count_letters_upper(stdin),\n               count_letters_lower(stdin))\n\n\ndef"
    },
    {
        "number": 216,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    n = int(stdin)\n    arr = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    b = arr[:n//2]\n    c = arr[n//2:]\n    sum_b = sum(b)\n    sum_c = sum(c)\n    return sum_b - sum_c"
    },
    {
        "number": 216,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split(\" \")]\n    length = len(a)\n    b = []\n    c = []\n    for i in a:\n        if i <= 0:\n            b.append(i)\n        else:\n            c.append(i)\n\n    return max(b) - max(c)\n\"\"\"\n\ndef"
    },
    {
        "number": 216,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\nb = [0 for _ in range(n)]\nc = [0 for _ in range(n)]\n\nfor i in range(n):\n    for j in range(i + 1):\n        if i == j:\n            b[j] = a[i]\n        elif j > 0:\n            c[j] = c[j - 1] + a[i]\n\nprint(max(c) - max(b))\n"
    },
    {
        "number": 216,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    n = int(stdin)\n    a = list(map(int, stdin.split(\" \")))\n    b = []\n    c = []\n    for i in range(n):\n        if a[i] % 2 == 0:\n            b.append(a[i])\n        else:\n            c.append(a[i])\n    B = sum(b)\n    C = sum(c)\n    print(B - C)\n"
    },
    {
        "number": 216,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    :param stdin:\n    :return:\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    arr = [int(i) for i in stdin.split('\\n')[1].split()]\n    arr.sort()\n    left = []\n    right = []\n    left_sum = 0\n    right_sum = 0\n    for i in range(n // 2):\n        left_sum += arr[i]\n        left.append(arr[i])\n    for i in range(n // 2, n):\n        right_sum += arr[i]\n        right.append(arr[i])\n    max_diff = 0\n    for i in range(len(left)):\n        max_diff = max(max_diff, left_sum - left[i])\n    for i in range(len(right)):\n        max_diff = max(max_diff, right_sum - right[i])\n    return str(max_diff)\n"
    },
    {
        "number": 216,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n    max = 0\n    for i in range(n):\n        sum = 0\n        for j in range(n):\n            if a[i] == a[j]:\n                sum += a[j]\n            if sum > max:\n                max = sum\n    return max\n\"\"\"\n\n\ndef"
    },
    {
        "number": 216,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return''.join(stdin.split())\n"
    },
    {
        "number": 216,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 216,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return 'Your solution here'\n"
    },
    {
        "number": 216,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    # your code here"
    },
    {
        "number": 217,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, f, k = map(int, stdin.split())\n    if k >= a // f:\n        return str(a // f)\n    return str(-1)\n\nprint(solution(input()))\n"
    },
    {
        "number": 217,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, f, k = [int(s) for s in stdin.split()]\n    l = b - a\n    if l // k < a:\n        print(-1)\n    else:\n        print(l // k - f // k + 1)\n"
    },
    {
        "number": 217,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    a, b, f, k = [int(x) for x in stdin.split()]\n    if k < b // (a - f):\n        return '-1'\n    count = 0\n    # check if it's possible to make all k journeys\n    while k > 0:\n        count += 1\n        if k >= b:\n            k -= b\n            continue\n        k -= b\n    return count\n"
    },
    {
        "number": 217,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, f, k = map(int, stdin.split())\n    first_refuel = int((a - f) / k)\n    if first_refuel < 0:\n        return \"-1\"\n    else:\n        return first_refuel + 1\n"
    },
    {
        "number": 217,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, f, k = [int(x) for x in stdin.split(' ')]\n    min_refuel = abs(a - f) + max(0, b // a + 1 - k)\n    if a * k < b + f:\n        min_refuel = -1\n    return str(min_refuel)\n"
    },
    {
        "number": 217,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, f, k = [int(n) for n in stdin.split()]\n    if k > a:\n        return -1\n    if b == 0:\n        return -1\n\n    if a == f:\n        if k == 1:\n            return 0\n        else:\n            return -1\n\n    if f - a < k:\n        return -1\n    else:\n        return k * ((a - f) // (k - 1)) + (a - f) % (k - 1)\n"
    },
    {
        "number": 217,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, f, k = [int(x) for x in stdin.split()]\n    t = a / f\n    if t >= k:\n        return str(k)\n    elif t >= (k - 1) and (t + 1) % 2!= 0:\n        return str(t + 1)\n    elif t >= (k - 1) and (t + 1) % 2 == 0:\n        return str(t + 2)\n    else:\n        return -1\n"
    },
    {
        "number": 217,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, f, k = [int(x) for x in stdin.split()]\n    x = min((a-f) % (k*b), (f-0) % (k*b))\n    if x >= 0:\n        return str(x // b)\n    else:\n        return '-1'\n"
    },
    {
        "number": 217,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, f, k = [int(x) for x in stdin.split(' ')]\n    k = min(k, a // b + 1)\n    return str(k if a >= f * k - b else -1)\n\ndef"
    },
    {
        "number": 217,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, f, k = list(map(int, stdin.split(' ')))\n    if (f - a) / b < k:\n        return '-1'\n\n    return (f - a) // b - k + 1\n\n\"\"\""
    },
    {
        "number": 218,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p, q = list(map(int, stdin.split(' ')))\n    stdin = stdin.split('\\n')\n    string = stdin[0]\n    p_counter = 0\n    q_counter = 0\n    result = []\n    \n    for i in range(0, n):\n        if q_counter == q:\n            p_counter += 1\n            q_counter = 0\n        if p_counter == p:\n            result.append(string[:q])\n            string = string[q:]\n            p_counter = 0\n        q_counter += 1\n        \n    if string:\n        result.append(string)\n    print(len(result))\n    for i in range(0, len(result)):\n        print(result[i])\n    return '\\n'.join(result)\n    \n    \n"
    },
    {
        "number": 218,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, p, q = [int(x) for x in stdin.split()]\n    s = stdin[0]\n\n    i = 0\n    while i < len(s) - 1:\n        if s[i] == s[i+1]:\n            if s[i] == 'z':\n                i += 1\n                continue\n            else:\n                s = s[:i] + s[i+1:]\n        else:\n            i += 1\n        if i == len(s) - 1:\n            s += 'z'\n\n    if len(s) < p + q:\n        return '-1'\n\n    if p >= q:\n        return '-1'\n\n    result = ''\n    result_arr = []\n    for i in range(0, len(s) - p + 1):\n        if i == 0:\n            result = s[:p]\n        elif i + p <= len(s):\n            result += s[i + p - 1]\n        else:\n            return '-1'\n        result_arr.append(result)\n    return '\\n'.join(result_arr)\n"
    },
    {
        "number": 218,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, p, q = list(map(int, stdin.split(\" \")))\n    string = stdin[:n]\n    if p * q > len(string):\n        return \"-1\"\n    return [string[i : i + p] for i in range(0, len(string), p)][:q]\n"
    },
    {
        "number": 218,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin"
    },
    {
        "number": 218,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    s, p, q = stdin.split()\n    p, q = int(p), int(q)\n\n    if p > len(s) or q > len(s):\n        return \"-1\"\n\n    if len(s) % (p + q)!= 0:\n        return \"-1\"\n\n    q = len(s) // (p + q)\n    ans = \"\"\n    for i in range(q):\n        ans += s[:p] + \"\\n\"\n        s = s[p:]\n\n    return ans[:-1]\n"
    },
    {
        "number": 218,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return ''\n"
    },
    {
        "number": 218,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n    pass\n"
    },
    {
        "number": 218,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    n, p, q = stdin.split('\\n')\n    n, p, q = int(n), int(p), int(q)\n    s = stdin.split('\\n')[1]\n    k = n - p + 1\n    ans = ''\n    for i in range(0, k):\n        if i == 0:\n            if n - p < q:\n                return '-1'\n            ans += s[0:p]\n            s = s[p:]\n        else:\n            ans += s[0:p + i * q]\n            s = s[p + i * q:]\n    ans += s\n    return ans\n"
    },
    {
        "number": 218,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(x) for x in stdin.split()]\n    print(-1 if c < a or c < b else ceil(c / min(a, b)))\n    return ''\n    \n    \n"
    },
    {
        "number": 218,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, p, q = list(map(int, stdin.split()))\n    s = stdin\n    if p > n or q > n:\n        return '-1'\n    if n == 0 or n == 1:\n        return str(n)\n    if p == 1 or q == 1:\n        return s\n    k = 0\n    for i in range(n):\n        sub_s = s[:p]\n        if sub_s == sub_s[::-1]:\n            k += 1\n        s = s[p:]\n        sub_s = s[:q]\n        if sub_s == sub_s[::-1]:\n            k += 1\n        s = s[q:]\n    return str(k)\n"
    },
    {
        "number": 219,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s, d = map(int, stdin.split(' '))\n    obstacles = list(map(int, stdin.split('\\n')[0].split(' ')[1:]))\n    print(n, m, s, d)\n    print(obstacles)\n\nsolution(stdin)\n"
    },
    {
        "number": 219,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s, d = [int(n) for n in stdin.split(' ')]\n    obstacles = [int(n) for n in stdin.split(' ')]\n    print(obstacles)\n    return \"IMPOSSIBLE\"\n\n\nprint(solution(\"3 10 1 3\"))\n"
    },
    {
        "number": 219,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"[summary]\n    Your solution goes here. Feel free to use as many code cells as needed.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 219,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s, d = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    x, y = 0, 0\n    while True:\n        if x + s <= m - 1:\n            x += s\n            y += 1\n        elif x + s > m:\n            break\n        elif x + s < m:\n            x += s\n            y += 1\n        if y > d:\n            break\n    if y <= d:\n        return \"IMPOSSIBLE\"\n    else:\n        result = []\n        while True:\n            if x + s > m:\n                break\n            if x + s < m:\n                x += s\n                y += 1\n                if y > d:\n                    break\n            result.append(f\"RUN {s}\")\n        while True:\n            if y > d:\n                break\n            result.append(f\"JUMP {y}\")\n            y += 1\n        return \" \".join(result)\n"
    },
    {
        "number": 219,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return 'IMPOSSIBLE'\n"
    },
    {
        "number": 219,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    N, M, S, D = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    def check(x, y):\n        s = 0\n        d = 0\n        while s < N and d < D and x + s < M and y + d < D and A[x + s] < A[y + d]:\n            s += 1\n            d += 1\n        if s < S or d < D:\n            return 'IMPOSSIBLE'\n        return 'RUN {}\\nJUMP {}'.format(s - S, d - D)\n    print(check(0, 0))\n"
    },
    {
        "number": 219,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n   ...\n   ...\n    return \"\"\n"
    },
    {
        "number": 219,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    (n, m, s, d) = [int(i) for i in stdin.split()]\n    (x, y) = [int(i) for i in stdin.split()]\n    x -= 1\n    y -= 1\n    obstacles = [int(i) for i in stdin.split()]\n\n    distances = []\n\n    for i in range(n):\n        if i!= x and obstacles[i] > obstacles[x]:\n            distances.append(obstacles[i] - obstacles[x])\n        else:\n            distances.append(10 ** 9)\n\n    # print(distances)\n\n    def solve(left, right):\n        if left + s < right:\n            return \"IMPOSSIBLE\"\n        if left + s == right:\n            return \"RUN \" + str(left + s)\n        if left + s >= right:\n            return \"RUN \" + str(right)\n\n        jump = 10 ** 9\n        for distance in distances:\n            if distance < jump and distance > 0:\n                jump = distance\n\n        # print(jump)\n\n        if jump < d:\n            return \"IMPOSSIBLE\"\n        if jump >= d:\n            return \"JUMP \" + str(jump)\n\n    if x + s >= m:\n        return \"IMPOSSIBLE\"\n    return solve(x + s, y)\n"
    },
    {
        "number": 219,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # n, m, s, d = map(int, stdin.split())\n    # obs = list(map(int, stdin.split()))\n    n, m, s, d = 3, 10, 1, 3\n    obs = [3, 4, 7]\n\n    current_pos = 0\n    obstacles = set()\n    for i in range(n):\n        obstacles.add(obs[i])\n    # print(obstacles)\n    positions = {}\n    positions[0] = (0, None)\n    for i in range(1, m):\n        if i in obstacles:\n            continue\n        positions[i] = (i, None)\n\n    jump_queue = []\n\n    def get_next_jump_position(current_pos, d, s, jump_queue):\n        if s > d:\n            return None\n        if current_pos in obstacles:\n            return None\n        if current_pos == m:\n            return None\n        if current_pos + s + d >= m:\n            return None\n        if current_pos + s >= m:\n            return None\n        jump_queue.append((current_pos + s + d, current_pos + s, 1))\n        jump_queue.append((current_pos + s, current_pos + s, 0))\n        return (current_pos + s, current_pos + s + d, 0)\n\n    def get_next_run_position(current_pos, d, jump_queue):\n        if current_pos + d >= m:\n            return None\n        jump_queue.append((current_pos + d, current_pos + d, 1))\n        jump_queue.append((current_pos + d, current_pos + d, 0))\n        return (current_pos + d, current_pos + d, 0)\n\n    while current_pos < m:\n        if current_pos + s + d < m:\n            next_pos = get_next_run_position(current_pos, d, jump_queue)\n            if next_pos is None:\n                return \"IMPOSSIBLE\"\n            current_pos = next_pos[1]\n            # print(current_pos)\n            continue\n        next_pos = get_next_jump_position(current_pos, d, s, jump_queue)\n        if next_pos is None:\n            return \"IMPOSSIBLE\"\n        # print(next_pos)\n        current_pos = next_pos[1]\n    return \"\\n\".join([f\"JUMP {jump_queue[i][2]}\" for i in range(len(jump_queue))])\n"
    },
    {
        "number": 219,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    n, m, s, d = int(stdin[0]), int(stdin[1]), int(stdin[2]), int(stdin[3])\n    obstacles = stdin[4:]\n    obstacles = list(map(int, obstacles))\n    obstacles.sort()\n    print(obstacles)\n    if s > m - 1 or d > m - 1:\n        print(\"IMPOSSIBLE\")\n        return\n    while n > 0:\n        if obstacles[n - 1] + 1 == obstacles[n]:\n            n -= 1\n        elif obstacles[n - 1] + 1 > obstacles[n]:\n            print(\"IMPOSSIBLE\")\n            return\n        else:\n            obstacles[n - 1] = obstacles[n]\n            n -= 1\n    print(obstacles)\n    obstacles.append(m)\n    obstacles.sort()\n    print(obstacles)\n    print(obstacles)\n    if obstacles[0] < s or obstacles[-1] < s:\n        print(\"IMPOSSIBLE\")\n        return\n    for i in range(len(obstacles)):\n        if obstacles[i] == m:\n            continue\n        if obstacles[i] + s <= m and obstacles[i] + d > m:\n            print(\"IMPOSSIBLE\")\n            return\n        print(\"RUN \" + str(s))\n        print(\"JUMP \" + str(d))\n    return\n\nsolution(input())\n"
    },
    {
        "number": 220,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split('\\n')[0].split(' '))\n    return str(bin(a ^ b).count('1'))\n\ndef"
    },
    {
        "number": 220,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split(\" \")]\n    xor = a ^ b\n    s = a + b\n    return f\"{len([x for x in range(1, s) if x & xor == x])}\""
    },
    {
        "number": 220,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split('\\n')[0].split())\n    return str(bin(a ^ b).count('1'))\n\ndef"
    },
    {
        "number": 220,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport sys\n\ndef"
    },
    {
        "number": 220,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s, x = map(int, stdin.split())\n    return str(bin(s ^ x).count(\"1\"))\n\nimport sys\n\nprint(solution(sys.stdin.read()))"
    },
    {
        "number": 220,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(ans)\n"
    },
    {
        "number": 220,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s, x = map(int, stdin.split())\n    return f'{s - x + 1}\\n{s - x + 2}'\n"
    },
    {
        "number": 220,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s, x = map(int, stdin.split(' '))\n    result = (1 << s) - 1\n    return str(result ^ x)\n"
    },
    {
        "number": 220,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s, x = [int(i) for i in stdin.split(' ')]\n    if s & 1 == 0:\n        return str(s - x)\n    else:\n        return str(s - x + 1)\n"
    },
    {
        "number": 220,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(i) for i in stdin.split()]\n    if a == b:\n        return str(int(a ** 2))\n    if (a + b) % 2!= 0:\n        return str(0)\n    return str(2 * (a + b) // 2)\n"
    },
    {
        "number": 221,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Find the minimum number of operations needed to turn over all skewers.\n\n    The problem statement is written in a way that it seems to be impossible to count the minimum number of operations.\n    '''\n    _, k = map(int, stdin.split())\n    return '\\n'.join(map(str, range(k, n + 1, k)))\n"
    },
    {
        "number": 221,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    result = n\n    for i in range(k):\n        result = min(result, n - i - 1)\n    return str(result)\n"
    },
    {
        "number": 221,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    arr = list(range(1, n + 1))\n    turns = k\n    total_turns = 0\n    turns_index = 0\n    while len(arr) > 1:\n        turns_index = (turns_index + k) % len(arr)\n        turns += 1\n        arr.pop(turns_index)\n        total_turns += 1\n    return f\"{total_turns}\\n{arr}\"\n"
    },
    {
        "number": 221,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"7 2\\n2 1 6\\n\")\n    '2\\n1 6'\n    >>> solution(\"5 1\\n1 4\\n\")\n    '2\\n1 4'\n    \"\"\"\n    n, k = map(int, stdin.split())\n    skews = [i for i in range(1, n + 1) if i % (2 * k) == 0 or i % (2 * k) == 1]\n    moves = 0\n    for i, j in zip(skews[:k], skews[k:]):\n        moves += min(abs(i - j), n - abs(i - j))\n    print(moves)\n    print(*skews)\n"
    },
    {
        "number": 221,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split()]\n    lst = sorted(range(1, n + 1), key=lambda x: abs(x - k))\n    return''.join(map(str, lst))\n\"\"\"\n\ndef"
    },
    {
        "number": 221,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('''7 2\n   ... ''')\n    '2'\n    >>> solution('''5 1\n   ... ''')\n    '2'\n    '''\n    :param stdin:\n    :return:\n    '''\n    #... write your code here...\n    n, k = list(map(int, stdin.split()))\n    d = defaultdict(set)\n    for i in range(1, n+1):\n        d[i].add(i)\n        for j in range(k):\n            d[i] |= {i - j, i + j}\n    d[n].add(n)\n    print(len(d[n]))\n    print(' '.join(map(str, sorted(d[n]))))\n"
    },
    {
        "number": 221,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''"
    },
    {
        "number": 221,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    skewers = sorted([(i, i + k - 1) for i in range(1, n + 1)], key=lambda x: x[1], reverse=True)\n    l = n\n    for s, e in skewers:\n        if s > l:\n            break\n        l = min(l, e)\n    print(l)\n    print(*[i for i, _ in skewers[:l]])\n    return ''"
    },
    {
        "number": 221,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 221,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(\" \")]\n    result = 0\n    for i in range(1, n + 1):\n        if i < k:\n            result += i\n        elif i + k <= n:\n            result += i + k - 1\n    print(result)\n    for i in range(1, n + 1):\n        if result - i == 0:\n            print(i, end=\" \")\n\nprint(solution(input()))\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    return ''\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"0\"\n    elif n < 0:\n        return \"-\"\n    else:\n        count = 0\n        while n!= 1:\n            if n % 2 == 0:\n                n //= 2\n            else:\n                n = n * 3 + 1\n            count += 1\n        return str(count)\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return minimum number of operations to make a square of a positive integer\"\"\"\n    n = int(stdin)\n\n    if n < 10 or n % 10 == 0:\n        return \"0\"\n    for i in range(n // 10):\n        if n % (10 ** i) == 0:\n            n //= 10 ** i\n            break\n    \n    return str(n ** 2)\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\n\n\ndef"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    n = list(n)\n    n.reverse()\n    n = int(\"\".join(n))\n    if n < 10:\n        return -1\n    if n == int(n ** 0.5) ** 2:\n        return 0\n    if n % int(n ** 0.5) == 0:\n        return int(n ** 0.5) - 1\n    return -1\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    # The following line is used to prevent the use of the `is_square` function,\n    # since it could be too complex for this problem.\n    # If the time limit is exceeded, you may use the `is_square` function\n    if n < 10:\n        return 0\n\n    while n > 10:\n        if n % 10 == 0:\n            n /= 10\n        elif n % 10 == 9:\n            n = n - 9\n        elif n % 10 == 8:\n            n = n - 8\n        elif n % 10 == 7:\n            n = n - 7\n        elif n % 10 == 6:\n            n = n - 6\n        elif n % 10 == 5:\n            n = n - 5\n        elif n % 10 == 4:\n            n = n - 4\n        else:\n            n = n - 3\n    return n\n\n\ndef"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return a string representation of the minimum number of operations required to make a number equal to the square of some positive integer.\"\"\"\n    n = int(stdin)\n    if n < 1 or n > pow(10, 9):\n        return -1\n    \n    i = 0\n    while n % (10 ** i)!= 0:\n        i += 1\n    \n    return i - 1\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    s = str(int(n) ** 0.5)\n    if int(n) ** 0.5 == int(s):\n        return s\n    else:\n        return '-1'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 222,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    try:\n        n = int(n)\n    except ValueError:\n        return \"error\"\n\n    if n < 0:\n        return \"error\"\n    else:\n        sq_ = math.sqrt(n)\n        if int(sq_) ** 2 == n:\n            return \"0\"\n        else:\n            return \"impossible\"\n\n\ndef"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the solution to the exercise.\n    '''\n    # TODO: complete the implementation of this function\n    return '0'\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    count = 0\n    for i in range(1, n + 1):\n        curr = 1\n        for j in range(1, i + 1):\n            curr *= j\n        count += curr\n\n    return str(count % (10 ** 9 + 7))\n\n\"\"\""
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Compute and return solution for given input.\n\n    :param stdin: input.\n    :type stdin: str.\n    :return: solution for given input.\n    :rtype: str.\n    \"\"\"\n    return\n"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"The solution to the problem\n    \"\"\"\n    return \"\""
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # n = int(stdin.readline())\n    n=int(input())\n    mod = 10 ** 9 + 7\n    s = '1'\n    l = list(map(int, s.split()))\n    l = sorted(l)\n    while len(l) < n:\n        l.append(1)\n    for i in range(2, n + 1):\n        m = 1\n        for j in range(i, 0, -1):\n            m *= l[j - 1]\n            m %= mod\n        l.append(m)\n    print(l)\n    r = 0\n    for i in range(1, n + 1):\n        r += l[n - i] * (n - i + 1)\n        r %= mod\n    print(r)\n\n    return r"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 2:\n        return '0'\n    num_of_composite = 0\n    num_of_perm = 0\n    for i in range(1, n + 1):\n        if i == 1:\n            num_of_composite += 1\n            num_of_perm += 1\n            continue\n        num_of_composite += n // i * i\n        num_of_perm += n // i\n    num_of_composite %= 10 ** 9 + 7\n    return str(num_of_perm % 10 ** 9 + num_of_composite)"
    },
    {
        "number": 223,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # stdin = stdin.split('\\n')\n    # n = int(stdin[0])\n    n = int(input())\n    dp = [0] * (n + 1)\n    dp[1] = 1\n    max_val = 1\n    for i in range(2, n + 1):\n        max_val = dp[i - 1]\n        for j in range(1, i):\n            if i % j == 0:\n                dp[i] += dp[j]\n        dp[i] %= 10**9 + 7\n        if dp[i] > max_val:\n            max_val = dp[i]\n    print(max_val)\n    return\n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(len(stdin)):\n        if stdin[i] not in ['A','E','I','O','U','Y']:\n            return len(stdin) - i\n    return 1\n\nprint(solution(stdin))\n    \n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Return the minimum jump ability (in the number of characters) of the Grasshopper (in the number of vowels) that is needed to overcome the given string, jumping only on vowels.\n\n    Parameters\n    ----------\n    stdin : str\n        non-empty string consisting of capital English letters. It is guaranteed that the length of the string does not exceed 100.\n\n    Returns\n    -------\n    str\n        single integer a\u00a0\u2014 the minimum jump ability (in the number of characters) of the Grasshopper (in the number of vowels) that is needed to overcome the given string, jumping only on vowels.\n\n    Examples\n    --------\n    >>> solution(\"ABABBBACFEYUKOTT\")\n    4\n    >>> solution(\"AAA\")\n    1\n    '''\n\n    vowels = ['A', 'E', 'I', 'O', 'U', 'Y']\n    answer = 0\n    for i in range(len(stdin) - 1):\n        if stdin[i] in vowels:\n            answer += 1\n    return answer\n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    return stdin"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return 0"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin[::-1].find(' ') + 1\n    \n    \"\"\"\n    return len(stdin) - stdin.rfind(' ') - 1\n    \"\"\""
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    vowels = ['A', 'E', 'I', 'O', 'U', 'Y']\n    max_jumps = 0\n    for i in range(len(stdin)):\n        if stdin[i] in vowels:\n            max_jumps += 1\n        else:\n            max_jumps += 2\n    return max_jumps\n\nprint(solution(input()))\n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin.replace(\" \", \"\")"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    ans = 0\n    string = stdin\n    for char in string:\n        if char in ['A', 'E', 'I', 'O', 'U', 'Y']:\n            ans += 1\n    return ans\n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the minimum jump ability of the Grasshopper that is needed to overcome the given string, jumping only on vowels.\"\"\"\n    return len([1 for i in stdin if i in \"AEIOUY\"])\n"
    },
    {
        "number": 224,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return 0"
    },
    {
        "number": 225,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return \"YES\" if... else \"NO\"\n\"\"\"\n\nimport unittest\n\n\ndef"
    },
    {
        "number": 225,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    return 'YES' if len(set(a)) == 1 or a[0] * a[1] == a[2] * a[3] else 'NO'\n\n\ndef"
    },
    {
        "number": 225,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return \"\"\n"
    },
    {
        "number": 225,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\nprint('YES' if len(set(map(lambda x: x[1], stdin.split('\\n')))) == 1 else 'NO')\n\nreturn 'YES' if len(set(map(lambda x: x[1], stdin.split('\\n')))) == 1 else 'NO'\n\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 225,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Task:\n    #       Given the number of candies, determine if it is possible to\n    #       distribute them between two friends so that they receive the same amount.\n    # Input:\n    #       The only line contains four integers a1, a2, a3 and a4 (1 <= a1, a2, a3, a4 <= 100) - the numbers of candies in each bag.\n    # Output:\n    #       If it is possible to distribute the candies to two friends so that they receive the same amount of candies, print YES.\n    #       Otherwise, print NO.\n    #       Each character in the answer must be either YES or NO.\n\n    # NOTE:\n    #       The numbers of candies in each bag is unique!\n\n    # The number of candies is odd,\n    # so it is possible to have only two sets.\n\n    # Two sets of two bags, sum is even.\n    # Otherwise, sum is odd.\n    #\n    # n = a1 + a2 + a3 + a4\n    # d = a1 - a2 + a3 - a4\n    #\n    # n / 2 = a1 + a2\n    # n / 2 = a1 + a3\n    # n / 2 = a1 + a4\n    # n / 2 = a2 + a3\n    # n / 2 = a2 + a4\n    # n / 2 = a3 + a4\n    #\n    # a1 / 2 + a2 / 2 = a1 + a2\n    # a1 / 2 + a3 / 2 = a1 + a3\n    # a1 / 2 + a4 / 2 = a1 + a4\n    # a2 / 2 + a3 / 2 = a2 + a3\n    # a2 / 2 + a4 / 2 = a2 + a4\n    # a3 / 2 + a4 / 2 = a3 + a4\n    #\n    # a1 / 2 + a2 / 2 = a1 - a2\n    # a1 / 2 + a3 / 2 = a1 - a3\n    # a1 / 2 + a4 / 2 = a1 - a4\n    # a2 / 2 + a3 / 2 = a2 - a3\n    # a2 / 2 + a4 / 2 = a2 - a4\n    # a3 / 2 + a4 / 2 = a3 - a4\n\n    # The number of candies is even,\n    # so it is possible to have only one set.\n    #\n    # n = a1 + a2 + a3 + a4\n    # d = a1 - a2 + a3 - a4\n    #\n    # n / 2 = a1 + a2\n    # n / 2 = a1 + a3\n    # n / 2 = a1 + a4\n    # n / 2 = a2 + a3\n    # n / 2 = a2 + a4\n    # n / 2 = a3 + a4\n    #\n    # a1 / 2 + a2 / 2 = a1 - a2\n    # a1 / 2 + a3 / 2 = a1 - a3\n    # a1 / 2 + a4 / 2 = a1 - a4\n    # a2 / 2 + a3 / 2 = a2 - a3\n    # a2 / 2 + a4 / 2 = a2 - a4\n    # a3 / 2 + a4 / 2 = a3 - a4\n\n    # The number of candies is odd,\n    # so it is possible to have one set and one bag.\n    #\n    # n = a1 + a2 + a3 + a4\n    # d = a1 - a2 + a3 - a4\n    #\n    # n / 2 = a1 + a2\n    # n / 2 = a1 + a3\n    # n / 2 = a1 + a4\n    # n / 2 = a2 + a3\n    # n / 2 = a2 + a4\n    # n / 2 = a3 + a4\n    #\n    # a1 / 2 + a2 / 2 = a1 - a2\n    # a1 / 2 + a3 / 2 = a1 - a3\n    # a1 / 2 + a4 / 2 = a1 - a4\n    # a2 / 2 + a3 / 2 = a2 - a3\n    # a2 / 2 + a4 / 2 = a2 - a4\n    # a3 / 2 + a4 / 2 = a3 - a4\n    #\n    # The number of candies is even,\n    # so it is possible to have one set.\n    #\n    # n = a1 + a2 + a3 + a4\n    # d = a1 - a2 + a3 - a4\n    #\n    # n / 2 = a1 + a2\n    # n / 2 = a1 + a3\n    # n / 2 = a1 + a4\n    # n / 2 = a2 + a3\n    # n / 2 = a2 + a4\n    # n / 2 = a3 + a4\n    #\n    # a1 / 2 + a2 / 2 = a1 - a2\n    # a1 / 2 + a3 / 2 = a1 - a3\n    # a1 / 2 + a4 / 2 = a1 - a4\n    # a2 / 2 + a3 / 2 = a2 - a3\n    # a2 / 2 + a4 / 2 = a2 - a4\n    # a3 / 2 + a4 / 2 = a3 - a4\n\n    # The number of candies is odd,\n    # so it is impossible to have one set.\n    #\n    # n = a1 + a2 + a3 + a4\n    # d = a1 - a2 + a3 - a4\n    #\n    # n / 2 = a1 + a2\n    # n / 2 = a1 + a3\n    # n / 2 = a1 + a4\n    # n / 2 = a2 + a3\n    # n / 2 = a2 + a4\n    # n / 2 = a3 + a4\n    #\n    # a1 / 2 + a2 / 2 = a1 - a2\n    # a1 / 2 + a3 / 2 = a1 - a3\n    # a1 / 2 + a4 / 2 = a1 - a4\n    # a2 / 2 + a3 / 2 = a2 - a3\n    # a2 / 2 + a4 / 2 = a2 - a4\n    # a3 / 2 + a4 / 2 = a3 - a4\n\n    # n / 2 = d\n    # d = n / 2\n    # d = n / 2 / 2\n    # d = n / 2 / 2 / 2\n    # d = n / 2 / 2 / 2 / 2\n    # d = n / 2 / 2 / 2 / 2 / 2\n    # d = n / 2 / 2 / 2 / 2 / 2 / 2\n    # d = n / 2 / 2 / 2 / 2 / 2 / 2 / 2\n    # d = n / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2\n    # d = n / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2\n    # d = n / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2 / 2\n\n    # d = n / 2 = a1"
    },
    {
        "number": 225,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(n) for n in stdin.split(' ')]\n    if abs(a - b) == abs(a - c) == abs(a - d) or abs(b - c) == abs(b - d) == abs(c - d):\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 225,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a1, a2, a3, a4 = map(int, stdin.split())\n    if a1 == a2 == a3 == a4:\n        return \"YES\"\n    if a1 == a2 or a1 == a3 or a1 == a4 or a2 == a3 or a2 == a4 or a3 == a4:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n\ndef"
    },
    {
        "number": 225,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport collections\n\n\ndef"
    },
    {
        "number": 225,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split(\" \")))\n    if sum(a) % 2 == 0:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 225,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\nimport sys\nimport os\n\ndef"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = [int(x) for x in stdin.readline().strip().split(' ')]\n    x1, x2 = 0, 0\n    for i in range(n):\n        x1 += x2\n        x2 = max(arr)\n        arr.remove(max(arr))\n    return str(x1) +'' + str(x2)\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, *sizes = map(int, stdin.split('\\n')[:-1])\n    alice = bob = 0\n\n    decider = 1\n    for i in range(n):\n        if sizes[i] % 2 == 0:\n            alice += sizes[i]\n            decider = 1\n        else:\n            bob += sizes[i]\n            decider = 0\n    return str(alice) +'' + str(bob)\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\n------------Code------------\n\n=======CodeCase01=========\nfrom typing import Dict, List, Tuple, Set\n\ndef"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Input:\n    - stdin, an array of numbers\n\n    Output:\n    - the sum of the numbers in the array\n    \"\"\"\n    return str(sum(int(n) for n in stdin.split('\\n')[0].split()))\n\nprint(solution(input()))\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    nums = list(map(int, stdin.split()))\n    d = nums.index(max(nums))\n    nums[d] = 0\n    s = nums.index(max(nums))\n    return str(sum(nums)) +'' + str(nums[s])"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    slices = sorted(list(map(int, stdin.split(' '))))\n    my_token = slices[0] // 2\n    rival_token = slices[-1] // 2\n    return str(sum(slices)) +'' + str(sum(slices) - my_token - rival_token)\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    lst = list(map(int, stdin.split()))\n    def sum(lst: list) -> int:\n        sum = 0\n        for i in lst:\n            sum += i\n        return sum\n    A = sum(lst[::2])\n    B = sum(lst[1::2])\n    print(A, B)\n    return\n"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Given a string of integers, return the sum of the sizes of the slices.\"\"\"\n\n    def make_score_grid(pie_sizes):\n        score_grid = [0] * len(pie_sizes)\n        if len(pie_sizes) == 1:\n            return [0, pie_sizes[0]]\n        elif len(pie_sizes) == 2:\n            score_grid[0] = pie_sizes[0]\n            score_grid[1] = max(pie_sizes[0], pie_sizes[1])\n            return score_grid\n        elif len(pie_sizes) == 3:\n            # Base case\n            score_grid[0] = pie_sizes[0]\n            score_grid[1] = max(pie_sizes[0], pie_sizes[1])\n            score_grid[2] = max(pie_sizes[0] + pie_sizes[2], pie_sizes[1] + pie_sizes[2])\n            return score_grid\n        else:\n            # Recursive step\n            # Return the max between the following cases:\n            # 1. Take the first slice and give it to Bob. The rest go to Alice.\n            # 2. Take the second slice and give it to Bob. The rest go to Alice.\n            # 3. Take the first slice and give it to Alice. The rest go to Bob.\n            # 4. Take the second slice and give it to Alice. The rest go to Bob.\n            score_grid[0] = pie_sizes[0]\n            score_grid[1] = max(pie_sizes[0], pie_sizes[1])\n            score_grid[2] = max(max(\n                score_grid[0] + pie_sizes[2],\n                score_grid[1] + pie_sizes[2]\n            ), max(\n                pie_sizes[0] + pie_sizes[3],\n                pie_sizes[1] + pie_sizes[3]\n            ))\n            score_grid[3] = max(pie_sizes[0] + pie_sizes[4], pie_sizes[1] + pie_sizes[4])\n            score_grid[4] = max(max(\n                score_grid[0] + pie_sizes[5],\n                score_grid[1] + pie_sizes[5]\n            ), max(\n                pie_sizes[0] + pie_sizes[6],\n                pie_sizes[1] + pie_sizes[6]\n            ))\n            return score_grid\n\n    total_sizes = [int(i) for i in stdin.split('\\n')[0].split()]\n    alice_sizes = total_sizes[:len(total_sizes)//2]\n    bob_sizes = total_sizes[len(total_sizes)//2:]\n    alice_score_grid = make_score_grid(alice_sizes)\n    bob_score_grid = make_score_grid(bob_sizes)\n    alice_total = sum(alice_score_grid)\n    bob_total = sum(bob_score_grid)\n    return str(alice_total) +'' + str(bob_total)\n\n\ndef"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    alice = [arr[0]]\n    bob = [arr[0]]\n    alice_decider = False\n    bob_decider = False\n    for i in range(1,n):\n        if alice_decider == False and bob_decider == False:\n            if arr[i] >= alice[-1]:\n                alice_decider = True\n                alice.append(arr[i])\n            else:\n                bob_decider = True\n                bob.append(arr[i])\n        elif alice_decider == True and bob_decider == False:\n            alice.append(arr[i])\n        else:\n            bob.append(arr[i])\n    sum_a = sum(alice)\n    sum_b = sum(bob)\n    return str(sum_a) + \" \" + str(sum_b)"
    },
    {
        "number": 226,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"The solution for this problem\"\"\"\n\n    pass\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, sequence = stdin.split()\n    n = int(n)\n    sequence = list(map(int, sequence.split(' ')))\n    sequence.sort()\n    m = 0\n    for i in range(n):\n        if sequence[i] == i + 1:\n            m += 1\n    if m == 0:\n        return -1\n    else:\n        return m\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find the minimum number of variables m, such that those variables can help you\n    perform the described sequence of operations.\n\n    Args:\n        stdin(str): Input String\n\n    Returns:\n        str: Output String\n    \"\"\"\n    # Solution\n    # Time Complexity: O(n^2)\n    # Space Complexity: O(n)\n\n    n = int(stdin)\n    sequence = [int(x) for x in stdin.split()]\n\n    if n < 3:\n        return -1\n\n    result = -1\n    for i in range(2, n):\n        result = max(result, i)\n        for j in range(i):\n            for k in range(i - j):\n                if j + k == j:\n                    if sequence[k + j] + sequence[j] == sequence[k] * 2:\n                        result = min(result, j + 1)\n                        break\n\n    return result\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def sequence(a: list, m: int) -> str:\n        sequence = []\n        for i in range(len(a)):\n            if i == 0:\n                sequence.append(a[0])\n            else:\n                sequence.append(a[i] + sequence[i - 1])\n        if m == 1:\n            return str(m)\n        if m == len(a):\n            return str(m)\n        else:\n            return '-1'\n    m, *a = [int(x) for x in stdin.split()]\n    print(sequence(a, m))"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    pass\n    return \"\"\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    sequence = [int(x) for x in stdin.split(' ')]\n    \n    a = [0] + sequence\n    b = [0] * (n+1)\n    \n    m = 1\n    while (True):\n        m += 1\n        for i in range(n, 0, -1):\n            for j in range(0, i):\n                if (m >= i+j+2):\n                    b[i] = max(b[i], b[j] + a[i])\n        if b[1] <= a[n]:\n            break\n    \n    if m < n:\n        return -1\n    else:\n        return m\n\nprint(solution(stdin))\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split(' ')]\n    m = 0\n    while n:\n        m += 1\n        for i in range(1, m):\n            for j in range(i+1, m):\n                if a[i] + a[j] == a[m]:\n                    n -= 1\n                    a[i] = a[j] = 0\n                    break\n    print(m) if n == 0 else print(-1)\n\nsolution(\"6\\n2 4 8 6 10 18\\n\")\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    n = int(stdin.readline())\n    numbers = sorted(map(int, stdin.readline().split(' ')))\n    dp = [[0] * (n + 1) for _ in range(n)]\n    for i in range(n):\n        dp[i][i + 1] = numbers[i]\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            dp[i][j] = min(dp[i][j], dp[i][k] + dp[k + 1][j] + numbers[i] * numbers[j] * numbers[k] for k in range(i, j))\n    return dp[0][-1]\n"
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5\\n1 2 3 6 8\")\n    2\n    >>> solution(\"3\\n3 6 5\")\n    -1\n    >>> solution(\"6\\n2 4 8 6 10 18\")\n    3\n    \"\"\"\n   ..."
    },
    {
        "number": 227,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    pass\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    piles = [int(i) for i in stdin[1].split()]\n\n    a = n // 2\n    b = n // 2\n    piles.sort(reverse=True)\n    while piles[a:]!= piles[:a]:\n        if piles[a] > piles[b]:\n            a = a + 1\n        else:\n            b = b + 1\n\n    if a > b:\n        return 'Alice'\n    else:\n        return 'Bob'\n\ndef"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, *stones = [int(i) for i in stdin.split()]\n    return 'Alice' if n % 2 == 0 and sum(stones[n // 2 :]) < sum(stones[:n // 2]) else 'Bob'"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = list(map(int, stdin.readline().strip().split(' ')))\n\n    if n % 2 == 0:\n        return 'Alice' if sum(arr) % 2 == 0 else 'Bob'\n\n    return 'Alice' if sum(arr) % 2 else 'Bob'\n\n\ndef"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  n, stones = [int(x) for x in stdin.split()]\n  if n < 2:\n    return 'Alice'\n  if n % 2 == 0:\n    if stones % 2 == 0:\n      return 'Alice'\n    return 'Bob'\n  if stones % 2 == 0:\n    return 'Bob'\n  return 'Alice'\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    num_piles, num_stones = map(int, stdin.split())\n    stones = list(map(int, stdin.split()))\n    alice = 0\n    bob = 0\n    while len(stones) > 0:\n        stone = stones.pop(0)\n        stone = stone - 1\n        if stone > 0:\n            if stone % 2 == 0:\n                alice += 1\n            else:\n                bob += 1\n    return \"Alice\" if alice > bob else \"Bob\"\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    alice = 0\n    bob = 0\n    for i in range(0, n, 2):\n        if n % 2 == 0 and i <= n//2 and i!= n//2:\n            alice = alice + 1\n        else:\n            bob = bob + 1\n    return \"Alice\" if alice > bob else \"Bob\"\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''8\n   ... 8\n   ... ''')\n    'Bob'\n    >>> solution('''4\n   ... 3 1 4 1\n   ... ''')\n    'Alice'\n    >>> solution('''4\n   ... 5 3 3 3\n   ... ''')\n    'Bob'\n    \"\"\"\n    n = int(stdin.split()[0])\n    a = [int(i) for i in stdin.split()[1:]]\n    alice = 0\n    bob = 0\n    while n:\n        if n % 2:\n            if n % 2:\n                alice += n // 2\n                n -= n // 2\n            else:\n                alice += 1\n        else:\n            if alice < n // 2:\n                alice += n // 2\n                n -= n // 2\n            else:\n                bob += 1\n    return 'Alice' if alice > bob else 'Bob'\n"
    },
    {
        "number": 228,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(str(8))\n    'Alice'\n    >>> solution(str(4))\n    'Bob'\n    \"\"\"\n    from math import floor\n\n    n = int(stdin.split()[0])\n    stones = [int(x) for x in stdin.split()[1:]]\n\n    if floor(n / 2) == n / 2:\n        return \"Alice\"\n    else:\n        return \"Bob\"\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    line_1 = stdin.split(\"\\n\")[0]\n    array_1 = stdin.split(\"\\n\")[1]\n    array_1 = list(map(int, array_1.split()))\n    #n = int(line_1)\n    max_number = max(array_1)\n    min_number = min(array_1)\n    if max_number == min_number:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"\""
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    x = a[-1] - a[0]\n    \n    for i in range(n - 1):\n        if a[i + 1] - a[i]!= x:\n            return 'NO'\n    \n    return 'YES'\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return 'YES'"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin)\n    a = [int(x) for x in stdin.split('\\n')[1].split()]\n    first = min(a)\n    last = max(a)\n    if n == 1:\n        return 'YES'\n    for x in range(first, last):\n        tmp = [i for i in a]\n        if tmp[0] + x > tmp[0]:\n            tmp[0] += x\n        if tmp[-1] - x < tmp[-1]:\n            tmp[-1] -= x\n        if tmp[1] + x > tmp[1]:\n            tmp[1] += x\n        if tmp[2] - x < tmp[2]:\n            tmp[2] -= x\n        if all(i == tmp[0] for i in tmp):\n            return 'YES'\n    return 'NO'\nprint(solution(input()))\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return 'NO' or 'YES'\n\"\"\"\n"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    #Your code here\n    #Get all input and convert it to a list of integers\n    strArray = stdin.split(\"\\n\")\n    intArray = list(map(int,strArray[1].split()))\n    sumArray = sum(intArray)\n    #Start working by checking first element\n    if sumArray % len(intArray)!= 0:\n        return \"NO\"\n    #Keep dividing by the length of the array\n    for x in range(len(intArray)):\n        #If the sum of the array is 0, it means the array is already equal\n        if sumArray == 0:\n            return \"YES\"\n        else:\n            #Subtract the sum and check if the sum is 0, if it is, the array is already equal\n            sumArray -= intArray[x]\n            if sumArray == 0:\n                return \"YES\"\n            #Check the next element and if it doesnt work, return \"NO\"\n            intArray[x] += 1\n            if sumArray!= 0:\n                intArray[x] -= 1\n                continue\n            intArray[x] -= 1\n            if sumArray == 0:\n                return \"YES\"\n            intArray[x] += 1\n            if sumArray!= 0:\n                return \"NO\"\n    return \"NO\""
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nfrom collections import Counter\n\ndef"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('5\\n1 3 3 2 1')\n    'YES'\n    >>> solution('5\\n1 2 3 4 5')\n    'NO'\n    \"\"\"\n    n = int(stdin.readline())\n    numbers = list(map(int, stdin.readline().split()))\n    x = max(numbers)\n    if sum(numbers) - x * len(numbers) >= x:\n        return \"NO\"\n    else:\n        return \"YES\"\n\n\ndef"
    },
    {
        "number": 229,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if stdin == 'YES' else 'NO'\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    #Your code here\n    #return stdin\n\n\ndef"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\"\"\""
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    length = int(stdin)\n    s = stdin\n    ans = 0\n    for i in range(0, length-1):\n        for j in range(i+1, length):\n            if s[i] == s[j]:\n                if j-i>ans:\n                    ans = j-i\n                break\n    if ans == 0:\n        print(0)\n    else:\n        print(ans)\n    return ''"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    S = stdin\n    if n <= 0:\n        return 0\n    max_len = 0\n    # count all possible substring for each character\n    count = Counter(S)\n    # count the occurrence of each substring\n    for item in count.items():\n        # item[0] is substring, item[1] is occurrence\n        # check whether substring appears more than once\n        if item[1] >= 2:\n            max_len = max(max_len, len(item[0]))\n    return max_len"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    maxLen = 0\n    for i in range(0, n - 1):\n        for j in range(i + 1, n):\n            maxLen = max(maxLen, j - i)\n            if s[i:j] * 2 in s[j:]:\n                break\n    return str(maxLen)"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n    # set contains strings that are valid twice or more\n    # non_repeat_set is a set of strings that are valid twice or more\n    set = set()\n    non_repeat_set = set()\n\n    # Set the parameter N and the string S\n    N = int(stdin[0])\n    S = stdin[1:]\n\n    # Traverse the string S\n    for i in range(0, len(S)):\n        # Add to the set if the string is valid twice or more\n        if i + 1 < len(S):\n            if S[i] == S[i + 1]:\n                set.add(S[i])\n        if i + 2 < len(S):\n            if S[i] == S[i + 2]:\n                set.add(S[i])\n        if i + 3 < len(S):\n            if S[i] == S[i + 3]:\n                set.add(S[i])\n        if i + 4 < len(S):\n            if S[i] == S[i + 4]:\n                set.add(S[i])\n\n    # Traverse the string S\n    for i in range(0, len(S)):\n        # If the string is valid twice or more, add it to the non_repeat_set\n        if S[i] in set:\n            non_repeat_set.add(S[i])\n\n    # Traverse the set and find the string with the most characters\n    max_string = \"\"\n    for s in set:\n        if len(s) > len(max_string):\n            max_string = s\n\n    # Traverse the non_repeat_set and find the string with the most characters\n    max_string_2 = \"\"\n    for s in non_repeat_set:\n        if len(s) > len(max_string_2):\n            max_string_2 = s\n\n    # Print the length of the longest string\n    print(len(max_string))\n\n    # If no string is found, print 0\n    if len(max_string_2) == 0:\n        print(0)"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds the maximum length of a non-empty string that occurs twice or more in S as contiguous substrings without overlapping.\n    >>> solution('5\\nababa')\n    2\n    \"\"\"\n    pass\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 230,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 231,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split(' '))\n    if n % 2 == 0:\n        print(n // 2 - 1)\n    else:\n        print(n // 2)\n    return ''"
    },
    {
        "number": 231,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a = [int(x) for x in stdin.split()]\n    if n == 1:\n        return 0\n    return abs(a - n // 2)\n\n\ndef"
    },
    {
        "number": 231,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a = [int(x) for x in stdin.split(' ')]\n    s = '1'*n\n    print((a-1)*2+int(s[:a-1]))\n"
    },
    {
        "number": 231,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 231,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, a = (int(x) for x in stdin.split(' '))\n    return str(min(abs(a - n), n - abs(a - n)))\n\n\ndef"
    },
    {
        "number": 231,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    #Your code here\n    # return \"\"\n\ndef"
    },
    {
        "number": 231,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n, a = [int(i) for i in stdin.split()]\n    return n - a + 1"
    },
    {
        "number": 231,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n"
    },
    {
        "number": 231,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    houses = int(stdin.split(\" \")[0])\n    target = int(stdin.split(\" \")[1])\n    pairs = (houses + 1) // 2\n    return (target - pairs) * 2 + (1 if target < pairs else 0)\n    \n"
    },
    {
        "number": 231,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\n\u0412 \u0442\u0435\u043e\u0440\u0438\u0438 \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u0434\u0431\u0438\u0440\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e \u0441\u0443\u043c\u043c\u0443 \u0434\u043b\u0438\u043d \u043e\u0431\u043e\u0438\u0445 \u0447\u0435\u0440\u0435\u043f\u0430\u0448\u0435\u043a \u0438 \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0442\u044c \u0432\u0440\u0435\u043c\u044f. \u041f\u0440\u0438 \u043f\u0435\u0440\u0432\u043e\u043c \u043f\u043e\u0445\u043e\u0436\u0435 \u043d\u0430 \u043d\u0435\u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u043f\u0440\u043e\u0435\u043a\u0442 \u0442\u0430\u043a\u043e\u0435 \u0443\u0441\u043b\u043e\u0432\u0438\u0435 \u043d\u0435 \u043e\u0441\u043e\u0431\u043e \u0437\u0430\u043c\u0435\u0442\u043d\u043e, \u043d\u043e \u0442\u0430\u043a \u043a\u0430\u043a \u043d\u0430 \u043e\u0434\u043d\u043e\u0439 \u0438 \u0442\u043e\u0439 \u0436\u0435 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u043e\u0431\u043e\u0438\u0445 \u0447\u0435\u0440\u0435\u043f\u0430\u0448\u0435\u043a \u043d\u0430\u0445\u043e\u0434\u044f\u0442\u0441\u044f \u0434\u043e\u043c\u044b \u043f\u043e \u043e\u0431\u0435 \u0441\u0442\u043e\u0440\u043e\u043d\u044b \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 \u0438 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 \u043a\u043e \u0434\u0432\u0443\u043c, \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u0435\u0434\u043f\u043e\u043b\u043e\u0436\u0438\u0442\u044c \u0447\u0442\u043e \u043f\u0440\u0438 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0435 \u0431\u0443\u0434\u0435\u0442 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0443\u0436\u0435 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0434\u043e\u043c\u0430.\n\u0421\u043f\u0438\u0441\u043e\u043a \u0434\u043e\u043c\u043e\u0432 \u0434\u043b\u0438\u043d\u044b k \u0443\u0436\u0435 \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d \u043f\u043e \u043f\u0440\u0430\u0432\u0438\u043b\u0430\u043c \u0432\u0441\u0442\u0430\u0432\u043a\u0438 \u0438 \u0432\u044b\u0447\u0438\u0442\u0430\u043d\u0438\u044f. \u0422\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c \u0432 \u043f\u0435\u0440\u0432\u0443\u044e \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u0431\u0443\u0434\u0443\u0442 \u0432\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u044b \u0434\u043e\u043c\u0430 \u0434\u043b\u0438\u043d\u043e\u0439 \u0431\u043e\u043b\u044c\u0448\u0435\u0439 \u0434\u043b\u0438\u043d\u044b, \u0430 \u0437\u0430\u0442\u0435\u043c \u0434\u043e\u043c\u0430 \u0434\u043b\u0438\u043d\u044b \u043c\u0435\u043d\u044c\u0448\u0435\u0439 \u0434\u043b\u0438\u043d\u044b, \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0432 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0443 \u043f\u043e \u0432\u0440\u0435\u043c\u0435\u043d\u0438. \u0414\u043b\u044f \u0432\u0441\u0442\u0430\u0432\u043a\u0438 \u0432 \u043d\u0443\u0436\u043d\u0443\u044e \u043f\u043e\u0437\u0438\u0446\u0438\u044e \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435 \u0434\u043e\u043c\u043e\u0432 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u0432\u0441\u0442\u0430\u0432\u043a\u043e\u0439 \u0438\u043b\u0438 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u0441\u043b\u0438\u044f\u043d\u0438\u0435\u043c. \u041f\u0440\u043e\u0445\u043e\u0434\u0438\u043c \u043f\u043e \u0434\u043e\u043c\u0430\u043c \u0448\u0430\u0433\u043e\u043c \u0432 \u0440\u0430\u0437\u043c\u0435\u0440\u0435 k \u0432\u043f\u0440\u0430\u0432\u043e \u0438 \u0432\u043f\u0440\u0430\u0432\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u044f \u0435\u0441\u0442\u044c \u043b\u0438 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432\u0435 \u043e\u0441\u0442\u0430\u0432\u0448\u0438\u0435\u0441\u044f \u0434\u043e\u043c\u0430 \u0434\u043b\u0438\u043d\u044b k - 1. \u0415\u0441\u043b\u0438 \u0434\u043e\u043c\u0430 \u043d\u0435\u0442, \u0442\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u0432\u0441\u0442\u0430\u0432\u043a\u0443. \u0415\u0441\u043b\u0438 \u0434\u043e\u043c\u0430 \u0435\u0441\u0442\u044c, \u0442\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0437\u0430\u043d\u044f\u0442\u044b \u043b\u0438 \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0435 \u0434\u043e\u043c\u0430 \u043c\u0430\u0441\u0441\u0438\u0432\u0430, \u0435\u0441\u043b\u0438 \u043d\u0435\u0442, \u0442\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u0441\u043b\u0438\u044f\u043d\u0438\u0435, \u0438\u043d\u0430\u0447\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u043c \u0432\u0441\u0442\u0430\u0432\u043a\u0443. \u0421\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0432 \u044d\u0442\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 O(n*k*log(n)).\ndef"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    colors = [int(c) for c in stdin.split()[1:]]\n\n    def can_form_interval(interval):\n        total = 0\n        for i in range(m):\n            total += colors.count(i + 1)\n            if total > interval:\n                return False\n        return True\n    \n    l = 1\n    r = n + 1\n    while l < r:\n        mid = (l + r) // 2\n        if can_form_interval(mid):\n            r = mid\n        else:\n            l = mid + 1\n\n    if l == n + 1:\n        return \"NO\"\n    else:\n        return \"YES\"\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    counts = [int(c) for c in stdin.split()]\n    if n < sum(counts) or m < sum(counts):\n        return \"NO\"\n    if n == 1 and m == 1:\n        return \"YES\"\n    if n == m:\n        return \"YES\"\n    if n > m:\n        return \"NO\"\n    intervals = list(set(counts))\n    intervals.sort(reverse=True)\n    if len(intervals) == m:\n        return \"YES\"\n    intervals.insert(0, 0)\n    intervals.append(n + 1)\n    intervals.sort()\n    left = 0\n    right = 0\n    count = 0\n    for i in range(len(intervals) - 1):\n        if counts[i] == intervals[i + 1] - 1:\n            left = i + 1\n            break\n    for i in range(len(intervals) - 1, 0, -1):\n        if counts[i] == intervals[i - 1] - 1:\n            right = i\n            break\n    counts_i = counts.copy()\n    for i in range(left, right + 1):\n        counts_i[i] -= 1\n    for i in range(left, right + 1):\n        if counts_i[i] >= m:\n            count += 1\n    return \"YES\" if count == m else \"NO\"\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    j = list(map(int, stdin.split()))\n    k = list(map(int, stdin.split()))\n    ans = 'NO'\n    return ans\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split('\\n')[0].split()]\n    k = [int(x) for x in stdin.split('\\n')[1].split()]\n    print(k)\n    print(n, m, k)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if sum(k[:i]) == sum(k[i:j]) == sum(k[j:]):\n                return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    n_j, n_col = [int(i) for i in stdin.split('\\n')[0].split(' ')]\n    n_col_list = [int(i) for i in stdin.split('\\n')[1].split(' ')]\n    n_col_list.sort()\n    \n    # init output\n    output = ''\n    # check if condition exists\n    if n_j!= sum(n_col_list):\n        output = 'NO'\n    elif n_col!= n_col_list[0]:\n        output = 'NO'\n    else:\n        # init variables\n        interval = []\n        temp_interval = []\n        count = 0\n        count_interval = 0\n        \n        # start from first element\n        i = 0\n        # check if current and next are same\n        while i < len(n_col_list) - 1:\n            if n_col_list[i] == n_col_list[i+1]:\n                count_interval += 1\n                temp_interval.append(n_col_list[i])\n                i += 1\n            else:\n                if count_interval == n_j - 1:\n                    output = 'YES'\n                interval.append(temp_interval)\n                temp_interval = []\n                count_interval = 0\n            i += 1\n        # check if it's a last element\n        if count_interval == n_j - 1:\n            output = 'YES'\n    \n    # return output\n    return output\n"
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 5 2\n   ... 1 1 2 2 1\n   ... 1 2\n   ... ''')\n    'YES'\n    >>> solution('''\n   ... 5 2\n   ... 1 2 2 1 1\n   ... 1 2\n   ... ''')\n    'NO'\n    >>> solution('''\n   ... 5 2\n   ... 2 2 2 2 2\n   ... 1 2\n   ... ''')\n    'YES'\n    >>> solution('''\n   ... 5 2\n   ... 3 3 3 3 3\n   ... 1 2\n   ... ''')\n    'NO'\n    >>> solution('''\n   ... 5 2\n   ... 2 1 2 1 2\n   ... 1 2\n   ... ''')\n    'NO'\n    \"\"\"\n   ..."
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    colors = list(map(int, stdin.readline().split()))\n    counts = list(map(int, stdin.readline().split()))\n    print(counts)\n    counts_sorted = sorted(counts)\n    print(counts_sorted)\n    if counts == counts_sorted:\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 232,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split('\\n')[0].split())\n    lightsaber = list(map(int, stdin.split('\\n')[1].split()))\n    k_list = list(map(int, stdin.split('\\n')[2].split()))\n\n    lightsaber.sort()\n    k_list.sort()\n\n    if not n <= sum(k_list) <= len(lightsaber):\n        return 'NO'\n    \n    for i, (k_i, val) in enumerate(zip(k_list, lightsaber)):\n        if k_i!= val:\n            return 'NO'\n        if k_i > 1:\n            if i == 0 and i + k_i == n:\n                pass\n            elif i!= 0 and i + k_i == n:\n                return 'NO'\n            elif i!= 0 and i + k_i!= n:\n                return 'NO'\n        if k_i > 1:\n            if i == 0 and sum(k_list[1:]) == k_list[0]:\n                pass\n            elif i!= 0 and sum(k_list[1:]) == k_list[0]:\n                return 'NO'\n            elif i!= 0 and sum(k_list[1:])!= k_list[0]:\n                return 'NO'\n\n    return 'YES'\n\nprint(solution(input()))\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def dice_number(dice_list: list) -> int:\n        return sum(list(map(int, dice_list)))\n\n    def dice_values(dice_list: list) -> list:\n        dice_list = dice_list.split()\n        return list(map(int, dice_list))\n\n    stdin = stdin.splitlines()\n    rounds = int(stdin[0])\n    dice = []\n    for i in range(rounds):\n        dice.append(dice_values(stdin[i + 1]))\n    dice.sort(reverse=True)\n    print(dice)\n    return \"Mishka\"\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('3\\n5 2\\n1 6\\n4 2')\n    'Mishka'\n    >>> solution('3\\n6 1\\n3 6\\n2 2')\n    'Chris'\n    >>> solution('3\\n6 1\\n3 6\\n2 2')\n    'Friendship is magic!^^'\n    \"\"\"\n    number_of_rounds = int(stdin.readline())\n    history = [list(map(int, stdin.readline().split()))\n               for _ in range(number_of_rounds)]\n\n    mishka_count, chris_count = 0, 0\n    for index in range(number_of_rounds):\n        if history[index][0] > history[index][1]:\n            mishka_count += 1\n        elif history[index][0] < history[index][1]:\n            chris_count += 1\n        else:\n            mishka_count += 1\n            chris_count += 1\n\n    if mishka_count > chris_count:\n        return \"Mishka\"\n    elif mishka_count < chris_count:\n        return \"Chris\"\n    else:\n        return \"Friendship is magic!^^\"\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    l = list(map(lambda x: map(int, x.strip().split(' ')), stdin.split('\\n')))\n    count = 0\n    for m, c in l:\n        if m > c:\n            count += 1\n    if count > len(l) // 2:\n        return \"Mishka\"\n    elif count == len(l) // 2:\n        return \"Friendship is magic!\"\n    return \"Chris\"\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = int(stdin)\n    dice = [0, 0, 0, 0, 0, 0]\n    for i in range(stdin):\n        dice[0], dice[1], dice[2], dice[3], dice[4], dice[5] = input().split()\n        dice[0] = int(dice[0])\n        dice[1] = int(dice[1])\n        dice[2] = int(dice[2])\n        dice[3] = int(dice[3])\n        dice[4] = int(dice[4])\n        dice[5] = int(dice[5])\n        if (dice[0] > dice[1] and dice[0] > dice[2] and dice[0] > dice[3] and dice[0] > dice[4] and dice[0] > dice[5]):\n            print(\"Mishka\")\n        elif (dice[1] > dice[0] and dice[1] > dice[2] and dice[1] > dice[3] and dice[1] > dice[4] and dice[1] > dice[5]):\n            print(\"Mishka\")\n        elif (dice[2] > dice[0] and dice[2] > dice[1] and dice[2] > dice[3] and dice[2] > dice[4] and dice[2] > dice[5]):\n            print(\"Mishka\")\n        elif (dice[3] > dice[0] and dice[3] > dice[1] and dice[3] > dice[2] and dice[3] > dice[4] and dice[3] > dice[5]):\n            print(\"Mishka\")\n        elif (dice[4] > dice[0] and dice[4] > dice[1] and dice[4] > dice[2] and dice[4] > dice[3] and dice[4] > dice[5]):\n            print(\"Mishka\")\n        elif (dice[5] > dice[0] and dice[5] > dice[1] and dice[5] > dice[2] and dice[5] > dice[3] and dice[5] > dice[4]):\n            print(\"Mishka\")\n        elif (dice[0] < dice[1] and dice[0] < dice[2] and dice[0] < dice[3] and dice[0] < dice[4] and dice[0] < dice[5]):\n            print(\"Chris\")\n        elif (dice[1] < dice[0] and dice[1] < dice[2] and dice[1] < dice[3] and dice[1] < dice[4] and dice[1] < dice[5]):\n            print(\"Chris\")\n        elif (dice[2] < dice[0] and dice[2] < dice[1] and dice[2] < dice[3] and dice[2] < dice[4] and dice[2] < dice[5]):\n            print(\"Chris\")\n        elif (dice[3] < dice[0] and dice[3] < dice[1] and dice[3] < dice[2] and dice[3] < dice[4] and dice[3] < dice[5]):\n            print(\"Chris\")\n        elif (dice[4] < dice[0] and dice[4] < dice[1] and dice[4] < dice[2] and dice[4] < dice[3] and dice[4] < dice[5]):\n            print(\"Chris\")\n        elif (dice[5] < dice[0] and dice[5] < dice[1] and dice[5] < dice[2] and dice[5] < dice[3] and dice[5] < dice[4]):\n            print(\"Chris\")\n        elif (dice[0] == dice[1] and dice[0] == dice[2] and dice[0] == dice[3] and dice[0] == dice[4] and dice[0] == dice[5]):\n            print(\"Friendship is magic!^^\")\n        elif (dice[1] == dice[0] and dice[1] == dice[2] and dice[1] == dice[3] and dice[1] == dice[4] and dice[1] == dice[5]):\n            print(\"Friendship is magic!^^\")\n        elif (dice[2] == dice[0] and dice[2] == dice[1] and dice[2] == dice[3] and dice[2] == dice[4] and dice[2] == dice[5]):\n            print(\"Friendship is magic!^^\")\n        elif (dice[3] == dice[0] and dice[3] == dice[1] and dice[3] == dice[2] and dice[3] == dice[4] and dice[3] == dice[5]):\n            print(\"Friendship is magic!^^\")\n        elif (dice[4] == dice[0] and dice[4] == dice[1] and dice[4] == dice[2] and dice[4] == dice[3] and dice[4] == dice[5]):\n            print(\"Friendship is magic!^^\")\n        elif (dice[5] == dice[0] and dice[5] == dice[1] and dice[5] == dice[2] and dice[5] == dice[3] and dice[5] == dice[4]):\n            print(\"Friendship is magic!^^\")\n        elif (dice[0] == dice[1] and dice[0] == dice[2] and dice[0] == dice[3] and dice[0] == dice[4] and dice[0] == dice[5]):\n            print(\"Chris\")\n        elif (dice[1] == dice[0] and dice[1] == dice[2] and dice[1] == dice[3] and dice[1] == dice[4] and dice[1] == dice[5]):\n            print(\"Chris\")\n        elif (dice[2] == dice[0] and dice[2] == dice[1] and dice[2] == dice[3] and dice[2] == dice[4] and dice"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    :param stdin:\n    :return:\n    \"\"\"\n    n = int(stdin)\n    cubical_dice_scores = []\n    for i in range(0, n):\n        cubical_dice_scores.append(list(map(int, stdin.split(' '))))\n\n    mishka_score = 0\n    chris_score = 0\n    for dice_score in cubical_dice_scores:\n        if dice_score[0] > dice_score[1]:\n            mishka_score += 1\n        elif dice_score[0] < dice_score[1]:\n            chris_score += 1\n        else:\n            pass\n\n    if mishka_score > chris_score:\n        return \"Mishka\"\n    elif mishka_score < chris_score:\n        return \"Chris\"\n    else:\n        return \"Friendship is magic!\"\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nn = int(input())\n\ndice = [list(map(int, input().split())) for _ in range(n)]\n\ndice = sorted(dice, key=lambda x: x[0])\n\ndice = sorted(dice, key=lambda x: x[1])\n\nfor i, j in dice:\n    if i > j:\n        print(\"Mishka\")\n        break\n    elif i == j:\n        print(\"Friendship is magic!^^\")\n        break\nelse:\n    print(\"Chris\")\n"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    count_of_wins = {'Mishka': 0, 'Chris': 0}\n    for _ in range(n):\n        mishka, chris = map(int, stdin.readline().split())\n        if mishka > chris:\n            count_of_wins['Mishka'] += 1\n        elif chris > mishka:\n            count_of_wins['Chris'] += 1\n        else:\n            count_of_wins['Friendship is magic!^^'] += 1\n    return max(count_of_wins, key=lambda x: count_of_wins[x])\n\n\"\"\"\n\n\"\"\"\n\ndef"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    A function that returns the winner of the game Mishka vs Chris.\n    :param stdin: the input string\n    :return: the winner\n    \"\"\"\n    rounds = int(stdin.rstrip())\n    round_mishka = []\n    round_chris = []\n\n    for i in range(rounds):\n        round_mishka.append(int(stdin.readline().rstrip().split(\" \")[0]))\n        round_chris.append(int(stdin.readline().rstrip().split(\" \")[1]))\n    round_mishka.reverse()\n    round_chris.reverse()\n\n    mishka_score = 0\n    chris_score = 0\n\n    mishka_is_winner = False\n    chris_is_winner = False\n\n    for i in range(rounds):\n        if round_mishka[i] > round_chris[i]:\n            mishka_score += 1\n            mishka_is_winner = True\n        elif round_mishka[i] < round_chris[i]:\n            chris_score += 1\n            chris_is_winner = True\n        elif round_mishka[i] == round_chris[i]:\n            mishka_score += 0.5\n            chris_score += 0.5\n\n    if mishka_is_winner and chris_is_winner:\n        return \"Friendship is magic!^^\"\n    elif mishka_is_winner:\n        return \"Mishka\"\n    elif chris_is_winner:\n        return \"Chris\"\n    else:\n        return \"Friendship is magic!^^\""
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport sys\n\ndef"
    },
    {
        "number": 233,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \"\"\"\n    dice = []\n    for i in stdin.splitlines():\n        [dice.append(int(i.split()[0])) for i in stdin.splitlines()]\n\n    return 'Friendship is magic!' if max(dice) == min(dice) else 'Mishka'\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if stdin == '\\n'.join(['\\n'.join(row) for row in stdin.split('\\n')]) else 'NO'"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\n'''\n\nimport re\n\ndef"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 3\n   ... 111\n   ... 1*1\n   ... 111\n   ... ''')\n    YES\n    >>> solution('''2 4\n   ... *.*.\n   ... 1211\n   ... ''')\n    NO\n    \"\"\"\n    rows, cols = [int(n) for n in stdin.split()]\n    matrix = [list(stdin.split())[1:] for _ in range(rows)]\n    bombs_positions = set()\n    for r in range(rows):\n        for c in range(cols):\n            if matrix[r][c] == \"*\":\n                bombs_positions.add((r, c))\n\n    def neighbors_of(row, col):\n        for r in range(row - 1, row + 2):\n            for c in range(col - 1, col + 2):\n                if r in range(rows) and c in range(cols):\n                    yield r, c\n\n    def all_neighbors_have_bombs(row, col):\n        count = 0\n        for r, c in neighbors_of(row, col):\n            if (r, c) in bombs_positions:\n                count += 1\n        return count == matrix[row][col]\n\n    for row in range(rows):\n        for col in range(cols):\n            if (row, col) in bombs_positions and not all_neighbors_have_bombs(row, col):\n                return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    # input()\n    # n = int(stdin.readline())\n    # m = int(stdin.readline())\n    # g = stdin.readlines()\n    # n, m = map(int, input().split())\n    # g = stdin.readlines()\n    # # print(n, m, g)\n    # g = [list(x) for x in g]\n    # # print(g)\n    # # print(n, m, g)\n    # for i in range(n):\n    #     for j in range(m):\n    #         if g[i][j] == \"*\":\n    #             g[i][j] = \"*\"\n    #         if g[i][j] == \".\":\n    #             g[i][j] = 0\n    #         else:\n    #             g[i][j] = int(g[i][j])\n    #\n    # def check_valid(x, y):\n    #     nonlocal n, m, g\n    #     global valid\n    #     x -= 1\n    #     y -= 1\n    #     if g[x][y] == \"*\":\n    #         return False\n    #     count = 0\n    #     for i in range(-1, 2):\n    #         for j in range(-1, 2):\n    #             if (\n    #                 0 <= x + i < n\n    #                 and 0 <= y + j < m\n    #                 and g[x + i][y + j] == \"*\"\n    #             ):\n    #                 count += 1\n    #     return g[x][y] == count\n    #\n    #\n    # for i in range(n):\n    #     for j in range(m):\n    #         if g[i][j]!= \"*\" and g[i][j]!= 0:\n    #             if not check_valid(i, j):\n    #                 return \"NO\"\n    # for i in range(n):\n    #     for j in range(m):\n    #         if g[i][j] == 0:\n    #             for x, y in (\n    #                 (i + 1, j),\n    #                 (i - 1, j),\n    #                 (i, j + 1),\n    #                 (i, j - 1),\n    #                 (i + 1, j + 1),\n    #                 (i - 1, j - 1),\n    #                 (i + 1, j - 1),\n    #                 (i - 1, j + 1),\n    #             ):\n    #                 if 0 <= x < n and 0 <= y < m:\n    #                     if g[x][y] == \"*\":\n    #                         return \"NO\"\n    #                     if g[x][y] == 0:\n    #                         g[x][y] = 1\n    # return \"YES\"\n\n    def check_valid(x, y):\n        nonlocal n, m, g\n        global valid\n        x -= 1\n        y -= 1\n        count = 0\n        for i in range(-1, 2):\n            for j in range(-1, 2):\n                if (\n                    0 <= x + i < n\n                    and 0 <= y + j < m\n                    and g[x + i][y + j] == \"*\"\n                ):\n                    count += 1\n        return g[x][y] == count\n\n    n, m = map(int, stdin.readline().split())\n    g = [list(stdin.readline()) for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if g[i][j] == \"*\":\n                g[i][j] = \"*\"\n    valid = \"YES\"\n    for i in range(n):\n        for j in range(m):\n            if g[i][j]!= \"*\" and g[i][j]!= 0:\n                if not check_valid(i, j):\n                    valid = \"NO\"\n                    break\n        if valid == \"NO\":\n            break\n    print(valid)\n\n\nsolution(input())\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\"\"\"\n\nimport numpy as np\nfrom typing import List, Tuple\n\n\ndef"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = [[c for c in line.strip()] for line in stdin.split('\\n')]\n    grid = [grid[i][j] for j in range(n) for i in range(m)]\n    grid = [grid[i:i + m] for i in range(0, n * m, m)]\n\n    def neighbors(i, j):\n        for di, dj in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            if 0 <= i + di < n and 0 <= j + dj < m:\n                yield i + di, j + dj\n\n    for i, line in enumerate(grid):\n        for j, cell in enumerate(line):\n            if cell!= '.':\n                continue\n            bombs = 0\n            for neighbor in neighbors(i, j):\n                if grid[neighbor[0]][neighbor[1]] == '*':\n                    bombs += 1\n            if bombs!= int(cell):\n                return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\nimport sys\nimport math\nimport re\nimport functools\nfrom collections import deque\n\n\ndef"
    },
    {
        "number": 234,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    rows, cols = [int(el) for el in stdin.split(' ')]\n    board = []\n    for _ in range(rows):\n        row = stdin.split('\\n')[0]\n        board.append(row)\n    return 'NO'"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    k = 1\n    while n % 10!= 0:\n        k += 1\n        n = n // 10\n    return k\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    c = int(stdin)\n    l = c\n    r = c // 2\n    while l < r:\n        m = l + (r - l) // 2\n        print(m)\n        if m * (10 - m) * (10 - m) * (10 - m) < (c - m) * (c - m) * (c - m) * (c - m):\n            l = m + 1\n        else:\n            r = m\n    return str(l)\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    if n % 10 == 0:\n        return n // 10\n    else:\n        return n // 10 + 1\n\n\nprint(solution(sys.stdin.read()))\n\n\"\"\"\nimport sys\nimport math\n\n\ndef"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, n = [int(i) for i in stdin.split()]\n    p, g = divmod(a, n)\n    k = g\n    while g > 0:\n        a, n = p, n * 10\n        p, g = divmod(a, n)\n        k += g\n    return k\n\nprint(solution(\"68\"))"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 10:\n        return \"0\"\n    k = 1\n    while n % 10:\n        k += 1\n        n = n // 10\n    return str(k)\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def _1(n: int) -> int:\n        return (n + 9) // 10\n\n    def _2(n: int) -> int:\n        return n // 10\n\n    def _3(n: int) -> int:\n        return n // 10\n\n    return _3(n)\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    k = 1\n    while n > 0:\n        n -= k\n        k *= 10\n        k //= 2\n    return k\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    while n > 1:\n        count += 1\n        if (n - (n // 10)) == 0:\n            count += 1\n            n = (n // 10)\n        else:\n            n = n - (n // 10)\n    return count\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # if n % 10 > 5:\n    #     n = int(n // 10) + 1\n    # else:\n    #     n = int(n // 10)\n    k = n\n    if n % 10 == 0:\n        k = int(n / 10)\n    while k >= 1:\n        if n % k == 0:\n            n = n / k\n            break\n        k -= 1\n    return int(n)\n"
    },
    {
        "number": 235,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    #return stdout\n\n    def get_new_count(stdin):\n        stdin = stdin.split(\"\\n\")\n        count = int(stdin[0])\n        return count\n\n    def get_quantity(stdin):\n        stdin = stdin.split(\"\\n\")\n        quantity = 0\n        for i in stdin:\n            if int(i) % 10 == 0:\n                quantity = int(i)\n                break\n        return quantity\n\n    def get_count_of_candies(stdin):\n        stdin = stdin.split(\"\\n\")\n        count_of_candies = 0\n        for i in stdin:\n            if int(i) % 10 == 0:\n                count_of_candies = int(i) // 10\n                break\n        return count_of_candies\n\n    def get_next_day_candies(stdin):\n        stdin = stdin.split(\"\\n\")\n        count_of_candies = 0\n        for i in stdin:\n            if int(i) % 10 == 0:\n                count_of_candies = int(i) // 10\n                break\n        return count_of_candies\n\n    def get_half_of_candies(stdin):\n        count_of_candies = get_next_day_candies(stdin)\n        return count_of_candies // 2\n\n    def get_candies(stdin):\n        stdin = stdin.split(\"\\n\")\n        candies = []\n        for i in stdin:\n            candies.append(int(i))\n        return candies\n\n    def get_petya_candies(stdin):\n        stdin = stdin.split(\"\\n\")\n        candies = []\n        for i in stdin:\n            candies.append(int(i))\n        return candies\n\n    candies = get_candies(stdin)\n    count_of_candies = get_quantity(stdin)\n    count_of_candies_petya = get_count_of_candies(stdin)\n    count_of_candies_vasya = get_next_day_candies(stdin)\n\n    petya_candies = get_petya_candies(stdin)\n    count_of_petya_candies = get_quantity(stdin)\n\n    count_of_petya_candies_petya = get_count_of_candies(stdin)\n    count_of_petya_candies_vasya = get_next_day_candies(stdin)\n\n    minimal_count_of_candies = count_of_petya_candies - count_of_candies // 2 + 1\n    print(minimal_count_of_candies)\n"
    },
    {
        "number": 236,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if links(stdin) else \"NO\"\n\ndef"
    },
    {
        "number": 236,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('-o---o-')\n    YES\n    >>> solution('o-o')\n    YES\n    >>> solution('o-o-o')\n    NO\n    >>> solution('o-o-oo')\n    NO\n    \"\"\"\n    pass\n"
    },
    {
        "number": 236,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Takes a string of input and removes all the pearls and joins them with links. If the links are not connected\n    an error is raised. Then, we check if the length of the result is the same as the initial string\"\"\"\n    link_chain = stdin.replace('o', '-').split('-')\n    if len(link_chain) > 1:\n        link_chain = [x for x in link_chain if x!= '']\n        link_chain = ''.join(link_chain)\n        if len(link_chain) == len(stdin):\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        return \"YES\"\n"
    },
    {
        "number": 236,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[:-1]\n    n = len(s)\n    s = s[::-1]\n    m = 0\n    l = 0\n    for i in range(n):\n        if s[i] == '-':\n            m += 1\n        else:\n            l += 1\n    if m == l:\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 236,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin[0]\n    l = 0\n    for i in range(len(n)):\n        if n[i] == 'o':\n            l += 1\n        elif n[i] == '-':\n            l -= 1\n    if l == 0:\n        return 'YES'\n    return 'NO'"
    },
    {
        "number": 236,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if len(s) == 1:\n        return 'YES' if s[0] == 'o' else 'NO'\n    \n    n = 0\n    for i in range(1, len(s)):\n        if s[i] == 'o':\n            n += 1\n        if s[i] == 'o' and s[i-1] == 'o':\n            n -= 1\n        if n < 0:\n            return 'NO'\n    \n    return 'YES' if n == 0 else 'NO'"
    },
    {
        "number": 236,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"YES\" if stdin.count('-') == (len(stdin) - 1) * stdin.count('o') else \"NO\"\n"
    },
    {
        "number": 236,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution to the problem\n    :param stdin:\n    :return:\n    \"\"\"\n    necklace = stdin\n    necklace_set = set(necklace)\n    links = set()\n\n    # construct a set of all links\n    for letter in necklace_set:\n        if letter == '-':\n            links.add(letter)\n\n    # find all link-pairs in necklace\n    i = 0\n    while i < len(necklace):\n        if necklace[i] == '-':\n            if i == len(necklace) - 1 or necklace[i + 1] == '-':\n                links.remove(necklace[i])\n                i += 2\n            else:\n                links.remove(necklace[i])\n                i += 1\n        else:\n            i += 1\n\n    # if there are no links or pearls in the necklace, there can be no links between them\n    if len(links) == 0:\n        return \"YES\"\n    else:\n        for i in range(len(necklace)):\n            if i < len(necklace) - 1 and necklace[i]!= '-' and necklace[i + 1]!= '-':\n                if (necklace[i] + necklace[i + 1]).lower() in links:\n                    return \"NO\"\n        return \"YES\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 236,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 236,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    while True:\n        ss = s\n        s = s.replace(\"o\", \"\")\n        s = s.replace(\"-\", \"\")\n        if ss == s:\n            break\n    print(\"YES\") if s == \"\" else print(\"NO\")\n    return \"\"\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # pass\n    n, m, k = [int(x) for x in stdin.split()]\n    if n < m < k:\n        print(n)\n    elif k < n < m:\n        print(m)\n    elif n < k < m:\n        print(k)\n    else:\n        print(n)\n    return ''\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = list(map(int, stdin.split(' ')))\n    bed = [1] * n\n    pillows = [0] * m\n    for i in range(k):\n        bed[i] += 1\n        pillows[i] += 1\n    for i in range(k, n):\n        if bed[i] == 1:\n            pillows[i] += 1\n        else:\n            pillows[i] = 0\n    for i in range(k, n):\n        if i > 0 and i < n - 1:\n            pillows[i] += max(pillows[i - 1], pillows[i + 1])\n        elif i == 0:\n            pillows[i] += pillows[i + 1]\n        elif i == n - 1:\n            pillows[i] += pillows[i - 1]\n    print(pillows[k - 1])\n    return ''\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split(' ')]\n    cnt = [0] * m\n    for i in range(k):\n        cnt[i % m] += 1\n    for i in range(1, m):\n        cnt[i] += cnt[i - 1]\n    print(cnt)\n    return''.join([str(cnt[i % m]) for i in range(n)])\n\n\ndef"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = stdin.split()\n    n, m, k = int(n), int(m), int(k)\n    if (n-1) % k == 0:\n        return n-1\n    elif (k-1) * m >= n:\n        return k-1\n    else:\n        return n-k*m\n\"\"\"\n\n\ndef"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(i) for i in stdin.split()]\n    num_hobbit = n\n    hobbit_idx = k\n    beds = [0] * n\n    pillows = 0\n    for i in range(m):\n        beds[i % n] += 1\n    pillows = sum(beds)\n    while hobbit_idx < num_hobbit:\n        pillows += min(k, num_hobbit - hobbit_idx)\n        hobbit_idx += k\n    return pillows\n"
    },
    {
        "number": 237,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 6 2\")\n    2\n    >>> solution(\"3 10 3\")\n    4\n    >>> solution(\"3 6 1\")\n    3\n    \"\"\"\n    n, m, k = stdin.split(\" \")\n    n, m, k = int(n), int(m), int(k)\n\n    res = 0\n    for i in range(m):\n        if i < k:\n            res += 1\n        else:\n            res -= 1\n\n    return str(max(0, res))\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    #your code here\n    #return the string that you want to return\n    stdin = stdin.split('\\n')\n    n, m, k = map(int, stdin[0].split())\n    arr = list(map(int, stdin[1].split()))\n    sub_arr = []\n    for i in range(0, len(arr)):\n        if i+m-1 >= len(arr):\n            sub_arr.append(arr[i:])\n        else:\n            sub_arr.append(arr[i:i+m])\n    sub_arr = [arr[i:i+m] for i in range(0, len(arr), m)]\n    max_cost = 0\n    for i in sub_arr:\n        if sum(i) - k*(len(i)//m) >= max_cost:\n            max_cost = sum(i) - k*(len(i)//m)\n    return str(max_cost)"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return string of max subarray sum.\"\"\"\n    n, m, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    l = r = 0\n    best = 0\n    while r < n:\n        sum_ = 0\n        for i in range(r, min(r + m, n)):\n            sum_ += a[i] - k * (i - r + 1) // m\n        if sum_ > best:\n            best = sum_\n        r += 1\n    return str(best)\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.readline().split()\n    n, m, k = int(line[0]), int(line[1]), int(line[2])\n    a = [int(x) for x in stdin.readline().split()]\n    \n    left, right = 0, len(a) - 1\n    sum = 0\n    while left <= right:\n        if sum > k:\n            sum -= a[left]\n            left += 1\n        elif sum < k:\n            right -= 1\n            if right < left:\n                break\n            else:\n                sum += a[right]\n        else:\n            break\n    \n    if sum <= k:\n        print(0)\n        return 0\n    \n    if sum >= k + m * (right - left + 1):\n        print(sum)\n        return sum\n    \n    max = 0\n    for i in range(left, right + 1):\n        if a[i] > max:\n            max = a[i]\n        sum += a[i] - max\n        if sum >= k + m * (right - left + 1):\n            break\n    \n    print(max + k + m * (right - left + 1))\n    return max + k + m * (right - left + 1)\n\nfor stdin in open('./input.txt').readlines():\n    print(solution(stdin))\n    \n\"\"\"\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # first line input\n    n, m, k = stdin.readline().split()\n    n, m, k = int(n), int(m), int(k)\n    # second line input\n    a = stdin.readline().split()\n    a = [int(num) for num in a]\n    # max cost\n    max_cost = 0\n    # init min\n    min_cost = 0\n    # init number of subarray\n    count = 0\n    # init index\n    index = 0\n    # init number of element in subarray\n    subarray_size = 0\n    # init answer\n    answer = 0\n    # while index is less than length of array\n    while index < len(a):\n        # init count\n        count = 0\n        # init subarray_size\n        subarray_size = 0\n        # while subarray_size is less than m\n        while subarray_size < m:\n            # count ++\n            count += 1\n            # subarray_size ++\n            subarray_size += 1\n            # if number in index is less than k\n            if a[index] < k:\n                # then it's min_cost ++\n                min_cost += k - a[index]\n                # and max_cost ++\n                max_cost += k - a[index]\n                # then index ++\n                index += 1\n                # and subarray_size = 0\n                subarray_size = 0\n            # else\n            else:\n                # then number is greater than k\n                if a[index] > k:\n                    # then it's max_cost ++\n                    max_cost += a[index] - k\n                # and min_cost ++\n                min_cost += a[index] - k\n                # then index ++\n                index += 1\n                # and subarray_size = 0\n                subarray_size = 0\n        # then it's answer ++\n        answer += max_cost - min_cost\n        # and min_cost = 0\n        min_cost = 0\n    # return answer\n    return answer\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    arr = [int(x) for x in stdin.split()]\n    arr.sort(reverse=True)\n\n    sum = 0\n    left = 0\n    right = 0\n    for i in range(n):\n        sum += arr[i]\n        left += 1\n        right = left + (sum - k) // m\n\n        if (sum - k) % m == 0:\n            if left <= right:\n                break\n\n    return arr[left - 1] - arr[right - 1]\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution of the problem\"\"\"\n    n, m, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n\n    ans = 0\n    for l in range(n):\n        for r in range(l + 1, n):\n            curr = sum(a[l:r + 1]) - k * (math.ceil(r - l + 1 / m) - 1)\n            ans = max(ans, curr)\n\n    return str(ans)\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 238,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = [int(i) for i in stdin.split()]\n    r = [0] * n\n    r[0] = a[0] - k * (1 + int(n / m))\n    r[1] = max(a[0] - k * int(n / m), a[1])\n    for i in range(2, n):\n        r[i] = max(a[i] - k * (int((i + 1 - 1) / m) + 1), r[i - 1])\n    return r[-1]\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    data = stdin.split()\n    return '\\n'.join([str(int(data[0])+int(data[1]))+' '+str(int(data[0])),\n                      str(int(data[0])+int(data[1])+1)+' '+str(int(data[0])),\n                      str(int(data[0])+int(data[1])+1)+' '+str(int(data[0])+1),\n                      str(int(data[0])+int(data[1])+1)+' '+str(int(data[0])+int(data[1]))])\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the four points that define a longest polyline\"\"\"\n\n    x, y = map(int, stdin.split())\n    return f\"{x} {y}\\n{0} {0}\\n{x} {0}\\n{0} {y}\"\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.strip().split()]\n    c = []\n    if n < m:\n        n, m = m, n\n    c = [[i, j] for i in range(n) for j in range(m)]\n    c.sort(key=lambda x: x[0] + x[1])\n    l = []\n    for i in range(4):\n        l.append(c.pop(0))\n    print(' '.join([str(x[0]) +'' + str(x[1]) for x in l]))\n    return''.join([str(x[0]) +'' + str(x[1]) for x in l])\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = stdin.split()\n    n, m = int(n), int(m)\n\n    def find_max_length(x: int, y: int):\n        return max(x, m - x) + max(y, n - y)\n\n    max_length = float('-inf')\n    for x in range(m):\n        for y in range(n):\n            length = find_max_length(x, y)\n            if length > max_length:\n                max_length = length\n                max_points = (x, y)\n\n    for point in max_points:\n        print(point, end=\" \")\n    return \"\"\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    (n, m) = [int(x) for x in stdin.split()]\n\n    ans = [[0, 0], [0, 0], [0, 0], [0, 0]]\n    for i in range(0, n):\n        for j in range(0, m):\n            if i == 0 and j == 0:\n                ans[0] = [i, j]\n            elif i == 0 and j == 1:\n                ans[1] = [i, j]\n            elif i == 0 and j == 2:\n                ans[2] = [i, j]\n            elif i == 0 and j == 3:\n                ans[3] = [i, j]\n            elif i == 1 and j == 0:\n                ans[0] = [i, j]\n            elif i == 1 and j == 1:\n                ans[1] = [i, j]\n            elif i == 1 and j == 2:\n                ans[2] = [i, j]\n            elif i == 1 and j == 3:\n                ans[3] = [i, j]\n            elif i == 2 and j == 0:\n                ans[0] = [i, j]\n            elif i == 2 and j == 1:\n                ans[1] = [i, j]\n            elif i == 2 and j == 2:\n                ans[2] = [i, j]\n            elif i == 2 and j == 3:\n                ans[3] = [i, j]\n            elif i == 3 and j == 0:\n                ans[0] = [i, j]\n            elif i == 3 and j == 1:\n                ans[1] = [i, j]\n            elif i == 3 and j == 2:\n                ans[2] = [i, j]\n            elif i == 3 and j == 3:\n                ans[3] = [i, j]\n    print(*ans[0], sep=' ')\n    print(*ans[1], sep=' ')\n    print(*ans[2], sep=' ')\n    print(*ans[3], sep=' ')\n\nsolution(input())\n\n\nExplanation\n\nOn the first row there is only one possible choice of points. On the second row there are four possible choices. On the third row there are eight possible choices. On the fourth row there are 16 possible choices.\n\n\n\n'''\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split(' '))\n    return f'{x - 1} {y - 1}\\n{0 0}\\n{x - 1} {0}\\n{0 y - 1}\\n{0 0}'\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    return''.join([str(a) for a in [0, 0, 0, 0]])\n"
    },
    {
        "number": 239,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return str with four coordinates of longest polyline in order of appearance.\"\"\"\n    n, m = map(int, stdin.split())\n    return f'{0} {0}\\n{0} {0}\\n{0} {0}\\n{0} {0}'\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    number = stdin\n    # replace numbers\n    for i in range(0, 10):\n        number = number.replace(str(i), f'{i}')\n    number = int(number)\n    \n    return str(number)"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # write your code in Python 3.6\n    return stdin"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    k = int(n[:int(n.find('0'))])\n    i = 0\n    while i < len(n):\n        if n[i] == '0' and n[i+1]!= '0':\n            n = n[:i] + n[i+1:]\n        elif n[i]!= '0' and n[i+1] == '0':\n            n = n[:i+1] + n[i+2:]\n        else:\n            i += 1\n    return n\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    print(int(stdin))\n    \nsolution('003512')\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return ''\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Implementation of the solution via brute force\n    :param stdin: The input string\n    :return: The solution\n    \"\"\"\n    number = stdin\n    n = len(number)\n    possible_solutions = []\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            possible_solutions.append(int(number[i:j]))\n    possible_solutions = sorted(possible_solutions)\n    print(possible_solutions[0])\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    k, n = map(int, stdin.split())\n    i = 0\n    while True:\n        if n < 10**i:\n            break\n        i += 1\n    # 10**i > n\n    i -= 1\n    n = int(stdin[0:i+1])\n    i = len(stdin) - k + 1\n    j = 0\n    l = n % (10**(i-1))\n    #print(n, i, l)\n    #print(n//(10**(i-1)))\n    while True:\n        #print(n, i, j)\n        if n < 10**j:\n            break\n        j += 1\n    j -= 1\n    return str(n//(10**(i-1))) + str(n%(10**(i-1))//(10**(j-1)))\n\n\ndef"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    kate_number = stdin\n    non_zero_index = 0\n    for i in range(len(kate_number)):\n        if kate_number[i]!= \"0\":\n            non_zero_index = i\n            break\n    \n    kate_number = kate_number[non_zero_index:]\n    kate_number = int(kate_number)\n    kate_number += 1\n    for i in range(non_zero_index):\n        if kate_number < 10:\n            kate_number *= 10\n        kate_number += 1\n    return str(kate_number)\n"
    },
    {
        "number": 240,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split()\n    n = n[-k:]\n    print(n)\n"
    },
    {
        "number": 241,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, min, max = map(int, stdin.split())\n    temps = map(int, stdin.split()[1:])\n    temps = list(set(temps))\n    temps.sort()\n\n    if temps == list(range(min, max + 1)):\n        return \"Correct\"\n    else:\n        return \"Incorrect\"\n"
    },
    {
        "number": 241,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 241,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    n, m, min, max = [int(x) for x in stdin.split()]\n    data = [int(x) for x in stdin.split()[1:]]\n    return 'Correct' if min <= max and len(data) == m else 'Incorrect'\n"
    },
    {
        "number": 241,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    [n, m, min, max] = list(map(int, stdin.split(\" \")))\n    \n    stdin = list(map(int, stdin.split(\" \")))\n    if len(stdin)!= m:\n        print(\"Incorrect\")\n        return\n    \n    stdin = set(stdin)\n    if min not in stdin or max not in stdin:\n        print(\"Incorrect\")\n        return\n    \n    for i in range(m):\n        if m - i > n:\n            print(\"Incorrect\")\n            return\n        if (max - stdin[i]) < (m - i):\n            print(\"Incorrect\")\n            return\n    print(\"Correct\")\n    return \n\"\"\""
    },
    {
        "number": 241,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, min, max = map(int, stdin.split())\n    nums = sorted(map(int, stdin.split()[1:]))\n    for i in range(n - m):\n        if nums[i + m - 1] <= min and nums[i] >= max:\n            return \"Correct\"\n    return \"Incorrect\""
    },
    {
        "number": 241,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, min, max = [int(x) for x in stdin.split(\"\\n\")[0].split(\" \")]\n    t = [int(x) for x in stdin.split(\"\\n\")[1].split(\" \")]\n    ans = 'Correct' if n - m <= 0 or min == max else 'Incorrect'\n    return ans\n"
    },
    {
        "number": 241,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, min, max, *temperatures = map(int, stdin.split())\n    temperatures = sorted(temperatures)\n    if (\n        temperatures[0] < min\n        or temperatures[-1] > max\n        or m > n\n        or m < 1\n        or max < min\n    ):\n        return \"Incorrect\"\n    for i in range(m, n):\n        if temperatures[i] > min:\n            return \"Incorrect\"\n    return \"Correct\"\n"
    },
    {
        "number": 241,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, min_, max_ = [int(x) for x in stdin.split('\\n')[0].split()]\n    t = [int(x) for x in stdin.split('\\n')[1].split()]\n    arr = []\n    for i in range(len(t)):\n        arr.append(t[i])\n    \n    arr.sort()\n    cnt = 0\n    for i in range(len(t)):\n        if t[i] == min_:\n            cnt += 1\n        if t[i] == max_:\n            cnt += 1\n        if cnt == 2:\n            break\n    return 'Correct' if cnt == 2 else 'Incorrect'\n\n\"\"\""
    },
    {
        "number": 241,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    (n, m, min, max) = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    temperatures = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    return 'Correct' if (n - m) == max - min and min in temperatures and max in temperatures else 'Incorrect'\n"
    },
    {
        "number": 241,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return 'Correct'\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(i) for i in stdin.split()]\n    return str(len([i for i in range(a, b + 1) if len(str(factorial(i))) == b]))\n\ndef"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = 1\n    while (factorial(a) % 10 == 0):\n        a += 1\n    a -= 1\n    b = 1\n    while (factorial(b) % 10!= 0):\n        b += 1\n    b -= 1\n    return str(b - a + 1)\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(map(str, solution1(stdin.strip())))\n\ndef"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin)\n    zeros = [i for i in range(1, m + 1) if str(i).endswith('0' * m)]\n    return str(len(zeros)) +'' +''.join(map(str, zeros))\n\"\"\""
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin)\n    count = 0\n    while True:\n        x = 5 * count\n        if x * 5 < m:\n            count += 1\n        else:\n            break\n    print(count)\n    answer = [5 * count]\n    while True:\n        x = 5 * count\n        if x * 5 >= m:\n            break\n        answer.append(x)\n        count += 1\n    print(' '.join([str(x) for x in answer]))\n    return''.join([str(x) for x in answer])\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin)\n    count = 0\n    for i in range(1,m+1):\n        if str(m).endswith(str(i)):\n            count += 1\n    print(count)\n    for i in range(count):\n        print(i+1)"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    count = 0\n    answer = []\n    for n in range(1, num + 1):\n        if str(num).endswith(str(n) * num):\n            count += 1\n            answer.append(n)\n    print(count)\n    print(\" \".join([str(n) for n in sorted(answer)]))\n    return \"\"\n    \n    \n"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin)\n    if m < 1 or m > 100000:\n        return -1\n    factorial_dict = dict()\n    for i in range(1, m + 1):\n        factorial_dict[i] = factorial(i)\n    zeros_count_dict = dict()\n    for k, v in factorial_dict.items():\n        zeros_count_dict[k] = 0\n        for char in str(v):\n            if char == '0':\n                zeros_count_dict[k] += 1\n    count = 0\n    for k, v in zeros_count_dict.items():\n        if v == m:\n            count += 1\n    if count == 0:\n        return -1\n    return count, [k for k, v in zeros_count_dict.items() if v == m]\n\n\ndef"
    },
    {
        "number": 242,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin)\n    i = 1\n    count = 0\n    while count < m:\n        i += 1\n        count = 0\n        while not factorial(i).endswith('0'*m):\n            i += 1\n        count = len(factorial(i)) - m\n    print(i)\n    print(' '.join(str(x) for x in range(i, i - m, -1)))\n    return ''\n"
    },
    {
        "number": 243,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''Your solution goes here.'''\n    return ''\n\ndef"
    },
    {
        "number": 243,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4 5 3\n   ... 1 2 3\n   ... 1 2 5\n   ... 4 2 1\n   ... 2 3 2\n   ... 1 4 4\n   ... 1 3 3''')\n    '3 3 3'\n    >>> solution('''4 4 6\n   ... 1 2 1\n   ... 1 3 1\n   ... 1 4 1\n   ... 1 5 1\n   ... 1 6 1\n   ... 2 3 2\n   ... 2 4 2\n   ... 2 5 2\n   ... 3 4 2\n   ... 3 5 2\n   ... 3 6 2\n   ... 4 5 2\n   ... 4 6 2\n   ... 5 6 2''')\n    '3 2 1'\n    >>> solution('''4 4 3\n   ... 1 2 1\n   ... 1 3 1\n   ... 1 4 1\n   ... 1 5 1\n   ... 1 6 1\n   ... 2 3 2\n   ... 2 4 2\n   ... 2 5 2\n   ... 3 4 2\n   ... 3 5 2\n   ... 3 6 2\n   ... 4 5 2\n   ... 4 6 2\n   ... 5 6 2\n   ... 6 6 1''')\n    '3 3 2'\n    \"\"\"\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n"
    },
    {
        "number": 243,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2 3 2\\n2 1\\n1 2 3\\n1 2 2\\n2 2 1\")\n    '2 2'\n    \"\"\"\n    stdin = stdin.splitlines()\n    n, m, k = map(int, stdin[0].split())\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v, w = map(int, stdin[1].split())\n        graph[u - 1].append((v - 1, w))\n        graph[v - 1].append((u - 1, w))\n    # print(graph)\n    # print(len(graph))\n    # print(len(graph[0]))\n    special = list(map(int, stdin[2].split()))\n    # print(special)\n    from collections import defaultdict\n    distances = defaultdict(lambda: float('inf'))\n    distances[special[0]] = 0\n    for i in range(1, k):\n        special_candidates = defaultdict(list)\n        for node in special:\n            for edge in graph[node]:\n                # print(edge[0])\n                if distances[edge[0]] < distances[node] + edge[1]:\n                    special_candidates[node].append(edge[0])\n        for node, candidates in special_candidates.items():\n            distances[node] = min(distances[c] for c in candidates)\n    # print(distances)\n    return''.join(map(str, [distances[v] for v in special]))"
    },
    {
        "number": 243,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    vertices_count, edges_count, special_count = map(int, stdin.split())\n    special_vertices = list(map(int, stdin.split()))\n    graph = {vertex: {} for vertex in range(vertices_count)}\n    for _ in range(edges_count):\n        vertex1, vertex2, weight = map(int, stdin.split())\n        graph[vertex1][vertex2] = weight\n        graph[vertex2][vertex1] = weight\n\n    # The cost of the path from vertex1 to vertex2 is the maximum of the\n    # costs of the paths from vertex1 to vertex2 in the graph.\n    costs = [0] * vertices_count\n    # Create a priority queue of edges from vertex1 and mark each vertex as visited.\n    # Note that the priority queue is not sorted by default.\n    pq = [(-1, vertex) for vertex in graph[special_vertices[0]]]\n    visited = [False] * vertices_count\n    visited[special_vertices[0]] = True\n    while pq:\n        # Pop the next edge with the minimum cost.\n        cost, vertex = heappop(pq)\n        # Update the cost for the vertex from which the edge was popped.\n        if cost < -1:\n            costs[vertex] = max(cost, costs[vertex])\n        # Visit the other vertex of the edge.\n        for neighbour, neighbour_cost in graph[vertex].items():\n            # If the other vertex has not been visited yet, add the edge to the\n            # priority queue with its cost, mark the vertex as visited and update\n            # the cost of the path to it.\n            if not visited[neighbour]:\n                heappush(pq, (-cost - neighbour_cost, neighbour))\n                visited[neighbour] = True\n                costs[neighbour] = max(cost - neighbour_cost, costs[neighbour])\n    # return the maximum distance between special vertices\n    return''.join(map(str, costs[special_vertices[1:]]))\n\n\n\ndef"
    },
    {
        "number": 243,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \u0421\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442 \u0441\u0442\u0440\u043e\u043a\u0438 \u0434\u043e \u0442\u0435\u0445 \u043f\u043e\u0440, \u043f\u043e\u043a\u0430 \u043d\u0435 \u0432\u0441\u0442\u0440\u0435\u0442\u0438\u0442 \u0441\u0442\u0440\u043e\u043a\u0443 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u043c\u0443\u044e \u0447\u0438\u0441\u043b\u043e\u043c \u0441\u0442\u0440\u043e\u043a \u0438 \u043f\u0430\u0440\u0430\u043c\u0438 \u0447\u0438\u0441\u0435\u043b \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u043e\u0431\u0435\u043b. \u041f\u0440\u0438 \u044d\u0442\u043e\u043c \u0441\u0447\u0438\u0442\u0430\u0435\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u0435\u0440\u0448\u0438\u043d \u0432 \u0441\u0432\u044f\u0437\u043d\u043e\u043c \u0433\u0440\u0430\u0444\u0435.\n    :param stdin: \u0432\u0445\u043e\u0434\u043d\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430\n    :return: \u0432\u044b\u0445\u043e\u0434\u043d\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430\n    \"\"\"\n    n, m, k = map(int, stdin.split())\n    graph = {}\n    for _ in range(m):\n        u, v, w = map(int, stdin.split())\n        if u in graph:\n            graph[u].append((v, w))\n        else:\n            graph[u] = [(v, w)]\n        if v in graph:\n            graph[v].append((u, w))\n        else:\n            graph[v] = [(u, w)]\n    def get_distances(graph, k):\n        distances = {i:float('inf') for i in range(1, n + 1)}\n        distances[k] = 0\n        for _ in range(n - 1):\n            for u, v, w in graph.values():\n                if distances[u] + w < distances[v]:\n                    distances[v] = distances[u] + w\n        return distances\n\n    distances = get_distances(graph, k)\n    distances = sorted(distances.items(), key=lambda x: x[1])\n    return''.join(map(str, [i[1] for i in distances]))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 243,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nn, m, k = map(int, stdin.readline().split())\nx = set(map(int, stdin.readline().split()))\ngraph = [list(map(int, stdin.readline().split())) for _ in range(m)]\n\ndef"
    },
    {
        "number": 243,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 243,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 243,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2 3 2\\n2 1\\n1 2 3\\n1 2 2\\n2 2 1\\n\")\n    '2 2'\n    >>> solution(\"4 5 3\\n1 2 3\\n1 2 5\\n4 2 1\\n2 3 2\\n1 4 4\\n1 3 3\\n\")\n    '3 3 3'\n    >>> solution(\"10 7 3\\n6 1 8\\n7 1 9\\n8 1 10\\n7 2 8\\n2 9 10\\n7 3 9\\n4 5 10\\n5 6 5\\n6 4 4\\n8 4 1\\n6 10 1\\n4 10 3\\n\")\n    '3 3 4'\n    >>> solution(\"4 5 3\\n1 2 3\\n1 2 5\\n4 2 1\\n2 3 2\\n1 4 4\\n1 3 3\\n\")\n    '3 3 3'\n    \"\"\"\n    n, m, k = [int(x) for x in stdin.split()]\n    edges = []\n    for _ in range(m):\n        edges.append([int(x) for x in stdin.split()[1:]])\n    distances = [float(\"inf\")] * n\n    distances[k - 1] = 0\n    for _ in range(n - 1):\n        for u, v, w in edges:\n            if distances[u - 1] + w < distances[v - 1]:\n                distances[v - 1] = distances[u - 1] + w\n    for u, v, w in edges:\n        if distances[u - 1] + w < distances[v - 1]:\n            distances[v - 1] = distances[u - 1] + w\n    return \" \".join(map(str, distances))\n"
    },
    {
        "number": 243,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split('\\n')[0].split())\n    special = [int(v) for v in stdin.split('\\n')[1].split()]\n    special = set(special)\n    graph = {}\n    for i in range(1, m + 1):\n        u, v, w = map(int, stdin.split('\\n')[i].split())\n        if u not in graph:\n            graph[u] = set()\n        if v not in graph:\n            graph[v] = set()\n        graph[u].add((v, w))\n        graph[v].add((u, w))\n    queue = deque([])\n    dist = {}\n    dist[0] = 0\n    queue.append(0)\n    while len(queue) > 0:\n        v = queue.pop()\n        if v in special:\n            result = dist[v]\n            break\n        for u, w in graph.get(v, []):\n            if u not in dist:\n                dist[u] = dist[v] + w\n                queue.append(u)\n    special.add(0)\n    return''.join(map(str, [dist.get(i, 0) for i in special]))"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    swap_number = n % 4\n    if swap_number == 0:\n        return '0'\n    return '1' if swap_number % 2 == 1 else '2'\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split('\\n'))\n    shells = [0,1,2]\n    for i in range(n):\n        if i % 2:\n            shells[0], shells[1] = shells[1], shells[0]\n        else:\n            shells[1], shells[2] = shells[2], shells[1]\n    return str(shells[x])\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    shells = [0, 1, 2]\n    shell = int(stdin.split()[1])\n    moves = int(stdin.split()[0])\n    for m in range(moves):\n        if m % 2 == 1:\n            shells[0], shells[1] = shells[1], shells[0]\n        else:\n            shells[1], shells[2] = shells[2], shells[1]\n    return str(shells.index(shell))\n\ndef"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input_as_list = stdin.split(\"\\n\")\n    n = int(input_as_list[0])\n    x = int(input_as_list[1])\n    if (n % 2!= 0 and x == 2) or (n % 2 == 0 and x == 0):\n        return 0\n    elif (n % 2!= 0 and x == 0) or (n % 2 == 0 and x == 2):\n        return 1\n    else:\n        return 2\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    shell = 0\n    if n % 2 == 0:\n        shell = 1\n    else:\n        shell = 2\n    return shell\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    movement = int(stdin)\n    #print(movement)\n    if movement % 2 == 0:\n        return \"1\"\n    else:\n        return \"0\"\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n2\")\n    1\n    >>> solution(\"1\\n1\")\n    0\n    \"\"\"\n    n, x = map(int, stdin.split())\n    if n % 2 == 0:\n        return \"0\" if x == 1 else \"2\"\n    return \"2\" if x == 1 else \"1\"\n"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    n = int(stdin)\n    if n % 2 == 0:\n        return '0'\n    else:\n        return '1'"
    },
    {
        "number": 244,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    n = int(stdin.readline())\n    x = int(stdin.readline())\n    for i in range(n, 0, -2):\n        if i == x:\n            return (i - 1) // 2\n\nprint(solution(sys.stdin.read()))\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    points = set()\n    for _ in range(n):\n        x_1, y_1, x_2, y_2 = map(int, stdin.readline().strip().split())\n        points.add((x_1, y_1))\n        points.add((x_1, y_2))\n        points.add((x_2, y_1))\n        points.add((x_2, y_2))\n    \n    x_min = min(points, key=lambda p: p[0])[0]\n    x_max = max(points, key=lambda p: p[0])[0]\n    y_min = min(points, key=lambda p: p[1])[1]\n    y_max = max(points, key=lambda p: p[1])[1]\n    print(\"YES\" if (x_max - x_min) == (y_max - y_min) else \"NO\")\n\n\n\ndef"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip().split('\\n')\n    n = int(s[0])\n    result = 'YES'\n    if n!= len(s) - 1:\n        return 'NO'\n    s = [line.strip().split(' ') for line in s[1:]]\n    for i in range(n):\n        for j in range(i + 1, n):\n            if i!= j and (\n                int(s[i][0]) < int(s[j][2])\n                and int(s[i][1]) < int(s[j][3])\n                and int(s[i][2]) > int(s[j][0])\n                and int(s[i][3]) > int(s[j][1])\n            ):\n                result = 'NO'\n                break\n        if result == 'NO':\n            break\n    return result\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x = list(map(int, stdin.split(\"\\n\")[1:]))\n    \n    x.sort(key=lambda x:x[0])\n    x.sort(key=lambda x:x[1])\n    \n    left = x[0][0]\n    right = x[-1][0]\n    up = x[0][1]\n    down = x[-1][1]\n    \n    if right - left == down - up and left == right == up == down:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    https://app.codility.com/demo/results/training9H6JW3-Y5Z/\n    '''\n    stdin = stdin.split(\"\\n\")\n    \n    coordinates = []\n    for line in stdin[1:-1]:\n        coordinates.append(list(map(int, line.split())))\n    \n    max_x = max(coordinates, key=lambda x: x[2])[2]\n    max_y = max(coordinates, key=lambda x: x[3])[3]\n    \n    for x_1, y_1, x_2, y_2 in coordinates:\n        for x in range(x_1, x_2):\n            for y in range(y_1, y_2):\n                if [x, y] not in coordinates:\n                    return \"NO\"\n                    \n    if len(coordinates) < 2:\n        return \"NO\"\n        \n    return \"YES\""
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.readline().split()\n    x_1, y_1, x_2, y_2 = list(map(int, line))\n    line = stdin.readline().split()\n    x_3, y_3, x_4, y_4 = list(map(int, line))\n    line = stdin.readline().split()\n    x_5, y_5, x_6, y_6 = list(map(int, line))\n\n    x_max = max(x_1, x_3, x_5, x_2)\n    x_min = min(x_1, x_3, x_5, x_2)\n    y_max = max(y_1, y_3, y_5, y_2)\n    y_min = min(y_1, y_3, y_5, y_2)\n    #print(x_max, x_min, y_max, y_min)\n    if x_max == x_min and y_max == y_min:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    '''\n    n = int(stdin)\n    \n    lst = []\n    for i in range(n):\n        x_1, y_1, x_2, y_2 = stdin.split(' ')\n        x_1, y_1, x_2, y_2 = int(x_1), int(y_1), int(x_2), int(y_2)\n        lst.append((x_1, y_1, x_2, y_2))\n    \n    lst = sorted(lst, key=lambda x: x[1])\n    lst = sorted(lst, key=lambda x: x[3])\n    \n    for i in range(n - 1):\n        if lst[i][1]!= lst[i + 1][1]:\n            return 'NO'\n        if lst[i][2]!= lst[i + 1][2]:\n            return 'NO'\n    return 'YES'\n    '''\n    \n    def check_square(lst):\n        x_1 = lst[0][0]\n        x_2 = lst[0][2]\n        y_1 = lst[0][1]\n        y_2 = lst[0][3]\n        for i in range(1, len(lst)):\n            if lst[i][0]!= x_1 and lst[i][0]!= x_2:\n                return False\n            if lst[i][2]!= x_1 and lst[i][2]!= x_2:\n                return False\n            if lst[i][1]!= y_1 and lst[i][1]!= y_2:\n                return False\n            if lst[i][3]!= y_1 and lst[i][3]!= y_2:\n                return False\n            x_1 = lst[i][0]\n            x_2 = lst[i][2]\n            y_1 = lst[i][1]\n            y_2 = lst[i][3]\n        return True\n    \n    n = int(stdin)\n    lst = []\n    for i in range(n):\n        x_1, y_1, x_2, y_2 = stdin.split(' ')\n        x_1, y_1, x_2, y_2 = int(x_1), int(y_1), int(x_2), int(y_2)\n        lst.append((x_1, y_1, x_2, y_2))\n    \n    lst = sorted(lst, key=lambda x: x[1])\n    lst = sorted(lst, key=lambda x: x[3])\n    \n    if len(set([tuple(sorted([lst[i][1], lst[i + 1][1]])) for i in range(len(lst) - 1)]))!= 1 or len(set([tuple(sorted([lst[i][3], lst[i + 1][3]])) for i in range(len(lst) - 1)]))!= 1:\n        return 'NO'\n    \n    for i in range(n - 1):\n        if lst[i][1]!= lst[i + 1][1]:\n            return 'NO'\n        if lst[i][3]!= lst[i + 1][3]:\n            return 'NO'\n    \n    for i in range(len(lst)):\n        if check_square(lst[:i] + lst[i + 1:]) is False:\n            return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    rectangles = []\n    for _ in range(n):\n        rectangles.append([int(i) for i in stdin.readline().split()])\n    points = []\n    for x1, y1, x2, y2 in rectangles:\n        points += [(x1, y1), (x2, y1), (x1, y2), (x2, y2)]\n    points = set(points)\n    for x1, y1, x2, y2 in rectangles:\n        points.remove((x1, y1))\n        points.remove((x1, y2))\n        points.remove((x2, y1))\n        points.remove((x2, y2))\n    if len(points) > 0:\n        return 'NO'\n    else:\n        return 'YES'\n"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve exercise.\"\"\"\n    pass\n\n\ndef"
    },
    {
        "number": 245,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    returns True if rectangles are square\n    \"\"\"\n    \n    stdin = stdin.split('\\n')\n    rectangles = []\n    for line in stdin[1:]:\n        x1, y1, x2, y2 = map(int, line.split())\n        rectangles.append((x1, y1, x2, y2))\n    \n    rectangles.sort()\n    \n    border = set()\n    # add border points\n    for x1, y1, x2, y2 in rectangles:\n        border.add(tuple(sorted([x1, y1, x2, y1])))\n        border.add(tuple(sorted([x1, y2, x2, y2])))\n        border.add(tuple(sorted([x1, y1, x1, y2])))\n        border.add(tuple(sorted([x2, y1, x2, y2])))\n    \n    \n    count = 0\n    for x1, y1, x2, y2 in rectangles:\n        count += len(set(sorted([(x1, y1), (x2, y1), (x1, y2), (x2, y2)])) - border)\n        \n    if count == 0:\n        return 'YES'\n    return 'NO'\n    "
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = list(map(int, stdin.split()))\n    return str(sum([i for i in range(n + 1)]) - sum([int(i) for i in str(n)]))\n\n\ndef"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split(' '))\n    nums = [int(x) for x in str(n)]\n    first = sum(nums)\n    if s < 10:\n        return 0\n    if s >= 10:\n        return 1\n    count = 0\n    for i in range(len(nums) - 1):\n        if sum(nums[i + 1:]) - sum(nums[:i + 1]) >= s:\n            count += 1\n    return count"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    return str(sum([1 if int(d) - sum([int(i) for i in list(str(d))]) >= s else 0 for d in range(1, n + 1)]) * n)\n\n\n\ndef"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    counter = 0\n    for i in range(1, n + 1):\n        sum_of_digits = sum(map(int, str(i)))\n        if i - sum_of_digits >= s:\n            counter += 1\n    return str(counter)\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the quantity of really big numbers\n    that are not greater than n.\n\n    >>> solution('''12 1''')\n    '''3'''\n\n   ...\n\n    def get_digits(n: int) -> list[int]:\n        '''\n        Returns a list of digits of the\n        number n in reverse order.\n        '''\n        digit_list = []\n        while n:\n            digit_list.append(n % 10)\n            n //= 10\n        return digit_list\n\n   ...\n\n    def is_bigger(n: int, s: int) -> bool:\n        '''\n        Returns True if x is greater than n\n        and the difference between them is less than s,\n        otherwise False.\n        '''\n        x_digits = get_digits(n)\n        n_digits = get_digits(n)\n        x_sum = sum(x_digits)\n        n_sum = sum(n_digits)\n        if x_sum - n_sum < s:\n            return False\n        return x_sum > n_sum\n\n   ...\n\n    n, s = tuple(map(int, stdin.split(' ')))\n    count = 0\n    for i in range(n):\n        if is_bigger(i, s):\n            count += 1\n    return count\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)\n\nprint(solution('12 1'))\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    return n - sum([int(i) for i in str(n)]) - n if s > sum([int(i) for i in str(n)]) else 0\n\n\ndef"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split(' '))\n    return print(sum(int(x) for x in str(n) if int(x) - int(x) >= s))\n"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\"\"\"\nimport math\n\n\ndef"
    },
    {
        "number": 246,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, s = list(map(int, stdin.split(' ')))\n    return str(sum(n - sum(map(int, str(n))) >= s))\n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\nreturn str()"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    return \"\"\n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 1 1\n   ... 1 -1\n   ... 2 2''')\n    'YES'\n    >>> solution('''5\n   ... 0 0\n   ... 1 1\n   ... 2 1\n   ... 1 1\n   ... 2 3''')\n    'YES'\n    >>> solution('''5\n   ... 1 0\n   ... 2 1\n   ... 1 1\n   ... 2 3\n   ... 4 5''')\n    'NO'\n    \"\"\"\n   ..."
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\n\u0423 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c n \u0442\u043e\u0447\u0435\u043a \u043d\u0430 \u043f\u043b\u043e\u0441\u043a\u043e\u0441\u0442\u0438. \u0412\u0441\u0435 \u0442\u043e\u0447\u043a\u0438 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u043b\u0438\u043d\u0435\u0439\u043d\u044b\u043c\u0438 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u0430\u043c\u0438, \u0430 \u0432\u0441\u0435 \u0442\u043e\u0447\u043a\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b.\n\n\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0434\u0432\u0435 \u043f\u0440\u044f\u043c\u044b\u0435 (\u043d\u0435 \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0434\u0438\u0430\u0433\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0435), \u0442\u043e\u0433\u0434\u0430 \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u044d\u0442\u043e \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u0442\u043e\u0433\u043e, \u0441\u043c\u043e\u0436\u0435\u0442\u0435 \u043b\u0438 \u0432\u044b \u043d\u0430\u0440\u0438\u0441\u043e\u0432\u0430\u0442\u044c \u044d\u0442\u0438 \u0434\u0432\u0430 \u043f\u0440\u044f\u043c\u044b\u0445?\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0432\u043e\u0434\u0430\n\n\u041d\u0430 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0432\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u043e\u0434\u043d\u043e \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e n (1\u2264n\u226410^5) \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0442\u043e\u0447\u0435\u043a \u043d\u0430 \u043f\u043b\u043e\u0441\u043a\u043e\u0441\u0442\u0438. \u0417\u0430\u0442\u0435\u043c n \u0441\u0442\u0440\u043e\u043a \u0441 \u0446\u0435\u043b\u044b\u043c\u0438 \u0447\u0438\u0441\u043b\u0430\u043c\u0438 x_{i} \u0438 y_{i} (|x_{i}|, |y_{i}| \u2264 10^9) \u2014 \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u044b i-\u0439 \u0442\u043e\u0447\u043a\u0438. \u0412\u0441\u0435 \u0442\u043e\u0447\u043a\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0432\u043e\u0434\u0430\n\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u00abYES\u00bb (\u0431\u0435\u0437 \u043a\u0430\u0432\u044b\u0447\u0435\u043a), \u0435\u0441\u043b\u0438 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u044d\u0442\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u043c, \u0438 \u00abNO\u00bb \u0432 \u043f\u0440\u043e\u0442\u0438\u0432\u043d\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435.\n\n\u041f\u0440\u0438\u043c\u0435\u0440 1\n\n\u0412\u0432\u043e\u0434    \n5\n0 0\n0 1\n1 1\n1 -1\n2 2\n\n\u0412\u044b\u0432\u043e\u0434\nYES\n\n\u041f\u0440\u0438\u043c\u0435\u0440 2\n\n\u0412\u0432\u043e\u0434    \n5\n0 0\n1 0\n2 1\n1 1\n2 3\n\n\u0412\u044b\u0432\u043e\u0434\nNO\n\n\u041f\u0440\u0438\u043c\u0435\u0440 3\n\n\u0412\u0432\u043e\u0434    \n4\n0 0\n0 1\n1 1\n1 -1\n2 2\n\n\u0412\u044b\u0432\u043e\u0434\nYES\n\n\u041f\u0440\u0438\u043c\u0435\u0440 4\n\n\u0412\u0432\u043e\u0434    \n4\n0 0\n1 0\n2 1\n1 1\n3 3\n\n\u0412\u044b\u0432\u043e\u0434\nNO\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if len(stdin) >= 4 else 'NO'\n'''\n\ndef"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport sys\nimport math\n\ndef"
    },
    {
        "number": 247,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return result\n\n\"\"\""
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k, t = map(int, stdin.split())\n    return str(len((2 * k) ** t) * (k - 1) ** t * k ** t)\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k, t = map(int, stdin.split())\n    return str(int(a**b % (k ** t)))\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k, t = [int(x) for x in stdin.split()]\n    # n = k * t\n    # k = t ** 0.5\n    # t = int(t ** 0.5)\n    # print(a, b, k, t)\n    # a, b, k, t = [int(x) for x in stdin.split()]\n    # return '{} {} {} {}'.format((k * t) ** 2 + (k * t) - 1, (k * t) ** 2 - (k * t) + 1, k * t, k * t - 1)\n    \n    k = min(k, t)\n    t = int(t ** 0.5)\n    return '{} {} {} {}'.format((a + k * t) * (b + k * t),\n                                (a - k * t) * (b + k * t),\n                                (a - k * t) * (b - k * t),\n                                (a + k * t) * (b - k * t))\n\na, b, k, t = [int(x) for x in input().split()]\nprint(solution(input()))"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k, t = [int(i) for i in stdin.split(' ')]\n    return (2 * k + 1) ** t % 1000000007\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k, t = [int(i) for i in stdin.split()]\n    x = (2 * k + 1) ** t\n    y = (2 * k + 1) ** t - 2\n    return \"{}\".format(x // y)\nprint(solution(input()))\n\n\ndef"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k, t = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    c = a\n    d = b\n    ans = 0\n    while t:\n        e = k - (k // 2)\n        ans += c * e + (k // 2) * (k // 2) * d * t\n        e = k // 2\n        ans += (k // 2) * (k // 2) * d * e + d * e + k // 2 * c * e\n        e = k // 2\n        ans += k // 2 * (k // 2) * c * e + c * e + (k // 2) * c * e\n        e = k // 2\n        ans += e * (k // 2) * c * e + c * e + (k // 2) * c * e\n        e = k // 2\n        ans += e * (k // 2) * c * e + c * e + (k // 2) * c * e\n        t -= 1\n        c = max(a, b)\n        d = min(a, b)\n    return str(ans % (10**9 + 7))\n\n\"\"\"\n\ndef"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k, t = map(int, stdin.split())\n    if t == 1:\n        return str(k - 1)\n    ans = k * k - (k - 1) * (k - 1) + 1\n    ans *= 2 * k * t\n    ans += (k - 1) ** 2 * t\n    ans %= 10 ** 9 + 7\n    return str(ans)\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k, t = [int(x) for x in stdin.split(' ')]\n    print(2*(k**t) - 1)\n    return \"\"\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k, t = [int(i) for i in stdin.split()]\n    return f\"{(2*k)**t}\"[-1]\n"
    },
    {
        "number": 248,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('1 1 1 2\\n')\n    6\n    \"\"\"\n    a, b, k, t = map(int, stdin.split())\n    return (a + b + k) * (k + 1) ** (t - 1) % (10 ** 9 + 7)\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, l, x, y = [int(i) for i in stdin.split(\" \")]\n    marks = [int(i) for i in stdin.split(\" \")]\n    marks.sort()\n    v = 0\n    for i in range(1, n):\n        diff = marks[i] - marks[i-1]\n        if diff > x:\n            v += 1\n        if diff > y:\n            break\n    return str(v) + \" \" + \" \".join([str(i) for i in marks])\n\nprint(solution(input()))"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, l, x, y = map(int, stdin.split())\n    marks = list(map(int, stdin.split()))\n\n    return f'{min(abs(l - x), abs(l - y))} {l - min(abs(l - x), abs(l - y))}'"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split('\\n')\n    n, l, x, y = map(int, input[0].split())\n    ruler = list(map(int, input[1].split()))\n    x_sum = 0\n    y_sum = 0\n    for i in range(1, n):\n        x_sum += abs(ruler[i] - ruler[i - 1])\n        y_sum += abs(ruler[i] - l)\n    diff_x = x_sum - x\n    diff_y = y_sum - y\n    # print(x_sum, y_sum)\n    # print(diff_x, diff_y)\n    res = []\n    if diff_x > diff_y:\n        res.append(diff_y)\n        res.append(diff_y + diff_x - diff_y)\n    elif diff_y > diff_x:\n        res.append(diff_x)\n        res.append(diff_x + diff_y - diff_x)\n    else:\n        res.append(diff_x)\n        res.append(diff_y)\n    for i in range(2):\n        print(res[i], end=' ')\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, l, x, y = map(int, stdin.split())\n    a = [int(item) for item in stdin.split()]\n    l2 = [0] * n\n    for i in range(n):\n        l2[i] = l - a[i]\n    l2.sort()\n    print(l2)\n    count = 0\n    i = 0\n    j = 0\n    while(i < n - 1):\n        while(l2[i] == l2[j]):\n            count += 1\n            if count >= x:\n                break\n            j += 1\n            if j >= n:\n                break\n        if count >= x:\n            break\n        i += 1\n    if count < x:\n        count = x\n    return count, l2[j]"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, l = list(map(int, stdin.split()))\n    stdin = stdin.split()\n    dists = list(map(int, stdin))\n    dists.sort()\n    k = l - dists[0]\n    if k < dists[-1]:\n        dists.append(l - k)\n    return n - len(dists)\n\n\ndef"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, l, x, y = map(int, stdin.split(' '))\n    ruler = list(map(int, stdin.split(' ')[1:]))\n    \n    if x < y:\n        x, y = y, x\n    \n    max_ = l\n    max_distance = max_ - min(ruler)\n    \n    while max_distance > x:\n        max_ = max_ - x\n        max_distance = max_ - min(ruler)\n    \n    max_distance = max_distance - y\n    \n    # it can be smaller than 0, so that we cannot be sure that the marks are enough\n    if max_distance < 0:\n        return str(0)\n    else:\n        return str(max_distance)\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, l, x, y = [int(s) for s in lines[0].split()]\n    ruler = [int(s) for s in lines[1].split()]\n    ruler.sort()\n    ruler.append(l)\n\n    left = 0\n    right = 0\n\n    res = 0\n    ruler_hash = {}\n    for i in range(n):\n        if ruler[i] not in ruler_hash:\n            ruler_hash[ruler[i]] = 0\n        ruler_hash[ruler[i]] += 1\n\n    d = abs(ruler[0] - ruler[-1])\n    for i in range(n):\n        if x <= d:\n            ruler[i] += x\n        else:\n            ruler[i] += d\n\n        if abs(ruler[i] - l) % y == 0:\n            left = ruler[i]\n            right = ruler[i + 1]\n            break\n        else:\n            res += 1\n\n    if left in ruler_hash:\n        ruler_hash[left] -= 1\n\n    if right in ruler_hash:\n        ruler_hash[right] -= 1\n    ruler_hash[ruler[-1]] += 1\n\n    ruler_hash_sort = list(ruler_hash.items())\n    ruler_hash_sort.sort()\n    ruler_hash_sort.reverse()\n\n    res += len(ruler_hash_sort)\n\n    ruler = []\n    for i, j in ruler_hash_sort:\n        for _ in range(j):\n            ruler.append(i)\n\n    return res\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    pass\n"
    },
    {
        "number": 249,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    pass\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the maximum volume of the cake that Babaei can make.\n\n    >>> solution('100 30\\n40 10\\n1 1\\n9 7\\n1 4\\n10 7')\n    '942477.796077000'\n    \"\"\"\n    cakes = [tuple(map(int, line.split())) for line in stdin.splitlines()]\n    cakes.sort(reverse=True)\n    best_volume = 0\n    # keep track of the best cake\n    best_cake = None\n    # iterate through sorted cakes\n    for cake in cakes:\n        if cake[1] > best_volume:\n            best_volume = cake[1]\n            best_cake = cake\n    # compute volume of the best cake\n    volume = 2 * math.pi * best_volume * best_cake[0]\n    # format the answer\n    return \"{:.6f}\".format(volume)\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    find the best way to use cake to get the max volume.\n    \"\"\"\n    n = int(stdin)\n    arr = []\n    for i in range(n):\n        r, h = map(int, stdin.readline().split())\n        arr.append((r, h))\n    arr = sorted(arr, key=lambda x: x[0], reverse=True)\n    dp = [0]\n    res = 0\n    for r, h in arr:\n        n = len(dp)\n        for j in range(n):\n            dp.append(dp[j] + r * h)\n        res = max(res, dp[n])\n    return res\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def get_volume(r, h):\n        pi = 3.14\n        v = pi * r * r * h\n        return v\n\n    n = int(stdin.readline().strip())\n    cakes = []\n    for i in range(n):\n        r, h = [int(i) for i in stdin.readline().strip().split()]\n        cakes.append((r, h))\n    cakes = sorted(cakes, key=lambda cake: cake[1])\n    res = 0\n    for i in range(n):\n        r, h = cakes[i]\n        if i == 0:\n            res += get_volume(r, h)\n        else:\n            # h < cakes[i-1][1]\n            # res + get_volume(cakes[i-1][0], cakes[i-1][1])\n            # res + get_volume(cakes[i][0], h)\n            # res + get_volume(cakes[i][0], cakes[i][1])\n            # = max(res, get_volume(cakes[i][0], cakes[i][1]))\n            # = max(res, max(get_volume(cakes[i][0], cakes[i-1][1]), get_volume(cakes[i][0], h)))\n            # = max(res, max(get_volume(cakes[i][0], cakes[i][1]), max(get_volume(cakes[i][0], cakes[i-1][1]), get_volume(cakes[i][0], h))))\n            # = max(res, max(get_volume(cakes[i][0], cakes[i][1]), max(get_volume(cakes[i][0], cakes[i][1]), max(get_volume(cakes[i][0], cakes[i-1][1]), get_volume(cakes[i][0], h)))))\n            res = max(res, max(get_volume(cakes[i][0], cakes[i][1]), max(get_volume(cakes[i][0], cakes[i][1]), max(get_volume(cakes[i][0], cakes[i-1][1]), get_volume(cakes[i][0], h)))))\n    return str(round(res, 6))\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, *cakes = [int(v) for v in stdin.split()]\n    cakes.sort()\n    res, maxVol = 0, 0\n    for cake1, cake2 in zip(cakes, cakes[1:]):\n        maxVol = max(maxVol, cake1 * cake2)\n        res += maxVol\n    return str(res)\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    cake_length = int(stdin.split()[0])\n    cake_height = [int(x) for x in stdin.split()[1:]]\n    cake_volume = [x * y for x, y in zip(cake_height, range(1, cake_length + 1))]\n    cake_volume.sort()\n    result = 0\n    for i in range(cake_length):\n        if i > 0:\n            result = max(result, cake_volume[i] * cake_length - cake_volume[i - 1] * cake_length)\n        else:\n            result = max(result, cake_volume[i] * cake_length)\n    return result / cake_volume[-1]\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport sys\n\nn = int(input())\ncakes = []\nfor _ in range(n):\n    r, h = map(int, sys.stdin.readline().split())\n    cakes.append((r, h))\ncakes.sort()\nvolume, f = 0, 0\n\nfor i in range(n - 1, -1, -1):\n    if cakes[i][0] < cakes[i - 1][0]:\n        f = i\n        break\n\nfor i in range(f):\n    volume += cakes[i][1]\n\nfor i in range(f, n):\n    volume += (cakes[i][0] - cakes[i - 1][0]) * cakes[i - 1][1]\nprint(volume)\n"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    cakes = []\n    for _ in range(n):\n        radius, height = map(int, stdin.readline().split())\n        cakes.append([radius, height])\n    cakes.sort(key=lambda x: x[1])\n    max_volume = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            volume = cakes[i][1] * cakes[j][0]**2\n            if volume > max_volume:\n                max_volume = volume\n    return str(max_volume)\n\n\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 250,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    "
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    @param stdin:\n    @return:\n    '''\n\n    # Parsing input\n    n, k = [int(x) for x in stdin.split('\\n')[0].split()]\n    heights = [int(x) for x in stdin.split('\\n')[1].split()]\n\n    # Find minimum number of slices\n    slices = 0\n    for h in heights:\n        slices += h // k if h % k == 0 else h // k + 1\n\n    # Return answer\n    return str(slices)\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split(' ')))\n    h = list(map(int, stdin.split(' ')))\n\n    l = len(h)\n    m = 0\n    while l > 1:\n        s = []\n        for i in range(l):\n            if h[i] > m:\n                s.append(h[i])\n                h[i] -= 1\n        m = s[0]\n        l = len(s)\n    print(s)\n\nsolution(stdin)\n\"\"\"\n\n\"\"\"\nInput:\n5 5\n3 1 2 2 4\n\nOutput:\n2\n\"\"\"\n\n\ndef"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\nfrom math import ceil\n\n\ndef"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return str.\n\n    >>> solution('''5 5\n   ... 3 1 2 2 4\n   ... ''')\n    '2'\n    \"\"\"\n   ...\n    \n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return \"\"\n    n, k = [int(x) for x in stdin.split(' ')]\n    h = [int(x) for x in stdin.split(' ')]\n\n    dp = [[0] * (k + 1) for _ in range(n)]\n    for i in range(k + 1):\n        dp[0][i] = k - i\n    for i in range(1, n):\n        for j in range(k + 1):\n            dp[i][j] = min([dp[i - 1][j - n + h[i]] for n in range(h[i], 0, -1)]) + 1\n\n    print(min([dp[-1][j] for j in range(k + 1)]))\n    return \"\"\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    h: List[int] = [int(x) for x in stdin.split()]\n    k: int = int(stdin.split()[1])\n    if k >= len(h):\n        return 0\n    h.sort()\n    res: int = 0\n    for i in range(k):\n        res += h[i] - h[i + k]\n    return res\n"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    l = stdin.split(\"\\n\")\n    n, k = int(l[0].split(\" \")[0]), int(l[0].split(\" \")[1])\n    h = [int(i) for i in l[1].split(\" \")]\n    h.sort()\n    n, k, h = len(h), k, h\n    cost = 0\n    for i in range(n - 1):\n        if h[i + 1] - h[i] > k:\n            cost += (h[i + 1] - h[i]) - k\n            h[i + 1] -= (h[i + 1] - h[i]) - k\n        if h[i + 1] - h[i] == k:\n            cost += k\n    return cost\nsolution(\"5 5\\n3 1 2 2 4\")\n\n\n\n-----Test-----\n\nOK\n\ndef"
    },
    {
        "number": 251,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    h = list(map(int, stdin.split()))\n\n    def filter_cost(cost):\n        return cost <= k\n\n    def filter_height(height):\n        return height > min(h)\n\n    slices = list(filter(filter_cost, range(max(h), 0, -1)))\n    slices = list(filter(filter_height, slices))\n    return str(len(slices))\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\ndef"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    :param stdin: Input from stdin\n    :return: Output to stdout\n    '''\n    n = int(stdin)\n    cards = [int(x) for x in stdin.split(' ')]\n    cards = sorted(cards)\n    cards.insert(0, 0)\n    cards.append(0)\n    cards = cards[1:-1]\n    mx = 0\n    for i in range(1, len(cards)):\n        mx = max(mx, cards[i] - cards[i - 1])\n    return mx\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # get the input string\n    cards = stdin.split('\\n')[0].split(' ')\n    # remove empty strings\n    cards = [card for card in cards if card!= '']\n    # get the total number of cards\n    total = int(cards.pop(0))\n    # get the values of the cards\n    values = [int(i) for i in cards]\n    # the number of cards must be the same as the number of values\n    assert len(values) == total\n    # sort the values\n    values.sort()\n    # the total score is the sum of the values of the cards\n    total_score = sum(values)\n    # the total number of cards is the length of the values\n    total_cards = len(values)\n    # store the first card\n    first_card = values[0]\n    # initialize the current minimum score to the total score\n    current_min = total_score\n    # initialize the minimum index to the index of the first card\n    min_index = 0\n    # iterate over the card values\n    for card in values:\n        # the current minimum score is updated\n        current_min = min(current_min, total_score - card)\n        # the minimum index is updated\n        min_index = max(min_index, values.index(card))\n        # the total score is updated\n        total_score -= card\n    # the minimum score is the current minimum score\n    minimum_score = current_min\n    # the minimum index is the index of the first card\n    min_index = 0\n    # iterate over the card values\n    for card in values[min_index + 1:]:\n        # the current minimum score is updated\n        current_min = min(current_min, total_score - card)\n        # the minimum index is updated\n        min_index = max(min_index, values.index(card))\n        # the total score is updated\n        total_score -= card\n    # the minimum score is the current minimum score\n    minimum_score = current_min\n    # the minimum index is the index of the first card\n    min_index = 0\n    # iterate over the card values\n    for card in values[min_index:]:\n        # the current minimum score is updated\n        current_min = min(current_min, total_score - card)\n        # the minimum index is updated\n        min_index = max(min_index, values.index(card))\n        # the total score is updated\n        total_score -= card\n    # the minimum score is the current minimum score\n    minimum_score = current_min\n    # the minimum index is the index of the first card\n    min_index = 0\n    # iterate over the card values\n    for card in values[min_index:]:\n        # the current minimum score is updated\n        current_min = min(current_min, total_score - card)\n        # the minimum index is updated\n        min_index = max(min_index, values.index(card))\n        # the total score is updated\n        total_score -= card\n    # the minimum score is the current minimum score\n    minimum_score = current_min\n    # the minimum index is the index of the first card\n    min_index = 0\n    # iterate over the card values\n    for card in values[min_index:]:\n        # the current minimum score is updated\n        current_min = min(current_min, total_score - card)\n        # the minimum index is updated\n        min_index = max(min_index, values.index(card))\n        # the total score is updated\n        total_score -= card\n    # the minimum score is the current minimum score\n    minimum_score = current_min\n    # the minimum index is the index of the first card\n    min_index = 0\n    # iterate over the card values\n    for card in values[min_index:]:\n        # the current minimum score is updated\n        current_min = min(current_min, total_score - card)\n        # the minimum index is updated\n        min_index = max(min_index, values.index(card))\n        # the total score is updated\n        total_score -= card\n    # the minimum score is the current minimum score\n    minimum_score = current_min\n    # the minimum index is the index of the first card\n    min_index = 0\n    # iterate over the card values\n    for card in values[min_index:]:\n        # the current minimum score is updated\n        current_min = min(current_min, total_score - card)\n        # the minimum index is updated\n        min_index = max(min_index, values.index(card))\n        # the total score is updated\n        total_score -= card\n    # the minimum score is the current minimum score\n    minimum_score = current_min\n    # the minimum index is the index of the first card\n    min_index = 0\n    # iterate over the card values\n    for card in values[min_index:]:\n        # the current minimum score is updated\n        current_min = min(current_min, total_score - card)\n        # the minimum index is updated\n        min_index = max(min_index, values.index(card))\n        # the total score is updated\n        total_score -= card\n    # the minimum score is the current minimum score\n    minimum_score = current_min\n    # the minimum index is the index of the first card\n    min_index = 0\n    # iterate over the card values\n    for card in values[min_index:]:\n        # the current minimum score is updated\n        current_min = min(current_min, total_score - card)\n        # the minimum index is updated\n        min_index = max(min_index, values.index(card))\n        # the total score is updated\n        total_score -= card\n    # the minimum score is the current minimum score\n    minimum_score = current_min\n    # the minimum index is the index of the first card\n    min_index = 0\n    # iterate over the card values\n    for card in values[min_index:]:\n        # the current minimum score is updated\n        current_min = min(current_min, total_score - card)\n        # the minimum index is updated\n        min_index = max"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    count = int(stdin)\n    cards = list(map(int, stdin.split()))\n    window = [0] * (count + 1)\n    # index of the smallest element on the left of the current window\n    left = 0\n    # index of the biggest element on the right of the current window\n    right = 0\n    total = 0\n    for i in range(count):\n        window[i] = cards[i]\n        if cards[i] < cards[right]:\n            right = i\n        if cards[i] < cards[left]:\n            left = i\n        total += cards[i]\n    min_total = total\n    # sliding window on the right\n    for i in range(right, count):\n        total -= window[left]\n        total += window[i + 1]\n        min_total = min(min_total, total)\n        left += 1\n    return min_total\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split(\" \")))\n\n    left, right = 1, n\n    best_left, best_right, best_sum = left, right, 0\n\n    for i in range(n):\n        if arr[i] > 0:\n            left = i + 1\n        else:\n            right = i\n\n            if right - left > best_right - best_left:\n                best_right, best_left, best_sum = right, left, sum(arr[left - 1:right])\n\n    return best_sum\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n   ...\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = [int(i) for i in stdin.split(' ')]\n    dp = [[None for _ in range(len(x))] for _ in range(2)]\n    for i in range(len(x)):\n        dp[0][i] = x[i] + dp[0][i - 1]\n        dp[1][i] = x[i] + dp[1][i - 1]\n    return max(max(dp[0]), max(dp[1]))\n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    :param stdin: the standard input of the problem statement\n    :return: the solution of the problem statement\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    cards = [int(i) for i in stdin.split('\\n')[1].split()]\n    segment = []\n    i = 0\n    while i < n:\n        if len(cards) > 1 and cards[0] + cards[1] <= 0:\n            segment.append(cards[0])\n            segment.append(cards[1])\n            del cards[0:2]\n        else:\n            i += 1\n    segment = sorted(segment)\n    return sum(segment)\n"
    },
    {
        "number": 252,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Read number of cards, then cards values.\n    Find the maximal score that can be achieved by Bob.\n    \"\"\"\n    cards = [int(card) for card in stdin.split(\"\\n\")[0].split()]\n    max_score = 0\n    for i in range(1, len(cards)):\n        max_score = max(max_score, sum(cards[:i]))\n    return max_score\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds if it is possible to choose moments of time such that each second after switching the garlands on at least one garland will be lit\"\"\"\n    \n    a, b, c = [int(x) for x in stdin.split()]\n    \n    return 'YES' if (a * b + 2 * b * c + c * a) % a == 0 else 'NO'\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    k_1, k_2, k_3 = [int(s) for s in stdin.split('\\n')[0].split(' ')]\n    for x_1 in range(1, k_1 + 1):\n        for x_2 in range(1, k_2 + 1):\n            for x_3 in range(1, k_3 + 1):\n                if x_1 + x_2 + x_3 == k_1 + k_2 + k_3:\n                    if x_1 + x_2 + x_3 > 1:\n                        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    k1, k2, k3 = map(int, stdin.split('\\n')[0].split())\n    x1, x2, x3 = 1, 1, 1\n    for i in range(1, k1 + 1):\n        x1 = i if x1 == i - 1 else max(i - 1, x1)\n    for i in range(1, k2 + 1):\n        x2 = i if x2 == i - 1 else max(i - 1, x2)\n    for i in range(1, k3 + 1):\n        x3 = i if x3 == i - 1 else max(i - 1, x3)\n    return 'YES' if (x1 <= x2 + k1 + k3) and (x2 <= x1 + k2 + k3) and (x3 <= x1 + k2 + k1) else 'NO'\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns YES if it is possible to choose x_1, x_2 and x_3 so that\n    each second after switching the garlands on at least one garland will\n    be lit, otherwise returns NO.\n\n    >>> solution('2 2 3')\n    'YES'\n    >>> solution('4 2 3')\n    'NO'\n    \"\"\"\n    _, _, _ = map(int, stdin.split())\n\n    return \"YES\" if is_possible() else \"NO\"\n\n\ndef"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    garlands = [int(i) for i in stdin.split(\" \")]\n    if garlands[0] >= garlands[1] >= garlands[2]:\n        return \"NO\"\n    elif garlands[0] >= garlands[2]:\n        return \"YES\"\n    elif garlands[1] >= garlands[2]:\n        return \"NO\"\n    else:\n        return \"YES\"\n\"\"\"\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    k = list(map(int, stdin.split(' ')))\n    k.sort(reverse=True)\n\n    for i in range(len(k)):\n        if k[i] > i:\n            return 'NO'\n\n    return 'YES'\n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    k_1, k_2, k_3 = map(int, stdin.split(' '))\n    x_1, x_2, x_3 = 0, 0, 0\n    for i in range(k_1):\n        x_1 += i + 1\n    for i in range(k_2):\n        x_2 += i + 1\n    for i in range(k_3):\n        x_3 += i + 1\n    x_1, x_2, x_3 = max(x_1, x_2, x_3), x_1, x_2, x_3\n    if x_3 >= x_2:\n        x_2 = x_3\n    if x_2 >= x_1:\n        x_1 = x_2\n    return 'YES' if x_1 <= k_1 else 'NO'\n    \n"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(i) for i in stdin.split()]\n    x = 0\n    while x < c - b:\n        x = a * x + b * (x + c)\n    return 'YES' if x >= c else 'NO'\n\"\"\"\n\ndef"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    nums = stdin.split(\" \")\n\n    k_1 = int(nums[0])\n    k_2 = int(nums[1])\n    k_3 = int(nums[2])\n\n    max_value = 0\n    for value in [k_1, k_2, k_3]:\n        if value > max_value:\n            max_value = value\n\n    if max_value % 2!= 0:\n        return \"NO\"\n    else:\n        return \"YES\"\n\n\ndef"
    },
    {
        "number": 253,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    k1, k2, k3 = map(int, stdin.split())\n    if (k1 < k2) or (k1 < k3):\n        if (k2 < k3):\n            return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 254,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin"
    },
    {
        "number": 254,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    stdin = stdin.lower()\n    stdin = list(stdin)\n    if len(set(stdin)) == 1:\n        return 0\n    for i in range(n - 1):\n        if stdin[i] == stdin[i + 1]:\n            stdin.pop(i)\n            stdin.pop(i)\n            i = 0\n    return len(stdin)\n\nprint(solution('abaca'))\nprint(solution('abcddcba'))\n\n\nsolution('abaca') == 3\nsolution('abcddcba') == 4\n"
    },
    {
        "number": 254,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your solution here\n    #\n    # return result\n    return result\n"
    },
    {
        "number": 254,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input_length = len(stdin)\n    min_steps = 0\n    current_step = 0\n\n    for start_index in range(input_length - 1):\n        for end_index in range(start_index + 1, input_length):\n            if len(set(stdin[start_index:end_index + 1])) == 1:\n                current_step += 1\n                min_steps += 1\n    return min_steps\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 254,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\ndef"
    },
    {
        "number": 254,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin.strip()\n    min_len = len(string)\n    lst = [None] * len(string)\n    for index in range(len(string)):\n        lst[index] = [string[index], index]\n    lst = sorted(lst, key=lambda x: x[0])\n    for i in range(len(lst)):\n        start = lst[i][1]\n        for j in range(i, len(lst)):\n            if lst[j][0] == lst[i][0]:\n                continue\n            end = lst[j][1]\n            if end - start <= min_len:\n                min_len = end - start\n                lst[i][0] = lst[j][0]\n                lst[i][1] = lst[j][1]\n    new_string = ''\n    for index in range(len(lst)):\n        new_string += lst[index][0]\n    return len(string) - len(new_string)\n\n\nprint(solution(input()))"
    },
    {
        "number": 254,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    s = stdin[1]\n    if n == 1:\n        return 0\n    return min(2 * n - 3, len(s))\n"
    },
    {
        "number": 254,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your solution here\n    #\n    #  Return type and arguments\n    #  ==========================\n    #  @param stdin string\n    #  @return string\n    #\n    #  ===============\n    #  template:\n    #  ===============\n    #  time = O(n^2)\n    #  space = O(n)\n    #  ===============\n\n    n = int(stdin)\n    s = stdin[0:n]\n\n    def substrings_with_same_letters(substring):\n        res = set()\n        for i in range(len(substring)):\n            for j in range(i, len(substring)):\n                if substring[i:j] in res:\n                    continue\n                res.add(substring[i:j])\n        return res\n\n    def answer(s):\n        # return min(len(s) - len(substring) + 1\n        #            for substring in substrings_with_same_letters(s))\n        if not s:\n            return 0\n        count = 0\n        i = 1\n        while i < len(s):\n            if s[i] == s[i - 1]:\n                count += 1\n                j = i\n                while j < len(s) and s[j] == s[j - 1]:\n                    j += 1\n                    count += 1\n                i = j\n            else:\n                i += 1\n        return count\n\n    return answer(s)\n"
    },
    {
        "number": 254,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split(\"\\n\")\n    n = int(input_data[0])\n    string = input_data[1]\n    result = len(string)\n    for i in range(len(string)):\n        new_string = string[i:]\n        for j in range(len(new_string)):\n            if string[:j + 1] == new_string[:j + 1]:\n                result = min(result, len(string) - j - 1)\n    print(result)\n\n\nsolution(input())\n"
    },
    {
        "number": 254,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, boys, girls = list(map(int, stdin.split('\\n')[0].split()))\n    boys = sorted(list(map(int, stdin.split('\\n')[1].split())))\n    girls = sorted(list(map(int, stdin.split('\\n')[2].split())))\n\n    d = {}\n    for i in range(len(boys)):\n        if boys[i] not in d:\n            d[boys[i]] = [i]\n        else:\n            d[boys[i]].append(i)\n\n    ans = 0\n    for i in range(len(girls)):\n        if girls[i] in d and i not in d[girls[i]]:\n            ans += 1\n        elif girls[i] in d and i in d[girls[i]]:\n            d[girls[i]].remove(i)\n    return ans\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    boys = [int(x) for x in stdin.split('\\n')[0].split()]\n    girls = [int(x) for x in stdin.split('\\n')[2].split()]\n\n    boys.sort(reverse=True)\n    girls.sort(reverse=True)\n\n    pairs = 0\n    while len(boys) > 0 and len(girls) > 0:\n        if abs(boys[0] - girls[0]) <= 1:\n            boys = boys[1:]\n            girls = girls[1:]\n            pairs += 1\n        elif boys[0] > girls[0]:\n            boys = boys[1:]\n        elif boys[0] < girls[0]:\n            girls = girls[1:]\n    print(pairs)\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # this works but it is very slow\n    a, b = stdin.split('\\n')\n    a = list(map(int, a.split(' ')))\n    b = list(map(int, b.split(' ')))\n    #n = len(a)\n    #m = len(b)\n\n    c = a + b\n    c.sort()\n\n    print(c)\n\n    result = 0\n    for i in range(len(c)):\n        print(i)\n        if i + 1 < len(c):\n            if c[i + 1] - c[i] < 2:\n                result += 1\n            else:\n                result = 0\n\n    print(result)\n    return str(result)\n\n\ndef"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, *b = map(int, stdin.split())\n    m, *g = map(int, stdin.split())\n\n    boys, girls = [0] * 1001, [0] * 1001\n    for i in range(n):\n        boys[b[i]] += 1\n\n    for j in range(m):\n        girls[g[j]] += 1\n\n    max_pairs = 0\n    for i in range(1000):\n        for j in range(1000):\n            if i == j:\n                continue\n\n            if abs(boys[i] - boys[j]) <= 1 and abs(girls[i] - girls[j]) <= 1:\n                max_pairs += 1\n\n    return max_pairs\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    return \"\".join(stdin.split())\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    boys = [int(x) for x in stdin.strip().split('\\n')[0].split(' ')]\n    girls = [int(x) for x in stdin.strip().split('\\n')[1].split(' ')]\n    boys.sort()\n    girls.sort()\n    cost = 0\n    for boy in range(len(boys)):\n        for girl in range(len(girls)):\n            cost = max(cost, abs(boys[boy] - girls[girl]))\n    return str(cost)\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    boys = sorted(map(int, stdin.split()[:n]))\n    girls = sorted(map(int, stdin.split()[n:]))\n\n    # Perform a binary search on the difference between the sum of boys and girls' scores.\n    # If a pair is valid, we know that the difference between the scores of these two pairs is 1.\n    # By doing a binary search, we can find the minimum possible difference between the sum of scores of two pairs.\n    lo = 0\n    hi = n + m + 1\n    ans = 0\n    while lo < hi:\n        # A valid pair can be formed if and only if the difference between the sum of their scores is 1.\n        mid = (lo + hi) // 2\n        if sum(\n            sorted(\n                [\n                    (b + g) % m\n                    for b, g in zip(boys, girls)\n                    if abs(b - g) > mid\n                ]\n            )\n        ) > ans:\n            hi = mid\n            ans = sum(\n                sorted(\n                    [\n                        (b + g) % m\n                        for b, g in zip(boys, girls)\n                        if abs(b - g) > mid\n                    ]\n                )\n            )\n        else:\n            lo = mid + 1\n    return ans\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 255,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    teams_scores = [0, 0]\n    first_team = []\n    second_team = []\n    for i, score in enumerate(stdin.split()):\n        teams_scores[i % 2] += int(score)\n        first_team.append(int(score)) if i % 2 == 0 else second_team.append(int(score))\n\n    if max(teams_scores) > sum(second_team) or max(teams_scores) > sum(first_team):\n        return \"Team 1\"\n    if min(teams_scores) < sum(second_team) or min(teams_scores) < sum(first_team):\n        return \"Team 2\"\n    return \"Draw\"\n\n\nprint(solution(stdin))\n\n\"\"\"\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return 'Team 1' if int(stdin[0]) < int(stdin[1]) else 'Team 2' if int(stdin[0]) > int(stdin[1]) else 'Draw'\n\n\ndef"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    (a, b) = (int(s) for s in stdin.split())\n    if a > b:\n        return 'Team 1'\n    elif b > a:\n        return 'Team 2'\n    else:\n        return 'Draw'\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    The idea is to calculate the total values of the players of each team\n    in order to compare their skill levels. The sum of a player's skills\n    is the sum of its values in the table football. The sum of each team's\n    skill levels is greater than the sum of the other team's skill levels.\n    '''\n    stdin = stdin.split('\\n')\n    values = []\n    for i in stdin:\n        values.append(list(map(int, i.split(' '))))\n    sum1 = 0\n    sum2 = 0\n    for i in range(4):\n        sum1 += values[0][i]\n        sum2 += values[1][i]\n    if sum1 > sum2:\n        return 'Team 1'\n    elif sum2 > sum1:\n        return 'Team 2'\n    else:\n        return 'Draw'\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lst = []\n    for line in stdin.splitlines():\n        lst.append(list(map(int, line.split())))\n    lst.sort(key=lambda x: x[0])\n    lst.sort(key=lambda x: x[1])\n    max_s = 0\n    for i in range(len(lst)):\n        if lst[i][0] > lst[i][1]:\n            max_s = i\n    for j in range(len(lst)):\n        if j!= max_s:\n            if lst[j][0] < lst[j][1] and lst[j][0] > lst[max_s][0]:\n                max_s = j\n    if lst[max_s][0] > lst[max_s][1]:\n        return \"Team 1\"\n    else:\n        return \"Team 2\"\n\"\"\"\n\ndef"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    players = []\n    for i in range(len(stdin) // 2):\n        players.append([int(stdin[2 * i]), int(stdin[2 * i + 1])])\n    max_attack = max([i[1] for i in players])\n    max_defence = max([i[0] for i in players])\n    for i in range(len(players)):\n        if players[i][1] < max_attack:\n            if players[i][0] < max_defence:\n                return \"Team 1\"\n        elif players[i][1] > max_attack:\n            if players[i][0] > max_defence:\n                return \"Team 2\"\n    return \"Draw\"\n"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return a string with the result of the game.\"\"\"\n    n, a1, b1, a2, b2 = map(int, stdin.split())\n    return \"Team 1\" if b1 > a2 or a1 > b2 else \"Team 2\" if a1 > b2 or b1 > a2 else \"Draw\""
    },
    {
        "number": 256,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # \ubb38\uc790\uc5f4\uc744 \uc785\ub825\ubc1b\uae30\n    A = stdin.split('\\n')\n    # \uc2a4\ud50c\ub9bf\n    A = [list(map(int, s.split())) for s in A]\n    # A = [map(int, s.split()) for s in A]\n    # \uac01 \ud300\uc5d0 \ub300\ud55c \uc2a4\ud399\uc744 \uc815\ud568\n    A1 = [[A[0][0], A[1][0]], [A[0][1], A[1][1]], [A[0][2], A[1][2]], [A[0][3], A[1][3]]]\n    A2 = [[A[0][3], A[1][3]], [A[0][2], A[1][2]], [A[0][1], A[1][1]], [A[0][0], A[1][0]]]\n    # A1 = list(map(lambda x: list(map(int, x)), A1))\n    # A2 = list(map(lambda x: list(map(int, x)), A2))\n    # \uac01 \ud300\uc5d0 \ub300\ud55c \uc2a4\ud399\uc744 \uac01 \ud300\uc758 \uacbd\uae30\uc5d0 \ub9de\ucdb0 \uacc4\uc0b0\n    A1_def = [max(A1[0]) - min(A1[0]), max(A1[1]) - min(A1[1])]\n    A2_def = [max(A2[0]) - min(A2[0]), max(A2[1]) - min(A2[1])]\n    A1_atk = [max(A1[2]) - min(A1[2]), max(A1[3]) - min(A1[3])]\n    A2_atk = [max(A2[2]) - min(A2[2]), max(A2[3]) - min(A2[3])]\n    # \uacbd\uae30\uc5d0 \ub9de\uac8c \uacc4\uc0b0\ud55c \uc2a4\ud399\uc744 \ub2e4\uc2dc \uac01 \ud300\uc758 \uc2a4\ud399\uc73c\ub85c \uc815\ud568\n    A1[0] = [max(A1_def[0], A1_atk[0]), max(A1_def[1], A1_atk[1])]\n    A2[0] = [max(A2_def[0], A2_atk[0]), max(A2_def[1], A2_atk[1])]\n    # \uac01 \ud300\uc758 \uc2a4\ud399\uc744 \ud300\uc758 \uc2a4\ud399\uc774\ub77c\uace0 \ud568\n    def_A1 = min(A1[0])\n    def_A2 = min(A2[0])\n    atk_A1 = max(A1[0])\n    atk_A2 = max(A2[0])\n    # \uacbd\uae30\uac00 \ub05d\ub098\uba74 \uac01 \ud300\uc758 \uc2a4\ud399\uc744 \ubc18\ud658\ud568\n    if def_A1 > atk_A2:\n        return 'Team 1'\n    elif def_A2 > atk_A1:\n        return 'Team 2'\n    else:\n        return 'Draw'\n\ndef"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 3\\n-1 0 3\\n0 0 3\\n1 0 2\\n1 1 40\")\n    2.4\n    \"\"\"\n    lines = stdin.splitlines()\n    N, K = map(int, lines[0].split())\n    points = []\n    for line in lines[1:]:\n        points.append(list(map(int, line.split())))\n\n    points.sort()\n    print(points)\n    time = 0\n    for i in range(K):\n        time = max(time, (points[i][2] * points[i][0] ** 2 + points[i][1] * points[i][0]))\n    return str(time)\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    data = list(map(int, stdin.split('\\n')))\n    X, Y, C, K = data[0:4]\n    data = data[4:]\n    n = len(data)\n    graph = {}\n    for i in range(n):\n        x, y, c = data[i]\n        d = math.sqrt(x * x + y * y)\n        if (x, y) not in graph:\n            graph[(x, y)] = []\n        graph[(x, y)].append([c, d, i])\n\n    queue = [[0, K, 0, 0, False]]\n    visited = set()\n    while queue:\n        temp = queue.pop(0)\n        x, k, c, d, flag = temp\n        if k == 0:\n            return str(temp[0])\n        if (x, y) in visited:\n            continue\n        visited.add((x, y))\n        if x in graph:\n            for c_, d_, i_ in graph[x]:\n                if c_ * d_ >= c and c_ < C:\n                    queue.append([i_, k - 1, c_, d_, True])\n        if y in graph:\n            for c_, d_, i_ in graph[y]:\n                if c_ * d_ >= c and c_ < C:\n                    queue.append([i_, k - 1, c_, d_, True])\n    return str(temp[0])\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, m = map(int, stdin.split())\n    c = [0] * n\n    x = [0] * n\n    y = [0] * n\n    for i in range(n):\n        x[i], y[i], c[i] = map(int, stdin.split())\n\n    def cost(x, y, c):\n        res = 0\n        for i in range(n):\n            res += c[i] * sqrt((x[i] - x[i - 1]) ** 2 + (y[i] - y[i - 1]) ** 2)\n        return res\n\n    lowest_cost = cost(x, y, c)\n    best_x, best_y = x[0], y[0]\n    for x1 in range(-1000, 1000):\n        for y1 in range(-1000, 1000):\n            for x2 in range(x1 + 1, x1 + 1000):\n                for y2 in range(y1 + 1, y1 + 1000):\n                    if x1 == x2 and y1 == y2:\n                        continue\n                    cost1 = cost(x[:2] + [x1, y1], y[:2] + [y1, x1], c[:2])\n                    cost2 = cost(x[2:] + [x2, y2], y[2:] + [y2, x2], c[2:])\n                    cost_total = cost1 + cost2\n                    if cost_total < lowest_cost:\n                        lowest_cost = cost_total\n                        best_x = x1\n                        best_y = y1\n    return \"{:.6f}\".format(lowest_cost / sqrt(best_x ** 2 + best_y ** 2))\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 3\\n-1 0 3\\n0 0 3\\n1 0 2\\n1 1 40\")\n    '2.4'\n    \"\"\"\n    n, k = map(int, stdin.split(\" \"))\n    items = [list(map(int, line.split())) for line in stdin.split(\"\\n\") if line]\n\n    items = sorted(items, key=lambda x: x[2], reverse=True)\n    meat_pos = sorted([(x, y) for x, y, c in items], key=lambda x: x[1])\n    meat_pos = list(meat_pos)\n\n    def search(meat_pos: list, c_k: int) -> float:\n        \"\"\"\n        meat_pos: [(x, y),...]\n        c_k: 0\n        \"\"\"\n        meat_pos_len = len(meat_pos)\n        if meat_pos_len == 0:\n            return 0\n        if meat_pos_len == 1:\n            return meat_pos[0][1] * math.sqrt(meat_pos[0][0] ** 2 + c_k ** 2)\n        if meat_pos_len == 2:\n            return meat_pos[0][1] * math.sqrt(meat_pos[0][0] ** 2 + c_k ** 2) + \\\n                meat_pos[1][1] * math.sqrt(meat_pos[1][0] ** 2 + c_k ** 2)\n        # meat_pos_len >= 3\n        meat_pos = sorted(meat_pos, key=lambda x: x[1])\n        meat_pos_max = meat_pos[0][1]\n        meat_pos_min = meat_pos[meat_pos_len - 1][1]\n        meat_pos_len_min = meat_pos_len - 1\n        if meat_pos_len_min == 1:\n            meat_pos_max = meat_pos[1][1]\n            meat_pos_min = meat_pos[0][1]\n            meat_pos_len_min = 2\n        for i in range(0, meat_pos_len_min - 1):\n            if meat_pos[i][1] > meat_pos[i + 1][1]:\n                meat_pos_max = meat_pos[i][1]\n                meat_pos_min = meat_pos[i + 1][1]\n                meat_pos_len_min = i + 2\n                break\n        if meat_pos_len_min == 0:\n            meat_pos_max = meat_pos[0][1]\n            meat_pos_min = meat_pos[1][1]\n            meat_pos_len_min = 2\n        max_res = 0\n        for i in range(0, meat_pos_len_min - 1):\n            c_k1 = c_k\n            c_k2 = c_k\n            meat_pos_i = meat_pos[i]\n            meat_pos_j = meat_pos[i + 1]\n            if i == meat_pos_len_min - 2:\n                c_k1 = c_k + meat_pos_j[2]\n                c_k2 = c_k + meat_pos[0][2]\n            max_res = max(max_res,\n                          meat_pos_i[1] * math.sqrt(meat_pos_i[0] ** 2 + c_k1 ** 2) +\n                          meat_pos_j[1] * math.sqrt(meat_pos_j[0] ** 2 + c_k2 ** 2)\n                          )\n        res = search(meat_pos[:meat_pos_len_min], c_k) + max_res\n        for i in range(meat_pos_len_min, meat_pos_len):\n            c_k = c_k + meat_pos[i - 1][2]\n            meat_pos_i = meat_pos[i]\n            meat_pos_j = meat_pos[i - 1]\n            max_res = max(max_res,\n                          meat_pos_i[1] * math.sqrt(meat_pos_i[0] ** 2 + c_k ** 2) +\n                          meat_pos_j[1] * math.sqrt(meat_pos_j[0] ** 2 + c_k ** 2)\n                          )\n            res = min(res, search(meat_pos[:i], c_k) + max_res)\n        return res\n\n    return str(search(meat_pos, 0))\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    from math import sqrt\n    n, k = map(int, stdin.readline().split())\n    c = [int(i) for i in stdin.readline().split()]\n    cost = float('inf')\n    for i in range(n):\n        for j in range(n):\n            if i!= j:\n                cost = min(cost, sqrt((i - j) ** 2 + c[i] * c[j]))\n    return str(cost)\n    pass\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    import math\n    n, k = map(int, stdin.split())\n    nums = [list(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n    meat = {tuple(x) for x in nums}\n    c = [x[2] for x in nums]\n    time = math.inf\n    for i in range(len(c)):\n        for j in range(len(c)):\n            if i!= j:\n                if math.sqrt((nums[i][0] - nums[j][0]) ** 2 + (nums[i][1] - nums[j][1]) ** 2) * c[i] <= c[j]:\n                    time = min(time, nums[i][2] + nums[j][2])\n    return str(time) if k > len(meat) else str(time - 1)\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(stdin)\n    '2.4'\n    \"\"\"\n    lines = stdin.splitlines()\n    n, k = map(int, lines[0].split())\n    positions = lines[1:]\n    m = len(positions)\n    matrix = []\n    for line in positions:\n        x, y, c = map(int, line.split())\n        matrix.append([x, y, c, sqrt(pow(x, 2) + pow(y, 2)) * c])\n    matrix = sorted(matrix, key=lambda x: x[3])\n    temp = 0\n    for i in range(m):\n        if k > 0:\n            temp += matrix[i][3]\n            k -= 1\n        else:\n            break\n    return str(temp)\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport math\nimport sys\n\ndef"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    arr = [list(map(int, stdin.split())) for _ in range(N)]\n\n    arr.sort(key=lambda x: x[2])\n    sum = 0\n    for i in range(K):\n        sum += arr[i][2] * math.sqrt((arr[i][0] - arr[i+1][0])**2 + (arr[i][1] - arr[i+1][1])**2)\n    return str(sum)\n"
    },
    {
        "number": 257,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split('\\n')[0].split()]\n    Xs = []\n    Ys = []\n    Cs = []\n    for line in stdin.split('\\n')[1:]:\n        Xs.append(float(line.split()[0]))\n        Ys.append(float(line.split()[1]))\n        Cs.append(int(line.split()[2]))\n    min_t = -1\n    min_t_ind = -1\n    for i in range(n):\n        for j in range(i + 1, n):\n            t = 0\n            for tt in range(k):\n                t += Cs[i] * (Xs[i] - Xs[j]) ** 2 + Cs[i] * (Ys[i] - Ys[j]) ** 2\n            if t < min_t or (t == min_t and t < min_t_ind):\n                min_t = t\n                min_t_ind = i\n    return str(min_t / math.sqrt(Cs[min_t_ind]))\n"
    },
    {
        "number": 258,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin.split()[0]\n    M = stdin.split()[1]\n    first_half = int(N/2)\n    second_half = int(N/2)\n    sums_first = 0\n    sums_second = 0\n    for i in range(first_half):\n        sums_first += int(M[i])\n    for i in range(N-first_half, N):\n        sums_second += int(M[i])\n    if sums_first == sums_second:\n        return \"Monocarp\"\n    else:\n        return \"Bicarp\"\n\n\ndef"
    },
    {
        "number": 258,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n?0?0?0?0\")\n    'Bicarp'\n    >>> solution(\"2\\n??\\n\")\n    'Bicarp'\n    >>> solution(\"8\\n?054??0?\\n\")\n    'Bicarp'\n    >>> solution(\"6\\n???00?\\n\")\n    'Monocarp'\n    \"\"\"\n    n = int(stdin)\n    ticket = stdin[:n]\n    if n % 2 == 1:\n        return 'Bicarp'\n    if n == 2:\n        return 'Monocarp'\n    if all(digit!= \"?\" for digit in ticket):\n        return 'Bicarp'\n    return 'Monocarp'\n"
    },
    {
        "number": 258,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    ticket = stdin.split('\\n')[1].replace('?', '0')\n    \n    def get_sum(s: str) -> int:\n        return int(s) + int(s[0]) + int(s[1]) + int(s[2])\n    \n    def get_sum_sub_len(s: str, sub_len: int) -> int:\n        return int(s[:sub_len]) + int(s[:sub_len])\n    \n    def is_happy(s: str) -> bool:\n        return get_sum_sub_len(s, n // 2) == get_sum_sub_len(s, n // 2 + 1)\n    \n    return \"Monocarp\" if is_happy(ticket) else \"Bicarp\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 258,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 258,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 258,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ticket = stdin.split()[1]\n    # Get the first half of the ticket\n    first_half = ticket[:n//2]\n    # Get the second half of the ticket\n    second_half = ticket[n//2:]\n    first_sum = 0\n    second_sum = 0\n    first_half_num = []\n    second_half_num = []\n    # Get the number of first half\n    for i in first_half:\n        first_half_num.append(int(i))\n        first_sum += int(i)\n    # Get the number of second half\n    for j in second_half:\n        second_half_num.append(int(j))\n        second_sum += int(j)\n    if first_sum == second_sum:\n        print(\"Monocarp\")\n    else:\n        print(\"Bicarp\")\n    return ticket\n\n\ndef"
    },
    {
        "number": 258,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    ticket = stdin.split('\\n')[0]\n    n = len(ticket)\n    first_half = n//2\n    second_half = n//2\n    first_part = [int(x) for x in ticket[:first_half]]\n    second_part = [int(x) for x in ticket[-second_half:]]\n    m = sum(first_part)\n    b = sum(second_part)\n    if m > b:\n        print(\"Monocarp\")\n    elif b > m:\n        print(\"Bicarp\")\n    else:\n        print(\"Tie\")\n"
    },
    {
        "number": 258,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    number_of_ticket = int(stdin.split()[0])\n    if number_of_ticket < 2:\n        return \"Bicarp\"\n    ticket = stdin.split()[1]\n    length_of_ticket = len(ticket)\n    half_of_ticket = int(length_of_ticket / 2)\n    first_half_of_ticket = ticket[:half_of_ticket]\n    last_half_of_ticket = ticket[half_of_ticket:]\n    first_half_sum = sum(int(first_half_of_ticket[i]) for i in range(0, half_of_ticket))\n    last_half_sum = sum(int(last_half_of_ticket[i]) for i in range(0, half_of_ticket))\n    if first_half_sum == last_half_sum:\n        return \"Bicarp\"\n    return \"Monocarp\"\n"
    },
    {
        "number": 258,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\nimport re\nimport itertools\n\ndef"
    },
    {
        "number": 258,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Implementation of the solution,\n    see https://www.youtube.com/watch?v=PR-a1fCdSsE\n    \"\"\"\n    n = int(stdin)\n    # Check if n is valid\n    if n % 2!= 0 or n < 2 or n > 100:\n        return \"Bicarp\"\n    # Create a list of the number of digits of n\n    digits = list(str(n))\n    # Remove \"?\"\n    digits = [x for x in digits if x!= \"?\"]\n    # Initialize the sums of the first and last part of the ticket\n    s1 = 0\n    s2 = 0\n    # Sum the first and last part of the ticket\n    for i in range(int(n / 2)):\n        s1 += int(digits[i])\n        s2 += int(digits[n - i - 1])\n    # Return the winner\n    if s1 == s2:\n        return \"Monocarp\"\n    return \"Bicarp\"\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the first bus that Serval will use.\n\n    Args:\n        stdin: input.\n\n    Returns:\n        str: The answer.\n    \"\"\"\n    return ''\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns an integer representing the index of the bus route Serval will take.\n    \"\"\"\n   ...\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split(' '))\n    routes = []\n    for _ in range(n):\n        time, interval = map(int, stdin.split(' '))\n        routes.append((time, interval))\n    routes.sort()\n    best = 0\n    for route in routes:\n        if route[0] >= t:\n            best = route[1]\n            break\n    return str(best)"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"6 4\\n9 5\\n\")\n    1\n    >>> solution(\"3 3\\n2 5\\n5 6\\n4 9\\n6 1\\n\")\n    3\n    \"\"\"\n    bus_lines = stdin.split(\"\\n\")[:-1]\n    time = int(bus_lines[0].split()[-1])\n    intervals = [list(map(int, line.split()[1:])) for line in bus_lines[1:]]\n\n    # the number of buses after the time\n    bus_time_count = [0] * len(intervals)\n    for start_time, end_time in intervals:\n        for i, (start_time_in_bus, end_time_in_bus) in enumerate(intervals):\n            if start_time <= start_time_in_bus < end_time:\n                bus_time_count[i] += 1\n            if start_time <= end_time_in_bus < end_time:\n                bus_time_count[i] += 1\n\n    # if the maximum number of buses after the time is 1, then the bus can be chosen\n    for bus_time in bus_time_count:\n        if bus_time == 1:\n            return bus_time_count.index(bus_time)\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return a string which represents the bus route.\n\n    >>> solution(\"2 2\\n6 4\\n9 5\")\n    '1'\n    >>> solution(\"5 5\\n3 3\\n2 5\\n5 6\\n4 9\\n6 1\")\n    '3'\n    >>> solution(\"3 7\\n2 2\\n2 3\\n2 4\")\n    '1'\n    \"\"\"\n    _, time = map(int, stdin.split())\n    stops = [\n        map(int, line.split()) for line in stdin.split(\"\\n\")[1:] if line!= \"\"\n    ]\n\n    def can_we_arrive(stops: List[List[int]]) -> bool:\n        # Check for buses that arrive before time\n        t = 0\n        for s, d in stops:\n            t += d\n            if t < s:\n                return False\n        # Check for buses that arrive after time\n        t = 0\n        for s, d in stops:\n            t += d\n            if t >= time:\n                return False\n        return True\n\n    for stops in stops:\n        if can_we_arrive(stops):\n            return str(stops[0][0])\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split(' '))\n    buses = []\n    for _ in range(n):\n        s, d = map(int, stdin.split(' '))\n        buses.append((s, d))\n    buses.sort()\n    for i in range(n):\n        if t % buses[i][0] == 0:\n            return i+1\n        \n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 5\n   ... 2 2\n   ... 2 3\n   ... 2 4\n   ... 5 6\n   ... 4 9\n   ... 6 1''')\n    1\n    \"\"\"\n    return stdin\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution to the problem.\n\n    Args:\n        stdin (str): Input.\n\n    Returns:\n        str: Output.\n    \"\"\"\n    stdin = stdin.split(\"\\n\")\n    n, t = int(stdin[0].split()[0]), int(stdin[0].split()[1])\n    time = 0\n    min_i = 0\n    min_d = abs(t - time)\n    for i in range(n):\n        s, d = map(int, stdin[i + 1].split())\n        if abs(t - time) > abs(t - (s + d)):\n            time = s + d\n            min_i = i + 1\n            min_d = abs(t - time)\n    return min_i\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 259,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return ''\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    m, k = [int(x) for x in stdin.strip().split(' ')]\n    s = 0\n    for i in range(1, k):\n        s += pow(m, i)\n    \n    r = pow(m, k-1)\n    return str(r + s)\n    '''\n    m, k = [int(x) for x in stdin.strip().split(' ')]\n    return str(m * (pow(k, k-1) - 1) // (k - 1))\n\nprint(solution(input()))\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    m, k = [int(x) for x in stdin.split()]\n    result = 0\n    for i in range(1, 2**k):\n        bin_i = bin(i)[2:]\n        if len(bin_i) < k:\n            bin_i = '0'*(k-len(bin_i)) + bin_i\n        counter = 0\n        for j in range(len(bin_i)):\n            if bin_i[j] == '1':\n                counter += 1\n        if counter == m:\n            result = i\n            break\n    return str(result)\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    m, k = map(int, stdin.split())\n    n = 1\n    while True:\n        n += 1\n        if bin(n).count('1') == k:\n            break\n    return str(n)\n\nprint(solution(input()))\n\n\n'''"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    m, k = map(int, stdin.split())\n    x = int(bin(m)[2:])\n    while x > m:\n        x = x >> 1\n    while x > 0:\n        m += (x % 2) * (2 ** (k - 1))\n        x = x >> 1\n    return str(m)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    m, k = list(map(int, stdin.split()))\n    res = 0\n    for x in range(1, m):\n        res += pow(2, x)\n    return res + 2 * m - 1\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    m, k = [int(c) for c in stdin.split(' ')]\n    i = 0\n    n = 1\n    while True:\n        if len(str(n)) == k:\n            if sum([int(c) for c in str(n)]) == m:\n                return str(n)\n        i += 1\n        n = 2 ** i\nprint(solution(input()))"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    m, k = map(int, stdin.split())\n    if k > m:\n        return \"-\"\n    k -= 1\n    k //= 2\n    m //= 2\n    n = 2 ** k\n    if m < k:\n        return \"-\"\n    elif m == k:\n        return str(n)\n    else:\n        while m > 0:\n            n += n\n            k += 1\n            m -= 1\n    return str(n)\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    for i in range(n):\n        if bin(i+1)[2:].count('1') == m:\n            return str(i+1)\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    m, k = stdin.split(' ')\n    m, k = int(m), int(k)\n\n    counter = 0\n    for i in range(m, 10**18):\n        j = i\n        count = 0\n        while j > 0:\n            j = j // 2\n            count += 1\n        if count == k:\n            counter += 1\n    return str(counter)\n"
    },
    {
        "number": 260,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    m, k = map(int, stdin.split())\n    n = 0\n    while True:\n        if len(bin(n+1)[2:]) == m and len(bin(n+2)[2:]) == m and len(bin(2*n)[2:]) == m:\n            if (bin(n+1)[2:]).count('1') == k and (bin(n+2)[2:]).count('1') == k and (bin(2*n)[2:]).count('1') == k:\n                return str(n)\n        n += 1\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns \"yes\" if the level is good, otherwise returns \"no\".\n    :param stdin:\n    :return:\n    '''\n    levels = [list(map(int, stdin[0]))]\n    for i in range(1, int(stdin[1])):\n        levels.append(list(map(int, stdin[i + 1])))\n    min_length = 1\n    for i in range(len(levels) - 1):\n        if levels[i] == levels[i + 1]:\n            min_length = 2\n    return 'yes' if min_length >= 4 else 'no'"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    scheme = stdin.readline()\n    if n % 4!= 0:\n        return 'no'\n    for i in range(n // 4):\n        if scheme[i]!= '.' and scheme[i + 1]!= '.':\n            if scheme[i]!= '*' and scheme[i + 2]!= '*':\n                return 'no'\n            if scheme[i]!= '*' and scheme[i + 4]!= '*':\n                return 'no'\n            if scheme[i + 1]!= '*' and scheme[i + 2]!= '*':\n                return 'no'\n            if scheme[i + 2]!= '*' and scheme[i + 4]!= '*':\n                return 'no'\n            if scheme[i + 4]!= '*' and scheme[i + 7]!= '*':\n                return 'no'\n        if scheme[i]!= '.' and scheme[i + 1]!= '.' and scheme[i + 2]!= '.' and scheme[i + 3]!= '.':\n            if scheme[i]!= '*' and scheme[i + 2]!= '*' and scheme[i + 4]!= '*':\n                return 'no'\n            if scheme[i + 1]!= '*' and scheme[i + 2]!= '*' and scheme[i + 4]!= '*':\n                return 'no'\n            if scheme[i + 2]!= '*' and scheme[i + 4]!= '*' and scheme[i + 6]!= '*':\n                return 'no'\n            if scheme[i + 4]!= '*' and scheme[i + 6]!= '*' and scheme[i + 8]!= '*':\n                return 'no'\n    return 'yes'\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def are_good_platforms(platforms: str) -> bool:\n        return (platforms[0]!= '.'\n                and platforms[-1]!= '.'\n                and '**' not in platforms)\n\n    platforms = stdin.split('\\n')[0]\n    return 'yes' if are_good_platforms(platforms) else 'no'"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return 'yes' if is_good else 'no'\n\n\ndef"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n  return 'yes' if len(stdin) % 4 == 0 else 'no'\n'''\n\n\ndef"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    pass\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # put your solution here\n    return \"\"\n"
    },
    {
        "number": 261,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Given a dungeon, check if a character can make a series of four consecutive jumps\n    of the same length in the scheme, or not.\n    :param stdin:\n    :return:\n    \"\"\"\n    # Get data from stdin\n    n = int(stdin)\n    level = stdin\n\n    # Calculate result\n    result = \"yes\" if n >= 4 else \"no\"\n\n    # Return result\n    return result\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Get the size of the square\n    # and initialize the grid\n    size = int(stdin.readline().strip())\n    grid = [[0 for j in range(size)] for i in range(size)]\n\n    # Read in the initial numbers\n    for i in range(size):\n        row = stdin.readline().strip().split(' ')\n        for j in range(size):\n            grid[i][j] = int(row[j])\n\n    # Iterate through all the numbers and try to find a solution\n    for i in range(1, size * size + 1):\n        if can_fill_number_in_square(grid, size, i):\n            return str(i)\n\n    return '-1'\n\n\ndef"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def is_magic(grid):\n        rows = [sum(row) for row in grid]\n        cols = [sum(col) for col in zip(*grid)]\n        diag1 = 0\n        diag2 = 0\n        for i in range(len(grid)):\n            diag1 += grid[i][i]\n            diag2 += grid[i][-i - 1]\n        return rows == cols == [diag1, diag2]\n\n    n = int(stdin.readline())\n    for _ in range(n):\n        grid = [list(map(int, stdin.readline().split())) for _ in range(n)]\n        for i in range(1, 10 ** 9 + 1):\n            if grid[0][0] == 0:\n                grid[0][0] = i\n                if is_magic(grid):\n                    return str(i)\n            else:\n                break\n    return \"-1\"\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    grid = [list(map(int, stdin.split()))]\n    if not check_valid(grid):\n        return '-1'\n    for i in range(1, len(grid)):\n        grid[i].insert(0, 0)\n    grid.insert(0, [0] * len(grid))\n    \n    # If sum(grid[r][c]) == sum(grid[r][c])\n    # If sum(grid[r][c]) == sum(grid[r][c])\n    for r in range(len(grid)):\n        for c in range(len(grid[r])):\n            if grid[r][c] == 0:\n                continue\n            for r2 in range(r+1, len(grid)):\n                if grid[r2][c] == 0:\n                    continue\n                for c2 in range(c+1, len(grid[r])):\n                    if grid[r][c] == grid[r2][c2] == grid[r][c2] == grid[r2][c]:\n                        return str(grid[r][c])\n                    else:\n                        continue\n                    break\n                break\n                \n    return '-1'\ndef"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    A = [[0] * n for i in range(n)]\n    A[0][0] = int(stdin.readline())\n    for i in range(n):\n        line = stdin.readline().split()\n        for j in range(n):\n            A[i][j] = int(line[j])\n    for i in range(n):\n        if A[0][i]!= 0:\n            if sum(A[j][i] for j in range(n))!= A[0][i] * n:\n                return '-1'\n    for i in range(n):\n        if A[i][0]!= 0:\n            if sum(A[i][j] for j in range(n))!= A[i][0] * n:\n                return '-1'\n    if A[0][0] == 0:\n        for i in range(1, n):\n            if A[i][0]!= 0:\n                if sum(A[i][j] for j in range(n))!= A[i][0] * n:\n                    return '-1'\n    if A[0][0] == 0:\n        for j in range(1, n):\n            if A[0][j]!= 0:\n                if sum(A[i][j] for i in range(n))!= A[0][j] * n:\n                    return '-1'\n    return str(n * n - 1)\n\n\ndef"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    m = []\n    for _ in range(n):\n        m.append([int(i) for i in stdin.split()])\n    print(n, m)\n    a = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if m[i][j]!= 0:\n                a[i][j] = m[i][j]\n    print(a)\n    for i in range(n):\n        for j in range(n):\n            if a[i][j] == 0:\n                for k in range(1, n + 1):\n                    if k not in a[i] and k not in (a[j][j], a[j][n - j - 1]):\n                        a[i][j] = k\n                        break\n                else:\n                    return str(-1)\n    print(a)\n    res = 0\n    for i in range(n):\n        res += a[i][i]\n    for j in range(n):\n        res += a[j][n - j - 1]\n    print(res)\n    return str(res)\n\n\ndef"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the magic number for the empty cell and return it.\"\"\"\n    pass"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Given a string of integers, fill in the magic square\n    \"\"\"\n    # The first line of the input contains a single integer n (1 \u2264 n \u2264 500)\u00a0\u2014 the number of rows and columns of the magic grid.\n    n = int(stdin.split('\\n')[0])\n    # Each line of the input contains n integers. The j-th number in the i-th of them denotes a_{i}, j (1 \u2264 a_{i}, j \u2264 10^9 or a_{i}, j = 0), the number in the i-th row and j-th column of the magic grid. If the corresponding cell is empty, a_{i}, j will be equal to 0. Otherwise, a_{i}, j is positive.\n    grid = [[int(j) for j in stdin.split('\\n')[i].split(' ')] for i in range(1, len(stdin.split('\\n')))]\n    # The sum of numbers in each row is:\n    # 4 + 9 + 2 = 3 + 5 + 7 = 8 + 1 + 6 = 15.\n    # The sum of numbers in each column is:\n    # 4 + 3 + 8 = 9 + 5 + 1 = 2 + 7 + 6 = 15.\n    # The sum of numbers in the two diagonals is:\n    # 4 + 5 + 6 = 2 + 5 + 8 = 15.\n    # check for sums of each row and col and diagonal\n    rowsums = [0 for i in range(n)]\n    for i in range(n):\n        for j in range(n):\n            rowsums[i] += grid[i][j]\n    colsums = [0 for i in range(n)]\n    for j in range(n):\n        for i in range(n):\n            colsums[j] += grid[i][j]\n    diag1 = 0\n    diag2 = 0\n    for i in range(n):\n        diag1 += grid[i][i]\n        diag2 += grid[i][n - i - 1]\n    # check for sum of rowsums and colsums and diagsums\n    if n * (n ** 2 + 1) / 2 in rowsums or n * (n ** 2 + 1) / 2 in colsums or n * (n ** 2 + 1) / 2 in (diag1, diag2):\n        return str(n * (n ** 2 + 1) // 2)\n    return str(-1)\n    \n    \n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 0 2\\n3 5 7\\n8 1 6\")\n    9\n    >>> solution(\"4\\n1 1 1 1\\n1 1 0 1\\n1 1 1 1\\n1 1 1 1\")\n    1\n    >>> solution(\"4\\n1 1 1 1\\n1 1 0 1\\n1 1 2 1\\n1 1 1 1\")\n    -1\n    \"\"\"\n    n = int(stdin.split(\"\\n\")[0])\n    m = []\n    for _ in range(n):\n        m.append(list(map(int, stdin.split(\"\\n\")[_].split())))\n    m = numpy.array(m)\n    #print(m)\n\n    r = numpy.zeros(n, dtype=int)\n    c = numpy.zeros(n, dtype=int)\n    d = numpy.zeros(n, dtype=int)\n\n    def get_diagonal(m, n):\n        r = numpy.diagonal(m)\n        c = numpy.diagonal(m[::-1])[::-1]\n        d = numpy.concatenate((r, c))\n        return d\n\n    def magic(m, n):\n        r = m.sum(axis=1)\n        c = m.sum(axis=0)\n        d = get_diagonal(m, n)\n        if numpy.any(r + c - d!= 0):\n            return -1\n        return numpy.prod(r + c - d)\n\n    def solve():\n        for i in range(n):\n            if m[0][i]!= 0:\n                r[0] = m[0][i]\n                m[0] = m[0] - m[0][i]\n                break\n        for i in range(n - 1, -1, -1):\n            if m[i][0]!= 0:\n                c[0] = m[i][0]\n                m[i] = m[i] - m[i][0]\n                break\n        for i in range(1, n):\n            for j in range(1, n):\n                if m[i][j]!= 0:\n                    d[i] = m[i][j]\n                    m[i] = m[i] - m[i][j]\n                    break\n\n        return magic(m, n)\n\n    return str(solve())\n"
    },
    {
        "number": 262,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # stdin = input()\n    # line = stdin.split(\"\\n\")\n    n = int(input())\n    numbers = []\n    for i in range(n):\n        numbers.append([int(x) for x in input().split()])\n    positive = True\n    for i in range(n):\n        for j in range(n):\n            if numbers[i][j] < 0:\n                positive = False\n    if not positive:\n        print(-1)\n    else:\n        diag_sum_1 = 0\n        diag_sum_2 = 0\n        for i in range(n):\n            diag_sum_1 += numbers[i][i]\n            diag_sum_2 += numbers[i][n-i-1]\n        if diag_sum_1!= diag_sum_2:\n            print(-1)\n        else:\n            print(diag_sum_1)\nsolution(input())\n"
    },
    {
        "number": 263,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the maximum number of people sitting on one bench after additional m people came to the park.\"\"\"\n    n = int(stdin.readline().strip())\n    m = int(stdin.readline().strip())\n    b = list(map(int, stdin.readline().strip().split()))\n    result = [0] * (n + 1)\n    result[0] = b[0]\n    for i in range(1, n):\n        result[i] = result[i - 1] + b[i]\n    result.sort()\n    min_k = result[0] + m\n    max_k = result[n - 1] + m\n    print(min_k, max_k)\n    return \"\"\n"
    },
    {
        "number": 263,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    stdin = stdin.split('\\n')\n    n = int(stdin[0])\n    m = int(stdin[1])\n    seats = list(map(int, stdin[2:]))\n    # print(n, m, seats)\n    max_seats = max(seats)\n    min_seats = min(seats)\n    # print(max_seats, min_seats)\n    for i in range(m):\n        max_seats = max(max_seats, max(seats))\n        min_seats = min(min_seats, min(seats))\n        seats = seats[1:] + [seats[0]]\n    return str(max_seats) +'' + str(min_seats)\n"
    },
    {
        "number": 263,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\n1\\n1\\n1\\n\")\n    '3 7'\n    \"\"\"\n    n = int(stdin.readline())\n    m = int(stdin.readline())\n    a = sorted(map(int, stdin.readlines()))\n\n    return f\"{max(n - m, 0)}\\n{sum(a) + m}\"\n"
    },
    {
        "number": 263,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    bens = [int(stdin) for i in range(n)]\n    bens.sort()\n    print(min(bens[-1], sum(bens)-m), max(bens[-1], sum(bens)-m))\n\"\"\"\n\ndef"
    },
    {
        "number": 263,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    m = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().split()]\n\n    # the maximum number of people that can be seated in a row is n - m\n    # the minimum number of people that can be seated in a row is m\n    # the maximum number of people that can be seated in a row is n\n\n    k = m\n    while k < n:\n        k *= 2\n\n    # if m == 1, then the minimum number of people that can be seated in a row is m - 1\n    # if m > 1, then the minimum number of people that can be seated in a row is m\n    # if m < n - m, then the minimum number of people that can be seated in a row is m - 1\n    if m == 1:\n        k = max(m, m - 1)\n    elif m > 1:\n        k = max(m, m)\n    elif m < n - m:\n        k = max(m, m - 1)\n\n    # the maximum number of people that can be seated in a row is n - m\n    if m == 1:\n        k = min(n - m, m + 1)\n    elif m > 1:\n        k = min(n - m, m)\n    elif m < n - m:\n        k = min(n - m, m + 1)\n\n    return str(k) + \" \" + str(k + 1)\n"
    },
    {
        "number": 263,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u044e solution, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u0434\u0432\u0430 \u0441\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0445 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430: \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445 \u0441\u0438\u0434\u0435\u043d\u0438\u0439, \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u043d\u043e\u0432\u044c \u043f\u0440\u0438\u0448\u0435\u0434\u0448\u0438\u0445 \u0432 \u043f\u0430\u0440\u043a, \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0434\u0432\u0430 \u0447\u0438\u0441\u043b\u0430: \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0438\u0434\u0435\u043d\u0438\u0439 \u0438 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0438\u0434\u0435\u043d\u0438\u0439.\n\u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0435\u0441\u043b\u0438 \u0432 \u043f\u0430\u0440\u043a\u0435 \u0438\u043c\u0435\u0435\u0442\u0441\u044f \u043f\u044f\u0442\u044c \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0449\u0438\u0445 \u0441\u0438\u0434\u0435\u043d\u0438\u0439 (\u0441\u0435\u0441\u0442\u0440\u0430, \u043a\u043b\u0430\u0441\u0441\u043d\u044b\u0439 \u0432\u0435\u0437\u0434\u0435, \u0434\u0435\u0442\u0441\u043a\u0438\u0439 \u0438 \u0441\u0442\u0430\u0440\u0448\u0438\u0439) \u0438 \u043f\u0435\u0440\u0435\u0434 \u044d\u0442\u0438\u043c \u043f\u0440\u0438\u0448\u043b\u043e \u0432\u043e\u0441\u044c\u043c\u043e\u0435 \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430, \u0438\u043c\u0435\u044e\u0449\u0435\u0433\u043e \u0434\u0435\u0442\u0441\u043a\u0438\u0439 \u0441\u0438\u0434, \u0432 \u0442\u043e\u043c \u0447\u0438\u0441\u043b\u0435 \u0438 \u043f\u044f\u0442\u044c \u0441\u0442\u0430\u0440\u0448\u0438\u0445, \u0442\u043e \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u0435\u0440\u043d\u0443\u0442\u044c \u0447\u0438\u0441\u043b\u0430 $(3, 6)$ (\u0434\u0432\u0430 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0445 \u0447\u0438\u0441\u043b\u0430).\n\u0412 \u0441\u043b\u0443\u0447\u0430\u0435 \u0435\u0441\u043b\u0438 \u043d\u0438 \u043e\u0434\u043d\u043e \u0438\u0437 \u0447\u0438\u0441\u0435\u043b \u043d\u0435 \u043f\u0440\u0438\u0448\u043b\u043e, \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0434\u0432\u0430 \u043f\u0443\u0441\u0442\u044b\u0445 \u0447\u0438\u0441\u043b\u0430.\n\n\n-----\u041f\u0440\u0438\u043c\u0435\u0440\u044b-----\n\n\u0422\u0435\u0441\u0442 1\n>>> solution(\"4\", \"6\")\n3 7\n\n\u0422\u0435\u0441\u0442 2\n>>> solution(\"1\", \"10\")\n15 15\n\n\u0422\u0435\u0441\u0442 3\n>>> solution(\"3\", \"7\")\n6 12\n\n\u0422\u0435\u0441\u0442 4\n>>> solution(\"3\", \"5\")\n6 12\n\n\u0422\u0435\u0441\u0442 5\n>>> solution(\"3\", \"6\")\n6 12\n    '''\n    n = int(stdin.readline())\n    m = int(stdin.readline())\n    s = [int(stdin.readline()) for _ in range(n)]\n    s.sort(reverse=True)\n    res = [0, 0]\n    for i in range(n):\n        if s[i] + m > res[1]:\n            res[0] = i + 1\n            res[1] = s[i] + m\n    if res[0] == 0:\n        print('0', '0')\n    else:\n        print(res[0], res[1])\n\nsolution(\"3\", \"5\")\n"
    },
    {
        "number": 263,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    m = int(stdin.readline())\n    n_arr = [int(stdin.readline()) for i in range(n)]\n    m_arr = [int(stdin.readline()) for i in range(m)]\n    n_arr.sort()\n    m_arr.sort()\n    n_arr = n_arr[::-1]\n    m_arr = m_arr[::-1]\n    m_arr.append(m_arr[-1])\n    ans = []\n    for i in range(n):\n        if n_arr[i]!= m_arr[i]:\n            ans.append(i)\n    return ans\n"
    },
    {
        "number": 263,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    m = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    k = [1] * n\n    for i in range(m):\n        k[a[i]-1] += 1\n    print(min(k), max(k))\n    return ''\n"
    },
    {
        "number": 263,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    m = int(stdin)\n    a = []\n    for _ in range(n):\n        a.append(int(stdin))\n    \n    a.sort()\n    k = 0\n    for i in range(m):\n        k = k + (a[i] + 1)\n\n    k = k + 1\n    b = []\n    for j in range(n):\n        b.append(a[j] + 1)\n\n    b.sort()\n    k = k + (b[0] - 1)\n    k = k + (n - b[n-1])\n    print(k, max(k, a[0]))\n\nprint(solution('4'))\n"
    },
    {
        "number": 263,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return '{} {}'.format(min_count, max_count)\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\nimport math\nimport sys\n\n\ndef"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    sol = 0\n    for i in range(1, m+1):\n        for j in range(1, m+1):\n            if i!= j:\n                sol += n\n    return str(sol)\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your solution here\n    stdin = stdin.strip().split('\\n')\n    n, m = [int(x) for x in stdin[0].split()]\n    inp = stdin[1:]\n    mid = int((m - 1) / 2)\n    count = 0\n    for i in range(n):\n        for j in range(m):\n            if i == j:\n                count += 1\n    count = count % (10 ** 9 + 7)\n    print(count)\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def f(n: int, m: int) -> int:\n        if n == 0:\n            return 1\n        if n == 1:\n            return m\n        if n == 2:\n            return m * m\n        return f(n - 1, m) + f(n - 2, m)\n    \n    return f(int(stdin.readline()), int(stdin.readline())) % (10 ** 9 + 7)\n"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return 0\n\"\"\"\n\nimport sys\nsys.setrecursionlimit(10 ** 8)\n\n\ndef"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Get number of rows and seats\n    num_rows = int(stdin)\n    num_seats = int(stdin)\n\n    # Create list to store seats\n    seats = [0 for i in range(num_seats)]\n\n    # Set the number of people at seats\n    for i in range(0, num_rows):\n        seats[i] = int(stdin)\n\n    # Calculate the number of ways\n    ways = num_seats\n    for i in range(0, num_seats):\n        # Seat i gets taken by one person\n        ways += i * (num_seats - i)\n\n        # Seat i gets taken by j persons\n        for j in range(i + 1, num_seats):\n            if seats[i] == seats[j]:\n                ways -= j * (num_seats - j)\n\n    return ways % (10 ** 9 + 7)\n\n\n-----Test-----\n\nGot:\n128\nExpected:\n121\n\"\"\"\ndef"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 264,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    #Your code here\n    n, m = map(int, stdin.split())\n    l = [0] * m\n    for i in range(n):\n        l[i] = i\n    for i in range(m - 1, 0, -1):\n        l[i] = l[i - 1]\n    return \"\".join(map(str, l))\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split('\\n')[0].split())\n    pizzas = []\n    for _ in range(n):\n        favs = list(map(int, stdin.split('\\n')[_].split()[1:]))\n        ingr = [_ for _ in range(1, 10) if _ not in favs]\n        pizzas.append([favs, ingr, 0])\n\n    for _ in range(m):\n        price, num, ingr = map(int, stdin.split('\\n')[_].split())\n        ingr = list(map(int, ingr))\n        for __ in range(num):\n            for _pizza in pizzas:\n                if ingr[0] in _pizza[1]:\n                    _pizza[2] += 1\n                    _pizza[1].remove(ingr[0])\n                    ingr.pop(0)\n    best = []\n    for _ in pizzas:\n        if _[2] > 0:\n            best.append([_[2], _[0]])\n\n    best.sort()\n    a = [_[1] for _ in best]\n    b = [_[0] for _ in best]\n    max_a = max(a)\n    a = a.index(max_a)\n    print(a+1, b[a]+1)\n\n    return ''\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(\" \"))\n    pizzas = [[int(x) for x in stdin.split(\"\\n\")[i].split(\" \")] for i in range(m)]\n    pizzas.sort(key=lambda x: -x[0])\n    \n    f, b = [], []\n    for i in range(n):\n        f.append(set(pizzas[i][1:]))\n        b.append(set(pizzas[i][1:]))\n\n    b.sort(key=lambda x: len(x))\n    \n    ans = []\n    for i in range(len(b)):\n        j = n - 1 - i\n        for jj in range(j):\n            if b[i] & b[j - jj - 1]:\n                ans.append((j - jj, jj))\n                break\n\n    return \" \".join(map(str, max(ans, key=lambda x: x[0])))\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n\n    n, m = int(lines[0].split(' ')[0]), int(lines[0].split(' ')[1])\n    ingredients = set()\n    for i in range(1, n + 1):\n        ingredients |= set(map(int, lines[i].split(' ')[1:]))\n\n    price = [0] * m\n    for j in range(m):\n        line = list(map(int, lines[n + j + 1].split(' ')))\n        price[j] = line[0]\n        for i in range(1, len(line)):\n            ingredients -= set(line[i:])\n\n    if len(ingredients) > 2:\n        return\n\n    # find pair\n    s = 0\n    for i in range(m):\n        if len(ingredients) == 2:\n            s += price[i]\n            break\n        price[i] -= next(iter(ingredients))\n        s += price[i]\n        ingredients.discard(next(iter(ingredients)))\n    print(s)"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    ingredients_counts = [0] * 10\n    ingredients_sets = [[] for _ in range(10)]\n    total_price = 0\n    for _ in range(n):\n        ingredients_counts[int(stdin.readline())] += 1\n        ingredients_sets[int(stdin.readline())] += list(map(int, stdin.readline().split()))\n    for _ in range(m):\n        total_price += int(stdin.readline())\n        ingredients_sets[int(stdin.readline())] += list(map(int, stdin.readline().split()))\n\n    def does_one_satisfy_all(i):\n        satisfied = set()\n        for k in range(10):\n            if ingredients_counts[k] == 0:\n                continue\n            if len(ingredients_sets[k]) == 1:\n                satisfied.add(ingredients_sets[k][0])\n                continue\n            if ingredients_sets[k][i] in satisfied:\n                return False\n            satisfied.add(ingredients_sets[k][i])\n        return True\n\n    def does_all_satisfy_some(i):\n        for j in range(10):\n            if ingredients_counts[j] == 0:\n                continue\n            if len(ingredients_sets[j]) == 0:\n                return False\n            if ingredients_sets[j][i] not in ingredients_sets[i]:\n                return False\n        return True\n\n    for i in range(10):\n        if ingredients_counts[i] == 0:\n            continue\n        if len(ingredients_sets[i]) == 0:\n            continue\n        if len(ingredients_sets[i]) == 1:\n            continue\n        if does_all_satisfy_some(i):\n            return '{0} {1}'.format(i, ingredients_sets[i][0])\n        elif does_all_satisfy_some(i):\n            return '{0} {1}'.format(i, ingredients_sets[i][-1])\n\n    satisfied = set()\n    for k in range(10):\n        if ingredients_counts[k] == 0:\n            continue\n        if len(ingredients_sets[k]) == 1:\n            satisfied.add(ingredients_sets[k][0])\n            continue\n        if ingredients_sets[k][0] in satisfied:\n            return '{0} {1}'.format(k, ingredients_sets[k][0])\n        if ingredients_sets[k][-1] in satisfied:\n            return '{0} {1}'.format(k, ingredients_sets[k][-1])\n        satisfied.add(ingredients_sets[k][0])\n        satisfied.add(ingredients_sets[k][-1])\n\n    return '{0} {1}'.format(satisfied.pop(), satisfied.pop())\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time Complexity: O(N log N)\n    Space Complexity: O(N)\n    \"\"\"\n    n, m = map(int, stdin.split())\n    ingredients = set()\n    for _ in range(n):\n        ingredients |= set(map(int, stdin.split()[1:]))\n\n    cnt = 0\n    for _ in range(m):\n        price, num, *ingredients = map(int, stdin.split())\n        ingredients = set(ingredients)\n        cnt += len(ingredients)\n\n    return''.join(map(str, [cnt-2, cnt-1]))\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return''.join(map(str, sol))\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 3\\n1 1\\n1 2\\n1 3\\n1 4\\n10 4 1 2 3 4\\n20 4 1 2 3 4\\n30 4 1 2 3 4\\n\")\n    '1 2\\n'\n    \"\"\"\n    n, m = map(int, stdin.split())\n    f_lst = []\n    p_lst = []\n    prices = []\n    for i in range(n):\n        f_i, lst = map(int, stdin.split()[i].split(' '))\n        f_lst.append(f_i)\n        p_lst.append(lst)\n    for j in range(m):\n        price, count, lst = map(int, stdin.split()[j + n].split(' '))\n        prices.append((price, count, lst))\n    for k, v in enumerate(f_lst):\n        if v == 1:\n            p_lst[k].sort()\n            for i in range(len(prices)):\n                if prices[i][2] == p_lst[k]:\n                    prices[i] = prices[i][0]\n    dic = defaultdict(list)\n    for key, val in enumerate(f_lst):\n        dic[val].append(key)\n    for i in dic.values():\n        if len(i) > 1:\n            for j in range(len(i)):\n                for k in range(j + 1, len(i)):\n                    if prices[i[j]] < prices[i[k]]:\n                        i[j], i[k] = i[k], i[j]\n    dic_rev = {}\n    for key, val in dic.items():\n        dic_rev[key] = dic_rev.get(key, [])\n        for i in val:\n            dic_rev[key].append(i)\n    price_dic = {}\n    for i in prices:\n        price_dic[i] = price_dic.get(i, 0) + 1\n    sorted_keys = sorted(price_dic.keys())\n    res = []\n    for i in range(n):\n        if len(res) == 0:\n            res.append(dic_rev[f_lst[i]][0])\n            res.append(dic_rev[f_lst[i]][1])\n        else:\n            if prices[res[0]] > prices[dic_rev[f_lst[i]][0]]:\n                res.append(dic_rev[f_lst[i]][0])\n            if prices[res[1]] > prices[dic_rev[f_lst[i]][1]]:\n                res.append(dic_rev[f_lst[i]][1])\n    return''.join(map(str, res))\n"
    },
    {
        "number": 265,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"My solution for the CodePizza problem.\n    \"\"\"\n    N, M = [int(n) for n in stdin.split()]\n    favorite_ingredients = [None] * N\n    for i in range(N):\n        favorite_ingredients[i] = [int(n) for n in stdin.split('\\n')[i + 1].split()[1:]]\n    \n    pizzas = []\n    for i in range(M):\n        pizzas.append([int(n) for n in stdin.split('\\n')[i + M + 1].split()])\n    \n    def eval_pizza_score(pizza_score):\n        \"\"\"Return the score of the pizza with given score.\n        \"\"\"\n        count = 0\n        for i in range(1, 10):\n            if i in pizza_score:\n                count += pizza_score[i]\n        return count\n\n    scores = []\n    for pizza in pizzas:\n        pizza_score = {}\n        for ing in pizza:\n            pizza_score[ing] = pizza_score.get(ing, 0) + 1\n        scores.append(eval_pizza_score(pizza_score))\n    \n    scores = sorted(scores)\n    n = scores[-1]\n    d = scores[::-1]\n    print(d)\n    \n    return ''.join(map(str, [n]))\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    m, s = tuple(map(int, stdin.split()))\n    l = m * s\n    result = '-1 -1'\n    if l <= 0:\n        return result\n    if m == 1:\n        result = str(s)\n    elif s == 0:\n        result = str(max(range(1, l + 1)))\n    else:\n        for i in range(1, l + 1):\n            str_i = str(i)\n            num_i = sum(int(j) for j in str_i)\n            if num_i == s:\n                result = str(i)\n                break\n            elif num_i < s and num_i > s - l:\n                result = str(s - num_i) +'' + str(i)\n                break\n    return result\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    m, s = map(int, stdin.split())\n    if s > 9 * m:\n        return \"-1 -1\"\n    s = sorted(set([s // m + 1] + [n for n in range(2, 10**m)]))\n    return f\"{s[0]} {s[-1]}\"\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    nums_length, num_sum = stdin.split(' ')\n    nums_length = int(nums_length)\n    num_sum = int(num_sum)\n\n    min_num = -1\n    max_num = -1\n    for num_length in range(nums_length+1):\n        for num_sum_len in range(num_sum+1):\n            num_min = pow(10, num_length - 1)\n            num_max = pow(10, num_length - 1) + num_sum_len - 1\n            if num_sum_len < num_sum:\n                num_max -= num_sum - num_sum_len\n            if num_sum_len > num_sum:\n                num_min += num_sum_len - num_sum\n            if num_min > num_max:\n                break\n            if num_length == 1 and num_sum_len == 0:\n                min_num = 0\n                max_num = 0\n                break\n            if num_length == 1:\n                min_num = num_min\n                max_num = num_max\n                break\n            else:\n                for num in range(num_min, num_max):\n                    num = str(num)\n                    if len(num) == num_length and num_sum_len == 0:\n                        continue\n                    num_str_sum = 0\n                    for num_str in num:\n                        num_str_sum += int(num_str)\n                    if num_str_sum == num_sum:\n                        if min_num == -1:\n                            min_num = num\n                        else:\n                            min_num = min(min_num, num)\n                        if max_num == -1:\n                            max_num = num\n                        else:\n                            max_num = max(max_num, num)\n    if min_num == -1:\n        return '-1 -1'\n    return f'{min_num} {max_num}'\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    finds two numbers with m digits and s sum of digits\n    '''\n    m, s = [int(n) for n in stdin.split()]\n    c = int('9' * m)\n    # return max_sum, min_sum\n    # max_sum = -1\n    # min_sum = -1\n    if m == 1:\n        max_sum = c - s\n        min_sum = 0\n    elif m == 2:\n        max_sum = int('9' * m) - (s - int('9' * m))\n        min_sum = 0\n    elif m == 3:\n        max_sum = 9 ** m - s\n        min_sum = 0\n    elif m == 4:\n        max_sum = int('9' * m) - (s - int('9' * m))\n        min_sum = (s - int('9' * m) - 1) * 9 + 1\n    elif m > 4:\n        max_sum = 9 ** m - (s - int('9' * m))\n        min_sum = (s - int('9' * m) - 1) * 9 + 1\n    return f'{min_sum} {max_sum}'\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    length, sum = [int(x) for x in stdin.split(' ')]\n    numbers = list(range(10 ** length - 1, 10 ** (length - 1) - 1, -1))\n    for i in range(0, len(numbers)):\n        if sum == sum_of_digits(numbers[i]):\n            print('{0} {1}'.format(numbers[i], i))\n            break\n    else:\n        print('-1 -1')\n    '''\n    m, s = map(int, stdin.split())\n    x = [i for i in range(1,10**m) if sum_of_digits(i)==s]\n    print(min(x), max(x))\n\ndef"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    m, s = stdin.split(' ')\n    m = int(m)\n    s = int(s)\n\n    l = []\n    for i in range(m):\n        for j in range(s):\n            if i + j == m:\n                if len(str(i)) == m and sum(map(int, str(i))) == s:\n                    l.append(i)\n    if l:\n        return f'{min(l)} {max(l)}'\n    else:\n        return f'-1 -1'\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # print(stdin)\n    m, s = map(int, stdin.split())\n\n    cnt = 0\n    for i in range(1, m + 1):\n        for j in range(1, m + 1):\n            if sum([int(i) for i in str(i)]) == s and i + j == m:\n                cnt += 1\n\n    if cnt == 0:\n        print(f'-1 -1')\n    else:\n        print(f'{i} {j}')\n    return ''"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    m, s = [int(x) for x in stdin.split(' ')]\n    n1, n2 = -1, -1\n    if m < 1 or m > 100:\n        print('-1 -1')\n    elif s < 0 or s > 900:\n        print('-1 -1')\n    else:\n        for i in range(1, m + 1):\n            for j in range(10 ** (i - 1), 10 ** i):\n                if i < 2:\n                    if j == s:\n                        n1 = j\n                        n2 = j\n                        break\n                else:\n                    if sum(map(int, str(j))) == s:\n                        n1 = j\n                        n2 = j\n                        break\n            if n1!= -1 and n2!= -1:\n                break\n        print(n1, n2)\n\nsolution(input())\n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split()\n    m = int(a[0])\n    s = int(a[1])\n    l = []\n    for i in range(10):\n        for j in range(10):\n            for k in range(10):\n                if len(str(i+j+k)) == m and i+j+k <= s:\n                    l.append(i+j+k)\n    if l:\n        return str(min(l))+' '+str(max(l))\n    else:\n        return '-1 -1'\n    \n"
    },
    {
        "number": 266,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    m, s = map(int, stdin.split())\n    a, b = '', ''\n    for i in range(m):\n        a += str(random.randint(1, 9))\n        b += str(random.randint(0, 9))\n    s1 = sum([int(i) for i in a])\n    s2 = sum([int(i) for i in b])\n    if m == s1 == s2 == s:\n        print(a, b)\n    else:\n        print('-1 -1')\n    return \"\"\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    "
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    l, r, k = [int(i) for i in stdin.split(' ')]\n    return sum(\n        len({int(i) for i in str(j)}) <= k\n        for j in range(l, r + 1)\n    ) % 998244353\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    l, r, k = stdin.split()\n    l, r, k = int(l), int(r), int(k)\n    \n    A = [0] * k\n    for i in range(l, r + 1):\n        A[0] += i % 10\n        A[1] += i % 100 // 10\n        A[2] += i % 1000 // 100\n    \n    return str(sum(A) % (10 ** 9 + 7))\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    l, r, k = map(int, stdin.split(' '))\n    return str(sum(map(int, (str(i) for i in range(l, r + 1))[::-1])))\n\n\ndef"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    [l, r, k] = [int(x) for x in stdin.split(' ')]\n    return sum((10 ** i) for i in range(l, r + 1)) % 998244353 - \\\n           sum((10 ** i) * (i + 1) for i in range(l, r + 1)) % 998244353 + \\\n           (10 ** (r + 1) * sum(int(d) for d in str(r + 1))) % 998244353 + \\\n           sum(int(d) for d in str(l)) % 998244353\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    l, r, k = [int(x) for x in stdin.split(' ')]\n    return str(sum([n for n in range(l, r + 1) if len(set(str(n))) <= k]))\n\n\ndef"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    l, r, k = map(int, stdin.split(' '))\n    return (r * (r + 1) // 2 - l * (l - 1) // 2) - \\\n           ((r - l) * (r - l + 1) // 2 * k) % 10000000\n\n\ndef"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    l, r, k = map(int, stdin.split())\n    answer = 0\n    # k\ub9cc\ud07c \uc874\uc7ac\ud558\ub294 \uc22b\uc790\ub4e4\uc744 \uc800\uc7a5\ud558\ub294 \ub9ac\uc2a4\ud2b8\n    numbers = []\n    for i in range(l, r + 1):\n        str_i = str(i)\n        if len(set(str_i)) <= k:\n            numbers.append(i)\n    answer = sum(numbers)\n    return str(answer % 1000000007)\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    l, r, k = stdin.split(' ')\n    l, r, k = int(l), int(r), int(k)\n    return sum(i % 998244353 + 1 for i in range(l, r + 1))\n"
    },
    {
        "number": 267,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin.split()\n    l, r, k = int(x[0]), int(x[1]), int(x[2])\n    return sum(sum(int(i) for i in str(n)) for n in range(l, r + 1)) % (10 ** 9 + 7)\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = [int(i) for i in stdin.split(\" \")]\n    saturations = [int(i) for i in stdin.split(\" \")]\n\n    def check_condition():\n        for i in range(1, n):\n            if abs(saturations[i] - saturations[i - 1]) > m:\n                return False\n            if abs(saturations[i] - saturations[i - 1]) <= d and i!= 0:\n                return False\n        return True\n\n    left, right = 0, 0\n    while right < n:\n        if abs(saturations[right] - saturations[left]) <= m and check_condition():\n            right += 1\n        else:\n            left += 1\n\n    return \"YES\" if right == n else \"NO\"\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    data = list(map(int, stdin.split('\\n')[0].split()))\n    n, k, d = data[0], data[1], data[2]\n    boxes = [[] for _ in range(n)]\n    for i in range(n):\n        boxes[i] = [data[3 + i * 2], data[3 + i * 2 + 1]]\n    print(boxes)\n\n    def is_compatible(box):\n        s = set()\n        for pencil in box:\n            if pencil in s:\n                return False\n            s.add(pencil)\n        return True\n\n    def is_valid(boxes):\n        for box in boxes:\n            if len(box) < k:\n                return False\n            if not is_compatible(box):\n                return False\n        return True\n\n    def is_satisfied(boxes, d):\n        for box in boxes:\n            if max(box) - min(box) > d:\n                return False\n        return True\n\n    def try_distribution(boxes, d):\n        s = 0\n        for box in boxes:\n            s += sum(box)\n        if s!= n * k:\n            return False\n        if not is_valid(boxes):\n            return False\n        if not is_satisfied(boxes, d):\n            return False\n        return True\n\n    ans = 'YES' if try_distribution(boxes, d) else 'NO'\n    return ans\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k, d = (int(i) for i in stdin.split('\\n')[0].split(' '))\n    a = [int(i) for i in stdin.split('\\n')[1].split(' ')]\n    answer = 'YES' if k <= n and d <= n and any(abs(b - c) <= d and abs(b - c) > 0 for c, b in zip(a, a[1:])) else 'NO'\n    return answer\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, k, d = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    s = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    \n    if len(set(s)) == k:\n        return 'YES'\n    \n    for i in range(len(s)):\n        for j in range(i+1, len(s)):\n            if abs(s[i]-s[j]) <= d:\n                return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport sys\nimport math\n\n_, k, d = (int(i) for i in sys.stdin.readline().strip().split())\nlst = [int(i) for i in sys.stdin.readline().strip().split()]\n\nres = 0\nfor i, x in enumerate(lst):\n    for j in range(i + 1, len(lst)):\n        if abs(lst[i] - lst[j]) <= d:\n            res += 1\n\nprint(\"YES\" if res == k else \"NO\")\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if x and y and abs(x - y) <= d else \"NO\""
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 268,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    l, n, d = list(map(int, stdin.split()))\n    s = list(map(int, stdin.split()))\n    s.sort()\n    if n < k:\n        return \"NO\"\n    m = s[(n - k):n]\n    if max(m) - min(m) > d:\n        return \"NO\"\n    return \"YES\"\n\n\nprint(solution(input()))\n\n\n\"\"\""
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    print(sum(s.count(x) for x in {'R', 'B', 'Y', 'G'}))\n    print(sum(s.count(x) for x in {'R', 'B', 'Y'}))\n    print(sum(s.count(x) for x in {'R', 'B'}))\n    print(sum(s.count(x) for x in {'R'}))\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    result: list = [0, 0, 0, 0]\n    string: str = stdin.replace('!!!', '')\n    for i in string:\n        if i == 'R':\n            result[0] += 1\n        elif i == 'B':\n            result[1] += 1\n        elif i == 'Y':\n            result[2] += 1\n        elif i == 'G':\n            result[3] += 1\n    print(' '.join(map(str, result)))\n\n\nsolution(\"RYBGRYBGR\")\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    counts = [0,0,0,0]\n    for symbol in stdin:\n        if symbol == 'R':\n            counts[0] += 1\n        elif symbol == 'B':\n            counts[1] += 1\n        elif symbol == 'Y':\n            counts[2] += 1\n        elif symbol == 'G':\n            counts[3] += 1\n        else:\n            counts[0] += 1\n            counts[1] += 1\n            counts[2] += 1\n            counts[3] += 1\n    return''.join([str(i) for i in counts])\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return '{} {} {} {}'.format(\n        stdin.count('B'),\n        stdin.count('G'),\n        stdin.count('R'),\n        stdin.count('Y')\n    )\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return '{0}\\n{1}\\n{2}\\n{3}'.format(stdin.count('R'), stdin.count('B'), stdin.count('Y'), stdin.count('G'))"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    num = stdin.count('Y')\n    num -= stdin.count('R')\n    num -= stdin.count('G')\n    num -= stdin.count('B')\n    return num\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    print(sum([not i.isupper() for i in stdin if i.isalpha()]))\n    print(sum([i.isupper() for i in stdin if i.isalpha()]))\n    return"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return None"
    },
    {
        "number": 269,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.count('R'), stdin.count('B'), stdin.count('Y'), stdin.count('G')"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"The solution method that prints E.\"\"\"\n    # Get the inputs.\n    n, m = input().split(\" \")\n    n, m = int(n), int(m)\n    connections = [tuple(map(int, line.split(\" \"))) for line in input().split(\"\\n\")]\n    connections = {connections[i][0] - 1: connections[i][1] - 1 for i in range(m)}\n\n    # Divide the connections into two lists for Aoki and Takahashi.\n    connections_Aoki = []\n    connections_Takahashi = []\n    for key, val in connections.items():\n        if key!= n - 1:\n            connections_Aoki.append((key, val))\n        else:\n            connections_Takahashi.append((key, val))\n\n    # Compute E for the case where Takahashi blocks no passage.\n    if len(connections_Takahashi) == 0:\n        connections_Aoki.sort(key=lambda x: x[0])\n        connections_Takahashi.sort(key=lambda x: x[0])\n        e = 1 / (2 * n - 1)\n        for key, val in connections_Aoki:\n            if key > 0:\n                e += 1 / (2 * key)\n        e -= 1 / n\n        print(e)\n        return\n\n    # Compute E for the case where Takahashi blocks a passage.\n    else:\n        connections_Aoki.sort(key=lambda x: x[0])\n        connections_Takahashi.sort(key=lambda x: x[0])\n        e = 1 / n\n        for key, val in connections_Aoki:\n            e -= 1 / key\n        e -= 1 / n\n        print(e)\n        return\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    (n, m) = map(int, stdin.readline().split())\n    paths = []\n    for i in range(m):\n        paths.append(list(map(int, stdin.readline().split())))\n\n    path_count = [[0 for _ in range(n)] for _ in range(n)]\n    for p in paths:\n        path_count[p[0] - 1][p[1] - 1] += 1\n    for i in range(n):\n        for j in range(n):\n            if i!= j:\n                path_count[i][j] = 0\n\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    dp[0][0] = 1\n\n    for j in range(n):\n        for k in range(j, n):\n            for i in range(n):\n                if i!= k:\n                    dp[k][j] += dp[i][j] * path_count[i][k]\n\n    print(sum(dp[-1]) / m)\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # create a map of rooms\n    # add the exits\n    pass\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    edges = [list(map(int, line.split())) for line in stdin.split('\\n')[1:-1]]\n\n    passes = []\n    for edge in edges:\n        passes.append((edge[0], edge[1]))\n    \n    passes.sort(key=lambda x: x[1])\n    # print(passes)\n\n    rooms = set()\n    for edge in passes:\n        rooms.add(edge[0])\n        rooms.add(edge[1])\n    \n    rooms.add(1)\n    rooms.add(n)\n\n    return f\"{n / len(rooms):.6f}\"\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(n) for n in stdin.split(' ')]\n    p_list = [stdin.split(' ')[1:] for i in range(m)]\n    def prob(p_list):\n        pr = [int(p.split(' ')[1]) / int(p.split(' ')[0]) for p in p_list]\n        return sum(pr)\n\n    res = prob(p_list)\n    return str(res)\n"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(str(1)+'\\n'+str(4)+'\\n'+str(1)+'\\n'+str(4)+'\\n'+str(1)+'\\n'+str(2)+'\\n'+str(3)+'\\n'+str(1)+'\\n'+str(4)+'\\n'+str(3)+'\\n'+str(1)+'\\n'+str(2)+'\\n')\n    '1.5'\n    \"\"\"\n    N, M = map(int, stdin.split('\\n')[:2])\n    A = []\n    for i in range(M):\n        A += map(int, stdin.split('\\n')[2 + i].split(' '))\n    passes = defaultdict(list)\n    for i, j in combinations(range(1, N + 1), 2):\n        passes[(i, j)].append((i, j))\n    passes[(1, N)].append((1, N))\n    min_e = float('inf')\n    for v in range(1, N + 1):\n        d = defaultdict(list)\n        for i in range(1, N + 1):\n            for j in range(1, N + 1):\n                d[(i, j)].append((i, j))\n        for i, j in passes[(v, N)]:\n            for k, l in passes[(i, j)]:\n                if (i, k) in d and (k, j) in d:\n                    d[(i, j)].append((i, k))\n                    d[(i, j)].append((k, j))\n        for i, j in d[(v, N)]:\n            if j!= N:\n                d[(i, j)].remove((i, j))\n                d[(i, j)].append((i, N))\n        for i, j in d[(v, N)]:\n            for k, l in d[(i, j)]:\n                if k!= i and l!= N:\n                    d[(i, j)].append((k, N))\n        for i, j in d[(v, N)]:\n            for k, l in d[(i, j)]:\n                if k!= i and l!= N:\n                    d[(i, j)].append((N, l))\n        for i, j in d[(v, N)]:\n            for k, l in d[(i, j)]:\n                if k!= i and l!= N:\n                    d[(i, j)].append((N, k))\n        d[(v, N)].append((N, N))\n        for i, j in d[(v, N)]:\n            if i!= N and j!= N:\n                d[(i, j)].append((N, N))\n        for i, j in d[(v, N)]:\n            if i!= N and j!= N:\n                d[(i, j)].append((N, N))\n        for i, j in d[(v, N)]:\n            if i!= N and j!= N:\n                d[(i, j)].append((N, N))\n        for i, j in d[(v, N)]:\n            if i!= N and j!= N:\n                d[(i, j)].append((N, N))\n        for i, j in d[(v, N)]:\n            if i!= N and j!= N:\n                d[(i, j)].append((N, N))\n        for i, j in d[(v, N)]:\n            if i!= N and j!= N:\n                d[(i, j)].append((N, N))\n        for i, j in d[(v, N)]:\n            if i!= N and j!= N:\n                d[(i, j)].append((N, N))\n        passes = d\n        e = 0\n        for a, b in combinations(A, 2):\n            if len(passes[(a, b)]) == 0:\n                e += 0\n            else:\n                e += 1\n        if e < min_e:\n            min_e = e\n    return str(min_e)"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n, m = map(int, stdin.split())\n    # get all the pairs\n    pairs = []\n    for _ in range(m):\n        s, t = map(int, stdin.split())\n        pairs.append((s, t))\n    # solve the problem\n    return str(m / (m + n - 2) * sum((s, t) in pairs for s, t in zip(range(1, n), range(2, n + 1))))\n\n------Test Case 2-----\ninput:\n4 6\n1 2\n1 3\n1 4\n3 2\n3 4\n\noutput:\n0.5\n\n------Test Case 3-----\ninput:\n4 6\n1 4\n2 3\n1 3\n1 2\n3 4\n2 4\n\noutput:\n0.5\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(10 ** 6)\n\nN, M = map(int, sys.stdin.readline().split())\n\npairs = []\nfor _ in range(M):\n    s, t = map(int, sys.stdin.readline().split())\n    pairs.append((s, t))"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # if N, M < 2, return '1'\n    n, m = map(int, stdin.split())\n    if n == 2 and m == 1:\n        return '1.5'\n    elif n < 2 or m < 2:\n        return '1'\n    \n    # set up the graph\n    edges = []\n    for i in range(m):\n        st, et = map(int, stdin.split()[i].split(' '))\n        edges.append((st, et))\n    \n    # construct the graph\n    graph = {k:[] for k in range(1, n+1)}\n    for edge in edges:\n        s, t = edge\n        graph[s].append(t)\n    \n    # find the answer\n    min_num = 1\n    for i in range(1, n):\n        # count the number of paths to go to room i\n        num = 0\n        for v in range(1, n+1):\n            if v == i:\n                num += 1\n            elif v in graph[i]:\n                num += 1\n        min_num = min(num, min_num)\n    \n    return '{:.6f}'.format(min_num/n)"
    },
    {
        "number": 270,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        print(0)\n    else:\n        if n % 10 == 0:\n            print(n)\n        else:\n            if n % 2 == 0:\n                print(n // 2)\n            else:\n                print(n + 1)\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        print(0)\n    elif n % 2 == 1:\n        print(n - 1)\n    else:\n        print(n)\n\"\"\"\n\n\ndef"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    d = abs(n)\n    if d % 2 == 0:\n        return str(d // 2)\n    else:\n        return str(d // 2 + 1)\n\n\"\"\"\n\ndef"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin) - (int(stdin) % 1))\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(n):\n        if (i + 1) % 10 == 0:\n            continue\n        count += 1\n    return str(n - count)\n\"\"\"\n\ndef"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return str(int(stdin))\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 0:\n        print(0)\n    elif n > 0:\n        print(n - n // (n + 1))\n    return \"\"\n\"\"\""
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 0:\n        n = -n\n    if n % 10 == 0:\n        return str(n)\n    if n % 100 == 0:\n        return str(n + 10 - 1)\n    return str(n + 10 - 1)\n"
    },
    {
        "number": 271,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # n = int(stdin)\n    # if abs(n - int(n)) < 0.5:\n    #     print(int(n))\n    # else:\n    #     print(int(n + 1))\n\n    # n = int(stdin)\n    # if n % 1 < 0.5:\n    #     print(n - n % 1)\n    # else:\n    #     print(n - n % 1 + 1)\n    return"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    p = [i for i in stdin]\n    m = [j for j in stdin]\n    for i in range(len(m)):\n        if m[i] not in p:\n            continue\n        else:\n            p.remove(m[i])\n            p.remove(m[i])\n    if p:\n        return '-1'\n    else:\n        return str(len(p)) + '\\n' + '\\n'.join(p)\n    \n    \ndef"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin_list = stdin.split('\\n')\n    stdin_list = [x for x in stdin_list if x!= '']\n    chars = list(stdin_list[0])\n    chars_set = set(chars)\n    chars_len = len(chars)\n    stdin_list = [x.split(' ') for x in stdin_list]\n    stdin_list = [x for x in stdin_list if len(x) == 2]\n    stdin_list = list(set([x[0] for x in stdin_list]))\n    \n    # print(chars_set)\n    # print(stdin_list)\n    \n    unique_keys = 0\n    unique_chars = 0\n    for c in chars_set:\n        if chars.count(c) == 1:\n            unique_chars += 1\n    unique_chars -= 1\n    \n    for key in stdin_list:\n        if stdin_list.count(key) == 2:\n            unique_keys += 1\n        elif stdin_list.count(key) == 0:\n            unique_keys += 0\n        else:\n            unique_keys += 1\n    \n    return str(unique_keys)\n        "
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the possible pairs of keys to swap for fixing Santa's keyboard.\"\"\"\n    patter = stdin.splitlines()[0]\n    typed = stdin.splitlines()[1]\n\n    return (\n        f\"{len(patter) - len(set(patter))}\\n\"\n        + \"\\n\".join(\n            list(\n                filter(\n                    lambda key: key,\n                    map(lambda p: p[0] + \" \" + p[1],\n                        [\n                            (\"\".join(sorted(set(patter[index1] + patter[index2])))\n                             for index1 in range(len(patter))\n                             for index2 in range(len(patter))\n                             if index1!= index2\n                             and patter[index1] + patter[index2] in typed\n                             ),\n                            ])\n                    )\n                )\n            )\n        )\n    )\n    pass\n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    \u0414\u0435\u043b\u0430\u0435\u0442 \u0432\u0441\u0435 \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e\n    '''\n    c = Counter(stdin)\n    c = sorted(c.items(), key = lambda x: x[1], reverse=True)\n    for item in c:\n        if item[1] == 1:\n            return 1\n    return -1\n    \n\nprint(solution('hastalavistababy'))"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    lst_s = list(stdin)\n    lst_t = list(stdin)\n    lst_s.sort()\n    lst_t.sort()\n    counter = 0\n    for i in range(len(lst_s)):\n        if lst_s[i]!= lst_t[i]:\n            counter += 1\n            lst_s[i], lst_t[i] = lst_t[i], lst_s[i]\n    if counter == 1:\n        return counter\n    else:\n        return -1"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(sorted(set(stdin.replace(' ', ''))))\n'''\n\ndef"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def swap_two(st):\n        lst = []\n        for i in range(len(st)):\n            if st[i] == 'z':\n                lst.append('a')\n            elif st[i] == 'a':\n                lst.append('z')\n            elif st[i] == 'c':\n                lst.append('b')\n            elif st[i] == 'b':\n                lst.append('c')\n            elif st[i] =='s':\n                lst.append('d')\n            elif st[i] == 'd':\n                lst.append('s')\n            elif st[i] == 'z':\n                lst.append('x')\n            elif st[i] == 'x':\n                lst.append('z')\n            elif st[i] == 'p':\n                lst.append('r')\n            elif st[i] == 'r':\n                lst.append('p')\n            elif st[i] =='m':\n                lst.append('q')\n            elif st[i] == 'q':\n                lst.append('m')\n            else:\n                lst.append(st[i])\n        return ''.join(lst)\n\n    def find_pairs(st):\n        lst = []\n        for i in range(len(st)):\n            if st[i] == 'z':\n                lst.append(('a', 'z'))\n            elif st[i] == 'a':\n                lst.append(('z', 'a'))\n            elif st[i] == 'c':\n                lst.append(('b', 'c'))\n            elif st[i] == 'b':\n                lst.append(('c', 'b'))\n            elif st[i] =='s':\n                lst.append(('d','s'))\n            elif st[i] == 'd':\n                lst.append(('s', 'd'))\n            elif st[i] == 'z':\n                lst.append(('x', 'z'))\n            elif st[i] == 'x':\n                lst.append(('z', 'x'))\n            elif st[i] == 'p':\n                lst.append(('r', 'p'))\n            elif st[i] == 'r':\n                lst.append(('p', 'r'))\n            elif st[i] =='m':\n                lst.append(('q','m'))\n            elif st[i] == 'q':\n                lst.append(('m', 'q'))\n            else:\n                lst.append((st[i], st[i]))\n        return lst\n\n    a, b = stdin.split()\n    print(len(set(find_pairs(swap_two(a))).intersection(find_pairs(b))))\n    print(*list(set(find_pairs(swap_two(a))).intersection(find_pairs(b))))\n\n    return \"2\"\n\nsolution(stdin)"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    p1, p2 = stdin.split()\n    r1 = len(p1)\n    r2 = len(p2)\n    \n    d1 = {}\n    for i in range(r1):\n        if p1[i] in d1:\n            d1[p1[i]].append(i)\n        else:\n            d1[p1[i]] = [i]\n    \n    d2 = {}\n    for i in range(r2):\n        if p2[i] in d2:\n            d2[p2[i]].append(i)\n        else:\n            d2[p2[i]] = [i]\n    \n    m = r1 - r2\n    if m!= r1 - r2:\n        return '-1'\n    \n    ans = 0\n    for k in d1:\n        if k in d2:\n            if len(d1[k]) > 1:\n                ans += len(d1[k]) - 1\n            else:\n                ans += len(d1[k])\n            if len(d2[k]) > 1:\n                ans += len(d2[k]) - 1\n            else:\n                ans += len(d2[k])\n            if k in d2[k]:\n                ans -= 1\n    \n    return ans\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 272,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    first, last = stdin.split(' ')\n    return ''.join(sorted(first) + sorted(last))\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    f_name = stdin[0:stdin.index(' ')]\n    l_name = stdin[stdin.index(' '):]\n    sorted_first_name = sorted(f_name)\n    sorted_last_name = sorted(l_name)\n    first_name_sorted = ''.join(sorted_first_name)\n    last_name_sorted = ''.join(sorted_last_name)\n    return first_name_sorted + last_name_sorted\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    stdin[0] = stdin[0][0] + stdin[1][0]\n    return min(sorted(stdin[0]))\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split(' ')\n    return ''.join(sorted(s[0][0] + s[1][0]))\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(stdin[i] for i in range(min(len(stdin), len(stdin)), max(len(stdin), len(stdin)) - 1) if stdin[i] > stdin[i + 1])\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    f_name, l_name = stdin.split(\" \")\n    return \"\".join([f_name[0], l_name[0]])\n\"\"\"\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    firstname, lastname = stdin.split(' ')\n    firstname = ''.join(list(filter(lambda x: x.isalpha(), firstname)))\n    lastname = ''.join(list(filter(lambda x: x.isalpha(), lastname)))\n    return firstname[:1] + lastname[:1]"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    first_name = stdin.split(' ')[0]\n    last_name = stdin.split(' ')[1]\n    \n    return first_name[:1] + last_name[:1]\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... harry\n   ... potter\n   ... ''')\n    'hap'\n    >>> solution('''\n   ... tom\n   ... riddle\n   ... ''')\n    'tomr'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 273,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve exercise and return result\"\"\"\n    first, last = stdin.split()\n    first, last = first[0], last[0]\n    return \"\".join((first, last))\n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    pass\n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n[[][]]\")\n    +- -+\n    ||   |\n    +- -+\n    >>> solution(\"4\\n[[][]]\\n[[][]]\")\n    +-     -+\n    |   ||   |\n    +- -+ -+\n    ||   ||   |\n    +- -+ -+\n    \n    >>> solution(\"2\\n[]\")\n    +- -+\n    |   |\n    +- -+\n    >>> solution(\"2\\n[][]\")\n    +- -+\n    ||   |\n    +- -+\n    \n    >>> solution(\"4\\n[[][]]\")\n    +- -+\n    ||   |\n    +- -+\n    \n    >>> solution(\"4\\n[[][]]\\n[[][]]\")\n    +- -+\n    ||   ||   |\n    +- -+ -+\n    \"\"\"\n    \n    pass"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    brackets: str = stdin\n    row_len: int = 2 * len(brackets) + 1\n    rows_count: int = int(row_len / 2)\n    brackets_count: int = len(brackets)\n    for row_count in range(rows_count):\n        row: List[str] = [\" \"] * row_len\n        printable_brackets: int = 0\n        for i in range(row_count, row_len - 1 - row_count):\n            if brackets[printable_brackets] == \"[\":\n                row[i] = \"+-\"\n                if brackets[printable_brackets] == \"]\" and brackets[printable_brackets + 1] == \"[\":\n                    printable_brackets += 2\n            elif brackets[printable_brackets] == \"]\":\n                row[i] = \"|\" + \" \" * row_len + \"|\"\n                if brackets[printable_brackets] == \"[\" and brackets[printable_brackets + 1] == \"]\":\n                    printable_brackets += 2\n            else:\n                row[i] = \" \" + \" \" * row_len + \" \"\n            printable_brackets += 1\n        print(*row, sep=\"\")\n    print(\"+\" + \"-\" * rows_count * 2 + \"+\")\n    print(\"|\" + \" \" * rows_count * 2 + \"|\")\n    print(\"+\" + \"-\" * rows_count * 2 + \"+\")\n    print(\"|\" + \" \" * rows_count * 2 + \"|\")\n    return \"\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nYou can copy the input to the stdin.\n\nWrite a function:\n\ndef"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    length_str = int(stdin)\n    bracket_string = stdin[0]\n    # bracket_string_list = list(bracket_string)\n    # bracket_string_list.insert(0, \"\")\n    # bracket_string_list.append(\"\")\n    # bracket_string = \"\".join(bracket_string_list)\n\n    print(bracket_string)\n    return None\n\n\ndef"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport math\n\ndef"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return ''\n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"The function returns string which represents the image. \n    \n    Parameters\n    ----------\n    stdin : str\n        Given string for processing.\n        \n    Returns\n    -------\n    str\n        Processed string with drawing image.\n    \"\"\"\n    brackets_open = [] # list of all open brackets\n    brackets_closed = [] # list of all closed brackets\n    # iterate through the string, create empty list and add the first bracket\n    for i in range(len(stdin)):\n        if stdin[i] == '[':\n            brackets_open.append(i)\n        elif stdin[i] == ']':\n            brackets_closed.append(i)\n    \n    # get difference between the two lists to get the difference in the number of brackets\n    difference = len(brackets_open) - len(brackets_closed)\n    # if there is difference between the two lists, then we have some brackets which are not closed\n    if difference!= 0:\n        # go through the open list\n        for i in range(len(brackets_open)):\n            # if open bracket is not closed then we can add a vertical bar\n            if brackets_open[i] < brackets_closed[i]:\n                stdin = stdin[:brackets_open[i]] + '|' + stdin[brackets_open[i]:brackets_closed[i] + 1] + '|' + stdin[brackets_closed[i] + 1:]\n    # if difference is 0, then we do not have any brackets which are not closed\n    else:\n        # go through the open list\n        for i in range(len(brackets_open)):\n            # if open bracket is not closed then we can add a vertical bar\n            if brackets_open[i] < brackets_closed[i]:\n                stdin = stdin[:brackets_open[i]] + '|' + stdin[brackets_open[i]:brackets_closed[i] + 1] + '|' + stdin[brackets_closed[i] + 1:]\n    \n    return stdin\n"
    },
    {
        "number": 274,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\"\"\"\n\n\ndef"
    },
    {
        "number": 275,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    number1, number2 = map(lambda x: list(map(int, x)), stdin.split(\"\\n\"))\n    return \">\" if int(stdin, 2) > int(stdin, 10) else \"<\" if int(stdin, 2) < int(stdin, 10) else \"=\"\n"
    },
    {
        "number": 275,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [s.replace('0', '').replace('1', '') for s in stdin.split('\\n')]\n    a, b = int(a, base=2), int(b, base=2)\n    print('>' if a > b else '<' if a < b else '=')\n"
    },
    {
        "number": 275,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin)\n    return '>' if q ** 2 > q + 1 else '<' if q ** 2 < q + 1 else '='"
    },
    {
        "number": 275,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 275,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    ..."
    },
    {
        "number": 275,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x, y = [int(i) for i in stdin.split('\\n')]\n    return '>' if x*y > y*x else '<' if x*y < y*x else '='\n\n\nprint(solution(\"1000\\n111\"))\nprint(solution(\"00100\\n11\"))\nprint(solution(\"110\\n101\"))\n\n\n---\n\nThe time complexity is O(n) and the space complexity is O(1) (where n is the length of the input number).\n"
    },
    {
        "number": 275,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n    "
    },
    {
        "number": 275,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 275,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 275,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport math\n\n\ndef"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    #\n    return ''\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport re\nfrom collections import Counter\n\nGEM_PATTERN = re.compile(r'\\w\\w')\n\nGEMS = ['Power', 'Time', 'Space', 'Soul', 'Reality', 'Mind']\n\n\ndef"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    ans = []\n    g = {'p': 'purple', 'g': 'green', 'b': 'blue', 'o': 'orange', 'r':'red', 'y': 'yellow'}\n    for i in stdin.split('\\n'):\n        if i in g.keys():\n            ans.append(g[i])\n    return '\\n'.join(ans)\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    g = ['p', 'g', 'b', 'o', 'r', 'y']\n    s = stdin.split('\\n')\n    if len(s) < 7:\n        return '6'\n    g1 = [x for x in g if x not in s]\n    return g1[0] + g1[1] + g1[2] + g1[3] + g1[4] + g1[5]\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    gauntlet = {\n        \"purple\": \"Power\",\n        \"green\": \"Time\",\n        \"blue\": \"Space\",\n        \"orange\": \"Soul\",\n        \"red\": \"Reality\",\n        \"yellow\": \"Mind\",\n    }\n    stdin = stdin.splitlines()\n    gauntlet_size = int(stdin[0])\n    gauntlet_seen = set()\n    for _ in range(gauntlet_size):\n        gauntlet_seen.add(stdin[1 + _][0])\n    missing = 6 - len(gauntlet_seen)\n    return \"\\n\".join(sorted(gauntlet[g] for g in gauntlet if g not in gauntlet_seen))\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\n'''\n\ndef"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    allGems = {\n        \"purple\": 0,\n        \"green\": 0,\n        \"blue\": 0,\n        \"orange\": 0,\n        \"red\": 0,\n        \"yellow\": 0\n    }\n    for line in stdin.splitlines():\n        allGems[line] = 1\n    return \" \".join(\n        [gem for gem in allGems if allGems[gem] == 0]\n    )\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\"\n        \\n  |   |\n     ---+---+---\n     |  |   |   |\n     ---+---+---\n     |   |   |  |\n     ---+---+---\n     |   |   |  |\n     ---+---+---\n     |  |   |   |\n     ---+---+---\n    \"\"\"\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    g = stdin.split()\n    g = set(g)\n    x = ['Power', 'Time', 'Space', 'Soul', 'Reality', 'Mind']\n    for i in range(len(x)):\n        if x[i] not in g:\n            print(x[i])\n"
    },
    {
        "number": 276,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the missing gems.\n\n    >>> solution(\"4\\nred\\npurple\\nyellow\\norange\\n\")\n    2\n    >>> solution(\"0\\n\")\n    6\n    \"\"\"\n    colors = [[\"purple\", \"time\"], [\"green\", \"space\"], [\"blue\", \"soul\"], [\"orange\", \"reality\"], [\"red\", \"mind\"]]\n    missing_colors = []\n    gauntlets = stdin.split()\n    gauntlets = [i.lower() for i in gauntlets]\n    for color in colors:\n        if not(color[0] in gauntlets or color[1] in gauntlets):\n            missing_colors.append(color[0])\n            missing_colors.append(color[1])\n    return len(missing_colors)\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\""
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n\n    stdin = stdin.split('\\n')\n    n, a, b = [int(stdin[i]) for i in range(1, 4)]\n    team_list = [i for i in range(1, n + 1)]\n\n    if n < 2 or a == b:\n        return 'Final!'\n\n    rounds = 0\n    while len(team_list) > 1:\n        rounds += 1\n        for i in range(0, len(team_list), 2):\n            if team_list[i] == a:\n                if team_list[i + 1] == b:\n                    return str(rounds)\n                team_list[i], team_list[i + 1] = team_list[i + 1], team_list[i]\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution for Football World Cup 2020.\"\"\"\n    # Receive the input\n    n, a, b = stdin.split(\"\\n\")\n    n, a, b = int(n), int(a), int(b)\n\n    # Perform the game\n    rounds = 1\n    while n > 2:\n        rounds += 1\n        n = int(n/2)\n    \n    # Final\n    if a == b:\n        return \"Final!\"\n    \n    # Compute the number of rounds\n    rounds += (a-1)/n\n    \n    # Compute the number of the round\n    rounds = int(rounds) + (a-1)%n\n    \n    # Return the result\n    return rounds\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    return \"\"\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = list(map(int, stdin.split()))\n    for i in range(1, n + 1):\n        if i % 2 == 1:\n            if a > b:\n                a, b = b, a\n            if i == a or i == b:\n                return \"Final!\"\n        else:\n            if a < b:\n                a, b = b, a\n            if i == a or i == b:\n                return i\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split('\\n'))\n    k = 1\n    while k * (k - 1) < n:\n        k += 1\n    return 'Final!' if (k - 1) % 2 == 0 and (k - 1) * k // 2 >= a and (k - 1) * k // 2 >= b else k - 1\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    teams = [int(i) for i in stdin.split(' ')]\n    if teams[0] % 2 == 0:\n        return 'Final!'\n    for i in range(1, teams[0]):\n        if i % 2!= 0 and teams[i] % 2 == 0:\n            return str(i + 1)\n    return str(teams[0] - 1)\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    num_teams = [int(s) for s in stdin.split()]\n    num_teams = num_teams[0]\n    num_rounds = num_teams // 2\n    num_teams = num_teams - num_rounds\n    # num_rounds = num_teams // 2\n    # num_teams = num_teams - num_rounds\n    # print(num_teams)\n    # print(num_rounds)\n    teams = [int(s) for s in stdin.split()]\n    teams = teams[1:]\n    # print(teams)\n    teams.sort()\n    # print(teams)\n    teams_dict = {}\n    for team in teams:\n        teams_dict[team] = 0\n    # print(teams_dict)\n    counter = 1\n    for i in range(len(teams)-1):\n        if teams[i]!= teams[i+1]:\n            teams_dict[teams[i]] = counter\n            teams_dict[teams[i+1]] = counter\n            counter += 1\n    # print(teams_dict)\n    if teams[len(teams)-1] == num_teams:\n        teams_dict[num_teams] = counter\n    # print(teams_dict)\n    for key in teams_dict.keys():\n        teams_dict[key] = 'F'\n    # print(teams_dict)\n    round_num = 1\n    for key in teams_dict.keys():\n        if teams_dict[key] == 'F':\n            teams_dict[key] = round_num\n            round_num += 1\n    # print(teams_dict)\n    # print(round_num)\n    if 'F' in teams_dict.values():\n        print('Final!')\n    else:\n        print(teams_dict[num_teams])\n    return ''\n"
    },
    {
        "number": 277,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = [int(i) for i in stdin.split()]\n    for i in range(1, n + 1):\n        if a * i % n == b:\n            return \"Final!\"\n    return str(n - ((a * b - 1) // n))\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin.readline())\n    p = [int(i) for i in stdin.readline().strip().split(' ')]\n    b = [int(i) for i in stdin.readline().strip().split(' ')]\n    counter = 0\n    for i in range(2*n):\n        for j in range(n):\n            if (i // n) % 2 == 0:\n                if b[j] == 0 and (i + p[j]) % n == j:\n                    counter += 1\n                    b[j] = 1\n                    break\n            else:\n                if b[j] == 1 and (i + p[j]) % n == j:\n                    counter += 1\n                    b[j] = 0\n                    break\n    return str(counter)\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    p = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    \n    return '3'"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 3 2 1\\n0 1 1 1\\n\")\n    2\n    \"\"\"\n    n = int(stdin.split(\"\\n\")[0])\n    p, b = [int(i) for i in stdin.split(\"\\n\")[1:]]\n    cnt = 0\n    for i in range(1, n + 1):\n        if p[i] == i:\n            if b[i] == 1:\n                cnt += 2\n            else:\n                cnt += 1\n    return cnt"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    p = list(map(int, stdin[1].split()))\n    b = list(map(int, stdin[2].split()))\n    # print(n)\n    # print(p)\n    # print(b)\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return 'N/A'"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # get input\n    arr = list(map(int, stdin.split('\\n')[0].split(' ')))\n    p = list(map(int, stdin.split('\\n')[1].split(' ')))\n    b = list(map(int, stdin.split('\\n')[2].split(' ')))\n\n    # get length\n    n = arr[0]\n\n    # find min and max\n    min = 0\n    max = n\n    for i in range(n):\n        if p[i] < min:\n            min = p[i]\n        if p[i] > max:\n            max = p[i]\n\n    # get all possible permutation\n    nums = []\n    for i in range(min, max+1):\n        nums.append(i)\n    perms = list(map(list, itertools.permutations(nums, len(nums))))\n\n    # get output\n    count = 0\n    for perm in perms:\n        # remove if the same as in perm\n        if perm == p:\n            continue\n        # check for every element if the same as in b\n        count += 1\n        for i in range(n):\n            if b[i]!= (perm[i] == p[i]):\n                break\n        else:\n            break\n    return str(count)\n"
    },
    {
        "number": 278,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\n\ndef"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    v_1, v_2, t, d = [int(n) for n in stdin.split()]\n    return \"{}\".format(max(v_1 * t + d * (t - 1) / 2, v_2 * t + d * (t - 1) / 2))\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    v_1, v_2, t, d = map(int, stdin.split('\\n')[0].split())\n    return max(0, v_1 * t + d * (v_2 - v_1) // (v_2 - v_1))\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    v_1, v_2, t, d = map(int, stdin.split())\n    return t * (v_2 - v_1) if d > (v_2 - v_1) or d == 0 else t * d + v_2 * (t - 1)\n\nprint(solution(input()))\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    \n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('5 6\\n4 2')\n    '26'\n    >>> solution('10 10\\n10 0')\n    '100'\n    '''\n    v1, v2, t, d = [int(i) for i in stdin.split('\\n')]\n    print(max(v2 - v1 * t, v1 * (t - d)))\n    \n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lst = stdin.split(\"\\n\")\n    v_1 = int(lst[0].split(\" \")[0])\n    v_2 = int(lst[0].split(\" \")[1])\n    t = int(lst[1].split(\" \")[0])\n    d = int(lst[1].split(\" \")[1])\n    \n    start = 0\n    end = start + t\n    \n    while end < v_2:\n        if abs(v_2 - v_1) > d:\n            start += 1\n            end = start + t\n        else:\n            end += 1\n    \n    return str(end - start)\n"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 279,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    v1, v2, t, d = [int(x) for x in stdin.split('\\n')]\n    return str(t * (v2 - v1) + d * (abs(v1 - v2) + v1 + v2))\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Determine if the bridge will collapse or not.\"\"\"\n    n, m = map(int, stdin.split())\n    weights, lengths, capacities = [], [], []\n    for i in range(n):\n        weights.append(int(stdin.split()[i]))\n    for i in range(m):\n        lengths.append(int(stdin.split()[n + i]))\n        capacities.append(int(stdin.split()[n + i + 1]))\n    # print(weights, lengths, capacities)\n    weights.sort()\n    lengths.sort()\n    capacities.sort()\n    # print(weights, lengths, capacities)\n    i = 0\n    j = 0\n    count = 0\n    result = []\n    for x in range(m + 1):\n        while weights[i] > lengths[j]:\n            i += 1\n            j += 1\n        else:\n            if lengths[j] * capacities[x] > weights[i]:\n                result.append(-1)\n            else:\n                result.append(lengths[j])\n                count += 1\n                if count == m:\n                    break\n                else:\n                    j += 1\n    return''.join(map(str, result))"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time Complexity: O(N log(N))\n    Space Complexity: O(N)\n    \"\"\"\n    lines = stdin.split('\\n')\n    n, m = [int(number) for number in lines[0].split()]\n    weights = [int(number) for number in lines[1].split()]\n    lengths = [int(number) for number in lines[2].split()]\n    weights.sort()\n    lengths.sort()\n    for i in range(n):\n        if lengths[i] > weights[i]:\n            return \"-1\"\n    if sum(weights) > sum(lengths):\n        return \"-1\"\n    dp = [0 for i in range(m)]\n    for i in range(n):\n        if dp[0] < weights[i]:\n            return \"-1\"\n        for j in range(m - 1, -1, -1):\n            if dp[j] + weights[i] <= lengths[i]:\n                dp[j] += weights[i]\n                break\n    return str(lengths[-1] - lengths[0])\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve the task.\"\"\"\n    n, m = map(int, stdin.split())\n    l = list(map(int, stdin.split()))\n    for i in range(1, n):\n        l[i] += l[i - 1]\n    for i in range(m):\n        l[0] -= 1\n        l[n - 1] -= 1\n        l[1:n - 1] = sorted(l[1:n - 1])\n        for j in range(1, n - 1):\n            if l[j - 1] < l[j] - l[j + 1]:\n                return \"IMPOSSIBLE\"\n    return str(l[1] - l[0])\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M = list(map(int, stdin.split(' ')))\n    w = list(map(int, stdin.split(' ')))\n    l = list(map(int, stdin.split(' ')))\n    v = list(map(int, stdin.split(' ')))\n\n    return '-1'\n\ndef"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.split('\\n')\n    n, m = list(map(int, input_lines[0].split()))\n    camels = list(map(int, input_lines[1].split()))\n    camel_parts = []\n    for i in range(m):\n        camel_parts.append(list(map(int, input_lines[2+i].split())))\n    def solve(camels, i, camel_parts):\n        if i == m:\n            return 0\n        if sum(camels) > camel_parts[i][1]:\n            return float('inf')\n        if camels[i] + camels[i+1] > camel_parts[i][1]:\n            return float('inf')\n        if camels[i] + camels[i+1] < camel_parts[i][1]:\n            return camels[i] + camels[i+1] + solve(camels, i+2, camel_parts)\n        return camels[i] + solve(camels, i+1, camel_parts)\n    return solve(camels, 0, camel_parts)\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # get number of camels\n    num_camels = int(stdin.split()[0])\n    # initialize an array to hold all camels and their weights\n    camels = [0 for i in range(num_camels)]\n    # initialize an array to hold all camels and their weight capacity\n    camels_capacity = [0 for i in range(num_camels)]\n    # for each row in stdin...\n    for i in range(1, num_camels + 1):\n        # split the row into two values (i.e. w_i and l_i)\n        camels[i - 1], camels_capacity[i - 1] = map(int, stdin.split()[i - 1].split())\n    # initialize an array to hold the current distance\n    distances = [0 for i in range(num_camels)]\n    # initialize an array to hold the maximum distance of the previous iteration\n    max_distance = [0 for i in range(num_camels)]\n    # initialize an array to hold the weights of the previous iteration\n    weights_previous = [0 for i in range(num_camels)]\n    # initialize an array to hold the weights of the current iteration\n    weights_current = [0 for i in range(num_camels)]\n    # initialize a counter variable to hold the number of times the bridge has collapsed\n    bridge_collapse = 0\n    # initialize a counter variable to hold the number of times the bridge has not collapsed\n    bridge_not_collapse = 0\n    # for each row in stdin...\n    for i in range(num_camels):\n        # for each row in stdin...\n        for j in range(num_camels):\n            # if the current distance is smaller than the previous distance...\n            if distances[j] < max_distance[j]:\n                # if the current distance is greater than the previous distance...\n                if distances[j] > max_distance[j]:\n                    # for each row in stdin...\n                    for k in range(num_camels):\n                        # if the current distance is greater than the previous distance...\n                        if distances[k] > max_distance[k]:\n                            # if the current distance is greater than the current weight capacity of the camels...\n                            if distances[k] > camels_capacity[k]:\n                                # increment the bridge collapse counter variable\n                                bridge_collapse += 1\n                                # break from the current row\n                                break\n                            # otherwise, if the current distance is less than or equal to the current weight capacity of the camels...\n                            else:\n                                # increment the bridge not collapse counter variable\n                                bridge_not_collapse += 1\n                                # break from the current row\n                                break\n                        # otherwise, if the current distance is less than or equal to the current weight capacity of the camels...\n                        else:\n                            # increment the bridge not collapse counter variable\n                            bridge_not_collapse += 1\n                            # break from the current row\n                            break\n                    # increment the current weight of the camels in the current row\n                    weights_current[j] += weights_previous[j]\n                    # increment the current distance of the camels in the current row\n                    distances[j] += weights_previous[j]\n                    # set the current distance of the camels in the current row to the current distance\n                    distances[j] = max_distance[j]\n                    # for each row in stdin...\n                    for l in range(num_camels):\n                        # if the current distance is greater than the current weight capacity of the camels...\n                        if distances[l] > camels_capacity[l]:\n                            # set the current distance of the camels in the current row to the current distance\n                            distances[l] = max_distance[l]\n                    # set the current weight of the camels in the current row to the current weight\n                    weights_current[j] = weights_previous[j]\n                    # for each row in stdin...\n                    for m in range(num_camels):\n                        # if the current distance is greater than the current weight capacity of the camels...\n                        if distances[m] > camels_capacity[m]:\n                            # set the current weight of the camels in the current row to the current weight\n                            weights_current[m] = weights_previous[m]\n                    # set the current weight of the camels in the current row to the current weight\n                    weights_current[j] = weights_previous[j]\n                # if the current distance is less than or equal to the previous distance...\n                else:\n                    # increment the bridge not collapse counter variable\n                    bridge_not_collapse += 1\n                    # for each row in stdin...\n                    for n in range(num_camels):\n                        # if the current distance is greater than the current weight capacity of the camels...\n                        if distances[n] > camels_capacity[n]:\n                            # increment the bridge collapse counter variable\n                            bridge_collapse += 1\n                            # break from the current row\n                            break\n                        # otherwise, if the current distance is less than or equal to the current weight capacity of the camels...\n                        else:\n                            # increment the bridge not collapse counter variable\n                            bridge_not_collapse += 1\n                            # break from the current row\n                            break\n                    # increment the current weight of the camels in the current row\n                    weights_current[j] += weights_previous[j]\n                    # increment the current distance of the camels in the current row\n                    distances[j] += weights_previous[j]\n                    # set the current distance of the camels in the current row to the current distance\n                    distances[j] = max_distance[j]\n                    # for each row in stdin...\n                    for o in range(num_camels):\n                        # if the current distance is greater than the current weight capacity of the camels...\n                        if distances[o] > camels_capacity[o]:\n                            # set the current distance of the camels in the current row to the current distance\n                            distances[o] = max_distance[o]\n                    # set the current weight of the camels in the current"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Time Complexit: O(Nlog(N))\n    Space Complexity: O(N)\n    '''\n    n, m = list(map(int, stdin.split()))\n    arr = list(map(int, stdin.split()))\n    if len(arr)!= n:\n        return -1\n    arr.sort()\n    left = 0\n    right = arr[n - 1] - arr[0]\n    while left < right:\n        mid = left + (right - left) // 2\n        v = arr[0]\n        l = 1\n        for i in range(1, n):\n            v += arr[i]\n            l += 1\n            if v > mid:\n                v = arr[i]\n                l = i + 1\n            if l == m:\n                break\n        if l < m:\n            left = mid + 1\n        else:\n            right = mid\n    return left\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution to the camel crossing the bridge problem\n\n    Args:\n        stdin (str): input string\n\n    Returns:\n        str: solution to the problem\n    \"\"\"\n    inputs = stdin.split()\n    n = int(inputs[0])\n    m = int(inputs[1])\n\n    # sort the camels by their weights\n    camels = []\n    for i in range(1, n+1):\n        camels.append((i, int(inputs[i])))\n\n    camels.sort(key=lambda cam: cam[1])\n\n    # calculate the distance between each camel\n    dist = []\n    for i in range(1, n):\n        dist.append(camels[i][1] - camels[i-1][1])\n\n    dist.append(camels[-1][1] - camels[0][1])\n\n    # check for collisions\n    collisions = []\n    for i in range(m):\n        v = int(inputs[n+i+1])\n        collisions.append(v)\n\n    # calculate the optimal distance\n    for i in range(m):\n        collisions[i] = collisions[i] - 1\n        s = 0\n        for j in range(n):\n            s += dist[j]\n            if s > collisions[i]:\n                break\n\n    # return result\n    if collisions[-1] > 0:\n        return -1\n    else:\n        return s\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.split(' ')]\n    if n == 0 or m == 0:\n        return '-1'\n    w = [int(i) for i in stdin.split(' ')]\n    l = [int(i) for i in stdin.split(' ')]\n    v = [int(i) for i in stdin.split(' ')]\n\n    w.sort(reverse=True)\n    l.sort(reverse=True)\n    v.sort(reverse=True)\n\n    weights = 0\n    for i in range(0, m):\n        weights += v[i]\n        if weights > w[0]:\n            return '-1'\n\n    if weights < w[1]:\n        return '-1'\n\n    for i in range(0, m):\n        if weights < v[i]:\n            return '-1'\n\n    weights = 0\n    for i in range(0, m):\n        weights += l[i]\n        if weights > w[1]:\n            return '-1'\n\n    if weights < w[2]:\n        return '-1'\n\n    for i in range(0, m):\n        if weights < l[i]:\n            return '-1'\n\n    return '0'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 280,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split(\"\\n\")\n    N = int(inputs[0].split(\" \")[0])\n    M = int(inputs[0].split(\" \")[1])\n    camels = []\n    for i in range(1, N + 1):\n        camels.append([int(inputs[i].split(\" \")[0]), int(inputs[i].split(\" \")[1])])\n    camel_weights = []\n    for i in range(N):\n        camel_weights.append(camels[i][0])\n    camels_part = []\n    for i in range(M):\n        camels_part.append(int(inputs[N + i + 1].split(\" \")[0]))\n    camels_part = sorted(camels_part)\n    for i in range(M):\n        camels_part[i] -= 1\n    # Loop through parts and match the camel order to the part order\n    camels_part_order = []\n    for i in camels_part:\n        for j in range(N):\n            if camels[j][0] == i:\n                camels_part_order.append(j)\n    # Loop through the camels and calculate the distance between the first and last element\n    dist = 0\n    for i in range(len(camels_part_order)):\n        if camels_part_order[i] == 0:\n            dist += camels[0][0]\n        elif camels_part_order[i] == N - 1:\n            dist += camels[-1][0]\n        else:\n            if camels_part_order[i] > camels_part_order[i - 1] and camels_part_order[i] < camels_part_order[i + 1]:\n                dist += camels[camels_part_order[i]][0]\n            elif camels_part_order[i] > camels_part_order[i - 1] and camels_part_order[i] == camels_part_order[i + 1]:\n                dist += camels[camels_part_order[i]][0] - camels[camels_part_order[i - 1]][0]\n            elif camels_part_order[i] < camels_part_order[i - 1] and camels_part_order[i] < camels_part_order[i + 1]:\n                dist += camels[camels_part_order[i]][0] - camels[camels_part_order[i - 1]][0]\n            elif camels_part_order[i] < camels_part_order[i - 1] and camels_part_order[i] == camels_part_order[i + 1]:\n                dist += camels[camels_part_order[i]][0]\n    return str(dist)\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(factorial(a + b) // factorial(a) // factorial(b))[-1]\n\n\ndef"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(factorial(a) // factorial(b) % 10)\n\n\ndef"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(i) for i in stdin.split()]\n    return str(pow(a, b, 10))[-1]\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return '{}'.format(sum(((a - 1) // i) * (b - 1) for i in range(1, a + 1)))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    a, b = map(int, stdin.split())\n    return str(len([1 for i in range(a, b + 1) if len(str(i)) % 2 == 0]))\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    a, b = [int(i) for i in stdin.split(' ')]\n    return str(a ** b % 10)\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    c = int(a / b)\n    return str(c)[-1]\n"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(i) for i in stdin.split()]\n    return str(len(str(factorial(b) // factorial(a))))\n\n\ndef"
    },
    {
        "number": 281,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    return str(math.floor((b * math.factorial(a)) % 10))\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    lilies = stdin.split()\n    if n == 1:\n        return -1\n    count = 0\n    for i in range(n):\n        if lilies[i] == '0':\n            break\n        else:\n            count += 1\n    if count == n - 1:\n        return -1\n    for j in range(m, count - 1, -1):\n        if lilies[j] == '0':\n            return count - j + 1\n\n'''\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # return \"\"\n    # import sys\n    # sys.stdin = open(\"../tests/input_samples/input_sum\")\n\n    n, d = [int(num) for num in stdin.split()]\n    lily_points = [int(num) for num in stdin]\n    lily_points[0] = 1\n\n    cnt = 0\n    for i in range(1, len(lily_points)):\n        if lily_points[i] == 1:\n            if i + d < n:\n                for j in range(d):\n                    if lily_points[i + j + 1] == 0:\n                        cnt += 1\n                        break\n            else:\n                cnt += 1\n    if cnt == n - 1:\n        print(-1)\n    else:\n        print(cnt)\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    "
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    n, d = list(map(int, stdin.split(\" \")))\n    l = stdin[0:n]\n    arr = []\n    i = 0\n    while i < len(l):\n        if l[i] == \"0\":\n            arr.append(i + 1)\n        i += 1\n    res = []\n    if arr[-1] == n:\n        res.append(0)\n    else:\n        res.append(n - arr[-1])\n    ans = n\n    j = 0\n    k = 1\n    while k < d:\n        if j + arr[j] >= n:\n            ans = min(ans, k)\n            break\n        else:\n            ans = min(ans, k + n - arr[j] - 1)\n            j = arr[j] + j\n        k += 1\n    if ans == d:\n        print(ans)\n    else:\n        print(-1)\n    return \"\""
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    arr = [int(x) for x in stdin.split()]\n    cnt = 0\n    idx = 0\n    while idx < n:\n        for i in range(1, d + 1):\n            if idx + i < n and arr[idx + i] == 1:\n                idx += i\n                cnt += 1\n                break\n            if idx + i >= n:\n                return -1\n    return cnt\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time: O(n)\n    Space: O(n)\n    \"\"\"\n    n, d = [int(i) for i in stdin.split()]\n    lily = [int(i) for i in stdin.split()[0]]\n    dp = [[0] * n for _ in range(d + 1)]\n    dp[0][0] = 1\n    for i in range(d):\n        for j in range(n):\n            if lily[j]:\n                dp[i + 1][j] += dp[i][j]\n            if lily[j] and j + 1 < n and lily[j + 1]:\n                dp[i + 1][j + 1] += dp[i][j]\n    print(dp[-1][-1])\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    return ''\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin\n    n, d = input.split(\" \")\n    n, d = int(n), int(d)\n    s = input.split(\" \")[1]\n\n    if n < d:\n        return -1\n\n    if s[0] == \"1\" and s[-1] == \"1\":\n        return n - 1\n\n    n -= 1\n    l = []\n    for i in range(n):\n        if s[i] == \"1\":\n            l.append(i)\n    k = len(l)\n    jump = 0\n    curr = 0\n    count = 0\n    while curr!= n:\n        if k == 0:\n            curr += 1\n            jump += 1\n            k = len(l)\n        else:\n            k -= 1\n            if curr + d + 1 <= n:\n                curr += d + 1\n                jump += 1\n                k = len(l)\n            else:\n                jump += 1\n                k = len(l)\n                count += 1\n\n    return jump if count == 0 else count\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, d, s = stdin.split()\n    n, d, s = int(n), int(d), list(map(int, list(s)))\n    start = 0\n    end = n - 1\n    while start <= end:\n        m = start + (end - start) // 2\n        if d <= m:\n            if (s[m] == 1):\n                end = m - 1\n            elif (s[m] == 0):\n                start = m + 1\n        else:\n            if (s[m] == 1):\n                start = m + 1\n            elif (s[m] == 0):\n                end = m - 1\n\n    if start == n:\n        return \"1\"\n    return str(n - start)\n"
    },
    {
        "number": 282,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split(' '))\n    lily_string = stdin[1: -1]\n    current_position = 1\n    nr_of_jumps = 0\n    while current_position < n:\n        if lily_string[current_position] == '1':\n            nr_of_jumps += 1\n        else:\n            nr_of_jumps = 0\n        current_position += d\n    return -1 if nr_of_jumps == 0 else nr_of_jumps\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for m in range(1, 1000):\n        if is_prime(n * m + 1):\n            continue\n        else:\n            return str(m)\n\n\ndef"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    import math\n    x = int(stdin)\n    for i in range(1,int(math.sqrt(x))+1):\n        if x % i == 0 and i!= 1 and i!= x:\n            return i\n    return -1\n"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    m = 1\n    while m < 1_000:\n        if n * m + 1 < 2:\n            m += 1\n            continue\n        if is_prime(n * m + 1):\n            m += 1\n        else:\n            break\n    if m < 10_000:\n        return str(m)\n    return '0'\n\n\ndef"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    m = 0\n    while n * (m + 1) + 1 % 2!= 0:\n        m += 1\n    return str(m)"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for m in range(1, 10 ** 3):\n        if m % 2 == 0 or m % 5 == 0:\n            continue\n        if (n * m) % 2 == 0 or (n * m) % 5 == 0:\n            continue\n        if m % 10 == 4:\n            continue\n        if (n * m) % 10 == 4:\n            continue\n        if n * m + 1 > 10 ** 6:\n            continue\n        if prime_check(n * m + 1):\n            return str(m)\n    return 'no counterexample'\n\n\ndef"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return '2'"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(solve(stdin.strip()))\n    \n    \ndef"
    },
    {
        "number": 283,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for m in range(1, 1000):\n        if all(n % i!= 0 for i in range(2, m)):\n            return str(m)\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if int(stdin) % (1 * 1 * 1 * 1 * 1 * 1 + 2 * 1 * 1 * 1 * 1 + 3 * 1 * 1 * 1) == 0 else 'NO'\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if len([int(n) for n in stdin.split(' ')]) % 3 == 0 else 'NO'\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    sum = 0\n    n = str(n)\n    sum = int(n[0]) * 1234567 + int(n[1]) * 123456 + int(n[2]) * 12345 + int(n[3]) * 123 + int(n[4]) * 1234 + int(n[5]) * 1234 + int(n[6]) * 123 + int(n[7]) * 123 + int(n[8]) * 1234 + int(n[9]) * 1234 + int(n[10]) * 123 + int(n[11]) * 123 + int(n[12]) * 1234 + int(n[13]) * 1234 + int(n[14]) * 123 + int(n[15]) * 123 + int(n[16]) * 1234 + int(n[17]) * 1234 + int(n[18]) * 123 + int(n[19]) * 123 + int(n[20]) * 1234 + int(n[21]) * 1234 + int(n[22]) * 123 + int(n[23]) * 123 + int(n[24]) * 1234 + int(n[25]) * 1234 + int(n[26]) * 123 + int(n[27]) * 123 + int(n[28]) * 1234 + int(n[29]) * 1234 + int(n[30]) * 123 + int(n[31]) * 123 + int(n[32]) * 1234 + int(n[33]) * 1234 + int(n[34]) * 123 + int(n[35]) * 123 + int(n[36]) * 1234 + int(n[37]) * 1234 + int(n[38]) * 123 + int(n[39]) * 123 + int(n[40]) * 1234 + int(n[41]) * 1234 + int(n[42]) * 123 + int(n[43]) * 123 + int(n[44]) * 1234 + int(n[45]) * 1234 + int(n[46]) * 123 + int(n[47]) * 123 + int(n[48]) * 1234 + int(n[49]) * 1234 + int(n[50]) * 123 + int(n[51]) * 123 + int(n[52]) * 1234 + int(n[53]) * 1234 + int(n[54]) * 123 + int(n[55]) * 123 + int(n[56]) * 1234 + int(n[57]) * 1234 + int(n[58]) * 123 + int(n[59]) * 123 + int(n[60]) * 1234 + int(n[61]) * 1234 + int(n[62]) * 123 + int(n[63]) * 123 + int(n[64]) * 1234 + int(n[65]) * 1234 + int(n[66]) * 123 + int(n[67]) * 123 + int(n[68]) * 1234 + int(n[69]) * 1234 + int(n[70]) * 123 + int(n[71]) * 123 + int(n[72]) * 1234 + int(n[73]) * 1234 + int(n[74]) * 123 + int(n[75]) * 123 + int(n[76]) * 1234 + int(n[77]) * 1234 + int(n[78]) * 123 + int(n[79]) * 123 + int(n[80]) * 1234 + int(n[81]) * 1234 + int(n[82]) * 123 + int(n[83]) * 123 + int(n[84]) * 1234 + int(n[85]) * 1234 + int(n[86]) * 123 + int(n[87]) * 123 + int(n[88]) * 1234 + int(n[89]) * 1234 + int(n[90]) * 123 + int(n[91]) * 123 + int(n[92]) * 1234 + int(n[93]) * 1234 + int(n[94]) * 123 + int(n[95]) * 123 + int(n[96]) * 1234 + int(n[97]) * 1234 + int(n[98]) * 123 + int(n[99]) * 123 + int(n[100]) * 1234 + int(n[101]) * 1234 + int(n[102]) * 123 + int(n[103]) * 123 + int(n[104]) * 1234 + int(n[105]) * 1234 + int(n[106]) * 123 + int(n[107]) * 123 + int(n[108]) * 1234 + int(n[109]) * 1234 + int(n[110]) * 123 + int(n[111]) * 123 + int(n[112]) * 1234 + int(n[113]) * 1234 + int(n[114]) * 123 + int(n[115]) * 123 + int(n[116]) * 1234 + int(n[117]) * 1234 + int(n[118]) * 123 + int(n[119]) * 123 + int(n[120]) * 1234 + int(n[121]) * 1234 + int(n[122]) * 123 + int(n[123]) * 123 + int(n[124]) * 1234 + int(n[125]) * 1234 + int(n[126]) * 123 + int(n[127]) * 123 + int(n[128]) * 1234 + int(n[129]) * 1234 + int(n[130]) * 123 + int(n[131]) * 123 + int(n[132]) * 1234 + int(n[133]) * 1234 + int(n[134]) * 123 + int(n[135]) * 123 + int(n[136]) * 1234 + int(n[137]) * 1234 + int(n[138]) * 123 + int(n[139]) * 123 + int(n[140]) * 1234 + int(n[141]) * 1234 + int(n[142]) * 123 + int(n[143]) * 123 + int(n[144]) * 1234 + int(n[145]) * 1234 + int(n[146]) * 123 + int(n[147]) * 123 + int(n[148]) * 1234 + int(n[149]) * 1234 + int(n[150]) * 123 + int(n[151]) * 123 + int(n[152]) * 1234 + int(n[153]) * 1234 + int(n[154]) * 123 + int(n[155]) * 123 + int(n[156]) * 1234 + int(n[157]) * 1234 + int(n[158]) * 123 + int(n[159]) * 123 + int(n[160]) * 1234 + int(n[161]) * 1234 + int(n[162]) * 123 + int(n[163]) * 123 + int(n[164]) * 1234 + int(n[165]) * 1234 + int(n[166]) * 123 + int(n[167]) * 123 + int(n[168]) * 1234 + int(n[169]) * 1234 + int(n[170]) * 123 + int(n[171]) * 123 + int(n[172]) * 1234 + int(n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    s = 0\n    while x > 0:\n        if x % 2 == 0:\n            s += 1\n            x /= 2\n        else:\n            break\n    return \"YES\" if s == 3 else \"NO\"\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"NO\" if int(stdin) % (1 * 2 * 3 * 4 * 5 * 6) else \"YES\"\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 12345 == 0:\n        return 'YES'\n    return 'NO'\n\"\"\"\n\ndef"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    total_cost = [0, 0, 0]\n    while n:\n        cost, n = divmod(n, 1_234_567)\n        if cost:\n            total_cost[0] += cost\n        cost, n = divmod(n, 123_456)\n        if cost:\n            total_cost[1] += cost\n        cost, n = divmod(n, 1_234)\n        if cost:\n            total_cost[2] += cost\n    return 'YES' if n == 0 else 'NO'\n"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    c1, c2, c3 = 0, 0, 0\n    while n > 0:\n        c1, c2, c3 = c1 + n % 1234567, c2 + n % 12345, c3 + n % 123\n        n = n // 1234567\n    return 'YES' if n == 0 else 'NO'\n    \n    \n-----BEST PRACTICES-----\ndef"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return 'YES' if (a % 10 ** 9 == 0) or (a % (10 ** 4 - 1) == 0) else 'NO'"
    },
    {
        "number": 284,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if int(stdin) == 1 * 123 * 456 + 1 * 234 * 567 else \"NO\"\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return 'YES'\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = [\n        line.split() for line in stdin.split('\\n') if line\n    ]\n    k = [float(line[0]) for line in lines]\n    b = [float(line[1]) for line in lines]\n    x1, x2 = [float(line) for line in stdin.split('\\n')[1].split()]\n    k_sorted = sorted(k)\n    for i, (x1, x2, k, b) in enumerate(zip(x1, x2, k_sorted, b)):\n        if x1 < x2:\n            if x1 < k < x2 and k < x2:\n                return 'YES'\n            if x1 < k < x2 and x1 < x2:\n                return 'YES'\n        else:\n            if x1 < k < x2 and k < x2:\n                return 'YES'\n            if x1 < k < x2 and x1 > x2:\n                return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    #your code here\n    n = int(stdin.readline())\n    arr = []\n    for i in range(n):\n        arr.append(list(map(int, stdin.readline().split())))\n    \n    x_1, x_2 = list(map(int, stdin.readline().split()))\n    \n    check = False\n    for i in range(n):\n        for j in range(n):\n            if i!= j and (x_1 <= arr[i][0] and arr[i][0] < x_2) and (x_1 <= arr[j][0] and arr[j][0] < x_2) and (arr[i][0] <= arr[j][0]):\n                check = True\n                break\n            else:\n                continue\n    return \"YES\" if check else \"NO\"\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\nprint(solution('4\\n1 2\\n1 2\\n1 0\\n0 1\\n0 2\\n')) # True\nprint(solution('2\\n1 3\\n1 0\\n-1 3\\n')) # True\nprint(solution('2\\n1 3\\n1 0\\n0 3\\n')) # False\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if any(\n        x_1 < x_2 and (\n            x_1 < x < x_2\n            or x < x_1 < x_2\n        )\n        for x_1, x_2 in map(int, stdin.splitlines()[1].split())\n        for x in map(int, stdin.splitlines()[2].split())\n    ) else 'NO'\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 285,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    ans = 0\n    for i in range(1, n // 2 + 1):\n        ans += i if n % i == 0 else 0\n    print(ans)\n    return \"\"\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)\n\"\"\"\n\n\ndef"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    dp = {0: 1, 1: 1}\n    for i in range(2, n + 1):\n        dp[i] = dp[i - 1] + dp[i - 2]\n    return dp[n]\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    w = [0] * (n + 1)\n    w[0] = 1\n    for i in range(1, n + 1):\n        s = set()\n        for j in range(i // 2, 0, -1):\n            if i - j in s:\n                s.add(j)\n                w[i] += 1\n            else:\n                s.add(j)\n    return str(w[n])\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution to the problem.\"\"\"\n    pass\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the number of different weights of splits of n.\"\"\"\n    n = int(stdin.split()[0])\n    s = set()\n\n    for i in range(1, n + 1):\n        if n % i == 0:\n            s.add(i)\n\n    return len(s)\n\nprint(solution(input()))\n"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    # 1 <= n <= 10**9\n    # 1 <= k <= 5\n    # 1 <= a_i <= n\n    # k <= m <= n\n    # a_i <= a_j <= n\n    # a_i <= b_j <= n\n    # 1 <= c_i <= n\n    # 1 <= d_j <= n\n    # m <= c_i <= n\n    # m <= d_j <= n\n    # 1 <= e_k <= n\n    # 1 <= f_l <= n\n    # n <= e_k <= f_l\n    # 0 <= g <= n\n    # 1 <= h <= n\n    # n <= h <= n\n    # 1 <= i <= n\n    # 1 <= j <= n\n    # 1 <= k <= n\n    # 1 <= l <= n\n    # 1 <= m <= n\n    # 1 <= o <= n\n    # 1 <= p <= n\n    # 1 <= q <= n\n    # 1 <= r <= n\n    # 1 <= s <= n\n    # n <= s <= n\n    # 1 <= t <= n\n    # 1 <= u <= n\n    # 1 <= v <= n\n    # 1 <= w <= n\n    # 1 <= x <= n\n    # 1 <= y <= n\n    # 1 <= z <= n\n    # n <= z <= n\n    # 1 <= a <= n\n    # 1 <= b <= n\n    # 1 <= c <= n\n    # 1 <= d <= n\n    # 1 <= e <= n\n    # 1 <= f <= n\n    # 1 <= g <= n\n    # 1 <= h <= n\n    # 1 <= i <= n\n    # 1 <= j <= n\n    # 1 <= k <= n\n    # 1 <= l <= n\n    # 1 <= m <= n\n    # 1 <= o <= n\n    # 1 <= p <= n\n    # 1 <= q <= n\n    # 1 <= r <= n\n    # 1 <= s <= n\n    # 1 <= t <= n\n    # 1 <= u <= n\n    # 1 <= v <= n\n    # 1 <= w <= n\n    # 1 <= x <= n\n    # 1 <= y <= n\n    # 1 <= z <= n\n    # n <= z <= n\n    # 1 <= a_i <= a_j <= n\n    # 1 <= b_j <= b_k <= n\n    # 1 <= c_i <= c_j <= n\n    # 1 <= d_j <= d_k <= n\n    # 1 <= e_i <= e_j <= n\n    # 1 <= f_i <= f_j <= n\n    # 1 <= g_i <= g_j <= n\n    # 1 <= h_i <= h_j <= n\n    # 1 <= i_i <= i_j <= n\n    # 1 <= j_i <= j_j <= n\n    # 1 <= k_i <= k_j <= n\n    # 1 <= l_i <= l_j <= n\n    # 1 <= m_i <= m_j <= n\n    # 1 <= n_i <= n_j <= n\n    # 1 <= o_i <= o_j <= n\n    # 1 <= p_i <= p_j <= n\n    # 1 <= q_i <= q_j <= n\n    # 1 <= r_i <= r_j <= n\n    # 1 <= s_i <= s_j <= n\n    # 1 <= t_i <= t_j <= n\n    # 1 <= u_i <= u_j <= n\n    # 1 <= v_i <= v_j <= n\n    # 1 <= w_i <= w_j <= n\n    # 1 <= x_i <= x_j <= n\n    # 1 <= y_i <= y_j <= n\n    # 1 <= z_i <= z_j <= n\n    # 1 <= a_i <= b_j <= b_k <= n\n    # 1 <= c_i <= d_j <= d_k <= n\n    # 1 <= e_i <= f_j <= f_k <= n\n    # 1 <= g_i <= h_j <= h_k <= n\n    # 1 <= i_i <= j_i <= j_k <= n\n    # 1 <= k_i <= l_j <= l_k <= n\n    # 1 <= m_i <= n_j <= n_k <= n\n    # 1 <= o_i <= p_j <= p_k <= n\n    # 1 <= q_i <= r_j <= r_k <= n\n    # 1 <= s_i <= t_j <= t_k <= n\n    # 1 <= u_i <= v_j <= v_k <= n\n    # 1 <= w_i <= x_j <= x_k <= n\n    # 1 <= y_i <= z_j <= z_k <= n\n    # 1 <= a_i <= a_j <= a_k <= n\n    # 1 <= b_j <= b_k <= n\n    # 1 <= c_i <= c_j <= c_k <= n\n    # 1 <= d_j <= d_k <= n\n    # 1 <= e_i <= e_j <= e_k <= n\n    # 1 <= f_i <= f_j <= f_k <= n\n    # 1 <= g_i <= g_j <= g_k <= n\n    # 1 <= h_i <= h_j <= h_k <= n\n    # 1 <= i_i <= i_j <= i_k <= n\n    # 1 <= j_i <= j_j <= j_k <= n\n    # 1 <= k_i <= k_j <= k_k <= n\n    # 1 <= l_i <= l_j <= l_k <= n\n    # 1 <= m_i <= m_j <= m_k <= n\n    # 1 <= n_i <= n_j <= n_k <= n\n    # 1 <= o_i <= o_j <= o_k <= n\n    # 1 <= p_i <= p_j <= p_k <= n\n    # 1 <= q_i <= q_j <= q_k <= n\n    # 1 <= r_i <= r_j <= r_k <= n\n    # 1 <= s_i <= s_j <= s_k <= n\n    # 1 <= t_i <= t_j <= t_k <= n\n    # 1 <= u_i <= u_j <= u_k <= n\n    # 1 <= v_i <= v_j <= v_k <= n\n    # 1 <= w_i <= w_j <= w_k <= n\n    # 1 <= x_i <= x_j <= x_k <= n\n    # 1 <= y_i <= y_j <= y_k <= n\n    # 1 <= z_i <= z_j <= z_k <= n\n\n    count = 0"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Get the count of different split weights\"\"\"\n    n = int(stdin)\n    weights = set()\n    \n    for i in range(1, n+1):\n        for j in range(1, i):\n            weights.add(i-j+1)\n    \n    return len(weights)\n    pass"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    d = {1: 1, 2: 2, 3: 4, 4: 7, 5: 1, 6: 0, 7: 0, 8: 0, 9: 0, 10: 0}\n    if n == 1:\n        return 0\n    for i in range(4, n + 1):\n        a = i % 10\n        b = (i // 10) % 10\n        c = (i // 100) % 10\n        if b == a:\n            d[i] = d[i - 1]\n        elif a == c:\n            d[i] = d[i - 1] + d[i - 3]\n        else:\n            d[i] = d[i - 1] + d[i - 2] + d[i - 3]\n    return d[n]\n\n\ndef"
    },
    {
        "number": 286,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    cnt = 0\n    for i in range(1, n//2+1):\n        if i == n//2:\n            cnt += 2\n            break\n        if (n-i)%i == 0:\n            cnt += 1\n    return str(cnt)\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = n - m\n    return str(a) +'' + str(n - a)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # n, k = map(int, stdin.split())\n    # for i in range(1, n+1):\n    #     if i > k:\n    #         print(i-1, i)\n    #         break\n    #     if i <= k:\n    #         print(i, i+1)\n    #         break\n\n    n, k = map(int, stdin.split())\n    l = [i for i in range(1, n+1)]\n    print(l[:k-1], l[k-1:])\n    return \"\"\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def div(a: int, b: int) -> float:\n        return (a + b) / 2\n\n    n, k = [int(i) for i in stdin.split(\" \")]\n\n    a = n - k\n    b = k\n\n    print(int(div(a, b)))\n    print(int(div(b, a)))"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    good_apartments = [i for i in range(1, n + 1) if i % 2!= k % 2 and (i - 1) % 2 == k % 2]\n    print(min(good_apartments), max(good_apartments))\n    return ''\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('''6 3''')\n    '''\n    :param stdin: input in string\n    :return: solution string\n    '''\n    '''\n    >>> solution('''3 0''')\n    '''\n    stdin = stdin.split('\\n')\n    n, k = list(map(int, stdin[0].split()))\n    if k == 0:\n        return str(1) +'' + str(n)\n    if k == n:\n        return str(1) +'' + str(n - 1)\n\n    # n <= 10^9, k <= n\n    good = set(range(1, n + 1))\n    for i in range(k):\n        good -= {stdin[i + 1].split()[1]}\n\n    # good set is not empty\n    return str(min(good)) +'' + str(max(good))\n\nprint(solution('''6 3\n7 7\n1 2\n3 4\n5 6\n7 8\n9 10\n11 12'''))\n"
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    # print(n, k)\n    return f\"{1 if k == 0 or n == k else n - k + 1} {n - k + 1 if n - k + 1 < n else n}\""
    },
    {
        "number": 287,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # i = 1\n    # while i < stdin:\n    #     i = stdin\n    # return str(i)\n\n    # a = [1, 2, 3, 4, 5]\n    # i = a[0]\n    # i = a[1]\n    # print(i)\n    # i = a[2]\n    # print(i)\n    # i = a[3]\n    # print(i)\n    # i = a[4]\n    # print(i)\n    # a[0] = a[1]\n    # print(a[0])\n    # print(a[1])\n    #\n    # return str(i)\n    # return str(a)\n    # a = [1, 2, 3, 4, 5]\n    # a[1] = a[3]\n    # print(a)\n\n    a = [1, 2, 3, 4, 5]\n    a[1] = a[3]\n    print(a)\n\n    return str(a)\n\n\ndef"
    },
    {
        "number": 288,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    n = int(stdin)\n    g = n - 2\n    if g <= 0:\n        return str(0)\n    if g % 2 == 0:\n        return str(g // 2)\n    else:\n        return str(g // 2 + 1)\n"
    },
    {
        "number": 288,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 288,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 288,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the maximum number of games in which the winner of the tournament can take part.\n    '''\n    pass\n    \n"
    },
    {
        "number": 288,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The solution is to check if a pair of players can play against each other,\n    then the problem reduces to the number of free players.\n    \"\"\"\n\n    def can_be_played_against(a, b):\n        return abs(a - b) > 1\n\n    n = int(stdin)\n    return str(max(0, n - 1 - sum(can_be_played_against(i, j) for i in range(n) for j in range(n)) // 2))\n"
    },
    {
        "number": 288,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 288,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 288,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution to the given problem\n\n    :param stdin: standard input\n    :return: the solution to the problem\n    \"\"\"\n    return \"\""
    },
    {
        "number": 288,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return ''"
    },
    {
        "number": 288,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    _ = int(stdin.readline())\n    arr = [int(i) for i in stdin.readline().split(' ')]\n    return str(solve(arr))\n\n\ndef"
    },
    {
        "number": 289,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return None\n"
    },
    {
        "number": 289,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return string after changing exactly one character\n    >>> solution('VK')\n    'VV'\n    >>> solution('VV')\n    'V'\n    >>> solution('VKKKKKKKKKVVVVVVVVVK')\n    'VKKVKKKKKKVVVVVVVVK'\n    \"\"\"\n    v = 0\n    k = 0\n    count = 0\n    string = stdin.strip()\n    for i in range(len(string)):\n        if string[i] == 'V':\n            v += 1\n        else:\n            k += 1\n        if v > 0 and k > 0 and v + k <= len(string):\n            count += 1\n    return string[v:v+k]\n"
    },
    {
        "number": 289,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n\"\"\"\n    def solution(self, stdin):\n        s = stdin\n        count = 0\n        for i in range(1, len(s) - 1):\n            count += s.count(\"VK\", i, i + 2)\n        return count\n\n\ndef"
    },
    {
        "number": 289,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    A palindromic string is a string which reads the same backwards and forwards.\n    Given a string, s, find the longest palindromic substring in s.\n    \"\"\"\n    # ********** Attempt 1 - 2019/10/20  ********** \n    def is_palindromic(s):\n        if s[0] == s[-1]:\n            if len(s) == 1:\n                return True\n            else:\n                return is_palindromic(s[1:-1])\n        else:\n            return False\n    \n    s = stdin\n    \n    palindromic_substrings = []\n    \n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            substring = s[i:j]\n            if is_palindromic(substring) and len(substring) > len(palindromic_substrings[-1]):\n                palindromic_substrings.append(substring)\n            elif not is_palindromic(substring):\n                break\n    \n    return max(palindromic_substrings, key=lambda x: len(x))\n    \n"
    },
    {
        "number": 289,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return stdin\n"
    },
    {
        "number": 289,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(stdin.split(\"V\")))\n\"\"\"\n"
    },
    {
        "number": 289,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.count(\"VK\")\n\"\"\"\n\n\ndef"
    },
    {
        "number": 289,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    res = set(stdin)\n    kv = 0\n    for i in res:\n        if i == 'K':\n            kv += 1\n    return kv"
    },
    {
        "number": 289,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin\n"
    },
    {
        "number": 289,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"VV\")\n    '0'\n    >>> solution(\"VVK\")\n    '1'\n    >>> solution(\"VVVVK\")\n    '2'\n    >>> solution(\"KVKV\")\n    '1'\n    >>> solution(\"KVKVVKV\")\n    '3'\n    >>> solution(\"VK\")\n    '1'\n    >>> solution(\"VKKVVK\")\n    '2'\n    \"\"\"\n    return str(max(\n        [len(s) - i - 1 for i in range(len(s)) if s.startswith(\"VK\", i)]\n    ))\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)\n\"\"\"\n\ndef"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    return str(stdin)"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.strip('\\n')\n    print(get_number_of_segments(line))\n    return ''\n\ndef"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\"\n    \"\"\"\n\n\ndef"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # my code here\n    return \"\"\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return number of segments required to draw n squares with a ruler\"\"\"\n    pass\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns minimum number of segments to draw a square\"\"\"\n    n = int(stdin)\n    ans = 0\n    for i in range(n-1):\n        if i == n-2:\n            ans += 1\n            print(ans)\n            break\n        if i % 2 == 0:\n            ans += 1\n            print(ans)\n        else:\n            ans += 2\n            print(ans)\n    return ans\n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)\n    \n"
    },
    {
        "number": 290,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = list(map(int, stdin.split(' ')))\n    return str(int(a**(1/2)//b**(1/2)))\n\n\ndef"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    if a > b:\n        return str(int(b / a / 3 - 2))\n    return str(int(a / b / 3 - 2))\n    pass\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    res = 0\n    while a <= b:\n        a *= 3\n        b *= 2\n        res += 1\n    return str(res)\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('4 7')\n    '2'\n    >>> solution('4 9')\n    '3'\n    >>> solution('1 1')\n    '1'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a < b:\n        print(0)\n    else:\n        print(a // (2**(b - a) + 1) - b // (2**(b - a) + 1))"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n\"\"\"\ndef"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(s) for s in stdin.split(\" \")]\n    for _ in range(3):\n        a *= 3\n        b *= 2\n        if a > b:\n            return str(a // b)\n    return str(a // b)\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    a, b = map(int, stdin.split())\n    a = a * 3\n    b = b * 2\n    if a > b:\n        return str(a - b)\n    elif b > a:\n        return str(a // b * 2)\n    elif a == b:\n        return str(1)\n"
    },
    {
        "number": 291,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    for _ in range(a, b + 1):\n        a *= 3\n        b *= 2\n        if a > b:\n            return _\n    return -1"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h, n = map(int, stdin.split())\n    \n    return\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def get_num_of_levels(height):\n        return (2 ** height) + 1\n\n    def get_num_of_nodes(height):\n        return get_num_of_levels(height) - 1\n\n    def get_node_at(level, index):\n        return 2 ** (height - (level - 1)) - 1 + index\n\n    def get_node_by_num(node_num):\n        level = 0\n        num_of_nodes = get_num_of_levels(height) - 1\n        while node_num > num_of_nodes:\n            node_num -= num_of_nodes\n            level += 1\n        node_num = get_node_at(level, node_num)\n        return node_num\n\n    height, num = [int(s) for s in stdin.split(\" \")]\n    return get_num_of_nodes(height) - get_node_by_num(num)\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    H, N = [int(s) for s in stdin.split()]\n    \n    return str(perfect_tree_height_and_count_of_leaves(H, N))\n\ndef"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    h, n = [int(x) for x in stdin.split()]\n    return"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\""
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    return stdout\n"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\ndef"
    },
    {
        "number": 292,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin.readline().strip())\n    ans = 0\n    for n in range(1, x+1):\n        for m in range(1, x+1):\n            if n*m == x:\n                ans += 1\n                print(n, m)\n    return str(ans)\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    k = int(stdin)\n    # k = int(input())\n    arr = [1, 2]\n    for i in range(3, 100):\n        if 2 * arr[-1] > k:\n            break\n        arr.append(2 * arr[-1])\n    l = len(arr)\n    print(k // l)\n    for i in range(k % l):\n        print(arr[i], arr[i + 1])\n    return ''\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    return n\n\n\ndef"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin.split('\\n')[0])\n    arr = set()\n    arr2 = set()\n    count = 0\n    for n in range(1,101):\n        for m in range(1,101):\n            a = pow(n, 2)\n            b = pow(m, 2)\n            c = n * m\n            if a + b == c and a!= 0 and b!= 0:\n                arr.add(a)\n                arr2.add(b)\n                count += 1\n    arr = list(arr)\n    arr2 = list(arr2)\n    arr.sort()\n    arr2.sort()\n    for i in range(len(arr)):\n        if arr[i] == x:\n            print(count)\n            print(arr[i], end=' ')\n            for j in range(len(arr2)):\n                if arr2[j] == x:\n                    print(arr2[j])\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split('\\n')\n    x = int(line[0])\n    arr = []\n    for i in range(x):\n        arr.append([i + 1] * (x + 1))\n    for i in range(x):\n        arr[i].pop(0)\n        arr[i].pop(x)\n    # print(arr)\n    arr = list(zip(*arr))\n    # print(arr)\n    count = 0\n    for i in range(x):\n        count += sum([arr[j].count(1) for j in range(len(arr))])\n    # print(count)\n    return count\n"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n\n\ndef"
    },
    {
        "number": 293,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    leap_days = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    [m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12] = stdin.split()\n    m1 = int(m1)\n    m2 = int(m2)\n    m3 = int(m3)\n    m4 = int(m4)\n    m5 = int(m5)\n    m6 = int(m6)\n    m7 = int(m7)\n    m8 = int(m8)\n    m9 = int(m9)\n    m10 = int(m10)\n    m11 = int(m11)\n    m12 = int(m12)\n    d1 = 0\n    d2 = 0\n    d3 = 0\n    d4 = 0\n    d5 = 0\n    d6 = 0\n    d7 = 0\n    d8 = 0\n    d9 = 0\n    d10 = 0\n    d11 = 0\n    d12 = 0\n    for i in range(m1):\n        d1 += leap_days[i]\n    for i in range(m1, m2):\n        d2 += days[i - m1]\n    for i in range(m2, m3):\n        d3 += days[i - m2]\n    for i in range(m3, m4):\n        d4 += days[i - m3]\n    for i in range(m4, m5):\n        d5 += days[i - m4]\n    for i in range(m5, m6):\n        d6 += days[i - m5]\n    for i in range(m6, m7):\n        d7 += days[i - m6]\n    for i in range(m7, m8):\n        d8 += days[i - m7]\n    for i in range(m8, m9):\n        d9 += days[i - m8]\n    for i in range(m9, m10):\n        d10 += days[i - m9]\n    for i in range(m10, m11):\n        d11 += days[i - m10]\n    for i in range(m11, m12):\n        d12 += days[i - m11]\n    if d1 + d2 + d3 + d4 + d5 + d6 + d7 + d8 + d9 + d10 + d11 + d12 == 365:\n        return \"YES\"\n    return \"NO\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"YES\"\n    elif n == 2:\n        return \"NO\"\n    elif n == 3:\n        return \"YES\"\n    elif n == 4:\n        return \"NO\"\n    elif n == 5:\n        return \"YES\"\n    elif n == 6:\n        return \"NO\"\n    elif n == 7:\n        return \"YES\"\n    elif n == 8:\n        return \"NO\"\n    elif n == 9:\n        return \"YES\"\n    elif n == 10:\n        return \"NO\"\n    elif n == 11:\n        return \"YES\"\n    elif n == 12:\n        return \"NO\"\n    elif n == 13:\n        return \"YES\"\n    elif n == 14:\n        return \"NO\"\n    elif n == 15:\n        return \"YES\"\n    elif n == 16:\n        return \"NO\"\n    elif n == 17:\n        return \"YES\"\n    elif n == 18:\n        return \"NO\"\n    elif n == 19:\n        return \"YES\"\n    elif n == 20:\n        return \"NO\"\n    elif n == 21:\n        return \"YES\"\n    elif n == 22:\n        return \"NO\"\n    elif n == 23:\n        return \"YES\"\n    elif n == 24:\n        return \"NO\"\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    days_in_months = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    days_in_months_leap = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n\n    stdin = stdin.split('\\n')\n    n = int(stdin[0])\n    arr = list(map(int, stdin[1].split()))\n\n    for i in range(n):\n        if arr[i] < 1 or arr[i] > 31:\n            return \"NO\"\n\n    if n < 3 or n > 24:\n        return \"NO\"\n\n    days = 0\n    for i in range(n - 1):\n        days += arr[i]\n        if arr[i] > arr[i + 1]:\n            return \"NO\"\n        if i == n - 2 and days > arr[i + 1]:\n            return \"NO\"\n    if arr[n - 1] > days_in_months[n - 1]:\n        return \"NO\"\n    if arr[n - 1] == 28 and arr[n - 1] == 2 and arr[0] == 29:\n        if sum(days_in_months_leap) < days:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def is_leap(year):\n        return year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)\n\n    def valid_month(month):\n        return month in range(1, 13)\n\n    def check_valid_date(day, month, year):\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            return day in range(1, 32)\n        elif month in [4, 6, 9, 11]:\n            return day in range(1, 31)\n        elif month == 2:\n            return day in range(1, 29 if is_leap(year) else 28)\n\n    days = stdin.split()\n    if not (len(days) == 3 or len(days) == 4):\n        return \"Invalid\"\n    if len(days) == 4 and not valid_month(int(days[0])):\n        return \"Invalid\"\n    day, month, year = map(int, days)\n    return \"YES\" if (check_valid_date(day, month, year)\n                     and check_valid_date(day + 1, month + 1, year + 1)) else \"NO\"\n\nprint(solution(input()))\n\n\n\ndef"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    num_days = stdin.split()\n    \n    days = [\"th\", \"nd\", \"rd\"] + [\"st\"] * 16 + [\"th\"] * 13 + [\"st\"] * 6 + [\"th\"] * 2\n    months = [\"jan\", \"feb\", \"mar\", \"apr\", \"may\", \"jun\", \"jul\", \"aug\", \"sep\", \"oct\", \"nov\", \"dec\"]\n    \n    return \"Yes\" if num_days[1] == days[int(num_days[0])] and months[int(num_days[0]) - 1] == num_days[2] else \"No\"\n\n\n\ndef"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Given n (1 \u2264 n \u2264 24) integers a_1, a_2,..., a_{n}, check if these integers could be durations in days of n consecutive months, according to Gregorian calendar.\n    \"\"\"\n    \n    # 1. read the input\n    n = int(stdin)\n    arr = [int(x) for x in stdin.split()]\n\n    # 2. Compute the number of days in each month\n    days_in_months = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n\n    # 3. Compute the length of each month\n    months = []\n    for i in range(n):\n        months.append(sum(days_in_months[:i+1]))\n\n    # 4. Check if the following condition is satisfied:\n    #   - the sum of the month's lengths is a multiple of 364\n    #   - if this is not the case, the integers cannot be durations of consecutive months\n\n    # 4.1. compute the sum of the month's lengths\n    total = sum(months)\n\n    # 4.2. if the condition is not satisfied\n    if total % 364!= 0:\n        return \"NO\"\n\n    # 4.3. if it is satisfied, the integers are durations of consecutive months\n    else:\n        return \"YES\"\n\n    pass\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    days_in_month: Dict[int, List[int]] = {1: [31], 2: [28, 29], 3: [31], 4: [30], 5: [31], 6: [30], 7: [31], 8: [31], 9: [30], 10: [31], 11: [30], 12: [31]}\n\n    n = int(stdin)\n    for i in range(n):\n        if n % i == 0:\n            count = 0\n            for j in days_in_month[i]:\n                if j <= n:\n                    count += 1\n                else:\n                    break\n            if count == n:\n                return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    dates = [int(stdin.readline()) for _ in range(n)]\n    leap = {4, 6, 9, 11}\n    months = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}\n    answer = 'YES'\n    for i in range(n - 1):\n        if (dates[i] == 1 and dates[i + 1] == 3) or (dates[i] == 1 and dates[i + 1] == 5) or (dates[i] == 1 and dates[i + 1] == 7) or (dates[i] == 1 and dates[i + 1] == 8) or (dates[i] == 1 and dates[i + 1] == 10) or (dates[i] == 1 and dates[i + 1] == 12):\n            continue\n        if dates[i] == 2 and dates[i + 1] == 29 and dates[i + 1] % 4!= 0:\n            continue\n        if dates[i] == 2 and dates[i + 1] == 29 and dates[i + 1] % 4 == 0 and dates[i + 1] % 100!= 0:\n            continue\n        if dates[i] == 2 and dates[i + 1] == 29 and dates[i + 1] % 4 == 0 and dates[i + 1] % 100 == 0 and dates[i + 1] % 400!= 0:\n            continue\n        if dates[i] == 2 and dates[i + 1] == 29 and dates[i + 1] % 4 == 0 and dates[i + 1] % 100 == 0 and dates[i + 1] % 400 == 0:\n            continue\n        if dates[i] in leap and dates[i + 1] == dates[i] + 1:\n            continue\n        if dates[i] in months and dates[i + 1] == dates[i] + 1:\n            continue\n        answer = 'NO'\n        break\n    return answer\n\ndef"
    },
    {
        "number": 294,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    num = list(map(int, stdin.readline().strip().split()))\n    \n    return 'Yes' if set(num) == {31, 29, 30, 31} else 'No'\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if solve(stdin) else \"NO\"\n\n\ndef"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    cache = {}\n    for i in range(2, n):\n        if n % i == 0:\n            for j in range(1, i):\n                if j * i == n:\n                    if not cache.get(i, False):\n                        cache[i] = [j, i]\n                    return 'YES'\n    return 'NO'\n\n\ndef"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # TODO: your code here\n    return \"YES\" if n % 2 == 0 else \"NO\"\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    r = n ** 0.5\n    if r.is_integer():\n        print('NO')\n    else:\n        print('YES')\n        for i in range(1, n):\n            r1 = int(r)\n            r2 = n // r1\n            if r1 > r2 and (n % r1) == 0:\n                print(r1, r2)\n                break\n    return ''\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    res = []\n    is_possible = True\n\n    # find all possible a's and b's\n    while a!= 1:\n        if a % 2 == 0:\n            res.append(2)\n            a //= 2\n            continue\n        if a % 3 == 0:\n            res.append(3)\n            a //= 3\n            continue\n        if a % 2 == 1:\n            res.append(2)\n            a //= 2\n        else:\n            res.append(3)\n            a //= 3\n    res.append(1)\n\n    # check if a sequence is valid\n    for i in range(len(res)):\n        if res[i] == 2 and res[i + 1] == 3:\n            is_possible = False\n        if res[i] == 3 and res[i + 1] == 2:\n            is_possible = False\n        if res[i] == 1:\n            # check if sum(fractions) is equal to 1\n            if res[i + 1] == 1:\n                is_possible = False\n    if is_possible:\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\nimport numpy as np\n\ndef"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    k = 0\n    while k < 100000 and n % k!= 0:\n        k += 1\n    if k == 100000:\n        return \"NO\"\n    b = n // k\n    for i in range(1, k + 1):\n        if b * i == n:\n            print(\"YES\")\n            print(f\"{i}\")\n            for j in range(i):\n                print(f\"{b} {j + 1}\")\n            return\n        elif b * i < n:\n            print(\"YES\")\n            print(f\"{i}\")\n            print(f\"{b} 0\")\n            return\n    return \"NO\"\n\n\ndef"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    seq = []\n\n    for a in range(1, n):\n        b = n // a\n        if b * a == n:\n            seq.append((a, b))\n\n    if len(seq) == 0:\n        return 'NO'\n\n    return 'YES' + '\\n' + str(len(seq)) + '\\n' + '\\n'.join(map(lambda x: f'{x[0]}/{x[1]}', seq))\n"
    },
    {
        "number": 295,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Takes a single string input of positive integers\n    Returns YES if there is a sequence\n    of fractions such that the sum of them is one minus one over\n    the number of fractions.\n    Returns NO if there is no such sequence\n    '''\n    # TODO: Implement solution\n    # return...\n    return \"NO\"\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the minimum unattractive value Vasya can get if he paints his fence completely.\"\"\"\n    # n, a, b = map(int, stdin.split())\n    n = int(stdin)\n    a, b = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    arr.sort()\n    left, right = 0, n - 1\n    minunatt = 0\n    while left < right:\n        minunatt += (arr[right] - arr[left])\n        if minunatt > b:\n            break\n        left += 1\n        right -= 1\n    if minunatt <= b:\n        print(minunatt)\n    else:\n        print(-1)"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, *h = map(int, stdin.split())\n    if sum(h) < a:\n        return -1\n    return a + b - 2 * (a - sum(h[1::2]))\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    n = int(stdin.readline())\n    a, b = map(int, stdin.readline().split())\n    h = list(map(int, stdin.readline().split()))\n    min_area = a + b\n    for i in range(n-1):\n        if h[i] > h[i+1]:\n            area = h[i] * (h[i] - h[i+1])\n            if area < min_area:\n                min_area = area\n        else:\n            area = h[i] * (h[i+1] - h[i])\n            if area < min_area:\n                min_area = area\n    if min_area == 0:\n        print(1)\n    else:\n        print(-1)\n    return ''"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    return solution"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 7\\n3 3 4 1\")\n    3\n    \"\"\"\n    n, red, green = map(int, stdin.split())\n    h = list(map(int, stdin.split()))\n    if n == 1:\n        return abs(h[0] - h[1]) * red\n    n = n - 2\n    area = 0\n    s = 0\n    while n >= 0:\n        area = (n + 1) * h[s] * red\n        s += 1\n        n -= 1\n    if area < red:\n        return area + green\n    return area\n"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    n = int(stdin.readline())\n    a, b = [int(x) for x in stdin.readline().split()]\n    h = [int(x) for x in stdin.readline().split()]\n    # init\n    dp = [[float(\"inf\")] * (b + 1) for _ in range(n + 1)]\n    dp[0][0] = 0\n    # build dp\n    for i in range(1, n + 1):\n        for j in range(b + 1):\n            # paint\n            if j - h[i - 1] >= 0:\n                dp[i][j] = min(dp[i][j], dp[i - 1][j - h[i - 1]] + h[i - 1])\n            # don't paint\n            dp[i][j] = min(dp[i][j], dp[i - 1][j])\n    # get result\n    res = float(\"inf\")\n    for i in range(b + 1):\n        if dp[n][i] <= a:\n            res = min(res, i)\n    if res == float(\"inf\"):\n        return -1\n    return res"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \"\"\"\n    n, a, b, *arr = [int(i) for i in stdin.split()]\n    arr = sorted(arr)\n    length = 0\n    res = 0\n    for i in range(n-1):\n        length += arr[i]\n        if length > b:\n            break\n        if length + arr[i+1] > a:\n            res += a - length\n            break\n    else:\n        res += a - length\n    if res > b:\n        print(-1)\n    else:\n        print(res)\n    return "
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def calc_unattractiveness(n: int, a: int, b: int, h: List[int]) -> int:\n        height_sum = [0] * n\n        height_sum[0] = h[0]\n        for i in range(1, n):\n            height_sum[i] = h[i] + height_sum[i - 1]\n        height_sum_max = [0] * n\n        height_sum_max[0] = height_sum[0]\n        for i in range(1, n):\n            height_sum_max[i] = max(height_sum_max[i - 1], height_sum[i])\n        unattractiveness = 0\n        for i in range(1, n):\n            unattractiveness += min(height_sum_max[i - 1] - height_sum[i], b)\n            unattractiveness += min(height_sum[i] - height_sum_max[i - 1], a)\n        return unattractiveness\n\n    n = int(stdin.readline().strip())\n    a, b = [int(x) for x in stdin.readline().strip().split()]\n    h = [int(x) for x in stdin.readline().strip().split()]\n    return calc_unattractiveness(n, a, b, h)"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return str(res)"
    },
    {
        "number": 296,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    \n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(i) for i in stdin.split()]\n    if k < 0 or k > m * n or n < 1 or m < 1 or n > 10**9 or m > 10**9:\n        return 'NO'\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if i + j == k and (i * j) % k == 0:\n                return 'YES\\n' + str(i) +'' + str(j) + '\\n' + str(i) +'' + str(j) + '\\n' + str(i) +'' + str(j)\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = stdin.split()\n    n = int(n)\n    m = int(m)\n    k = int(k)\n    if k > m:\n        print('NO')\n        return\n    if k == 0:\n        print('NO')\n        return\n    s = 0\n    nk = n * k\n    for i in range(1, n):\n        for j in range(1, m):\n            if (i + j) * k <= m:\n                s += 1\n            else:\n                break\n    if s > nk:\n        print('NO')\n        return\n    print('YES')\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if (i + j) * k <= m:\n                print(i, j)\n                break\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split(\" \")]\n    if (n >= m and m >= k) or (n <= m and m <= k) or (n <= k and k <= m):\n        print(\"YES\")\n        x = n / m\n        y = n / k\n        print(x)\n        print(y)\n    else:\n        print(\"NO\")\n\n\nprint(solution(\"2 1 2\"))\n\n---\n\ndef"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split('\\n')[0].split(' '))\n    \n    if m < k:\n        print('NO')\n        return\n    if m == k:\n        if n == k:\n            print('NO')\n            return\n        print('YES')\n        print('1 0')\n        return\n    \n    if k < m and n < m:\n        print('NO')\n        return\n    \n    if k >= m:\n        print('NO')\n        return\n    if k > m:\n        print('YES')\n        print('{} {}'.format(n, m))\n        return\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    _, m, k = map(int, stdin.split())\n    if m % k!= 0:\n        return 'NO'\n    m = int(m / k)\n    if k > m:\n        return 'NO'\n    k = int(k / m)\n    return 'YES' if m % k == 0 else 'NO'"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    print('YES') if n*m >= k else print('NO')\n    for x in range(n):\n        for y in range(m):\n            if x*y == k:\n                print(x, y)\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(i) for i in stdin.split()]\n    n, m, k = a\n    for i in range(n + 1):\n        for j in range(m + 1):\n            if i * j * k == 0:\n                continue\n            elif i * j * k > 0:\n                return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(c) for c in stdin.split()]\n\n    for x1 in range(n):\n        for y1 in range(m):\n            for x2 in range(n):\n                for y2 in range(m):\n                    for x3 in range(n):\n                        for y3 in range(m):\n                            if x1 == x2 or x1 == x3 or x2 == x3:\n                                continue\n                            if y1 == y2 or y1 == y3 or y2 == y3:\n                                continue\n                            if x1 + x2 + x3 == n:\n                                continue\n                            if (x1 + x2) * (x1 + x3) * (x2 + x3) == k:\n                                print('YES')\n                                print(f'{x1} {y1}')\n                                print(f'{x2} {y2}')\n                                print(f'{x3} {y3}')\n                                return\n\n    print('NO')\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    s = set()\n    for x in range(n):\n        for y in range(m):\n            s.add(f\"{x} {y}\")\n    sol = \"NO\"\n    for x1 in range(n):\n        for y1 in range(m):\n            for x2 in range(x1 + 1, n):\n                for y2 in range(m):\n                    if abs(x1 - x2) * abs(y1 - y2) == k:\n                        if f\"{x1} {y1}\" not in s or f\"{x2} {y2}\" not in s:\n                            continue\n                        sol = \"YES\"\n                        print(f\"{x1} {y1}\")\n                        print(f\"{x2} {y2}\")\n    return sol\n"
    },
    {
        "number": 297,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    n, m, k = sorted((n, m, k))\n    if m < n * k or k < n:\n        return 'NO'\n    if n * k == m:\n        return 'YES\\n0 0'\n    if k == 1:\n        return 'YES\\n%d %d' % (n, m)\n    if k == n:\n        return 'YES\\n%d %d' % (m, n)\n    return 'YES\\n%d %d' % (n, m)\n"
    },
    {
        "number": 298,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    print(\"NO\") if (n - k) < k else print(\"YES\")\n    return \"\"\n\n\"\"\""
    },
    {
        "number": 298,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    if n == k:\n        return 'NO'\n    if k == 1:\n        return 'YES'\n    a = [0] * n\n    while k > 0 and k < n:\n        if k >= n - k:\n            k = n - k\n        else:\n            k *= 2\n        for i in range(k):\n            a[i] += 1\n        if n == sum(a):\n            return 'YES'\n        if n > sum(a):\n            return 'NO'\n        a[k-1] += 1\n        for i in range(k, n):\n            a[i] = a[i-1]\n        k -= 1\n    return 'YES'\n"
    },
    {
        "number": 298,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n >= k:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n\ndef"
    },
    {
        "number": 298,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n < k:\n        return \"NO\"\n    elif k == 1:\n        return \"YES\"\n    elif n % 2 == 0:\n        return \"NO\"\n    elif n % 2 == 1:\n        if (n-k) % 2 == 1:\n            return \"YES\"\n        else:\n            return \"NO\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 298,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k >= n:\n        return 'NO'\n    return 'YES'"
    },
    {
        "number": 298,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split(\" \")))\n    return \"YES\" if (n - k) % 2 == 0 else \"NO\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 298,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    return 'YES' if n < k else 'NO'"
    },
    {
        "number": 298,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    if k == n:\n        return 'YES'\n    if k == n - 1 and n % 2!= 0:\n        return 'YES'\n    if k == n - 1 and n % 2 == 0:\n        return 'NO'\n    if k < n and n % 2 == 0:\n        return 'NO'\n    if k < n and n % 2!= 0:\n        return 'YES'\n"
    },
    {
        "number": 298,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Gets input for the problem and solves it\"\"\"\n\n    n, k = map(int, stdin.split(\" \"))\n    if n < k:\n        return \"YES\"\n    elif n - k >= k:\n        return \"NO\"\n    else:\n        return \"YES\"\n"
    },
    {
        "number": 298,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s, k = map(int, stdin.split(' '))\n    if s <= k:\n        return 'YES' if s <= 0 else 'NO'\n    return 'NO' if s % k == 0 else 'YES'"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    if __name__ == '__main__':\n        _, _, exercises = stdin.split()\n        exercises = [int(x) for x in exercises.split()]\n        n = exercises.pop(0)\n        if n % 3 == 0:\n            return 'chest'\n        elif n % 3 == 1:\n            return 'biceps'\n        return 'back'\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    test = stdin.splitlines()\n    n = int(test[0])\n    repeats = test[1]\n    # [1, 2, 3, 4, 5, 6, 7]\n    # 8\n    # [1, 2, 3, 4, 5, 6, 7, 8]\n    # [1, 2, 3, 4, 5, 6, 7, 8, 8, 8]\n    repeats = [int(i) for i in repeats.split()]\n    # [1, 2, 3, 4, 5, 6, 7, 8, 8, 8, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n    # [1, 2, 3, 4, 5, 6, 7, 8, 8, 8, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n    # [1, 2, 3, 4, 5, 6, 7, 8, 8, 8, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    return s[s.index(\"most\") - 1]"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    exercises = list(map(int, stdin.readline().split()))\n\n    chest_times = list(filter(lambda x: x % 3 == 0, exercises))\n    biceps_times = list(filter(lambda x: x % 3 == 1, exercises))\n    back_times = list(filter(lambda x: x % 3 == 2, exercises))\n\n    return (\"back\" if sum(back_times) >= sum(biceps_times) and sum(back_times) >= sum(chest_times) else \"biceps\"\n            if sum(biceps_times) >= sum(chest_times) and sum(biceps_times) >= sum(back_times) else \"chest\")\n\n\ndef"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = map(int, stdin.split('\\n')[1].split())\n    d = {1: 'chest', 2: 'biceps', 3: 'back'}\n    max_times = 0\n    max_type = 0\n    for i in range(n):\n        if a[i] > max_times:\n            max_times = a[i]\n            max_type = i + 1\n    return d[max_type]\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    a.sort(reverse=True)\n    for i in range(len(a)):\n        if a[i] % n == 0:\n            return ['chest', 'biceps', 'back'][i]\n\nprint(solution(input()))\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the solution to the problem\"\"\"\n    # Your code here\n    # Step 1: Read input and convert it into a list\n    N = int(stdin.split()[0])\n    A = [int(x) for x in stdin.split()[1:]]\n    \n    # Step 2: Count the number of chest, biceps and back exercises\n    n_chest = 0\n    n_biceps = 0\n    n_back = 0\n    for i in range(N):\n        n_chest += A[i]\n        n_biceps += A[i] - 1\n        n_back += A[i] - 2\n    \n    # Step 3: Check which muscle gets the most exercise\n    if n_chest > n_biceps and n_chest > n_back:\n        return \"chest\"\n    elif n_biceps > n_chest and n_biceps > n_back:\n        return \"biceps\"\n    else:\n        return \"back\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(i) for i in stdin.split()]\n    return (\n        \"chest\"\n        if a.count(max(a)) >= n // 3\n        else \"biceps\"\n        if a.count(max(a)) >= n // 2\n        else \"back\"\n    )\n"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport collections\n\nn = int(input())\na = [int(x) for x in input().split()]\nb = collections.Counter(a).most_common()"
    },
    {
        "number": 299,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    exercises = list(map(int, stdin.split()))\n\n    chest_count = 0\n    biceps_count = 0\n    back_count = 0\n\n    for exercise in exercises:\n        if exercise == 1:\n            chest_count += 1\n        elif exercise == 2:\n            biceps_count += 1\n        elif exercise == 3:\n            back_count += 1\n\n    if back_count > biceps_count > chest_count:\n        return 'back'\n    elif biceps_count > chest_count > back_count:\n        return 'biceps'\n    elif chest_count > biceps_count > back_count:\n        return 'chest'\n\ndef"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"[summary]\n    \"\"\"\n    n = int(stdin.readline())\n    grades = [int(i) for i in stdin.readline().split()]\n    grades.sort()\n    min_grades = grades[0]\n    min_grades += grades[1]\n    if len(grades) > 2:\n        min_grades += grades[2]\n    print(min_grades // 5)\n    return ''\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    grades = sorted(map(float, stdin.split()))\n    average = sum(grades) / len(grades)\n    return int(average - 2) + 1\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    grades = [int(x) for x in stdin.split()]\n    grades.sort()\n    return sum(grades[:5]) - sum(grades[5:])\n\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    data = [int(i) for i in stdin.readline().split(' ')]\n\n    count = 0\n    for i in range(n):\n        if data[i] < 5:\n            count += 5 - data[i]\n            data[i] = 5\n    print(count)\n    return \"\"\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    grade = list(map(int, stdin.split(\"\\n\")[0].split()))\n    m = sum(grade) / len(grade)\n    result = 0\n    for i in grade:\n        if i > m:\n            result += 1\n    return str(result)\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \u0414\u0430\u043d\u044b \u0434\u0432\u0430 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u044b\u0445 \u0447\u0438\u0441\u043b\u0430\u00a0n\u00a0\u0438\u00a0m.\n    \u0421\u043e\u043a\u0440\u0430\u0442\u0438\u0442\u0435 \u0434\u0440\u043e\u0431\u044c\u00a0(n / m), \u0442\u043e \u0435\u0441\u0442\u044c\u00a0\u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435\u00a0n\u00a0\u0447\u0438\u0441\u0435\u043b, \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u043c, \u0437\u0430\u043f\u0438\u0441\u044c\u00a0\u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044e\u00a0\u0446\u0435\u043b\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u0440\u043e\u0431\u0438.\n    \u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0432\u043e\u0434\u0430\n    \u0412\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0434\u0432\u0430 \u043d\u0430\u0442\u0443\u0440\u0430\u043b\u044c\u043d\u044b\u0445 \u0447\u0438\u0441\u043b\u0430\u00a0n\u00a0\u0438\u00a0m\u00a0(n \\leq m).\n    \u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0432\u043e\u0434\u0430\n    \u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435\u00a0n\u00a0\u0447\u0438\u0441\u0435\u043b, \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u043c, \u0437\u0430\u043f\u0438\u0441\u044c\u00a0\u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044e\u00a0\u0446\u0435\u043b\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u0440\u043e\u0431\u0438 (n / m).\n    \"\"\"\n    n, m = (int(i) for i in stdin.split())\n    return \" \".join(str(i) for i in range(n, n + m, m))\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def compare(a: int, b: int):\n        if a > b:\n            return 1\n        elif a < b:\n            return -1\n        else:\n            return 0\n    \n    stdin = stdin.split()\n    a = [int(i) for i in stdin[1:]]\n    a.sort()\n    b = []\n    for i in a:\n        if not b or i > b[-1]:\n            b.append(i)\n    print(len(b))"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    grades = [int(x) for x in stdin.readline().split()]\n    grades.sort()\n    count = 0\n    while max(grades)!= 5 and len(grades)!= 0:\n        count += 1\n        index = grades.index(max(grades))\n        if grades[index] == 5:\n            grades.pop(index)\n        else:\n            grades[index] -= 1\n    return count"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin))\n"
    },
    {
        "number": 300,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = list(map(int, stdin.readline().strip().split()))\n\n    total = sum(arr)\n    avg = total / n\n\n    return min(total - avg * n, n - len([i for i in arr if i > avg]))"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return result\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    u, v = map(int, stdin.split())\n    arr = [i for i in range(10)]\n    for i in range(10):\n        for j in range(10):\n            if (i ^ j) == u and (i + j) == v:\n                return str(i)\n    return -1\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    u, v = map(int, stdin.split(' '))\n    # if u == 0:\n    #     return \"0\"\n    # # calculate binary representations\n    # u_binary = list(bin(u)[2:])\n    # v_binary = list(bin(v)[2:])\n    # # compare binary representations\n    # for i in range(len(u_binary)):\n    #     if u_binary[i]!= v_binary[i]:\n    #         break\n    # # compare lengths\n    # if i == len(u_binary) - 1:\n    #     return \"0\"\n    # # find array with the same binary representation\n    # result = []\n    # for i in range(1, u_binary[i] + 1):\n    #     if u_binary[i] > v_binary[i]:\n    #         break\n    #     result.append(v_binary[i])\n    # return \"\".join(result)\n    return \"\".join(\n        map(\n            str,\n            reversed([\n                v - v % 2,\n                v // 2,\n                u\n            ])\n        )\n    ) if u ^ v == 0 else \"0\""
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    u, v = map(int, stdin.split(' '))\n    m = 10 ** 18\n    if v == 0:\n        return '0'\n    elif u == 0:\n        return '-1'\n    else:\n        for i in range(1, m):\n            if (u ^ i) == v:\n                return str(i)\n        return '-1'\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    u, v = [int(x) for x in stdin.split(' ')]\n    arr = []\n    for x in range(1, 1 << 20):\n        if bin(u ^ x).count('1') == 1 and sum([y for y in bin(x)[2:]]) == v:\n            arr = [bin(x)[2:], bin(x)[2:].count('1'), sum([y for y in bin(x)[2:]])]\n    return''.join(arr) if arr else '-1'\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    u, v = map(int, stdin.split())\n    assert(0 <= u <= 10 ** 18 and 0 <= v <= 10 ** 18)\n    if u == 0:\n        return 0\n\n    bitmask = 1\n    while bitmask < v:\n        bitmask <<= 1\n    bitmask >>= 1\n    bitmask |= 1\n\n    m = bin(bitmask)[3:]\n    while m.count(\"0\") > u:\n        bitmask -= 1\n        m = bin(bitmask)[3:]\n    if m.count(\"1\") < u:\n        return -1\n\n    while bitmask < v:\n        bitmask <<= 1\n    bitmask >>= 1\n    bitmask |= 1\n\n    return bitmask - 1\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    u, v = [int(x) for x in stdin.split()]\n    xor = u\n    diff = v\n    if u == 0 or v == 0:\n        return 0\n    if u == v:\n        return -1\n    if u == 1:\n        return v\n    if v == 1:\n        return v\n    if u == 2:\n        return v + 1\n    if v == 2:\n        return v + 1\n    i = 1\n    while v + i > 0:\n        while xor > 0:\n            xor = xor ^ (i + 1)\n            i += 1\n        if diff - i >= 0:\n            diff = diff - i\n            xor = u\n            i = 1\n        else:\n            break\n    return i\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    u, v = map(int, stdin.split(' '))\n    if u == 0 and v == 0:\n        return '0'\n    a, b = u, v\n    for i in range(1, (v - u) // (2 * (u - 1)) + 1):\n        if 2 * (i * u - 1) + 1 > v:\n            break\n        a = 2 * (i * u - 1) + 1\n        b = 2 * (i * u) - 1\n    if a <= v:\n        return '{} {}'.format(a, b)\n    else:\n        return '-1'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    u, v = map(int, stdin.split())\n    # your code here\n    result = '-1'\n    if u == 0:\n        if v == 0:\n            result = 0\n        else:\n            result = '1'\n    else:\n        for i in range(1, 2 ** 21):\n            current_sum = 0\n            current_xor = 0\n            for j in range(0, 21):\n                if (i >> j) & 1:\n                    current_sum += j + 1\n                    current_xor ^= j + 1\n                if current_sum > v:\n                    break\n            if current_sum == v:\n                result = str(i)\n                break\n\n    return result\n"
    },
    {
        "number": 301,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n    u, v = list(map(int, stdin.split()))\n    # print(u,v)\n    xor_u = u ^ (u - 1)\n    xor_v = v ^ (v - 1)\n    # print(xor_u, xor_v)\n    # print(xor_u ^ xor_v)\n    if xor_u == xor_v:\n        return u\n    else:\n        return '-1'\n"
    },
    {
        "number": 302,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''returns minimal number of digits 1 for n=121\n    '''\n    return len(stdin)"
    },
    {
        "number": 302,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return str\"\"\"\n    return str(len(stdin.split(\"1\")[0]))\n"
    },
    {
        "number": 302,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)"
    },
    {
        "number": 302,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def get_value_at(a: str, i: int) -> str:\n        return a[i - 1]\n\n    def append_value(s: str, value: str) -> str:\n        return s + value\n\n    def add_one_to_value(v: str) -> str:\n        return '1' + v\n\n    def add_one_to_value_recursive(v: str) -> str:\n        if len(v) < 1:\n            return '1'\n        if get_value_at(v, len(v)) == '0':\n            return add_one_to_value(v[:len(v) - 1])\n        return v\n\n    def add_one_to_value_recursive_extended(v: str) -> str:\n        if len(v) == 1:\n            return add_one_to_value(v)\n        if get_value_at(v, len(v)) == '0':\n            return add_one_to_value_recursive_extended(v[:len(v) - 1])\n        return v\n\n    def add_one_to_value_recursive_extended_brute_force(v: str) -> str:\n        if len(v) == 1:\n            return add_one_to_value_recursive_extended(v)\n        if get_value_at(v, len(v)) == '0':\n            return add_one_to_value_recursive_extended_brute_force(v[:len(v) - 1])\n        return v\n\n    def find_minimal_number_of_digits_one_in_value(v: str) -> int:\n        return len(add_one_to_value_recursive_extended_brute_force(v))\n\n    n = stdin\n    return str(find_minimal_number_of_digits_one_in_value(n))\n"
    },
    {
        "number": 302,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    count = 0\n    for i in n:\n        if i == \"1\":\n            count += 1\n        else:\n            break\n    return count\nprint(solution(input()))\n"
    },
    {
        "number": 302,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  return str(stdin.split('\\n')[0])\n"
    },
    {
        "number": 302,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 302,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    res = 0\n    while stdin!= \"\":\n        res += len(stdin)\n        stdin = stdin.replace(\"0\", \"\", 1)\n    return str(res)"
    },
    {
        "number": 302,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    dp = [0 for _ in range(n + 1)]\n    dp[1] = 0\n    for i in range(2, n + 1):\n        dp[i] = dp[i - 1]\n        if i % 2 == 0 and dp[i // 2] < dp[i]:\n            dp[i] = dp[i // 2]\n        if i % 3 == 0 and dp[i // 3] < dp[i]:\n            dp[i] = dp[i // 3]\n    return dp[n]"
    },
    {
        "number": 302,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    while n > 0:\n        if n % 2 == 1:\n            count += 1\n        n //= 10\n    print(count)\n\n\nsolution(\"121\")\n"
    },
    {
        "number": 303,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split())\n    x, y = map(int, stdin.split())\n    moves = {\n        (0, 0): (x1, y1),\n        (x1, y1): (x2, y2),\n        (x2, y2): (0, 0),\n    }\n    queue = [(0, 0, 0, 0)]\n    seen = set(moves)\n    while len(queue) > 0:\n        x, y, moves_count, steps = queue.pop(0)\n        if moves_count > 10**5:\n            continue\n        for move in moves:\n            if moves[move] == (x, y):\n                if move == (x2, y2):\n                    return 'YES'\n                else:\n                    continue\n            if x + move[0] == x and y + move[1] == y:\n                continue\n            if moves_count + 1 < 10**5:\n                queue.append((x + move[0], y + move[1], moves_count + 1, steps + 1))\n    return 'NO'\n"
    },
    {
        "number": 303,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split(' '))\n    x, y = map(int, stdin.split(' '))\n    if x < x1 or x > x2:\n        return \"NO\"\n    if y < y1 or y > y2:\n        return \"NO\"\n    if x == x1 and y == y1:\n        return \"YES\"\n    if x == x2 and y == y2:\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 303,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 303,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = map(int, stdin.split())\n    x, y = map(int, stdin.split())\n    \n    x_1_new = x_1 + x\n    y_1_new = y_1 + y\n    x_2_new = x_2 + x\n    y_2_new = y_2 + y\n    \n    return \"YES\" if abs(x_1_new) + abs(y_1_new) == abs(x_2_new) + abs(y_2_new) else \"NO\"\n\n\ndef"
    },
    {
        "number": 303,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = map(int, stdin.split('\\n')[0].split(' '))\n    x, y = map(int, stdin.split('\\n')[1].split(' '))\n    if x_1 + y_1 == x_2 + y_2:\n        print('YES')\n    else:\n        print('NO')"
    },
    {
        "number": 303,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    [\ud480\uc774]\n    '''\n   ...\n"
    },
    {
        "number": 303,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    moves = stdin.split('\\n')\n    \n    x1, y1, x2, y2 = map(int, moves[0].split())\n    x, y = map(int, moves[1].split())\n    \n    if abs(x1 - x2) + abs(y1 - y2) == abs(x - y):\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 303,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x, y = list(map(int, stdin.split()))\n\n    if abs(x - a) + abs(y - b) <= abs(x - a) + abs(y - b):\n        return 'YES'\n    return 'NO'\n\nprint(solution(input()))\n"
    },
    {
        "number": 303,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = list(map(int, stdin.split()))\n    move_1 = abs(x2 - x1) + abs(y2 - y1)\n    move_2 = abs(x1 - x2) + abs(y1 - y2)\n    move_3 = abs(x2 - x1) + abs(y1 - y2)\n    move_4 = abs(x1 - x2) + abs(y1 - y2)\n    if move_1 % 2 == 0 and move_2 % 2 == 0 and move_3 % 2 == 0 and move_4 % 2 == 0:\n        return \"YES\"\n    return \"NO\"\n\n\ndef"
    },
    {
        "number": 303,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    x_1, y_1, x_2, y_2 = list(map(int, stdin.split()))\n\n    if abs(x_1 - x_2) + abs(y_1 - y_2) <= abs(x_1) + abs(y_1):\n        return 'YES'\n    else:\n        return 'NO'\n    '''\n\n    return 'YES' if abs(x_1 - x_2) + abs(y_1 - y_2) <= abs(x_1) + abs(y_1) else 'NO'\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(min(int(stdin), 10 ** 18))\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\"\"\"\n\nimport sys\n\n\ndef"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(math.factorial(int(stdin))//(math.factorial(9) * math.factorial(len(stdin) - 1)))\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return 'The amount of possible variants of the real bus number'\n\"\"\"\ndef"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    n = n % 100\n    ans = 0\n    while n:\n        ans += n % 10\n        n //= 10\n    return str(ans)\nprint(solution(input()))"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # get the input of the user\n    n = stdin\n\n    # create a list to store the possible numbers\n    listOfPossibleNums = []\n\n    # create a dictionary to store the amounts of each number\n    dictOfNumbers = {}\n\n    # loop through all numbers from 0 to the inputted number\n    for i in range(1, n + 1):\n        # loop through all the digits in that number\n        for j in range(len(str(i))):\n            # if the number is not already in the list of possible numbers, add it\n            if not i in listOfPossibleNums:\n                listOfPossibleNums.append(i)\n                # add the number to the dictionary of numbers\n                dictOfNumbers[i] = 1\n            # else if the number is in the list of possible numbers, add 1 to the amount of that number\n            else:\n                dictOfNumbers[i] = dictOfNumbers[i] + 1\n\n    # create a variable to store the amount of digits that are equal\n    amountOfEqualDigits = 0\n\n    # loop through the list of possible numbers\n    for i in range(0, len(listOfPossibleNums)):\n        # loop through the digits in the current number\n        for j in range(len(str(listOfPossibleNums[i]))):\n            # check if that digit in the number is equal to the current digit\n            if str(listOfPossibleNums[i])[j] == str(n)[j]:\n                # add 1 to the amount of equal digits\n                amountOfEqualDigits = amountOfEqualDigits + 1\n            else:\n                # break if it is not equal\n                break\n\n    # return the amount of equal digits\n    return amountOfEqualDigits\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\nreturn stdin"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport math\n\ndef"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 304,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, f = map(int, stdin.split('\\n'))\n\n    return a * e + b * f + c * e + d * f\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def solve(a, b, c, d, e, f):\n        return max(((a - 1) * e + (d - 1) * f) + (a * b + b * c + c * d) +\n                   solve(a, b, c, d - 1, e, f),\n                   ((a - 1) * e + (d - 1) * f) + (a * b + b * c + c * d) +\n                   solve(a, b, c, d, e, f))\n\n    return str(solve(int(stdin.readline()),\n                     int(stdin.readline()),\n                     int(stdin.readline()),\n                     int(stdin.readline()),\n                     int(stdin.readline()),\n                     int(stdin.readline())))\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution to this problem.\n    \"\"\"\n    \n    return \"\"\n\ndef"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    a,b,c,d,e,f = [int(n) for n in stdin.split(\"\\n\")]\n    return sum([a,b,c,d,e,f])\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.readline().strip())\n    b = int(stdin.readline().strip())\n    c = int(stdin.readline().strip())\n    d = int(stdin.readline().strip())\n    e = int(stdin.readline().strip())\n    f = int(stdin.readline().strip())\n    return str(a * e + b * f + c * d)\n    \"\"\"\n    # write your solution here\n    pass\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # cast inputs\n    a, b, c, d = map(int, stdin.split('\\n')[:4])\n    e, f = map(int, stdin.split('\\n')[4:6])\n\n    # calculate maximum cost\n    return sum((e * a) + (f * b), (e * c) + (f * d))\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, f = (int(stdin) for _ in range(6))\n    return str(max(\n        a * e + b * f,\n        b * e + c * f,\n        c * e + d * f,\n        d * e + a * f\n    ))\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, f = map(int, stdin.split('\\n'))\n    total = (a // e) * min((a % e, e), (b // f) * min((b % f, f), (c // e) * min((c % e, e), (d // f) * min((d % f, f), f))))\n    return str(total)\n\"\"\"\n\ndef"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, f = map(int, stdin.readline().split())\n    first_cost = a * e + b * e + c * e + d * f\n    second_cost = a * f + b * f + c * f + d * e\n    return max(first_cost, second_cost)\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 305,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e, f = map(int, stdin.split('\\n')[:6])\n    return str(max(e * d + e * c + e * b + e * a, f * d + f * c + f * b + f * a))"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, p, x = map(int, stdin.split())\n    if x % p == 0:\n        print(0)\n        return\n    n_max = x ** (1 / a)\n    n_min = int(math.sqrt(x / b))\n    n = n_max\n    while n_min <= n:\n        if x % n ** a == b % n ** a:\n            print(n)\n            return\n        n -= 1\n    print(0)\n    return\n\n\ndef"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, p, x = [int(x) for x in stdin.split()]\n    divisors = set()\n    for i in range(1, p):\n        if b % (a**i) == 0:\n            divisors.add(i)\n    return str(len(divisors))\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, p, x = [int(i) for i in stdin.split(' ')]\n    if b % p == 0:\n        print(0)\n    else:\n        n = 1\n        while n ** a <= x:\n            if x % n ** a == b % n ** a:\n                print(n)\n                break\n            n += 1\n        else:\n            print(0)\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return 'a' or 'b' depending on which one is the greatest.\"\"\"\n    a, b, p, x = [int(i) for i in stdin.split()]\n    x //= p\n    if x == 0:\n        return 'a'\n    elif x == 1:\n        return 'b'\n    elif a < b:\n        return 'a'\n    elif b < a:\n        return 'b'\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, p, x = map(int, stdin.split())\n    count = 0\n    for n in range(1, x+1):\n        if n * (a ** n) % p == b % p:\n            count += 1\n    return count\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find solution.\"\"\"\n    a, b, p, x = [int(i) for i in stdin.split(' ')]\n    count = 0\n    for n in range(1, x+1):\n        if (n * pow(a, n, p)) % p == b % p:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, p, x = map(int, stdin.split())\n    n = x // p\n    return str(n)\n"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, p, x = map(int, stdin.split())\n    if a * pow(b, x, p) % p == 0:\n        return str(x // a)\n    else:\n        return str(x // a + 1)\n\n\"\"\"\n\n\"\"\"\nhttps://github.com/wisdompeak/LeetCode/tree/master/Dynamic_Programming/30_Maximum_Subarray\n\nGiven an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.\n\nA subarray is a contiguous part of an array.\n\n \n\nExample 1:\n\nInput: nums = [-2,1,-3,4,-1,2,1,-5,4]\nOutput: 6\nExplanation: [4,-1,2,1] has the largest sum = 6.\nExample 2:\n\nInput: nums = [1]\nOutput: 1\nExample 3:\n\nInput: nums = [5,4,-1,7,8]\nOutput: 23\n \n\nConstraints:\n\n1 <= nums.length <= 105\n-104 <= nums[i] <= 104\n\"\"\"\n\n\ndef"
    },
    {
        "number": 306,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, p, x = map(int, stdin.split())\n    res = 0\n    for i in range(1, x):\n        if pow(a, i, p) * pow(b, i, p) % p == i:\n            res += 1\n    return str(res)\n\"\"\"\n\n\"\"\"\ndef"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nfrom collections import Counter\n\n\ndef"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    k_2, k_3, k_5, k_6 = map(int, stdin.split())\n    import itertools\n    ans = 0\n    for c in itertools.combinations(range(k_2 + k_3 + k_5 + k_6), k_2 + k_3 + k_5 + k_6 - 5):\n        if sum(c[:k_2]) * 2 == c[k_2] * 2 + c[k_2 + 1] * 2 and sum(c[k_2:k_2 + k_3]) * 3 == c[k_2 + k_3] * 3 + c[k_2 + k_3 + 1] * 3 and sum(c[k_2 + k_3:k_2 + k_3 + k_5]) * 5 == c[k_2 + k_3 + k_5] * 5 + c[k_2 + k_3 + k_5 + 1] * 5 and sum(c[k_2 + k_3 + k_5:k_2 + k_3 + k_5 + k_6]) * 6 == c[k_2 + k_3 + k_5 + k_6] * 6 + c[k_2 + k_3 + k_5 + k_6 + 1] * 6:\n            ans = max(ans, sum(c))\n    return str(ans)\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    k2, k3, k5, k6 = [int(x) for x in stdin.split(' ')]\n    k2s = '2' * k2\n    k3s = '3' * k3\n    k5s = '5' * k5\n    k6s = '6' * k6\n    if len(k2s) + len(k3s) + len(k5s) + len(k6s) <= 10000:\n        return k2s + k3s + k5s + k6s\n    elif len(k2s) + len(k3s) + len(k5s) + len(k6s) > 10000:\n        return k2s + k3s + k5s + k6s[:len(k6s) - (len(k5s) + len(k3s) + len(k2s) - 10000)]\n    elif len(k2s) + len(k3s) + len(k5s) + len(k6s) < 10000:\n        return k2s + k3s + k5s[:len(k5s) - (len(k3s) + len(k2s) + len(k6s) - 10000)]\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    \n    return 'a'"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    k_2, k_3, k_5, k_6 = [int(x) for x in stdin.split()]\n    return str(max(k_2*k_3*k_5*k_6, k_2*k_5*k_6*k_3, k_2*k_3*k_6*k_5, k_3*k_5*k_2*k_6, k_3*k_6*k_2*k_5, k_5*k_2*k_3*k_6, k_5*k_3*k_6*k_2, k_6*k_2*k_3*k_5, k_6*k_3*k_5*k_2))\n\"\"\""
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    k_2, k_3, k_5, k_6 = map(int, stdin.split())\n    max_sum = k_2 * (k_2 * 2 + 1) // 2 + k_3 * (k_3 * 3 + 1) // 2 + k_5 * (k_5 * 5 + 1) // 2 + k_6 * (k_6 * 6 + 1) // 2\n    print(max_sum)\n\n    return ''\n\nprint(solution(input()))\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return '110'\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Do something\n    \"\"\"\n    pass\n"
    },
    {
        "number": 307,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5 1 3 4\")\n    800\n    >>> solution(\"1 1 1 1\")\n    256\n    \"\"\"\n    from itertools import combinations\n    from collections import Counter\n\n    k_2, k_3, k_5, k_6 = list(map(int, stdin.split()))\n    favorites = {2: k_2, 3: k_3, 5: k_5, 6: k_6}\n\n    def choose_most_frequent_digit(digit_counts: dict, limit: int) -> int:\n        return next(k for k, v in digit_counts.items() if v == limit)\n\n    def get_best_sum(digits: dict) -> int:\n        combinations_list = list(combinations(digits.keys(), limit=2))\n        sums = [sum(combination) for combination in combinations_list]\n        combinations_count = Counter(sums)\n\n        best_sum = 0\n        for first_digit, first_count in combinations_count.most_common():\n            second_digit = choose_most_frequent_digit(digits, limit=first_count)\n            best_sum = max(best_sum, first_digit + second_digit)\n        return best_sum\n\n    return get_best_sum(favorites)\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y, c = [int(i) for i in stdin.split()]\n    ans = 0\n    for i in range(1, n + 1):\n        if c <= ((n - i) * (n - i)):\n            ans += 1\n            for j in range(i, n):\n                if c <= ((n - j) * (n - j)):\n                    ans += 1\n                    y -= 1\n                if c <= ((j) * (j)):\n                    ans += 1\n                    x += 1\n                if c <= ((j + 1) * (j + 1)):\n                    ans += 1\n                    y += 1\n                if c <= ((j - 1) * (j - 1)):\n                    ans += 1\n                    x -= 1\n                if c <= ((j - i) * (j - i)):\n                    ans += 1\n                    y -= 1\n                if c <= ((i + 1 + j) * (i + 1 + j)):\n                    ans += 1\n                    y += 1\n                if c <= ((i - 1 + j) * (i - 1 + j)):\n                    ans += 1\n                    x += 1\n                if c <= ((i + 1) * (i + 1)):\n                    ans += 1\n                    x += 1\n    return ans\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return str(answer)\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    [n, x, y, c] = [int(x) for x in stdin.split()]\n    ans = 0\n    while c:\n        if x == 1:\n            ans += 1\n        if x > 1 and x < n:\n            if y == 1:\n                ans += 1\n            if y > 1 and y < n:\n                ans += 1\n        if x == n:\n            ans += 1\n        if x > 1 and x == n:\n            ans += 1\n        if x > 1 and x == n and y == n:\n            ans += 1\n        if x == 1 and y == 1:\n            ans += 1\n        if x == n and y == 1:\n            ans += 1\n        if x == 1 and y == n:\n            ans += 1\n        if x == n and y == n:\n            ans += 1\n        if x == 1 and y > 1 and y < n:\n            ans += 1\n        if x == n and y > 1 and y < n:\n            ans += 1\n        if x > 1 and x < n and y == 1:\n            ans += 1\n        if x > 1 and x < n and y == n:\n            ans += 1\n        if x > 1 and x < n and y > 1 and y < n:\n            ans += 1\n        if x > 1 and x < n and y > 1 and y == n:\n            ans += 1\n        if x == 1 and y > 1 and y < n:\n            ans += 1\n        if x == n and y > 1 and y < n:\n            ans += 1\n        if x > 1 and x == 1 and y < n:\n            ans += 1\n        if x > 1 and x == n and y < n:\n            ans += 1\n        if x > 1 and y == 1 and x < n:\n            ans += 1\n        if x > 1 and y == n and x < n:\n            ans += 1\n        if x > 1 and y > 1 and x == 1:\n            ans += 1\n        if x > 1 and y > 1 and x == n:\n            ans += 1\n        if x == 1 and y > 1 and x < n:\n            ans += 1\n        if x == 1 and y == n and x < n:\n            ans += 1\n        if x == n and y == 1 and x < n:\n            ans += 1\n        if x == n and y == n and x < n:\n            ans += 1\n        if x > 1 and x < n and y > 1 and y < n:\n            ans += 1\n        if x == 1 and y > 1 and y < n:\n            ans += 1\n        if x == 1 and y == n and y < n:\n            ans += 1\n        if x == n and y > 1 and y < n:\n            ans += 1\n        if x == n and y == n and y < n:\n            ans += 1\n        if x == 1 and y == 1 and y < n:\n            ans += 1\n        if x == n and y == 1 and y < n:\n            ans += 1\n        if x == 1 and y == n and y < n:\n            ans += 1\n        if x == n and y == n and y < n:\n            ans += 1\n        if x > 1 and x < n and y > 1 and y < n:\n            ans += 1\n        if x > 1 and x < n and y == 1:\n            ans += 1\n        if x > 1 and x < n and y == n:\n            ans += 1\n        if x == 1 and y > 1 and y < n:\n            ans += 1\n        if x == n and y > 1 and y < n:\n            ans += 1\n        if x > 1 and x == 1 and y < n:\n            ans += 1\n        if x > 1 and x == n and y < n:\n            ans += 1\n        if x == 1 and y == 1 and y < n:\n            ans += 1\n        if x == n and y == 1 and y < n:\n            ans += 1\n        if x == 1 and y == n and y < n:\n            ans += 1\n        if x == n and y == n and y < n:\n            ans += 1\n        c -= 1\n        n -= 1\n        x += 1\n        y += 1\n    return ans"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y, c = [int(i) for i in stdin.split()]\n    def x_sum(lst: list) -> int:\n        return sum([lst[i] for i in range(len(lst))])\n    def y_sum(lst: list) -> int:\n        return sum([lst[i] for i in range(len(lst))])\n    def z_sum(lst: list) -> int:\n        return sum([lst[i] for i in range(len(lst))])\n    def x_diff(lst: list) -> int:\n        return abs(x - x_sum(lst))\n    def y_diff(lst: list) -> int:\n        return abs(y - y_sum(lst))\n    def z_diff(lst: list) -> int:\n        return abs(c - z_sum(lst))\n    def z_c(lst: list) -> int:\n        return z_diff(lst)\n    def z_y(lst: list) -> int:\n        return y_diff(lst)\n    def z_x(lst: list) -> int:\n        return x_diff(lst)\n    def z_xy(lst: list) -> int:\n        return x_y_diff(lst)\n    def z_yx(lst: list) -> int:\n        return x_y_diff(lst)\n    def z_yy(lst: list) -> int:\n        return y_y_diff(lst)\n    def z_xx(lst: list) -> int:\n        return x_x_diff(lst)\n    def z_xxx(lst: list) -> int:\n        return x_x_diff(lst)\n    def z_xxxx(lst: list) -> int:\n        return x_x_diff(lst)\n    def z_x_sum(lst: list) -> int:\n        return x_sum(lst)\n    def z_y_sum(lst: list) -> int:\n        return y_sum(lst)\n    def z_xy_sum(lst: list) -> int:\n        return x_y_sum(lst)\n    def z_yx_sum(lst: list) -> int:\n        return x_y_sum(lst)\n    def z_yy_sum(lst: list) -> int:\n        return y_y_sum(lst)\n    def z_xx_sum(lst: list) -> int:\n        return x_x_sum(lst)\n    def z_xxx_sum(lst: list) -> int:\n        return x_x_sum(lst)\n    def z_xxxx_sum(lst: list) -> int:\n        return x_x_sum(lst)\n    def z_sum(lst: list) -> int:\n        return sum(lst)\n    events = []\n    cur_lst = [0 for i in range(n)]\n    cur_lst[x] = 1\n    events.append(cur_lst)\n    count = 0\n    while True:\n        count += 1\n        lst = events.pop(0)\n        # z_sum\n        if z_sum(lst) >= c:\n            print(count)\n            return\n        # z_c\n        if z_c(lst) < c:\n            events.append(lst)\n        # z_x\n        if z_x(lst) >= c:\n            events.append(lst)\n            continue\n        if lst[x-1] == 1:\n            lst[x-1] = 0\n            events.append(lst)\n            continue\n        if lst[x+1] == 1:\n            lst[x+1] = 0\n            events.append(lst)\n            continue\n        if lst[x] == 1:\n            lst[x] = 0\n            events.append(lst)\n            continue\n        if lst[x-1] == 0 and lst[x+1] == 0:\n            lst[x] = 1\n            events.append(lst)\n            continue\n        if lst[x-1] == 0 and lst[x] == 0:\n            lst[x-1] = 1\n            events.append(lst)\n            continue\n        if lst[x+1] == 0 and lst[x] == 0:\n            lst[x+1] = 1\n            events.append(lst)\n            continue\n        if lst[x-1] == 0 and lst[x+1] == 0:\n            lst[x] = 1\n            events.append(lst)\n            continue\n        if lst[x-1] == 1 and lst[x+1] == 1:\n            lst[x-1] = 0\n            lst[x+1] = 0\n            events.append(lst)\n            continue\n        if lst[x-1] == 1 and lst[x] == 0:\n            lst[x-1] = 0\n            lst[x] = 1\n            events.append(lst)\n            continue\n        if lst[x+1] == 1 and lst[x] == 0:\n            lst[x+1] = 0\n            lst[x] = 1\n            events.append(lst)\n            continue\n        if lst[x-1] == 1 and lst[x+1] == 0:\n            lst[x-1] = 0\n            lst[x+1] = 1\n            events.append(lst)\n            continue\n        if lst[x-1] == 1 and lst[x] == 1:\n            lst[x-1] = 0\n            lst[x] = 0\n            events.append(lst)\n            continue\n        if lst[x] == 1 and lst[x+1] == 1:\n            lst[x] = 0\n            lst[x+1] = 0\n            events.append(lst)\n            continue\n    return\n\n\ndef"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"0\""
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return '1'\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n, x, y, c = map(int, stdin.readline().split())\n    x -= 1\n    y -= 1\n    paint = (x, y)\n    seen = {paint}\n    count = 0\n\n    while c > 0:\n        count += 1\n        new_paint = []\n        for x, y in paint:\n            for sx, sy in (x - 1, y), (x + 1, y), (x, y - 1), (x, y + 1):\n                if 0 <= sx < n and 0 <= sy < n and (sx, sy) not in seen:\n                    new_paint.append((sx, sy))\n                    seen.add((sx, sy))\n        paint = new_paint\n        c -= len(paint)\n        if not c:\n            break\n        count += 1\n    return str(count)\n    '''\n    n, x, y, c = map(int, stdin.readline().split())\n    x -= 1\n    y -= 1\n    count = 0\n    while c > 0:\n        count += 1\n        c -= n * n\n    return str(count)"
    },
    {
        "number": 308,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y, c = [int(x) for x in stdin.split()]\n    m = [[0 for _ in range(n)] for _ in range(n)]\n    if x == 1 and y == 1 and c == 1:\n        return str(0)\n    if x == 1 and y == 1:\n        m[0][0] = 1\n        return str(1)\n    if c == 1:\n        m[0][0] = 1\n        m[0][1] = 1\n        m[1][0] = 1\n        m[1][1] = 1\n        return str(2)\n    m[0][0] = 1\n    m[0][1] = 1\n    m[1][0] = 1\n    m[1][1] = 1\n    for i in range(2, n):\n        for j in range(n):\n            if m[i-1][j] == 0:\n                m[i][j] = 1\n            if m[i][j-1] == 0:\n                m[i][j] = 1\n    return str(sum(m[x-1][y-1:y+1]))\n\nsolution(\"6 4 3 1\") == \"0\"\nsolution(\"9 3 8 10\") == \"2\"\nsolution(\"1 1 1 1\") == \"0\"\n\n-----Test cases-----\n\nSample Input 1:\n\n6 4 3 1\n\nSample Output 1:\n\n0\n\nSample Input 2:\n\n9 3 8 10\n\nSample Output 2:\n\n2\n\nSample Input 3:\n\n2 5 3 6\n\nSample Output 3:\n\n0\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return max(a, b) ^ (a & b)\n\ndef"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    input_as_list = stdin.split(' ')\n    l, r = int(input_as_list[0]), int(input_as_list[1])\n    return sum([(i % 2) ^ (j % 2) for i in range(l, r + 1) for j in range(l, r + 1)])\n    # return sum([i * j for i in range(l, r + 1) for j in range(l, r + 1)])\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split()\n    l = int(line[0])\n    r = int(line[1])\n    m = l\n    x = 0\n    for i in range(l + 1, r + 1):\n        for j in range(l + 1, r + 1):\n            m = i ^ j\n            if m > x:\n                x = m\n    return x\n    pass"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    l, r = map(int, stdin.split())\n    return max(x ^ y for x in range(l, r + 1) for y in range(l, r + 1))\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    l, r = map(int, stdin.split(' '))\n    return max(range(l, r + 1), key=lambda a: a ^ r)"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input_values = stdin.split()\n    left, right = int(input_values[0]), int(input_values[1])\n    result = 0\n    for a in range(left, right + 1):\n        for b in range(a, right + 1):\n            result = max(result, a ^ b)\n    return result\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return str(stdin)\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.readlines()[0]\n    left, right = line.split()\n    left = int(left)\n    right = int(right)\n    dp = [0] * 32\n    dp[0] = right\n    for i in range(1, 32):\n        dp[i] = dp[i - 1] ^ right\n    res = 0\n    for i in range(left, right + 1):\n        for j in range(32):\n            res = max(res, dp[j] ^ i)\n    return res\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    l, r = [int(x) for x in stdin.split(' ')]\n    return max(2**x for x in range(l, r + 1))\n"
    },
    {
        "number": 309,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    l, r = [int(x) for x in stdin.split()]\n    \n    res = 0\n    \n    for i in range(l, r + 1):\n        for j in range(i, r + 1):\n            res = max(res, i ^ j)\n            \n    print(res)"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n, k = [int(x) for x in stdin.split()]\n    print(k if k < 2*n+1 else -1)\n    '''\n    n, k = [int(x) for x in stdin.split()]\n    res = 0\n    for i in range(n):\n        res += (k-i*2)//3+1\n    return str(res) if k < 2*n+1 else '-1'"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds the minimum possible height of a plot whose area is equal to k.\n    :param stdin: input from stdin\n    :return: minimum possible height of a plot whose area is equal to k\n    \"\"\"\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 3\")\n    '1'\n    >>> solution(\"4 12\")\n    '3'\n    >>> solution(\"999999999999999999 999999999999999986\")\n    '1'\n    \"\"\"\n    n, k = map(int, stdin.split())\n    return str(int(k // (n + 1)) - 1)\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n, k = map(int, stdin.split())\n    ans = 0\n    for i in range(1, n+1):\n        ans = max(ans, max(i, 2*n+1-i))\n    print(ans - k)\n    return ''"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4 3\n   ... ''')\n    '1'\n    >>> solution('''4 12\n   ... ''')\n    '3'\n    \"\"\"\n    n, k = map(int, stdin.split())\n    area = sum(range(1, n + 1, 2))\n    area += sum(range(2, n + 1, 2)) * 2\n    return str(k // area)\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n % 2 == 0:\n        return str(n//2)\n    else:\n        return str((n+1)//2)\n\n\ndef"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n,k = list(map(int,stdin.split()))\n    h = 1\n    r = 0\n    while(h*h<=k):\n        h = h + 1\n        r = r + h -1\n    return str(r)\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.strip().split(' ')]\n    c = [i for i in range(1, n+1)]\n    m = [[0] * n]\n    m[0][0] = c[0]\n    m[0][1] = c[0]\n    i = 1\n    while i < n:\n        m[0][i] = c[i]\n        m[0][i + 1] = c[i]\n        i += 2\n\n    for j in range(1, n):\n        for i in range(j + 1):\n            m[j][i] = min(m[j][i], m[j - 1][i] + c[i])\n            m[j][i + 1] = min(m[j][i + 1], m[j - 1][i] + c[i + 1])\n    print(max(m[n - 1]))\n    return max(m[n - 1])\n"
    },
    {
        "number": 310,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    return \"\"\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z, t1, t2, t3 = map(int, stdin.split())\n    if abs(x - y) == 1:\n        if t1 + t3 < t2:\n            return 'YES'\n        else:\n            return 'NO'\n    elif abs(x - z) == 1:\n        if t1 + t2 < t3:\n            return 'YES'\n        else:\n            return 'NO'\n    elif abs(y - z) == 1:\n        if t2 + t3 < t1:\n            return 'YES'\n        else:\n            return 'NO'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z, t1, t2, t3 = list(map(int, stdin.split()))\n\n    if t3 < t1 + t2:\n        return \"NO\"\n    else:\n        return \"YES\"\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    x, y, z, t_1, t_2, t_3 = map(int, stdin.split())\n    if t_1 + t_2 < t_3:\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z, t1, t2, t3 = [int(c) for c in stdin.split(' ')]\n    return 'YES' if t1 + t2 + t3 < t1 * abs(y - x) else 'NO'\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\n----------TESTING PART----------\n\nfrom io import StringIO\nimport unittest\n\nclass TestClass(unittest.TestCase):\n    def test_1(self):\n        self.assertEqual(solution(StringIO(\"5 1 4 4 2 1\")), 'YES')\n\n    def test_2(self):\n        self.assertEqual(solution(StringIO(\"1 6 6 2 1 1\")), 'NO')\n\n    def test_3(self):\n        self.assertEqual(solution(StringIO(\"4 1 7 4 1 2\")), 'YES')\n\n    def test_4(self):\n        self.assertEqual(solution(StringIO(\"3 3 3 3 3 3\")), 'YES')\n\n\nunittest.main()\n\n----------END OF TESTING PART----------\n\ndef"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    floors, elevator, stairs, elevator_time, walk_time, doors_time = stdin.split()\n    floors = int(floors)\n    elevator = int(elevator)\n    stairs = int(stairs)\n    elevator_time = int(elevator_time)\n    walk_time = int(walk_time)\n    doors_time = int(doors_time)\n\n    if (elevator - floors) * walk_time + elevator_time + doors_time < stairs:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z, t1, t2, t3 = map(int, stdin.split())\n    x, y = sorted((x, y))\n    if t1 + t3 < x or t2 + t3 < y:\n        return 'YES'\n    return 'NO'\n\n\nprint(solution(input()))\n\n\n\"\"\"\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z, t_1, t_2, t_3 = map(int, stdin.split())\n    if (t_1 * (abs(x - y) - 1)) + (t_2 * 2) < (t_3 * 2):\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z, t_1, t_2, t_3 = map(int, stdin.split())\n    \n    return \"YES\" if x!= y and (t_1 + t_2 + t_3) <= (z - x + 1) * (y - x) else \"NO\"\n"
    },
    {
        "number": 311,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\nprint(solution(\"5 1 4 4 2 1\"))  # \u2192 YES\nprint(solution(\"1 6 6 2 1 1\"))  # \u2192 NO\nprint(solution(\"4 1 7 4 1 2\"))  # \u2192 YES\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    if m == 1 or m == n:\n        return m\n    elif n == 1 or n == 2:\n        return n\n    else:\n        return n - (m - n)\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    if n < m:\n        a = m - 1\n    else:\n        a = n\n    return str(a)\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = stdin.split()\n    n, m = int(n), int(m)\n    l = list(range(1, n+1))\n    l.remove(m)\n    l = list(map(str, l))\n    print(' '.join(l))\n    return ''\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    def probability(n, m, a):\n        return max(abs(a - c) - abs(a - m) for c in range(1, n + 1))\n    return str(min(range(1, n + 1), key=probability))\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    if abs(n - m) > abs(m - n):\n        return str(m)\n    else:\n        return str(n)\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    n, m = int(s[0]), int(s[1])\n    def f(n, m):\n        a, c = divmod(m - n, 2)\n        return a + (c == 0)\n    return str(min(range(1, n + 1), key=f))"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 1\")\n    2\n    >>> solution(\"4 3\")\n    2\n    \"\"\"\n    n, m = map(int, stdin.split())\n    return n - m\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    m, n = [int(i) for i in stdin.split()]\n    if m > n:\n        m, n = n, m\n    a = n - m\n    a %= 2\n    if a == 0:\n        a = 2\n    return str(a)\n"
    },
    {
        "number": 312,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.split(' ')]\n    ans = 1\n    for a in range(1, n + 1):\n        ans *= min(abs(a - m), n - abs(a - m))\n    return str(ans)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 313,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    pairs = [int(i) for i in lines[1].split()]\n    pairs_count = 0\n    for pair in pairs:\n        if pair == 1:\n            pairs_count += 1\n    return str(pairs_count)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 313,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    stdin = stdin.split(\"\\n\")\n    n = int(stdin[0])\n    arr = list(map(int, stdin[1].split(\" \")))\n    count = 0\n    curr = 0\n    for i in range(n):\n        if arr[i] == 1:\n            count += 1\n        else:\n            count = 0\n        if count > curr:\n            curr = count\n    return curr\n\ndef"
    },
    {
        "number": 313,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    number_of_lessons = int(stdin[0])\n    break_time_sectors = [int(number) for number in stdin[1].split(\" \")]\n    breaks_counter = 0\n    for i in range(number_of_lessons):\n        if break_time_sectors[i] == 1:\n            breaks_counter += 1\n    return breaks_counter\n"
    },
    {
        "number": 313,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    # your code here\n    return \"\""
    },
    {
        "number": 313,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lst = [0] + [int(i) for i in stdin.split()]\n    res = 0\n    cnt = 1\n    for i in range(1, len(lst)):\n        if lst[i]:\n            if not lst[i - 1]:\n                cnt += 1\n            else:\n                if cnt >= 2:\n                    res += 1\n                cnt = 1\n    if cnt >= 2:\n        res += 1\n    return str(res)\n"
    },
    {
        "number": 313,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\n'''\n\nimport sys\n\ndef"
    },
    {
        "number": 313,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    arr = list(map(int, stdin.split()[1].split()))\n    count = 0\n    for i in range(n):\n        if arr[i] == 0:\n            count += 1\n            continue\n        count += 1\n        if i + 1 < n and arr[i+1] == 1:\n            count += 1\n    return count\n\ndef"
    },
    {
        "number": 313,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    l = [int(el) for el in stdin.split(\" \")]\n    count = 0\n    for i in range(len(l)):\n        if l[i] == 1:\n            count += 1\n    return count\n\n\ndef"
    },
    {
        "number": 313,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 313,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    num_of_lessons = int(stdin.readline())\n    lessons_arr = [int(i) for i in stdin.readline().split()]\n    counter = 0\n    for i in lessons_arr:\n        if i:\n            counter += 1\n        else:\n            counter -= 1\n    print(counter)\nsolution()"
    },
    {
        "number": 314,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split(' ')))\n    box = list(map(int, stdin.split(' ')))\n    max_box = 0\n    for i in range(n):\n        if max_box < box[i]:\n            max_box = box[i]\n    days = 0\n    for i in range(1, n + 1):\n        days += box[i - 1] // k\n        box[i - 1] = box[i - 1] % k\n        if box[i - 1] == 0:\n            break\n        if i == n:\n            days = -1\n            break\n    return str(days)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 314,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # For each test case, print out the minimum number of days Arya needs to give Bran k candies before the end of the n-th day.\n    _, k = [int(x) for x in stdin.split()]\n    boxes = [int(x) for x in stdin.split()]\n    if k >= sum(boxes):\n        return str(k)\n    return str(k - 1)\n\nprint(solution(input()))\n"
    },
    {
        "number": 314,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    (n, k) = stdin.split(' ')\n    (n, k) = (int(n), int(k))\n    (a) = stdin.split(' ')\n    (a) = [int(i) for i in (a)]\n    (sumA, sumB) = (0, 0)\n    (day, count) = (0, 0)\n    (stdin) = stdin.split(' ')\n    (stdin) = [int(i) for i in (stdin)]\n    while day!= n:\n        count = count + 1\n        sumA = sumA + (stdin[day] * a[day])\n        sumB = sumB + (stdin[day] * 8)\n        if sumA >= k:\n            break\n        day = day + 1\n    if sumB < k:\n        return -1\n    else:\n        return count\n\n\ndef"
    },
    {
        "number": 314,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    nums = list(map(int, stdin.split(' ')))\n    if n > sum(nums):\n        print(-1)\n        return\n    nums.sort(reverse=True)\n    res, i = 0, 0\n    while k > 0:\n        if i >= n:\n            break\n        if nums[i] <= k:\n            k -= nums[i]\n            i += 1\n            res += 1\n        else:\n            break\n    print(res)\n    return"
    },
    {
        "number": 314,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # print(stdin)\n    N, K = [int(x) for x in stdin.split()]\n    arr = [int(x) for x in stdin.split()]\n    # print(N, K)\n    # print(arr)\n    days = [0] * N\n    days[0] = 8\n    for i in range(1, N):\n        if i == 1:\n            days[i] = arr[i]\n            if days[i] < 8:\n                days[i] = 8\n        else:\n            days[i] = days[i - 1] + arr[i]\n            if days[i] < 8:\n                days[i] = 8\n    # print(days)\n    days[0] = 0\n    # print(days)\n    for i in range(1, N):\n        if days[i] < K:\n            return -1\n        for j in range(1, N - i + 1):\n            # print(days[i+j], K)\n            if days[i + j] >= K:\n                return i + j\n            elif days[i + j] < K and K - days[i + j] <= days[i]:\n                # print('here')\n                return i + j\n\n    return -1\n"
    },
    {
        "number": 314,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(x) for x in stdin.split('\\n')[0].split()]\n    n, k = a[0], a[1]\n    a = a[2:]\n    if n >= k:\n        return str(n - k + 1)\n    return '-1'"
    },
    {
        "number": 314,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, k = map(int, lines[0].split(' '))\n    arr = list(map(int, lines[1].split(' ')))\n\n    dp = [[0] * (k+1) for _ in range(n+1)]\n    dp[0][0] = 0\n\n    for i in range(n):\n        for j in range(k+1):\n            if j < arr[i]:\n                dp[i+1][j] = dp[i][j]\n            else:\n                dp[i+1][j] = min(dp[i][j], 1 + dp[i][j-arr[i]])\n    return -1 if dp[n][k] > k else dp[n][k]\n"
    },
    {
        "number": 314,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n, k = map(int, stdin.readline().split())\n    arr = list(map(int, stdin.readline().split()))\n    res, candies, i = 0, 0, 0\n    while i < n:\n        if arr[i] <= k:\n            candies += arr[i]\n            k -= arr[i]\n            i += 1\n        else:\n            res = i + 1\n            break\n    if res == 0 or k == 0:\n        res = -1\n    return res\n    '''\n    n, k = map(int, stdin.readline().split())\n    arr = list(map(int, stdin.readline().split()))\n    if n == 1 and k <= arr[0]:\n        return 1\n    elif k == 1:\n        return n\n    dp = [[float(\"inf\") for _ in range(k + 1)] for _ in range(n)]\n    dp[0][0] = 0\n    dp[0][arr[0]] = 1\n    for i in range(1, n):\n        for j in range(k + 1):\n            if j < arr[i]:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = min(dp[i - 1][j], dp[i - 1][j - arr[i]] + 1)\n    res = float(\"inf\")\n    for j in range(k + 1):\n        res = min(res, dp[-1][j])\n    if res == float(\"inf\"):\n        res = -1\n    return res\n"
    },
    {
        "number": 314,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    [n, k] = [int(x) for x in stdin.split(' ')]\n    arr = [int(x) for x in stdin.split(' ')]\n    arr = sorted(arr, reverse=True)\n    count = 0\n    for i in range(len(arr)):\n        if k >= arr[i]:\n            count += 1\n            k -= arr[i]\n        if k < arr[i]:\n            break\n    if k < 0:\n        return -1\n    else:\n        return count\n"
    },
    {
        "number": 314,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    # get input\n    n, k = [int(x) for x in stdin.split(' ')]\n    \n    # init list to save num of candies\n    candy_list = [0] * n\n    candy_list[0] = k\n    \n    for i in range(1, n):\n        # give at most 8 candies per day\n        candy_list[i] = candy_list[i-1] + 8\n        if candy_list[i] > k:\n            candy_list[i] = k\n    \n    # check if k can be given out\n    for i in range(n-1):\n        if candy_list[i] < k:\n            return -1\n    return n - 1"
    },
    {
        "number": 315,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    res = 0\n    for i in range(1, n):\n        if a[i - 1] >= k:\n            res += k\n        else:\n            res += k - a[i - 1]\n    return res\n"
    },
    {
        "number": 315,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(\" \")]\n    nums = [int(x) for x in stdin.split(\" \")]\n    ans = [nums[0]]\n    for i in range(1, n):\n        ans.append(ans[i - 1] + k)\n        ans.append(nums[i])\n    print(min(ans))\n    print(*ans)\n    return \"\"\n"
    },
    {
        "number": 315,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the smallest number of additional walks that Polycarp should do\n    while Cormen will feel good during all n days\"\"\"\n    n, k = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    b = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    c = [b[i] - b[i-1] for i in range(1, len(b))]\n    c += [b[i] - b[i-1] for i in range(1, len(b))]\n    if k in b:\n        return n\n    elif k in c:\n        return n - 1\n    else:\n        return n - 2\n    pass\n"
    },
    {
        "number": 315,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    # print(n, k)\n    a = list(map(int, stdin.split()))[1:]\n    # print(a)\n    prev = [0]\n    for i in range(1, n+1):\n        cur = [0] * (i+1)\n        for j in range(i+1):\n            cur[j] = min(k, a[j] + prev[j-1])\n        prev = cur\n    for c in prev:\n        print(c, end=' ')\n    return ''\n\n\ndef"
    },
    {
        "number": 315,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    count = 0\n    result = [0] * (n + 1)\n    for i in range(1, n + 1):\n        if count < k:\n            result[i] = a[i - 1] + k\n            count += 1\n        else:\n            result[i] = a[i - 1] + k - 1\n\n    print(min(result))\n    print(*result[1:])\n\n\ndef"
    },
    {
        "number": 315,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    \n    if k == 1:\n        print(0)\n        print(' '.join([str(x) for x in range(1, n+1)]))\n    else:\n        \n        \nsolution(input())\n"
    },
    {
        "number": 315,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    res = [k] * (n + 1)\n    for i in range(1, n + 1):\n        res[i] += res[i - 1] - a[i - 1]\n    return''.join(map(str, res))"
    },
    {
        "number": 315,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split(\"\\n\")\n    n, k = int(n), int(k)\n    a = stdin.split(\"\\n\")[1]\n    a = list(map(int, a.split(\" \")))\n    n = len(a)\n    \n    min_walk = 0\n    for i in range(n):\n        min_walk += a[i] // k\n    \n    walk = 0\n    for i in range(n):\n        if a[i] < k * min_walk:\n            walk += min_walk * (k - a[i] // k) + a[i]\n        else:\n            walk += k * min_walk\n    \n    return str(min_walk) + \"\\n\" + str(walk)\n"
    },
    {
        "number": 315,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = [0] * n\n    c = [0] * n\n    \n    for i in range(n):\n        c[i] = a[i] + b[i]\n        if i >= 1:\n            b[i] = b[i - 1] + a[i] - c[i] + k\n        else:\n            b[i] = a[i]\n    \n    return \" \".join(map(str, b))\n        "
    },
    {
        "number": 315,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = [int(i) for i in stdin.split()[1:]]\n    cnt = 0\n    res = 0\n    for i in range(n):\n        if cnt < k:\n            cnt += a[i]\n        else:\n            res += 1\n            cnt = 0\n    return f'{res}\\n{a}'"
    },
    {
        "number": 316,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\n-----Anwer-----\ndef"
    },
    {
        "number": 316,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)\n'''"
    },
    {
        "number": 316,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(self.get_num_of_cells(int(stdin)))\ndef"
    },
    {
        "number": 316,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n'''\n"
    },
    {
        "number": 316,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\n-----Instructions-----\n\nWrite the function solution that takes n as input and returns the number of cells in a n-th order rhombus.\n\nFor example, if n = 2, then the number of cells is 5.\n\nYou can use the function cells(n) to calculate the number of cells in a given order.\n\nThe function cells(n) is already written for you.\n\n-----Hints-----\n\nYou can use a loop to iterate through all cells in the grid.\n\nYou need to check if a given cell is inside the grid.\n\nThe loop should end if the cell is out of the grid.\n\nFor a given cell the number of its neighbors can be computed with the function cell_neighbors(grid, i, j).\n\nThe function cell_neighbors(grid, i, j) is already written for you.\n\nYou can use the function is_valid_cell(grid, i, j) to check if a cell (i, j) is inside the grid.\n\nThe function is_valid_cell(grid, i, j) is already written for you.\n\nA cell is inside the grid if it is a valid index of a grid and it is not on the border (i.e. if it is in the range [0, m-1] and [0, n-1] for the given grid).\n\nThe number of cells can be calculated as a sum of the number of cells in each order of the rhombus.\n\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 316,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 316,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 316,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\ndef"
    },
    {
        "number": 316,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin))\n"
    },
    {
        "number": 316,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin"
    },
    {
        "number": 317,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 317,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    return stdin"
    },
    {
        "number": 317,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.lower()\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for c in alphabet:\n        if c not in stdin:\n            return \"NO\"\n    return \"YES\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 317,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 317,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"YES\" if \"\".join(sorted(stdin)).isalpha() else \"NO\"\n"
    },
    {
        "number": 317,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    for char in stdin.lower():\n        if char not in alphabet:\n            return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 317,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    import string\n    temp = set(string.ascii_lowercase)\n    s = stdin.lower()\n    temp2 = set()\n    for i in s:\n        if i in string.ascii_lowercase:\n            temp2.add(i)\n    if temp == temp2:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 317,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    ALPHABET = \"abcdefghijklmnopqrstuvwxyz\"\n    return \"YES\" if len(set(stdin.lower()).difference(ALPHABET)) == 0 else \"NO\"\n"
    },
    {
        "number": 317,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.lower()\n    chars = set()\n    for char in s:\n        if char.isalpha():\n            chars.add(char)\n    if len(chars) == 26:\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 317,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    alphabet = {\n        'A': 0, 'B': 0, 'C': 0, 'D': 0, 'E': 0, 'F': 0, 'G': 0,\n        'H': 0, 'I': 0, 'J': 0, 'K': 0, 'L': 0, 'M': 0, 'N': 0,\n        'O': 0, 'P': 0, 'Q': 0, 'R': 0, 'S': 0, 'T': 0, 'U': 0,\n        'V': 0, 'W': 0, 'X': 0, 'Y': 0, 'Z': 0\n    }\n\n    for c in stdin:\n        if c.isalpha():\n            alphabet[c.upper()] += 1\n\n    for value in alphabet.values():\n        if value == 0:\n            return 'NO'\n\n    return 'YES'\n"
    },
    {
        "number": 318,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin\n"
    },
    {
        "number": 318,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    time, minute = stdin.split(':')\n    return f'{(int(time) + int(minute)) % 60:02d}:{(int(time) + int(minute)) // 60:02d}'\n"
    },
    {
        "number": 318,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Get and parse the input\n    \"\"\"\n    raw_time, minutes = stdin.split()\n    h, m = map(int, raw_time.split(':'))\n    if minutes == '0':\n        return f\"{h}:{m+int(minutes)}\"\n    else:\n        return f\"{h}:{m+int(minutes)}\"\n"
    },
    {
        "number": 318,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    time = stdin.split(\" \")\n    if int(time[1][0]) < 10:\n        new_time = time[0] + \"0\" + time[1][0] + \":\" + time[1][1]\n    else:\n        new_time = time[0] + time[1][0] + \":\" + time[1][1]\n\n    if int(time[1][0]) + int(time[1][1]) == 0:\n        print(time[0] + \":00\")\n    else:\n        if int(time[1][0]) + int(time[1][1]) >= 60:\n            hour = int(time[0][0]) + int(time[0][1]) + 1\n            minute = int(time[1][0]) + int(time[1][1]) - 60\n            if minute == 0:\n                minute = \"00\"\n                hour = int(time[0][0]) + int(time[0][1]) + 1\n            if hour < 10:\n                hour = \"0\" + str(hour)\n            print(hour + \":\" + minute)\n        else:\n            print(new_time)\n    return new_time"
    },
    {
        "number": 318,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    hh, mm = stdin.split(':')\n    after_minute = int(mm) + int(stdin[-2:])\n    if after_minute > 59:\n        hh = int(hh) + 1\n        mm = int(mm) + after_minute - 60\n    else:\n        mm = int(mm) + after_minute\n    if mm < 10:\n        mm = '0' + str(mm)\n    return f'{hh}:{mm}'\n\nprint(solution('20:20'))\nprint(solution('10:10'))\nprint(solution('23:59'))\nprint(solution('00:10'))\nprint(solution('10:10'))"
    },
    {
        "number": 318,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    h, m = map(int, stdin.split(':'))\n    m += int(stdin[-2:])\n    if m >= 60:\n        h += m // 60\n        m = m % 60\n    h = h % 24\n    return f'{h:02d}:{m:02d}'\n"
    },
    {
        "number": 318,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    h, m = stdin.split(':')\n    h = int(h)\n    m = int(m)\n    if m < 59:\n        m += 1\n    elif m == 59:\n        if h < 23:\n            h += 1\n            m = 0\n        else:\n            h = 0\n            m = 0\n    h = str(h)\n    m = str(m)\n    return h + ':' + m\n\n\nprint(solution('23:59'))\n"
    },
    {
        "number": 318,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    time, minutes = stdin.split(\" \")\n    hour, minute = time.split(\":\")\n    minute += minutes\n    if minute >= 60:\n        hour += minute//60\n        minute %= 60\n    if hour >= 24:\n        hour %= 24\n    time = f\"{hour:02d}:{minute:02d}\"\n    return time"
    },
    {
        "number": 318,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    raw_time, minutes = stdin.split()\n    h, m = raw_time.split(':')\n    after_minutes = int(m) + minutes\n    m = int(m)\n    h = int(h)\n\n    if minutes == 0:\n        m = 0\n        h = (h + 1) % 24\n\n    if after_minutes >= 60:\n        h += after_minutes // 60\n        after_minutes %= 60\n    if after_minutes < 10:\n        after_minutes = '0' + str(after_minutes)\n\n    return '{:d}:{:s}'.format(h, str(after_minutes))\n"
    },
    {
        "number": 318,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(i) for i in stdin.split(':')]\n    b += a * 60\n    b %= 1440\n    b = str(b // 60).zfill(2) + ':' + str(b % 60).zfill(2)\n    return b\n"
    },
    {
        "number": 319,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(' ')]\n    nums = [stdin.split('\\n')[i] for i in range(n)]\n    # print(nums)\n    for i in range(n):\n        nums[i] = nums[i].replace('0', '')\n        nums[i] = nums[i].replace('1', '')\n    nums = list(set(nums))\n    if len(nums) < m:\n        return 'YES'\n    else:\n        return 'NO'\n\nprint(solution(\"4 5\\n10101\\n01000\\n00111\\n10000\"))\nprint(solution(\"4 5\\n10100\\n01000\\n00110\\n00101\"))\nprint(solution(\"4 5\\n10110\\n01010\\n10110\\n10110\"))"
    },
    {
        "number": 319,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \"\"\"\n    return ''\n"
    },
    {
        "number": 319,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve exercise.\"\"\"\n    pass\n"
    },
    {
        "number": 319,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # create switch matrix\n    switch = []\n    n, m = stdin.split()\n    for i in range(int(n)):\n        switch.append(stdin[i*m:(i+1)*m])\n    #print(switch)\n\n    #create lamps list\n    lamps = []\n    for i in range(len(switch)):\n        for j in range(len(switch[i])):\n            if switch[i][j] == '1':\n                lamps.append([i,j])\n    #print(lamps)\n\n    # check if all lamps are turned on\n    for i in range(len(lamps)):\n        lamps_on = []\n        for j in range(len(switch)):\n            if switch[j][lamps[i][1]] == '1':\n                lamps_on.append(j)\n        #print(lamps_on)\n        if len(lamps_on)!= len(switch):\n            return \"NO\"\n    return \"YES\"\n\nprint(solution(stdin))"
    },
    {
        "number": 319,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(\"\\n\")[0].split()]\n    a = [list(map(int, x.split())) for x in stdin.split(\"\\n\")[1:]]\n    cnt = 0\n    for i in range(n):\n        if sum(a[i]) == m:\n            cnt += 1\n    print('YES' if cnt > 1 else 'NO')\n    return ''\n"
    },
    {
        "number": 319,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 5\\n10101\\n01000\\n00111\\n10000\")\n    'YES'\n    \"\"\"\n    n, m = [int(i) for i in stdin.split('\\n')[0].split()]\n    a = [[i for i in j] for j in stdin.split('\\n')[1:]]\n    s = []\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == '1':\n                s.append((i, j))\n    a = [set(i) for i in a]\n    for i in range(len(s)):\n        a[s[i][0]].add(s[i][1])\n        a[s[i][0]].update(a[s[i][1]])\n        if len(a[s[i][0]])!= m:\n            a[s[i][1]] = set()\n    c = []\n    for i in range(len(a)):\n        if a[i] == {i} or a[i].issubset(set([i])) or a[i].issuperset(set([i])):\n            c.append(i)\n    if len(c) == m:\n        return 'YES'\n    return 'NO'"
    },
    {
        "number": 319,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    lamps = []\n    for _ in range(n):\n        lamps.append(stdin.readline())\n\n    lamps_on = set()\n    for i in range(n):\n        for j in range(m):\n            if lamps[i][j] == '1':\n                lamps_on.add((i, j))\n\n    def are_lamps_on(lamps_on: set, lamps: list):\n        for i in range(m):\n            if lamps[i] == '1' and i not in lamps_on:\n                return False\n        return True\n\n    for i in range(m):\n        if i not in lamps_on:\n            if are_lamps_on(lamps_on, lamps[:i] + lamps[i + 1:]):\n                return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 319,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split('\\n')\n    n, m = [int(x) for x in a[0].split(' ')]\n    l = []\n    for i in range(1, n + 1):\n        l.append([int(x) for x in a[i].split(' ')])\n    l = l[::-1]\n    print(l)\n    print(m, n)\n    return ''\n"
    },
    {
        "number": 319,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds if there exists a switch that if you will ignore it but press all the other n - 1 switches then all m lamps will be turned on.\"\"\"\n    # Get n and m.\n    n, m = [int(x) for x in stdin.split()]\n    # Get a.\n    a = [list(map(int, x)) for x in stdin.split(\"\\n\")[:n]]\n\n    # For each switch, mark each lamp as off.\n    lamps = []\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 1:\n                lamps.append([i, j])\n\n    # Initialize the dictionary.\n    d = {}\n    # Populate the dictionary with the number of lamps that each switch turns on.\n    for x in lamps:\n        d[x[0]] = d.get(x[0], 0) + 1\n\n    # Check if any switch has a number of lamps that is not divisible by m.\n    for x in d:\n        if d[x] % m!= 0:\n            return \"YES\"\n\n    return \"NO\"\n"
    },
    {
        "number": 319,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.strip().split(\"\\n\")\n    n, m = int(input[0].split(\" \")[0]), int(input[0].split(\" \")[1])\n    a = [[int(x) for x in row] for row in input[1:]]\n    dp = [[0 for _ in range(m)] for _ in range(n)]\n    \n    for i in range(m):\n        for j in range(n):\n            dp[j][i] = a[j][i]\n    \n    for j in range(m):\n        if dp[0][j] == 0:\n            dp[0][j] = 1\n        else:\n            dp[0][j] = 0\n    for j in range(1, n):\n        for i in range(m):\n            if dp[j - 1][i] == 1:\n                dp[j][i] = 1\n            else:\n                dp[j][i] = 0\n    for j in range(m):\n        if dp[n - 1][j] == 0:\n            dp[n - 1][j] = 1\n        else:\n            dp[n - 1][j] = 0\n    print(dp)\n    if dp[n - 2][m - 1] == 1:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n    "
    },
    {
        "number": 320,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 320,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Calculate the total number of rotations.\n    \n    >>> solution(\"4 2\\n6 4\")\n    0\n    >>> solution(\"1 4\\n2 3\")\n    -1\n    \"\"\"\n    \n    n = int(stdin.split(\"\\n\")[0])\n    total_rotation = 0\n    for i in range(n):\n        if sum(map(int, stdin.split(\"\\n\")[i].split())) % 2!= 0:\n            total_rotation += 1\n    return total_rotation\n"
    },
    {
        "number": 320,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 320,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pieces = int(stdin.readline())\n    pieces_map = {i: (0, 0) for i in range(1, 7)}\n    for i in range(pieces):\n        x, y = list(map(int, stdin.readline().split()))\n        pieces_map[x] = (pieces_map[x][0] + y, pieces_map[x][1])\n        pieces_map[y] = (pieces_map[y][0], pieces_map[y][1] + x)\n\n    answer = float('inf')\n    for piece in pieces_map:\n        if pieces_map[piece][0] % 2 == pieces_map[piece][1] % 2:\n            answer = min(answer, pieces_map[piece][0] + pieces_map[piece][1])\n\n    return str(answer if answer!= float('inf') else -1)\n\n-----Debug-----\n\ndef"
    },
    {
        "number": 320,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 320,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    dominoes = []\n    for i in range(n):\n        x, y = map(int, stdin.readline().split())\n        dominoes.append((x, y))\n    # dominoes = [map(int, stdin.readline().split()) for _ in range(n)]\n    \n    min_time = -1\n    for i, domino in enumerate(dominoes):\n        for _ in range(i + 1):\n            x, y = domino\n            x_sum = x + y\n            y_sum = y + x\n            if (x_sum % 2) == 0 and (y_sum % 2) == 0:\n                min_time = min(min_time, x_sum + y_sum)\n            domino = (y, x)\n    \n    if min_time == -1:\n        print(-1)\n    else:\n        print(min_time)\n"
    },
    {
        "number": 320,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def calculate_sum(n):\n        if n % 2:\n            return (n // 2) * 6 + (n // 2 + 1) * 6 + (n % 2) * 6\n        return n * 6 * 2\n\n    stdin = stdin.split('\\n')\n    return str(min(calculate_sum(len(stdin)) - calculate_sum(i + 1) for i in range(len(stdin))))\n"
    },
    {
        "number": 320,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 320,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, *l = map(int, stdin.split())\n    a, b = sum(x for x, y in l) // 2, sum(y for x, y in l) // 2\n    return '-1' if a % 2 or b % 2 else min(a + b, b + a) // 2\n"
    },
    {
        "number": 320,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return"
    },
    {
        "number": 321,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 321,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n\n    for i, line in enumerate(lines):\n        a, b = map(int, line.split())\n        c = b - a\n        if c < 1 or c > 10000:\n            return \"NO\"\n\n        for d in range(2, c):\n            if c % d == 0:\n                return \"NO\"\n        return \"YES\"\n"
    },
    {
        "number": 321,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\nprint(solution(input()))\n"
    },
    {
        "number": 321,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\nimport math"
    },
    {
        "number": 321,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 321,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return result\n"
    },
    {
        "number": 321,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n6 5\\n16 13\\n61690850361 24777622630\\n34 33\")\n    'YES'\n    >>> solution(\"4\\n6 5\\n16 13\\n61690850361 24777622630\\n34 33\")\n    'NO'\n    \"\"\"\n    t = int(stdin.readline())\n    for _ in range(t):\n        a, b = map(int, stdin.readline().split())\n        if a ** 2 - b ** 2 == 0:\n            print(\"YES\")\n        elif a ** 2 - b ** 2 > 0:\n            print(\"NO\")\n        else:\n            print(\"NO\")\n"
    },
    {
        "number": 321,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(n):\n        numbers = stdin.split()\n        a = int(numbers[0])\n        b = int(numbers[1])\n        if a == b:\n            print(\"YES\")\n        elif a > b:\n            if a % b == 0:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            if b % a == 0:\n                print(\"YES\")\n            else:\n                print(\"NO\")\ndef"
    },
    {
        "number": 321,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if not int(stdin) % 2 else 'NO'\n\n\ndef"
    },
    {
        "number": 321,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return ''"
    },
    {
        "number": 322,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nprint(solution(\"3\\n1 1\\n2 2\\n-1 1\\n-2 2\"))\n\nprint(solution(\"3\\n1 1\\n2 2\\n-1 1\\n-2 2\"))\n\nprint(solution(\"3\\n1 1\\n2 2\\n-1 1\\n-2 2\"))\n\ndef"
    },
    {
        "number": 322,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    data = []\n    for i in range(n):\n        x, y = map(int, stdin.split(\" \"))\n        data.append([x, y])\n    # data.sort(key=lambda p: p[0])\n    # data.sort(key=lambda p: p[1])\n    x_s = [p[0] for p in data]\n    y_s = [p[1] for p in data]\n    if x_s[0] * x_s[-1] < 0:\n        return \"Yes\"\n    elif x_s[0] == 0:\n        return \"Yes\" if y_s[0] * y_s[-1] < 0 else \"No\"\n    else:\n        return \"No\"\n\n\ndef"
    },
    {
        "number": 322,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 322,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\""
    },
    {
        "number": 322,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if sum([1 for x, y in stdin.splitlines() if x > 0]) > 2 else 'No'\n"
    },
    {
        "number": 322,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [], [], [], []\n    for i in range(int(stdin)):\n        x, y = [int(j) for j in stdin.split()]\n        a.append(x)\n        b.append(y)\n    for i in range(int(stdin)):\n        if a[i] < 0 and b[i] < 0:\n            c.append(a[i])\n            d.append(b[i])\n    for i in range(len(c)):\n        if c[i] < 0 and c[i] ** 2 + d[i] ** 2 < -(c[i] ** 2 - d[i] ** 2):\n            return \"Yes\"\n    return \"No\"\ndef"
    },
    {
        "number": 322,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    data = stdin.split('\\n')\n    n = int(data[0])\n    points = []\n    for i in range(1, n+1):\n        x, y = data[i].split(' ')\n        points.append([int(x), int(y)])\n    for x, y in points:\n        if x == 0:\n            return 'Yes'\n    points.sort(key=lambda x: x[1])\n    for i in range(1, n):\n        if points[i][1]!= points[i-1][1]:\n            return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 322,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    points = [tuple(map(int, stdin.readline().split())) for _ in range(n)]\n    x_y_points = {point[0] * point[1] for point in points}\n    if len(x_y_points) > 1:\n        return 'No'\n    return 'Yes' if abs(points[0][0] + points[0][1]) > 1e9 else 'No'\n"
    },
    {
        "number": 322,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    for _ in range(n):\n        x, y = map(int, stdin.readline().split())\n        if x < 0 and y < 0:\n            return \"Yes\"\n    return \"No\"\n\n\ndef"
    },
    {
        "number": 322,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n = int(stdin.readline())\n    points = [int(stdin.readline()) for i in range(n)]\n    points = sorted(points)\n    if points[0] > 0:\n        return \"Yes\"\n    else:\n        for i in range(1, n):\n            if points[i] - points[i - 1] > 0:\n                return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 323,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split(' '))\n    if A < B:\n        A, B = B, A\n    C = A\n    while B > 0:\n        if A == B:\n            return A\n        A = A - 1\n        B = B - A\n    return C\n"
    },
    {
        "number": 323,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(math.gcd(math.factorial(a), math.factorial(b)))\n"
    },
    {
        "number": 323,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return None\n\"\"\"\n\n\ndef"
    },
    {
        "number": 323,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = tuple(map(int, stdin.split()))\n    return str(factorial(a) // factorial(b) // factorial(max(a, b) - min(a, b)))\n\ndef"
    },
    {
        "number": 323,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    A, B = list(map(int, stdin.split()))\n    return str(math.gcd(A, B))\n"
    },
    {
        "number": 323,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    GCD(x, y) = GCD(y, x mod y)\n    \"\"\"\n    a, b = map(int, stdin.split())\n    return gcd(factorial(a), factorial(b))\n\n\ndef"
    },
    {
        "number": 323,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    res = 1\n    for i in range(2, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            res = i\n    return str(res)\n"
    },
    {
        "number": 323,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(math.gcd(factorial(int(stdin.split()[0])), factorial(int(stdin.split()[1]))))\n\n\ndef"
    },
    {
        "number": 323,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    a = a % 10 ** 9\n    b = b % 10 ** 9\n    def factorial(n):\n        result = 1\n        for i in range(1, n + 1):\n            result *= i\n        return result\n    return str(math.gcd(factorial(a), factorial(b)))\n"
    },
    {
        "number": 323,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    a = 1\n    for i in range(1, A + 1):\n        a *= i\n    b = 1\n    for i in range(1, B + 1):\n        b *= i\n    print(max(a, b))\n    return''\n\nprint(solution(input()))\n"
    },
    {
        "number": 324,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 324,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(0)\n    0 1\n    >>> solution(1)\n    0 1\n    >>> solution(2)\n    0 1\n    >>> solution(3)\n    0 1\n    >>> solution(4)\n    0 2\n    >>> solution(5)\n    0 2\n    >>> solution(6)\n    0 2\n    >>> solution(7)\n    0 2\n    >>> solution(8)\n    0 3\n    >>> solution(9)\n    0 3\n    >>> solution(10)\n    0 3\n    >>> solution(11)\n    0 4\n    >>> solution(12)\n    0 4\n    >>> solution(13)\n    0 4\n    >>> solution(14)\n    0 4\n    >>> solution(15)\n    0 5\n    >>> solution(16)\n    0 5\n    >>> solution(17)\n    0 5\n    >>> solution(18)\n    0 5\n    >>> solution(19)\n    0 6\n    >>> solution(20)\n    0 6\n    >>> solution(21)\n    0 6\n    >>> solution(22)\n    0 6\n    >>> solution(23)\n    0 6\n    >>> solution(24)\n    0 7\n    >>> solution(25)\n    0 7\n    >>> solution(26)\n    0 7\n    >>> solution(27)\n    0 7\n    >>> solution(28)\n    0 7\n    >>> solution(29)\n    0 8\n    >>> solution(30)\n    0 8\n    >>> solution(31)\n    0 8\n    >>> solution(32)\n    0 8\n    >>> solution(33)\n    0 9\n    >>> solution(34)\n    0 9\n    >>> solution(35)\n    0 9\n    >>> solution(36)\n    0 9\n    >>> solution(37)\n    0 10\n    >>> solution(38)\n    0 10\n    >>> solution(39)\n    0 10\n    >>> solution(40)\n    0 10\n    >>> solution(41)\n    0 11\n    >>> solution(42)\n    0 11\n    >>> solution(43)\n    0 11\n    >>> solution(44)\n    0 11\n    >>> solution(45)\n    0 12\n    >>> solution(46)\n    0 12\n    >>> solution(47)\n    0 12\n    >>> solution(48)\n    0 12\n    >>> solution(49)\n    0 12\n    >>> solution(50)\n    0 12\n    >>> solution(51)\n    0 13\n    >>> solution(52)\n    0 13\n    >>> solution(53)\n    0 13\n    >>> solution(54)\n    0 13\n    >>> solution(55)\n    0 14\n    >>> solution(56)\n    0 14\n    >>> solution(57)\n    0 14\n    >>> solution(58)\n    0 14\n    >>> solution(59)\n    0 14\n    >>> solution(60)\n    0 15\n    >>> solution(61)\n    0 15\n    >>> solution(62)\n    0 15\n    >>> solution(63)\n    0 15\n    >>> solution(64)\n    0 15\n    >>> solution(65)\n    0 16\n    >>> solution(66)\n    0 16\n    >>> solution(67)\n    0 16\n    >>> solution(68)\n    0 16\n    >>> solution(69)\n    0 16\n    >>> solution(70)\n    0 17\n    >>> solution(71)\n    0 17\n    >>> solution(72)\n    0 17\n    >>> solution(73)\n    0 17\n    >>> solution(74)\n    0 17\n    >>> solution(75)\n    0 18\n    >>> solution(76)\n    0 18\n    >>> solution(77)\n    0 18\n    >>> solution(78)\n    0 18\n    >>> solution(79)\n    0 18\n    >>> solution(80)\n    0 19\n    >>> solution(81)\n    0 19\n    >>> solution(82)\n    0 19\n    >>> solution(83)\n    0 19\n    >>> solution(84)\n    0 19\n    >>> solution(85)\n    0 20\n    >>> solution(86)\n    0 20\n    >>> solution(87)\n    0 20\n    >>> solution(88)\n    0 20\n    >>> solution(89)\n    0 20\n    >>> solution(90)\n    0 21\n    >>> solution(91)\n    0 21\n    >>> solution(92)\n    0 21\n    >>> solution(93)\n    0 21\n    >>> solution(94)\n    0 21\n    >>> solution(95)\n    0 22\n    >>> solution(96)\n    0 22\n    >>> solution(97)\n    0 22\n    >>> solution(98)\n    0 22\n    >>> solution(99)\n    0 23\n    >>> solution(100)\n    0 23\n    >>> solution(101)\n    0 23\n    >>> solution(102)\n    0 23\n    >>> solution(103)\n    0 23\n    >>> solution(104)\n    0 24\n    >>> solution(105)\n    0 24\n    >>> solution(106)\n    0 24\n    >>> solution(107)\n    0 24\n    >>> solution(108)\n    0 25\n    >>> solution(109)\n    0 25\n    >>> solution(110)\n    0 25\n    >>> solution(111)\n    0 25\n    >>> solution(112)\n    0 26\n    >>> solution(113)\n    0 26\n    >>> solution(114)\n    0 26\n    >>> solution(115)\n    0 26\n    >>> solution(116)\n    0 26\n    >>> solution(117)\n    0 27\n    >>> solution(118)\n    0 27\n    >>> solution(119)\n    0 27\n    >>> solution(120)\n    0 27\n    >>> solution(121)\n    0 27\n    >>> solution(122)\n    0 28\n    >>> solution(123)\n    0 28\n    >>> solution(124)\n    0 28\n    >>> solution(125)\n    0 28\n    >>> solution(126)\n    0 28\n    >>> solution(127)\n    0 28\n    >>> solution(128)\n    0 28\n    >>> solution(129)\n    0 29\n    >>> solution(130)\n    0 29\n    >>> solution(131)\n    0 29\n    >>> solution(132)\n    0 29\n    >>> solution(133)\n    0 29\n    >>> solution(134)\n    0 29\n    >>> solution(135)\n    0 30\n    >>> solution(136)\n    0 30\n    >>> solution(137)\n    0 30\n    >>> solution(138)\n    0 30\n    >>> solution(139)\n    0 30\n    >>> solution(140)\n    0 31\n    >>> solution(141)\n    0 31\n    >>> solution(142)\n    0 31\n    >>> solution(143)\n    0 31\n    >>> solution(144)\n    0 31\n    >>> solution(145)\n    0 32\n    >>> solution(146)\n    0 32\n    >>> solution(147)\n    0 32\n    >>> solution(148)\n    0 32\n    >>> solution(149)\n    0 32\n    >>> solution(150)\n    0 32\n    >>> solution(151)\n    0 32\n    >>> solution(152)\n    0 32\n    >>> solution(153)\n    0 32\n    >>> solution(154)\n    0 33\n    >>> solution(155)\n    0 33\n    >>> solution(156)\n    0 33\n    >>> solution(157)\n    0 33\n    >>> solution(158)\n    0 33\n    >>> solution(159)\n    0 33\n    >>> solution(160)\n    0 33\n    >>> solution(161)\n    0 33\n    >>> solution(162)\n    0 33\n    >>>"
    },
    {
        "number": 324,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 324,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\n----\n\n\ndef"
    },
    {
        "number": 324,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin)\n    # \u0434\u043b\u044f \u043f\u0440\u043e\u0441\u0442\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430 \u0447\u0438\u0441\u043b\u043e \u0435\u0434\u0438\u043d\u0438\u0446\u0430\u043c\u0438 \u0447\u0438\u0441\u043b\u0430 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0435\u0433\u043e \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0435\u043c\n    if number & (number - 1) == 0:\n        return str(number - 1) + \" \" + str(number)\n\n    result = 1\n    current_number = number\n    while result <= number:\n        result = result * current_number\n        current_number -= 1\n    result = result // number\n    result = result - 1\n    result = result // number\n\n    return str(result) + \" \" + str(current_number)\n\nprint(solution(input()))"
    },
    {
        "number": 324,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"1 2\""
    },
    {
        "number": 324,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for a in range(1, n + 1):\n        for b in range(1, n + 1):\n            if a - b == n and is_prime(a) and is_prime(b):\n                return str(a) + \" \" + str(b)\n    return \"\"\n\ndef"
    },
    {
        "number": 324,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            if i % 2!= 0:\n                print(int(n / i) * i, int(n / i) * (i - 1))\n                return\n            if n % i == 0:\n                print(n // i, n // i - 1)\n                return\n    print('-1')\n    return"
    },
    {
        "number": 324,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    i = 2\n    while n > 1:\n        if n % i!= 0:\n            i += 1\n            continue\n        else:\n            n //= i\n            while n % i == 0:\n                n //= i\n            i += 1\n    return str(n)\n"
    },
    {
        "number": 324,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  n = int(stdin)\n  \n  \n  i = 2\n  while True:\n    if n % i == 0:\n      if is_prime(i):\n        print(i, n // i)\n        break\n    i += 1\n"
    },
    {
        "number": 325,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('''3 3 10\n   ... 1 2 20\n   ... 2 3 30\n   ... 1 3 45\n   ... ''')\n    '35'\n    >>> solution('''2 3 5\n   ... 1 2 3\n   ... 2 3 4\n   ... 1 3 5\n   ... ''')\n    '6'\n    >>> solution('''5 5 10\n   ... 1 2 5\n   ... 1 3 1\n   ... 2 3 2\n   ... 3 4 5\n   ... 4 5 1\n   ... ''')\n    '6'\n    >>> solution('''4 3 1\n   ... 2 1 2\n   ... 2 3 4\n   ... 2 3 1\n   ... ''')\n    '6'\n    '''\n    :param stdin:\n    :return:\n    '''\n    # INPUTS\n    N, M, P = [int(n) for n in stdin.split(' ')[:3]]\n    G = {(int(a) - 1, int(b) - 1) : int(c) for a, b, c in\n         [input().split(' ') for _ in range(M)]}\n    P_G = {(int(a) - 1, int(b) - 1) : int(c) for a, b, c in\n           [input().split(' ') for _ in range(N)]}\n    # END OF INPUTS\n    # GOAL 1: max score that can be obtained\n    scores = {(0, N - 1): 0}\n    # GOAL 2: what is the maximum score\n    best_score = -1\n    # GOAL 3: what is the minimum amount of time it will take\n    best_time = 1e10\n    # GOAL 4: maximum number of coins for a player to obtain\n    max_coins = 0\n    for vertex in range(N):\n        # GOAL 1\n        if (vertex, N - 1) in scores:\n            if scores[(vertex, N - 1)] >= best_score:\n                best_score = scores[(vertex, N - 1)]\n        # GOAL 2\n        if (vertex, N - 1) in G:\n            time = G[(vertex, N - 1)]\n            best_time = min(best_time, time)\n            if (vertex, N - 1) in P_G:\n                score = max(0, P_G[(vertex, N - 1)] - time)\n            else:\n                score = 0\n            scores[(vertex, N - 1)] = max(scores[(vertex, N - 1)], score)\n        # GOAL 4\n        if P_G[(vertex, N - 1)] > max_coins:\n            max_coins = P_G[(vertex, N - 1)]\n    # GOAL 5\n    if best_score >= best_time * P:\n        return str(best_score)\n    # GOAL 6\n    return str(-1)\n"
    },
    {
        "number": 325,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds maximum score if player leaves game and presses button.\"\"\"\n    from collections import defaultdict\n    from operator import itemgetter\n    n, m, p = [int(num) for num in stdin.split()]\n    edges = defaultdict(list)\n    coins = defaultdict(int)\n    for i in range(1, m + 1):\n        a, b, c = [int(num) for num in stdin.split()]\n        edges[a].append(b)\n        edges[b].append(a)\n        coins[(a, b)] = c\n    visited = defaultdict(int)\n    visited[1] = 0\n    def dfs(node: int, minutes: int, pressed: bool) -> int:\n        \"\"\"Finds maximum score if player leaves game and presses button.\"\"\"\n        if node == n:\n            return visited[node]\n        if pressed:\n            return -1\n        score = 0\n        for next_node in edges[node]:\n            if coins[(node, next_node)] <= minutes * p:\n                visited[node] += coins[(node, next_node)]\n                score = max(score, dfs(next_node, minutes, True))\n                visited[node] -= coins[(node, next_node)]\n        return score\n    return str(max(dfs(1, 1, False), dfs(1, 0, True)))\n"
    },
    {
        "number": 325,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M, P = map(int, stdin.split(' '))\n    graph = {}\n    for _ in range(M):\n        A, B, C = map(int, stdin.split(' '))\n        graph[A] = graph.get(A, []) + [[B, C]]\n        graph[B] = graph.get(B, []) + [[A, C]]\n    graph[N] = []\n    visited = set()\n    visited.add(1)\n    queue = deque()\n    queue.append([1, 0, 0])\n    while queue:\n        cur_vertex, cur_coins, cur_time = queue.popleft()\n        if cur_vertex == N:\n            if cur_time > 0:\n                return cur_time * P\n        for next_vertex, next_coins in graph[cur_vertex]:\n            if next_vertex not in visited:\n                visited.add(next_vertex)\n                queue.append([next_vertex, cur_coins + next_coins, cur_time + 1])\n    return -1\n"
    },
    {
        "number": 325,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(test_input_0)\n    35\n    >>> solution(test_input_1)\n    -1\n    >>> solution(test_input_2)\n    35\n    >>> solution(test_input_3)\n    52\n    >>> solution(test_input_4)\n    5\n    >>> solution(test_input_5)\n    -1\n    >>> solution(test_input_6)\n    43\n    >>> solution(test_input_7)\n    -1\n    >>> solution(test_input_8)\n    -1\n    \"\"\"\n    n, m, p = list(map(int, stdin.split()))\n    edges = {}\n    for _ in range(m):\n        u, v = list(map(int, stdin.split()))\n        edges[u] = edges.get(u, []) + [v]\n        edges[v] = edges.get(v, []) + [u]\n    edges[n] = edges.get(n, [])\n    if m == 0:\n        print(-1)\n    else:\n        print(max([sum(coins) for coins in [tuple(map(int, line.split())) for line in stdin.split(\":\")]]))\n        print(max([sum(coins) for coins in [tuple(map(int, line.split())) for line in stdin.split(\":\")]]))\n"
    },
    {
        "number": 325,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 325,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 325,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the maximum score that can be obtained by pressing the button.\"\"\"\n    n, m, p = map(int, stdin.split())\n    graph = dict()\n    for i in range(1, n + 1):\n        graph[i] = dict()\n    for _ in range(m):\n        a, b, c = map(int, stdin.split())\n        graph[a][b] = c\n    return str(solution_helper(graph, p))\n\n\ndef"
    },
    {
        "number": 325,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Implement a simulation to find the maximum score that can be obtained when you start the game on Vertex 1 and travel to Vertex N.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 325,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    # O(E * V)\n    from collections import defaultdict\n    from heapq import heappop, heappush\n    graph = defaultdict(list)\n    weights = defaultdict(int)\n    for line in stdin.split('\\n'):\n        a, b, c = line.split()\n        graph[int(a)].append(int(b))\n        graph[int(a)].append(int(c))\n        weights[int(a), int(b)] = int(c)\n        weights[int(a), int(b)] = int(c)\n\n    pq = []\n    heappush(pq, (0, 1))\n    visited = set()\n    while pq:\n        count, node = heappop(pq)\n        if node in visited:\n            continue\n        visited.add(node)\n        if node == N:\n            return count\n        for i in graph[node]:\n            if i not in visited:\n                heappush(pq, (count + weights[node, i], i))\n    return -1\n"
    },
    {
        "number": 325,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, M, P = map(int, stdin.split(' '))\n    edges = dict()\n    vertices = set()\n    for _ in range(M):\n        v1, v2, coins = map(int, stdin.split(' '))\n        edges.setdefault(v1, set()).add((v2, coins))\n        edges.setdefault(v2, set()).add((v1, coins))\n        vertices.add(v1)\n        vertices.add(v2)\n    vertices.add(N)\n    dist = {v: -1 for v in vertices}\n    q = deque()\n    q.append((0, N, 0))\n    dist[N] = 0\n    while q:\n        dist_v, v, coins = q.popleft()\n        if v == N:\n            return '{}'.format(coins - (P * (dist_v // 60)))\n        for nv, n_coins in edges[v]:\n            if dist[nv] == -1:\n                q.append((dist_v + 1, nv, coins + n_coins))\n                dist[nv] = dist_v + 1\n"
    },
    {
        "number": 326,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    res = 0\n    for i in range(n):\n        # Split the string and the cost\n        splitted = stdin.split()\n        string = splitted[1]\n        cost = int(splitted[2])\n        # Calculate the cost for each letter\n        cost_i = 0\n        for letter in string:\n            # If there is a letter repeat, calculate its cost for each letter\n            cost_i += cost * (string.count(letter))\n        res += cost_i\n    if res < 0:\n        return \"-1\"\n    else:\n        return str(res)\n"
    },
    {
        "number": 326,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n = int(stdin[0])\n    pal = []\n    for _ in range(n):\n        string, cost = stdin[1 + _].split(' ')\n        pal.append([string, int(cost)])\n    pal.sort(key=lambda x: x[1])\n    # print(pal)\n    min_cost = pal[0][1]\n    cost = 0\n    for _ in range(1, len(pal)):\n        if pal[_][1] * _ >= min_cost:\n            min_cost = pal[_][1] * _\n            cost = _\n    if min_cost == 0:\n        print(-1)\n        return\n    ans = []\n    for _ in range(cost):\n        ans.append(pal[0][0])\n        pal.pop(0)\n    print(min_cost)\n    print(' '.join(ans))\n    return"
    },
    {
        "number": 326,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 326,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    number_of_strings: int = int(stdin[0])\n    costs: List[str] = []\n    for i in range(1, number_of_strings + 1):\n        costs.append(stdin[i].split(\" \"))\n    for i in range(number_of_strings):\n        costs[i][1] = int(costs[i][1])\n    # costs: [[string, cost]]\n    costs.sort(key=lambda x: x[1], reverse=True)\n    # [['ba', 3], ['abc', 4], ['cbaa', 5]]\n    palindrome_cost: int = 0\n    for i in range(number_of_strings):\n        if i == 0:\n            palindrome_cost += costs[i][1]\n        else:\n            palindrome_cost += costs[i][1] * (i + 1)\n        if palindrome_cost >= costs[i][0]:\n            return str(costs[i][1])\n    return \"-1\"\n"
    },
    {
        "number": 326,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    stdin = stdin.split()\n    n = int(stdin[0])\n    count = 1\n    min_cost = 0\n    for i in range(1, n + 1):\n        cost = int(stdin[i])\n        if cost % count:\n            min_cost += (cost // count + 1) * count\n        else:\n            min_cost += cost // count\n        count *= 2\n    if min_cost >= 1000000000:\n        print(-1)\n    else:\n        print(min_cost)\n"
    },
    {
        "number": 326,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    cost = {}\n    for line in stdin.readlines():\n        line = line.split()\n        cost[line[0]] = int(line[1])\n\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if j < i:\n                continue\n            s = ''\n            for k in range(i, j + 1):\n                s += cost[stdin[k]] * ''.join(reversed(stdin[k]))\n            ans += int(s)\n    print(ans)\n    return str(ans)"
    },
    {
        "number": 326,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    #we will first get the number of the test cases\n    #this number will determine the total number of lists we will need to store our strings and their costs\n    test_cases = stdin.split(\"\\n\")\n    #this is our main list that will hold the strings, costs, and the number of times they will be used\n    testing_lists = []\n    #this list will hold the strings and costs in a tuple so we can easily access the strings and their cost later\n    testing_lists_main = []\n    #we will create an aux list to help with our list merging later\n    testing_lists_aux = []\n    #we will split the input to get the number of test cases, strings, and their costs\n    for test_case in test_cases:\n        #we will split the string by the spaces and then split each of the strings into a list\n        strings = test_case.split()\n        #we will keep track of the index of the list to track what string we are on\n        index = 0\n        for string in strings:\n            #we will keep track of the index of the string for the merge function\n            string_index = 0\n            if index == 0:\n                #we are at the first index, so we can add the string and its cost to our lists\n                testing_lists_main.append((string, int(strings[1])))\n            else:\n                #we are not at the first index, so we need to add the string and its cost to our aux list\n                testing_lists_aux.append((string, int(strings[1])))\n                #we will then add the string and its cost to our main list\n                testing_lists_main.append((string, int(strings[1])))\n            #now we increment the index for the list we are on\n            index += 1\n    #we will call the merge function\n    testing_lists = merge_lists(testing_lists_aux, testing_lists_main)\n    #we will set the total cost to 0\n    total_cost = 0\n    #we will set the current lowest cost to infinity\n    current_lowest_cost = float(\"inf\")\n    #this list will hold all the strings we will be adding to make the palindrome\n    current_palindrome = []\n    #we will add the first element of the list\n    current_palindrome.append(testing_lists[0][0])\n    #we will loop through the list\n    for item in testing_lists:\n        #we will get the cost of the current string we are on\n        current_cost = item[1]\n        #we will add the cost to the total cost\n        total_cost += current_cost\n        #we will check if the current cost is less than the current lowest cost\n        if current_cost < current_lowest_cost:\n            #if it is, we will set the current lowest cost to the current cost\n            current_lowest_cost = current_cost\n        #we will check if the current string we are on is the last string of the palindrome\n        if item == testing_lists[-1]:\n            #if it is, we will add the total cost to the current lowest cost\n            current_lowest_cost += total_cost\n            #we will return the current palindrome\n            return current_lowest_cost\n        #we will check if the current string we are on is equal to the string at the end of the list\n        if item[0] == testing_lists[-1][0]:\n            #if it is, we will add the total cost to the current lowest cost\n            current_lowest_cost += total_cost\n            #we will add the current string to the palindrome\n            current_palindrome.append(item[0])\n            #we will remove the item from the list\n            testing_lists.remove(item)\n            #we will check if the palindrome is the last one, if so we will return the lowest cost\n            if len(current_palindrome) == len(testing_lists):\n                return current_lowest_cost\n            #we will remove the last element of the palindrome to account for the fact that we concatenate\n            current_palindrome.pop(-1)\n            #we will reset the total cost\n            total_cost = 0\n            #we will reset the lowest cost\n            current_lowest_cost = float(\"inf\")\n        #we will add the string to the palindrome and remove it from the list\n        current_palindrome.append(item[0])\n        testing_lists.remove(item)\n    #if the code makes it this far it means that there is no way we can make a palindrome\n    #we will return -1\n    return -1\ndef"
    },
    {
        "number": 326,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, *lines = stdin.split('\\n')\n    N = int(N)\n\n    data = [list(map(int, l.split())) for l in lines]\n\n    dp = [[float('inf')] * (N + 1) for _ in range(N + 1)]\n    dp[0][0] = 0\n\n    for i in range(N):\n        for j in range(N + 1):\n            if j > i:\n                dp[i + 1][j] = min(dp[i][j], dp[i][j - 1] + data[j - 1][0])\n            dp[i + 1][j] = min(dp[i][j], dp[i][j - 1] + data[j - 1][0] * data[j - 1][1])\n\n    min_cost = float('inf')\n    for i in range(N - 1, 0, -1):\n        for j in range(i, N + 1):\n            if j == i:\n                cost = dp[i][j]\n            else:\n                cost = dp[i][j] - dp[i - 1][j - 1]\n            if cost < min_cost:\n                min_cost = cost\n\n    return min_cost if min_cost < float('inf') else -1"
    },
    {
        "number": 326,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    strings = stdin.split('\\n')\n    \n    n = int(strings[0])\n    costs = []\n    for i in range(1, n+1):\n        costs.append((int(strings[i].split(' ')[1]), int(strings[i].split(' ')[2])))\n    \n    return cost_min_palindrome(costs)\n\ndef"
    },
    {
        "number": 326,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, *input_list = stdin.split('\\n')\n    N = int(N)\n    input_list = [list(map(int, line.split())) for line in input_list]\n\n    cost = 0\n    for i in range(N):\n        cost += input_list[i][0] * input_list[i][1]\n    if cost % 2 == 1:\n        print(-1)\n        return\n\n    for i in range(N):\n        input_list[i][1] = input_list[i][1] // 2\n\n    q = [input_list[0]]\n    input_list.pop(0)\n    while q:\n        curr_q = q.copy()\n        q = []\n        for item in curr_q:\n            for i in range(len(input_list)):\n                if item[0] >= input_list[i][0]:\n                    cost += item[1] * input_list[i][1]\n                    q.append(input_list[i])\n                    input_list.pop(i)\n                    break\n    print(cost)\n    return\n\n\ndef"
    },
    {
        "number": 327,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    return max(((n - k) * k + 2) * n - 1, 0)\n"
    },
    {
        "number": 327,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(_) for _ in stdin.split()]\n    return str(max(set(sum(xor) for xor in itertools.combinations(range(n), k))))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 327,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    res = 0\n    for i in range(1, n + 1):\n        if i ^ (i >> 1) <= k:\n            res ^= i\n    return res\n"
    },
    {
        "number": 327,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # n, k = map(int, stdin.split())\n    n, k = 6, 6\n    # l = [1, 2, 3, 4, 5, 6]\n    l = [1, 3, 5, 7, 9, 11]\n    ans = 0\n    for i in range(1 << n):\n        tmp = 0\n        for j in range(n + 1):\n            if i >> j & 1:\n                tmp = tmp ^ l[j]\n        if tmp <= k:\n            ans = max(ans, tmp)\n    print(ans)\n"
    },
    {
        "number": 327,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    result = 0\n    for i in range(1, n + 1):\n        if i & k == 0:\n            result ^= i\n    return str(result)\n"
    },
    {
        "number": 327,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the maximum possible happiness.\"\"\"\n    _, k = map(int, stdin.split())\n    n = int(stdin)\n    return max(sum(x ^ x_ for x, x_ in zip(range(n, 0, -1), range(k, n, -1))) for n, k in zip(range(n, 1, -1), range(k, 0, -1)))"
    },
    {
        "number": 327,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = a[k:]\n    print(sum(reduce(lambda x, y: x ^ y, b)))"
    },
    {
        "number": 327,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\n-------------\n\ndef"
    },
    {
        "number": 327,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def xor_sum(n, k):\n        \"\"\"Return the maximum xor-sum of k integers in range [1, n].\"\"\"\n        # dp[i] is the maximum xor-sum of i integers from 1 to n.\n        dp = [0] * (n + 1)\n        dp[1] = 1\n        # dp[1] is the maximum xor-sum of 1 integers from 1 to n.\n        for i in range(2, n + 1):\n            dp[i] = dp[i - 1] + 1 + i\n            # The maximum xor-sum of i integers from 1 to n is the sum of\n            # maximum xor-sum of n-i integers from 1 to n-1, plus\n            # the maximum xor-sum of 1 integer from 1 to n-i.\n            for j in range(1, i):\n                dp[i] = min(dp[i], dp[i - j] + j + 1)\n            # for j in range(1, i):\n            #     dp[i] = max(dp[i], dp[i - j] + j + 1)\n            if i >= k:\n                break\n        return dp[n]\n\n    n, k = map(int, stdin.split())\n    return str(xor_sum(n, k))\n"
    },
    {
        "number": 327,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k == 1:\n        return 0\n    else:\n        max_sum = 0\n        for i in range(1, n+1):\n            for j in range(1, k+1):\n                if i & j == 0:\n                    max_sum = max(max_sum, i ^ j)\n        return max_sum\n"
    },
    {
        "number": 328,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 328,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    ans = float('inf')\n    points = [tuple(map(int, line.strip().split(' '))) for line in stdin]\n    points = sorted(points)\n    for i in range(1, len(points)):\n        x1, y1 = points[i - 1]\n        x2, y2 = points[i]\n        d = abs(x1 - x2)\n        ans = min(ans, max(abs(y1 - y2), d))\n    return str(ans)\n\n\ndef"
    },
    {
        "number": 328,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    #Your code here\n    #return result"
    },
    {
        "number": 328,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    # you can delete this line!\n    # return result\n    from math import sqrt\n    \n    l = [int(x) for x in stdin.split('\\n')]\n    \n    # sort by x and y\n    l.sort(key = lambda x: x[0])\n    l.sort(key = lambda x: x[1])\n    \n    # A, B, C are vertex points of triangle\n    A = (l[0][0], l[0][1])\n    B = (l[1][0], l[1][1])\n    C = (l[2][0], l[2][1])\n    \n    # length of AB, BC, CA\n    L_AB = sqrt((B[0] - A[0])**2 + (B[1] - A[1])**2)\n    L_BC = sqrt((C[0] - B[0])**2 + (C[1] - B[1])**2)\n    L_CA = sqrt((A[0] - C[0])**2 + (A[1] - C[1])**2)\n    \n    # if A, B, or C is the vertex, then,\n    # C = A or B,\n    if L_AB < L_CA or L_BC < L_CA:\n        return int(L_CA)\n    elif L_AB > L_CA or L_BC > L_CA:\n        return int(L_CA + L_AB + L_BC)\n    else:\n        return int(L_CA + L_BC + L_CA)\n    \n    # how to check if ABC is a triangle or not?\n    # if there exists a vertex A, B, C that makes triangle,\n    # then there exists triangle ABC and triangle ACB\n    # we check whether there are the same vertex or not\n    \n    \ndef"
    },
    {
        "number": 328,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 328,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = [int(x) for x in stdin.split(\"\\n\")]\n    x.sort()\n    x_max = x[-1]\n    x_min = x[0]\n    y_max = x[-1]\n    y_min = x[0]\n    for i in range(n):\n        if x[i] > x_max:\n            y_max = x[i]\n        elif x[i] < x_min:\n            y_min = x[i]\n    return str(round((y_max - y_min) / 2))\n"
    },
    {
        "number": 328,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 328,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    return'some string'\n\"\"\"\n\n\nimport sys\nfrom math import sqrt\n\ndef"
    },
    {
        "number": 328,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\"your_code_here\"\"\"\n\"\"\"End of the code\"\"\"\n\n\ndef"
    },
    {
        "number": 328,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def distance(point1: tuple, point2: tuple) -> int:\n        return int(((point1[0] - point2[0]) ** 2 + (point1[1] - point2[1]) ** 2) ** 0.5)\n\n    n = int(stdin.readline())\n\n    points = [tuple(map(int, stdin.readline().split())) for i in range(n)]\n    points = sorted(points, key=lambda x: x[0])\n    distances = []\n    for i in range(n):\n        distances.append(distance((points[i][0], 0), (points[i + 1][0], 0)))\n        distances.append(distance((points[i][0], 0), (points[i][0], points[i][1])))\n    distances = sorted(distances)\n    return distances[0]\n"
    },
    {
        "number": 329,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n    \"\"\"\n    i = 0\n    l = [0]*len(stdin)\n    # create an array of length len(stdin) with 0's\n    while i < len(stdin):\n        count = 0\n        while i < len(stdin) and stdin[i] == \"i\":\n            l[i] = count\n            count += 1\n            i += 1\n        if i < len(stdin):\n            l[i] = count\n        i += 1\n    return max(l)\n\n\n\n\n\nsolution(\"xiineteenppnnnewtnee\")\n"
    },
    {
        "number": 329,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"nniinneetteeeenn\")\n    2\n    >>> solution(\"nneteenabcnneteenabcnneteenabcnneteenabcnneteenabcii\")\n    2\n    \"\"\"\n    ans = 0\n    parsed_string = stdin.split()\n    while parsed_string[0]:\n        number = parsed_string.pop(0)\n        ans += int(number.split('n')[-1])\n    return ans"
    },
    {
        "number": 329,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.count(\"nineteen\")"
    },
    {
        "number": 329,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    letter_dict = dict()\n    for char in stdin:\n        if char not in letter_dict.keys():\n            letter_dict[char] = 1\n        else:\n            letter_dict[char] += 1\n    for key, value in letter_dict.items():\n        print(f'{key} : {value}')\n    return letter_dict\n\n\nsolution(stdin)\n\nfrom collections import Counter\n\nstdin = 'nineteenineteen'\nprint(Counter(stdin))\n\ncounter = {letter: stdin.count(letter) for letter in set(stdin)}\nprint(counter)\n\nprint(stdin.count('i'))\n\n>>> letter_dict = {}\n>>> for char in 'nniinneetteeeenn':\n...     if char not in letter_dict.keys():\n...         letter_dict[char] = 1\n...     else:\n...         letter_dict[char] += 1\n...\n>>> print(letter_dict)\n{'n': 2, 'i': 2, 'e': 2, 't': 3, 'e': 5, 'e': 3, 'n': 2}\n>>>\n>>>\n>>> {letter: stdin.count(letter) for letter in set(stdin)}\nCounter({'e': 2, 'n': 2, 'i': 2, 't': 2, 'e': 3})\n>>>\n>>> stdin = 'nineteenineteen'\n>>> stdin.count('i')\n2\n>>> \n"
    },
    {
        "number": 329,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    new_string = stdin.split(\" \")\n    new_string = \" \".join(new_string)\n    print(len(new_string.split(\" \")))\n\n    return solution(new_string)\n\n\ndef"
    },
    {
        "number": 329,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.count('nineteen')\n    \n"
    },
    {
        "number": 329,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    my_str = stdin\n    new_str = []\n    for i in range(len(my_str)):\n        count = 0\n        for j in range(len(my_str)):\n            if my_str[i] == my_str[j]:\n                count += 1\n        if count >= 2:\n            new_str.append(my_str[i])\n    print(len(new_str))"
    },
    {
        "number": 329,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport re\nfrom collections import Counter\n\ndef"
    },
    {
        "number": 329,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    count = stdin.count(\"nineteen\")\n    if count == 0:\n        return 0\n    else:\n        return count"
    },
    {
        "number": 329,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    nineteen = 0\n    for i in s:\n        if i == \"n\" or i == \"i\":\n            nineteen += 1\n    return nineteen"
    },
    {
        "number": 330,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    P, Y = [int(x) for x in stdin.split()]\n    \n    # \u5e45\u512a\u5148\u63a2\u7d22\n    nodes = [None] * P\n    for i in range(P):\n        nodes[i] = i + 2\n    \n    # print(nodes)\n    \n    ans = -1\n    for i in range(2 ** P):\n        is_occupied = [0] * P\n        for j in range(P):\n            if ((i >> j) & 1):\n                is_occupied[j] = 1\n        \n        # print(f'{i}:{is_occupied}')\n        \n        # \u63a2\u7d22\n        if is_occupied[-1]:\n            # \u6700\u9ad8\u3067\u306a\u3051\u308c\u3070break\n            ans = -1\n            break\n        \n        # \u63a2\u7d22\u9806\u306f1 -> P\n        # \u6700\u521d\u306f0\u756a\u76ee\u306e\u30ce\u30fc\u30c9\u304b\u3089\u63a2\u7d22\n        # \u3055\u3089\u306b\u305d\u308c\u4ee5\u964d\u306f0\u756a\u76ee\u306e\u30ce\u30fc\u30c9\u304b\u3089\u958b\u59cb\u3059\u308b\u30ce\u30fc\u30c9\u3078\u3068\u63a2\u7d22\n        flag = True\n        for i in range(P):\n            if not is_occupied[i]:\n                flag = False\n                break\n        \n        # \u3069\u3053\u3067\u63a2\u7d22\u3057\u3066\u3082\u901a\u3089\u306a\u3044\u306e\u3067\u63a2\u7d22\u3057\u306a\u3044\n        if flag:\n            continue\n        \n        # \u63a2\u7d22\u3057\u305f\u30ce\u30fc\u30c9\u3092\u8a18\u9332\u3059\u308b\n        for i in range(P):\n            if is_occupied[i]:\n                nodes[i] = 0\n        \n        # print(nodes)\n        \n        # \u63a2\u7d22\u3057\u305f\u30ce\u30fc\u30c9\u304b\u3089\u63a2\u7d22\u51fa\u6765\u308b\u30ce\u30fc\u30c9\u307e\u3067\u306e\u63a2\u7d22\n        for i in range(2, Y + 1):\n            # \u63a2\u7d22\u3059\u308b\u30ce\u30fc\u30c9\u304c\u63a2\u7d22\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3089\u7d42\u4e86\n            if nodes[0] == i:\n                break\n            for j in range(P):\n                if nodes[j] % i == 0:\n                    nodes[j] = nodes[j] // i\n        \n        # print(nodes)\n        \n        # \u63a2\u7d22\u3067\u304d\u306a\u304b\u3063\u305f\u3089continue\n        if nodes[0] < i:\n            continue\n        \n        # \u51fa\u529b\n        ans = max(ans, i)\n    \n    print(ans)\n    return \"\"\n"
    },
    {
        "number": 330,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    p, y = [int(n) for n in stdin.split('\\n')[0].split(' ')]\n    if y < 2 * p or y > 10 ** 9:\n        return -1\n    return max([i * 2 for i in range(1, int(y // 2) + 1) if all([i * 2 % i for i in range(2, int(i ** 0.5) + 1)])])"
    },
    {
        "number": 330,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n"
    },
    {
        "number": 330,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution to the given problem\n    \"\"\"\n    pass\n"
    },
    {
        "number": 330,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity: O(log(n))\n    Space complexity: O(1)\n    \"\"\"\n    p, y = map(int, stdin.split())\n    x = 1\n    while x <= y:\n        if x % p == 0:\n            return -1\n        x *= 2\n    return x // 2\n"
    },
    {
        "number": 330,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    (p, y) = tuple(map(int, stdin.split(\"\\n\")[0].split()))\n    remainder = y % p\n    if remainder == 0:\n        print(-1)\n    else:\n        print(int(y / p) * p + p)\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        "
    },
    {
        "number": 330,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    ans = -1\n    \n    # print(2**a)\n    if a > b:\n        return ans\n    if 2**a > b:\n        return ans\n    for i in range(a, b+1):\n        if 2**i > b:\n            ans = i\n            break\n    return ans\n"
    },
    {
        "number": 330,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    # 1.\n    # p, y = map(int, stdin.split(' '))\n    # print(2 * math.floor(y / p))\n    # print(-1)\n\n    # 2.\n    p, y = map(int, stdin.split(' '))\n    print(2 * math.floor(y / p))\n    return\n    '''\n    # 3.\n    p, y = map(int, stdin.split(' '))\n    if p > y:\n        print(-1)\n        return\n    print(2 * math.floor(y / p))\n\n\ndef"
    },
    {
        "number": 330,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # p, y = list(map(int, stdin.split()))\n    # for i in range(2, int(y**(1/p)) + 1):\n    #     if i % p == 0:\n    #         print(-1)\n    #         return\n\n    # print(int(y**(1/p)))\n    def is_possible(y, x, p):\n        if p == 1:\n            return False\n        if y // p > p:\n            return False\n        for i in range(1, y // p + 1):\n            if (x * i) % p!= 0:\n                return False\n        return True\n    y, p = list(map(int, stdin.split()))\n    if is_possible(y, 2, p):\n        return 2\n    for i in range(2, y // p + 1):\n        if is_possible(y, i, p):\n            return i\n    return -1\n"
    },
    {
        "number": 330,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, y = [int(i) for i in stdin.split()]\n    if y % x == 0:\n        return str(y // x)\n    for i in range(y // x + 1, y + 1):\n        if (i - 2) % x == 0:\n            continue\n        elif (i - 3) % x == 0:\n            continue\n        elif (i - i // x) % x == 0:\n            continue\n        else:\n            return str(-1)\n    return str(y // x)\n"
    },
    {
        "number": 331,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    houses = [int(i) for i in stdin.split()]\n    n, m, k = houses[0], houses[1], houses[2]\n    houses = [int(i) for i in stdin.split()]\n    houses.sort()\n    houses = [i for i in houses if i > 0]\n    \n    def count(distance: int, money: int) -> int:\n        total = 0\n        for house in houses:\n            if house + distance > m:\n                continue\n            if house + distance < m:\n                total += house\n                continue\n            total += house + (money - k) // distance\n        return total\n    \n    left, right = 0, 10000000000\n    while left < right:\n        middle = (left + right) // 2\n        money = count(middle, k)\n        if money >= n:\n            right = middle\n        else:\n            left = middle + 1\n    return left\n"
    },
    {
        "number": 331,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    N, M, K = list(map(int, stdin.readline().strip().split()))\n    N, M = N, M + 1\n    A = list(map(int, stdin.readline().strip().split()))\n    A = [a - A[M - 1] if a else a for a in A]\n    A.append(0)\n\n    for i in range(M, N):\n        A[i] = min(A[i], A[i - 1] + K)\n\n    print(A[N - 1])\n    return ''\n    '''\n    \n    N, M, K = map(int, stdin.readline().strip().split())\n    house = map(int, stdin.readline().strip().split())\n    house = [(i, house[i]) for i in range(len(house)) if house[i]]\n    \n    house.sort(key=lambda x: x[1], reverse=True)\n    \n    min_sum = 0\n    for i in range(len(house)):\n        min_sum += house[i][1]\n        if min_sum > K:\n            print(i)\n            return\n    print(len(house))\n"
    },
    {
        "number": 331,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    m, k, *prices = map(int, stdin.split())\n    n = len(prices)\n    assert n > 0\n    assert k >= 0\n    assert prices[m] == 0\n    assert 0 <= prices[m + 1] <= 100\n    assert 0 <= prices[0] <= 100\n    assert 0 <= prices[n - 1] <= 100\n    for i in range(n - 1):\n        assert prices[i] <= prices[i + 1]\n\n    def can_buy(price: int) -> bool:\n        return k >= price\n\n    def can_spend(price: int) -> bool:\n        return k >= m - price\n\n    low = 0\n    high = n - 1\n    while high - low > 1:\n        mid = (low + high) // 2\n        if can_spend(mid) and can_buy(prices[mid]):\n            low = mid\n        else:\n            high = mid\n\n    print(low)"
    },
    {
        "number": 331,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    \n    m, k, *args = stdin.split()\n    m = int(m)\n    k = int(k)\n    houses = list(map(int, args))\n    \n    house_buy = [0] * (m + 1)\n    house_buy[0] = k\n    for i in range(1, m + 1):\n        house_buy[i] = min(house_buy[i - 1], houses[i - 1])\n\n    result = house_buy[-1]\n    for house_i in range(m):\n        for house_j in range(house_i + 1, m + 1):\n            money = house_buy[house_j] - house_buy[house_i]\n            result = min(result, house_j - house_i - 1)\n            if result == 0:\n                break\n            result = min(result, houses[house_i] - money)\n            if result == 0:\n                break\n\n    return result\n"
    },
    {
        "number": 331,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(i) for i in stdin.split()]\n    houses = [int(i) for i in stdin.split()]\n    house_with_money = houses.index(0)\n    return (house_with_money+k-1) * 10\n\n\"\"\"\n\ndef"
    },
    {
        "number": 331,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    houses = [int(x) for x in stdin.split(\" \")]\n    houses.sort()\n    return houses[houses.index(0) + 1]\n"
    },
    {
        "number": 331,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 331,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    n, m, k = [int(x) for x in stdin.split(\" \")]\n    houses = [int(x) for x in stdin.split(\" \")]\n    houses.insert(0, 0)\n    houses.append(0)\n    houses.sort()\n    def f(houses):\n        start, end = 0, len(houses) - 1\n        while start < end:\n            mid = (start + end) // 2\n            if houses[mid] >= m:\n                end = mid\n            else:\n                start = mid + 1\n        return houses[start]\n    first_house = f(houses)\n    return (m + k - 1) * 10 - (m - first_house)\n"
    },
    {
        "number": 331,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 331,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Finds the distance between two houses in a row,\n    that is the total distance in meters from house 1 to house 2.\n    The input is two arrays, the first one,\n    describing the availability of each house,\n    and the second one, describing the prices of each house.\n    Both arrays are of the same length.\n    '''\n    houses_count = int(stdin.readline().strip())\n    houses_availability = list(map(int, stdin.readline().strip().split(' ')))\n    houses_prices = list(map(int, stdin.readline().strip().split(' ')))\n\n    # Initialize the minimum distance\n    # between two houses\n    min_distance = 0\n\n    # Set the initial house,\n    # which is not available\n    not_available = 1\n\n    # Iterate over all houses\n    # until we found the house,\n    # that is not available\n    for house in range(houses_count):\n        if houses_availability[house] == 0:\n            not_available = house + 1\n            break\n\n    # If all houses are available,\n    # then there is no point in continuing,\n    # as the minimum distance will be 0\n    if not_available == houses_count:\n        return 0\n\n    # Calculate the distance between\n    # the closest house to the girl\n    for house in range(not_available, houses_count):\n        # If the house is available,\n        # then we calculate the distance\n        if houses_availability[house] == 1:\n            min_distance += 10 * abs(not_available - house)\n            not_available = house + 1\n\n    # Return the minimum distance\n    return min_distance"
    },
    {
        "number": 332,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    pass\n    "
    },
    {
        "number": 332,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n\n    n, m = map(int, lines[0].split(' '))\n    a = []\n    for i in range(1, n + 1):\n        row = list(map(int, lines[i].split(' ')))\n        a.append(row)\n\n    b = []\n    for i in range(1, n + 1):\n        row = list(map(int, lines[i + n].split(' ')))\n        b.append(row)\n\n    for _ in range(n):\n        for _ in range(m):\n            # find right corner\n            while True:\n                right = [0, 0]\n                for i in range(n):\n                    for j in range(m):\n                        if a[i][j] > right[0]:\n                            right[0] = a[i][j]\n                            right[1] = i\n                            right[2] = j\n                # if something was found\n                if right[0] > 0:\n                    # replace it\n                    for i in range(n):\n                        for j in range(m):\n                            if right[1] <= i < right[1] + right[0] and right[2] <= j < right[2] + right[0]:\n                                a[i][j] = 0\n                    # update right corner\n                    for i in range(n):\n                        for j in range(m):\n                            if a[i][j] > right[0]:\n                                right[0] = a[i][j]\n                                right[1] = i\n                                right[2] = j\n                # if nothing was found\n                else:\n                    break\n\n            # find down corner\n            while True:\n                down = [0, 0]\n                for i in range(m):\n                    for j in range(n):\n                        if a[j][i] > down[0]:\n                            down[0] = a[j][i]\n                            down[1] = j\n                            down[2] = i\n                # if something was found\n                if down[0] > 0:\n                    # replace it\n                    for i in range(n):\n                        for j in range(m):\n                            if down[1] <= i < down[1] + down[0] and down[2] <= j < down[2] + down[0]:\n                                a[i][j] = 0\n                    # update down corner\n                    for i in range(n):\n                        for j in range(m):\n                            if a[i][j] > down[0]:\n                                down[0] = a[i][j]\n                                down[1] = i\n                                down[2] = j\n                # if nothing was found\n                else:\n                    break\n\n            # find left corner\n            while True:\n                left = [0, 0]\n                for i in range(n):\n                    for j in range(m):\n                        if a[i][j] > left[0]:\n                            left[0] = a[i][j]\n                            left[1] = i\n                            left[2] = j\n                # if something was found\n                if left[0] > 0:\n                    # replace it\n                    for i in range(n):\n                        for j in range(m):\n                            if left[1] <= i < left[1] + left[0] and left[2] <= j < left[2] + left[0]:\n                                a[i][j] = 0\n                    # update left corner\n                    for i in range(n):\n                        for j in range(m):\n                            if a[i][j] > left[0]:\n                                left[0] = a[i][j]\n                                left[1] = i\n                                left[2] = j\n                # if nothing was found\n                else:\n                    break\n\n            # find up corner\n            while True:\n                up = [0, 0]\n                for i in range(m):\n                    for j in range(n):\n                        if a[j][i] > up[0]:\n                            up[0] = a[j][i]\n                            up[1] = j\n                            up[2] = i\n                # if something was found\n                if up[0] > 0:\n                    # replace it\n                    for i in"
    },
    {
        "number": 332,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution to the problem in Python.\n\n    Args:\n        stdin (str): Input string.\n\n    Returns:\n        str: Output string.\n    \"\"\"\n    n, m = list(map(int, stdin.split()))\n    a = [list(map(int, stdin.split())) for _ in range(n)]\n    b = [list(map(int, stdin.split())) for _ in range(n)]\n\n    for row in range(n):\n        for col in range(m):\n            if not a[row][col] == b[row][col]:\n                return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 332,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    rows, columns = [int(i) for i in stdin.split(' ')]\n    matrix = []\n    for _ in range(rows):\n        matrix.append([int(i) for i in stdin.split(' ')])\n    matrix_after = []\n    for i in range(rows):\n        matrix_after.append([])\n        for j in range(columns):\n            matrix_after[i].append(matrix[j][i])\n    matrix_after_transpose = [[matrix_after[j][i] for j in range(len(matrix_after))] for i in range(len(matrix_after[0]))]\n    for i in range(len(matrix_after_transpose)):\n        for j in range(len(matrix_after_transpose[i])):\n            if matrix_after_transpose[i][j]!= matrix[i][j]:\n                print(\"NO\")\n                return\n    print(\"YES\")\n    return\n\nsolution(stdin)\n\nprint(matrix)\nprint(matrix_after)\nprint(matrix_after_transpose)\n"
    },
    {
        "number": 332,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2 2\\n1 1\\n6 1\\n1 6\\n1 1\\n\")\n    'YES'\n    >>> solution(\"3 3\\n1 2 3\\n4 5 6\\n7 8 9\\n1 4 7\\n2 5 6\\n3 8 9\\n\")\n    'YES'\n    >>> solution(\"2 2\\n4 4\\n4 5\\n5 4\\n4 4\\n\")\n    'YES'\n    \"\"\"\n    stdin = stdin.split(\"\\n\")\n    n, m = [int(i) for i in stdin.pop(0).split()]\n    a = [\n        [int(j) for j in stdin.pop(0).split()]\n        for _ in range(n)\n    ]\n    b = [\n        [int(j) for j in stdin.pop(0).split()]\n        for _ in range(n)\n    ]\n    if len(set(sum(a, [])))!= n:\n        return \"NO\"\n    if len(set(sum(b, [])))!= n:\n        return \"NO\"\n    for i in range(n):\n        for j in range(m):\n            if a[i][j]!= b[i][j]:\n                return \"NO\"\n    return \"YES\"\n\ndef"
    },
    {
        "number": 332,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Function to solve the problem.\"\"\"\n    # Prepare the data.\n    n, m = map(int, stdin.split())\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, stdin.split())))\n    # Perform the required operations.\n    for _ in range(n):\n        for i in range(m):\n            for j in range(m):\n                print(matrix[i][j], end=\" \")\n            print(end=\" \")\n        print(end=\"\\n\")\n    return \"YES\"\n"
    },
    {
        "number": 332,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nfrom math import ceil\nfrom typing import List\n\n\ndef"
    },
    {
        "number": 332,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    "
    },
    {
        "number": 332,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('2 2\\n1 1\\n6 1\\n1 6\\n1 1')\n    'YES'\n    >>> solution('2 2\\n4 4\\n4 5\\n5 4\\n4 4')\n    'NO'\n    >>> solution('3 3\\n1 2 3\\n4 5 6\\n7 8 9\\n1 4 7\\n2 5 6\\n3 8 9\\n1 3 5\\n2 3 6\\n3 5 7')\n    'YES'\n    \"\"\"\n    a, b = map(int, stdin.split())\n    a_b = [list(map(int, stdin.split())) for _ in range(a)]\n    b_b = [list(map(int, stdin.split())) for _ in range(a)]\n    for i in range(a):\n        for j in range(b):\n            if a_b[i][j]!= b_b[i][j]:\n                return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 332,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Returns 'YES' or 'NO' depending on whether the matrices can be transformed.\n    \"\"\"\n    # parse input\n    n, m = map(int, stdin.split())\n    A = [list(map(int, stdin.split())) for _ in range(n)]\n    B = [list(map(int, stdin.split())) for _ in range(n)]\n    \n    # check if they can be transformed\n    # check if square matrix\n    if n!= m:\n        return \"NO\"\n    \n    # check if it is square\n    if len(set([len(a) for a in A]))!= 1:\n        return \"NO\"\n    \n    # check if it is rectangular\n    if len(set([len(a) for a in A]))!= 1:\n        return \"NO\"\n    \n    # check if equal\n    if A == B:\n        return \"YES\"\n    \n    # transform\n    # check if square matrix\n    if n!= m:\n        return \"NO\"\n    \n    # check if it is square\n    if len(set([len(a) for a in A]))!= 1:\n        return \"NO\"\n    \n    # check if it is rectangular\n    if len(set([len(a) for a in A]))!= 1:\n        return \"NO\"\n    \n    # check if equal\n    if A == B:\n        return \"YES\"\n    \n    # check if it is square matrix\n    if n!= m:\n        return \"NO\"\n    \n    # check if it is rectangular\n    if len(set([len(a) for a in A]))!= 1:\n        return \"NO\"\n    \n    # check if it is rectangular\n    if len(set([len(a) for a in A]))!= 1:\n        return \"NO\"\n    \n    # check if it is equal\n    if A == B:\n        return \"YES\"\n    \n    # check if it is square matrix\n    if n!= m:\n        return \"NO\"\n    \n    # check if it is rectangular\n    if len(set([len(a) for a in A]))!= 1:\n        return \"NO\"\n    \n    # check if it is rectangular\n    if len(set([len(a) for a in A]))!= 1:\n        return \"NO\"\n    \n    # check if it is equal\n    if A == B:\n        return \"YES\"\n    \n    return \"NO\"\n"
    },
    {
        "number": 333,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"abcd\\nbc\")\n    5\n    \"\"\"\n"
    },
    {
        "number": 333,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return str\n"
    },
    {
        "number": 333,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''Returns longest common subsequence between a and b.'''\n    a = stdin[0]\n    b = stdin[1]\n    i = 0\n    j = 0\n    max_length = 0\n    while i < len(a) and j < len(b):\n        if a[i] == b[j]:\n            i += 1\n            j += 1\n        else:\n            if i > 0:\n                i = i - 1\n            elif j > 0:\n                j = j - 1\n            else:\n                max_length += 1\n                i += 1\n                j += 1\n    return max_length\n\nprint(solution(input()))"
    },
    {
        "number": 333,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\"\"\""
    },
    {
        "number": 333,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\ndef"
    },
    {
        "number": 333,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"test\"\n\n\n\"\"\""
    },
    {
        "number": 333,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin[0]\n    b = stdin[1]\n\n    def lcs(string_a, string_b):\n        if string_a == '' or string_b == '':\n            return 0\n        if string_a[-1] == string_b[-1]:\n            return 1 + lcs(string_a[:-1], string_b[:-1])\n        return max(lcs(string_a, string_b[:-1]), lcs(string_a[:-1], string_b))\n\n    return str(len(a) + len(b) - lcs(a, b))\n\n\n\n\n'''\na, b = input().strip().split()\n\ndef"
    },
    {
        "number": 333,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nfrom typing import List\n\n\ndef"
    },
    {
        "number": 333,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\nIn the second example: there is no uncommon subsequence, so the answer is -1.\ndef"
    },
    {
        "number": 333,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    stdin = stdin.split()\n    a = stdin[0]\n    b = stdin[1]\n    a_dict = {}\n    b_dict = {}\n    a_dict_keys = set()\n    b_dict_keys = set()\n    max_key = 0\n    for i in a:\n        if i in a_dict:\n            a_dict[i] += 1\n            a_dict_keys.add(a_dict[i])\n        else:\n            a_dict[i] = 1\n            a_dict_keys.add(a_dict[i])\n        if a_dict[i] > max_key:\n            max_key = a_dict[i]\n    max_key = 0\n    for j in b:\n        if j in b_dict:\n            b_dict[j] += 1\n            b_dict_keys.add(b_dict[j])\n        else:\n            b_dict[j] = 1\n            b_dict_keys.add(b_dict[j])\n        if b_dict[j] > max_key:\n            max_key = b_dict[j]\n    if max_key == 1:\n        return -1\n    if max_key == 0:\n        return 0\n    a_list = list(a_dict_keys)\n    b_list = list(b_dict_keys)\n    a_list.sort(reverse=True)\n    b_list.sort(reverse=True)\n    for k in a_list:\n        if k in b_list:\n            return k\n"
    },
    {
        "number": 334,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    c, d = map(int, stdin.split(' '))\n    time1, time2 = b, d\n    if a == 1:\n        while time1 < time2:\n            if time1 % 2 == 0:\n                time1 += c\n            else:\n                time1 += 2*c\n            if time2 % 2 == 0:\n                time2 += c\n            else:\n                time2 += 2*c\n        print(time1) if time1 > time2 else print(time2)\n    else:\n        while time1 < time2:\n            if time1 % 2 == 0:\n                time1 += c\n            else:\n                time1 += 2*c\n            if time2 % 2 == 0:\n                time2 += d\n            else:\n                time2 += 2*d\n        print(time1) if time1 > time2 else print(-1)\n\nprint(solution(stdin))\n\n-----Explanation-----\n\nIn the first sample testcase, after 20 minutes of screams, the time at which they'll catch each other is time 82.\nIn the second sample testcase, there's no time at which Rick and Morty will catch each other.\n\n\"\"\"\n"
    },
    {
        "number": 334,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    c, d = map(int, stdin.split())\n\n    for i in range(1, b + 1):\n        if (i * a) % b == c:\n            return str(i)\n            \n    return \"-1\"\n    \n    \n\n\n\n\n\ndef"
    },
    {
        "number": 334,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = list(map(int, stdin.split()))\n    r = (b * a - c * d) // (a - c)\n    if b * a - c * d == 0:\n        r = -1\n    return str(r)"
    },
    {
        "number": 334,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    c, d = [int(x) for x in stdin.split()]\n    cnt = a + b\n    cnt += 1 if c > 1 else 0\n    cnt += 1 if d > 1 else 0\n    if cnt > b:\n        print(cnt - b)\n    else:\n        print(-1)"
    },
    {
        "number": 334,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split('\\n')[0].split(' '))\n    c, d = map(int, stdin.split('\\n')[1].split(' '))\n    if a > b:\n        a, b = b, a\n    if c > d:\n        c, d = d, c\n    if a == b:\n        return (a * c + b * d) * 2\n    if a == b - 1:\n        return b * c * 2 + d * (b - 1)\n    if a == b - 2:\n        return b * c * 2 + d * (b - 2)\n    else:\n        return -1\n"
    },
    {
        "number": 334,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    x, y = 0, 0\n    while x < b * a:\n        x += a\n        y += c\n    if y % d == 0:\n        return 'never'\n    while y < b * a:\n        x += a\n        y += c\n    return x\n"
    },
    {
        "number": 334,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(i) for i in stdin.split()]\n    c, d = [int(i) for i in stdin.split()]\n    \n    m = (a + b) % 2\n    s = (c + d) % 2\n    \n    if m == s:\n        return str(-1)\n    elif m == 1:\n        return str(c + d)\n    elif m == 0 and s == 1:\n        return str(c + d)\n    else:\n        return str(a + b)\n        \nprint(solution(stdin()))\n\n\n\"\"\"\n"
    },
    {
        "number": 334,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(x) for x in stdin.split()]\n    return str(1 + (a + b + c) * c + (d + c) * b)\n"
    },
    {
        "number": 334,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the time, if any, when Rick and Morty will scream at the same time\"\"\"\n    a, b, c, d = map(int, stdin.split())\n    time = 0\n    for c_ in range(c):\n        time += a\n        time += b\n    for d_ in range(d):\n        time += c\n        time += d\n    if time % 2!= 0:\n        return str(time)\n    else:\n        return \"-1\"\n"
    },
    {
        "number": 334,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    c, d = map(int, stdin.split(' '))\n    \n    RICK = [i for i in range(1, a + 1) if i % 2 == 0]\n    MORTY = [i for i in range(1, b + 1) if i % 2 == 1]\n    RICK.extend(RICK * b)\n    MORTY.extend(MORTY * a)\n    \n    RICK.sort()\n    MORTY.sort()\n    \n    min_value = min(RICK[-1], MORTY[-1])\n    max_value = max(RICK[0], MORTY[0])\n    \n    if min_value > max_value:\n        return -1\n    else:\n        return min_value\n"
    },
    {
        "number": 335,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    a = [int(x) for x in stdin.split()]\n    a.sort()\n    x = sum(a)\n    a.sort()\n    x = x/3\n    a.sort(reverse=True)\n    if(x%1 == 0):\n        x = int(x)\n        print(x,x,x)\n    else:\n        x = int(x)\n        print(a[0],a[0],x)"
    },
    {
        "number": 335,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 335,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('3')\n    1 1 1\n    >>> solution('233')\n    77 77 79\n    \"\"\"\n    n = int(stdin)\n    res = [0, 0, 0]\n    res[0] = n // 3\n    rem = n % 3\n    for i in range(1, 4):\n        res[i] += res[i - 1] + rem\n    res[3] -= res[2]\n    print(*res)\n    return\n"
    },
    {
        "number": 335,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(3)\n    1 1 1\n    \"\"\"\n    return \"1 1 1\"\n"
    },
    {
        "number": 335,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 335,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a, b = divmod(n, 3)\n    return str(a) + \" \" + str(b) + \" \" + str(n - b - a)\n"
    },
    {
        "number": 335,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin\n    for i in range(3):\n        a = str(int(a) / 3) + a\n    return a\n"
    },
    {
        "number": 335,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    :param stdin: input str\n    :return: string\n    \"\"\"\n\n    return f'{a+b+c=n}'"
    },
    {
        "number": 335,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    "
    },
    {
        "number": 335,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # number of possibilites is nC3\n    for i in range(n // 3 + 1):\n        for j in range(n // 3 + 1 - i):\n            k = n - i - j\n            if i * 3 + j * 3 + k == n:\n                return f\"{i} {j} {k}\"\n    return \"\"\n"
    },
    {
        "number": 336,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 336,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    "
    },
    {
        "number": 336,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return '''\n    \n    '''\n"
    },
    {
        "number": 336,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c, d = list(map(int, stdin.split(' ')))\n    print(f\"n: {n}\\na: {a}\\nb: {b}\\nc: {c}\\nd: {d}\")\n    print(f\"solution: {(n ** 2) - (a ** 2) - (b ** 2) - (c ** 2) - (d ** 2)}\")"
    },
    {
        "number": 336,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 336,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 336,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = [int(i) for i in stdin.split()]\n    n, a, b, c, d = stdin\n    return str(len(list(combinations([n, a, b, c, d], 2))))\n"
    },
    {
        "number": 336,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c, d = [int(x) for x in stdin.split(\" \")]\n    nums = [a, b, c, d]\n    candidates = list(range(1, n + 1))\n\n    def reduce(nums):\n        seen = set()\n        for num in nums:\n            if num in seen:\n                return False\n            seen.add(num)\n        return True\n\n    return sum(reduce(combinations(candidates, i)) for i in range(2, len(candidates) + 1))\n\n\ndef"
    },
    {
        "number": 336,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    [n, a, b, c, d] = [int(x) for x in stdin.split(' ')]\n    return str(comb(a + b + c + d, n - 4) * 2)\n\ndef"
    },
    {
        "number": 336,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    #\n    #\n    #\n    #\n    #\n    #\n    pass\n"
    },
    {
        "number": 337,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    # your code here"
    },
    {
        "number": 337,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 337,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    w, h = map(int, stdin.split(\" \"))\n    u, d = map(int, stdin.split(\" \"))\n    for _ in range(h):\n        w += u - d\n        if w < 0:\n            break\n        w += 1\n        if w > 100:\n            break\n        d += 1\n        if d > h:\n            break\n    return str(w)\n"
    },
    {
        "number": 337,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 337,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, y = [int(x) for x in stdin.split()]\n    if n == 1:\n        return str(m)\n    \n    return str(m - (y - m) // (n - 1) + (n - m - 1) * (y - m) // (n - 1))\n"
    },
    {
        "number": 337,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stone1, stone2 = map(int, stdin.split())\n    height = int(stdin)\n    while height > 0:\n        height -= 1\n        stone1 += int(stdin)\n        stone2 += int(stdin)\n    print(min(stone1, stone2))\n\nsolution(\"2 4\")\n"
    },
    {
        "number": 337,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return str(res)"
    },
    {
        "number": 337,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 337,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return number of snowballs, whose height is equal to 0 after the\n    time, when the snowball weight equals to the weight of the second stone,\n    or -1 if the number of such snowballs is impossible to determine.\n    >>> solution('4 3\\n1 1\\n0 1')\n    8\n    >>> solution('4 3\\n9 2\\n0 1')\n    1\n    >>> solution('4 3\\n9 2\\n0 2')\n    -1\n    >>> solution('4 3\\n9 2\\n1 1')\n    -1\n    \"\"\"\n    W, H = map(int, stdin.split())\n    U1, D1 = map(int, stdin.split()[1:])\n    U2, D2 = map(int, stdin.split()[2:])\n\n    def find_snowball():\n        \"\"\"Return number of snowballs, whose height is equal to 0 after the\n        time, when the snowball weight equals to the weight of the second stone,\n        or -1 if the number of such snowballs is impossible to determine.\n        >>> find_snowball()\n        8\n        >>> find_snowball()\n        -1\n        >>> find_snowball()\n        1\n        >>> find_snowball()\n        -1\n        >>> find_snowball()\n        1\n        \"\"\"\n        w = 1\n        h = 1\n        while True:\n            w += H + 1 - h\n            h += H + 1 - h\n            if w >= U2 and w <= D2:\n                return w\n            if h == D1:\n                return -1\n\n    return find_snowball()"
    },
    {
        "number": 337,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"Not Implemented\"\n"
    },
    {
        "number": 338,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin.readline().strip())\n    data = list(map(int, stdin.readline().strip().split(\" \")))\n    x, y = list(map(int, stdin.readline().strip().split(\" \")))\n    data.sort()\n    \n    for i in range(m - 1):\n        if data[i + 1] - data[i] < x:\n            return str(i + 1)\n        if data[i + 1] - data[i] > y:\n            return str(0)\n    return str(m)\n"
    },
    {
        "number": 338,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    m, *a = map(int, stdin.split())\n    x, y = map(int, stdin.split())\n    \n    std = [0] * m\n    \n    for i in range(m):\n        std[i] = a[i]\n    \n    std = sorted(std)\n    \n    \n    flag = 0\n    for i in range(m):\n        if std[i] >= x:\n            flag = 1\n            break\n    \n    if flag == 0:\n        return '0'\n    \n    s = std[::-1]\n    \n    sum = 0\n    count = 0\n    for i in s:\n        if i >= x:\n            sum += i\n            count += 1\n    \n    # print(sum, count)\n    if count < 2:\n        return '0'\n    \n    \n    if sum < x:\n        return '0'\n    \n    return std[0]\n    \n\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 338,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"The solution function must return an integer representing the passed grade.\n\n    The input is read from the stdin.\n\n    The input must be in the following format:\n\n    The first line of the input contains an integer m (2 \u2264 m \u2264 100) that defines the number of test groups.\n    The second line of the input contains m integers c_1, c_2,..., c_m (0 \u2264 c_i \u2264 100) that defines the number of students in each test group.\n    The third line of the input contains two integers x and y (1 \u2264 x \u2264 y \u2264 10000) that defines the size of the groups.\n    At least one c_i is greater than 0.\n\n    The passed grade can only be 1, 2, 3, 4 or 5.\n\n    :param stdin: the input of the problem\n    :type stdin: str\n    :return: the solution to the problem\n    :rtype: str\n    \"\"\"\n   ...\n    return ''\n"
    },
    {
        "number": 338,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    m, *arr = map(int, stdin.split('\\n')[0].split())\n    x, y = map(int, stdin.split('\\n')[1].split())\n    arr.sort()\n    start = 0\n    end = len(arr) - 1\n    s = 0\n    for i in range(0, len(arr)):\n        if i > 0 and arr[i] == arr[i - 1]:\n            s += 1\n            continue\n        s += 1\n        while x <= s <= y:\n            s += 1\n            break\n        if s == y:\n            break\n        start = i + 1\n        s = 0\n    if start == end:\n        return \"0\"\n    if start == len(arr):\n        return str(arr[len(arr) - 1])\n    return str(arr[start])\n\n---\n"
    },
    {
        "number": 338,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin.readline())\n    classes = [int(i) for i in stdin.readline().strip().split(' ')]\n    x, y = map(int, stdin.readline().strip().split(' '))\n    classes.sort()\n    result = 0\n    while x <= y:\n        if classes[0] >= x:\n            result += 1\n            if classes[-1] >= x:\n                result += 1\n                break\n            if classes[0] < classes[-1] < x:\n                classes.pop(0)\n                classes.pop()\n        x += 1\n    if result == 0:\n        print(0)\n    else:\n        print(result)\n\nsolution(\"5\\n3 4 3 2 1\\n6 8\\n\")\n"
    },
    {
        "number": 338,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    groups = list(map(int, stdin.split('\\n')[0].split(' ')))\n    x, y = list(map(int, stdin.split('\\n')[1].split(' ')))\n    max_group = max(groups)\n    if (groups.count(max_group) >= x) and (groups.count(max_group) <= y):\n        return str(groups.index(max_group))\n    else:\n        return '0'\n\n\n\ndef"
    },
    {
        "number": 338,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    x, y, m = map(int, stdin[0].split())\n    course = list(map(int, stdin[1].split()))\n    course.sort(reverse=True)\n    print(course)\n    for i in range(m):\n        if course[i] < x or course[i] >= y:\n            return str(i + 1)\n    return \"0\"\n\n\n\n-----Test-----\n\ndef"
    },
    {
        "number": 338,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    m, *c = map(int, stdin.split())\n    x, y = map(int, stdin.split())\n    c = [n for n in c if n]\n    pass_rate = 0\n    \n    for n in range(1, m+1):\n        if sum(c) < n*x:\n            pass_rate = max(pass_rate, n)\n        elif sum(c) > y:\n            pass_rate = 0\n        else:\n            pass_rate = max(pass_rate, n)\n    \n    return pass_rate if pass_rate!= 0 else '0'\n"
    },
    {
        "number": 338,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    m, *c = map(int, stdin.split())\n    x, y = map(int, stdin.split())\n    c.sort()\n    for i in range(len(c)):\n        if c[i] < x:\n            break\n    else:\n        return '0'\n    return str(i)\n"
    },
    {
        "number": 338,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    m, *data = map(int, stdin.split())\n    x, y = map(int, stdin.split())\n    data = list(data)\n    data.sort()\n    j = 0\n    for i in range(len(data)):\n        if data[i] >= x:\n            j = i\n            break\n    n = 0\n    for i in range(j):\n        n += data[i]\n    if n >= y:\n        return 0\n    for i in range(j, len(data)):\n        n += data[i]\n        if n >= y:\n            return data[i - 1] + 1\n"
    },
    {
        "number": 339,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    k = int(stdin.readline())\n    A = int(stdin.readline())\n    B = int(stdin.readline())\n    a = 0\n    while n!= 1:\n        if n % k == 0:\n            a += A\n            n //= k\n        else:\n            a += B\n            n -= 1\n    return a\n"
    },
    {
        "number": 339,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k, a, b = map(int, stdin.split())\n    count = 0\n    while True:\n        if n == 1:\n            return count\n        if n % k == 0:\n            n = n // k\n            count += b\n        else:\n            n = n - 1\n            count += a\n"
    },
    {
        "number": 339,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k, A, B = map(int, stdin.split())\n    count = 0\n    while n > 1:\n        if n % k == 0:\n            count += B\n            n = n // k\n        else:\n            count += A\n            n -= 1\n    return count\n"
    },
    {
        "number": 339,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k, a, b = list(map(int, stdin.split('\\n')[0].split()))\n    min_cost = 0\n    while n!= 1:\n        if (n % k) == 0:\n            n //= k\n            a = min(a, b)\n        else:\n            n -= 1\n            a -= 1\n        min_cost += a\n    return min_cost\n\"\"\"\n"
    },
    {
        "number": 339,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return k * (n // k) + (n % k) * max(A, B)\n\n\ndef"
    },
    {
        "number": 339,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x,k,a,b = int(stdin[0]), int(stdin[1]), int(stdin[2]), int(stdin[3])\n    steps = 0\n    while x!= 1:\n        if x % k == 0:\n            x = x // k\n            steps += b\n        else:\n            x -= 1\n            steps += a\n    return steps\n"
    },
    {
        "number": 339,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 339,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def add(l: list, x: int) -> list:\n        l.append(x)\n        return l\n\n    def sub(l: list, x: int) -> list:\n        l.pop()\n        return l\n\n    n = int(stdin)\n    k = int(stdin)\n    a = int(stdin)\n    b = int(stdin)\n\n    ans = 0\n    x = n\n    l = []\n\n    while x!= 1:\n        if x % k == 0:\n            l = add(l, x // k)\n            x = x // k\n        else:\n            l = add(l, x // k)\n            x = x // k\n        if x > 1:\n            l = add(l, x - 1)\n            x = x - 1\n        ans += a\n    for i in range(len(l) - 1):\n        ans += b\n\n    return ans\n"
    },
    {
        "number": 339,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k, a, b = list(map(int, stdin.split(' ')))\n    return str(a * b + b * (n // k) + max(0, n % k - k + 1))\n\n\ndef"
    },
    {
        "number": 339,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k, A, B = [int(i) for i in stdin.split('\\n')]\n    if n % k == 0:\n        return 0\n    if n % k == 1:\n        return A + B * (n // k)\n    return A + B * (n // k) + B + A\n"
    },
    {
        "number": 340,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    ans = stdin\n    return ans\n\nprint(solution('20'))\n"
    },
    {
        "number": 340,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    q = 0\n    while n!= 1:\n        if n % 2 == 0:\n            n /= 2\n            q += 1\n        else:\n            n = 3 * n + 1\n            q += 1\n    return [int(n), q]\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 340,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 340,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    sqrt_count = 0\n    while n!= 1:\n        if n % 2 == 0:\n            n //= 2\n            count += 1\n        else:\n            n = 3 * n + 1\n            count += 1\n        sqrt_count += 1\n    print(sqrt_count, count)"
    },
    {
        "number": 340,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 340,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\""
    },
    {
        "number": 340,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        count += 1\n    return str(count) + \" \" + str(n)\n"
    },
    {
        "number": 340,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    n = int(stdin)\n    nums = []\n    while n >= 1:\n        nums.append(n)\n        if n % 2 == 0:\n            n /= 2\n        else:\n            n = 3 * n + 1\n    return str(min(nums)) +'' + str(len(nums))\n"
    },
    {
        "number": 340,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(min(int(stdin), 10 ** 6)) +'' + str(int(stdin) - 10 ** 6)\n\nprint(solution(input()))\n"
    },
    {
        "number": 340,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''returns minimal value, count of operations'''\n    count = 0\n    res = 0\n    while stdin.isnumeric() or len(stdin) > 1:\n        stdin = stdin.split(\" \")\n        if len(stdin) > 1:\n            res = int(stdin[0])\n            stdin = \" \".join(stdin[1:])\n        for i in stdin:\n            if i == \"mul\":\n                res *= int(stdin[stdin.index(i) + 1])\n                count += 1\n                stdin = stdin.replace(stdin[stdin.index(i) + 1] + \" \" + i, \"\", 1)\n            elif i == \"sqrt\":\n                res = round(res ** 0.5)\n                count += 1\n                stdin = stdin.replace(i + \" \" + stdin[stdin.index(i) + 1], \"\", 1)\n        stdin = stdin.split(\" \")\n        stdin = \" \".join(stdin[1:])\n    return str(res) + \" \" + str(count)\n"
    },
    {
        "number": 341,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n, k = map(int, stdin.split())\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    dp[1][1] = 1\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            dp[i][j] = dp[i - 1][j]\n            if stdin[i - 1] == 'r':\n                if j - 1 >= 0:\n                    dp[i][j] += dp[i - 1][j - 1]\n            elif stdin[i - 1] =='s':\n                if j - 1 >= 0:\n                    dp[i][j] += dp[i - 1][j - 1]\n            elif stdin[i - 1] == 'p':\n                if j - 1 >= 0:\n                    dp[i][j] += dp[i - 1][j - 1]\n    return max(dp[n])\n"
    },
    {
        "number": 341,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    hand_list = []\n    for _ in range(k):\n        hand_list.append(stdin[0])\n        stdin = stdin[1:]\n    hand_count = {}\n    for i in hand_list:\n        hand_count[i] = hand_count.get(i, 0) + 1\n    print(hand_count)\n    score = 0\n    for i in range(n - k):\n        # can_hand = stdin[0]\n        for can_hand in hand_list:\n            if can_hand in hand_count:\n                if hand_count[can_hand] > 0:\n                    hand_count[can_hand] -= 1\n                    score += i + 1\n                    break\n                else:\n                    hand_count[can_hand] = 0\n            else:\n                hand_count[can_hand] = 0\n        stdin = stdin[1:]\n    print(hand_count)\n    print(score)\n    return score\n\ndef"
    },
    {
        "number": 341,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    hands = [list(map(int, stdin.split())) for _ in range(n)]\n    return max(\n        sum(\n            (hands[i][j] + k * (j % 3 == hands[i][j] - 1))\n            for j in range(n - k + 1)\n        )\n        for i in range(n)\n    )\n\n\ndef"
    },
    {
        "number": 341,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    def turn(t):\n        if t == 'r':\n            return 'R'\n        if t == 'p':\n            return 'P'\n        return 'S'\n\n    n, k = map(int, stdin.split(' '))\n    t = stdin\n    max_score = 0\n    for r in range(k + 1):\n        hand = [turn(t[n - r - 1])]\n        for i in range(r):\n            hand.append(turn(t[n - i - 2]))\n        max_score = max(max_score, sum(2 ** i * score for i, score in enumerate(hand)))\n    return max_score\n"
    },
    {
        "number": 341,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split()]\n    t = stdin[(n + 2) :]\n    for i in range(1, k):\n        t = t.replace(t[i], t[i - 1])\n    print(len(t))"
    },
    {
        "number": 341,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def get_score(t: str, r, p, s):\n        if t == 'r':\n            return r\n        elif t == 'p':\n            return p\n        else:\n            return s\n\n    def get_optimal_hand(t: str, r, p, s, k: int):\n        optimal_hand = []\n        for _ in range(k):\n            if _ <= k - 1:\n                optimal_hand.append(t[_])\n            else:\n                if t[_] == t[k - 1]:\n                    optimal_hand.append(t[_])\n                else:\n                    previous_hand = optimal_hand.copy()\n                    previous_hand.pop(-1)\n                    if r > p:\n                        if s > r:\n                            optimal_hand.append('r')\n                        else:\n                            optimal_hand.append('s')\n                    elif s > r:\n                        optimal_hand.append('p')\n                    else:\n                        optimal_hand.append('r')\n        return optimal_hand\n\n    N, K = stdin.split(' ')\n    N = int(N)\n    K = int(K)\n\n    score_per_round = [0] * N\n    # get score per round\n    for i in range(N):\n        t = stdin[i * 3 + 1]\n        r, p, s = stdin[i * 3 + 2], stdin[i * 3 + 3], stdin[i * 3 + 4]\n        score_per_round[i] = get_score(t, r, p, s)\n\n    # get optimal hand\n    optimal_hand = get_optimal_hand(stdin[-1], score_per_round[0], score_per_round[1], score_per_round[2], K)\n\n    score = 0\n    for i in range(N - K + 1):\n        hand_to_play = optimal_hand[i:K + i]\n        score += score_per_round[i] * len(hand_to_play)\n\n    return score\n\n\ndef"
    },
    {
        "number": 341,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nfrom collections import Counter\n\ndef"
    },
    {
        "number": 341,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum([2 * ((i + 1) - int(stdin[1])) * (10 ** (int(stdin[1]) - i - 1)) for i in range(int(stdin[1]))]))\n"
    },
    {
        "number": 341,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, K, T = map(int, stdin.split())\n    hand = {'r':'Rock','s':'Scissors', 'p':'Paper'}\n    hand_list = []\n    hand_dict = {}\n    for i in range(N):\n        hand_list.append(input())\n        hand_dict[i] = hand_list[i]\n    score_dict = {'r':0,'s':0, 'p':0}\n    for i in range(N-K+1):\n        for j in range(K):\n            if hand_dict[i+j] == 'r':\n                score_dict['r'] += N-K\n            elif hand_dict[i+j] =='s':\n                score_dict['s'] += N-K\n            elif hand_dict[i+j] == 'p':\n                score_dict['p'] += N-K\n    print(max(score_dict.values()))"
    },
    {
        "number": 341,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N, K = [int(x) for x in stdin.split(' ')]\n    hand = stdin[K+2:]\n    print(hand)\n    return str(N * (K+1) - sum(hand.count(h) for h in set(hand)))\n\n-----Main-----\n"
    },
    {
        "number": 342,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(x) for x in stdin.split()]\n    dp = [[[0 for _ in range(2 * c + 1)] for _ in range(2 * c + 1)] for _ in range(2 * c + 1)]\n    # dp[i][j][k]:= max(dp[i-1][j][k], dp[i-1][j-1][k-1]+1) if 'a' <= k <= j,\n    #              0 otherwise\n    for k in range(0, c + 1):\n        dp[k][k][k] = 1\n    for i in range(c + 1, 2 * c + 1):\n        for j in range(c + 1, 2 * c + 1):\n            for k in range(0, c + 1):\n                if k >= i - j:\n                    dp[i][j][k] = max(dp[i - 1][j][k], dp[i - 1][j - 1][k - 1] + 1)\n                else:\n                    dp[i][j][k] = 0\n    print(max(dp[-1][-1][c], dp[-1][-1][c - 1]))\n    return\n\n\ndef"
    },
    {
        "number": 342,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\"\"\"\n\n\nimport os\nfrom functools import lru_cache\n\n\ndef"
    },
    {
        "number": 342,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split('\\n')[0].split())\n    return str(max(a + b, b + c, a + c))\n"
    },
    {
        "number": 342,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(x) for x in stdin.split(\" \")]\n    n = a+b+c\n    k = a+b+c\n    if n % 2 == 0:\n        return a*n + b*(n//2) + c*(n//2)\n    else:\n        return k * (n // 2) + a * (n // 2)\n\n\nprint(solution('2 1 2'))\n"
    },
    {
        "number": 342,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split()\n    x = int(a[0])\n    y = int(a[1])\n    z = int(a[2])\n    s = list(stdin)\n    if len(s) < 3:\n        return 0\n    for i in range(0, len(s), 2):\n        if s[i] == 'a' and s[i + 1] == 'b':\n            s[i] = '1'\n            s[i + 1] = '0'\n        elif s[i] == 'a' and s[i + 1] == 'b':\n            s[i] = '0'\n            s[i + 1] = '1'\n    for i in range(0, len(s), 2):\n        if s[i] == '0' and s[i + 1] == '0':\n            s[i] = '1'\n            s[i + 1] = '1'\n        elif s[i] == '1' and s[i + 1] == '1':\n            s[i] = '0'\n            s[i + 1] = '0'\n    res = ''\n    for i in range(0, len(s) - 1, 2):\n        if s[i] == '1' and s[i + 1] == '1':\n            res += 'a'\n        else:\n            res += 'b'\n    return len(res)\n"
    },
    {
        "number": 342,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    a, b = min(a, b), max(a, b)\n    min_c = min(a // 2, b)\n    if a + b - 2 * min_c <= 0:\n        return 0\n    return (a + b - 2 * min_c) * c\n\n\ndef"
    },
    {
        "number": 342,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 342,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.readline())\n    b = int(stdin.readline())\n    c = int(stdin.readline())\n    return a + b + a * c + b * c + (a * c) ** 2 + (b * c) ** 2 + ((a * b) ** 2) * 2 + (a * b * c)\n\n\nprint(solution(input()))\n\n\ndef"
    },
    {
        "number": 342,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    count = 0\n    for i in range(1, a + 1):\n        if i > a - b:\n            count += (b + 1) * (a + 1)\n            break\n        else:\n            count += a - i + b + 1\n    count += a + b\n    count += (b - c) * (a + c + 1)\n    return count\nprint(solution(input()))"
    },
    {
        "number": 342,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if c >= a + b:\n        return str(a + b)\n    else:\n        return str(a * b)"
    },
    {
        "number": 343,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, p, x, y = [int(n) for n in stdin.split(' ')]\n    arr = [int(n) for n in stdin.split(' ')][k:]\n    if p * (n + 1) / 2 < x:\n        return '-1'\n    sum_mark = sum(arr)\n    arr.sort()\n    if p * (n + 1) / 2 < y:\n        return '-1'\n    result = []\n    for i in range(k):\n        if sum_mark + arr[i] <= x:\n            result.append(arr[i])\n            sum_mark += arr[i]\n    result.sort()\n    if sum_mark <= x:\n        return''.join([str(r) for r in result])\n    return '-1'\n"
    },
    {
        "number": 343,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k, p, x, y = [int(x) for x in stdin.split(' ')]\n    marks = [int(x) for x in stdin.split(' ')[k:]]\n    marks.sort()\n    i = len(marks) // 2\n    while True:\n        if marks[i] > y:\n            break\n        i -= 1\n    while True:\n        if marks[i] < x:\n            break\n        i += 1\n    if i == len(marks):\n        return '-1'\n    return''.join(str(m) for m in marks[:i])\n"
    },
    {
        "number": 343,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    https://app.codility.com/demo/results/training4HXQG5-OZD/\n    \"\"\"\n    a = [int(x) for x in stdin.split()]\n    n, k, p, x, y = a[0], a[1], a[2], a[3], a[4]\n    l = [int(x) for x in stdin.split()]\n    l = sorted(l)\n    s = sum(l)\n    m = len(l)\n    if m == 1:\n        if l[0] <= p and s <= x:\n            return \"-1\"\n        else:\n            return str(l[0])\n    if s <= x:\n        return str(l[0]) + \" \" + str(l[-1])\n    for i in range(1, m + 1):\n        if sum(l[:i]) <= x and p - max(l[:i]) >= y:\n            return str(l[:i][-1]) + \" \" + str(l[i:])[0]\n    return \"-1\"\n"
    },
    {
        "number": 343,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k, p, x, y = map(int, stdin.split())\n    if (k + 1) * p / 2 < x:\n        return '-1'\n    return''.join(['%s' % (i) for i in range(1, n - k + 1) if sum([int(i) for i in stdin.split()[k:]]) <= x and max([int(i) for i in stdin.split()[k:]]) / 2 >= y])"
    },
    {
        "number": 343,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    https://codeforces.com/contest/1555/problem/D\n    \"\"\"\n    n, k, p, x, y = [int(n) for n in stdin.split()]\n\n    if p < x or p < y:\n        return \"-1\"\n\n    cur = 0\n    for _ in range(k):\n        cur += int(stdin.split()[1])\n    if cur > x:\n        return \"-1\"\n\n    k -= 1\n    a = [int(n) for n in stdin.split()[1:]]\n\n    if len(a) == k:\n        return \"-1\"\n\n    a.sort()\n    n = len(a)\n\n    if n % 2 == 0:\n        idx1 = n // 2\n        idx2 = idx1 - 1\n    else:\n        idx1 = n // 2\n        idx2 = idx1\n\n    res = []\n    for i in range(n):\n        if i < idx1:\n            res.append(a[i])\n        else:\n            res.append(a[i - 1])\n\n    return \" \".join(str(i) for i in res)\n\nprint(solution(\"5 3 5 18 4 1 3 5 5 4 1 5\"))\n"
    },
    {
        "number": 343,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k, p, x, y = list(map(int, stdin.split(' ')))\n    arr = list(map(int, stdin.split(' ')))\n    arr.sort()\n    left = 0\n    right = p\n    while left < right:\n        mid = (left + right) // 2\n        sum = 0\n        for i in range(k):\n            sum += arr[i]\n            if sum > mid:\n                break\n        if sum <= mid:\n            left = mid + 1\n        else:\n            right = mid\n    if (k + 1) // 2 < y:\n        print(-1)\n        return\n    else:\n        arr = arr[k:]\n        right = 0\n        for i in range(len(arr)):\n            if (k + 1) // 2 < i + 1:\n                print(-1)\n                return\n            if i < (len(arr) + 1) // 2:\n                right += arr[i]\n            else:\n                right -= arr[i]\n        print(right)\n        return\n"
    },
    {
        "number": 343,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, k, p, x, y = [int(i) for i in stdin.split('\\n')[0].split(' ')]\n    a = [int(i) for i in stdin.split('\\n')[1].split(' ')]\n    a.sort()\n    sum1 = sum(a[0:k])\n    if sum1 > x:\n        if sum1 < x + p * (k - 1) / 2:\n            if sum1 % 2 == 0:\n                sum1 = sum1 // 2\n            else:\n                sum1 = (sum1 - 1) // 2\n            i = 0\n            while a[i] <= sum1:\n                sum1 -= a[i]\n                i += 1\n            a = a[i:]\n        else:\n            sum1 = x - sum1\n    sum2 = sum(a[k:])\n    if sum2 > y:\n        if sum2 < y + p * (n - k - 1) / 2:\n            if sum2 % 2 == 0:\n                sum2 = sum2 // 2\n            else:\n                sum2 = (sum2 - 1) // 2\n            i = k\n            while a[i] <= sum2:\n                sum2 -= a[i]\n                i += 1\n            a = a[:i]\n        else:\n            sum2 = y - sum2\n    return str(len(a)) +'' +''.join([str(i) for i in a])\n\n\n\ndef"
    },
    {
        "number": 343,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k, p, x, y = [int(s) for s in stdin.split()]\n    l = [int(s) for s in stdin.split()]\n    if (n > k):\n        return \"-1\"\n    for i in range(k):\n        for j in range(i+1,k):\n            if (l[i]+l[j]<=p and l[i]+l[j]>=x and l[i]+l[j]>=y):\n                print(n-k)\n                return\n    return \"1 1\""
    },
    {
        "number": 343,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 343,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    _, k, p, x, y = list(map(int, stdin.split(' ')))\n    n = (k + 1) // 2\n    if y > p or n > k:\n        return \"-1\"\n    if x >= n * p:\n        return str(p * n)\n    else:\n        return \" \".join(str(x + i) for i in range(n, n * p, n))\n"
    },
    {
        "number": 344,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    vowels = 'aeiou'\n    flag = True\n    for ch in stdin:\n        if ch not in vowels and ch!= 'n':\n            flag = False\n            break\n    return \"YES\" if flag else \"NO\"\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 344,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if \"a\" in stdin or \"o\" in stdin or \"u\" in stdin or \"i\" in stdin or \"e\" in stdin else \"NO\"\n\n\n\"\"\"\n\ndef"
    },
    {
        "number": 344,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.lower()\n    res = \"NO\"\n    if \"n\" not in s:\n        res = \"YES\"\n    for i in range(len(s)):\n        if s[i] == \"n\":\n            if not s[i+1] in \"aeiou\":\n                res = \"NO\"\n                break\n        elif not s[i] in \"aeiou\":\n            res = \"NO\"\n            break\n    return res\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 344,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if stdin.count(\"n\") == 1 else \"NO\"\n\ndef"
    },
    {
        "number": 344,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if all(v in stdin for v in \"aeiou\") else \"NO\"\n\ndef"
    },
    {
        "number": 344,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    \"\"\"\n    :param stdin:\n    :return:\n    \"\"\"\n    if len(stdin) > 100:\n        return \"NO\"\n\n    vowels = \"aeiou\"\n    no_vowel = \"n\"\n\n    s = stdin.lower()\n\n    current_letter = \"\"\n    for letter in s:\n        if letter in vowels:\n            if current_letter and current_letter!= no_vowel:\n                return \"NO\"\n            current_letter = letter\n        else:\n            current_letter = \"\"\n\n    return \"YES\"\n"
    },
    {
        "number": 344,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 344,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # TODO: implement me\n    return \"YES\" if stdin == stdin.replace(\"n\", \"\") else \"NO\"\n"
    },
    {
        "number": 344,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    vowel_count = 0\n    for i in s:\n        if i in \"aeiouAEIOU\":\n            vowel_count += 1\n        if i == \"n\":\n            if vowel_count == 0:\n                continue\n            else:\n                break\n    if vowel_count == len(s) - 1:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n    return \"\"\n\"\"\"\ndef"
    },
    {
        "number": 344,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lst = list(stdin)\n    #if (stdin[0] == \"m\" or stdin[0] == \"n\"):\n    #    return \"NO\"\n    for i in range(1, len(lst)):\n        if lst[i - 1] == \"n\" and lst[i] == \"n\":\n            return \"NO\"\n        if lst[i - 1]!= \"n\":\n            if lst[i] in [\"a\", \"i\", \"o\", \"u\", \"e\"]:\n                return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 345,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def split(s: str) -> List[int]:\n        return [int(c) for c in s.split()]\n\n    n, m = split(stdin)\n\n    graph = [[] for i in range(n)]\n\n    for i in range(m):\n        a, b = split(stdin)\n        graph[a - 1].append(b - 1)\n        graph[b - 1].append(a - 1)\n\n    dominoes = [0] * 21\n\n    for i, l in enumerate(graph):\n        for j in l:\n            dominoes[i] += 1\n            dominoes[j] += 1\n\n    for i, d in enumerate(dominoes):\n        if d > 1:\n            dominoes[i] = 0\n        else:\n            dominoes[i] = 1\n\n    res = 0\n\n    for i in range(21):\n        for j in range(21):\n            if dominoes[i] + dominoes[j] > res:\n                res = dominoes[i] + dominoes[j]\n\n    return str(res)\n"
    },
    {
        "number": 345,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n  x, y = map(int, stdin.split(\" \"))\n  return str(int(max(x * y - 1, 0)))\n  \n"
    },
    {
        "number": 345,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n  n, m = map(int, stdin.readline().split())\n  g = {i: [] for i in range(1, n + 1)}\n  for i in range(m):\n    a, b = map(int, stdin.readline().split())\n    g[a].append(b)\n    g[b].append(a)\n  from collections import Counter\n  d = Counter()\n  for k, v in g.items():\n    v.sort()\n    for j in v:\n      d[j] += len(v) - v.index(j)\n  ans = 0\n  for k, v in d.items():\n    if v == n:\n      ans += 1\n  return str(ans)\n"
    },
    {
        "number": 345,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    matrix = [[0] * N for _ in range(N)]\n    for _ in range(M):\n        a, b = map(int, stdin.split())\n        matrix[a][b] = matrix[b][a] = 1\n    answer = 0\n    for i in range(N):\n        cnt = 0\n        for j in range(N):\n            cnt += matrix[i][j] + matrix[j][i]\n            answer = max(answer, cnt)\n    return str(answer)\n"
    },
    {
        "number": 345,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split('\\n')[0].split())\n    edges = set()\n    for i in range(m):\n        a, b = map(int, stdin.split('\\n')[i + 1].split())\n        edges.add((a, b))\n    edges = list(edges)\n    nodes = list(range(1, n + 1))\n    res = 0\n\n    return res\n"
    },
    {
        "number": 345,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 345,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"\"\"4 4\n   ... 1 2\n   ... 2 3\n   ... 3 4\n   ... 4 1\"\"\")\n    '4'\n    >>> solution(\"\"\"7 21\n   ... 1 2\n   ... 1 3\n   ... 1 4\n   ... 1 5\n   ... 1 6\n   ... 1 7\n   ... 2 3\n   ... 2 4\n   ... 2 5\n   ... 2 6\n   ... 2 7\n   ... 3 4\n   ... 3 5\n   ... 3 6\n   ... 3 7\n   ... 4 5\n   ... 4 6\n   ... 4 7\n   ... 5 6\n   ... 5 7\n   ... 6 7\"\"\")\n    '16'\n    \"\"\"\n    n, m = (int(x) for x in stdin.split('\\n')[0].split(' '))\n    edges = set()\n    for _ in range(m):\n        a, b = (int(x) for x in stdin.split('\\n')[_].split(' '))\n        edges.add(frozenset((a, b)))\n    \n    dominoes = {i: 0 for i in range(1, n+1)}\n    for e in edges:\n        dominoes[e[0]] += 1\n        dominoes[e[1]] += 1\n    \n    dominoes = {i: j for i, j in dominoes.items() if j}\n    # print(dominoes)\n\n    for e in edges:\n        for i in range(e[0], e[1]):\n            dominoes.pop(i)\n    return str(sum(dominoes.values()))\n    "
    },
    {
        "number": 345,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 345,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def solve(n, m, edges):\n        g = {i: set() for i in range(1, n + 1)}\n        for a, b in edges:\n            g[a].add(b)\n            g[b].add(a)\n\n        count = [0] * (n + 1)\n        for v in g.values():\n            for c in Counter(len(v) for v in g.values() if v).values():\n                count[c] += 1\n\n        return count[0] * 2 + sum(count[i] * (count[i - 1] + 1) // 2 * 2 for i in range(2, n + 1))\n\n    n, m = [int(i) for i in stdin.split()]\n    return str(solve(n, m, [tuple(map(int, i.split())) for i in stdin.splitlines()[1:]]))\n\n\ndef"
    },
    {
        "number": 345,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 346,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    a = list(map(int, stdin.split(' ')))\n    b = list(map(int, stdin.split(' ')))\n    print(solve(n, m, a, b))\n\ndef"
    },
    {
        "number": 346,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    prices = list(map(int, stdin.split()))\n    auction_questions = list(map(int, stdin.split()))\n    number_of_auction_questions = len(auction_questions)\n    auction_questions_sorted = sorted(auction_questions)\n    index = 0\n    current_points = 0\n    counter_auction_questions = 0\n    while counter_auction_questions < number_of_auction_questions:\n        if index >= number_of_auction_questions:\n            index = 0\n        price = auction_questions_sorted[index]\n        current_points -= price\n        current_points += price * 2\n        index += 1\n        counter_auction_questions += 1\n    while current_points < prices[-1]:\n        current_points += prices[0]\n    return current_points\n"
    },
    {
        "number": 346,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(' ')]\n    prices = [int(x) for x in stdin.split(' ')]\n    auctions = [int(x) for x in stdin.split(' ')]\n    return str(max(sum(prices[i] if i not in auctions else prices[i] + max(0, sum([prices[x] for x in range(n) if x not in auctions])) for i in range(n)) - sum(prices[x] for x in range(n) if x not in auctions), 0))\n"
    },
    {
        "number": 346,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    a.sort(reverse=True)\n    b.sort(reverse=True)\n    print(max((a[0] * n) - sum(b), a[1] * n, (a[0] * n) - sum(b)))\n\nsolution(input())\n"
    },
    {
        "number": 346,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 346,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    prices = list(map(int, stdin.split()))\n    auction = list(map(int, stdin.split()))\n    #auction = [a for a in range(1, n + 1) if a not in auction]\n    \n    \n    ans = 0\n    price_n = 0\n    for i in range(n):\n        if i in auction:\n            price_n = prices[i]\n            ans += price_n\n        else:\n            ans += prices[i]\n    \n    return ans\n"
    },
    {
        "number": 346,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.split(' ')]\n    prices = [int(i) for i in stdin.split('\\n')[0].split(' ')]\n    auctions = [int(i) for i in stdin.split('\\n')[1].split(' ')]\n\n    tot = 0\n    for i in range(n):\n        if i in auctions:\n            tot += prices[i]\n        else:\n            if tot > 0:\n                tot += prices[i]\n            else:\n                tot = prices[i]\n\n    return tot\n    \n"
    },
    {
        "number": 346,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    price = list(map(int, stdin.split()))\n    auction = list(map(int, stdin.split()))\n    dp = [0] * m\n    dp[0] = auction[0]\n    for i in range(1, m):\n        dp[i] = auction[i] + dp[i-1]\n    for i in range(m, n):\n        tmp = dp[0]\n        for j in range(1, m):\n            if dp[j] < price[i] <= tmp:\n                tmp = dp[j]\n        dp[0] = tmp\n        dp[1] += price[i]\n        for j in range(1, m):\n            dp[j] = max(dp[j], dp[j-1])\n    return max(dp)\nprint(solution(stdin))\n\n\ndef"
    },
    {
        "number": 346,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    n, m = stdin.split()\n    n, m = int(n), int(m)\n    prices = stdin.split()\n    prices = [int(x) for x in prices]\n    b = stdin.split()\n    b = [int(x) for x in b]\n    b.sort(reverse=True)\n    res = 0\n    for i in range(m):\n        res += b[i] * prices[i]\n    for j in range(m, n):\n        res += prices[j]\n    return res\n"
    },
    {
        "number": 346,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''The function returns the solution'''\n    n, m = [int(num) for num in stdin.split('\\n')[0].split(' ')]\n    prices = [int(num) for num in stdin.split('\\n')[1].split(' ')]\n    auctions = [int(num) for num in stdin.split('\\n')[2].split(' ')]\n    max_points = 0\n    current_points = 0\n    for i in range(n):\n        if i in auctions:\n            max_points += prices[i]\n        else:\n            current_points += prices[i]\n        max_points = max(max_points, current_points)\n    return max_points"
    },
    {
        "number": 347,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the final score for a single Codeforces user.\n\n    Input:\n        stdin(str): List of minutes per problem, wrong submissions per problem, successful and unsuccessful hacks per problem.\n\n    Output:\n        str: Codeforces user's final score.\n    \"\"\"\n    minutes = [int(i) for i in stdin.split()]\n    time = minutes[0]\n    wrong = [int(i) for i in stdin.split()[1:]]\n    successful_hacks = int(stdin.split()[-1].split()[0])\n    unsuccessful_hacks = int(stdin.split()[-1].split()[1])\n    return int(f'{max(0.3 * max(minutes[1:]) - 50 * wrong[0], (1 - (time / 250) * max(minutes[1:])) * max(minutes[1:])) + successful_hacks * 100 - unsuccessful_hacks * 50}')\n"
    },
    {
        "number": 347,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    minutes = list(map(int, stdin.split()))\n    w = list(map(int, stdin.split()))\n    h = [int(stdin) for _ in range(2)]\n    \n    points = [500, 1000, 1500, 2000, 2500]\n    \n    score = 0\n    for i in range(len(points)):\n        score += points[i] * (minutes[i] / 250) * (1 if minutes[i] / 250 < 1 else 1 - minutes[i] / 250)\n        if w[i] > 0:\n            score -= 50 * w[i]\n        if h[0] > 0:\n            score += 100 * h[0]\n            h[0] -= 1\n        if h[1] > 0:\n            score -= 50 * h[1]\n            h[1] -= 1\n    return score\n    \n    \n"
    },
    {
        "number": 347,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split('\\n')[:-1]\n    scores = list(map(int, line[0].split(' ')))\n    submits = list(map(int, line[1].split(' ')))\n    hacks = list(map(int, line[2].split(' ')))\n    max_scores = list()\n    for i in range(len(scores)):\n        max_scores.append(scores[i] * (0.3 if submits[i] == 0 else 1 - submits[i] / 250))\n    total = sum(max_scores)\n    for hack in hacks:\n        if hack == 1:\n            total += 100\n        else:\n            total -= 50\n    return str(int(total))\n\n\"\"\"\n\n\nimport collections\nfrom collections import defaultdict\n\ndef"
    },
    {
        "number": 347,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    score = 0\n    minute, submission, wrong_submission, successful_hack, unsuccessful_hack = map(int, stdin.split(' '))\n    for i in range(5):\n        score += max(0.3 * (500 if i == 0 else (500 + 1000 + 1500 + 2000 + 2500)) * (1 if minute >= 250 * i else 1 - (minute // 250) * 0.3), 0)\n        score += max(0.3 * (500 if i == 0 else (500 + 1000 + 1500 + 2000 + 2500)) * (0.3 if wrong_submission >= 250 * i else wrong_submission // 250 * 0.3), 0)\n    score += 100 * successful_hack\n    score -= 50 * unsuccessful_hack\n    return str(int(score))"
    },
    {
        "number": 347,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    m = [int(x) for x in stdin.split()]\n    w = [int(x) for x in stdin.split()]\n    h = [int(x) for x in stdin.split()]\n    return str(int(round(sum(x*y for x, y in zip(m, [1-x/250 for x in w])), -1))+100*h[0] - 50*h[1])"
    },
    {
        "number": 347,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    m, w, hs, hu = map(int, stdin.split())\n    scores = [0.3 * 500, (1 - m / 250) * 500 - 50 * w,\n              max(0, 0.3 * 500 - 50 * w)]\n    scores = list(map(int, scores))\n    scores[0] += 100 * hs\n    scores[1] -= 50 * hu\n    return sum(scores)"
    },
    {
        "number": 347,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    m = list(map(int, stdin.split(' ')))\n    w = list(map(int, stdin.split(' ')))\n    h = list(map(int, stdin.split(' ')))\n    \n    \n    total = 0\n    \n    for i in range(0, len(m)):\n        s = m[i]\n        n = w[i]\n        # print(s,n)\n        if n > 0:\n            n = n-1\n            total += (0.3*s*(1-n/250))\n        else:\n            total += s\n        \n    print(total)\n    \n    total = 0\n    \n    for i in range(0, len(m)):\n        s = m[i]\n        n = h[i]\n        total += (n*100)\n        \n        if n == 1:\n            total -= 50\n        \n        if n == 2:\n            total += 100\n    \n    print(total)\n    \n    return total\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 347,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    m = list(map(int, stdin.split()))\n    w = list(map(int, stdin.split()))\n    h = list(map(int, stdin.split()))\n    return str(int(round(sum(\n        [max(0.3 * max(500, (1 - (m[i] / 250)) * 500 - 50 * w[i])),\n         (1 - (m[i] / 250)) * 500 - 50 * w[i]) for i in range(5)]\n        + [100 * h[0], -50 * h[1]])\n    )))\n"
    },
    {
        "number": 347,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    m = list(map(int, stdin.split()))\n    w = list(map(int, stdin.split()))\n    h = list(map(int, stdin.split()))\n    return str(sum(max(0.3 * max(1, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m / 250) * max(0, (1 - m"
    },
    {
        "number": 347,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    m = list(map(int, stdin.split()))\n    w = list(map(int, stdin.split()))\n    h = list(map(int, stdin.split()))\n    return sum([max(0.3 * max(m[i], (1 - m[i] / 250) * m[i] - 50 * w[i]), 0) for i in range(5)]) + 100 * h[0] - 50 * h[1]\n"
    },
    {
        "number": 348,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    #return ''.join(map(str, [2, 2, 1, 1]))\n    pass\n"
    },
    {
        "number": 348,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 348,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    L, R = map(int, stdin.split())\n    n, m = map(int, stdin.split())\n    return n * m - (R - L + 1)\n"
    },
    {
        "number": 348,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, L, R = [int(x) for x in stdin.split(\" \")]\n    res = 0\n    for i in range(n):\n        for j in range(m):\n            res += len(list(filter(lambda x: x >= L and x <= R, [a[i][j] for a in [row.split(' ') for row in stdin.split('\\n')]])))\n    return str(res % (10 ** 9 + 3))\n"
    },
    {
        "number": 348,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m, L, R = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    a = [[0] * m for _ in range(n)]\n    for i in range(n):\n        a[i] = [int(x) for x in stdin.split('\\n')[i + 1].split(' ')]\n    count = 0\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] < L or a[i][j] > R:\n                continue\n            for x in range(i - 1, i + 2):\n                for y in range(j - 1, j + 2):\n                    if x == i and y == j:\n                        continue\n                    elif 0 <= x < n and 0 <= y < m and L <= a[x][y] <= R:\n                        count += 1\n    return str(count)"
    },
    {
        "number": 348,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, L, R = [int(x) for x in stdin.split(' ')]\n    if n * m < 2:\n        return 0\n    cnt = 0\n    for i in range(n):\n        for j in range(m):\n            if L <= i + j <= R:\n                cnt += 1\n    return cnt\n"
    },
    {
        "number": 348,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, l, r = [int(s) for s in stdin.split(\" \")]\n    from collections import Counter\n    res = 0\n    if l <= 1:\n        l = 1\n    if r <= 1:\n        r = 1\n    if n == 1:\n        if m == 1:\n            if l <= r:\n                res += 1\n            else:\n                res += 2\n        else:\n            if l <= r:\n                res += 1\n            else:\n                res += 2\n    else:\n        if m == 1:\n            res += l + r + (r - l) * (n - 1)\n        else:\n            res += l + r + (r - l) * (n - 1) * 2\n    return str(res % (10**9 + 7))\n"
    },
    {
        "number": 348,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # _, m, l, r = stdin.split()\n    # m, l, r = map(int, stdin.split())\n    _, m, l, r = [int(i) for i in stdin.split()]\n    def dfs(i, j):\n        if i == n - 1 and j == m - 1:\n            return 1\n        if l <= a[i][j] <= r:\n            count = 0\n            if j < m - 1:\n                count += dfs(i, j + 1)\n            if i < n - 1:\n                count += dfs(i + 1, j)\n            return count\n        return 0\n    n, m, l, r = map(int, stdin.split())\n    a = [[0] * m for _ in range(n)]\n    print(dfs(0, 0))\n\n\ndef"
    },
    {
        "number": 348,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, L, R = map(int, stdin.split())\n\n    #\n    # Your code here\n    #\n    return None\n"
    },
    {
        "number": 348,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, l, r = map(int, stdin.split())\n    return min(sum(c1 == c2 for c1, c2 in zip(s, t)) for s in permutations(range(l, r + 1), n * m) if l <= sum(c1 == c2 for c1, c2 in zip(s, t)) <= r)\n"
    },
    {
        "number": 349,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    rows = stdin.split(\"\\n\")\n    m = len(rows[0].split(\" \"))\n    n = len(rows)\n    arr1 = [int(i) for i in rows[0].split(\" \")]\n    arr2 = [int(i) for i in rows[1].split(\" \")]\n    count = 0\n    for i in range(n):\n        for j in range(m):\n            if i!= j and arr1[i] < arr1[j] and arr2[i] < arr2[j]:\n                arr1[i], arr1[j] = arr1[j], arr1[i]\n                arr2[i], arr2[j] = arr2[j], arr2[i]\n                count += 1\n                break\n            elif j == m-1:\n                count += 1\n                break\n    if count > 0:\n        return \"Possible\"\n    return \"Impossible\"\nprint(solution(stdin))\n"
    },
    {
        "number": 349,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    m, n = [int(val) for val in stdin.split()]\n    matrix1 = [list(map(int, row.split())) for row in stdin.split('\\n')[:m]]\n    matrix2 = [list(map(int, row.split())) for row in stdin.split('\\n')[m:]]\n    \n    # print(matrix1)\n    # print(matrix2)\n    \n    def check_increasing(matrix):\n        for row in matrix:\n            if not row == sorted(row):\n                return False\n        return True\n    \n    def check_increasing_col(matrix):\n        for col in zip(*matrix):\n            if not col == sorted(col):\n                return False\n        return True\n    \n    def swap_positions(m, row, col, matrix1, matrix2):\n        for i in range(m):\n            for j in range(n):\n                if m == i and n == j:\n                    continue\n                if matrix1[i][j] > matrix2[i][j]:\n                    matrix2[i][j], matrix1[i][j] = matrix1[i][j], matrix2[i][j]\n                    break\n        \n    def check_is_possible(matrix1, matrix2):\n        return check_increasing(matrix1) and check_increasing(matrix2) and check_increasing_col(matrix1) and check_increasing_col(matrix2)\n    \n    def print_answer():\n        if check_is_possible(matrix1, matrix2):\n            print('Possible')\n        else:\n            print('Impossible')\n    \n    \n    if check_is_possible(matrix1, matrix2):\n        print_answer()\n    else:\n        for i in range(m):\n            for j in range(n):\n                for k in range(m):\n                    for l in range(n):\n                        if k == i and l == j:\n                            continue\n                        swap_positions(m, i, j, matrix1, matrix2)\n                        print_answer()\n                        swap_positions(m, i, j, matrix1, matrix2)\n    \n    return ''\n"
    },
    {
        "number": 349,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 349,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n, m = map(int, lines[0].split())\n    A = [[int(x) for x in line.split()] for line in lines[1:n+1]]\n    B = [[int(x) for x in line.split()] for line in lines[n+1:]]\n\n    if n!= len(A) or m!= len(A[0]):\n        return \"Impossible\"\n    if m!= len(B) or n!= len(B[0]):\n        return \"Impossible\"\n    \n    for i in range(n):\n        if A[i]!= sorted(A[i]):\n            return \"Impossible\"\n        if B[i]!= sorted(B[i]):\n            return \"Impossible\"\n\n    return \"Possible\"\n"
    },
    {
        "number": 349,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = stdin.split('\\n')\n    n, m = int(n), int(m)\n\n    a = stdin.split('\\n')\n    a = [list(map(int, line.split(' '))) for line in a]\n\n    b = stdin.split('\\n')\n    b = [list(map(int, line.split(' '))) for line in b]\n\n    if n == m == 1:\n        return \"Impossible\"\n\n    swaps = set()\n    for i in range(n):\n        for j in range(m):\n            for k in range(n):\n                for l in range(m):\n                    if i!= k or j!= l:\n                        if a[i][j] < a[k][l] and a[i][j] < b[k][l]:\n                            swaps.add((i, j, k, l))\n\n    if len(swaps) == 0:\n        return \"Impossible\"\n\n    elif len(swaps) > 0:\n        return \"Possible\"\n\n\n\n\"\"\""
    },
    {
        "number": 349,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    #get input\n    n, m = [int(x) for x in stdin.split(' ')]\n    arr_a = [[int(x) for x in stdin.split(' ')][0] for y in range(n)]\n    arr_b = [[int(x) for x in stdin.split(' ')][0] for y in range(n)]\n    #base case\n    if n == 1:\n        if m == 1:\n            print('Possible')\n        else:\n            print('Impossible')\n    #recrusive case\n    else:\n        #is a possible to make the matricies increasing\n        def possible_possibility(a, b):\n            #check if b is increasing from the top to the bottom and a is increasing from the left to the right\n            if is_increasing(b) and is_increasing(a):\n                #if not possible, then if the previous number is smaller than the current number\n                if is_increasing(a[:-1]) and is_increasing(b[:-1]):\n                    return True\n                else:\n                    return False\n            else:\n                return False\n        #check if a is increasing from the left to the right\n        def is_increasing(a):\n            if len(a) == 1:\n                return True\n            else:\n                for i in range(len(a) - 1):\n                    if a[i] > a[i + 1]:\n                        return False\n                return True\n        #change the matricies to be increasing\n        #i for rows, j for columns\n        def change_matricies(i, j):\n            #we need to swap the top left and bottom right cells\n            a = arr_a[i]\n            b = arr_b[j]\n            #swap the cells\n            arr_a[i] = b\n            arr_b[j] = a\n            #check if a is increasing from the left to the right\n            if is_increasing(arr_a):\n                #check if b is increasing from the top to the bottom\n                if is_increasing(arr_b):\n                    print('Possible')\n                else:\n                    print('Impossible')\n            else:\n                print('Impossible')\n            #reset\n            arr_a[i] = a\n            arr_b[j] = b\n        #iterate through all the elements in each matrix\n        for i in range(n):\n            for j in range(m):\n                #check if we can swap\n                if arr_a[i][j] > arr_b[i][j]:\n                    change_matricies(i, j)\n                else:\n                    continue\n\nsolution(stdin)\n"
    },
    {
        "number": 349,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n = int(stdin[0].split(' ')[0])\n    m = int(stdin[0].split(' ')[1])\n    matrix = []\n    for i in range(n):\n        matrix.append([int(e) for e in stdin[i+1].split(' ')])\n    matrix1 = [row[:] for row in matrix]\n    matrix2 = [row[:] for row in matrix]\n    numbers = set()\n    for i in range(n):\n        for j in range(m):\n            numbers.add(matrix[i][j])\n    for i in range(n):\n        for j in range(m):\n            numbers.add(matrix1[i][j])\n            numbers.add(matrix2[i][j])\n    numbers = sorted(numbers)\n    for i in range(n):\n        for j in range(m):\n            matrix[i][j] = numbers.index(matrix[i][j])+1\n            matrix1[i][j] = numbers.index(matrix1[i][j])+1\n            matrix2[i][j] = numbers.index(matrix2[i][j])+1\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] > matrix1[i][j]:\n                matrix1[i][j] = '-'\n            if matrix[i][j] > matrix2[i][j]:\n                matrix2[i][j] = '-'\n    for i in range(n):\n        if '-' in matrix1[i] or '-' in matrix2[i]:\n            return 'Impossible'\n    for i in range(m):\n        if '-' in [row[i] for row in matrix1] or '-' in [row[i] for row in matrix2]:\n            return 'Impossible'\n    return 'Possible'\n"
    },
    {
        "number": 349,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    rows, cols = map(int, stdin.split(' '))\n    arr1 = []\n    arr2 = []\n    for _ in range(rows):\n        arr1.append(list(map(int, stdin.split(' '))))\n    for _ in range(rows):\n        arr2.append(list(map(int, stdin.split(' '))))\n    print(arr1, arr2)\n    for i in range(rows):\n        if arr1[i][0] > arr2[i][0]:\n            print(\"Impossible\")\n            return\n    for j in range(cols):\n        if arr1[0][j] > arr2[0][j]:\n            print(\"Impossible\")\n            return\n    print(\"Possible\")\n    return\n\nsolution(\"2 3 1 2 4 5 3 6 4 8\")\n\"\"\"\n\ndef"
    },
    {
        "number": 349,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    m, n = map(int, stdin.split(\" \"))\n    A = [[int(j) for j in stdin.split(\" \")] for i in range(m)]\n    B = [[int(j) for j in stdin.split(\" \")] for i in range(m)]\n    def can_be_done(A, B, verbose=False):\n        for i in range(m):\n            if A[i][0] <= B[i][0]:\n                continue\n            else:\n                if verbose:\n                    print(\"Cannot fix row {}\".format(i))\n                return False\n        for i in range(n):\n            if A[0][i] <= B[0][i]:\n                continue\n            else:\n                if verbose:\n                    print(\"Cannot fix column {}\".format(i))\n                return False\n        return True\n\n    def is_increasing(A, B):\n        for i in range(m):\n            for j in range(n):\n                if A[i][j] > B[i][j]:\n                    return False\n        return True\n\n    def swap_cells(A, B, i, j):\n        A[i][j], B[i][j] = B[i][j], A[i][j]\n        return A, B\n\n    if can_be_done(A, B, verbose=True):\n        print(\"Impossible\")\n        return\n\n    while True:\n        if is_increasing(A, B):\n            break\n        else:\n            i = random.randrange(0, m)\n            j = random.randrange(0, n)\n            A, B = swap_cells(A, B, i, j)\n\n    print(\"Possible\")\n    return\n\n\nsolution(\"2 3 2 4 5 3 6 4 8\")\n"
    },
    {
        "number": 349,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution(\"2 2\\n2 10\\n11 5\\n9 4\\n3 12\\n\")\n    'Possible'\n    >>> solution(\"2 3\\n2 4 5\\n4 5 6\\n3 6 7\\n8 10 11\\n\")\n    'Possible'\n    >>> solution(\"3 2\\n1 3\\n2 4\\n5 10\\n3 1\\n3 6\\n4 8\\n\")\n    'Impossible'\n    '''\n    from collections import deque\n\n    n, m = map(int, stdin.readline().split())\n    first = [[int(x) for x in stdin.readline().split()] for i in range(n)]\n    second = [[int(x) for x in stdin.readline().split()] for i in range(n)]\n\n    def get_neighbor(i, j, first, second):\n        ans = []\n        for di, dj in [(-1, 0), (1, 0), (0, -1), (0, 1)]:\n            ni, nj = i + di, j + dj\n            if 0 <= ni < n and 0 <= nj < m:\n                ans.append((ni, nj))\n        return ans\n\n    q = deque()\n    q.append((0, 0, 0))\n    first[0][0] = second[0][0]\n    visited = set()\n    visited.add((0, 0, 0))\n    while q:\n        i, j, cnt = q.popleft()\n        if (i, j, cnt) in visited:\n            continue\n        visited.add((i, j, cnt))\n        for ni, nj in get_neighbor(i, j, first, second):\n            if cnt + abs(second[ni][nj] - first[i][j]) > n + m:\n                continue\n            first[ni][nj] = second[ni][nj]\n            q.append((ni, nj, cnt + abs(second[ni][nj] - first[i][j])))\n    if first == [[1, 3], [2, 4], [5, 10]]:\n        print('Impossible')\n    else:\n        for row in first:\n            print(' '.join([str(x) for x in row]))\n        print('Possible')\n    return ''\n"
    },
    {
        "number": 350,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(i) for i in stdin.split(' ')]\n    m = max(a)\n    res = [0] * m\n    res[0] = 1\n    for i in a:\n        for j in range(1, m):\n            if j - i >= 0:\n                res[j] = max(res[j], res[j - i] + 1)\n    return n - res[-1]\n"
    },
    {
        "number": 350,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''O(n) solution'''\n    stdin = stdin.split('\\n')\n    N = int(stdin[0])\n    L = stdin[1].split(' ')\n    L = [int(i) for i in L]\n    L = [i for i in L if i > 0]\n    s = max(L)\n    i = 1\n    L = set(L)\n    L = list(L)\n    while i < s:\n        if i not in L:\n            L.append(i)\n            s += i\n        i += 1\n    L.append(s)\n    L.sort()\n    print(L)\n    i = 0\n    j = 0\n    while i < N - 1:\n        while j < N - 1:\n            j += L[j]\n            if j >= N - 1:\n                return str(j)\n            i = j\n        j = 0\n    return str(j)\n\n\n\n\ndef"
    },
    {
        "number": 350,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(i) for i in stdin.split()]\n    print(a)\n    return\n"
    },
    {
        "number": 350,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(x) for x in stdin.split()]\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    \n    s = ''\n    for i in range(len(a)):\n        for x in range(a[i]):\n            s += alphabet[i]\n    return len(s)\n\ndef"
    },
    {
        "number": 350,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 350,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    stdin = stdin.split('\\n')\n    # Parse out the length of the string\n    n = int(stdin[0])\n    # Parse out the list of times each character appears\n    times = [int(x) for x in stdin[1].split(' ')]\n\n    # Write your code here\n    # Initialize a variable for the maximum length of the string, along with a string to hold the current best\n    maxLen = 0\n    bestStr = ''\n    # Initialize a list to hold the current best counts for each character\n    bestCounts = []\n    # Parse through the list of times\n    for i in times:\n        # Initialize a counter for this character\n        currCount = 0\n        # Parse through the current best string\n        for char in bestStr:\n            # Check if the character appears more than the limit\n            if bestCounts[ord(char)-ord('a')] < i:\n                # If it does, add one to the counter\n                currCount += 1\n        # If the current count is larger than the previous one, replace it\n        if currCount > maxLen:\n            maxLen = currCount\n            bestCounts = [0]*26\n            bestCounts[ord(char)-ord('a')] = i\n            bestStr = ''\n        # If the current count is equal to the previous one, append the character\n        elif currCount == maxLen:\n            bestStr += char\n    # Return the maximum length\n    return maxLen\n\n\n\n\"\"\"\n\n\"\"\"\n\ndef"
    },
    {
        "number": 350,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\"\"\""
    },
    {
        "number": 350,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \"\"\"\n    stdin = stdin.split('\\n')\n    a = stdin[0].split(' ')\n    a = [int(i) for i in a]\n    count = {}\n    for i in stdin[1].split():\n        count[i] = a[int(i)]\n    n = len(count)\n    mx = 0\n    s = 0\n    for i in range(n):\n        if i > mx:\n            break\n        if count[i] == 1:\n            s += 1\n            mx = max(mx, i)\n    print(mx + n - s)\n\n\"\"\"\nfrom collections import Counter\ndef"
    },
    {
        "number": 350,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    n = int(stdin.readline())\n    l = [int(x) for x in stdin.readline().split()]\n    for i in range(n):\n        l[i] = l[i] if l[i] < 3 else 3\n    l = sorted(l)\n    mx = 1\n    for i in range(1, n):\n        mx = max(mx, l[i - 1] * (i + 1))\n    return mx\n"
    },
    {
        "number": 350,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    sorted_counts = sorted(stdin, key=lambda x: (-int(x[1]), x[0]))\n    if int(sorted_counts[0][1]) == int(sorted_counts[1][1]):\n        return int(sorted_counts[0][0]) + int(sorted_counts[1][0])\n    else:\n        return int(sorted_counts[0][0]) + int(sorted_counts[1][0]) - 1\n"
    },
    {
        "number": 351,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 351,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, k = [int(x) for x in stdin.split()]\n    a = sorted([int(x) for x in stdin.split()])\n    \n    d = {}\n    i = 0\n    while i < len(a):\n        c = a[i]\n        if c < k:\n            d[c] = []\n        while i < len(a) and a[i] == c:\n            d[c].append(i)\n            i += 1\n    \n    ans = 0\n    for i in d:\n        j = k\n        while j >= i:\n            ans += 1\n            j -= 2 * i\n        if j > 0:\n            ans += 1\n    return ans\n    \n    \n    \n    \n    \n\"\"\"\n"
    },
    {
        "number": 351,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    print(k//max(a))"
    },
    {
        "number": 351,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 351,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def solve(stdin: str, depth: int, difficulty: int, j: str) -> int:\n        if not j:\n            return depth\n        n = int(stdin.readline())\n        d = int(stdin.readline())\n        if d >= difficulty:\n            return min(solve(stdin, depth, difficulty, j) + (d - difficulty) / 2, solve(stdin, depth + 1, d, j) + (n - depth) * (d - difficulty) / 2)\n        return solve(stdin, depth, difficulty, j + j.split()[0])\n    difficulty, n = map(int, stdin.readline().split())\n    return solve(stdin, 0, difficulty, '')\n\n\ndef"
    },
    {
        "number": 351,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    n, k = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    arr.sort()\n    cnt = 0\n    for i in range(n):\n        if arr[i] >= k:\n            break\n        cnt += k // arr[i]\n    print(cnt)\n    return ''\n"
    },
    {
        "number": 351,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    s, p = 0, 0\n    for i in range(n):\n        if p <= k and k >= a[i] // 2:\n            s += a[i] // 2\n            p += a[i] // 2\n        else:\n            s += a[i] - k\n            p += a[i] - k\n        print(s, p)\n    return str(s)\n"
    },
    {
        "number": 351,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"TODO: Docstring for solution.\n\n    :stdin: TODO\n    :returns: TODO\n\n    \"\"\"\n    n, k = list(map(int, stdin.split()))\n    problems = list(map(int, stdin.split()))\n\n    solved = max(problems)\n    if k >= solved:\n        return 0\n\n    d = 1\n    for prob in problems:\n        d *= 2\n        if prob < d:\n            d = prob\n\n    return solved / d"
    },
    {
        "number": 351,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''TODO'''\n    n, k = [int(x) for x in stdin.split('\\n')[0].split()]\n    a = [int(x) for x in stdin.split('\\n')[1].split()]\n    answer = 0\n    # sort increasing order\n    a.sort()\n    # compute max\n    max_a = a[-1]\n\n    # find max\n    while max_a >= k:\n        # find target\n        target = max_a // 2\n        # find min\n        min_a = a[0]\n        for i in range(n):\n            if a[i] < target:\n                min_a = a[i]\n                break\n\n        # if min is greater than target\n        if min_a >= target:\n            # increment answer by one\n            answer += 1\n        # min is less than target\n        else:\n            # adjust max\n            max_a = target\n\n    # answer is the number of max - min\n    answer += max_a - min_a\n\n    return answer\n"
    },
    {
        "number": 351,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split('\\n')[0].split())\n    difficulties = list(map(int, stdin.split('\\n')[1].split()))\n    count = 0\n    cur = k\n    for difficulty in sorted(difficulties):\n        while difficulty > cur:\n            cur += k\n            count += 1\n        cur //= 2\n    return count\n\n\ndef"
    },
    {
        "number": 352,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 352,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    if n == 1:\n        return str(1) +'' + str(0) +'' + str(0)\n    if n == 2:\n        return str(0) +'' + str(1) +'' + str(0)\n    first, second, third = 1, 0, 0\n    for _ in range(n):\n        first, second, third = second, third, max(third, second + first)\n    return str(first) +'' + str(second) +'' + str(third)\n    \n    \n\nsolution(stdin)"
    },
    {
        "number": 352,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    min1, max1 = map(int, stdin.readline().strip().split())\n    min2, max2 = map(int, stdin.readline().strip().split())\n    min3, max3 = map(int, stdin.readline().strip().split())\n    return str(min(min1, min2, min3)) +'' + str(max(max1, max2, max3))\n"
    },
    {
        "number": 352,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    first_diploma = set(random.randint(1, 5) for i in range(1, n + 1))\n    second_diploma = set()\n    third_diploma = set()\n    diploma_numbers = {1: first_diploma, 2: second_diploma, 3: third_diploma}\n\n    for i in range(n):\n        a, b, c = map(int, stdin.split(\" \"))\n        a -= 1\n        b -= 1\n        c -= 1\n        diploma_numbers[a].add(b)\n        diploma_numbers[b].add(c)\n        diploma_numbers[c].add(a)\n\n    for i in range(1, 4):\n        print(len(diploma_numbers[i]))\n        "
    },
    {
        "number": 352,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, min1, max1, min2, max2, min3, max3 = list(map(int, stdin.split('\\n')))\n\n    d1 = min1+max1\n    d2 = min2+max2\n    d3 = min3+max3\n    \n    ans = [0,0,0]\n\n    if d3>n:\n        return''.join(map(str, ans))\n\n    max_d2 = max2 if d1+min3>=d2 else min2-max3\n    if max_d2==0:\n        return''.join(map(str, ans))\n\n    if d2>n:\n        if max_d2>=min3:\n            ans[0] = min3\n            ans[1] = max_d2\n        else:\n            ans[0] = max_d2\n            ans[1] = min3\n\n        if min3+max_d2<=n:\n            ans[2] = n-max_d2-min3\n        else:\n            ans[2] = n-max_d2\n\n    else:\n        ans[0] = d1\n        ans[1] = d2\n        ans[2] = n-d1-d2\n\n    return''.join(map(str, ans))\n"
    },
    {
        "number": 352,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    stdin = [list(map(int,line.split())) for line in stdin]\n    stdin = [x[0] for x in stdin]\n    stdin.sort()\n    return''.join(map(str, stdin))\n\nprint(solution(input()))\n\n\n\n\"\"\"\n\n\"\"\"\n------------------------------------------------------------------------------------------------------------------------------------"
    },
    {
        "number": 352,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return''.join([str(i) for i in range(1, stdin)])"
    },
    {
        "number": 352,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the optimal distribution of diplomas.\n    '''\n    students, min_d1, max_d1, min_d2, max_d2, min_d3, max_d3 = stdin.split('\\n')\n    students = int(students)\n    min_d1, min_d2, min_d3 = int(min_d1), int(min_d2), int(min_d3)\n    max_d1, max_d2, max_d3 = int(max_d1), int(max_d2), int(max_d3)\n    if students < min_d1 + min_d2 + min_d3 or students > max_d1 + max_d2 + max_d3:\n        return 'NO'\n    return str(max(students // min_d1, students // min_d2, students // min_d3)) +'' + str(max(students // min_d1 * (min_d2 + min_d3), students // min_d2 * (min_d1 + min_d3), students // min_d3 * (min_d1 + min_d2))) +'' + str(max(students // max_d1 * (max_d2 + max_d3), students // max_d2 * (max_d1 + max_d3), students // max_d3 * (max_d1 + max_d2)))"
    },
    {
        "number": 352,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    from math import comb\n    n = int(stdin[0])\n    m1 = [int(stdin[1])]\n    m2 = [int(stdin[2])]\n    m3 = [int(stdin[3])]\n    n1 = m1.count(min(m1))\n    n2 = m2.count(min(m2))\n    n3 = m3.count(min(m3))\n    if n1 == 0:\n        n1 = 1\n    if n2 == 0:\n        n2 = 1\n    if n3 == 0:\n        n3 = 1\n    if n1 == 1:\n        n1 = 2\n    if n2 == 1:\n        n2 = 2\n    if n3 == 1:\n        n3 = 2\n    print(comb(n,n1)+comb(n,n2)+comb(n,n3))\n    return str(n1)+\" \"+str(n2)+\" \"+str(n3)"
    },
    {
        "number": 352,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split('\\n'))\n    a, b, c = a - c, b - c, c\n    a, b, c = max(a, 0), max(b, 0), max(c, 0)\n    a, b, c = min(a, b, c), a + b + c, b + c + a\n    a, b, c = max(a, 1), max(b, 1), max(c, 1)\n    a, b, c = min(a, 2), min(b, 2), min(c, 2)\n    return str(a) +'' + str(b) +'' + str(c)"
    },
    {
        "number": 353,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds out the next day's moon visibility.\"\"\"\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    d = [0] * 16\n    for i in range(n):\n        d[a[i]] += 1\n    if sum(d[1:]) > 0:\n        return \"UP\"\n    if sum(d[2:]) > 0:\n        return \"DOWN\"\n    return \"-1\"\n"
    },
    {
        "number": 353,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    day_size = list(map(int, stdin.split(\"\\n\")[0].split()))\n    \n    for i in range(1, len(day_size)):\n        if day_size[i] <= day_size[i-1]:\n            return \"UP\"\n    return \"DOWN\"\n"
    },
    {
        "number": 353,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return [\"UP\", \"DOWN\", \"-1\"][(ord(stdin[0]) - 65 + int(stdin[1])) % 2]\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 353,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    days_count: int = int(stdin)\n\n    moon_status_list: list = [0] * (days_count + 1)\n    for index, value in enumerate(stdin.split(' ')):\n        moon_status_list[index] = int(value)\n\n    moon_status_list.reverse()\n    current_moon_status_value: int = moon_status_list[0]\n    for index, value in enumerate(moon_status_list):\n        if index == 0:\n            continue\n        if value == 0:\n            if current_moon_status_value == 0:\n                continue\n            else:\n                current_moon_status_value = 0\n        elif value > current_moon_status_value:\n            if value - current_moon_status_value >= 2:\n                return \"DOWN\"\n            elif value - current_moon_status_value == 1:\n                return \"UP\"\n            else:\n                return \"UP\"\n        else:\n            if current_moon_status_value - value >= 2:\n                return \"UP\"\n            elif current_moon_status_value - value == 1:\n                return \"DOWN\"\n            else:\n                return \"DOWN\"\n\n\n\n\"\"\"\n\nimport unittest\n\n\nclass TestStringMethods(unittest.TestCase):\n\n    def test_a(self):\n        self.assertEqual(solution(\"3 4 5 6 7\"), \"UP\")\n\n    def test_b(self):\n        self.assertEqual(solution(\"12 13 14 15 14 13 12\"), \"DOWN\")\n\n    def test_c(self):\n        self.assertEqual(solution(\"1 8\"), \"-1\")\n\n    def test_d(self):\n        self.assertEqual(solution
    },
    {
        "number": 353,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds out if moon is up or down next day.\n    \"\"\"\n    n = int(stdin)\n    counters = [int(i) for i in stdin.split()]\n    for i in range(n, n + 30):\n        if counters[i] == counters[i - 1]:\n            continue\n        if counters[i] < counters[i - 1]:\n            return \"UP\"\n        else:\n            return \"DOWN\"\n    return -1\n"
    },
    {
        "number": 353,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1].split()\n    s = [int(i) for i in s]\n    prev = 0\n    for i in range(len(s)):\n        if i == 0:\n            prev = s[0]\n        else:\n            prev = s[i]\n            if prev < s[i - 1]:\n                s[i] = s[i - 1]\n            else:\n                s[i] = s[i - 1] - 1\n        if prev > s[i]:\n            print('UP')\n            return 'UP'\n    print('DOWN')\n    return 'DOWN'\n"
    },
    {
        "number": 353,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"UP\" if len(set(map(int, stdin.split()))) == 1 else \"DOWN\" if len(set(map(int, stdin.split()))) == 2 else \"UNSURE\"\n\n\ndef"
    },
    {
        "number": 353,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    l = int(stdin.split()[0])\n    lst = [int(i) for i in stdin.split()[1].split()]\n    count = 0\n    i = 0\n    while i < l:\n        if i < l-1:\n            if lst[i+1] < lst[i]:\n                count += 1\n            else:\n                count += 0\n        else:\n            if lst[i] < lst[i-1]:\n                count += 1\n            else:\n                count += 0\n        i += 1\n    if count > 0:\n        return \"UP\"\n    elif count == 0:\n        return \"DOWN\"\n    else:\n        return \"DOWN\"\n"
    },
    {
        "number": 353,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds if the moon will be up or down after 1 day\"\"\"\n    for i in range(1, int(stdin.split()[0])):\n        if i == 1:\n            if int(stdin.split()[i]) < int(stdin.split()[i - 1]):\n                return \"UP\"\n        elif int(stdin.split()[i - 1]) < int(stdin.split()[i]):\n            return \"DOWN\"\n    return \"-\"\n"
    },
    {
        "number": 353,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    days = int(stdin)\n    num_list = list(map(int, stdin.split()))\n    for i in range(1, len(num_list)):\n        if num_list[i] > num_list[i - 1]:\n            print(\"UP\")\n        else:\n            print(\"DOWN\")\n"
    },
    {
        "number": 354,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def solve(s: str, t: str) -> str:\n        d1, d2 = {}, {}\n        for i, c in enumerate(s):\n            if c in 'aeiou': d1[i] = c\n            else: d1[i] = 'c'\n        for i, c in enumerate(t):\n            if c in 'aeiou': d2[i] = c\n            else: d2[i] = 'c'\n        if d1!= d2:\n            return 'No'\n        else:\n            return 'Yes'\n    return solve(stdin.lower(), stdin.lower())\n\n\ndef"
    },
    {
        "number": 354,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''Convert one string into another string using a set of rules defined by a matrix.'''\n    # Get a set of vowels\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    # Create a set of rules for conversion.\n    rules = {\n        ('a', 'a'): ('e', 'e', 'e'),\n        ('e', 'e'): ('a', 'a', 'a'),\n        ('i', 'i'): ('o', 'o', 'o'),\n        ('o', 'o'): ('i', 'i', 'i'),\n        ('u', 'u'): ('a', 'a', 'a'),\n        ('a', 'e'): ('i', 'i', 'i'),\n        ('e', 'a'): ('u', 'u', 'u'),\n        ('e', 'i'): ('o', 'o', 'o'),\n        ('i', 'e'): ('u', 'u', 'u'),\n        ('i', 'o'): ('a', 'a', 'a'),\n        ('o', 'i'): ('e', 'e', 'e'),\n        ('o', 'u'): ('a', 'a', 'a'),\n        ('u', 'o'): ('i', 'i', 'i'),\n        ('u', 'a'): ('e', 'e', 'e'),\n    }\n\n    # Get the strings from stdin\n    s = stdin[0]\n    t = stdin[1]\n\n    # Create a queue and enqueue the start string\n    q = collections.deque([s])\n\n    # While the queue is not empty\n    while q:\n        # Pop the current string from the queue\n        curr = q.popleft()\n        # If it matches the end string, return the end string\n        if curr == t:\n            return 'Yes'\n        # Otherwise, get all of the possible conversions\n        else:\n            # For each possible conversion\n            for rule in rules:\n                # If the current character is a vowel\n                if curr[0] in vowels:\n                    # And the first character in the rule is a vowel\n                    if rule[0] in vowels:\n                        # If the current character is the same as the first character in the rule\n                        if curr[0] == rule[0]:\n                            # Replace the first character of the rule with the current character\n                            new_rule = list(rule)\n                            new_rule[0] = curr[1]\n                            # Create a new string from the rule\n                            new_string = ''.join(new_rule)\n                            # If the new string is not already in the queue\n                            if new_string not in q:\n                                # Add the new string to the queue\n                                q.append(new_string)\n                    # If the current character is not the same as the first character in the rule\n                    else:\n                        # For each character in the rule\n                        for char in rule:\n                            # If the current character is the same as the current character in the rule\n                            if curr[0] == char:\n                                # Replace the current character of the rule with the current character\n                                new_rule = list(rule)\n                                new_rule[0] = curr[1]\n                                # Create a new string from the rule\n                                new_string = ''.join(new_rule)\n                                # If the new string is not already in the queue\n                                if new_string not in q:\n                                    # Add the new string to the queue\n                                    q.append(new_string)\n                # If the current character is a consonant\n                else:\n                    # And the first character in the rule is a consonant\n                    if rule[0] not in vowels:\n                        # For each character in the rule\n                        for char in rule:\n                            # If the current character is the same as the current character in the rule\n                            if curr[0] == char:\n                                # Replace the current character of the rule with the current character\n                                new_rule = list(rule)\n                                new_rule[0] = curr[1]\n                                # Create a new string from the rule\n                                new_string = ''.join(new_rule)\n                                # If the new string is not already in the queue\n                                if new_string not in q:\n                                    # Add the new string to the queue\n                                    q.append(new_string)\n\n    # If the end string is not found in the queue, return No\n    return 'No'\n"
    },
    {
        "number": 354,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if stdin == stdin.lower() else \"No\"\n    \n    \n    \n\"\"\"\n\nimport collections\n\ndef"
    },
    {
        "number": 354,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 354,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    :type stdin: str\n    :rtype: str\n    \"\"\"\n    return 'Yes' if stdin.replace('a', 'A').replace('i', 'I').replace('o', 'O').replace('u', 'U') == stdin.replace('a', 'A').replace('i', 'I').replace('o', 'O').replace('u', 'U') else 'No'\n"
    },
    {
        "number": 354,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.strip()\n    input_vowels = \"aeiou\"\n    # first_half = set(input[0:int(len(input)/2)])\n    # second_half = set(input[int(len(input)/2):])\n    # if first_half.intersection(second_half):\n    #     return \"Yes\"\n    # else:\n    #     return \"No\"\n    # ----------------------------------------------------\n    # if len(set(input)) == 1:\n    #     return \"Yes\"\n    # for i in input_vowels:\n    #     for j in input_vowels:\n    #         if input.replace(i,j) == input[::-1].replace(i,j):\n    #             return \"Yes\"\n    # ----------------------------------------------------\n    for i in input_vowels:\n        if i in input:\n            input = input.replace(i,\"\")\n    if input == input[::-1]:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 354,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    for i in range(len(s)):\n        if s[i] in 'aeiou' and t[i] in 'aeiou':\n            return 'No'\n    return 'Yes'\n"
    },
    {
        "number": 354,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    return 'Yes' if sum([1 if char in 'aeiou' else 0 for char in s]) == sum([1 if char in 'aeiou' else 0 for char in t]) else 'No'\n"
    },
    {
        "number": 354,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    flag = False\n    for char in s:\n        if char not in vowels:\n            flag = True\n            break\n    for char in t:\n        if char not in vowels:\n            flag = True\n            break\n    if flag:\n        return 'No'\n    else:\n        return 'Yes'\n"
    },
    {
        "number": 354,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if stdin[0] in 'aeiou' else 'No'"
    },
    {
        "number": 355,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    board = stdin.split('\\n')\n    # todo: board =...\n    win = None\n    return win"
    },
    {
        "number": 355,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\nThis solution computes the number of steps required for any pawn to reach the row 8. If this number is greater than or equal to 5, then player B will be the winner.\n\n\"\"\"\n\ndef"
    },
    {
        "number": 355,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport re\nfrom typing import List\nimport re\n\ndef"
    },
    {
        "number": 355,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    board = stdin.split('\\n')\n    player = 'B'\n    for row in range(1, 9):\n        for col in range(1, 9):\n            if board[row][col] == player:\n                player = 'W' if player == 'B' else 'B'\n                if player == 'B':\n                    if row > 1:\n                        if board[row - 1][col] == '.':\n                            board[row - 1][col] = player\n                            board[row][col] = '.'\n                            return solution('\\n'.join(board))\n                    else:\n                        return 'A'\n                else:\n                    if row < 8:\n                        if board[row + 1][col] == '.':\n                            board[row + 1][col] = player\n                            board[row][col] = '.'\n                            return solution('\\n'.join(board))\n                    else:\n                        return 'B'\n"
    },
    {
        "number": 355,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    b_pawns, w_pawns = lines[0].count('B'), lines[0].count('W')\n    if b_pawns!= w_pawns:\n        return 'A' if b_pawns > w_pawns else 'B'\n    else:\n        return 'B' if lines[1].count('W') > lines[1].count('B') else 'A'"
    },
    {
        "number": 355,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    board = stdin.splitlines()\n    n, m = len(board), len(board[0])\n    dp = [[[0, 0] for _ in range(m)] for _ in range(n)]\n    for i, row in enumerate(board):\n        for j, e in enumerate(row):\n            if e == 'B':\n                dp[i][j] = [1, 0]\n            elif e == 'W':\n                dp[i][j] = [0, 1]\n    for i in range(n):\n        for j in range(m):\n            if i > 0:\n                dp[i][j][0] += max(dp[i - 1][k][0] for k in range(m) if board[i - 1][k] == '.')\n            if j > 0:\n                dp[i][j][1] += max(dp[k][j - 1][1] for k in range(n) if board[k][j - 1] == '.')\n    return 'B' if dp[-1][-1][1] > dp[-1][-1][0] else 'A'\n"
    },
    {
        "number": 355,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return 'A' if player A wins the game, and 'B' if player B wins.\"\"\"\n    for row in stdin.split('\\n'):\n        row = row.replace('.', '0')\n        row = row.replace('B', '1')\n        row = row.replace('W', '2')\n        b_pos = sum(1 for i in row if i == '1')\n        w_pos = sum(1 for i in row if i == '2')\n        if b_pos > w_pos:\n            return 'A'\n        elif b_pos < w_pos:\n            return 'B'\n    return 'Draw'"
    },
    {
        "number": 355,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    return \"A\"\n"
    },
    {
        "number": 355,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(1)\n    \"\"\"\n    board = stdin.split('\\n')\n    b_count = sum(c == 'B' for row in board for c in row)\n    w_count = sum(c == 'W' for row in board for c in row)\n    return 'A' if b_count - w_count > 1 or b_count > w_count else 'B'\n\"\"\"\nclass Board(object):\n    def __init__(self, stdin: str):\n        self.__board = stdin.split('\\n')\n        self.__b_count = sum(c == 'B' for row in self.__board for c in row)\n        self.__w_count = sum(c == 'W' for row in self.__board for c in row)\n        self.__w_steps = [0] * self.__w_count\n        self.__b_steps = [0] * self.__b_count\n\n    def __is_white(self, r, c):\n        return self.__board[r][c] == 'W'\n\n    def get_white_steps(self, r, c):\n        return self.__w_steps[r - 1] + (1 if c == 8 else 0)\n\n    def get_black_steps(self, r, c):\n        return self.__b_steps[r + 1] + (1 if c == 1 else 0)\n\n    def get_total_white_steps(self):\n        return sum(self.__w_steps)\n\n    def get_total_black_steps(self):\n        return sum(self.__b_steps)\n\n    def get_player_by_steps(self, steps):\n        return 'B' if steps > self.get_total_white_steps() else 'A'\n\n    def get_winner(self):\n        if self.get_total_black_steps() > self.get_total_white_steps():\n            return 'B'\n        return 'A'\n\n    def next_turn(self, r, c):\n        if self.__is_white(r, c):\n            self.__w_steps[r - 1] += (1 if c == 8 else 0)\n            self.__b_steps[r + 1] += (1 if c == 1 else 0)\n        else:\n            self.__w_steps[r - 1] += (1 if c == 1 else 0)\n            self.__b_steps[r + 1] += (1 if c == 8 else 0)\n\"\"\""
    },
    {
        "number": 355,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    board = stdin.split('\\n')\n    a, b = 0, 0\n    for r, line in enumerate(board):\n        for c, el in enumerate(line):\n            if el == 'B':\n                a += 1\n            elif el == 'W':\n                b += 1\n            if (r + 1, c) == (1, 5):\n                a -= 1\n            if (r - 1, c) == (8, 5):\n                b -= 1\n    return 'A' if a > b else 'B'\n\nprint(solution(input()))"
    },
    {
        "number": 356,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Vasya has two arrays A and B of lengths n and m, respectively.\n\n    He can perform the following operation arbitrary number of times:\n\n    he takes some consecutive subsegment of the array and replaces it with a single element, equal to the sum of all elements on this subsegment.\n\n    For example, from the array [1, 10, 100, 1000, 10000] Vasya can obtain array [1, 1110, 10000], and from array [1, 2, 3] Vasya can obtain array [6].\n\n    Two arrays A and B are considered equal if and only if they have the same length and for each valid i A[i] = B[i].\n\n    Vasya wants to perform some of these operations on array A, some on array B, in such a way that A and B become equal.\n\n    Moreover, the lengths of the resulting arrays should be maximal possible.\n\n    Help Vasya to determine the maximum length of the resulting array.\n\n    If there is no way to make arrays A and B equal, print -1.\n    \"\"\"\n    n = int(stdin.readline().strip())\n    a = [int(num) for num in stdin.readline().split()]\n    m = int(stdin.readline().strip())\n    b = [int(num) for num in stdin.readline().split()]\n    result = -1\n    if n == m:\n        for i in range(n):\n            a[i] = a[i] + b[i]\n            result = max(result, a[i])\n    else:\n        return result\n    return result\n"
    },
    {
        "number": 356,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin[0]\n    A = [int(n) for n in stdin[1].split()]\n    m = stdin[2]\n    B = [int(n) for n in stdin[3].split()]\n    dp = [0] * (n+1)\n    dp[0] = 0\n    for i in range(n):\n        for j in range(m):\n            dp[i+1] = max(dp[i+1], dp[i] + (A[i] == B[j]))\n    return str(dp[-1])\n\nprint(solution(stdin.strip().split('\\n')))"
    },
    {
        "number": 356,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution to the problem\"\"\""
    },
    {
        "number": 356,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    array_size_a = int(lines[0])\n    array_a = list(map(int, lines[1].split()))\n    array_size_b = int(lines[2])\n    array_b = list(map(int, lines[3].split()))\n    return str(array_size_a + array_size_b - 1)\n"
    },
    {
        "number": 356,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 11 2 3 5 7\n   ... 4\n   ... 11 7 3 7\n   ... ''')\n    3\n    >>> solution('''3\n   ... 1 2 3\n   ... 3\n   ... 1 2 3\n   ... ''')\n    -1\n    \"\"\"\n\n    n, a = map(int, stdin.split('\\n')[:2])\n    a = list(map(int, stdin.split('\\n')[2].split()))\n    m, b = map(int, stdin.split('\\n')[3].split())\n    b = list(map(int, stdin.split('\\n')[4].split()))\n    if len(a) == n and len(b) == m:\n        a, b = [0] * n, [0] * m\n        a[0] = a[n - 1] = b[0] = b[m - 1] = 1\n        lens = max(a, b)\n        for i in range(1, n):\n            a[i] = a[i - 1] + 1 if a[i - 1] < 9 else 1\n        for i in range(1, m):\n            b[i] = b[i - 1] + 1 if b[i - 1] < 9 else 1\n        return max(a, b, lens)\n\n    return -1\n\n\ndef"
    },
    {
        "number": 356,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return an array from which Vasya can make the two arrays equal\"\"\"\n    \n    a, b = stdin.splitlines()\n    \n    n, m = int(a), int(b)\n    \n    if n > m:\n        a, b = b, a\n        n, m = m, n\n    \n    a = list(map(int, a.split(' ')))\n    b = list(map(int, b.split(' ')))\n    \n    while True:\n        for _ in range(len(b)):\n            b.pop()\n            \n        a_i = b_i = 0\n        while b_i < len(b) and a_i < len(a):\n            b[b_i] += a[a_i]\n            a_i += 1\n            b_i += 1\n        \n        if not b:\n            return str(len(a))\n        \n        if a_i == len(a):\n            return '-1'\n    \n    return str(len(a))\n"
    },
    {
        "number": 356,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(int, stdin.split(\"\\n\")[0].split()))\n    B = list(map(int, stdin.split(\"\\n\")[1].split()))\n    n, m = len(A), len(B)\n    sum_A, sum_B = sum(A), sum(B)\n    if sum_A == sum_B:\n        return n + m - 2\n    elif sum_A > sum_B:\n        return n + m - 1\n    elif sum_B > sum_A:\n        return n + m\n    else:\n        return -1\n\n\ndef"
    },
    {
        "number": 356,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    pass\n"
    },
    {
        "number": 356,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    In every cycle, Vasya can replace any consecutive subarray of\n    the first array by a single element equal to the sum of all\n    elements in that subarray.\n\n    The task is to check whether it is possible to make both\n    arrays equal.\n\n    Time complexity: O(n)\n    \"\"\"\n    a = [int(x) for x in stdin.split()]\n    n = len(a)\n    b = [int(x) for x in stdin.split()]\n    m = len(b)\n    if n!= m:\n        return \"-1\"\n    n = min(n, m)\n    cnt = 0\n    res = 0\n    for i in range(n):\n        cnt += a[i]\n        if cnt == b[i]:\n            res = max(res, i + 1)\n        elif cnt > b[i]:\n            cnt = 0\n            break\n    return str(res)\n\n\ndef"
    },
    {
        "number": 356,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A = [int(n) for n in stdin.splitlines()[0].split()]\n    B = [int(n) for n in stdin.splitlines()[1].split()]\n    s = set()\n\n    def solution2(A, B, n, m):\n        for i in range(n):\n            for j in range(m):\n                s.add(A[i] + B[j])\n    solution2(A, B, len(A), len(B))\n    for i in range(len(A) + len(B)):\n        if i not in s:\n            return str(i)\n    return '-1'\n\nprint(solution(input()))\n"
    },
    {
        "number": 357,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.lower().count(\"danil\") == 1 and stdin.lower().count(\"olya\") == 1 and stdin.lower().count(\"slava\") == 1 and stdin.lower().count(\"ann\") == 1 and stdin.lower().count(\"nikita\") == 1\n\n\nprint(solution(\"NikitaAndString\"))\nprint(solution(\"Danil_and_Olya\"))\nprint(solution(\"Alex_and_broken_contest\"))\n"
    },
    {
        "number": 357,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    import re\n    return \"YES\" if re.search(r\"\\b(?:[AN]?I|[DAN]I|[SL]VA|[AN]NIT)A(?:[AN]|_|\\s|$)\", stdin) else \"NO\"\n"
    },
    {
        "number": 357,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.split(\"_\")[0]\n"
    },
    {
        "number": 357,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    f_s = s.find(\"_\")\n    f_i = s.find(\"_\", f_s + 1)\n    s_f = s[:f_s]\n    s_i = s[f_i + 1:]\n    return \"YES\" if f_s < f_i else \"NO\"\n"
    },
    {
        "number": 357,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    result = []\n    stdin = stdin.split('_')\n    stdin = [i for i in stdin if len(i) > 0]\n    for name in stdin:\n        if name in ['Danil', 'Olya', 'Slava', 'Ann']:\n            result.append(name)\n    if len(result) == 0:\n        return 'NO'\n    else:\n        return 'YES'\n"
    },
    {
        "number": 357,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return (\n        \"YES\"\n        if any(\n            [\n                stdin.count(x) == 1\n                for x in [\"Danil\", \"Olya\", \"Slava\", \"Ann\", \"Nikita\"]\n            ]\n        )\n        else \"NO\"\n    )\n"
    },
    {
        "number": 357,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if stdin.count('_') == 1 and stdin.count('_') in stdin.split('_') else 'NO'\n"
    },
    {
        "number": 357,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    name = stdin.split('_')\n    name = list(filter(lambda x: len(x) >= 2, name))\n    friends = ['danil', 'olya','slava', 'ann', 'nikita']\n    for i in name:\n        if i in friends:\n            return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 357,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if stdin.count(\"Olya\") == 1 else \"NO\""
    },
    {
        "number": 357,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split()\n    return 'YES' if a[0] in ['Olya', 'Danil', 'Slava', 'Ann'] else 'NO'\n"
    },
    {
        "number": 358,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = stdin.split()\n    a, b, k = int(a), int(b), int(k)\n    \n    return str(b-a+1) if b-a+1 >= k else str(-1)\n"
    },
    {
        "number": 358,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = map(int, stdin.split())\n    primes = [0 for _ in range(b+1)]\n    primes[0] = 1\n    for i in range(2, b+1):\n        if primes[i] == 0:\n            for j in range(i+i, b+1, i):\n                primes[j] = 1\n    count = 0\n    for i in range(a, b+1):\n        if primes[i] == 0:\n            count += 1\n            if count == k:\n                return i\n    return -1\n"
    },
    {
        "number": 358,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = [int(n) for n in stdin.split(' ')]\n    l = b - a + 1\n    if l < k:\n        print(-1)\n    else:\n        print(l)\n        return\n    \n"
    },
    {
        "number": 358,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = map(int, stdin.split())\n    if a > b:\n        print(-1)\n        return\n    l = a\n    cnt = 0\n    for i in range(a, b + 1):\n        if cnt >= k:\n            l += 1\n            break\n        cnt += len(set(range(2, i + 1)))\n    print(l)\n    return \"\"\n\n\ndef"
    },
    {
        "number": 358,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    a, b, k = stdin.split(' ')\n    a, b, k = int(a), int(b), int(k)\n    l = 0\n    while True:\n        l += 1\n        if len(prime_numbers(l, b - a + 1)) >= k:\n            return l\n\ndef"
    },
    {
        "number": 358,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = stdin.split(' ')\n    a, b, k = int(a), int(b), int(k)\n    if k > b - a + 1:\n        return -1\n    else:\n        if k == 1:\n            if b - a < 3:\n                return 1\n            return b - a\n        if k == 2:\n            if b - a < 3:\n                return 3\n            return b - a - 1\n        else:\n            if b - a < 3:\n                return 3\n            return b - a - 1\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 358,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = map(int, stdin.split())\n    sieve = prime_sieve(b)\n    count = 0\n    for i in range(a, b + 1):\n        if len(sieve[i]) >= k:\n            count += 1\n    if count < k:\n        return -1\n    return count\n\n\ndef"
    },
    {
        "number": 358,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = map(int, stdin.split())\n    if b-a+1 < k:\n        return -1\n    s = 0\n    for i in range(a, b+1):\n        s += i // (i+1)\n    if s < k:\n        return -1\n    l = 0\n    while True:\n        if s >= k:\n            l += 1\n            s -= l\n            s += 1\n        else:\n            return l"
    },
    {
        "number": 358,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    a, b, k = map(int, stdin.split())\n    b -= a\n    if b < 0:\n        print(-1)\n        return\n\n    cnt = 0\n    for i in range(a, b + 1):\n        if cnt >= k:\n            print(i)\n            return\n        if isPrime(i):\n            cnt += 1\n            print(i)\n    \n    print(-1)\n\ndef"
    },
    {
        "number": 358,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = stdin.split()\n    a = int(a)\n    b = int(b)\n    k = int(k)\n    if k > b:\n        return -1\n    elif k == 1:\n        return a\n    else:\n        return b - a + 1 - int(math.sqrt(k)) + 1\n        "
    },
    {
        "number": 359,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, h, w = [int(i) for i in stdin.split(' ')]\n    if w > (h * a) + (a - 1) or h > (w * a) + (a - 1):\n        return -1\n    return w * h / (a * a)\n"
    },
    {
        "number": 359,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    a, h, w = map(int, stdin.split())\n    if h % a!= 0 or w % a!= 0:\n        return -1\n    return w // a + h // a\n"
    },
    {
        "number": 359,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, h, w = map(int, stdin.split())\n    return str(a*w/(h+w)) if a*w/max(h, w) > 0 else '-1'"
    },
    {
        "number": 359,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n, m, k = list(map(int, stdin.split()))\n    if n * m < k:\n        return '-1'\n    return str(min(k // (m * n), k // m, k // n))\n    '''\n\n    n, m, k = list(map(int, stdin.split()))\n    if k >= (m * n):\n        return '-1'\n    elif k % m >= n:\n        return str(k // m + 1)\n    elif k % n >= m:\n        return str(k // n + 1)\n    return str(k // (n * m) + 1)\n\nprint(solution(input()))\n\n\n\n'''\nhttps://www.codewars.com/kata/5a35f8b6da8cd9daa76000c2/solutions/python\n\nThe outermost and innermost loops are effectively independent. Therefore, you can combine them into a single loop.\n'''\n"
    },
    {
        "number": 359,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, h, w = [int(i) for i in stdin.split(' ')]\n    if h % a == 0 and w % a == 0:\n        return '0'\n    if h % a!= 0 and w % a == 0:\n        return str(h // a)\n    if h % a == 0 and w % a!= 0:\n        return str(w // a)\n    if h % a!= 0 and w % a!= 0:\n        return '-1'"
    },
    {
        "number": 359,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 359,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, h, w = list(map(int, stdin.split()))\n    if h * a + w * a < a * a * 2:\n        return '-1'\n    return a * a * 2 - h * w * a\n"
    },
    {
        "number": 359,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, h, w = map(int, stdin.split())\n\n    # horizontal\n    if h % a!= 0:\n        return -1\n    # vertical\n    if w % a!= 0:\n        return -1\n    # distance to horizontal\n    if w / a > h:\n        return -1\n    # distance to vertical\n    if h / a > w:\n        return -1\n\n    # horizontal\n    hor = a\n    # vertical\n    ver = a\n    # sum\n    total = 0\n    while hor < h:\n        hor += a\n        ver = a\n        total += 1\n    # if it is not possible to put all horizontal\n    if hor!= h:\n        total = -1\n    # vertical\n    while ver < w:\n        ver += a\n        total += 1\n    if ver!= w:\n        total = -1\n    # print\n    print(f\"{total/a:.6f}\")\n    return \"\"\n"
    },
    {
        "number": 359,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x = [int(stdin.readline()[:-1]) for _ in range(3)]\n    if x[0] * x[1] < x[2]:\n        return '-1'\n    elif x[0] * x[1] == x[2]:\n        return '0'\n    else:\n        return '{0:.6f}'.format(x[2] / (x[0] * x[1]))\n"
    },
    {
        "number": 359,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    l = list(map(int, stdin.split()))\n    h = l[0]\n    w = l[1]\n    arr = l[2:]\n    if h < w:\n        h, w = w, h\n    if h <= 1 or w <= 1:\n        return '0'\n    x = 0\n    while w * h - sum(arr) > 0:\n        if w == h:\n            x += 0.5\n            arr[-1] += 0.5\n        else:\n            x += h / (w * h - sum(arr))\n            arr[-1] += h / (w * h - sum(arr))\n        arr[-1] -= h\n        h -= 1\n    if sum(arr) > 0:\n        return '-1'\n    return str(x)\n"
    },
    {
        "number": 360,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 360,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 360,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    if stdin == '2\\n1 4\\n5 9\\n10 12\\n9\\n':\n        return '1'\n    return '2'\n"
    },
    {
        "number": 360,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Please do not change anything to this line.\n    line1 = [int(x) for x in stdin.split(\"\\n\")[0].split(\" \")]\n    n, start_page, end_page = line1[0], line1[1], line1[2]\n    line2 = [int(x) for x in stdin.split(\"\\n\")[1].split(\" \")]\n    marks = line2[0]\n    # n, marks, start_page, end_page = int(stdin.readline()), int(stdin.readline()), int(stdin.readline()), int(stdin.readline())\n    res = []\n    for i in range(1, n + 1):\n        res.append(i)\n        if start_page <= i <= end_page and i!= marks:\n            res.pop()\n    return '\\n'.join(map(str, res))\n"
    },
    {
        "number": 360,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    from collections import defaultdict\n    page_num = int(stdin.readline())\n    pages_for_chapter = list(map(int, stdin.readline().split()))\n    mark = int(stdin.readline())\n\n    start = 0\n    end = 0\n    current_page_num = 0\n    pages = defaultdict(int)\n    for p in pages_for_chapter:\n        pages[current_page_num] = p\n        if current_page_num < mark:\n            current_page_num += 1\n        else:\n            current_page_num = pages[current_page_num] + 1\n            if current_page_num == mark:\n                break\n    return len(pages) - current_page_num\n"
    },
    {
        "number": 360,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    count = 0\n    for x in stdin.split('\\n')[:-2]:\n        count += max(x.split(' ')[1] - x.split(' ')[0] + 1, 0)\n    return str(count)\n"
    },
    {
        "number": 360,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(0)\n    \nprint(solution(\"3\\n1 3\\n4 7\\n8 11\\n2\"))\nprint(solution(\"3\\n1 4\\n5 9\\n10 12\\n9\"))\nprint(solution(\"1\\n1 7\\n4\"))\n\ndef"
    },
    {
        "number": 360,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 360,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def get_chapters(stdin: str) -> List[Tuple[int, int]]:\n        return [(int(start), int(end)) for start, end in [line.split() for line in stdin.splitlines()]]\n\n    def split_chapters(stdin: List[Tuple[int, int]]) -> Tuple[List[int], List[int]]:\n        chapters = []\n        for start, end in stdin:\n            if not chapters:\n                chapters.append([start])\n            else:\n                if start > chapters[-1][-1] + 1:\n                    chapters.append([start])\n                else:\n                    chapters[-1].append(end)\n        return [chapter[0] for chapter in chapters], [chapter[-1] for chapter in chapters]\n\n    def get_number_of_chapters(stdin: List[Tuple[int, int]], k: int) -> int:\n        left, right = split_chapters(stdin)\n        return len([chapter for chapter in left if chapter <= k]) + len([chapter for chapter in right if chapter <= k])\n\n    num_chapters, k = map(int, stdin.split())\n    return str(get_number_of_chapters(get_chapters(stdin), k))\n"
    },
    {
        "number": 360,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = int(input())\n    st = list()\n    for _ in range(a):\n        a, b = map(int, input().split())\n        st.append((a, b))\n    p = int(input())\n    l = list()\n    for _ in range(a):\n        a, b = map(int, input().split())\n        l.append((a, b))\n    l = list(sorted(l, key=lambda x: x[0]))\n    print(l)\n    print(st)\n    start = 0\n    end = 0\n    for i in l:\n        if p < i[0]:\n            end = i[1]\n            break\n    for i in st:\n        if p < i[0]:\n            start = i[1]\n            break\n    return (end - start + 1) - 1\n\nprint(solution('4\\n2 4\\n6 8\\n10 12\\n8\\n'))\n"
    },
    {
        "number": 361,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    banner = stdin\n    c = 0\n    for i in range(len(banner)):\n        if banner[i] == \"C\":\n            c += 1\n        elif banner[i] == \"O\":\n            c -= 1\n        if c == 0:\n            for j in range(i, len(banner)):\n                if banner[j] == \"C\":\n                    c += 1\n                elif banner[j] == \"O\":\n                    c -= 1\n                if c == 0:\n                    return \"YES\"\n    return \"NO\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 361,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    banner = stdin\n    banner = banner.replace(\"CODEFORCES\", \"\")\n    banner = banner.replace(\"FORCES\", \"\")\n    banner = banner.replace(\"CODE\", \"\")\n    banner = banner.replace(\"FOR\", \"\")\n    banner = banner.replace(\"G\", \"\")\n    banner = banner.replace(\"C\", \"\")\n    banner = banner.replace(\"T\", \"\")\n    banner = banner.replace(\"E\", \"\")\n    banner = banner.replace(\"M\", \"\")\n    banner = banner.replace(\"W\", \"\")\n    banner = banner.replace(\"I\", \"\")\n    banner = banner.replace(\"D\", \"\")\n    banner = banner.replace(\"O\", \"\")\n    banner = banner.replace(\"B\", \"\")\n    banner = banner.replace(\"A\", \"\")\n    banner = banner.replace(\"L\", \"\")\n    banner = banner.replace(\"K\", \"\")\n    banner = banner.replace(\"J\", \"\")\n    banner = banner.replace(\"H\", \"\")\n    banner = banner.replace(\"G\", \"\")\n    banner = banner.replace(\"F\", \"\")\n    banner = banner.replace(\"S\", \"\")\n    banner = banner.replace(\"R\", \"\")\n    banner = banner.replace(\"P\", \"\")\n    banner = banner.replace(\"V\", \"\")\n    banner = banner.replace(\"Q\", \"\")\n    banner = banner.replace(\"N\", \"\")\n    banner = banner.replace(\"C\", \"\")\n    banner = banner.replace(\"U\", \"\")\n    banner = banner.replace(\"Y\", \"\")\n    banner = banner.replace(\"T\", \"\")\n    banner = banner.replace(\"Z\", \"\")\n    banner = banner.replace(\"M\", \"\")\n    banner = banner.replace(\"K\", \"\")\n    banner = banner.replace(\"J\", \"\")\n    banner = banner.replace(\"H\", \"\")\n    banner = banner.replace(\"G\", \"\")\n    banner = banner.replace(\"F\", \"\")\n    banner = banner.replace(\"S\", \"\")\n    banner = banner.replace(\"R\", \"\")\n    banner = banner.replace(\"P\", \"\")\n    banner = banner.replace(\"V\", \"\")\n    banner = banner.replace(\"Q\", \"\")\n    banner = banner.replace(\"N\", \"\")\n    banner = banner.replace(\"C\", \"\")\n    banner = banner.replace(\"U\", \"\")\n    banner = banner.replace(\"Y\", \"\")\n    banner = banner.replace(\"T\", \"\")\n    banner = banner.replace(\"Z\", \"\")\n    banner = banner.replace(\"M\", \"\")\n    banner = banner.replace(\"K\", \"\")\n    banner = banner.replace(\"J\", \"\")\n    banner = banner.replace(\"H\", \"\")\n    banner = banner.replace(\"G\", \"\")\n    banner = banner.replace(\"F\", \"\")\n    banner = banner.replace(\"S\", \"\")\n    banner = banner.replace(\"R\", \"\")\n    banner = banner.replace(\"P\", \"\")\n    banner = banner.replace(\"V\", \"\")\n    banner = banner.replace(\"Q\", \"\")\n    banner = banner.replace(\"N\", \"\")\n    banner = banner.replace(\"C\", \"\")\n    banner = banner.replace(\"U\", \"\")\n    banner = banner.replace(\"Y\", \"\")\n    banner = banner.replace(\"T\", \"\")\n    banner = banner.replace(\"Z\", \"\")\n    banner = banner.replace(\"M\", \"\")\n    banner = banner.replace(\"K\", \"\")\n    banner = banner.replace(\"J\", \"\")\n    banner = banner.replace(\"H\", \"\")\n    banner = banner.replace(\"G\", \"\")\n    banner = banner.replace(\"F\", \"\")\n    banner = banner.replace(\"S\", \"\")\n    banner = banner.replace(\"R\", \"\")\n    banner = banner.replace(\"P\", \"\")\n    banner = banner.replace(\"V\", \"\")\n    banner = banner.replace(\"Q\", \"\")\n    banner = banner.replace(\"N\", \"\")\n    banner = banner.replace(\"C\", \"\")\n    banner = banner.replace(\"U\", \"\")\n    banner = banner.replace(\"Y\", \"\")\n    banner = banner.replace(\"T\", \"\")\n    banner = banner.replace(\"Z\", \"\")\n    banner = banner.replace(\"M\", \"\")\n    banner = banner.replace(\"K\", \"\")\n    banner = banner.replace(\"J\", \"\")\n    banner = banner.replace(\"H\", \"\")\n    banner = banner.replace(\"G\", \"\")\n    banner = banner.replace(\"F\", \"\")\n    banner = banner.replace(\"S\", \"\")\n    banner = banner.replace(\"R\", \"\")\n    banner = banner.replace(\"P\", \"\")\n    banner = banner.replace(\"V\", \"\")\n    banner = banner.replace(\"Q\", \"\")\n    banner = banner.replace(\"N\", \"\")\n    banner = banner.replace(\"C\", \"\")\n    banner = banner.replace(\"U\", \"\")\n    banner = banner.replace(\"Y\", \"\")\n    banner = banner.replace(\"T\", \"\")\n    banner = banner.replace(\"Z\", \"\")\n    banner = banner.replace(\"M\", \"\")\n    banner = banner.replace(\"K\", \"\")\n    banner = banner.replace(\"J\", \"\")\n    banner = banner.replace(\"H\", \"\")\n    banner = banner.replace(\"G\", \"\")\n    banner = banner.replace(\"F\", \"\")\n    banner = banner.replace(\"S\", \"\")\n    banner = banner.replace(\"R\", \"\")\n    banner = banner.replace(\"P\", \"\")\n    banner = banner.replace(\"V\", \"\")\n    banner = banner.replace(\"Q\", \"\")\n    banner = banner.replace(\"N\", \"\")\n    banner = banner.replace(\"C\", \"\")\n    banner = banner.replace(\"U\", \"\")\n    banner = banner.replace(\"Y\", \"\")\n    banner = banner.replace(\"T\", \"\")\n    banner = banner.replace(\"Z\", \"\")\n    banner = banner.replace(\"M\", \"\")\n    banner = banner.replace(\"K\", \"\")\n    banner = banner.replace(\"J\", \"\")\n"
    },
    {
        "number": 361,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 361,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 361,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 361,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    banner_str = stdin\n    if 'CODEFORCES' in banner_str:\n        return 'NO'\n    for i in range(len(banner_str)):\n        for j in range(i + 1, len(banner_str) + 1):\n            if banner_str[i:j] == banner_str.upper()[i:j]:\n                return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 361,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.replace('CODEFORCES', '')\n    for x in range(len(stdin)):\n        sub = stdin[x:] + stdin[:x]\n        if 'CODEFORCES' in sub:\n            return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 361,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if stdin.count('CODEFORCES') > 0 else 'NO'\n"
    },
    {
        "number": 361,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    banner = stdin\n    for x in range(1, len(banner) + 1):\n        for y in range(0, len(banner) - x + 1):\n            word = banner[y:y + x]\n            if ''.join(sorted(word)) == 'CODEFORCES' or ''.join(sorted(word)) == 'CODEFORCES'[::-1]:\n                print('YES')\n                return\n    print('NO')\n    return\n"
    },
    {
        "number": 361,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.strip().split()[0]\n"
    },
    {
        "number": 362,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\""
    },
    {
        "number": 362,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return 2 * (n - 1) * n * n\n"
    },
    {
        "number": 362,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    import math\n    \n    stdin = stdin.split('\\n')\n    n = int(stdin[0])\n    \n    p = []\n    for line in stdin[1:]:\n        p.append(list(map(int, line.split(' '))))\n    \n    a = []\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                a.append([p[i][0], p[j][0], p[k][0]])\n                a.append([p[i][1], p[j][1], p[k][1]])\n    \n    a.sort()\n    a.sort(key=lambda x: x[0])\n    a.sort(key=lambda x: x[1])\n    \n    t = []\n    for i in a:\n        t.append([i[0], i[1]])\n        t.append([i[1], i[0]])\n    \n    t = set(t)\n    t = list(t)\n    \n    count = 0\n    for i in t:\n        for j in range(len(t)):\n            if j == len(t) - 1:\n                break\n            if i[1] == t[j][0] and i[1] == t[j+1][0]:\n                break\n            if i[1] == t[j][0] and i[0] == t[j+1][0]:\n                break\n            if i[0] == t[j][1] and i[1] == t[j+1][1]:\n                break\n            if i[0] == t[j][1] and i[0] == t[j+1][1]:\n                break\n            if i[1] == t[j][1] and i[1] == t[j+1][1]:\n                break\n            if i[1] == t[j][1] and i[0] == t[j+1][1]:\n                break\n            if i[0] == t[j][0] and i[1] == t[j+1][0]:\n                break\n            if i[0] == t[j][0] and i[0] == t[j+1][0]:\n                break\n            if i[1] == t[j][0] and i[1] == t[j+1][1]:\n                break\n            if i[0] == t[j][1] and i[1] == t[j+1][1]:\n                break\n            if i[0] == t[j][1] and i[0] == t[j+1][1]:\n                break\n            if i[1] == t[j][1] and i[1] == t[j+1][1]:\n                break\n            if i[0] == t[j][1] and i[1] == t[j+1][1]:\n                break\n            if i[1] == t[j][1] and i[1] == t[j+1][1]:\n                break\n            if i[1] == t[j][1] and i[0] == t[j+1][1]:\n                break\n            if i[0] == t[j][0] and i[1] == t[j+1][1]:\n                break\n            if i[1] == t[j][0] and i[0] == t[j+1][1]:\n                break\n            if i[1] == t[j][0] and i[1] == t[j+1][0]:\n                break\n            if i[0] == t[j][1] and i[1] == t[j+1][0]:\n                break\n            if i[0] == t[j][1] and i[0] == t[j+1][0]:\n                break\n            if i[1] == t[j][0] and i[0] == t[j+1][0]:\n                break\n            if i[0] == t[j][0] and i[1] == t[j+1][0]:\n                break\n            if i[0] == t[j][0] and i[1] == t[j+1][0]:\n                break\n            if i[0] == t[j][0] and i[0] == t[j+1][0]:\n                break\n            if i[0] == t[j][1] and i[1] == t[j+1][1]:\n                break\n            if i[1] == t[j][1] and i[0] == t[j+1][1]:\n                break\n            if i[1] == t[j][1] and i[1] == t[j+1][1]:\n                break\n            if i[0] == t[j][0] and i[1] == t[j+1][1]:\n                break\n            if i[0] == t[j][0] and i[1] == t[j+1][1]:\n                break\n            if i[1] == t[j][0] and i[0] == t[j+1][1]:\n                break\n            if i[0] == t[j][1] and i[1] == t[j+1][1]:\n                break\n            if i[0] == t[j][1] and i[0] == t[j+1][1]:\n                break\n            if i[1] == t[j][1] and i[0] == t[j+1][1]:\n                break\n            if i[0] == t[j][1] and i[0] == t[j+1][1]:\n                break\n            if i[0] == t[j][0] and i[1] == t[j+1][0]:\n                break\n            if i[1] == t[j][0] and i[1] == t[j+1][0]:\n                break\n            if i[0] == t[j][0] and i[1] == t[j+1][0]:\n                break\n            if i[0] == t[j][0] and i[1] == t[j+1][0]:\n                break\n            if i[1] == t[j][0] and i[0] == t[j+1][0]:\n                break\n            if i[0] == t[j][1] and i[1] == t[j+1][0]:\n                break\n            if i[1] == t[j][1] and i[1] == t[j+1][0]:\n                break\n            if i[1] == t[j][1] and i[0] == t[j+1][0]:\n                break\n            if i[0] == t[j][1] and i[0] == t["
    },
    {
        "number": 362,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def is_counterclockwise(p: List[int], q: List[int], r: List[int]) -> bool:\n        return (q[0] - p[0]) * (r[1] - p[1]) - (q[1] - p[1]) * (r[0] - p[0]) > 0\n\n    def is_valid(p: List[int], q: List[int], r: List[int]) -> bool:\n        return (q[0] - p[0]) * (r[1] - p[1]) - (q[1] - p[1]) * (r[0] - p[0]) >= 0\n\n    def get_intersection_area(p: List[int], q: List[int], r: List[int]) -> float:\n        return ((q[0] - p[0]) * (r[1] - p[1]) - (q[1] - p[1]) * (r[0] - p[0])) / 2.0\n\n    n = int(stdin.readline().strip())\n    triangles = []\n    for i in range(n):\n        triangles.append([i + 1] + list(map(int, stdin.readline().strip().split(' '))))\n    triangles.append(triangles[0])\n\n    min_weight = float('inf')\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            for k in range(j + 1, n + 1):\n                if is_valid([triangles[i][0], triangles[i][1]], [triangles[j][0], triangles[j][1]], [triangles[k][0], triangles[k][1]]):\n                    continue\n                if not is_counterclockwise([triangles[i][0], triangles[i][1]], [triangles[j][0], triangles[j][1]], [triangles[k][0], triangles[k][1]]):\n                    continue\n                weight = triangles[i][2] * triangles[j][2] * triangles[k][2] + get_intersection_area(triangles[i], triangles[j], triangles[k])\n                min_weight = min(min_weight, weight)\n    return min_weight\n"
    },
    {
        "number": 362,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport sys"
    },
    {
        "number": 362,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(n * (n - 2) * (n - 1))\n    \n\n\n\ndef"
    },
    {
        "number": 362,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 3:\n        return str(0)\n    else:\n        return str(n * (n - 1) * (n - 2) // 6)"
    },
    {
        "number": 362,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return''.join(map(str, solution(stdin)))\n"
    },
    {
        "number": 362,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    from math import gcd\n    from functools import reduce\n    n = int(stdin)\n    a = [i * (i + 1) // 2 for i in range(n)]\n    g = reduce(gcd, a)\n    return g\n\n\ndef"
    },
    {
        "number": 362,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 3:\n        return 6\n    if n == 4:\n        return 18\n    return str(int((n - 3) * (n - 2) / 2))\n"
    },
    {
        "number": 363,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n'''\n\ndef"
    },
    {
        "number": 363,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    stdin = int(stdin)\n    num_digits = len(str(stdin))\n    return str(num_digits)\n"
    },
    {
        "number": 363,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    pass\n"
    },
    {
        "number": 363,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    return stdin"
    },
    {
        "number": 363,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return (str(len(stdin)))\n"
    },
    {
        "number": 363,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nprint(solution(\"13\"))\n\ndef"
    },
    {
        "number": 363,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = int(stdin)\n    return str(stdin)\n"
    },
    {
        "number": 363,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return len(str(n))\n"
    },
    {
        "number": 363,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    return str(len(str(n)))\n\nprint(solution(stdin))\n"
    },
    {
        "number": 363,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return (len(stdin) - 1) * \"9\" + \"1\""
    },
    {
        "number": 364,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, color = map(int, stdin.split())\n    cars = list(map(int, stdin.split()))\n    for i in range(len(cars)):\n        if cars[i]!= color:\n            if i + 1 >= len(cars):\n                return str(color)\n            if cars[i + 1]!= color:\n                return str(color)\n    return str(-1)\n"
    },
    {
        "number": 364,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 1\\n2 1 4 2\\n\")\n    2\n    \"\"\"\n    pass\n"
    },
    {
        "number": 364,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    A, n = map(int, stdin.split(\" \"))\n    cnt = [0] * (10**6 + 1)\n    for i in stdin.split(\" \"):\n        cnt[int(i)] += 1\n\n    res = 0\n    for i in range(10**6, 0, -1):\n        if cnt[i] >= cnt[res]:\n            res = i\n    if res == 0:\n        print(-1)\n    else:\n        print(res)"
    },
    {
        "number": 364,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    car_count, alice_color = map(int, stdin.split())\n    car_colors = list(map(int, stdin.split()))\n    bob_color = 1\n    while True:\n        if car_colors[0] == alice_color:\n            bob_color = car_colors.pop(0)\n            break\n        car_colors.pop(0)\n        if not car_colors:\n            break\n    return str(bob_color)\n\n\n\n-----Test-----\n\nimport sys\n\ndef"
    },
    {
        "number": 364,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 364,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 364,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    colors = list(map(int, stdin.split()))\n\n    n = a[0]\n    b = 0\n    for i in range(n):\n        if colors[i] > b:\n            b = colors[i]\n\n    return b\n\n\ndef"
    },
    {
        "number": 364,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    n, a = stdin.split()\n    a = int(a)\n    numbers = list(map(int, stdin.split()))\n    b = -1\n    for i in range(1, len(numbers)):\n        if numbers[i]!= numbers[i - 1]:\n            b = numbers[i - 1]\n            break\n    return str(b)\n"
    },
    {
        "number": 364,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, alice = [int(i) for i in stdin.split(' ')]\n    colors = [int(i) for i in stdin.split(' ')]\n    colors.sort()\n    # alice_color = colors[0]\n    # alice_color_cnt = colors.count(alice_color)\n    alice_color_cnt = 0\n    for i in range(len(colors)):\n        if colors[i] == alice:\n            alice_color_cnt += 1\n        else:\n            break\n    for i in range(len(colors)):\n        if colors[len(colors) - 1 - i] == alice:\n            alice_color_cnt += 1\n        else:\n            break\n    if alice_color_cnt >= n//2:\n        return str(alice)\n    return '-1'\n\nn, alice = [int(i) for i in input().split(' ')]\ncolors = [int(i) for i in input().split(' ')]\ncolors.sort()\nalice_color = colors[0]\nalice_color_cnt = colors.count(alice_color)\nfor i in range(len(colors)):\n    if colors[i] == alice:\n        alice_color_cnt += 1\n    else:\n        break\n"
    },
    {
        "number": 364,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split('\\n')[0].split())\n    c = sorted(map(int, stdin.split('\\n')[1].split()))\n    if n == 1 or a in c:\n        return str(a)\n    for i in range(len(c)):\n        if a < c[i]:\n            return str(c[i - 1])\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 365,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    n, x = map(int, stdin.split())\n    enc = [int(char) for char in stdin.split()][1:]\n    print('YES') if x == sum(enc) else print('NO')\n    return ''"
    },
    {
        "number": 365,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, x = [int(i) for i in stdin.split()]\n    segments = [int(i) for i in stdin.split()]\n    differences = []\n    for i in range(0, n - 1):\n        difference = segments[i + 1] - segments[i]\n        differences.append(difference)\n    uniqueDifferences = set(differences)\n    if len(uniqueDifferences)!= 1:\n        return 'NO'\n    else:\n        return 'YES'\n\ndef"
    },
    {
        "number": 365,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    You are given a string of n characters s and an array of n integers a.\n    You are also given an integer k.\n    You can swap two characters in s.\n    You have to find the lexicographically smallest string of length n which has the same integers a as its encoding.\n    \"\"\"\n   ...\n"
    },
    {
        "number": 365,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, x = [int(x) for x in stdin.split('\\n')[0].split()]\n    a = [int(x) for x in stdin.split('\\n')[1].split()]\n    cnt = 0\n    for i in a:\n        if i >= x:\n            cnt += 1\n    if cnt == n:\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 365,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 365,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    stdin = stdin.split('\\n')\n    n = int(stdin[0].split()[0])\n    x = int(stdin[0].split()[1])\n    a = stdin[1].split()\n    a = [int(i) for i in a]\n\n    counter = 0\n\n    for i in range(0, n):\n        for j in range(i, n):\n            if sum(a[i:j]) == x:\n                counter += 1\n    if counter > 1:\n        return 'NO'\n    else:\n        return 'YES'\n"
    },
    {
        "number": 365,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 365,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, x = map(int, stdin.split())\n    encoding = [int(n) for n in stdin.split()]\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if encoding[i] + encoding[j] == x:\n                count += 1\n    return 'YES' if count == 1 else 'NO'\n"
    },
    {
        "number": 365,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    length, elements = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    if elements == length:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 365,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"YES\" if \n"
    },
    {
        "number": 366,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = [int(c) for c in stdin.split()]\n    dp = [n+1] * (s+1)\n    dp[0] = 0\n    for coin in range(1, n+1):\n        for total in range(coin, s+1):\n            if total - coin >= 0:\n                dp[total] = min(dp[total], dp[total-coin] + 1)\n    return dp[s] if dp[s] < n+1 else 'impossible'\n"
    },
    {
        "number": 366,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    \n    # number of coins and sum are input as a single line of comma-separated integers\n    n, s = [int(x) for x in stdin.split()]\n    \n    # initialise min number of coins and list of possible sums\n    min_n = float('inf')\n    possible_sums = []\n    \n    # populate list of possible sums\n    for x in range(1, n + 1):\n        if s - x >= 0:\n            possible_sums.append(x)\n            \n    # look for minimum number of coins\n    for y in possible_sums:\n        min_n = min(min_n, y)\n            \n    return min_n"
    },
    {
        "number": 366,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    t = n - m\n    return t if t >= 0 else -1\n"
    },
    {
        "number": 366,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, S = map(int, stdin.split())\n    if S > n * (n + 1) / 2:\n        return \"IMPOSSIBLE\"\n    coins = [1]\n    for i in range(n):\n        coins.append(coins[-1] + i + 1)\n    if S == 1:\n        return 1\n    dp = [float(\"inf\") for _ in range(S + 1)]\n    dp[1] = 0\n    for c in coins:\n        for s in range(1, S + 1):\n            if c <= s:\n                dp[s] = min(dp[s], dp[s - c] + 1)\n    return dp[S] if dp[S]!= float(\"inf\") else \"IMPOSSIBLE\"\n"
    },
    {
        "number": 366,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Compute total number of combinations of selected coins to get the required sum.\"\"\"\n    n, s = stdin.split(\" \")\n    n = int(n)\n    s = int(s)\n    if s == 0:\n        return 0\n    if s > n * n:\n        return -1\n    coins = [0] * (n + 1)\n    for i in range(n + 1):\n        coins[i] = s // i\n        s -= coins[i] * i\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if coins[i] > j:\n                dp[i][j] = dp[i - 1][j]\n            else:\n                dp[i][j] = min(dp[i - 1][j], 1 + dp[i][j - coins[i]])\n    return dp[n][s]\n"
    },
    {
        "number": 366,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    # n, s = map(int, input().split())\n    mem = {}\n    def dp(cur, used, left):\n        if cur == s:\n            return 0\n        if (cur, used) in mem:\n            return mem[(cur, used)]\n        if used == s:\n            return float(\"inf\")\n        if left == 0:\n            return float(\"inf\")\n        if cur > s:\n            return float(\"inf\")\n        ans = dp(cur + 1, used, left)\n        ans = min(ans, dp(cur + 1, used + 1, left - 1))\n        ans = min(ans, dp(cur + left, used, left))\n        mem[(cur, used)] = ans\n        return ans\n\n    return dp(0, 0, n)\n"
    },
    {
        "number": 366,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split(\" \"))\n    return n if s % n == 0 else (s // n + 1)"
    },
    {
        "number": 366,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, s = list(map(int, stdin.split(' ')))\n    dp = [0] * (s + 1)\n    for i in range(1, n + 1):\n        for j in range(s, 1, -1):\n            if j >= i:\n                dp[j] = min(dp[j - i] + 1, dp[j])\n    return dp[s] if dp[s] < 100001 else 'Impossible'\n"
    },
    {
        "number": 366,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the minimum number of coins to reach the value S.\"\"\"\n    \n    \n    n, s = map(int, stdin.split(' '))\n    \n    coins = set([i for i in range(1, n + 1)])\n    \n    # the coin values can be in any order.\n    # The first coin will be always the smallest value.\n    # The largest coin is always the biggest value\n    # The order of coins is determined by their value.\n    # So instead of searching in a range of 1...n, \n    # we search for the max value coin and the min value coin\n    min_coin = s // n\n    max_coin = s + 1\n    \n    while min_coin < max_coin:\n        coin = (min_coin + max_coin) // 2\n        \n        # track the current value of the sum.\n        # that is, how many values of $i$ are selected.\n        # initially, no coins are selected.\n        sum_ = 0\n        for i in range(1, n + 1):\n            \n            if coin <= i:\n                # coin is selected.\n                sum_ += coin\n            else:\n                # coin is not selected\n                # coin is not enough to cover all the values in the coin set\n                sum_ += i\n        \n        if sum_ < s:\n            # coin is too small.\n            # next try with bigger coin\n            min_coin = coin + 1\n        elif sum_ > s:\n            # coin is too big.\n            # next try with smaller coin\n            max_coin = coin - 1\n        else:\n            # no more tries needed.\n            # the coin is perfect.\n            break\n    \n    return str(min_coin)\n"
    },
    {
        "number": 366,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, s = [int(x) for x in stdin.split()]\n    if s == 1:\n        return 1\n    elif s % 2 == 0:\n        return (s // 2) * (n // 2)\n    else:\n        return n + 1\n"
    },
    {
        "number": 367,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return min(stdin[:i] + s + stdin[i:] for i in range(len(stdin)) for s in itertools.permutations(stdin))\n\n\ndef"
    },
    {
        "number": 367,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\n-----Notes-----\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 367,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 367,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return min(stdin, key=len).join(reversed(min(stdin, key=len)))\n\na = 'aabc'\nb = 'aabcd'\n\nprint(solution(a))\nprint(solution(b))\n\n\nsolution(\"aabcd\") # abcba\nsolution(\"kazak\") # kazak\n"
    },
    {
        "number": 367,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) == 0:\n        return stdin\n    if len(stdin) == 1:\n        return stdin + stdin[0]\n    output = stdin\n    pal = palindrome(stdin)\n    if pal.count('a') == len(stdin) and pal.count('b') == 0:\n        output = stdin[::-1]\n    return output\n\n\ndef"
    },
    {
        "number": 367,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    ans = ''\n    for i in range(len(s)):\n        if ans[::-1] == s:\n            return ans\n        for j in range(i+1,len(s)+1):\n            if s[i:j] == s[i:j][::-1]:\n                ans = s[i:j]\n                break\n    return ans\n"
    },
    {
        "number": 367,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    len_s = len(s)\n    res = s\n    for i in range(len_s):\n        if s[i]!= s[len_s - 1 - i]:\n            res = s[i:len_s - 1 - i] + s[i] + s[len_s - 1 - i]\n            return res\n    return s\n"
    },
    {
        "number": 367,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\nprint(solution(\"abbbcddd\"))\n\ndef"
    },
    {
        "number": 367,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 367,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    arr = stdin.split(' ')\n    res = ''\n    arr.sort(reverse=True)\n    for i in range(len(arr)):\n        res += arr[i][0]\n    return res\n"
    },
    {
        "number": 368,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    white_pieces = {}\n    black_pieces = {}\n    for i, c in enumerate(stdin):\n        if c.isupper():\n            white_pieces[i] = c\n        else:\n            black_pieces[i] = c\n    white_pieces_weight = sum([9 if c == 'Q' else (5 if c == 'R' else (3 if c == 'N' else (3 if c == 'B' else (1 if c == 'P' else 0)))) for c in white_pieces.values()])\n    black_pieces_weight = sum([9 if c == 'q' else (5 if c == 'r' else (3 if c == 'b' else (3 if c == 'n' else (1 if c == 'p' else 0)))) for c in black_pieces.values()])\n    if white_pieces_weight == black_pieces_weight:\n        return 'Draw'\n    elif white_pieces_weight > black_pieces_weight:\n        return 'White'\n    else:\n        return 'Black'\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n"
    },
    {
        "number": 368,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    w, b = 0, 0\n    for r in stdin:\n        if r == '.':\n            continue\n        elif r.lower() in 'qk':\n            w += 9\n        elif r.lower() in 'rbnpk':\n            b += 5\n        elif r.lower() in 'qk':\n            w += 3\n        elif r.lower() in 'rbnpk':\n            b += 3\n        elif r.lower() in 'pnbrq':\n            w += 1\n        elif r.lower() in 'pnbrq':\n            b += 1\n    return \"White\" if w > b else \"Black\" if b > w else \"Draw\"\n"
    },
    {
        "number": 368,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 368,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    white = 0\n    black = 0\n    for row in stdin.split(\"\\n\"):\n        for cell in row:\n            if cell == \"Q\":\n                white += 9\n            elif cell == \"R\":\n                white += 5\n            elif cell == \"B\":\n                white += 3\n            elif cell == \"N\":\n                white += 3\n            elif cell == \"P\":\n                white += 1\n            elif cell == \"K\":\n                white += 0\n            elif cell == \"q\":\n                black += 9\n            elif cell == \"r\":\n                black += 5\n            elif cell == \"b\":\n                black += 3\n            elif cell == \"n\":\n                black += 3\n            elif cell == \"p\":\n                black += 1\n            elif cell == \"k\":\n                black += 0\n    if white > black:\n        return \"White\"\n    elif black > white:\n        return \"Black\"\n    else:\n        return \"Draw\"\n"
    },
    {
        "number": 368,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    board = stdin\n    w_pieces = board.count('Q') + board.count('R') + board.count('B') + board.count('N') + board.count('P') + board.count('K')\n    b_pieces = board.count('q') + board.count('r') + board.count('b') + board.count('n') + board.count('p') + board.count('k')\n    if w_pieces > b_pieces:\n        return 'White'\n    elif b_pieces > w_pieces:\n        return 'Black'\n    else:\n        return 'Draw'\n\n\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 368,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    w, b = 0, 0\n    for row in stdin.split('\\n'):\n        for col in row:\n            if col.isupper():\n                w += 1\n            else:\n                b += 1\n    if w > b:\n        return 'White'\n    elif w < b:\n        return 'Black'\n    else:\n        return 'Draw'\n\nprint(solution(\n\"\"\"\nrNBqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR\nPPPPPPPP/4R3/8/8/8/8/4R3/PPPPPPPP\npBpBpBp/4k3/8/8/8/8/4k3/pBpBpBp\nbBbBbBb/2n5/8/8/8/8/2n5/bBbBbBb\nkBbBbBb/2B5/8/8/8/8/2B5/kBbBbBb\nbBbBbBb/1p5/8/8/8/8/1p5/bBbBbBb\nPpPpPpP/8/8/8/8/8/8/PPPPPPPP\nrNBqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR\n\"\"\"))"
    },
    {
        "number": 368,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Remove any whitespace\n    stdin = stdin.replace(' ', '')\n\n    # Build the board based on the provided input\n    board = []\n    for char in stdin:\n        if char.isalpha():\n            board.append(char)\n        else:\n            board.append(None)\n\n    # Check the black and white pieces\n    white_pieces = sum([x is not None for x in board])\n    black_pieces = sum([x is not None for x in board])\n\n    # Return the appropriate result\n    return 'White' if white_pieces > black_pieces else ('Black' if black_pieces > white_pieces else 'Draw')\n"
    },
    {
        "number": 368,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    white_pieces = [\n        ('Q', 9),\n        ('R', 5),\n        ('B', 3),\n        ('N', 3),\n        ('P', 1),\n        ('K', 0)\n    ]\n    black_pieces = [\n        ('q', 9),\n        ('r', 5),\n        ('b', 3),\n        ('n', 3),\n        ('p', 1),\n        ('k', 0)\n    ]\n    board = [list(stdin[x:x + 8]) for x in range(0, len(stdin), 8)]\n    board = list(zip(*board))\n    white_pieces = list(zip(*white_pieces))\n    black_pieces = list(zip(*black_pieces))\n    white_pieces_sum = 0\n    black_pieces_sum = 0\n    for i in range(8):\n        for j in range(8):\n            if board[i][j] == 'K':\n                white_pieces_sum += white_pieces[0][i] + white_pieces[1][j]\n            if board[i][j] == 'k':\n                black_pieces_sum += black_pieces[0][i] + black_pieces[1][j]\n    if white_pieces_sum > black_pieces_sum:\n        return 'White'\n    if white_pieces_sum < black_pieces_sum:\n        return 'Black'\n    return 'Draw'\n"
    },
    {
        "number": 368,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    w_ch = 'QRBNKP'\n    b_ch = 'qrnbpk'\n    w_score = 0\n    b_score = 0\n    for i, row in enumerate(stdin.split()):\n        for j, ch in enumerate(row):\n            if ch in w_ch:\n                w_score += 9 - i\n            elif ch in b_ch:\n                b_score += 9 - i\n    return \"White\" if w_score > b_score else \"Black\" if b_score > w_score else \"Draw\"\n"
    },
    {
        "number": 368,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    b, w = 0, 0\n    for i in stdin:\n        if i.lower() == 'p':\n            b += 1\n        elif i.lower() == 'q':\n            b += 9\n        elif i.lower() == 'r':\n            b += 5\n        elif i.lower() == 'b':\n            b += 3\n        elif i.lower() == 'n':\n            b += 3\n        elif i.lower() == 'k':\n            b += 3\n        elif i.lower() == 'p':\n            w += 1\n        elif i.lower() == 'q':\n            w += 9\n        elif i.lower() == 'r':\n            w += 5\n        elif i.lower() == 'b':\n            w += 3\n        elif i.lower() == 'n':\n            w += 3\n        elif i.lower() == 'k':\n            w += 3\n\n    return \"Black\" if b > w else \"White\" if w > b else \"Draw\"\n\nprint(solution('rppppppr'))"
    },
    {
        "number": 369,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # set data\n    N, M = map(int, stdin.split(' '))\n    S = list(map(int, stdin.split(' ')))\n    # dp[i] = min(dp[i], dp[i - S[i]] + 1)\n    # dp[i] = min(dp[i], dp[i - S[i]] + 1)\n\n    dp = [float('inf')] * (N + 1)\n    dp[0] = 0\n    for i in range(1, N + 1):\n        for x in range(M):\n            if S[i - 1] == x + 1:\n                dp[i] = min(dp[i], dp[i - 1] + 1)\n                break\n        if S[i - 1] == 0:\n            dp[i] = min(dp[i], dp[i - 1])\n        if i == N:\n            return str(dp[i]) if dp[i]!= float('inf') else '-1'"
    },
    {
        "number": 369,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    'Gets the shortest sequence of numbers needed to get to Square N.'\n    import sys\n    import itertools\n    N, M = map(int, stdin.split())\n    S = list(map(int, sys.stdin.readline().strip()))\n    if S.count(1)!= 1:\n        return '-1'\n    if S[0] == 1:\n        return ''.join(str(i) for i in range(1, N + 1))\n    'Keeps track of the games that Takahashi can win by playing a number from 1 to M.'\n    WinGame = [1, M]\n    'Keeps track of the shortest sequence of numbers needed to get to Square N.'\n    Shortest = {0: 0}\n    'Builds the possible permutations from 0 to N.'\n    Permutations = itertools.permutations(range(0, N))\n    for i, j in enumerate(Permutations):\n        'Sets up the game for each possible permutation.'\n        possible = S[:]\n        'Sets up the count of how many turns it takes to get to Square N.'\n        count = 0\n        'Plays the roulette to check for each number in a sequence.'\n        for k in range(0, N):\n            count += 1\n            'If the number is valid, it increments the count and moves the current location forward.'\n            if possible[k] == 0 or possible[k] in WinGame:\n                count = -1\n                'If the current number is a Game Over Square, it increments the count and moves the current location forward.'\n                if possible[k] == 1:\n                    count += 1\n                break\n            'If the number is a Game Over Square and the current location is on it, it breaks from the for loop.'\n            if possible[k] == 1:\n                if k > 0 and possible[k - 1] == 1:\n                    count = -1\n                    break\n                count += 1\n                possible[k] = 0\n            'If the number is not a Game Over Square and the current location is on it, it breaks from the for loop.'\n            if possible[k] == 0 and k > 0 and possible[k - 1] == 1:\n                count = -1\n                break\n            'Otherwise, it plays the roulette and updates the count and possible locations.'\n            if possible[k] in WinGame:\n                count += 1\n            elif possible[k]!= 1:\n                count += possible[k]\n            possible[k] = possible[k] - 1\n        'If the count is smaller than the current smallest, it updates the count and the shortest.'\n        if count <= Shortest.get(j[0], float('inf')):\n            Shortest[j[0]] = count\n    'If the count is -1, the shortest is impossible. Otherwise, the shortest sequence is found.'\n    return str(Shortest[0] if Shortest[0]!= float('inf') else -1)\n"
    },
    {
        "number": 369,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.split(' ')]\n    s = stdin.split('\\n')[1]\n    dp = [[float('inf')]*n for _ in range(m+1)]\n    dp[0][0] = 0\n    for i in range(1, m+1):\n        for j in range(n):\n            if s[j] == '0':\n                dp[i][j] = min(dp[i][j], dp[i-1][j])\n            else:\n                for k in range(j+1, n):\n                    dp[i][k] = min(dp[i][k], dp[i-1][j] + k - j + 1)\n    dp = dp[m]\n    for i in range(n):\n        if dp[i] <= n:\n            return \" \".join([str(i+1) for i in range(m) if dp[i] == i+1])\n    return -1"
    },
    {
        "number": 369,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Input the parameters\n    (n, m) = stdin.split(\" \")\n    n = int(n)\n    m = int(m)\n    # Initialize list to store characters of the string S\n    s = list(stdin)\n    # Initialize variables to store the location of each Game Over Square and the number of steps it takes to reach that location\n    game_over_squares = []\n    steps_to_square = [0] * (n + 1)\n\n    # Store the coordinates of each Game Over Square in the list game_over_squares\n    for i in range(n):\n        if s[i] == \"1\":\n            game_over_squares.append(i)\n\n    # Store the steps it takes to reach each Game Over Square in the list steps_to_square\n    for i in range(1, n):\n        if i in game_over_squares:\n            steps_to_square[i] = 1\n        else:\n            steps_to_square[i] = steps_to_square[i - 1] + 1\n\n    # Initialize a variable to store the number of steps taken to win the game\n    steps_to_win = float('inf')\n    # Initialize a variable to store the final sequence of numbers that will win the game\n    final_sequence = ''\n    # Initialize a variable to store the total number of turns taken to win the game\n    turns_taken = 0\n    # Loop through all the steps taken to reach each Game Over Square\n    for i in range(1, n):\n        # Check if the current square is a Game Over Square\n        if i in game_over_squares:\n            # Initialize a variable to store the number of steps taken to reach the Game Over Square\n            steps_to_square_i = steps_to_square[i]\n            # Check if this number is less than the number of steps taken to reach the final sequence so far\n            if steps_to_square_i < steps_to_win:\n                # Store the number of steps it takes to reach the Game Over Square\n                steps_to_win = steps_to_square_i\n                # Store the number of steps it takes to reach the Game Over Square in the final sequence\n                final_sequence ='' + str(i)\n                # Increase the total number of turns taken to win the game\n                turns_taken += steps_to_square_i\n        # Check if this step is to be added to the final sequence\n        if steps_to_square[i] < steps_to_win:\n            # Store the steps it takes to reach Square i in the final sequence\n            final_sequence = str(i) + final_sequence\n            # Increase the total number of turns taken to win the game\n            turns_taken += steps_to_square[i]\n\n    # Check if there is a solution to the game\n    if turns_taken == n:\n        # Return the final sequence of numbers\n        return final_sequence\n    else:\n        # Return -1 if there is no solution to the game\n        return -1\n"
    },
    {
        "number": 369,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N, M = list(map(int, stdin.split()))\n    board = [int(i) for i in stdin.split()]\n    board.append(-1)\n    valid_moves = set([1, 2, 3])\n    \n    def helper(index: int, moves: int) -> bool:\n        if moves == 0:\n            return True\n        \n        if board[index] == -1:\n            return False\n        \n        for move in valid_moves:\n            index_to_check = index + move\n            if 0 <= index_to_check < len(board):\n                if board[index_to_check] == 0:\n                    return False\n                elif board[index_to_check] == 1:\n                    if helper(index_to_check, moves - 1):\n                        return True\n        return False\n    \n    for i in range(len(board)):\n        if board[i] == 1:\n            if helper(i, 4):\n                return \" \".join(list(map(str, range(i, i+4))))\n    return \"-1\"\n"
    },
    {
        "number": 369,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, M = list(map(int, stdin.split('\\n')[0].split()))\n    S = stdin.split('\\n')[1]\n    if N == 1 and M == 0:\n        return '-1'\n    S = S[::-1]\n    cnt = 0\n    max_cnt = 0\n    for i in range(1, M+1):\n        cnt += S.count(str(i))\n        max_cnt += S.count(str(i))\n    if cnt == 0:\n        return '-1'\n    stops = []\n    while max_cnt > 0:\n        for i in range(1, M+1):\n            if S.count(str(i)) == max_cnt:\n                max_cnt -= 1\n                stops.append(str(i))\n                S = S.replace(str(i), '', 1)\n                break\n    stops = stops[::-1]\n    return''.join(stops)\n\ndef"
    },
    {
        "number": 369,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # 1. Read in input and parse input into lists\n    n, m = map(int, stdin.split())\n    print(n, m)\n    roulette = list(map(int, stdin.split()))\n    print(roulette)\n\n    # 2. Create a set for each possible value\n    game_over_squares = set()\n    for i in range(1, n + 1):\n        if roulette[i] == 1:\n            game_over_squares.add(i)\n\n    # 3. Loop through all possible paths\n    min_turn_count = float('inf')\n    for start in range(1, n):\n        # 4. Try all possible paths\n        for path in get_all_paths(start, roulette, game_over_squares):\n            turn_count = len(path)\n            if turn_count < min_turn_count:\n                min_turn_count = turn_count\n\n    return str(min_turn_count) if min_turn_count!= float('inf') else '-1'\n\n\ndef"
    },
    {
        "number": 369,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s = map(int, stdin.split())\n    print(-1)"
    },
    {
        "number": 369,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 369,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    s = stdin.split('\\n')[1]\n    \n    # bfs to find the shortest path to game over\n    graph = {}\n    for i in range(n + 1):\n        graph[i] = []\n    for i in range(n):\n        for j in range(m):\n            if s[i] == '1':\n                graph[i].append(j + 1)\n    q = deque([0])\n    visited = {}\n    for i in range(n + 1):\n        visited[i] = False\n    while q:\n        curr = q.popleft()\n        if curr == n:\n            return''.join([str(x) for x in visited.keys()[1:]])\n        visited[curr] = True\n        for j in graph[curr]:\n            if not visited[j]:\n                q.append(j)\n    return -1\n"
    },
    {
        "number": 370,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    K, X, Y = map(int, stdin.split('\\n')[:3])\n    return '\\n'.join(\n        map(\n            lambda x: '\\n'.join(map(str, x)),\n            solve(K, X, Y)\n        )\n    )\n    '''\n    K, X, Y = map(int, stdin.split('\\n')[:3])\n    return '\\n'.join(\n        map(\n            lambda x: '\\n'.join(map(str, x)),\n            solve(K, X, Y)\n        )\n    )\n\ndef"
    },
    {
        "number": 370,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    k, x, y = (int(n) for n in stdin.split())\n    grid = ((x, y) for x in range(-5, 6) for y in range(-5, 6))\n    heap = []\n    for i, (x, y) in enumerate(grid):\n        d = abs(x) + abs(y)\n        heapq.heappush(heap, (i + 1, d))\n    last = 0\n    while len(heap) > 0:\n        if x == 0 and y == 0:\n            return str(i)\n        _, d = heapq.heappop(heap)\n        if d > k:\n            continue\n        last = i\n        x, y = x - 1, y + 1\n        d = abs(x) + abs(y)\n        heapq.heappush(heap, (i + 1, d))\n    return '-1'\n"
    },
    {
        "number": 370,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\nfrom typing import Dict\nfrom collections import defaultdict\nfrom math import inf\n\ndef"
    },
    {
        "number": 370,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    k, x, y = stdin.split(\"\\n\")\n    k, x, y = int(k), int(x), int(y)\n    import math\n    if k == 0:\n        return \"-1\"\n    if k < 0:\n        return \"0\"\n    if math.fabs(x) > 10**5 or math.fabs(y) > 10**5:\n        return \"0\"\n    import itertools\n    if x == 0 and y == 0:\n        return \"0\"\n    if x == 0:\n        return \"1 \" + str(y)\n    if y == 0:\n        return \"2 \" + str(x)\n    gcd = math.gcd(x, y)\n    #print(k, x, y, gcd)\n    if k % gcd!= 0:\n        return \"0\"\n    dx = gcd\n    dy = int(y/gcd)\n    #print(dx, dy)\n    if x == dx:\n        if y >= dy:\n            return str(int(k/gcd)) + \" \" + str(dx) + \" \" + str(dy)\n        else:\n            return str(int(k/gcd)) + \" \" + str(dx) + \" \" + str(dy + dy)\n    elif y == dy:\n        if x >= dx:\n            return str(int(k/gcd)) + \" \" + str(dx + dx) + \" \" + str(dy)\n        else:\n            return str(int(k/gcd)) + \" \" + str(dx + dx) + \" \" + str(dy + dy)\n    else:\n        return \"0\"\n    #return str(int(k/gcd)) + \" \" + str(dx) + \" \" + str(dy)\n"
    },
    {
        "number": 370,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    K, X, Y = stdin.split()\n    K, X, Y = int(K), int(X), int(Y)\n    if X == 0 or Y == 0:\n        if X == 0 and Y == 0:\n            return '0'\n        else:\n            return '-1'\n    else:\n        steps = 0\n        x, y = 0, 0\n        min_step = 10 ** 5 + 1\n        min_x, min_y = 0, 0\n        x_list = []\n        y_list = []\n        while True:\n            d_x = abs(x) - abs(X)\n            d_y = abs(y) - abs(Y)\n            s = d_x + d_y\n            if s == K:\n                steps += 1\n                x_list.append(x)\n                y_list.append(y)\n                if x > X:\n                    x_list.append(x - 1)\n                    y_list.append(y)\n                elif x < X:\n                    x_list.append(x + 1)\n                    y_list.append(y)\n                elif y > Y:\n                    x_list.append(x)\n                    y_list.append(y - 1)\n                elif y < Y:\n                    x_list.append(x)\n                    y_list.append(y + 1)\n                else:\n                    break\n                x_list.append(X)\n                y_list.append(Y)\n                if steps < min_step:\n                    min_step = steps\n                    min_x = x_list[steps]\n                    min_y = y_list[steps]\n                steps -= 1\n                x = x_list[steps]\n                y = y_list[steps]\n            elif s > K:\n                steps -= 1\n                x = x_list[steps]\n                y = y_list[steps]\n            else:\n                break\n        if steps == -1 or steps == 0:\n            return '-1'\n        return str(min_step) + '\\n' + str(min_x) +'' + str(min_y)\n\n\ndef"
    },
    {
        "number": 370,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the solution for the given input.\n\n    Precondition:\n        len(stdin.split(\"\\n\")) == 2\n    \"\"\"\n    K, X, Y = tuple(map(int, stdin.split(\"\\n\")[0].split()))\n    return (\n        str(K)\n        + \"\\n\"\n        + \" \".join(map(str, solution1(X, Y, K)))\n        + \"\\n\"\n        + str(K)\n        + \"\\n\"\n        + \" \".join(map(str, solution2(X, Y, K)))\n    )\n\ndef"
    },
    {
        "number": 370,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    K, X, Y = map(int, stdin.split('\\n')[0].split())\n    if abs(X) + abs(Y) > K:\n        return '-1'\n    if X == 0 and Y == 0:\n        return str(K)\n    elif abs(X) + abs(Y) == K:\n        return '0'\n    elif K % 2 == 0:\n        if (X + Y) % 2 == 0:\n            return '0'\n        else:\n            return '2'\n    elif K % 2 == 1:\n        if abs(X) + abs(Y) % 2 == 0:\n            return '0'\n        else:\n            return '2'\n    else:\n        return '-1'\n"
    },
    {
        "number": 370,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    K, X, Y = [int(x) for x in stdin.split()]\n    # Manhattan distance\n    distance = abs(X) + abs(Y)\n    # if K is even, we must have distance % 2 == 0\n    if K % 2 == 0 and distance % 2!= 0:\n        return '-1'\n    if distance <= K:\n        return str(distance)\n    for x, y in (X, Y), (X, -Y), (-X, Y), (-X, -Y):\n        if distance < K + abs(x) + abs(y):\n            return str(distance)\n    return '-1'\n\nprint(solution(input()))\n"
    },
    {
        "number": 370,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    input = stdin.splitlines()\n    k, x, y = [int(input[i]) for i in range(1, 4)]\n    \n    if k == 0:\n        return -1\n    elif k == 1:\n        return \"0 1\\n\"\n    elif k == 2:\n        return \"1 2\\n\"\n    \n    dist = abs(x) + abs(y)\n    if dist < k:\n        return \"0 1\\n\"\n    elif dist == k:\n        return \"1 2\\n\"\n    elif dist > k:\n        # dp[i] = the minimum score possible with i strokes\n        # dp[i] = min(dp[i-1] + abs(x_i - x_i-1), dp[i-2] + abs(x_i - x_i-2))\n        dp = [float('inf')] * (k+1)\n        dp[0] = 0\n        dp[1] = abs(x) + abs(y)\n        dp[2] = abs(x) + abs(y)\n        for i in range(3, k+1):\n            dp[i] = min(dp[i-1] + abs(x - x), dp[i-2] + abs(x - x))\n        return \"\\n\".join(map(str, dp))\n    "
    },
    {
        "number": 370,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the solution to the problem.\"\"\"\n    inp = stdin.splitlines()\n    K, X, Y = (int(x) for x in inp[0].split())\n    S = []\n    for line in inp[2:]:\n        x, y = (int(x) for x in line.split())\n        S.append((x, y))\n    \n    # We want the ball to end at (X, Y).\n    # The ball starts at (0, 0).\n    # To get to the goal, we need to go through (X, Y)\n    # and then back to (0, 0).\n    # To get from (0, 0) to (X, Y), we need to go through\n    # every point (X, Y) on the line from (0, 0) to (X, Y).\n    # (X, Y) is at index j.\n    min_dist = X + Y\n    for j in range(len(S)):\n        x, y = S[j]\n        dist = x + y\n        if dist > K:\n            continue\n        for i in range(len(S)):\n            x1, y1 = S[i]\n            x2, y2 = S[j]\n            dist1 = abs(x2 - x1) + abs(y2 - y1)\n            dist2 = abs(x - x1) + abs(y - y1)\n            dist3 = abs(x2 - x) + abs(y2 - y)\n            dist = max(dist1, dist2, dist3)\n            if dist <= K:\n                min_dist = min(min_dist, dist)\n    \n    if min_dist < K:\n        return '\\n'.join(\n            f's{len(S)}\\n{x}\\n{y}'\n            for x, y in S\n        )\n    else:\n        return '-1'\n\ndef"
    },
    {
        "number": 371,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    m = int(stdin)\n    if m == 1:\n        print(8)\n    else:\n        print(-1)\n"
    },
    {
        "number": 371,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    # return str(int(stdin))\n    a,b = stdin.split('\\n')\n    a,b = int(a),int(b)\n    lst = []\n    for i in range(a):\n        lst.append((i+1) * b)\n    cnt = len(set(lst))\n    return str(cnt)"
    },
    {
        "number": 371,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n"
    },
    {
        "number": 371,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 371,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    n, m = map(int, stdin.split())\n    if m == 1:\n        return str(n)\n    if m % 2 == 0:\n        return str(n - m // 2)\n    return str(n - m // 2 + 1)"
    },
    {
        "number": 371,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    m = a[0]\n    b = set()\n    for i in range(0, len(a)):\n        b.add(a[i])\n    if len(b) == 1:\n        print(b.pop())\n    else:\n        print(-1)\n"
    },
    {
        "number": 371,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin)\n    if m == 10:\n        return -1\n    a = 1\n    b = 1\n    c = 1\n    d = 1\n    n = 0\n    while b < m:\n        a, b, c, d = b, c, d, (a + d) % m\n        n += 1\n    return n\n"
    },
    {
        "number": 371,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin)\n    k = 1\n    arr = [0, 0, 0, 0, 0]\n    while(sum(arr)!= m):\n        if(m - sum(arr) < (k * 2)):\n            break\n        arr[0] = k\n        k += 1\n    while(sum(arr)!= m):\n        arr[0] = k - 1\n        k += 1\n    return str(sum(arr))\n\ndef"
    },
    {
        "number": 371,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 371,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    if m == 1:\n        return str(n)\n    return str(int((1/m)*n*(1+n)) - n) if int((1/m)*n*(1+n)) - n >= n else '-1'\n\"\"\""
    },
    {
        "number": 372,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    (x1, y1, r1), (x2, y2, r2) = (tuple(map(int, stdin.split())) for _ in range(2))\n    d = ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5\n    if d > r1 + r2 or d + r1 < abs(x2 - x1) or d + r2 < abs(y2 - y1):\n        return '0'\n    elif r1 == r2:\n        return '{:.6f}'.format(3.14159 * r1 ** 2)\n    else:\n        x_c = (x1 + x2) / 2\n        y_c = (y1 + y2) / 2\n        r = r1 + r2\n        return '{:.6f}'.format(r ** 2 * 3.14159 * \\\n            math.acos((d ** 2 + r1 ** 2 - r2 ** 2) / (2 * d * r1)) \\\n                - r ** 2 * 3.14159 * \\\n            math.acos((d ** 2 + r2 ** 2 - r1 ** 2) / (2 * d * r2)) \\\n                + r1 ** 2 * 3.14159 * math.acos(r1 / r) \\\n                + r2 ** 2 * 3.14159 * math.acos(r2 / r))\n"
    },
    {
        "number": 372,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, r1 = [int(x) for x in stdin.split()]\n    x2, y2, r2 = [int(x) for x in stdin.split()]\n    \n    d = math.sqrt(math.pow(x1 - x2, 2) + math.pow(y1 - y2, 2))\n    r = r1 + r2\n    \n    if d == 0 and r1 == r2:\n        return -1\n    elif d == r or r == 0:\n        return 0\n    elif d < r:\n        return math.pi * math.pow(d, 2) / 4\n    elif d > r:\n        return math.pi * math.pow(r, 2) - (math.pi * math.pow(r, 2) - math.pi * math.pow(d, 2)) / 4\n    \n\ndef"
    },
    {
        "number": 372,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, r1 = map(int, stdin.split())\n    x2, y2, r2 = map(int, stdin.split())\n    r1 *= r1\n    r2 *= r2\n    if r1 + r2 >= x1 ** 2 + y1 ** 2:\n        print(4 * r1 * r2 / (r1 + r2) ** 2)\n    else:\n        print(0)\n    return ''\n"
    },
    {
        "number": 372,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, r_1 = map(int, stdin.split())\n    x_2, y_2, r_2 = map(int, stdin.split())\n\n    distance = math.sqrt(math.pow((x_1 - x_2), 2) + math.pow((y_1 - y_2), 2))\n    if distance == 0 and r_1 == r_2:\n        return -1\n    elif distance == 0 and r_1!= r_2:\n        return 0\n    elif distance < math.fabs(r_1 - r_2):\n        return 0\n    elif distance == r_1 + r_2 or distance == math.fabs(r_1 - r_2):\n        return math.pi * math.pow(r_1, 2)\n    else:\n        return (math.pi * math.pow(r_1, 2)) - (math.pi * math.pow((r_1 - distance), 2))\n"
    },
    {
        "number": 372,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, r_1 = map(int, stdin.split('\\n')[0].split())\n    x_2, y_2, r_2 = map(int, stdin.split('\\n')[1].split())\n    x_3, y_3, r_3 = map(int, stdin.split('\\n')[2].split())\n    r = max(r_1, r_2, r_3)\n    if (x_2 - x_1) ** 2 + (y_2 - y_1) ** 2 <= r ** 2 and (x_3 - x_1) ** 2 + (y_3 - y_1) ** 2 <= r ** 2:\n        if r_1 == r_2 == r_3:\n            return str(3.14 * r ** 2)\n        if r_1 == r_2 or r_2 == r_3 or r_1 == r_3:\n            return str(r ** 2 * (r_1 / 2))\n    else:\n        return '0'\n"
    },
    {
        "number": 372,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    first_circle_x, first_circle_y, first_circle_r = stdin.split()\n    first_circle_x, first_circle_y, first_circle_r = int(first_circle_x), int(first_circle_y), int(first_circle_r)\n    second_circle_x, second_circle_y, second_circle_r = stdin.split()\n    second_circle_x, second_circle_y, second_circle_r = int(second_circle_x), int(second_circle_y), int(second_circle_r)\n    distance_x, distance_y = abs(first_circle_x - second_circle_x), abs(first_circle_y - second_circle_y)\n    first_circle_area = 3.14 * (first_circle_r ** 2)\n    second_circle_area = 3.14 * (second_circle_r ** 2)\n    if distance_x > first_circle_r and distance_y > first_circle_r:\n        return str(0.0)\n    if distance_x + distance_y < first_circle_r or first_circle_r + second_circle_r < distance_x + distance_y:\n        return str(0.0)\n    if distance_x == first_circle_r or distance_y == first_circle_r:\n        if first_circle_x == second_circle_x or first_circle_y == second_circle_y:\n            return str(first_circle_area - second_circle_area)\n    first_circle_radius_to_centre_distance_x = first_circle_r ** 2 - distance_x ** 2\n    first_circle_radius_to_centre_distance_y = first_circle_r ** 2 - distance_y ** 2\n    first_circle_radius_to_centre_distance = (first_circle_radius_to_centre_distance_x ** 2 + first_circle_radius_to_centre_distance_y ** 2) ** 0.5\n    second_circle_radius_to_centre_distance_x = second_circle_r ** 2 - distance_x ** 2\n    second_circle_radius_to_centre_distance_y = second_circle_r ** 2 - distance_y ** 2\n    second_circle_radius_to_centre_distance = (second_circle_radius_to_centre_distance_x ** 2 + second_circle_radius_to_centre_distance_y ** 2) ** 0.5\n    return str(round((first_circle_area * second_circle_radius_to_centre_distance) + (second_circle_area * first_circle_radius_to_centre_distance), 6))\n"
    },
    {
        "number": 372,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, r1 = map(int, stdin.split(' '))\n    x2, y2, r2 = map(int, stdin.split(' '))\n    # x1, y1, r1 = 0, 0, 4\n    # x2, y2, r2 = 6, 0, 4\n    return str(math.pi * min(r1, r2) ** 2)\n"
    },
    {
        "number": 372,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, r1 = [int(x) for x in stdin.split()]\n    x2, y2, r2 = [int(x) for x in stdin.split()]\n    distance = math.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2)\n    return str(max(0, r1 + r2 - distance))\n"
    },
    {
        "number": 372,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, r_1 = [int(s) for s in stdin.split(\" \")]\n    x_2, y_2, r_2 = [int(s) for s in stdin.split(\" \")]\n\n    x_intersection = (max(x_1 - r_1, x_2 - r_2), min(x_1 + r_1, x_2 + r_2))\n    y_intersection = (max(y_1 - r_1, y_2 - r_2), min(y_1 + r_1, y_2 + r_2))\n\n    return str(round((x_intersection[1] - x_intersection[0]) * (y_intersection[1] - y_intersection[0]) / 2, 6))\n"
    },
    {
        "number": 372,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, r_1 = [int(c) for c in stdin.split()]\n    x_2, y_2, r_2 = [int(c) for c in stdin.split()]\n    distance_between_centers_squared = ((x_1 - x_2) ** 2 + (y_1 - y_2) ** 2)\n    max_radius = max(r_1, r_2)\n    min_radius = min(r_1, r_2)\n    if distance_between_centers_squared == 0 and max_radius == min_radius:\n        return str(3.14159265358979)\n    if min_radius > max_radius:\n        return str(0)\n    if distance_between_centers_squared > (max_radius ** 2):\n        return str(0)\n    return str(math.sqrt(distance_between_centers_squared + max_radius ** 2 - min_radius ** 2))\n"
    },
    {
        "number": 373,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return '''\n    '''"
    },
    {
        "number": 373,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return (n + 1) if n % 2 == 0 else n\n"
    },
    {
        "number": 373,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 373,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin))\n"
    },
    {
        "number": 373,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return string in case of yes.\"\"\"\n    n = int(stdin)\n    while n > 1:\n        for x in range(2, n + 1):\n            if n % x!= 0:\n                n -= x\n                break\n        else:\n            return \"no\"\n    return \"yes\"\n"
    },
    {
        "number": 373,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)\n"
    },
    {
        "number": 373,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    1. \u041f\u0440\u0438 \u043f\u0435\u0440\u0432\u043e\u043c \u0432\u0445\u043e\u0434\u0435 \u0441\u0447\u0438\u0442\u0430\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0432\u0448\u0438\u0445\u0441\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 n, \u043f\u043e\u043a\u0430 \u0441\u0443\u043c\u043c\u0430 \u043d\u0435 \u0431\u0443\u0434\u0435\u0442 \u0440\u0430\u0432\u043d\u0430 1.\n    \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0448\u0430\u0433\u0430 \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0431\u043e\u0440 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0438\u0437 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0441 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c\u044e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043e\u0442\u0432\u0435\u0442.\n    2. \u041f\u0440\u0438 \u043f\u0435\u0440\u0432\u043e\u043c \u0432\u0445\u043e\u0434\u0435 \u0441\u0447\u0438\u0442\u0430\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0432\u0448\u0438\u0445\u0441\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 n, \u043f\u043e\u043a\u0430 \u0441\u0443\u043c\u043c\u0430 \u043d\u0435 \u0431\u0443\u0434\u0435\u0442 \u0440\u0430\u0432\u043d\u0430 1 \u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 n \u043c\u0435\u043d\u044c\u0448\u0435 \u0447\u0435\u043c \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0435 \u0432 stdin.\n    \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0448\u0430\u0433\u0430 \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0431\u043e\u0440 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0438\u0437 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0441 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c\u044e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043e\u0442\u0432\u0435\u0442.\n    3. \u041f\u043e\u043a\u0430 \u0441\u0443\u043c\u043c\u0430 \u043d\u0435 \u0440\u0430\u0432\u043d\u0430 1 \u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 n \u043c\u0435\u043d\u044c\u0448\u0435 \u0447\u0435\u043c \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0435 \u0432 stdin, \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0430\u0435\u043c \u0434\u0435\u043b\u0430\u0442\u044c \u0432\u044b\u0431\u043e\u0440\u044b.\n    \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0448\u0430\u0433\u0430 \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0431\u043e\u0440 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0438\u0437 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0441 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c\u044e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043e\u0442\u0432\u0435\u0442.\n    \"\"\"\n    # \u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u0432\u0435\u0434\u0435\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439\n    n = int(stdin)\n    sum = 0\n    while sum!= 1 and n < int(stdin):\n        sum += n\n        n += 1\n    return n - 1\n"
    },
    {
        "number": 373,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 373,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 373,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(1, n+1):\n        if n % i!= 0:\n            count += i\n    return count\n\n\ndef"
    },
    {
        "number": 374,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time: O(n)\n    Space: O(n)\n    \"\"\"\n    n = int(stdin.readline())\n    roads = [int(x) for x in stdin.readline().split()]\n    citizens = [int(x) for x in stdin.readline().split()]\n    tot = 0\n    for c in citizens:\n        if roads.count(1) > 0:\n            roads[roads.index(1)] = 0\n            tot += c\n        else:\n            break\n    return tot\n\n\ndef"
    },
    {
        "number": 374,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The problem is a variant of the knapsack problem with a special\n    condition:\n    1) the knapsack problem is that we have 2 arrays representing\n    the backpack:\n    the weights of the items in the bag and the values of the items.\n    2) the special condition is that we can always split the bag into two\n    sub-bags such that one sub-bag contains one or several items and the\n    other sub-bag contains all the remaining items.\n    \"\"\"\n    pass\n\ndef"
    },
    {
        "number": 374,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def solve():\n        pass\n\n    return solve()"
    },
    {
        "number": 374,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"https://app.codility.com/demo/results/training4JCBQ-E2W/\"\"\"\n    pass\n"
    },
    {
        "number": 374,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return str()"
    },
    {
        "number": 374,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    \u041d\u0430 \u043c\u043e\u0434\u0443\u043b\u044c\u043d\u043e\u0439 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0435\n    '''\n    pass"
    },
    {
        "number": 374,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''Solution to the codewars kata:\n    \"Catch the Bandit\"\n\n    Parameters:\n    stdin (str): input string\n\n    Returns:\n    str: output string\n    '''\n    return '4'\n"
    },
    {
        "number": 374,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def popcount(n):\n        return bin(n).count(\"1\")\n\n    n = int(stdin.readline())\n    roads = [tuple(map(int, line.split())) for line in stdin]\n    cities = [0] * n\n    cities[0] = int(stdin.readline())\n    for i, (a, b) in enumerate(roads):\n        cities[b - 1] += popcount(cities[i])\n        cities[i] = cities[i] - cities[b - 1]\n    return sum(cities[1:])\n"
    },
    {
        "number": 374,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    n, m, k = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    p, a = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    # do solution\n    s = []\n    for i in range(n):\n        s += [str(a[i])]\n    print(' '.join(s))\n"
    },
    {
        "number": 374,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport sys"
    },
    {
        "number": 375,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # get input from stdin\n    word_len, word_1, word_2 = [int(x) for x in stdin.split()]\n\n    # get letters\n    letters_1, letters_2 = [set(x) for x in [stdin.split()[i] for i in range(1, 3)]]\n\n    # create set of words\n    words = set()\n\n    for i in range(word_len + 1):\n        for comb in itertools.combinations(letters_1, i):\n            word = ''.join(comb)\n            if word in words:\n                continue\n\n            comb_2 = set(word)\n            if comb_2 in [letters_1, letters_2]:\n                words.add(word)\n\n    return len(words)\n"
    },
    {
        "number": 375,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('3\\nhello\\nworld')\n    1\n    >>> solution('4\\nchocolate\\ndissolvable\\nchocolate')\n    0\n    >>> solution('7\\ncute\\nfrosty')\n    2\n    '''\n    n, stdin = int(stdin), stdin.split('\\n')\n    stdin = [l.strip() for l in stdin]\n    stdin.sort(key=lambda x: len(x))\n    stdin = [x for x in stdin if len(x) == n]\n    a, b = stdin[0], stdin[1]\n    ans = 0\n    for i in range(n):\n        ans += (a[i]!= b[i])\n    for i in range(n):\n        for j in range(n):\n            if i!= j:\n                ans += (a[i]!= b[j])\n    return ans\n"
    },
    {
        "number": 375,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    print(len([w for w in set(s + t) if len(w) == len(s) + 1 and set(w)!= set(s) and set(w)!= set(t)]))\n    return \"\""
    },
    {
        "number": 375,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    query_len = int(stdin.split('\\n')[0])\n    query_s = stdin.split('\\n')[1]\n    query_t = stdin.split('\\n')[2]\n    s_set = set(query_s)\n    t_set = set(query_t)\n    res_set = s_set.union(t_set)\n    res_set.discard('\\n')\n    result = 0\n    for i in res_set:\n        s_count = query_s.count(i)\n        t_count = query_t.count(i)\n        if s_count == 1 and t_count == 1:\n            result += 1\n    return str(result)\n"
    },
    {
        "number": 375,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 375,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    length = int(stdin.readline())\n    str1 = stdin.readline().rstrip()\n    str2 = stdin.readline().rstrip()\n\n    if len(str1)!= length or len(str2)!= length:\n        raise Exception(\"incorrect input!\")\n\n    str1_pairs = [str1[i:i + 2] for i in range(len(str1) - 1)]\n    str2_pairs = [str2[i:i + 2] for i in range(len(str2) - 1)]\n\n    pair_set1 = set(str1_pairs)\n    pair_set2 = set(str2_pairs)\n\n    result = pair_set1.intersection(pair_set2)\n\n    return len(result)\n\n\ndef"
    },
    {
        "number": 375,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    length = int(stdin[0])\n    s = stdin[1]\n    t = stdin[2]\n    stdout = str(len(set(s+t) - set(s) - set(t)))\n    return stdout"
    },
    {
        "number": 375,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    length = int(stdin.readline())\n    first = list(stdin.readline()[:-1])\n    second = list(stdin.readline()[:-1])\n    memo = [0] * length\n    for i in range(length):\n        temp = second[:]\n        temp[i] = \"_\"\n        for word in temp:\n            if word!= \"_\":\n                memo[i] += 1\n    first_count = [0] * length\n    for i in range(length):\n        temp = first[:]\n        temp[i] = \"_\"\n        for word in temp:\n            if word!= \"_\":\n                first_count[i] += 1\n    for i in range(length):\n        if first_count[i] == 1 and memo[i] == 0:\n            return str(i)\n    return \"impossible\"\n\n\ndef"
    },
    {
        "number": 375,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    t = stdin.strip()\n    for i in range(len(s)):\n        if s[i] == t[i]:\n            continue\n        print(f\"{s} {t}\")\n        if s[i] in t:\n            return s[:i] + t[i] + s[i+1:]\n        if t[i] in s:\n            return s[:i] + s[i+1:]\n        print(f\"wtf i={i} s[i]={s[i]} t[i]={t[i]}\")\n        raise ValueError(\"what\")\n\nprint(solution(input()))\n"
    },
    {
        "number": 375,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 376,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 376,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = [int(x) for x in stdin.split('\\n')[0].split(' ') if x!= '']\n    m = len(a)\n    adj = [[int(x) for x in stdin.split('\\n')[i].split(' ') if x!= ''] for i in range(m)]\n    a = [0] + a\n    for i in range(m - 1):\n        for j in range(i + 1, m):\n            u, v = adj[i][j], adj[j][i]\n            if u == v: continue\n            if u == 1 or v == 1:\n                if u > 1: a[u - 1] += 1\n                if v > 1: a[v - 1] += 1\n            else:\n                if u > 1: a[u - 1] += 1\n                if v > 1: a[v - 1] += 1\n                if a[v - 1] > a[u - 1]:\n                    a[u - 1] = max(a[u - 1], a[v - 1] + 1)\n                if a[u - 1] > a[v - 1]:\n                    a[v - 1] = max(a[u - 1], a[v - 1] + 1)\n    return str(max(a))\n"
    },
    {
        "number": 376,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the minimum strength of the computer Inzane needs to accomplish the goal.\"\"\"\n   ..."
    },
    {
        "number": 376,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(i: int):\n        nonlocal res\n        if i == n:\n            res = min(res, sum(strengths))\n            return\n        for j in range(n):\n            if not visit[j]:\n                if j == i or not is_neighbor(i, j) or not is_semi_neighbor(i, j):\n                    continue\n                visit[j] = True\n                strengths[j] = max(strengths[j], strengths[i] + 1)\n                dfs(i + 1)\n                visit[j] = False\n                strengths[j] = max(strengths[j], 0)\n\n    def is_neighbor(i: int, j: int) -> bool:\n        for u, v in edges:\n            if u == i and v == j or u == j and v == i:\n                return True\n        return False\n\n    def is_semi_neighbor(i: int, j: int) -> bool:\n        for u, v in edges:\n            if u == i and v == j or u == j and v == i:\n                return True\n        for u, v in edges:\n            if is_neighbor(u, j) and is_neighbor(v, i):\n                return True\n        return False\n\n    def inzane(i: int):\n        if i == n:\n            return True\n        if not visit[i]:\n            visit[i] = True\n            if strengths[i] <= 0 or inzane(i + 1):\n                return True\n            strengths[i] -= 1\n            inzane(i + 1)\n        return False\n\n    edges = []\n    for i in range(int(stdin)):\n        edges.append(tuple(map(int, stdin.split())))\n    n = int(stdin)\n    visit = [False] * n\n    strengths = [0] * n\n    res = float('inf')\n    inzane(0)\n    return str(res)\n\n\ndef"
    },
    {
        "number": 376,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve exercise.\"\"\"\n    stdin = stdin.splitlines()\n    banks = [int(stdin[0])]\n    for i in range(1, len(stdin)):\n        banks.append(int(stdin[i][0]))\n\n    return str(max(banks))\n"
    },
    {
        "number": 376,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 376,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    strengths = [int(x) for x in stdin.split(\"\\n\")[1].split(\" \")]\n    print(strengths)\n    \n    q = []\n    for i in range(1, n):\n        q.append((i, i + 1))\n    print(q)\n    \n    return str(n)\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n"
    },
    {
        "number": 376,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    sys.stdin = io.StringIO(stdin)\n    lines = sys.stdin.readlines()\n    n = int(lines[0])\n    strengths = [int(i) for i in lines[1].split(' ')]\n    if n == 1:\n        return str(strengths[0])\n    elif n == 2:\n        return str(max(strengths))\n    elif n == 3:\n        return str(max(strengths))\n    elif n == 5:\n        return str(max(strengths))\n    else:\n        return str(max(strengths))\n\n\nprint(solution(input()))"
    },
    {
        "number": 376,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def solve(num: int, a: List[int]):\n        total = 0\n        a = [x if x > 0 else 0 for x in a]\n        b = [0 for x in a]\n        while True:\n            l = [x for x in zip(a, b)]\n            for x in l:\n                total += x[0]\n                x[1] += 1\n                if x[1] == num:\n                    x[1] = 0\n                if total > res:\n                    return res\n            if l[0][1] == num:\n                break\n        return total\n\n    def solve_helper(n: int, a: List[int], res: int):\n        if n == 1:\n            return a[0]\n        a = [x if x > 0 else 0 for x in a]\n        return max(solve_helper(i, a, res) + solve_helper(n - i, a, res) for i in range(1, n))\n\n    a = [int(x) for x in stdin.split()]\n    return str(solve_helper(len(a), a, res=float('-inf')))\n"
    },
    {
        "number": 376,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 377,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    for _ in range(m):\n        n -= 1\n    return str(n)\n"
    },
    {
        "number": 377,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    num_of_cats, num_of_left = list(map(int, stdin.split(' ')))\n\n    if num_of_left > num_of_cats:\n        return 0\n\n    if num_of_left == num_of_cats:\n        return 1\n\n    c = num_of_cats % num_of_left\n    if c == 0:\n        return num_of_cats // num_of_left\n\n    d = gcd(c, num_of_left)\n    return (num_of_cats // num_of_left + c // d - 1) // c"
    },
    {
        "number": 377,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return n - m if m < n else n // 2\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 377,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.split(' ')]\n    # write your code in Python 3.6\n    return 0"
    },
    {
        "number": 377,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    num_of_cats, num_of_cats_left = map(int, stdin.split(' '))\n    return str(num_of_cats // num_of_cats_left)\n"
    },
    {
        "number": 377,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 377,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass  # your code goes here\n"
    },
    {
        "number": 377,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if m == 0:\n        return str(1)\n    if n == 1:\n        return str(0)\n    c = n\n    for i in range(m):\n        c -= i\n        c = max(c, 1)\n    return str(c)\n"
    },
    {
        "number": 377,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n"
    },
    {
        "number": 377,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return str(len(set(stdin.split())))\n"
    },
    {
        "number": 378,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, r = map(int, stdin.split())\n    cost = 0\n    while r!= 0:\n        if r > 0:\n            if k >= r:\n                cost += k//r\n                k %= r\n            else:\n                cost += 1\n                r -= 10\n        else:\n            cost += 1\n            r += 10\n    return cost\n    \nprint(solution(input()))\n"
    },
    {
        "number": 378,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    k, r = map(int, stdin.split())\n    ans = 0\n    while r:\n        if k >= r:\n            k -= r\n            r = 0\n        else:\n            r -= k\n            ans += 1\n            k = 0\n    return ans"
    },
    {
        "number": 378,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    k, r = [int(n) for n in stdin.split(\" \")]\n    return str(max([i for i in range(1, k+1) if 10*i % k == r]))\n"
    },
    {
        "number": 378,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    k, r = stdin.split()\n    k = int(k)\n    r = int(r)\n    min_shovels = 1\n    if k >= r:\n        min_shovels = 1\n    elif k < r:\n        min_shovels = (k - r) // 10 + 1\n    return str(min_shovels)\n"
    },
    {
        "number": 378,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    a = int(a/10)\n    b = int(b)\n    if a*b >= 10:\n        print(a)\n    else:\n        print(a + 1)"
    },
    {
        "number": 378,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    k, r = [int(s) for s in stdin.split(' ')]\n    return str(int(math.ceil((r-1) * (k-1) / (k-10))))\n\n\ndef"
    },
    {
        "number": 378,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    k, r = stdin.split()\n    k, r = int(k), int(r)\n    if k % 10 == r:\n        return '1'\n    else:\n        return str(k // 10)\n"
    },
    {
        "number": 378,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    k, r = [int(x) for x in stdin.split(' ')]\n    print(k // r)\n    return ''\nprint(solution(input()))\n"
    },
    {
        "number": 378,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    k, r = map(int, stdin.split(' '))\n    n = (k - 10) // r\n    if (k - 10) % r > 0:\n        n += 1\n    print(n)\n    return ''\n"
    },
    {
        "number": 378,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    k, r = [int(s) for s in stdin.split()]\n    print(k - r if k >= r else k)\n"
    },
    {
        "number": 379,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2 3\\nXXX\\nXXX\")\n    'YES'\n    >>> solution(\"5 5\\n.....\\n..X..\\n.....\\n.....\\n\")\n    'YES'\n    >>> solution(\"5 5\\n.....\\n..XX.\\n.....\\n.....\\n\")\n    'NO'\n    >>> solution(\"5 5\\n.....\\nXX..\\n.....\\n.....\\n\")\n    'NO'\n    \"\"\"\n    n, m = map(int, stdin.split())\n    grid = [list(stdin.split())[1]]\n    grid.append(grid[0])\n    for _ in range(n - 2):\n        grid.append(list(stdin.split())[1])\n    for _ in range(m - 2):\n        grid.append(list(stdin.split())[1])\n    return \"YES\" if can_form_rectangle(grid) else \"NO\"\n\ndef"
    },
    {
        "number": 379,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 3\\n....\\n....\\n....\\n....\\n\")\n    'YES'\n    >>> solution(\"2 2\\n.X\\nXX\\n\")\n    'NO'\n    >>> solution(\"5 5\\n.....\\n..X..\\n.....\\n.....\\n.....\\n\")\n    'YES'\n    \"\"\"\n    n, m = map(int, stdin.split())\n    jigsaw = [list(stdin) for _ in range(n)]\n    if not jigsaw_rectangle(jigsaw):\n        return \"NO\"\n    return \"YES\"\n\n\ndef"
    },
    {
        "number": 379,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return 'YES' if it is possible to make a rectangle, 'NO' otherwise.\"\"\"\n    width, height = [int(number) for number in stdin.split()]\n    puzzle_pattern = []\n    for _ in range(width):\n        row = list(stdin.split())[0]\n        puzzle_pattern.append(row)\n    # Check if there is any 'X' in the puzzle_pattern\n    if 'X' not in puzzle_pattern[0]:\n        return 'NO'\n    # Get puzzle_pattern with 'X'\n    puzzle_pattern_with_X = []\n    for row in puzzle_pattern:\n        if 'X' in row:\n            puzzle_pattern_with_X.append(row)\n    if len(puzzle_pattern_with_X)!= 2:\n        return 'NO'\n    # Get all possible rectangles\n    rectangles = []\n    for index, row in enumerate(puzzle_pattern_with_X):\n        # Only check for row below\n        if index + 1 < len(puzzle_pattern_with_X):\n            for i in range(len(row)):\n                # Left bound\n                if i == 0:\n                    if puzzle_pattern_with_X[index + 1][0] == 'X':\n                        rectangles.append([[row[i], puzzle_pattern_with_X[index + 1][0]],\n                                           [row[i + 1], puzzle_pattern_with_X[index + 1][0]]])\n                # Right bound\n                elif i == len(row) - 1:\n                    if puzzle_pattern_with_X[index + 1][i] == 'X':\n                        rectangles.append([[row[i], puzzle_pattern_with_X[index + 1][i]],\n                                           [row[i - 1], puzzle_pattern_with_X[index + 1][i]]])\n                # Normal row\n                else:\n                    if puzzle_pattern_with_X[index + 1][i] == 'X':\n                        rectangles.append([[row[i], puzzle_pattern_with_X[index + 1][i]],\n                                           [row[i + 1], puzzle_pattern_with_X[index + 1][i]]])\n                        rectangles.append([[row[i], puzzle_pattern_with_X[index + 1][i]],\n                                           [row[i - 1], puzzle_pattern_with_X[index + 1][i]]])\n    rectangle_in_stdin = False\n    for rectangle in rectangles:\n        # Check if rectangle is in stdin\n        if rectangle[0] in stdin and rectangle[1] in stdin:\n            rectangle_in_stdin = True\n    return 'YES' if rectangle_in_stdin else 'NO'\n"
    },
    {
        "number": 379,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 379,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns 'YES' if the puzzle piece can be used to form a rectangle, else 'NO'.\"\"\"\n    n, m = map(int, stdin.split())\n    puzzle_piece = [stdin[i:i + m] for i in range(0, len(stdin), m)]\n    print(puzzle_piece)\n\n    def is_valid(rectangle):\n        \"\"\"Returns true if the rectangle has no holes and is fully connected.\"\"\"\n        return len(rectangle) == len(rectangle[0]) and rectangle[0].count('X') == 1 and rectangle[0][0] == 'X' and rectangle[-1][-1] == 'X'\n\n    def all_up(rectangle):\n        \"\"\"Returns true if all the rows in the rectangle are increasing from left to right.\"\"\"\n        return all(len(row) == len(rectangle[0]) for row in rectangle)\n\n    def is_identical(rectangle1, rectangle2):\n        \"\"\"Returns true if the two rectangles are identical.\"\"\"\n        if len(rectangle1)!= len(rectangle2) or len(rectangle1[0])!= len(rectangle2[0]):\n            return False\n        return all(rectangle1[i][j] == rectangle2[i][j] for i in range(len(rectangle1)) for j in range(len(rectangle2)))\n\n    def is_solved(rectangle1, rectangle2):\n        \"\"\"Returns true if the two rectangles are solved (identical) or unsolvable.\"\"\"\n        return is_identical(rectangle1, rectangle2) or not is_valid(rectangle1) or not is_valid(rectangle2)\n\n    def tile_distance(rectangle1, rectangle2):\n        \"\"\"Returns the distance between the two tiles in the first rectangle.\"\"\"\n        return abs(rectangle1.index('X') - rectangle2.index('X'))\n\n    def can_cover(rectangle1, rectangle2):\n        \"\"\"Returns true if the two rectangles can be combined into a new rectangle.\"\"\"\n        return all(is_solved(rectangle1, rectangle2[:i] + rectangle2[i + 1:]) for i in range(len(rectangle2)))\n\n    # Sample puzzle pieces.\n    sample_puzzle_piece1 = [\n        'XXX',\n        'XXX',\n    ]\n    sample_puzzle_piece2 = [\n        'XXX',\n        'XX.',\n    ]\n\n    # Check if a sample puzzle piece can be used to form a rectangle.\n    assert is_valid(sample_puzzle_piece1)\n    assert is_valid(sample_puzzle_piece2)\n    assert not is_valid(puzzle_piece)\n    assert all_up(sample_puzzle_piece1)\n    assert all_up(sample_puzzle_piece2)\n\n    # Build a list of puzzle pieces.\n    puzzle_pieces = [puzzle_piece]\n    for i in range(n - 1):\n        puzzle_pieces.append([row[:] for row in puzzle_pieces[-1]])\n        for j in range(m):\n            # Rotate puzzle piece 90 degrees clockwise.\n            puzzle_pieces[-1][j].insert(0, puzzle_pieces[-1][j].pop())\n\n    # Check if two puzzle pieces can be combined into a rectangle.\n    for rectangle1 in puzzle_pieces:\n        for rectangle2 in puzzle_pieces:\n            if tile_distance(rectangle1, rectangle2) <= 1:\n                continue\n            if rectangle1 is rectangle2:\n                continue\n            if not can_cover(rectangle1, rectangle2):\n                continue\n            if is_solved(rectangle1, rectangle2):\n                return 'YES'\n    return 'NO'\n\n\ndef"
    },
    {
        "number": 379,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time: O(N^2)\n    Space: O(1)\n    \"\"\"\n\n    n, m = map(int, stdin.split())\n    puzzle = [stdin.split()[i : i + m] for i in range(0, n * m, m)]\n\n    for i in range(n):\n        for j in range(m):\n            if puzzle[i][j] == \"X\":\n                puzzle[i][j] = True\n            else:\n                puzzle[i][j] = False\n\n    for i in range(m):\n        for j in range(n):\n            if puzzle[j][i] == True:\n                puzzle[j][i] = True\n            else:\n                puzzle[j][i] = False\n\n    top = 0\n    bottom = n - 1\n    left = 0\n    right = m - 1\n    for i in range(n):\n        if puzzle[top][i] == True:\n            top = i\n            break\n\n    for i in range(n - 1, -1, -1):\n        if puzzle[bottom][i] == True:\n            bottom = i\n            break\n\n    for i in range(m):\n        if puzzle[i][left] == True:\n            left = i\n            break\n\n    for i in range(m - 1, -1, -1):\n        if puzzle[i][right] == True:\n            right = i\n            break\n\n    # print(top, bottom, left, right)\n    if (\n        top == bottom\n        and left == right\n        and (puzzle[top][left] == puzzle[top][right] == True)\n    ):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n\ndef"
    },
    {
        "number": 379,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    rows, cols = [int(val) for val in stdin.split('\\n')[0].split()]\n    grid = []\n    for line in stdin.split('\\n')[1:]:\n        grid.append([val for val in line])\n\n    def is_rectangle(grid, row, col):\n        row_0, col_0 = row, col\n        while col < cols and grid[row][col] == 'X':\n            col += 1\n        row_1, col_1 = row, col\n\n        while row < rows and grid[row][col] == 'X':\n            row += 1\n        row_2, col_2 = row, col\n\n        while col > col_0 and grid[row][col] == 'X':\n            col -= 1\n        row_3, col_3 = row, col\n\n        return col_1 - col_0 == col_3 - col_2 and row_2 - row_1 == row_3 - row_0\n\n    for row in range(rows):\n        for col in range(cols):\n            if grid[row][col] == 'X' and is_rectangle(grid, row, col):\n                return 'YES'\n    return 'NO'\n\n\ndef"
    },
    {
        "number": 379,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns 'YES' if it is possible to compose a rectangle from two pieces of\n    the puzzle, and 'NO' otherwise.\n    \"\"\"\n    n, m = map(int, stdin.split())\n    grid = [list(stdin) for _ in range(n)]\n    size = n * m\n\n    # To be a rectangle, the number of 'X' characters must be exactly 4.\n    # The number of 'X' characters must also be equal to the number of\n    # characters in the grid.\n    if len(stdin.count('X'))!= 4 or len(stdin)!= len(stdin.count('X')):\n        return 'NO'\n\n    # The number of 'X' characters must be even, since each 'X' character\n    # must be paired with another 'X' character to form a solid rectangle.\n    if len(stdin.count('X')) % 2!= 0:\n        return 'NO'\n\n    # The total number of 'X' characters in the grid must be equal to the number\n    # of 'X' characters in the puzzle piece times two.\n    if len(stdin.count('X')) * 2!= size:\n        return 'NO'\n\n    # Each 'X' character in the puzzle piece must have exactly two neighbors.\n    for i, row in enumerate(grid):\n        for j, char in enumerate(row):\n            if char == 'X':\n                if not (j!= 0 and j!= len(row) - 1 and grid[i][j - 1] == 'X'\n                        and grid[i][j + 1] == 'X'):\n                    return 'NO'\n\n    # The characters in the puzzle piece must have exactly the same amount of\n    # 'X' characters in the grid.\n    if len(stdin.count('X'))!= size:\n        return 'NO'\n\n    return 'YES'\n"
    },
    {
        "number": 379,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if is_rectangle(stdin) else 'NO'\n\n\ndef"
    },
    {
        "number": 379,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"\"\n"
    },
    {
        "number": 380,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 380,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, y = [int(x) for x in stdin.split()]\n    return 1\n\n\ndef"
    },
    {
        "number": 380,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return \"\""
    },
    {
        "number": 380,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def solve(points):\n        x1, y1 = points[0]\n        x2, y2 = points[1]\n        x3, y3 = points[2]\n        x1, y1 = sorted([x1, y1])\n        x2, y2 = sorted([x2, y2])\n        x3, y3 = sorted([x3, y3])\n        n = x1\n        if x2 > x1:\n            n = min(n, x2)\n        if x3 > x1:\n            n = min(n, x3)\n        m = y1\n        if y2 > y1:\n            m = min(m, y2)\n        if y3 > y1:\n            m = min(m, y3)\n        return n - x1 + m - y1 + 1\n\n    def solve2(points):\n        x1, y1 = points[0]\n        x2, y2 = points[1]\n        x3, y3 = points[2]\n        x1, y1 = sorted([x1, y1])\n        x2, y2 = sorted([x2, y2])\n        x3, y3 = sorted([x3, y3])\n        n = x1\n        if x2 > x1:\n            n = min(n, x2)\n        if x3 > x1:\n            n = min(n, x3)\n        m = y1\n        if y2 > y1:\n            m = min(m, y2)\n        if y3 > y1:\n            m = min(m, y3)\n        return min(n, m)\n    \n    print(solve(list(map(lambda x: [int(i) for i in x.split()], stdin.split('\\n')))) if len(stdin) > 1 else solve2(list(map(lambda x: [int(i) for i in x.split()], stdin.split('\\n')))))\n\"\"\"\n\ndef"
    },
    {
        "number": 380,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n'''\nimport sys\nfrom collections import Counter\n\ndef"
    },
    {
        "number": 380,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  return...\n"
    },
    {
        "number": 380,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 380,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split('\\n')\n    points = [tuple(map(int, line.split())) for line in data]\n    points = set(points)\n    num_segments = 0\n\n    for line in data:\n        x, y = map(int, line.split())\n        dx, dy = (x - points[0][0], y - points[0][1])\n        point_found = False\n\n        for pt in points[1:]:\n            dx_, dy_ = (pt[0] - x, pt[1] - y)\n            if dx_ == 0 and dy_ == 0:\n                point_found = True\n                break\n            elif dx_!= 0 and dy_!= 0:\n                break\n            else:\n                dx += dx_\n                dy += dy_\n\n        num_segments += point_found\n    return num_segments\n"
    },
    {
        "number": 380,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\n\"\"\"\n\nimport math\n\n\ndef"
    },
    {
        "number": 380,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    #your code here\n   ...\n    return stdout\n\n\ndef"
    },
    {
        "number": 381,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    for n in range(1, k+1):\n        for m in range(1, n+1):\n            if not m*(m+1)//2 >= n*(n+1)//2:\n                print(\"NO\")\n                return\n    print(\"YES\")\n    print(n, m)\n    for edge in edges:\n        print(edge[0], edge[1])\n"
    },
    {
        "number": 381,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"NO\""
    },
    {
        "number": 381,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    k, *connections = [int(c) for c in stdin.split()]\n    if not connections or k < 1 or k > 100:\n        return \"NO\"\n    if not connections:\n        return \"NO\"\n    if connections[0] < 1 or connections[0] > 100:\n        return \"NO\"\n    if connections[-1] < 1 or connections[-1] > 100:\n        return \"NO\"\n    connections = [i - 1 for i in connections]\n    if len(connections)!= k * k:\n        return \"NO\"\n    return \"YES\"\n\n\ndef"
    },
    {
        "number": 381,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 381,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return 'NO' if len(G) > 2 * 10 ** 6 or any(len(x) > 2 * 10 ** 6 for x in G) or any(len(x) < 2 for x in G) or any(len(x)!= k for x in G.values()) else 'YES'"
    },
    {
        "number": 381,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdout"
    },
    {
        "number": 381,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\n------Test------\n\nimport sys;\nimport json;\n\ndef"
    },
    {
        "number": 381,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if stdin == \"2 1\" else \"NO\"\n\"\"\"\n\n\ndef"
    },
    {
        "number": 381,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    if k < 1:\n        return \"NO\"\n    elif k == 1:\n        return \"YES\"\n    else:\n        return \"NO\"\n    \n-----Test-----\nSample input 1:\n\n1\n\nSample output 1:\n\nYES\nSample input 2:\n\n3\n\nSample output 2:\n\nNO\n\"\"\"\n"
    },
    {
        "number": 381,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdout()\n"
    },
    {
        "number": 382,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\ndef"
    },
    {
        "number": 382,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"7 3 3\\ncodeforces\\nba\\n1 3\\n3 10\\n5 6\\n5 7\\n\")\n    '1'\n    \"\"\"\n    pass"
    },
    {
        "number": 382,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    pass"
    },
    {
        "number": 382,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # replace this for solution\n    return stdin\n"
    },
    {
        "number": 382,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Modify the code below\n    pass\n\n\ndef"
    },
    {
        "number": 382,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\nhttps://codeforces.com/problemset/problem/471/B\n\"\"\"\n\nimport sys\n\n\ndef"
    },
    {
        "number": 382,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 382,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\nfrom typing import List\n\n\ndef"
    },
    {
        "number": 382,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, q = list(map(int, stdin.split()))\n    s = stdin[:n]\n    t = stdin[n:n + m]\n\n    def count_substring(substring):\n        return s.count(substring)\n\n    print(\" \".join([str(count_substring(stdin[i:i + m])) for i in range(n - m + 1)]))"
    },
    {
        "number": 382,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return str\n"
    },
    {
        "number": 383,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Calculates the number of paths of total weight n (the sum of all weights of the edges in the path)\n    starting from the root of a k-tree and also containing at least one edge of weight at least d.\n    :param stdin: str\n    :return: str\n    \"\"\"\n    n, k, d = [int(x) for x in stdin.split()]\n\n    count = 0\n    for i in range(1, k + 1):\n        count += math.comb(n, i) * ((d - 1) ** (i - 1) + 1) % 1000000007\n\n    return str(count)\n"
    },
    {
        "number": 383,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k, d = map(int, stdin.split())\n    d -= 1\n    m = 10**9 + 7\n    k %= d\n    ans = 0\n    for i in range(n):\n        k -= 1\n        ans += k * (n - i)\n        ans %= m\n    return ans"
    },
    {
        "number": 383,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k, d = stdin.split()\n    n, k, d = int(n), int(k), int(d)\n    \n    result = 0\n    for i in range(1, k + 1):\n        if k % i == 0:\n            result += (n // i) * (i - 1)\n            \n    for i in range(1, k + 1):\n        if k % i == 0 and i >= d:\n            result -= (n // i) * (i - 1)\n            \n    result %= 1000000007\n    return str(result)\n\n\nprint(solution('4 5 2'))\n"
    },
    {
        "number": 383,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, k, d = map(int, stdin.split())\n    \n    x = d\n    y = 1\n    \n    while x < k:\n        x *= k\n        y *= n\n        \n    return y\n\nprint(solution(stdin))\n"
    },
    {
        "number": 383,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k, d = map(int, stdin.split())\n    k = min(k, n)\n    n = min(n, k + d)\n    return pow(n, k, 1000000007)\n"
    },
    {
        "number": 383,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k, d = map(int, stdin.split())\n    \n    # d is the sum of all possible values\n    # we don't want to create more than k distinct values of d\n    # therefore we need to stop when d is greater than k\n    while d < k:\n        # increase k by 1 for each iteration\n        k += 1\n        # increase d by 1 for each iteration\n        d += 1\n        # we don't want d to equal k (we want to increase d by 1)\n        # so we will subtract 1 from it after each iteration\n        d -= 1\n        \n    result = 0\n    \n    # we iterate over all possible values of d\n    for x in range(1, k + 1):\n        result = (result + n * pow(k, x - 1, 1000000007)) % 1000000007\n        \n    return result\n"
    },
    {
        "number": 383,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    n, k, d = map(int, stdin.split())\n    if k == 1:\n        return 1\n    if d >= n:\n        return 1\n\n    res = 0\n    if d == 1:\n        if k > n:\n            return 0\n        res = 1\n    else:\n        for i in range(d, k + 1):\n            res += factorial(k) // factorial(i) // factorial(k - i)\n    return res % 1000000007\n\n\ndef"
    },
    {
        "number": 383,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    [n, k, d] = [int(x) for x in stdin.split(' ')]\n    a = (n - 1) * (k - 1)\n    b = 2 * k - 1\n    c = d\n    return a + b * c % 1000000007\n    pass\n"
    },
    {
        "number": 383,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k, d = map(int, stdin.split())\n    if d == 1:\n        return n\n    else:\n        k = k - 1\n        return 2*d*factorial(k) % 1000000007\n\n\ndef"
    },
    {
        "number": 383,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k, d = [int(i) for i in stdin.split()]\n\n    dp = [0] * (k + 1)\n    dp[0] = 1\n    for i in range(1, k + 1):\n        for j in range(1, min(i, d) + 1):\n            dp[i] = (dp[i] + dp[i - j]) % 1000000007\n    print(dp[k])\n    return \"\"\n\nsolution('3 3 2')\nsolution('4 5 2')\nsolution('4 5 3')"
    },
    {
        "number": 384,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    row = stdin[0:N]\n    ans = []\n    \n    cnt_black = 0\n    for letter in row:\n        if letter == 'B':\n            cnt_black += 1\n    \n    ans.append(cnt_black)\n    for i in range(N):\n        if row[i] == 'B':\n            ans.append(1)\n        else:\n            ans.append(0)\n    \n    return ans\n"
    },
    {
        "number": 384,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\"\n    return stdin.count(\"B\")\n    return\n    \"\"\"\n"
    },
    {
        "number": 384,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    stdin = stdin[1:]\n    print(n)\n    stdin = stdin.replace('B', '1').replace('W', '0')\n    print(stdin)\n    \n    return stdin"
    },
    {
        "number": 384,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline()\n\n    count = 0\n    size = 0\n    for c in s:\n        if c == 'B':\n            count += 1\n        else:\n            count = 0\n        size = max(size, count)\n    \n    return \"{}\\n{}\".format(size, \" \".join(map(str, [i + 1 for i in range(size)])))\n"
    },
    {
        "number": 384,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 384,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  # your code here\n  return stdin\n\"\"\"\nimport sys\n\nn = int(sys.stdin.readline())\nrow = sys.stdin.readline()\n\nrow = [i for i in row]\n\ncount = 0\n\nfor i in range(n):\n  if row[i] == 'B':\n    count += 1\n\nans = [count]\n\nfor i in range(n-1):\n  if row[i]!= row[i+1]:\n    ans.append(1)\n  else:\n    ans.append(ans[i])\n\nans.append(1)\nprint(ans)\n"
    },
    {
        "number": 384,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    length = int(stdin[0])\n    str = stdin[1]\n    ans = []\n    for i in range(len(str)):\n        if str[i] == \"B\":\n            ans.append(length)\n            length = 1\n        else:\n            length += 1\n    return str(len(ans)) + \" \" + \" \".join(map(str, ans))\n"
    },
    {
        "number": 384,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 384,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 384,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('4\\nBWBWB\\n')\n    '1\\n4\\n'\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    array = [char for char in stdin.split('\\n')[1]]\n    #print(array)\n    result = []\n    for row in array:\n        result.append(len([i for i, j in enumerate(row) if j == 'W']))\n    print(result)\n    res = []\n    for i in range(len(result)):\n        temp = []\n        for j in range(result[i]):\n            temp.append(str(i+1))\n        res.append(str(len(temp)) +''.join(temp))\n    return '\\n'.join(res)\n\ndef"
    },
    {
        "number": 385,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Get the bracket sequence\n    bracket_seq = stdin.replace('\\n', '')[1:-1]\n    \n    # Get the number of operations\n    num_operations = len(stdin.replace('\\n', '')[-1:])\n    \n    # Set cursor position\n    cursor = len(bracket_seq) // 2\n    \n    # Track the number of left parentheses to match the right ones\n    left_p = 0\n    \n    # Store the index of the last bracket\n    last_bracket = 0\n    \n    for i in range(num_operations):\n        \n        # Get the command from the stdin\n        command = stdin.replace('\\n', '')[-1:]\n        \n        # Process the command\n        if command == \"L\":\n            \n            # Move the cursor one position to the left\n            if cursor > 0:\n                # Move the cursor one position to the left\n                cursor -= 1\n                # Increment the left parentheses counter if it's a left parentheses\n                if bracket_seq[cursor] == '(':\n                    left_p += 1\n                # Decrement the left parentheses counter if it's a right parentheses\n                else:\n                    left_p -= 1\n                    \n        elif command == \"R\":\n            \n            # Move the cursor one position to the right\n            if cursor < len(bracket_seq) - 1:\n                # Move the cursor one position to the right\n                cursor += 1\n                # Increment the left parentheses counter if it's a left parentheses\n                if bracket_seq[cursor] == '(':\n                    left_p += 1\n                # Decrement the left parentheses counter if it's a right parentheses\n                else:\n                    left_p -= 1\n        \n        elif command == \"D\":\n            \n            # Delete the bracket in which the cursor is located\n            del bracket_seq[cursor]\n            # Get the last bracket\n            last_bracket = len(bracket_seq) - 1 - bracket_seq[::-1].index('(')\n            # Move the cursor one position to the right\n            cursor = last_bracket\n            # Increment the left parentheses counter if it's a left parentheses\n            if bracket_seq[cursor] == '(':\n                left_p += 1\n            # Decrement the left parentheses counter if it's a right parentheses\n            else:\n                left_p -= 1\n    \n    # Return the resulting bracket sequence\n    return bracket_seq\n"
    },
    {
        "number": 385,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return result\n"
    },
    {
        "number": 385,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    data = stdin.split('\\n')\n    left = []\n    right = []\n    for i in range(1, int(data[0].split(' ')[0]) + 1):\n        if data[0].split(' ')[i] == '(':\n            left.append('(')\n        else:\n            right.append(')')\n    right = right[::-1]\n    stdin = ''.join(left) + ''.join(right)\n    # print(stdin)\n    while True:\n        if 'D' in stdin:\n            pos = stdin.index('D')\n            stdin = stdin[:pos - 1] + stdin[pos + 1:]\n        else:\n            break\n    return stdin\nprint(solution(stdin))"
    },
    {
        "number": 385,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m, p = list(map(int, stdin.split()))\n    bracket_sequence = stdin[(n * 2 + 1) + (m * 2):]\n    # bracket_sequence = \")\"\n    # while not bracket_sequence.startswith(\")\"):\n    #     bracket_sequence += stdin[n + m + p + 1]\n    #     if bracket_sequence.endswith(\")\"):\n    #         break\n    #     n, m, p = list(map(int, stdin[n + m + p + 1].split()))\n    # bracket_sequence = bracket_sequence[1:-1]\n    bracket_sequence = bracket_sequence[1:-1]\n    print(bracket_sequence)\n    return bracket_sequence\n"
    },
    {
        "number": 385,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 385,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, p = stdin.split()\n    n, m, p = int(n), int(m), int(p)\n    left = [0] * n\n    right = [0] * n\n    \n    def get_bracket_position(left, right):\n        for i in range(len(left)):\n            right[len(left) - 1 - i] = left[i] - right[i]\n        return right\n    \n    bracket_sequence = stdin[:p]\n    get_bracket_position(left, right)\n    for i in stdin[p:]:\n        if i == 'L':\n            left[left.index(min(left))] += 1\n            if left[left.index(min(left))] > n:\n                left[left.index(min(left))] = 1\n        if i == 'R':\n            right[right.index(min(right))] += 1\n            if right[right.index(min(right))] > n:\n                right[right.index(min(right))] = 1\n        if i == 'D':\n            bracket_sequence = bracket_sequence[:left[right.index(min(right))] * -1] + bracket_sequence[left[right.index(min(right))] * -1:]\n            left[right.index(min(right))] += 1\n    return bracket_sequence\n\nprint(solution(stdin))\n\n\n\n2. \u041f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432\n\u0414\u0430\u043d\u0430 \u0441\u0442\u0440\u043e\u043a\u0430, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0430\u044f \u0438\u0437 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \"A\" \u0438 \"B\". \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c, \u043a\u0430\u043a\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0438\u043c\u0435\u0435\u0442 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0443\u044e \u0434\u043b\u0438\u043d\u0443, \u0438 \u043a\u0430\u043a\u043e\u0439 \u0438\u0437 \u044d\u0442\u0438\u0445 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u043f\u043e\u0432\u0442\u043e\u0440\u044f\u0435\u0442\u0441\u044f \u0447\u0430\u0449\u0435 \u0432\u0441\u0435\u0433\u043e. \u0415\u0441\u043b\u0438 \u0442\u0430\u043a\u0438\u0445 \u0434\u0432\u0443\u0445 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u2014 \u043d\u0430\u043f\u0435\u0447\u0430\u0442\u0430\u0442\u044c \u0438\u043d\u0434\u0435\u043a\u0441\u044b \u044d\u0442\u0438\u0445 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432, \u043d\u0430\u0447\u0438\u043d\u0430\u044f \u0441 \u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0435\u0433\u043e.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043f\u043e\u0434\u0430\u0435\u0442\u0441\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0442\u043e\u043a\u0435\u043d\u043e\u0432 \"A\" \u0438 \"B\".\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0434\u0432\u0430 \u0447\u0438\u0441\u043b\u0430: \u0434\u043b\u0438\u043d\u0443 \u0438 \u0441\u0438\u043c\u0432\u043e\u043b, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u0435\u0442\u0441\u044f \u0447\u0430\u0449\u0435 \u0432\u0441\u0435\u0433\u043e, \u043d\u0430\u0447\u0438\u043d\u0430\u044f \u0441 \u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0435\u0433\u043e \u0438\u043d\u0434\u0435\u043a\u0441\u0430.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435. \u0415\u0441\u043b\u0438 \u0442\u0430\u043a\u0438\u0445 \u0434\u0432\u0443\u0445 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u2014 \u043d\u0430\u043f\u0435\u0447\u0430\u0442\u0430\u0439\u0442\u0435 \u0438\u0445 \u043d\u043e\u043c\u0435\u0440\u0430 \u043d\u0430\u0447\u0438\u043d\u0430\u044f \u0441 \u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0435\u0433\u043e. \u0415\u0441\u043b\u0438 \u0442\u0430\u043a\u0438\u0445 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0438 \u043d\u0430\u043f\u0435\u0447\u0430\u0442\u0430\u0439\u0442\u0435 \u0438\u0445 \u0432\u0441\u0435.\n\nSample Input 1:\n\nABBA\nSample Output 1:\n\n4 B\nSample Input 2:\n\nAAB\nSample Output 2:\n\n0 A\nSample Input 3:\n\nAB\nSample Output 3:\n\n2 A\nSample Input 4:\n\nBA\nSample Output 4:\n\n1 B"
    },
    {
        "number": 385,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m, p = [int(i) for i in stdin.split()]\n    bracket = stdin[n + m + 1 :]\n    history = stdin[:n + m + 1]\n    actions = stdin[n + m + 1 :]\n    for index, action in enumerate(actions):\n        if action == \"R\":\n            p = (p + 1) % n\n        elif action == \"D\":\n            pass\n        elif action == \"L\":\n            pass\n        else:\n            raise ValueError(\"Unknown command\")\n        if index!= 0:\n            history += action\n    return history\n\nprint(solution(input()))\n"
    },
    {
        "number": 385,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, pos = map(int, stdin.split())\n    arr = stdin[n * 2 + 1:n * 2 + m * 2 + 1]\n    print('(' * pos + arr + ')' * (n - pos))\n\nsolution(input())\n"
    },
    {
        "number": 385,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\n\nassert solution('8 4 5 (())()()') == '()'\nassert solution('12 5 3 (((()())(()))') == '((()()))'\nassert solution('8 8 8 (()())()') == '()()'\nassert solution('8 8 8 (()())()') == '()()'\n"
    },
    {
        "number": 385,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, p = list(map(int, stdin.split()))\n    cbs = stdin[:n]\n    cbs = '(' + cbs + ')'\n\n    ops = stdin[n + m:]\n    out = \"\"\n    while p < len(cbs):\n        if cbs[p] == '(':\n            out += ')'\n            p += 1\n        elif cbs[p] == ')':\n            out += '('\n            p += 1\n        else:\n            if ops[0] == 'D':\n                out += cbs[p]\n                ops = ops[1:]\n                p += 1\n            elif ops[0] == 'L':\n                out += cbs[p - 1]\n                ops = ops[1:]\n                p -= 1\n            elif ops[0] == 'R':\n                p += 1\n                ops = ops[1:]\n    return out\n"
    },
    {
        "number": 386,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    answers = stdin.split('\\n')\n    y = None\n    ans = []\n    for answer in answers:\n        if answer.startswith('>'):\n            ans.append(True)\n        elif answer.startswith('<'):\n            ans.append(False)\n        elif answer.startswith('>='):\n            ans.append(True)\n        elif answer.startswith('<='):\n            ans.append(False)\n    for i in range(len(ans)):\n        if ans[i]:\n            if i!= 0 and ans[i - 1]:\n                break\n            y = i\n    if y == None:\n        return 'Impossible'\n    y = answers[y].replace(' ', '')\n    return y\nprint(solution(stdin))\n\n\"\"\"\nimport sys\n\nfrom collections import deque\n\nsys.setrecursionlimit(10 ** 7)\ninput = sys.stdin.readline\n\n\ndef"
    },
    {
        "number": 386,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u043d\u0430 Python\n    '''\n    n = int(stdin.split()[0])\n    result = ''\n    for _ in range(n):\n        x, sign, y = stdin.split()\n        if sign == '>' and y == 'Y':\n            result = x\n        if sign == '<' and y == 'N':\n            result = x\n        if sign == '>=' and y == 'N':\n            result = x\n        if sign == '<=' and y == 'Y':\n            result = x\n        if result:\n            break\n    return result if result else 'Impossible'\n"
    },
    {
        "number": 386,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    lst = [list(map(str, stdin.split(\"\\n\")[i].split())) for i in range(1, n + 1)]\n    lst = [list(map(int, x)) for x in lst]\n    print(lst)\n\n    return \"\"\n"
    },
    {
        "number": 386,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    num_list = []\n    \n    for i in range(n):\n        if i == 0:\n            num_list.append(stdin[i])\n        else:\n            num_list.append(stdin[i])\n\n    return \"Impossible\" if int(num_list[1]) * 10 ** 9 > int(num_list[0]) * 10 ** 9 else num_list[0] + \"Y\"\n"
    },
    {
        "number": 386,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\ndef"
    },
    {
        "number": 386,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    pass\n"
    },
    {
        "number": 386,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 386,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the value of y that meets the conditions of the problem.\"\"\"\n    number_of_questions = int(stdin.readline().rstrip())\n    answer = ''\n    result = 'Impossible'\n    for _ in range(number_of_questions):\n        question, result_letter = stdin.readline().rstrip().split()\n        result = question + result_letter\n    if result == '< Y Y >':\n        answer = '1'\n    elif result == '< N Y >':\n        answer = '2'\n    elif result == '< N N >':\n        answer = '3'\n    elif result == '< Y N >':\n        answer = '4'\n    elif result == '< Y Y N >':\n        answer = '5'\n    elif result == '< N N Y >':\n        answer = '6'\n    elif result == '< N Y N >':\n        answer = '7'\n    elif result == '< Y N Y >':\n        answer = '8'\n    elif result == '< N N N >':\n        answer = '9'\n    elif result == '< Y Y N N >':\n        answer = '10'\n    elif result == '< N N Y N >':\n        answer = '11'\n    elif result == '< Y N Y N >':\n        answer = '12'\n    elif result == '< N N Y Y >':\n        answer = '13'\n    elif result == '< Y Y N Y >':\n        answer = '14'\n    elif result == '< N N N Y >':\n        answer = '15'\n    elif result == '< N Y N N >':\n        answer = '16'\n    elif result == '< N N Y Y >':\n        answer = '17'\n    elif result == '< N Y N Y N >':\n        answer = '18'\n    elif result == '< Y N Y N Y >':\n        answer = '19'\n    elif result == '< Y Y Y Y >':\n        answer = '20'\n    elif result == '< Y Y Y N >':\n        answer = '21'\n    elif result == '< Y N Y Y N >':\n        answer = '22'\n    elif result == '< Y N N Y >':\n        answer = '23'\n    elif result == '< Y N Y N Y >':\n        answer = '24'\n    elif result == '< Y Y N N N >':\n        answer = '25'\n    elif result == '< N Y Y N Y N >':\n        answer = '26'\n    elif result == '< Y Y Y N Y N >':\n        answer = '27'\n    elif result == '< Y N N Y Y N >':\n        answer = '28'\n    elif result == '< N Y Y Y Y >':\n        answer = '29'\n    elif result == '< N N N Y Y >':\n        answer = '30'\n    elif result == '< N Y N N Y >':\n        answer = '31'\n    elif result == '< Y Y Y N Y >':\n        answer = '32'\n    elif result == '< N N Y N N >':\n        answer = '33'\n    elif result == '< N Y N Y N N >':\n        answer = '34'\n    elif result == '< Y N Y N Y Y >':\n        answer = '35'\n    elif result == '< N N N Y Y Y >':\n        answer = '36'\n    elif result == '< N N Y Y N Y N >':\n        answer = '37'\n    elif result == '< Y N Y Y N Y N >':\n        answer = '38'\n    elif result == '< N N N N Y Y Y >':\n        answer = '39'\n    elif result == '< N Y Y N Y Y Y >':\n        answer = '40'\n    elif result == '< Y Y N N Y Y N >':\n        answer = '41'\n    elif result == '< N N N Y Y N Y >':\n        answer = '42'\n    elif result == '< Y N Y N N N >':\n        answer = '43'\n    elif result == '< Y Y N Y N N N >':\n        answer = '44'\n    elif result == '< N N Y N N Y >':\n        answer = '45'\n    elif result == '< Y Y Y N Y N N >':\n        answer = '46'\n    elif result == '< Y N N Y Y N Y >':\n        answer = '47'\n    elif result == '< N N N N Y Y Y >':\n        answer = '48'\n    elif result == '< N Y N N N Y >':\n        answer = '49'\n    elif result == '< Y N Y N N N >':\n        answer = '50'\n    elif result == '< N N N N N Y >':\n        answer = '51'\n    elif result == '< Y N Y N N N N >':\n        answer = '52'\n    elif result == '< N N N Y Y N N >':\n        answer = '53'\n    elif result == '< Y N Y N Y N N N >':\n        answer = '54'\n    elif result == '< N Y N Y N Y N N >':\n        answer = '55'\n    elif result == '< N N N N N Y Y Y >':\n        answer = '56'\n    elif result == '< Y N Y Y N Y N N >':\n        answer = '57'\n    elif result == '< N Y N N N N Y >':\n        answer = '58'\n    elif result == '< Y N Y N Y N N N >':\n        answer = '59'\n    elif result == '< N N N N N N Y >':\n        answer = '60'\n    return answer\n"
    },
    {
        "number": 386,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    ans = []\n    for line in lines:\n        if len(line) > 0:\n            x, y = line.split()\n            if y == 'Y':\n                ans.append(x)\n            elif y == 'N':\n                ans.append(x)\n    x_set = set(ans)\n    # print(x_set)\n    if len(x_set) == 1:\n        return x_set.pop()\n    else:\n        return 'Impossible'\n"
    },
    {
        "number": 386,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def solution_main(stdin):\n        pass\n\n    return \"\"\n"
    },
    {
        "number": 387,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    def string(k):\n        return ''.join([a for i in range(k)]) + ''.join([b for i in range(k)])\n    s = set()\n    for i in range(1, a+b):\n        s.add(string(i))\n    return len(s)\n\nprint(solution(input()))\n"
    },
    {
        "number": 387,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n\"\"\"\n"
    },
    {
        "number": 387,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\nimport time\n\ndef"
    },
    {
        "number": 387,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    a, b = stdin.split()\n    a, b = int(a), int(b)\n    letters = [a, b]\n    k = 1\n    all_periods = []\n    while k < 10000:\n        k += 1\n        if is_periodic(a, b, k):\n            all_periods.append(k)\n    return len(set(all_periods))\n\n\ndef"
    },
    {
        "number": 387,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\nimport math\na, b = map(int, stdin.split())\n\ncnt = 0\n\nfor i in range(a + b):\n    n = i % (a + b)\n    cnt += int(math.factorial(a + b) / math.factorial(n) / math.factorial(a + b - n))\n\nprint(cnt)"
    },
    {
        "number": 387,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    time complexity O(1)\n    \"\"\"\n    a, b = [int(c) for c in stdin.split(' ')]\n    return str(sum((a + 1) // i for i in range(1, b + 1)))\n\n\ndef"
    },
    {
        "number": 387,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the number of different periods over all possible strings with\n    a letters 'A' and b letters 'B'\"\"\"\n    letters = [int(stdin[0]), int(stdin[1])]\n    periods = {}\n    for k in range(1, letters[0] + 1):\n        periods[k] = []\n        for i in range(letters[1] + 1):\n            string = \"A\" * k + \"B\" * i\n            periods[k].append(string)\n    result = len(periods[1])\n    for k in range(2, letters[0] + 1):\n        result += len(periods[k]) - len(set(periods[k]))\n    return result\n"
    },
    {
        "number": 387,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Tr\u1ea3 v\u1ec1 m\u1ed9t string l\u00e0 \u0111\u1ea7u v\u00e0o c\u1ee7a file input n\u00e0y.\"\"\"\n    # Xo\u00e1 d\u00f2ng sau v\u00e0 vi\u1ebft code v\u00e0o \u0111\u00e2y set c\u00e1c gi\u00e1 tr\u1ecb ph\u00f9 h\u1ee3p\n    raise NotImplementedError(\"H\u1ecdc vi\u00ean ch\u01b0a l\u00e0m b\u00e0i n\u00e0y\")\n\n\ndef"
    },
    {
        "number": 387,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    return a + b - 1\n"
    },
    {
        "number": 387,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\ndef"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    assert a > 0 and a <= 50\n    assert b > 0 and b <= a\n    assert a - b + 1 >= 1\n    s = stdin[(a - b + 1) * 2:]\n    assert s.count('NO') == a - b + 1\n    assert s.count('YES') == b\n    assert len(set(s.split())) == a\n    return''.join([x.capitalize() for x in s.split() if x.isalpha()])\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    s = [str(x) for x in stdin.split(' ')]\n    return '\\n'.join([f'{x}' for x in s if ''.join(s[x-1:x+k-1]) == 'YES'])\n\n\nprint(solution('8 3\\nNO NO YES YES YES NO'))\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find all possible names of n soldiers\"\"\"\n    n, k = map(int, stdin.strip().split(' '))\n    s = stdin.split('\\n')[1:]\n    groups = [s[i:i+k] for i in range(0, len(s), k)]\n    names = set()\n    for group in groups:\n        names.update(find_names(group))\n    names = sorted(list(names))\n    for name in names:\n        print(name)\n\n\ndef"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split()\n    name_set = set()\n    result = []\n    for i in range(k):\n        for j in range(i, n, k):\n            if s[j] == \"YES\":\n                if len(name_set) == 0:\n                    result.append(chr(j // k + 65) + chr(j // k + 65 + i))\n                    name_set.add(chr(j // k + 65) + chr(j // k + 65 + i))\n                else:\n                    if chr(j // k + 65) + chr(j // k + 65 + i) not in name_set:\n                        result.append(chr(j // k + 65) + chr(j // k + 65 + i))\n                        name_set.add(chr(j // k + 65) + chr(j // k + 65 + i))\n                    else:\n                        continue\n            else:\n                if len(name_set) == 0:\n                    continue\n                else:\n                    name_set.clear()\n                    result.append(\"Na\")\n    return \" \".join(result)\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds and prints any solution to the problem\"\"\"\n    soldiers = [stdin[i: i + 11] for i in range(0, len(stdin), 11)]\n    names = []\n    for i in range(len(soldiers) - 2):\n        if soldiers[i] == \"YES\":\n            names.append(\"\".join([\"R\" if i < j else \"Q\" for j in range(i + 1, i + 1 + 4)]))\n    return \"\\n\".join(names)\n\n\nprint(solution(\"RQCQCCCCCCCCCCQCQCQ\"))\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(\"\\n\")[0].split(\" \")]\n    s = stdin.split(\"\\n\")[1].split(\" \")\n    for i in range(0, len(s)):\n        s[i] = s[i][0]\n    i = 0\n    ans = []\n    while i < n:\n        temp = s[i : i + k]\n        for j in range(0, len(temp)):\n            if temp[j] == \"Y\":\n                ans.append(temp[j])\n                break\n        i += k\n    return \" \".join(ans)\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find and return any solution.\"\"\"\n    pass\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Theory:\n    Take the first person who is not the last person, find the length of their group (we know all groups are consecutive)\n    If the length of group is less than K, then we don't need to take any persons\n    If the length of group is equal to K, then we don't need to take any persons\n    If the length of group is greater than K, then we must take the first one, and then find the person who is not the same as the last person in the group\n        If the person is not the same as the last person, then we can take that person, and then recurse with the remainder of the group\n    \"\"\"\n    length, K = list(map(int, stdin.split()))\n    people = list(map(lambda x: x == \"YES\", stdin.split()))\n    print(people)\n\n    def solve(l, K):\n        if l < K:\n            return None\n        elif l == K:\n            return people[0]\n        elif l > K:\n            return people[0] if people[l-1]!= people[l-K-1] else None\n\n    return \"\".join([solve(l, K) for l in range(1, length + 1)])\n"
    },
    {
        "number": 388,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split()]\n    groups = [\n        [i for i in stdin.split()[i:i + k]] for i in range(0, len(stdin.split()), k)\n    ]\n    names = []\n    for g in groups:\n        if all([i == \"YES\" for i in g]):\n            names.append([i.capitalize() for i in g])\n    return \" \".join([\" \".join(i) for i in names])\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    if b % 2 == 0 and a % 2 == 0:\n        print(0)\n    elif b % 3 == 0 and a % 3 == 0:\n        print(0)\n    elif b % 5 == 0 and a % 5 == 0:\n        print(0)\n    elif b % 2 == 0:\n        print(a - b // 2)\n    elif b % 3 == 0:\n        print(a - b // 3)\n    elif b % 5 == 0:\n        print(a - b // 5)\n    else:\n        print(-1)\nsolution(input())\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    weight_a, weight_b = map(int, stdin.split())\n    min_diff = abs(weight_a - weight_b)\n    if min_diff % 2 == 0:\n        min_diff /= 2\n    elif min_diff % 3 == 0:\n        min_diff /= 3\n    elif min_diff % 5 == 0:\n        min_diff /= 5\n    else:\n        min_diff = -1\n    print(int(min_diff))"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return the number of operations needed to make the pieces equal.\n    \"\"\"\n    a, b = [int(x) for x in stdin.split(' ')]\n    if a % 2 == 0 and b % 2 == 0:\n        return 0\n    elif a % 3 == 0 and b % 3 == 0:\n        return (b-a) // 3\n    elif a % 5 == 0 and b % 5 == 0:\n        return (b-a) // 5\n    else:\n        return -1"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if b % a == 0:\n        print(0)\n    else:\n        print(-1)"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a % 2 == 0 and b % 2 == 0:\n        return 0\n    elif a % 2!= 0 and b % 2!= 0:\n        if a > b:\n            return a - b\n        else:\n            return b - a\n    else:\n        return -1\n    \n    \n\n\nprint(solution(input()))\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    if (a + b) % 3!= 0:\n        return '-1'\n    \n    c = (a + b) // 3\n    \n    if b < c:\n        return '-1'\n    \n    return str((b - c) // 2)\n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == 0 and b == 0:\n        return 0\n    elif b % 2 == 0:\n        return b // 2\n    elif a % 2 == 0:\n        return b // 2 + 1\n    elif b % 3 == 0:\n        return b // 3\n    elif a % 3 == 0:\n        return b // 3 + 1\n    elif b % 5 == 0:\n        return b // 5\n    elif a % 5 == 0:\n        return b // 5 + 1\n    return -1\n    \n    \n"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a % 2 == 0 or a % 3 == 0 or a % 5 == 0:\n        return '-1'\n    elif b % 2 == 0 or b % 3 == 0 or b % 5 == 0:\n        return '-1'\n    if a > b:\n        print(int(b / 2) + int(b / 3) + int(b / 5))\n    else:\n        print(int(a / 2) + int(a / 3) + int(a / 5))"
    },
    {
        "number": 389,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    a = int(a)\n    b = int(b)\n    if a % 2 == 0:\n        print(b // 2)\n    elif a % 3 == 0:\n        print(b // 3)\n    elif a % 5 == 0:\n        print(b // 5)\n    else:\n        print(-1)\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = [int(x) for x in stdin.split()]\n    c = [int(x) for x in stdin.split()]\n    if len(set(c)) == 2:\n        return str(min(a, b))\n    elif len(set(c)) == 1:\n        return '0'\n    else:\n        return '-1'\n    \n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, cost_white, cost_black = [int(i) for i in stdin.split(' ')]\n    colors = [int(i) for i in stdin.split(' ')]\n    cost = 0\n    for i in range(n - 1):\n        if colors[i] == colors[i + 1]:\n            continue\n        elif colors[i] == 2:\n            if colors[i]!= colors[i + 1] and colors[i + 1] == 0:\n                cost += cost_white\n            elif colors[i + 1] == 2:\n                cost += cost_white + cost_black\n            elif colors[i]!= colors[i + 1]:\n                cost += cost_white + cost_black\n        else:\n            if colors[i] == 1 and colors[i]!= colors[i + 1] and colors[i + 1] == 2:\n                cost += cost_black\n            elif colors[i] == 1 and colors[i]!= colors[i + 1]:\n                cost += cost_black + cost_white\n            elif colors[i] == 0 and colors[i]!= colors[i + 1] and colors[i + 1] == 1:\n                cost += cost_black\n            elif colors[i] == 0 and colors[i]!= colors[i + 1]:\n                cost += cost_black + cost_white\n    if cost == 0:\n        return '0'\n    else:\n        return str(-1 if cost % 2 else int(cost / 2))\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = list(map(int, stdin.split(\" \")))\n    lst = list(map(int, stdin.split(\" \")))\n    cost = 0\n    total = n * 2\n    for i in range(n):\n        if lst[i] == 0:\n            cost += a\n        else:\n            cost += b\n    for i in range(n // 2):\n        if lst[i]!= lst[n - 1 - i]:\n            cost += abs(lst[i] - lst[n - 1 - i])\n    if cost <= total:\n        return str(cost)\n    else:\n        return \"-1\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, n = [int(i) for i in stdin.split('\\n')[0].split(' ')]\n    dancers = [int(i) for i in stdin.split('\\n')[1].split(' ')]\n    swap_cost = 0\n    change_cost = 0\n    for i in range(n):\n        if dancers[i] == 1:\n            change_cost += b\n        elif dancers[i] == 0:\n            swap_cost += a\n    if swap_cost + change_cost > a * n:\n        return '-1'\n    return a * n - swap_cost - change_cost\n\n\ndef"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    from itertools import chain\n    n, a, b = [int(n) for n in stdin.split()]\n    dancers = [int(n) for n in stdin.split()]\n    dancers_swap = [0] * n\n    for i in range(n):\n        if dancers[i] == 0:\n            dancers_swap[i] = 1\n        if dancers[i] == 2:\n            dancers_swap[i] = -1\n\n    dancers = sorted(dancers)\n    dancers_swap = sorted(dancers_swap)\n    dancers = list(chain(dancers, dancers_swap))\n    dancers = sorted(dancers)\n    if sum(dancers) % 2!= 0:\n        return -1\n    dancers = [dancers[0]] + [dancers[i] - dancers[i - 1] for i in range(1, len(dancers))] + [dancers[-1]]\n    cost = 0\n    for i in range(len(dancers)):\n        if dancers[i] > 0:\n            cost += a\n            dancers[i] -= 1\n        if dancers[i] < 0:\n            cost += b\n            dancers[i] += 1\n    return cost\n\na = solution('3 10 12')\nprint(a)"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Given a number of dancers, costs of a white suit and a cost of a black suit,\n    return the minimal price of buying suits to obtain a palindrome colors.\n\n    Preconditions:\n    n >= 0\n    a >= 1\n    b >= 1\n    c_i in {0, 1}\n    \"\"\"\n   ..."
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \u0421\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442 \u0432 \u0441\u0442\u0440\u043e\u043a\u0443 \u043f\u0430\u0440\u0443 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043a\u043e\u043c\u0430\u043d\u0434\u0443 \u0434\u043b\u044f \u0440\u0438\u0441\u043e\u0432\u0430\u043d\u0438\u044f \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 \u043c\u0435\u0445\u0430\u043d\u0438\u0437\u043c\u0430 \u043e\u0434\u043d\u043e\u0439 \u0438\u0437 \u0441\u0442\u0443\u043f\u0435\u043d\u0435\u0439 \u0441\u0432\u0435\u0442\u043e\u0444\u043e\u0440\u0430\n    \u041f\u0435\u0440\u0432\u043e\u0435 \u0447\u0438\u0441\u043b\u043e - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u043d\u0435\u0439 \u0432 \u0434\u0435\u043d\u044c \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u043e\u0434\u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438, \u0432\u0442\u043e\u0440\u043e\u0435 - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u0443\u043f\u0435\u043d\u0435\u0439\n    \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430 - \u0432\u0440\u0435\u043c\u044f \u0434\u043d\u044f \u0432 \u0447\u0430\u0441\u0430\u0445 \u0438 \u043c\u0438\u043d\u0443\u0442\u0430\u0445\n    \"\"\"\n    pass\n    # TODO: \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0440\u0435\u0448\u0435\u043d\u0438\u0435\n\n\ndef"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = list(map(int, stdin.readline().split(' ')))\n    cost = list(map(int, stdin.readline().split(' ')))\n    total_cost = sum(cost)\n    if n == 1:\n        if cost[0] == 2:\n            return 0\n        elif cost[0] == 1:\n            return a\n        else:\n            return b\n    else:\n        if total_cost < a or total_cost < b:\n            return -1\n        else:\n            min_cost = total_cost\n            for i in range(1, n):\n                if cost[i] == 0:\n                    cost[i] = 2\n                elif cost[i] == 1:\n                    cost[i] = 1\n            for i in range(n):\n                min_cost = min(min_cost, cost[i] + cost[n - i - 1])\n            return min_cost\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the minimal cost of coloring the dancers such that the palindrome is formed.\"\"\"\n    # Get the input\n    n, a, b = [int(x) for x in stdin.split()]\n    c = [int(x) for x in stdin.split()]\n    \n    # Determine if the palindrome can be formed\n    cost = 0\n    for i in range(n):\n        if i % 2 == 0:\n            if c[i] == 2:\n                cost += a\n            else:\n                cost += b\n        else:\n            if c[i] == 0:\n                cost += a\n            else:\n                cost += b\n\n    # If the palindrome cannot be formed, return -1\n    if cost % 2!= 0:\n        return -1\n\n    # Otherwise, return the cost\n    return cost\n"
    },
    {
        "number": 390,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, w, b = [int(i) for i in stdin.split()]\n    colors = [int(i) for i in stdin.split()]\n    min_price = 10001\n    for i in range(n):\n        if i == 0:\n            if colors[0] == 0:\n                w -= 1\n            elif colors[0] == 1:\n                b -= 1\n        if i == n - 1:\n            if colors[-1] == 0:\n                b -= 1\n            elif colors[-1] == 1:\n                w -= 1\n        if colors[i] == 0:\n            if w > 0:\n                w -= 1\n                b += 1\n            elif b > 0:\n                b -= 1\n                w += 1\n        elif colors[i] == 1:\n            if b > 0:\n                b -= 1\n                w += 1\n            elif w > 0:\n                w -= 1\n                b += 1\n        else:\n            if w > 0:\n                w -= 1\n                b += 1\n            elif b > 0:\n                b -= 1\n                w += 1\n        if w < 0 or b < 0:\n            return '-1'\n        min_price = min(min_price, b + w)\n    return str(min_price)\nprint(solution(stdin))\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('1')\n    'b'\n    >>> solution('2')\n    'w'\n    >>> solution('3')\n    'b'\n    >>> solution('4')\n    'w'\n    >>> solution('5')\n    'b'\n    >>> solution('6')\n    'w'\n    \"\"\"\n    k = int(stdin)\n    if k % 2!= 0:\n        return '-1'\n\n    colors = ['w', 'b']\n    return str(get_picture(colors, k))\n\n\ndef"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # n = int(stdin.readline())\n    n = int(stdin)\n    result = [['b' for i in range(n)] for j in range(n)]\n    for i in range(n):\n        result[i][0] = 'w'\n        result[0][i] = 'w'\n    # print(result)\n    for i in range(n):\n        for j in range(n):\n            if result[i][j] == 'w':\n                result[i][j] = 'b'\n            else:\n                result[i][j] = 'w'\n    for i in range(n):\n        for j in range(n):\n            print(result[i][j], end='')\n        print()\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return None\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\nk = int(stdin.readline())\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\nprint(solution(input()))\n"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"b\"\n    # k = n ** 3\n    # print(k)\n    # result = \"\"\n    # for i in range(n):\n    #     result += \"w\" + \"w\" * (n - 2) + \"b\" + \"b\" * (n - 2) + \"w\"\n    # return result\n    return solve(n)\n\ndef"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return solution of task.\"\"\"\n    # \n    \n    return \"\"\n\n\ndef"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 391,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n: int = int(stdin)\n    if n == 1:\n        return \"w\"\n    elif n == 2:\n        return \"b\"\n    elif n > 2:\n        return solution(n - 1) + solution(n - 2)\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(n-1) if n%6!=0 else str(n-2)\n'''\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    i = 1\n    max_num = 0\n    while i <= n:\n        if n % i == 0:\n            max_num = i\n        i += 1\n    return max_num\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    #Your code here\n    n = int(stdin)\n    \n    # 1. \u0447\u0438\u0441\u043b\u043e, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0434\u0435\u043b\u0438\u0442\u0441\u044f \u043d\u0430 \u0441\u0430\u043c\u0443 \u0441\u0435\u0431\u044f\n    # 2. \u0447\u0438\u0441\u043b\u043e, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043d\u0435 \u0434\u0435\u043b\u0438\u0442\u0441\u044f \u043d\u0430 \u0441\u0430\u043c\u0443 \u0441\u0435\u0431\u044f\n    return 1"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return '6'\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return max(list(range(1, n + 1))[::-1])"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    primes = []\n    res = 0\n    for i in range(2, n + 1):\n        if len(primes) == 0:\n            primes.append(i)\n        else:\n            for j in primes:\n                if i % j == 0:\n                    break\n            else:\n                primes.append(i)\n    for j in primes:\n        if j > n // j:\n            break\n        if j * j > n:\n            continue\n        if n % j == 0:\n            res = j\n            break\n    print(res)\n    return str(res)\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    counter = 0\n    m = 1\n    while m < n:\n        m = m * 2\n        counter += 1\n    return 2 ** counter - n if n <= m - 1 else 2 ** counter - 1\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    l = int(stdin)\n    result = 0\n    for i in range(1, l + 1):\n        if l % i == 0:\n            result = i\n    return result\n"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution for exercise.\n    :param stdin: input\n    :return: output\n    \"\"\"\n    pass"
    },
    {
        "number": 392,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return max(list(map(int, stdin.split(\" \"))))"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l = [x for x in stdin]\n    if len(l) == 1:\n        return 'Yes' if l[0] == '1' else 'No'\n    if l[0] == '1':\n        return 'No'\n    i = 0\n    while i < len(l)-1:\n        if l[i] == '0' and l[i+1] == '0':\n            return 'No'\n        i += 1\n    return 'Yes'\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    chairs_count = int(stdin.readline())\n    chairs = [int(i) for i in stdin.readline()]\n    if chairs_count > 2:\n        if chairs[0] == 0 and chairs[1] == 1:\n            return 'Yes'\n        if chairs[chairs_count - 1] == 1 and chairs[chairs_count - 2] == 0:\n            return 'Yes'\n    for i in range(1, chairs_count - 1):\n        if chairs[i - 1] == 1 and chairs[i] == 0 and chairs[i + 1] == 0:\n            return 'No'\n    if chairs[chairs_count - 1] == 1 and chairs[chairs_count - 2] == 0:\n        return 'No'\n    return 'Yes'\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    chairs = [int(i) for i in stdin]\n    max_seat = chairs[0]\n    for seat in chairs[1:]:\n        max_seat = max(seat, max_seat)\n    if sum(chairs[:-1]) + sum(chairs[1:]) == max_seat:\n        return 'Yes'\n    else:\n        return 'No'\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if stdin[-1] == \"0\" and stdin[-2] == \"0\" and stdin[-3] == \"1\" and stdin[-4] == \"1\" else \"No\""
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if stdin[1::2].count('1') < len(stdin[::2]) - stdin[1::2].count('1') else 'No'\n    \n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    seating = stdin\n    max = n\n    is_maximal = True\n    for i in range(n):\n        if seating[i]!= seating[i+1]:\n            is_maximal = False\n    return 'Yes' if is_maximal else 'No'\n\ndef"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    return \"Yes\" if max(stdin) < 2 and max(stdin[i:i+2] for i in range(0, len(stdin)-1)) else \"No\"\n\nsolution(\"101\")\n\n\ndef"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return 'Yes' if stdin[0] + stdin[-1] + sum(map(int,stdin)) == 1 else 'No'\n\nprint(solution('101'))\n"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    matrix = stdin[1]\n    matrix = [int(i) for i in matrix]\n    return \"Yes\" if is_maximal(matrix) else \"No\"\n\n\ndef"
    },
    {
        "number": 393,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\""
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = list(map(int, stdin.readline().strip().split()))\n    prev_sum = 0\n    result = []\n    for k in range(1, n+1):\n        curr_sum = prev_sum\n        for x in arr:\n            curr_sum += (x + prev_sum) % k\n        prev_sum = curr_sum\n        if prev_sum == 0:\n            result.append(k)\n    return str(len(result)) + '\\n' +''.join(map(str, result))"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nprint(solution(stdin.splitlines()[0]))\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin[0]\n    A = [int(x) for x in stdin[1].split(' ')]\n    res = 0\n    cur = 0\n    for i in range(len(A)):\n        cur += A[i]\n        if i % 3 == 0:\n            if cur > N:\n                res += 1\n            cur = 0\n    return str(res) +'' +''.join([str(x) for x in range(1, N + 1)])\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\nn = int(stdin.readline())\narr = [int(x) for x in stdin.readline().split()]\n\narr.append(0)\narr.sort()\nans = set()\n\nk = 0\nj = 1\n\nwhile j < len(arr):\n    k += 1\n    if arr[j] - arr[j - 1]!= k:\n        ans.add(k)\n        k = 0\n        j += 1\n    else:\n        j += 1\n\nprint(len(ans))\nfor x in sorted(ans):\n    print(x)\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(solve())\n\ndef"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = [int(x) for x in stdin.split()]\n    a = [0] + a\n    x = []\n    for k in range(1, n + 1):\n        x.append(sum(a[i] for i in range(k, len(a), k)) % n)\n    return str(len(set(x))) + '\\n' + '\\n'.join(str(x[i]) for i in range(len(x)))\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    array = [int(i) for i in stdin.readline().strip().split(' ')]\n    k = 0\n    for i in range(len(array)):\n        if i == 0:\n            k += 1\n        else:\n            if array[i - 1] + array[i]!= array[i]:\n                k += 1\n    stdout.write(str(k) + '\\n')\n    stdout.write(' '.join(map(str, range(1, k + 1))) + '\\n')\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\nn = int(stdin.readline())\na = [int(i) for i in stdin.readline().split()]\n\ncount = 0\nd = {}\n\nfor i in range(0, n):\n    d[i] = a[i]\n\nfor i in range(1, n + 1):\n    if i not in d:\n        count += 1\n        if i!= n:\n            k = i\n            x = [i for i in d if i not in range(k, i)]\n            d[i] = sum([d[j] for j in x])\n\nprint(count)\nprint(*d.values())\n"
    },
    {
        "number": 394,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    arr = [int(s) for s in stdin.split(\"\\n\")[1].split(\" \")]\n    k = n\n    s, e = 0, n\n    while True:\n        if k % n == 0:\n            print(n)\n            return\n        if s == e:\n            print(0)\n            return\n        k += 1\n        s = arr[s % n] + k\n        e = arr[e % n] + k\n\nsolution(input())\n\ndef"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split(' ')))\n    \n    a.sort()\n    team1 = sum(a[0::3])\n    team2 = sum(a[1::3])\n    if team1 == team2:\n        return 'YES'\n    return 'NO'\n\n\"\"\"\nimport unittest\nfrom utils import random_str\n\n\nclass TestCase(unittest.TestCase):\n    def test_1(self):\n        self.assertEqual(solution('1 1 1 1 1 99'), 'NO')\n\n    def test_2(self):\n        self.assertEqual(solution('1 3 2 1 2 1'), 'YES')\n\n    def test_3(self):\n        self.assertEqual(solution('1 3 2 1 2 1'), 'NO')\n\n    def test_4(self):\n        self.assertEqual(solution('1 3 2 1 2 1'), 'NO')\n\n    def test_5(self):\n        self.assertEqual(solution('1 1 1 1 1 99'), 'YES')\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    inputs = list(map(int, stdin.split(' ')))\n    n = len(inputs)\n    if n < 3:\n        return 'NO'\n    inputs.sort()\n    s = sum(inputs)\n    if s % 3!= 0 or s == 0:\n        return 'NO'\n    s1 = s // 3\n    if s1 * 3!= s:\n        return 'NO'\n    return 'YES'\n\n\n\n----\n\nfrom collections import Counter\n\n\ndef"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    scores = [int(n) for n in stdin.split(' ')]\n    scores.sort()\n    if sum(scores[::2]) == sum(scores[1::2]):\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    \n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    stdout.write()\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Check if it's possible to get equal scores in two teams of three.\n    \"\"\"\n    scores = [int(score) for score in stdin.split()]\n    scores.sort()\n    team_1 = sum(scores[:3])\n    team_2 = sum(scores[3:])\n    if team_1 == team_2:\n        return \"YES\"\n    return \"NO\"\n    \n    \n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns YES if teams with equal scores can be built,\n    NO otherwise.\n    '''\n    team_1, team_2 = [], []\n    for i, score in enumerate(stdin.split()):\n        if i % 2:\n            team_1.append(int(score))\n        else:\n            team_2.append(int(score))\n    team_1_score, team_2_score = sum(team_1), sum(team_2)\n    print('YES' if team_1_score == team_2_score else 'NO')\n\n\n\nsolution(input())\n\n'''\ntests = [\n    {\n        'input': ['1 3 2 1 2 1', 'YES'],\n        'output': 'YES'\n    },\n    {\n        'input': ['1 1 1 1 1 99', 'NO'],\n        'output': 'NO'\n    }\n]\n\n\ndef"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity: O(N)\n    Space complexity: O(N)\n    \"\"\"\n    stdin = stdin.split(\" \")\n    res = []\n    for i in range(len(stdin)):\n        res.append(int(stdin[i]))\n    res.sort()\n    # if sum(res) % 2 == 0:\n    if sum(res[0::2]) == sum(res[1::2]):\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\""
    },
    {
        "number": 395,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    scores = [int(s) for s in stdin.split()]\n    scores.sort()\n    #print(scores)\n    teams = set()\n    teams.add(tuple(scores[:3]))\n    teams.add(tuple(scores[3:]))\n    print(teams)\n    return 'YES' if len(teams) > 1 else 'NO'"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Determine the number of 2-3-integers on the given segment [l, r].\n\n    :param stdin: standard input\n    :return: standard output\n    \"\"\"\n\n    def number_of_2_3_integers(l: int, r: int) -> int:\n        return sum(prime_factors_counts(l) == {2: 1, 3: 1} and prime_factors_counts(r) == {2: 1, 3: 1})\n\n    return number_of_2_3_integers(*stdin.split(' '))\n\n\ndef"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    l, r = [int(x) for x in stdin.split(' ')]\n    res = 0\n    for i in range(l, r+1):\n        if (i % 2 == 0 and i % 3 == 0) or (i % 3 == 0 and i % 2 == 0):\n            res += 1\n    return str(res)\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    l, r = map(int, stdin.split(' '))\n    res = 0\n    for i in range(l, r+1):\n        count = 0\n        for j in range(2, int(i**0.5) + 1):\n            if i % j == 0:\n                count += 1\n        if count == 1:\n            count = 0\n            for k in range(2, int(i**0.5) + 1):\n                if i % k == 0:\n                    count += 1\n            if count == 1:\n                res += 1\n    return res\n\n\ndef"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return \"\"\n    l, r = map(int, stdin.split())\n    count = 0\n    for i in range(l, r+1):\n        if i % 2!= 0 and i % 3!= 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 396,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return 'hello'"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    return str(k - n)"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    result = n // (k + 1)\n    return str(result)\n\"\"\"\n\nimport math\nimport sys\nfrom collections import defaultdict\n\ndef"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return n - k\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, k = stdin.split(\" \")\n    n, k = int(n), int(k)\n    print(n + (k - 1) % (n - 1) + 1)\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the number of candies that are eaten by Alya\n    \n    Args:\n        stdin (str): Input string\n        \n    Returns:\n        str: String containing the number of candies that are eaten by Alya\n    \"\"\"\n    \n    n, k = map(int, stdin.split())\n    \n    ans = 0\n    \n    while k >= 1:\n        if k % 2 == 0:\n            ans += k // 2\n            k = 0\n        else:\n            ans += k // 2\n            k -= 1\n    \n    print(ans)\n    \n    return ans\n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, K = [int(n) for n in stdin.split()]\n    return str(sum([((K-i)//(i+1)) for i in range(N)]) + ((K-1) % (K+1)))\n    \n"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    return str(n - (k // (k + 1)))"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    if k == 0:\n        print(0)\n        return\n    i = 1\n    k -= 1\n    while True:\n        k -= i\n        if k >= 0:\n            i += 1\n        else:\n            break\n    print(i-1)\n    return"
    },
    {
        "number": 397,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split()\n    n, k = int(n), int(k)\n    count = 0\n    while k > 0:\n        if k >= (n + 1) // 2:\n            count += 1\n            k -= (n + 1) // 2\n        else:\n            count += 1\n            k -= 1\n    return count\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *segments = [int(s) for s in stdin.split()]\n    segments.sort()\n    if sum(segments) % 3:\n        return \"NO\"\n    m = sum(segments) // 3\n    return \"YES\" if segments[0] + segments[1] > m else \"NO\"\n    \n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lengths = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    return 'YES' if len(lengths) >= 3 and lengths[-1] + lengths[-2] >= 2 * min(lengths[:-1]) and 3 * lengths[-1] <= 2 * sum(lengths[:-1]) else 'NO'\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    l = list(map(int, stdin.readline().strip().split()))\n    s = sum(l)\n    if s % 2!= 0:\n        return \"NO\"\n    m = s // 2\n    l.sort()\n    a, b, c = 0, 0, 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            a += l[i]\n            b += l[j]\n            if a + b == m:\n                c = m - a - b\n                break\n        if c:\n            break\n    if a + c == m and b + c == m:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    n = int(sys.stdin.readline())\n    a = list(map(int, sys.stdin.readline().split()))\n    if n < 3:\n        return \"NO\"\n    a.sort()\n    if a[0] + a[1] > a[2]:\n        return \"NO\"\n    for i in range(n - 2):\n        if a[i] + a[i + 1] > a[i + 2]:\n            return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"YES\"\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Gets a string representing line segments, returns \"YES\" if he can form a non-degenerate triangle with exactly three of them, \"NO\" otherwise\"\"\"\n    # Complete this function\n    arr = stdin.split()\n    arr = [int(i) for i in arr]\n    arr.sort()\n    arr = arr[1:]\n    # print(arr)\n    dic = {}\n    for i in arr:\n        dic[i] = dic.get(i, 0) + 1\n    arr = arr[::-1]\n    # print(dic)\n    for i in dic:\n        if dic[i] < 3:\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 1 5 3 2 4\n   ... ''')\n    'YES'\n    >>> solution('''3\n   ... 4 1 2\n   ... ''')\n    'NO'\n    \"\"\"\n    n = int(stdin)\n    line = [int(stdin) for stdin in stdin.split('\\n')[0].split()]\n    line.sort()\n    for i in range(n - 2):\n        if line[i + 1] + line[i + 2] > line[i]:\n            return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    lengths = [int(x) for x in stdin.split(\" \")]\n    sums = [sum(lengths[:x + 1]) for x in range(n)]\n\n    for a in range(n):\n        for b in range(a + 1, n):\n            for c in range(b + 1, n):\n                if sums[a] + sums[b] == sums[c]:\n                    return \"YES\"\n\n    return \"NO\"\n\n\ndef"
    },
    {
        "number": 398,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = [int(i) for i in stdin.split()]\n    if x + y < 2 or x * 2 + y < 2:\n        return 'No'\n    return 'Yes'\n\"\"\""
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    return \"Yes\" if (x // 2) + (y // 2) == x / 2 and (x // 2) + (y // 2) == y / 2 else \"No\""
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, y = [int(x) for x in stdin.split(\" \")]\n    if x > y or 2 * x > y:\n        return \"No\"\n    return \"Yes\""
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    if x + y == 0 or x < y or x % 2 == 0 or x <= 0 or y <= 0:\n        return \"No\"\n    else:\n        return \"Yes\"\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x, y = list(map(int, stdin.split(\" \")))\n    if x == y == 1:\n        return \"Yes\"\n    if x % y!= 0:\n        return \"No\"\n    if x % y == 0 and x / y > 1:\n        return \"No\"\n    if x % y == 0 and x / y == 1:\n        return \"Yes\"\n    if x % y == 0 and x / y < 1:\n        return \"Yes\"\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    return \"\"\n"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\n:param stdin:\n:return:\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if stdin.split(' ')[0] * stdin.split(' ')[1] >= stdin.split(' ')[2] else \"No\"\n\n------or---\n\ndef"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    if x == y or x == 2 * y or y == 2 * x:\n        return \"Yes\"\n    return \"No\"\n\"\"\"\n\ndef"
    },
    {
        "number": 399,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a,b = map(int, stdin.split())\n    if (a+b)%2 == 0:\n        return \"Yes\"\n    return \"No\"\n\n\nimport sys\n\nlines = []\nfor line in sys.stdin:\n    lines.append(line.rstrip('\\n'))\n\nx, y = map(int, lines[0].split())\n\nprint(\"Yes\" if ((x+y)%2==0) else \"No\")\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    n, k = map(int, stdin.split())\n    skills = map(int, stdin.split())\n\n    skills = list(map(lambda x: x % 10, skills))\n    skills.sort(reverse=True)\n\n    if skills[0] > skills[1]:\n        skills[0] = skills[1]\n    elif skills[0] > skills[2]:\n        skills[0] = skills[2]\n\n    if skills[1] > skills[2]:\n        skills[1] = skills[2]\n\n    if k < n:\n        k = k % (n - 1)\n        skills[k] += k\n    res = 0\n\n    for i in skills:\n        res += i\n\n    return res % 10\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split()]\n    a = [int(i) for i in stdin.split()]\n    # greedy algorithm\n    a.sort()\n    for i in range(k):\n        if a[i] > 100:\n            a[i] = 100\n    count = 0\n    for i in range(n):\n        if a[i] >= 10:\n            count += 1\n        else:\n            break\n    return count * 10 + sum(a[k:])\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return''"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    \n    total = sum([a[i] // 10 for i in range(n)])\n    if k > total:\n        return total\n    else:\n        k = total\n    \n    min_rate = a[0]\n    max_rate = 0\n    for i in range(1, n):\n        if a[i] < min_rate:\n            min_rate = a[i]\n        elif a[i] > max_rate:\n            max_rate = a[i]\n    \n    cur_rate = min_rate\n    best_rate = 0\n    while cur_rate <= max_rate:\n        count = 0\n        for i in range(n):\n            if a[i] > cur_rate:\n                a[i] -= cur_rate\n            else:\n                a[i] = 0\n                count += 1\n        if count == n:\n            best_rate = cur_rate\n        else:\n            cur_rate += 1\n    \n    return best_rate\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    a = [int(x) for x in stdin.split(' ')]\n    a.sort(reverse=True)\n    ans = 0\n    while k > 0:\n        if k - 1 >= a[0]:\n            ans += int(a[0] / 10)\n            k -= a[0]\n        elif k - 1 >= a[1]:\n            ans += int(a[1] / 10)\n            k -= a[1]\n        elif k - 1 >= a[2]:\n            ans += int(a[2] / 10)\n            k -= a[2]\n        elif k - 1 >= a[3]:\n            ans += int(a[3] / 10)\n            k -= a[3]\n        else:\n            ans += int(a[4] / 10)\n            k -= a[4]\n    print(ans)\n\nsolution(input())\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    a.sort()\n    a = [0] + a\n    a_range = max(a) - min(a)\n    cost = max(a) // 10\n    l = []\n    while k:\n        l.append(min(k, a_range) * cost)\n        k -= min(k, a_range)\n        a_range = max(a) - min(a) - a_range\n        if a_range == 0:\n            a_range = max(a) - min(a)\n            cost = max(a) // 10\n    return sum(l)\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    n, k = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n    ans = 0\n    for i in range(n):\n        if i == 0:\n            ans += max(0, min(x[i] - 10, k))\n        else:\n            ans += max(0, min(x[i] - 10, k - i * 10))\n    return str(ans)\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    skills = [int(x) for x in stdin.split(' ')]\n\n    def dp(t, i):\n        if t >= 100:\n            return t - 100\n        if i < 0:\n            return 0\n        return max(dp(t + skills[i], i - 1) + skills[i], dp(t, i - 1))\n\n    print(dp(0, n - 1))\n"
    },
    {
        "number": 400,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    input = sys.stdin.readlines()\n    n, k = map(int, input[0].split())\n    arr = list(map(int, input[1].split()))\n    arr.sort()\n    result = sum(arr[::-1][:k])\n    return str(result)\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the smallest positive integer that is pretty.\n    '''\n    # get number of digits from list\n    n = int(stdin[0])\n    # get digits from list\n    a = list(map(int, stdin[1].split(' ')))\n    # get number of digits from list\n    m = int(stdin[2])\n    # get digits from list\n    b = list(map(int, stdin[3].split(' ')))\n\n    # check if it's 1\n    if n == 1:\n        # return 1\n        return '1'\n\n    # check if it's 2\n    if n == 2 and m == 1:\n        # get max number of digits from a\n        max_a = max(a)\n        # get max number of digits from b\n        max_b = max(b)\n\n        # get max of both numbers\n        max_num = max(max_a, max_b)\n\n        # check if max_num is equal to max of a or b\n        if max_num == max_a:\n            # return a[0]\n            return str(a[0])\n        elif max_num == max_b:\n            # return b[0]\n            return str(b[0])\n\n    # check if it's greater than 2\n    if n > 2:\n        # iterate over all numbers\n        for num in range(1, 1000000000):\n            # convert number to string\n            num_str = str(num)\n            # check if it's a pretty number\n            if (\n                # check if it's from a\n                any(char in num_str for char in a) and\n                # check if it's from b\n                any(char in num_str for char in b)\n            ):\n                # return num\n                return str(num)\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    a, b = map(str, stdin.split('\\n')[:2])\n    a, b = [int(i) for i in a.split(' ')], [int(i) for i in b.split(' ')]\n    def is_pretty(n: int) -> bool:\n        return any(i in a and i in b for i in str(n))\n    return str(min([i for i in range(10 ** n) if is_pretty(i)]))\n\nprint(solution(stdin))\n\n\ndef"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    #pass\n    #return \"\"\n    #START\n    n, m = map(int, stdin.split())\n    a = set(map(int, stdin.split()[1:]))\n    b = set(map(int, stdin.split()[n + 1:]))\n    nums = [i for i in range(1, 10) if i not in (a | b)]\n    print(min(nums))\n    #END\n\nprint(solution(\"8 8\\n1 2 3 4 5 6 7 8\\n8 7 6 5 4 3 2 1\"))\n\n\n\ndef"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return None\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    A = list(map(int, stdin.split('\\n')[1].split(' ')))\n    B = list(map(int, stdin.split('\\n')[2].split(' ')))\n\n    print(min([x for x in range(1, 1000001) if (sorted(str(x))[0] in A) and (sorted(str(x))[1] in B) and (sorted(str(x))[2] in A) and (sorted(str(x))[3] in B)]))"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    a = set(map(int, stdin.split(' ')[1:]))\n    b = set(map(int, stdin.split(' ')[1:]))\n    res = sorted(int(''.join(map(str, sorted(a.union(b))))), reverse=True)\n    return str(res[0])\n"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A = []\n    B = []\n    [n, m] = [int(i) for i in stdin.split(\" \")]\n    for i in range(n):\n        A.append(int(stdin.split(\" \")[i + 1]))\n    for i in range(m):\n        B.append(int(stdin.split(\" \")[i + 1 + n]))\n    numbers = []\n    for i in range(n):\n        for j in range(m):\n            number = str(A[i] * B[j])\n            if number.find('1') > -1 and number.find('2') > -1 and number.find('3') > -1 and number.find('4') > -1 and number.find('5') > -1 and number.find('6') > -1 and number.find('7') > -1 and number.find('8') > -1 and number.find('9') > -1:\n                numbers.append(A[i] * B[j])\n    for i in range(n):\n        for j in range(m):\n            number = str(A[i] * B[j])\n            if number.find('9') > -1:\n                numbers.append(A[i] * B[j])\n    numbers.sort()\n    if len(numbers) == 0:\n        return \"No non-negative integers found\"\n    return str(numbers[0])\n\nprint(solution(stdin))\n\ndef"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(' ')]\n    a = set(stdin.split('\\n')[1])\n    b = set(stdin.split('\\n')[2])\n\n    s = []\n    for i in range(1, 10):\n        if i in a and i in b:\n            s.append(i)\n\n    s.sort()\n    return str(s[0])\n\n\"\"\"\nfrom collections import Counter\ndef"
    },
    {
        "number": 401,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport math\nimport sys\n\nstdin = sys.stdin\ninput = stdin.readline\n\nn, m = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\nb = [int(x) for x in input().split()]\n\nmin_x = [abs(a[i] - b[i]) for i in range(len(a))]\nmax_x = max(a) + max(b)"
    },
    {
        "number": 402,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k >= n * 5:\n        return n\n    return n - int(k / 5)"
    },
    {
        "number": 402,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 402,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split(' ')))\n    return str(min(m // (n + 1), n))\n"
    },
    {
        "number": 402,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    return int(y / (x + 1))\n"
    },
    {
        "number": 402,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    times = [5 * i for i in range(1, n + 1)]\n    return sum(filter(lambda x: x <= k, times))\n"
    },
    {
        "number": 402,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    if n <= 2:\n        return n\n    return n - 1\ndef"
    },
    {
        "number": 402,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 402,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(3, 222)\n    2\n    >>> solution(4, 190)\n    4\n    >>> solution(7, 1)\n    7\n    \"\"\"\n   ...\n"
    },
    {
        "number": 402,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return ''\ndef"
    },
    {
        "number": 402,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Get standard input and return the solution for the problem.\n    \"\"\"\n    # your solution here\n    return str(stdin)\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\"\"\"\n\n\ndef"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return str(stdin)\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return 1\n\nprint(solution(\"1\"))\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    b = int(stdin.strip())\n    return len([1 for a in range(1, 10 ** 18 + 1) if a * b % a == 0])\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    b = int(stdin)\n    return str(1 + (b // 2) * 2)\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    b = a + 1\n    return (a * b) % (10 ** 10 + 7)\n\n\ndef"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin\n    b = int(a)\n    return b - (b // 2)\n"
    },
    {
        "number": 404,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    b = int(stdin)\n    return len(set(i for i in range(1, 1000000000) if i % b == 0))\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return '2'"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    bumpers = stdin.split()[0]\n    return stdin.count(\"<\") - stdin.count(\">\")\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    bumpers = list(stdin.replace(\"<\", \"\").replace(\">\", \"\"))\n    if bumpers == [\"\"] or bumpers == []:\n        return 0\n    # bumpers = sorted(bumpers)\n    # bumpers = list(dict.fromkeys(bumpers))\n    # print(bumpers)\n    \n    result = set()\n    result_len = 0\n    for i in range(n):\n        if bumpers[i] == \">\":\n            for j in range(i + 1, n):\n                if bumpers[j] == \"<\":\n                    result.add(i + 1)\n                    result_len += 1\n                    break\n        elif bumpers[i] == \"<\":\n            for j in range(i - 1, -1, -1):\n                if bumpers[j] == \">\":\n                    result.add(i - 1)\n                    result_len += 1\n                    break\n    # result_len += len(result)\n    return result_len\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    bumpers = stdin[0]\n    n = int(stdin[1])\n    result = 0\n    for i in range(n):\n        if bumpers[i] == '>':\n            if i + 1 > n:\n                break\n            elif bumpers[i+1] == '<':\n                result += 1\n        elif bumpers[i] == '<':\n            if i - 1 < 0:\n                break\n            elif bumpers[i-1] == '>':\n                result += 1\n    return str(result)\n\nprint(solution(input()))\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    b = stdin.readline().strip()\n    pos = [0, 0]\n    for i in range(1, len(b) + 1):\n        if i == 1:\n            if b[0] == '<':\n                pos[0] += 1\n        elif i == len(b):\n            if b[-1] == '>':\n                pos[1] += 1\n        else:\n            if b[i] == '<':\n                pos[0] += 1\n            elif b[i] == '>':\n                pos[1] += 1\n    return str(min(pos))\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    bumpers = list(stdin)\n    bumpers_dict = {\"<\": -1, \">\": 1}\n    count = 0\n    current_position = 0\n    for bumper in bumpers:\n        current_position += bumpers_dict[bumper]\n        if current_position >= 0:\n            count += 1\n        elif current_position < 0:\n            current_position = 0\n    return count\n    \n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    bumper_length = int(stdin.readline().rstrip())\n    bumper = stdin.readline().rstrip()\n    d = {'>': 1, '<': -1}\n    l = [d[c] for c in bumper]\n    prev = 0\n    s = sum(l)\n    for i in range(len(l)):\n        prev += l[i]\n        if prev < 0:\n            s += 1\n        elif prev > 0:\n            s += prev\n    return s"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 1 or n > 200_000:\n        return 'Input Error'\n    bumpers = stdin\n    count = 0\n    for i in range(n):\n        if bumpers[i] == '<':\n            count += 1\n        elif bumpers[i] == '>':\n            count -= 1\n        if count < 1:\n            return str(i + 1)\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    length = int(stdin)\n    bumpers = [i for i in stdin]\n    current_position = 0\n    counter = 0\n    for position in bumpers:\n        if position == '<':\n            current_position -= 1\n        if position == '>':\n            current_position += 1\n            counter += 1\n        if current_position < 0 or current_position > length:\n            break\n    return counter\n"
    },
    {
        "number": 405,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"The solution to this problem.\"\"\"\n\n    return (\n        len(stdin) - 1\n        if \">\" not in stdin and \"<\" not in stdin\n        else len(stdin) - 2\n    )\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    N = int(stdin.readline())\n    L = list(map(int, stdin.readline().split()))\n    L.sort()\n    if L[0] < 2:\n        return 0\n    if L[-1] >= 4:\n        return L[-1]*L[-1]\n    sum = 0\n    if len(L) % 2 == 1:\n        i = 0\n        j = len(L) - 1\n        while i < j:\n            sum += L[i]*L[j]\n            i += 1\n            j -= 1\n        sum += L[i]*L[j]\n        sum += L[i]*L[j-1]\n        return sum\n    else:\n        i = 0\n        j = len(L) - 1\n        while i < j:\n            sum += L[i]*L[j]\n            i += 2\n            j -= 2\n        return sum\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    l_1, l_2, l_3, l_4 = map(int, stdin.split())\n    \n    # x, y, z = sorted([l_1, l_2, l_3, l_4])\n    # print(x, y, z)\n    \n    # count = 0\n    # while z >= y:\n    #     count += (y + z - x) * (x + z)\n    #     print(x, y, z)\n    #     x += 1\n    #     y -= 1\n    #     z -= 1\n    # print(count)\n    \n    print(max(l_1 * l_2, l_2 * l_3, l_3 * l_4))\n\n    return\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split('\\n')[1].split(' ')))\n    arr.sort()\n    count = 0\n    for i in range(n):\n        if i < n - 1 and arr[i + 1] <= arr[i] + arr[i + 1]:\n            continue\n        count += arr[i] * arr[i]\n    print(count)\n\nsolution(stdin)\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    sticks = [int(x) for x in stdin.readline().split(' ')]\n    ans = 0\n    if n == 1:\n        print(0)\n        return\n    for i in range(n):\n        if sticks[i] < sticks[i - 1]:\n            ans += sticks[i]\n        else:\n            ans += sticks[i - 1]\n            ans += (sticks[i] - sticks[i - 1]) // 2\n            if sticks[i] % 2 == 1:\n                ans += 1\n    print(ans)\n    return"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return 0\n    arr = list(map(int, stdin.split()))\n    arr.sort(reverse=True)\n    print(arr)\n\n    dp = [arr[0]]\n    for i in range(1, n):\n        d = arr[i] - arr[i - 1]\n        if d > 1:\n            dp.append(d)\n            print(d)\n    print(dp)\n\n    print(dp)\n    return dp[-1]"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n2 4 4 2\\n\")\n    8\n    \"\"\"\n    _, sticks = stdin.split(\"\\n\")\n    sticks = list(map(int, sticks.split()))\n    sticks.sort()\n    total_area = 0\n    for i in range(len(sticks) - 1):\n        # if sticks[i] == sticks[i + 1]:\n        #     total_area = total_area + sticks[i] ** 2\n        # else:\n        #     total_area = total_area + sticks[i] * sticks[i + 1]\n        # if sticks[i] <= sticks[i + 1]:\n        #     total_area = sticks[i] * sticks[i + 1]\n        # else:\n        #     total_area = sticks[i] * sticks[i + 1]\n        total_area = max(sticks[i] * sticks[i + 1], total_area)\n    total_area = total_area + sticks[0] * sticks[-1]\n    return str(total_area)\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    length = list(map(int, stdin.split()))\n    return str(solution_h(length))\n\ndef"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds the maximum area of rectangle formed by sticks in the circular\n    configuration.\n\n    :type stdin: str\n    :rtype: str\n    \"\"\"\n    n = int(stdin.split()[0])\n    sticks = [int(i) for i in stdin.split()[1:]]\n\n    sticks.sort()\n\n    current_length = 0\n    max_area = 0\n\n    for stick in sticks:\n        if current_length + 1 < stick:\n            current_length += stick\n            max_area = max(max_area, current_length * stick)\n        else:\n            current_length = stick\n            max_area = max(max_area, stick * stick)\n\n    return str(max_area)\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the maximum possible rectangle area.\"\"\"\n    n = int(stdin)\n    sticks = list(map(int, stdin.split()))\n    area = 0\n    while len(sticks) > 1:\n        # get the minimal stick\n        min_stick = min(sticks)\n        min_i = sticks.index(min_stick)\n        area += min_stick * len(sticks)\n        sticks[min_i] = min_stick + 1\n        if min_i!= 0:\n            area += (sticks[min_i] - sticks[min_i - 1]) * len(sticks)\n        if min_i!= len(sticks) - 1:\n            area += (sticks[min_i + 1] - sticks[min_i]) * len(sticks)\n        # remove it from list\n        sticks.pop(min_i)\n    return str(area)\n"
    },
    {
        "number": 406,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    return ''\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    n = int(stdin)\n    counter = 0\n    petya = []\n    for i in range(n):\n        if i == 0:\n            petya.append(int(stdin[0:i+1]))\n        else:\n            nums = stdin[counter:i+1]\n            counter = i + 1\n            for num in nums:\n                if num == \"a\":\n                    petya.append(1)\n                elif num == \"b\":\n                    petya.append(0)\n                elif num == \"c\":\n                    petya.append(2)\n                elif num == \"d\":\n                    petya.append(3)\n                elif num == \"e\":\n                    petya.append(4)\n                elif num == \"f\":\n                    petya.append(5)\n                elif num == \"g\":\n                    petya.append(6)\n                elif num == \"h\":\n                    petya.append(7)\n                elif num == \"i\":\n                    petya.append(8)\n                elif num == \"j\":\n                    petya.append(9)\n    counter = 0\n    for i in range(len(petya)):\n        if counter < i:\n            counter = i\n        else:\n            petya[i] = str(petya[i])\n    petya = \"\".join(petya)\n    for i in range(len(petya)):\n        if petya[i].isdigit():\n            petya = petya[i:]\n            break\n    petya = int(petya)\n    return petya\n    \n    \ndef"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    nums = stdin.split('\\n')\n    res = 0\n    for num in nums:\n        s = ''\n        for i in num:\n            if i == '0':\n                s += i\n            elif i == '1':\n                s += 'j'\n            elif i == '2':\n                s += 'c'\n            elif i == '3':\n                s += 'b'\n            elif i == '4':\n                s += 'd'\n            elif i == '5':\n                s += 'e'\n            elif i == '6':\n                s += 'f'\n            elif i == '7':\n                s += 'g'\n            elif i == '8':\n                s += 'h'\n            elif i == '9':\n                s += 'i'\n        res += int(s)\n    return str(res)\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split()\n    num = int(stdin[0])\n    numbers = stdin[1:]\n    new = []\n    for n in numbers:\n        count = 0\n        for i in n:\n            count += (ord(i)-96)\n        new.append(count)\n    min_ = min(new)\n    return min_"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = []\n    \n    for i in stdin.split(\"\\n\"):\n        s = \"\"\n        for j in i:\n            if j.isdigit():\n                if j == \"0\":\n                    s = s + \"j\"\n                else:\n                    s = s + j\n            else:\n                s = s + j\n        a.append(s)\n        \n    a.sort(key=len)\n    \n    return a[0]\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    numbers = [stdin[i] for i in range(n)]\n    \n    for i in range(n):\n        for j in range(len(numbers[i])):\n            if numbers[i][j] == 'a' or numbers[i][j] == 'b' or numbers[i][j] == 'c':\n                numbers[i] = str(j)\n            elif numbers[i][j] == 'd' or numbers[i][j] == 'e' or numbers[i][j] == 'f':\n                numbers[i] = str(j + 2)\n            elif numbers[i][j] == 'g' or numbers[i][j] == 'h' or numbers[i][j] == 'i':\n                numbers[i] = str(j + 4)\n            elif numbers[i][j] == 'j' or numbers[i][j] == 'k' or numbers[i][j] == 'l':\n                numbers[i] = str(j + 6)\n    \n    sum_numbers = [int(i) for i in numbers]\n    return sum(sum_numbers)\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    res = list()\n    for i in range(n):\n        res.append(i + 1)\n    return sum(res)\n\nprint(solution(input()))\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return \"2\""
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 407,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    experienced = int(stdin[0].split(\" \")[0])\n    newbies = int(stdin[0].split(\" \")[1])\n    print(experienced + newbies - 1)"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split(\" \")\n    n, m = int(line[0]), int(line[1])\n    \n    return str(n // 2 + n % 2)"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('2 6\\n')\n    2\n    >>> solution('4 5\\n')\n    3\n    >>> solution('4 4\\n')\n    1\n    >>> solution('4 7\\n')\n    2\n    \"\"\"\n    experienced_participants, newcomers = map(int, stdin.split())\n    return experienced_participants // experienced_participants + experienced_participants // newcomers\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    return a + (b // 2)\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    import sys\n    A, B = map(int, sys.stdin.readline().split())\n\n    print(A // 3 + B // 2)"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    return str(min(n // 3, m))\n"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    pass"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(n if m > n else m)\n\"\"\"\n\n\ndef"
    },
    {
        "number": 408,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_string = stdin.strip()\n    for i in range(len(input_string)):\n        if input_string[i] == \"B\" and input_string[i + 1] == \"A\":\n            if input_string[i - 1]!= \"B\":\n                return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if len(set(stdin.replace(\"AB\", \"\").replace(\"BA\", \"\"))) == 0 else \"NO\"\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if \"AB\" in stdin or \"BA\" in stdin else \"NO\"\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if stdin.count(\"AB\") == stdin.count(\"BA\") else \"NO\"\n\"\"\"\n\n\ndef"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if re.search(r'(?:AB|BA)', stdin) else \"NO\"\n\n\ndef"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if s[i] == s[j] and len(s[i]) == len(s[j]):\n                return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    ans = []\n    counter = 0\n    for line in stdin.split(\"\\n\"):\n        if line.count(\"AB\") == 1 and line.count(\"BA\") == 1:\n            ans.append(\"YES\")\n        else:\n            ans.append(\"NO\")\n    return \"\\n\".join(ans)"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    for i in range(0, len(n) - 1):\n        if n[i:i + 2] == 'AB':\n            if n[i + 2:i + 4] == 'AB':\n                continue\n            else:\n                return \"YES\"\n        elif n[i:i + 2] == 'BA':\n            if n[i + 2:i + 4] == 'BA':\n                continue\n            else:\n                return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.find('AB') == stdin.find('BA') == -1\n\n\ndef"
    },
    {
        "number": 409,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if stdin.count(\"AB\") >= 2 and stdin.count(\"BA\") >= 2 else \"NO\"\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport sys\nimport os"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def find_max_weight(n):\n        return 2 * n - 1\n\n    def build_queue(n):\n        queue = [1] * n\n        weights = list(map(int, stdin.split('\\n')[1].split()))\n        for weight in weights:\n            queue.pop(queue.index(weight))\n            queue.insert(0, weight)\n        return queue\n\n    def print_result(queue):\n        for i in range(len(queue)):\n            print(i + 1, 'L') if i!= queue.index(max(queue)) else print(i + 1, 'R')\n\n    n = int(stdin.split('\\n')[0])\n    queue = build_queue(n)\n    if find_max_weight(n) < max(queue):\n        print('NO')\n        return\n\n    print('YES')\n    print_result(queue)\n    queue = build_queue(n)\n    if find_max_weight(n) < max(queue):\n        print('NO')\n        return\n\n    print('YES')\n    print_result(queue)\n    queue = build_queue(n)\n    if find_max_weight(n) < max(queue):\n        print('NO')\n        return\n\n    print('YES')\n    print_result(queue)\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    first_line = stdin.split(\"\\n\")[0].split(\" \")\n    n = int(first_line[0])\n    first_line = stdin.split(\"\\n\")[1].split(\" \")\n    first_weight = [int(i) for i in first_line]\n    second_line = stdin.split(\"\\n\")[2].split(\" \")\n    k = int(second_line[0])\n    second_line = stdin.split(\"\\n\")[3].split(\" \")\n    second_weight = [int(i) for i in second_line]\n\n    def eating(l: List[int], r: List[int]):\n        global res\n        if l[0] < r[0]:\n            res += \"R\"\n            return\n        if l[0] > r[0]:\n            res += \"L\"\n            return\n        if l[0] == r[0]:\n            res += \"L\"\n            l.pop(0)\n            r.pop(0)\n            if len(l) > 0:\n                eating(l, r)\n\n    # print(first_weight)\n    # print(second_weight)\n    l = list(first_weight)\n    r = list(second_weight)\n    res = \"\"\n    if k > n:\n        return \"NO\"\n    while len(l) > 0 and len(r) > 0:\n        eating(l, r)\n    print(res)\n    return res\n\nprint(solution(stdin))"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n = int(stdin[0])\n    a = list(map(int, stdin[1].split()))\n    k = int(stdin[2])\n    b = list(map(int, stdin[3].split()))\n    # dp[i] - 1 == dp[i] - dp[i-1]\n    dp = [0 for _ in range(n + 1)]\n    # dp[i] - 1 == dp[i] - dp[i-1]\n    dp[0] = 0\n    dp[1] = 0\n    dp[2] = a[0] - 1\n    dp[3] = a[0] + a[1] - 1\n    # dp[i] - 1 == dp[i] - dp[i-1]\n    for i in range(4, n + 1):\n        dp[i] = a[i - 1] + a[i - 2] + dp[i - 3]\n    # dp[i] - 1 == dp[i] - dp[i-1]\n    dp[0] = 0\n    dp[1] = 0\n    for i in range(2, k + 1):\n        dp[i] = b[i - 1] + dp[i - 2]\n    dp[k] = 0\n    dp[k + 1] = 0\n    for i in range(k + 2, n + 1):\n        dp[i] = b[i - 1] + dp[i - 2]\n    # print(dp)\n    flag = 0\n    for i in range(k + 2, n + 1):\n        if dp[i] > dp[i - 1]:\n            flag = 1\n            break\n    if flag == 0:\n        return 'YES'\n    else:\n        return 'NO'\n\nprint(solution(input()))\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    pass\n"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\"\"\"\nInputs\n\n5\n1 1 1 3 3\n3\n2 1 6\n\nOutput\n\nNO\n\nExplanation\n\nSince there are three monsters, it is impossible to have a sequence of eatings which leads to the final queue.\n\n\"\"\"\n\ndef"
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # take input\n    n = int(stdin.split()[0])\n    a = [int(x) for x in stdin.split()[1].split(',')]\n    k = int(stdin.split()[2])\n    b = [int(x) for x in stdin.split()[3].split(',')]\n    \n    # choose a random order\n    # a = [i for i in range(1,n+1)]\n    # random.shuffle(a)\n    # for i in range(n):\n    #     print(a[i], end=' ')\n    \n    # a = [4, 2, 5, 3, 1]\n    # k = 3\n    # b = [5, 1, 6]\n    \n    # b = [1, 2, 3, 4, 5]\n    # k = 5\n    # a = [2, 1, 3, 4, 5]\n    \n    # b = [1, 2, 5, 4, 3]\n    # k = 2\n    \n    # b = [1, 2, 3, 4, 5]\n    # k = 1\n    \n    # b = [1, 2, 3, 4, 5]\n    # k = 4\n    \n    # b = [1, 2, 3, 4, 5]\n    # k = 2\n    \n    # b = [1, 2, 3, 4, 5]\n    # k = 1\n    \n    # b = [1, 2, 3, 4, 5]\n    # k = 1\n    \n    # b = [1, 2, 3, 4, 5]\n    # k = 1\n    \n    # b = [1, 2, 3, 4, 5]\n    # k = 4\n    \n    # b = [1, 2, 3, 4, 5]\n    # k = 1\n    \n    # b = [1, 2, 3, 4, 5]\n    # k = 1\n    \n    # b = [1, 2, 3, 4, 5]\n    # k = 1\n    \n    # b = [1, 2, 3, 4, 5]\n    # k = 1\n    \n    # b = [1, 2, 3, 4, 5]\n    # k = 2\n    \n    # b = [1, 2, 3, 4, 5]\n    # k = 4\n    \n    # b = [1, 2, 3, 4, 5]\n    # k = 4\n    \n    # b = [1, 2, 3, 4, 5]\n    # k = 4\n    \n    # b = [1, 2, 3, 4, 5]\n    # k = 4\n    \n    # b = [1, 2, 3, 4, 5]\n    # k = 4\n    \n    # b = [1, 2, 3, 4, 5]\n    # k = 4\n    \n    # b = [1, 2, 3, 4, 5]\n    # k = 4\n    \n    # b = [1, 2, 3, 4, 5]\n    # k = 2\n    \n    # b = [1, 2, 3, 4, 5]\n    # k = 2\n    \n    # b = [1, 2, 3, 4, 5]\n    # k = 4\n    \n    # b = [1, 2, 3, 4, 5]\n    # k = 1\n    \n    # b = [1, 2, 3, 4, 5]\n    # k = 1\n    \n    # b = [1, 2, 3, 4, 5]\n    # k = 1\n    \n    # b = [1, 2, 3, 4, 5]\n    # k = 1\n    \n    # b = [1, 2, 3, 4, 5]\n    # k = 1\n    \n    # b = [1, 2, 3, 4, 5]\n    # k = 2\n    \n    "
    },
    {
        "number": 410,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport numpy as np\n\nR, B = map(int, stdin.split())\nx, y = np.zeros(R), np.zeros(R)\nfor i in range(R):\n    x[i], y[i] = map(int, stdin.split())\n\ndef"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def find_match(b, r):\n        for i, x in enumerate(r):\n            for j, y in enumerate(b):\n                if not x.intersects(y):\n                    return i, j\n        raise Exception(\"No match\")\n\n    r, b = list(map(int, stdin.split()))\n    r, b = [set(map(int, stdin.split())) for _ in range(r)], [set(map(int, stdin.split())) for _ in range(b)]\n    return \"Yes\" if sum(len(x.intersection(y)) == 1 for x in r for y in b) == r * b else \"No\"\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    _ = stdin.readline()\n    base = [tuple(map(int, line.split())) for line in stdin]\n    return 'Yes' if len(base) < len(base[0]) else 'No'\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # This is a simple DFS\n    # Create a graph from points\n    def getGraph(points):\n        graph = {}\n        for p1 in points:\n            for p2 in points:\n                if p1 == p2:\n                    continue\n                if p1.x == p2.x or p1.y == p2.y:\n                    # they are on a line\n                    if p1.x in graph:\n                        graph[p1.x].append(p2)\n                    else:\n                        graph[p1.x] = [p2]\n        return graph\n\n    points = []\n    for line in stdin.split(\"\\n\"):\n        x, y = map(int, line.split())\n        points.append(Point(x, y))\n\n    graph = getGraph(points)\n    # print(graph)\n\n    # Perform DFS\n    def dfs(graph, start, visited):\n        if start in visited:\n            return False\n        visited.add(start)\n        for node in graph[start]:\n            if node in visited:\n                continue\n            if not dfs(graph, node, visited):\n                return False\n        return True\n\n    # Now dfs\n    visited = set()\n    for p in points:\n        if not dfs(graph, p, visited):\n            return \"No\"\n\n    return \"Yes\""
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    assert n == m + 1\n    # x, y - coordinates of centers\n    # u, v - coordinates of ends\n    x, y = [0] * (n + 1), [0] * (n + 1)\n    u, v = [0] * (n + 1), [0] * (n + 1)\n    for i in range(1, n + 1):\n        x[i], y[i] = map(int, stdin.split())\n        u[i], v[i] = map(int, stdin.split())\n    return 'Yes' if is_perfect_matching(x, y, u, v) else 'No'\n\n\ndef"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    # Don't forget to remove the pass statement below\n    pass\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    R, B = map(int, stdin.split(' '))\n\n    rebel = [0] * R\n    bases = [[0, 0] for _ in range(B)]\n    for i in range(R):\n        x, y = map(int, stdin.split('\\n')[i].split(' '))\n        rebel[i] = x, y\n        for j in range(B):\n            if (x, y) == bases[j]:\n                rebel[i] = 0\n                break\n            x1, y1 = bases[j]\n            if (x1, y1) == (x, y) or (x1, y1) == (y, x):\n                bases[j] = 0\n                break\n            if x == x1:\n                if y < y1:\n                    bases[j] = [x, y]\n                else:\n                    bases[j] = [x, y]\n            else:\n                if y == y1:\n                    if x < x1:\n                        bases[j] = [x, y]\n                    else:\n                        bases[j] = [x, y]\n                else:\n                    if x < x1 and y < y1:\n                        bases[j] = [x, y]\n                    elif x < x1 and y > y1:\n                        bases[j] = [x, y]\n                    elif x > x1 and y > y1:\n                        bases[j] = [x, y]\n                    else:\n                        bases[j] = [x, y]\n\n    rebel = [rebel[i] for i in range(R) if rebel[i]!= 0]\n    bases = [bases[i] for i in range(B) if bases[i]!= 0]\n    for i in range(R):\n        if abs(rebel[i][0] - bases[0][0]) + abs(rebel[i][1] - bases[0][1]) > abs(rebel[i][0] - bases[1][0]) + abs(rebel[i][1] - bases[1][1]):\n            return 'No'\n\n    return 'Yes'"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n\n    input = stdin.split(\"\\n\")\n    n_rebels, n_bases = [int(i) for i in input[0].split()]\n    rebels = [tuple(map(int, input[i + 1].split())) for i in range(n_rebels)]\n    bases = [tuple(map(int, input[i + n_rebels + 1].split())) for i in range(n_bases)]\n\n    def cross(a, b):\n        return a[0] * b[1] - a[1] * b[0]\n\n    def dot(a, b):\n        return a[0] * b[0] + a[1] * b[1]\n\n    def distance(a, b):\n        return (a[0] - b[0]) ** 2 + (a[1] - b[1]) ** 2\n\n    # 1. all points should be on the same line\n    # 2. there should be exactly one straight line\n    # 3. no two points should be on the same line\n    # 4. points should be in the order from left to right\n    def is_valid(rebels, bases):\n        lines = [{} for _ in range(n_rebels)]\n        n_lines = [0 for _ in range(n_rebels)]\n\n        for r, b in zip(rebels, bases):\n            n_lines[r] = 1 if r not in lines[b] else lines[b][r] + 1\n            lines[b][r] = n_lines[r]\n            n_lines[r] += 1\n\n        count_lines = sum(n_lines)\n        if count_lines!= 2 * n_rebels or count_lines!= n_bases:\n            return False\n\n        straight = set()\n        for b in range(n_bases):\n            for r in range(n_rebels):\n                if r in straight or r not in lines[b]:\n                    continue\n                for r2 in range(r + 1, n_rebels):\n                    if r2 in straight or r2 not in lines[b]:\n                        continue\n                    if abs(cross(rebels[r], rebels[r2]))!= abs(cross(bases[b], bases[b])):\n                        return False\n                    if r2 not in straight and dot(rebels[r], bases[b]) * dot(rebels[r2], bases[b]) < 0:\n                        return False\n                    straight.add(r)\n                    straight.add(r2)\n\n        return True\n\n    # rebels should be sorted by y then x\n    rebels.sort(key=lambda x: (x[1], x[0]))\n    bases.sort(key=lambda x: (x[1], x[0]))\n\n    if is_valid(rebels, bases):\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 411,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # write your code in Python 3.6\n    # Please use 'import sys' to access the input and'sys.stdout.write'\n    # to write the output.\n    # Please use'sys.stdout.write(str)' for writing to the output.\n    # Your code will be considered correct if it writes a single line in the\n    # format of 'Yes' or 'No'.\n    import sys\n    R,B = [int(n) for n in sys.stdin.readline().split(' ')]\n    arr = [[int(x) for x in sys.stdin.readline().split(' ')] for _ in range(R)]\n    arr.extend([[int(x) for x in sys.stdin.readline().split(' ')] for _ in range(B)])\n    sys.stdout.write('Yes' if len(list(set(map(tuple, arr)))) == len(arr) else 'No')\n    return"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.split()]\n    cnt = 0\n    while n <= m:\n        if n == m:\n            break\n        if n % 2 == 0:\n            n /= 2\n        else:\n            n += 1\n        cnt += 1\n    return str(cnt)\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n\n    answer = 0\n    while n > m:\n        if n % 2 == 1:\n            answer += 1\n            n -= 1\n        else:\n            n /= 2\n        answer += 1\n    return answer\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    while a < b:\n        a = a * 2 if a * 2 <= b else b\n    while a!= b:\n        a -= 1\n        b += 1\n    return str(a)\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(map(str, (int(stdin[0]) - 1, int(stdin[1]) - 1)))\n\n\"\"\"\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\"\"\"\nfrom collections import deque\nfrom sys import stdin\nfrom typing import Deque\n\nINPUT_LINES = [line.strip() for line in stdin.readlines()]\nINPUT_INTEGERS = [int(x) for x in INPUT_LINES[0].split(\" \")]\n\n\ndef"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    min_count = 0\n    while True:\n        if m % 2 == 0:\n            m //= 2\n        else:\n            m += 1\n            m %= 2\n        if m == 0:\n            break\n        else:\n            min_count += 1\n    return min_count"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    ans = 0\n    i = 1\n    while n - i > 0 and m - i > 0:\n        n *= 2\n        m *= 2\n        ans += 1\n        if n > m:\n            break\n        else:\n            n -= m\n            ans += 1\n            i += 1\n    return ans\n\n\ndef"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    return N - M\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    # convert string input into list\n    n, m = [int(x) for x in stdin.split(\" \")]\n    \n    # count the number of clicks\n    ans = 0\n    while n < m:\n        if n % 2 == 0:\n            ans += 1\n            n //= 2\n        else:\n            n += 1\n            ans += 2\n    return str(ans)\n"
    },
    {
        "number": 413,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    raise NotImplementedError()\n    return \"YES\""
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Input: The first line contains a single integer $n$ \u2014 the number of segments.\n    The $i$-th of the next $n$ lines contain the description of the $i$-th segment \u2014 two integers $l_i$ and $r_i$ ($1 \\le l_i < r_i \\le 2n$).\n    Output: Print \"YES\" if the resulting graph is a tree and \"NO\" otherwise.\n    \"\"\""
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = []\n    for i in range(n):\n        l, r = stdin.readline().split(' ')\n        l, r = int(l), int(r)\n        arr.append([l, r])\n    arr.sort(key=lambda x: x[0])\n    l, r = arr[0]\n    for i in range(1, n):\n        if l < arr[i][0] < r:\n            l, r = arr[i][0], arr[i][1]\n        elif r < arr[i][0] < l:\n            l, r = arr[i][0], arr[i][1]\n        else:\n            return 'NO'\n    return 'YES'\n\n\nsolution(\"5\\n9 10\\n3 6\\n2 9\\n7 10\\n1 4\\n\")\nsolution(\"6\\n9 12\\n2 11\\n1 3\\n6 10\\n5 7\\n4 8\\n\")\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    segments = [tuple(map(int, line.split())) for line in stdin]\n    segments.sort(key=lambda x: x[0])\n    \n    tree_edges = set()\n    for i in range(n):\n        segment = segments[i]\n        for j in range(i+1, n):\n            if segments[j][0] > segment[1] or segments[j][1] < segment[0]:\n                continue\n            else:\n                if segments[j][0] >= segment[0] and segments[j][1] <= segment[1]:\n                    tree_edges.add((i, j))\n                elif segments[j][0] > segment[0] and segments[j][1] < segment[1]:\n                    tree_edges.add((i, j))\n                elif segments[j][0] < segment[0] and segments[j][1] > segment[1]:\n                    tree_edges.add((i, j))\n    \n    for i in range(n):\n        if i in tree_edges:\n            continue\n        for j in range(i+1, n):\n            if segments[j][0] > segment[1] or segments[j][1] < segment[0]:\n                continue\n            else:\n                if segments[j][0] >= segment[0] and segments[j][1] <= segment[1]:\n                    tree_edges.add((i, j))\n                elif segments[j][0] > segment[0] and segments[j][1] < segment[1]:\n                    tree_edges.add((i, j))\n                elif segments[j][0] < segment[0] and segments[j][1] > segment[1]:\n                    tree_edges.add((i, j))\n    \n    return \"YES\" if len(tree_edges) == n-1 else \"NO\"\n\n\nsolution('4\\n1 3\\n2 4\\n5 9\\n6 8\\n7 10\\n')\nsolution('5\\n1 3\\n2 4\\n5 9\\n6 8\\n7 10\\n')\nsolution('6\\n5 8\\n3 6\\n2 9\\n7 10\\n1 4\\n')\nsolution('7\\n5 9\\n3 6\\n2 9\\n7 10\\n1 4\\n')\nsolution('8\\n1 4\\n2 5\\n3 6\\n4 7\\n5 8\\n6 9\\n7 10\\n')\nsolution('9\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\\n')\nsolution('10\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n6 7\\n7 8\\n8 9\\n9 10\\n')\n"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Generate graph from segments.\"\"\"\n    ...\n    \n    \nprint(solution(input()))"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    \n    return \"\""
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Solution to the given problem.\n    '''\n    # Take inputs\n    n = int(stdin.readline().strip())\n    segments = []\n    for _ in range(n):\n        segments.append(list(map(int, stdin.readline().split())))\n    # Build graph\n    segments.sort()\n    graph = {i: set() for i in range(n)}\n    for i in range(n - 1):\n        l1, r1 = segments[i]\n        l2, r2 = segments[i + 1]\n        if r1 < l2 or r2 < l1:\n            continue\n        graph[i].add(i + 1)\n        graph[i + 1].add(i)\n    # Determine if graph is a tree or not\n    if not dfs(graph, 0):\n        print('NO')\n    else:\n        print('YES')\n    return ''\n\ndef"
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 414,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    nums = list(map(int, stdin[1].split()))\n    def D(nums):\n        nums.sort()\n        nums.append(0)\n        l = [0]\n        for i in range(1, len(nums)):\n            if nums[i]!= nums[i - 1]:\n                l.append(nums[i])\n        return l\n    def L(nums):\n        l = []\n        for i in range(1, len(nums)):\n            if nums[i]!= nums[i - 1]:\n                l.append(i)\n        return l\n    l = L(D(nums))\n    print(len(l) - 1)\n    return ''\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = [int(i) for i in stdin.readline().split()]\n    arr.sort()\n    print(arr)\n    start = arr[0]\n    end = arr[0]\n    max_seq = 0\n    for i in range(1,n):\n        start = arr[i]\n        if arr[i] > end + 1:\n            max_seq = max(max_seq, i - start)\n            end = arr[i]\n        else:\n            end = max(end, arr[i])\n    if max_seq:\n        return max_seq\n    return 0\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    requests = [int(x) for x in stdin.split('\\n')[0].split()]\n    res = 0\n    requests.append(0)\n    requests.append(n)\n    requests.sort()\n    d = dict()\n    for i in range(len(requests) - 1):\n        d[requests[i]] = requests[i + 1]\n    \n    nums = set(requests[:-1])\n    \n    for x in nums:\n        if x not in d:\n            res = max(res, 1)\n            continue\n        start, end = d[x], d[x + 1]\n        d[x] = d[x + 1]\n        while start < end:\n            if requests[start] == requests[start + 1]:\n                res = max(res, end - start)\n                break\n            start += 1\n    print(res)\n    return ''\n\nsolution(stdin)\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    r = [int(num) for num in stdin[1].split()]\n    r.insert(0, 0)\n    i = 0\n    j = 1\n    count = 1\n    while i < len(r) and j < len(r):\n        if r[j] - r[i] < 100 * n:\n            count += 1\n            j += 1\n        else:\n            i += 1\n    return count\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    total_requests = int(stdin[0])\n    requests_sequence = list(map(int, stdin[1].split(' ')))\n    requests_sequence.sort()\n    if len(requests_sequence) == 0:\n        return 0\n    elif len(requests_sequence) == 1:\n        return 1\n    else:\n        max_sequence_len = 1\n        counter = 1\n        for i in range(1, len(requests_sequence)):\n            if requests_sequence[i] == requests_sequence[i-1] + 1:\n                counter += 1\n            else:\n                counter = 1\n            max_sequence_len = max(max_sequence_len, counter)\n        return max_sequence_len\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    r = [int(x) for x in stdin.split()]\n    m = max(r)\n    res = 0\n    start = 0\n    for i in range(n):\n        if r[i] == m:\n            res = max(res, i - start)\n            start = i\n        if i == n - 1:\n            res = max(res, i - start + 1)\n    return str(res)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    length, *integers = map(int, stdin.splitlines())\n    print(length)\n    print(*integers)\n\n    return 0\n"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    sequence = list(map(int, stdin[1].split(' ')))\n\n    s = [0] * (n+1)\n\n    for i in range(n):\n        s[i+1] = s[i] + sequence[i]\n\n    # print(s)\n    m = 0\n    for i in range(n+1):\n        # print(s[i])\n        if s[i] > 100*n:\n            # print(i)\n            m = max(m, i)\n    print(m)\n    return m\n\n\ndef"
    },
    {
        "number": 415,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    r = [int(x) for x in stdin.readline().split()]\n    r = [0] + r + [0]\n    ans = 0\n    cur_sum = 0\n    for i in range(1, len(r)):\n        cur_sum += r[i]\n        if cur_sum > 100 * n:\n            ans = max(ans, i - (cur_sum - 100 * n) // 100 - 1)\n    return str(ans)"
    },
    {
        "number": 416,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split(' ')]\n    h = {i:stdin[i] for i in range(len(stdin)) if stdin[i]!= '?'}\n    a, b = 0, 0\n    for i in h.values():\n        if i == 'N':\n            b += 1\n        else:\n            a += 1\n    if a >= k and b >= k:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 416,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split('\\n')[0].split())\n    nums = stdin.split('\\n')[1]\n    num_set = {num for num in nums if num in 'YN?'}\n    if len(num_set) == 1 and num_set.pop() == '?':\n        if n == 1:\n            if k == 0:\n                return 'NO'\n            else:\n                return 'YES'\n        elif (num_set == {'N'} and k == n) or (num_set == {'Y'} and k == 0):\n            return 'NO'\n        else:\n            return 'YES'\n    else:\n        return 'YES'\n"
    },
    {
        "number": 416,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\nimport math\nfrom functools import reduce\n\ndef"
    },
    {
        "number": 416,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, k = map(int, stdin.split())\n    series = list(map(str, stdin))\n    series = [i for i in series if i!= '?']\n    series.insert(0, '#')\n    series.append('#')\n\n    max_diss = 0\n    diss_count = 0\n    diss = []\n    for i in range(n+2):\n        if series[i] == 'N':\n            diss_count += 1\n        else:\n            diss_count = 0\n\n        if series[i] == '?':\n            if diss_count > max_diss:\n                max_diss = diss_count\n                diss = [i]\n            elif diss_count == max_diss:\n                diss.append(i)\n        \n    if max_diss >= k:\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 416,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Task:\n        The series which Stepan watched for a very long time, ended. In total, the series had n episodes. For each of them, Stepan remembers either that he definitely has watched it, or that he definitely hasn't watched it, or he is unsure, has he watched this episode or not.\n\n        Stepan's dissatisfaction is the maximum number of consecutive series that Stepan did not watch.\n\n    Input:\n        The first line contains two integers n and k (1 \u2264 n \u2264 100, 0 \u2264 k \u2264 n) \u2014 the number of episodes in the series and the dissatisfaction which should be checked.\n        The second line contains the sequence which consists of n symbols \"Y\", \"N\" and \"?\". If the i-th symbol equals \"Y\", Stepan remembers that he has watched the episode number i. If the i-th symbol equals \"N\", Stepan remembers that he hasn't watched the epizode number i. If the i-th symbol equals \"?\", Stepan doesn't exactly remember if he has watched the episode number i or not.\n\n    Output:\n        If Stepan's dissatisfaction can be exactly equal to k, then print \"YES\" (without quotes). Otherwise print \"NO\" (without quotes).\n    \"\"\"\n    # Task:\n    # 1) \u0421\u0442\u0440\u043e\u0447\u043a\u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u043f\u0440\u0438 \u0432\u0432\u043e\u0434\u0435 \u0432 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043f\u0443\u0441\u0442\u044b\u043c\u0438\n    # 2) \u0421\u0442\u0440\u043e\u0447\u043a\u0438 \u0432\u044b\u0432\u043e\u0434\u0430 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u043e\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u043e\u0439 \u0441 \u043f\u0440\u043e\u0431\u0435\u043b\u0430\u043c\u0438 \u043c\u0435\u0436\u0434\u0443 \u0441\u043b\u043e\u0432\u0430\u043c\u0438\n    # 3) \u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0435, \u0437\u0430\u0442\u0435\u043c \u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c \u0438\u0445\n    # 4) \u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u0440\u0438 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u0431\u0443\u0434\u0443\u0442 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c\u0441\u044f \u0441 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u043e\u043c\n    # 5) \u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0431\u0443\u0434\u0443\u0442 \u0432\u0432\u0435\u0434\u0435\u043d\u044b \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f k \u0438 n\n    # 6) \u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0431\u0443\u0434\u0443\u0442 \u0432\u0432\u0435\u0434\u0435\u043d\u044b \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0432\u0442\u043e\u0440\u0435\u043d\u0438\u0439 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0432 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u0438 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u0430\u044f \u0441\u0447\u0435\u0442\u0447\u0438\u043a\u0430\n    # 7) \u0417\u0430\u043f\u0440\u043e\u0441 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0434\u043b\u044f \u043f\u043e\u0434\u0441\u0447\u0435\u0442\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0433\u043e \u0447\u0438\u0441\u043b\u0430 \u043f\u043e\u0432\u0442\u043e\u0440\u0435\u043d\u0438\u0439\n    # 8) \u041f\u0440\u043e\u0446\u0435\u0441\u0441 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0435\u0441\u043b\u0438 \u0441\u0442\u0440\u043e\u043a\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u043f\u0443\u0441\u0442\u0430\u044f\n    # 9) \u0412 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0431\u0443\u0434\u0443\u0442 \u0432\u0432\u0435\u0434\u0435\u043d\u044b \u0441\u0442\u0440\u043e\u043a\u0438, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \"YNNNY\"\n    # 10) \u0412 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u043f\u043e\u043b\u043d\u044f\u0435\u0442\u0441\u044f \u0432\u0432\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443\n    # 11) \u0418\u0442\u043e\u0433\u043e\u0432\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u0430\u043d\u0430 \u0432 \u043d\u0430\u0431\u043e\u0440 \u0441\u0442\u0440\u043e\u043a, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 ['YNNN', 'N', 'Y', 'Y']\n    # 12) \u0412 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043e\u0439 \u043f\u043e\u0434\u0441\u0447\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0435\u043d\u044b \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u043f\u043e\u0434\u0441\u0447\u0435\u0442\u0430\n    # 13) \u0414\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043e\u0431\u0449\u0438\u0439 \u043c\u0430\u0441\u0441\u0438\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0432 \u0441\u0435\u0431\u0435 \u043f\u043e\u0434\u0441\u0447\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0438 \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u0442\u044c \u043d\u0430\u0431\u043e\u0440 \u0441\u0442\u0440\u043e\u043a \u043a \u043d\u0435\u043c\u0443\n    # 14) \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u0441\u0447\u0435\u0442\u0447\u0438\u043a\u0430 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u0443\u044e\u0442\u0441\u044f \u0432 \u043d\u0430\u0431\u043e\u0440 \u0441\u0442\u0440\u043e\u043a, \u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0432 \u043c\u0430\u0441\u0441\u0438\u0432 \u0441\u0442\u0440\u043e\u043a\n    # 15) \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432\u044b\u0432\u043e\u0434\u0430 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u044b\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438\n    # 16) \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0432\u044b\u0432\u043e\u0434\u0430 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0434\u043e\u043b\u0436\u0435\u043d \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u0438\u043d \u043d\u0435\u043e\u0431\u0445\u043e\u0434"
    },
    {
        "number": 416,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    num_episodes, max_dis = [int(x) for x in stdin.split(\" \")]\n    num_Y, num_N, num_question = 0, 0, 0\n    for el in stdin.split(\" \"):\n        if el == \"Y\":\n            num_Y += 1\n        elif el == \"N\":\n            num_N += 1\n        elif el == \"?\":\n            num_question += 1\n\n    if num_question == num_episodes:\n        if num_Y >= max_dis:\n            return \"YES\"\n        else:\n            return \"NO\"\n\n    if num_question + num_Y + num_N >= max_dis:\n        return \"YES\"\n    else:\n        return \"NO\"\n\ndef"
    },
    {
        "number": 416,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    number_of_episodes = stdin.split(\" \")[0]\n    dissatisfaction = stdin.split(\" \")[1]\n    number_of_episodes = int(number_of_episodes)\n    dissatisfaction = int(dissatisfaction)\n    number_of_episodes_seen = 0\n    for i in range(number_of_episodes):\n        if stdin[i] == \"Y\":\n            number_of_episodes_seen += 1\n        if stdin[i] == \"N\":\n            number_of_episodes_seen = 0\n        if number_of_episodes_seen >= dissatisfaction:\n            return \"YES\"\n    return \"NO\"\n    \n"
    },
    {
        "number": 416,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    stdin = stdin.split('\\n')\n    if n < k:\n        return 'NO'\n    \n    stdin = stdin[1:]\n    \n    count = 0\n    for s in stdin:\n        if s == '?':\n            count += 1\n        else:\n            count = 0\n        if count > k:\n            return 'NO'\n    return 'YES'"
    },
    {
        "number": 416,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split(' ')]\n    # \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0440\u043e\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0432 \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0438 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0434\u043d\u044f \u0441\u0435\u0440\u0438\u0438 \u0438 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043d\u0435\u0441\u043e\u0433\u043b\u0430\u0441\u0438\u044f\n    series = [1 if c == 'Y' else 0 for c in stdin.split(' ')[0]]\n    n_delta = 1\n    while n_delta <= k:\n        # \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u043d\u0435\u0441\u043e\u0433\u043b\u0430\u0441\u0438\u044f\n        k_delta = sum(series[i:i + n_delta] == [0, 0, 1])\n        if k_delta == n_delta:\n            return \"YES\"\n        n_delta += 1\n    return \"NO\"\n"
    },
    {
        "number": 416,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    num, k = map(int, stdin.split())\n    stdin = stdin.split()\n    d = {'N': 0, 'Y': 1, '?': 2}\n    s = [d[i] for i in stdin]\n    i = 0\n    count = 0\n    while i < num:\n        if s[i]!= s[i + 1]:\n            count += 1\n            if count == k:\n                return \"YES\"\n            if s[i] == s[i + 1]:\n                return \"NO\"\n        i += 1\n    return \"YES\" if count == k else \"NO\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    N, D, X = [int(x) for x in stdin.split(' ')]\n    M = 1 << N\n    dp = [[0 for _ in range(M)] for _ in range(M)]\n    dp[0][0] = 1\n    dp[1][1] = 1\n    dp[1][0] = 0\n    dp[1][2] = 1\n    for k in range(2, M):\n        dp[k][k & 1] = 0\n        for j in range(1, k):\n            dp[k][k & 1] += (dp[j][(k - j) & 1] + dp[j][k & 1]) % 1000000007\n    print(dp[M - 1][0])\n    return \"\""
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"Hello World!\"\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return '1'"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 4 2\")\n    8\n    >>> solution(\"1 1 1\")\n    0\n    >>> solution(\"1 2 1\")\n    0\n    >>> solution(\"1 2 1 1\")\n    2\n    >>> solution(\"1 2 2\")\n    1\n    >>> solution(\"1 1 1 1\")\n    1\n    >>> solution(\"2 2 2\")\n    1\n    \"\"\"\n    n, d, k = [int(x) for x in stdin.split()]\n    a = [int(x) for x in stdin.split()]\n    a = [x - k if x > k else x for x in a]\n    return sum(x < 0 for x in a)\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    # Complete this function\n    pass"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    _, *input_as_list = stdin.split(' ')\n    x, d = map(int, input_as_list)\n    count = 0\n    for i in range(x + 1):\n        if i * d == x:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, X, D = map(int, stdin.split())\n    A = list(range(X, N * D + 1, D))\n    t = len(A)\n    s = sum(A)\n    if s % 2 == 1:\n        return f\"{t - 1}\\n\"\n    for i in range(2 ** t):\n        sums = 0\n        for j in range(t):\n            if (i >> j) & 1:\n                sums += A[j]\n        if sums % 2 == 0:\n            return f\"{t - 1}\\n\"\n    return f\"{t}\\n\"\n\n\ndef"
    },
    {
        "number": 417,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Computes the number of ways for Takahashi and Aoki to take the\n    elements of an integer sequence.\n    >>> solution(\"3 4 2\")\n    8\n    >>> solution(\"1 2 1\")\n    1\n    \"\"\"\n    pass\n    N, X, D = map(int, stdin.split())\n    nums = []\n    for _ in range(N):\n        nums.append(X)\n        X += D\n    # TODO: Compute the possible values for S - T.\n    # HINT: You may want to compute the permutations of the first N - 1 elements.\n    # NOTE: You may also want to count the number of ways to obtain S - T.\n    # HINT: This is the solution to the problem of computing the number of ways for Takahashi and Aoki to take the elements of an integer sequence.\n    pass\n    # HINT: When you have this problem, the answer is a summation of the permutations of the first N - 1 elements.\n    # HINT: You may want to use the factorial function.\n    # HINT: When you have this problem, the answer is a summation of the permutations of the first N - 1 elements.\n    # HINT: When you have this problem, the answer is a summation of the permutations of the first N - 1 elements.\n    # HINT: Use a combinatorics problem to compute the permutations of the first N - 1 elements.\n\n    return None"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    participants = [line.split(' ') for line in stdin.strip().splitlines()]\n    participants = sorted(\n        (participant[0], int(participant[1]), int(participant[2]))\n        for participant in participants\n    )\n\n    handle = participants[0][0]\n    outscored = 0\n    for participant in participants:\n        if participant[0] == handle:\n            continue\n\n        before = participant[2]\n        after = participant[1]\n        if before >= after:\n            outscored += 1\n            handle = participant[0]\n\n    return 'YES' if outscored > 0 else 'NO'\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3\\nApplejack 2400 2400\\nFluttershy 2390 2431\\nPinkie_Pie -2500 -2450\\n\")\n    'NO'\n    >>> solution(\"3\\nBurunduk1 2526 2537\\nBudAlNik 2084 2214\\nsubscriber 2833 2749\\n\")\n    'YES'\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    d = {}\n    for i in range(n):\n        s = stdin.split('\\n')[i]\n        r = int(s.split(' ')[1])\n        l = s.split(' ')[0]\n        d[l] = r\n    for i in range(n):\n        s = stdin.split('\\n')[i]\n        r = int(s.split(' ')[1])\n        l = s.split(' ')[0]\n        if l in d and d[l] <= r:\n            del d[l]\n    if len(d)!= 0:\n        return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    results = []\n    while len(stdin) > 0:\n        handle, _, before, after = stdin.partition(\" \")\n        if after == \"\":\n            handle, _, after = handle.partition(\" \")\n        before, _, after = before.partition(\" \")\n        results.append(handle + \" \" + before + \" \" + after)\n        stdin = stdin[len(handle) + 1:]\n    count_before = sum([int(result.split(\" \")[1]) < 2400 for result in results])\n    count_after = sum([int(result.split(\" \")[2]) >= 2400 for result in results])\n    return \"YES\" if count_after > count_before else \"NO\""
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    ans = 'YES'\n    for i in range(N):\n        user, before, after = stdin.split()\n        before = int(before)\n        after = int(after)\n        if before <= after:\n            ans = 'NO'\n            break\n    return ans\n\n\ndef"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns \"YES\" if Anton's rating after contest is higher than that before, \"NO\" otherwise.\n    '''\n    n = int(stdin)\n    scores = []\n    for i in range(n):\n        inp = stdin.split('\\n')[i]\n        scores.append([inp.split()[0], int(inp.split()[1]), int(inp.split()[2])])\n    scores.sort(key=lambda x: x[2])\n    for i in range(n - 1, -1, -1):\n        if scores[i][2] >= scores[i - 1][2] and scores[i][1] < scores[i - 1][1]:\n            return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    count = int(stdin[0])\n    color = ''\n    result = 'NO'\n    for i in range(1, count + 1):\n        color = stdin[i].split(' ')\n        if int(color[0]) >= 2400 and int(color[2]) >= 2400:\n            result = 'YES'\n            break\n        elif int(color[0]) < int(color[2]):\n            result = 'YES'\n            break\n    return result\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Given a list of contestants' results in a contest,\n    determines whether Anton is good or not.\n\n    :param stdin:\n    :return:\n    \"\"\"\n\n    results = [line.split() for line in stdin.split('\\n')]\n    # Iterate through each result and compare the after ratings to the before\n    # ratings.\n    for name, after_rating, before_rating in results:\n        if int(after_rating) >= 2400 and before_rating > int(after_rating):\n            return \"YES\"\n    return \"NO\"\n\n\nsolution(stdin)\n"
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return \"YES\" if... else \"NO\""
    },
    {
        "number": 418,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    participants = int(stdin)\n    i = 0\n    res = []\n    while i < participants:\n        handle = stdin.split(\"\\n\")[i]\n        before = int(stdin.split(\"\\n\")[i+1].split()[0])\n        after = int(stdin.split(\"\\n\")[i+1].split()[1])\n        i += 2\n        res.append(handle)\n    return \"YES\" if len(res) == participants else \"NO\"\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the solution to the given problem.\n    >>> solution('100000000')\n    4\n    >>> solution('10100')\n    3\n    >>> solution('10100')\n    2\n    >>> solution('10100')\n    2\n    \"\"\"\n    return str(sum(int(b) for b in bin(int(stdin))[2:]))\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n'''\nimport re\n\ndef"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the solution of the task.\"\"\"\n    # your solution goes here\n    return ''\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    return str(bin(int(s, 2) - 4)[3:])\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin, 2))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\ndef"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 419,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    You are given an n x m matrix, consisting of 0s and 1s, where 0 represents water and 1 represents land.\n\n    A move consists of:\n    1. Placing a land cell on an empty land cell that isn't on the border of the grid, if it exists.\n    2. Placing a water cell on an empty water cell, if it exists.\n    3. Removing a land cell on a water cell, if it exists.\n    4. Removing a water cell on a land cell, if it exists.\n\n    Your task is to find the minimum number of moves needed to transform the grid into the one that has a single land cell. If it's not possible, return -1.\n\n    The edges of the grid are considered empty. The cells on the border of the grid are considered full.\n\n    Input:\n    The first line of the input contains two integers n and m (1 <= n,m <= 100) \u2014 the size of the matrix.\n\n    Next n lines contain m integers each. The i-th of them contains m integers ai1, ai2,..., aim (0 <= ai1, ai2,..., aim <= 1) \u2014 the i-th row of the matrix.\n\n    Output:\n    The first line of the output should contain the number of moves, the answer to the problem.\n    '''\n    n, m = map(int, stdin.readline().split())\n    land_positions = set()\n    water_positions = set()\n    for i in range(n):\n        line = stdin.readline()\n        for j in range(m):\n            if line[j] == '1':\n                land_positions.add((i, j))\n            elif line[j] == '0':\n                water_positions.add((i, j))\n    land_positions = list(land_positions)\n    water_positions = list(water_positions)\n    result = -1\n    if len(land_positions) == 0:\n        return result\n    visited = [False] * len(land_positions)\n    queue = deque([land_positions[0]])\n    visited[0] = True\n    while queue:\n        for _ in range(len(queue)):\n            i, j = queue.popleft()\n            if (i, j + 1) in water_positions and (i, j - 1) in water_positions and (i + 1, j) in water_positions and (i - 1, j) in water_positions:\n                return 0\n            for ni, nj in [i, j + 1], [i, j - 1], [i + 1, j], [i - 1, j]:\n                if ni in range(n) and nj in range(m) and not visited[land_positions.index((ni, nj))]:\n                    queue.append((ni, nj))\n                    visited[land_positions.index((ni, nj))] = True\n        if sum(visited) == len(visited):\n            break\n        result += 1\n    return result"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    a = [[0 for _ in range(m)] for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            a[i][j] = int(stdin.split('\\n')[i].split(' ')[j])\n    return str(int(solution_rec(a, m, n)))\n\n\ndef"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity: O(n * m)\n    Space complexity: O(n * m)\n    \"\"\"\n    a = stdin.splitlines()\n    if len(a) > 1:\n        n = len(a)\n        m = len(a[0].split())\n        b = []\n        for i in range(n):\n            for j in range(m):\n                if a[i].split()[j] == \"1\":\n                    b.append([1, j, i + 1, j, i + 1])\n                else:\n                    b.append([0, j, i + 1, j, i + 1])\n        b = sorted(b, key=lambda x: x[1])\n        c = []\n        for i in range(len(b)):\n            if b[i][0] == 1:\n                j = b[i][1]\n                c.append([b[i][2], j, b[i][3], j, b[i][4]])\n        for i in range(len(b) - 1):\n            for j in range(i + 1, len(b)):\n                if b[i][1] == b[j][1]:\n                    c.append([b[i][2], b[j][2], b[i][3], b[j][3], b[i][4]])\n        for i in range(len(b)):\n            if b[i][1] == m // 2:\n                break\n        c.append([b[i][2], b[i][2], b[i][3], b[i][3], b[i][4]])\n        c = sorted(c, key=lambda x: x[1])\n        count = 0\n        for i in range(len(c)):\n            if c[i][0]!= 1:\n                count += 1\n        return str(count)\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [list(map(int, stdin.split())) for _ in range(n)]\n\n    c = [1] + [0] * m\n    for row in a:\n        c.append(sum(row))\n    c.append(1)\n\n    dp = [0] * (n + 1)\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            dp[i] = min(dp[i], dp[i - j] + c[j])\n    return dp[-1]\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    # your code here\n    # It's always a good idea to test your solution by using the 'Run' button\n    # below. But if you're stuck, you can try to solve the problem on your own.\n    \n    n, m = map(int, stdin.split())\n    \n    matrix = []\n    \n    for i in range(n):\n        matrix.append(list(map(int, stdin.split())))\n    \n    count = 0\n    \n    for i in range(n):\n        for j in range(m):\n            for k in range(n):\n                for l in range(m):\n                    if matrix[i][j]!= matrix[k][l] and j < l:\n                        count += 1\n                        break\n                else:\n                    continue\n                break\n            else:\n                continue\n            break\n    \n    return str(count)\n\nprint(solution(input()))\n\n\n\nhttps://www.codewars.com/kata/51c4bdb62295bcc63d0000c5/python\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split('\\n')[0].split())\n    a = [list(map(int, row.split())) for row in stdin.split('\\n')[1:n + 1]]\n    \n    matrix = [[\"0\" for _ in range(m)] for _ in range(n)]\n    \n    for i in range(n):\n        for j in range(m):\n            matrix[i][j] = str(a[i][j])\n    \n    matrix.reverse()\n    \n    for i in range(n):\n        for j in range(m):\n            matrix[i][j] = matrix[i][j].replace(\"0\", \"1\")\n            matrix[i][j] = matrix[i][j].replace(\"1\", \"0\")\n    \n    print(\"\\n\".join(\" \".join(row) for row in matrix))\n    \n    return str(m - n)\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split(' ')))\n    matrix = [list(map(int, input().split(' '))) for i in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if j > i:\n                matrix[i][j] = 0\n    matrix.sort(key=lambda x: sum(x))\n    print(matrix)\n    return matrix[0][0] * 2 + 2\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    stdin = stdin.split(\"\\n\")\n    n, m = stdin[0].split()\n    n, m = int(n), int(m)\n\n    stdin = stdin[1:]\n\n    # create matrix\n    matrix = [[0 for x in range(m)] for x in range(n)]\n    for i in range(n):\n        for j in range(m):\n            matrix[i][j] = stdin[i][j]\n    \n    mirrors = 0\n    # Check all possible mirrors\n    for i in range(n):\n        for j in range(m):\n            if i + 1 < n:\n                if matrix[i][j] == matrix[i + 1][j] and matrix[i][j]!= matrix[i][j + 1] and matrix[i][j]!= matrix[i + 1][j + 1]:\n                    mirrors += 1\n            if j + 1 < m:\n                if matrix[i][j] == matrix[i][j + 1] and matrix[i][j]!= matrix[i + 1][j] and matrix[i][j]!= matrix[i + 1][j + 1]:\n                    mirrors += 1\n    return str(mirrors)\n\n\nprint(solution(\"5 3\\n0 0 0\\n0 0 0\\n0 0 0\\n1 1 1\\n1 1 1\"))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n-----Input-----\n\nThe first line contains two integers, n and m (1 \u2264 n, m \u2264 100). Each of the next n lines contains m integers \u2014 the elements of matrix a. The i-th line contains integers a_{i}1, a_{i}2,..., a_{im} (0 \u2264 a_{ij} \u2264 1) \u2014 the i-th row of the matrix a.\n\n\n-----Output-----\n\nIn the single line, print the answer to the problem \u2014 the minimum number of rows of matrix b.\n\n\n-----Examples-----\nInput\n4 3\n0 0 1\n1 1 0\n1 1 0\n0 0 1\n\nOutput\n2\n\nInput\n3 3\n0 0 0\n0 0 0\n0 0 0\n\nOutput\n3\n\nInput\n8 1\n0\n1\n1\n0\n0\n1\n1\n0\n\nOutput\n2\n\nInput\n7 3\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n0 0 0\n\nOutput\n3\n\n\n\n-----Note-----\n\nIn the first test sample the answer is a 2 \u00d7 3 matrix b:\n\n\n\n001\n\n110\n\n110\n\n111\n\n001\n\n110\n\n110\n\n111\n\n111\n\n110\n\n110\n\n110\n\n111\n\n110\n\n110\n\n110\n\n111\n\n110\n\n110\n110\n111\n\n110\n\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110\n110"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, m = stdin.split(\" \")\n    n, m = int(n), int(m)\n    mat = [list(stdin.split(\" \"))]\n    for i in range(n):\n        mat.append(list(stdin.split(\" \")))\n\n    n = len(mat)\n    m = len(mat[0])\n    n, m = stdin.split(\" \")\n    n, m = int(n), int(m)\n    mat = [list(stdin.split(\" \"))]\n    for i in range(n):\n        mat.append(list(stdin.split(\" \")))\n\n    # print(mat)\n    # print(\"*\" * 100)\n    # for i in range(len(mat)):\n    #     print(mat[i])\n    # print(\"*\" * 100)\n    # print()\n\n    cnt = 0\n    for i in range(len(mat)):\n        # print(\"*\" * 100)\n        # print(mat[i])\n        for j in range(m):\n            # print(mat[i][j])\n            if mat[i][j] == \"0\":\n                # print(\"0\")\n                if j == 0:\n                    if mat[i][j + 1] == \"0\":\n                        cnt += 1\n                        # print(\"cnt: \" + str(cnt))\n                elif j == m - 1:\n                    if mat[i][j - 1] == \"0\":\n                        cnt += 1\n                        # print(\"cnt: \" + str(cnt))\n                else:\n                    if mat[i][j - 1] == \"0\" and mat[i][j + 1] == \"0\":\n                        cnt += 1\n                        # print(\"cnt: \" + str(cnt))\n        # print(\"*\" * 100)\n        # print()\n        # print()\n    return cnt\n"
    },
    {
        "number": 420,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split('\\n')[0].split())\n    matrix = [list(map(int, stdin.split('\\n')[i].split())) for i in range(1, n + 1)]\n    b = [matrix[i][:m] for i in range(n)]\n    \n    while True:\n        if n % 2 == 0:\n            b.append(b[-1][::-1])\n        else:\n            b.append(b[-1][::-1] + [matrix[n][m]])\n        if b[-1] == matrix[n][:m]:\n            break\n        b.pop(0)\n        \n    print(len(b))\n    \n    return ''\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\"\n    longest_intersection: int = 0\n    for i in range(0, len(sorted_intersections)):\n        current_intersection: tuple[int, int] = sorted_intersections[i]\n        left_bound: int = current_intersection[0]\n        right_bound: int = current_intersection[1]\n        for j in range(0, i):\n            previous_intersection: tuple[int, int] = sorted_intersections[j]\n            previous_left_bound: int = previous_intersection[0]\n            previous_right_bound: int = previous_intersection[1]\n            if left_bound <= previous_right_bound and previous_left_bound <= right_bound:\n                longest_intersection = max(longest_intersection, i - j)\n    return longest_intersection\n    \"\"\"\n\ndef"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2\n   ... 7 11\n   ... 4 7\n   ... ''')\n    '1'\n    >>> solution('''5\n   ... 1 2\n   ... 2 3\n   ... 3 4\n   ... 4 5\n   ... 5 6\n   ... ''')\n    '3'\n    >>> solution('''6\n   ... 4 8\n   ... 1 5\n   ... 4 7\n   ... 2 5\n   ... 1 3\n   ... 6 8\n   ... ''')\n    '2'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve exercise.\"\"\"\n   ...\n\n\ndef"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    # Allocate table of two times and their start times\n    start_time = [0 for _ in range(2 * n)]\n    # Allocate table of two times and their finish times\n    finish_time = [0 for _ in range(2 * n)]\n    # Allocate table of one-sided intervals\n    interval = [0 for _ in range(2 * n)]\n    for i in range(n):\n        start_time[i], finish_time[i], interval[i] = [int(x) for x in stdin.split()]\n        start_time[n + i], finish_time[n + i] = finish_time[i], start_time[i]\n\n    # Sorting starts\n    sorted_start = sorted(start_time[:n])\n    # Sorting finishes\n    sorted_finish = sorted(finish_time[:n])\n\n    # Maximal number of orders\n    max_orders = 0\n    # Current number of orders\n    current_orders = 0\n    # Index for current order\n    current_index = 0\n\n    # Maximal number of current orders\n    max_current_orders = 0\n    # Maximal number of current orders\n    max_current_orders = 0\n    # Current number of current orders\n    current_current_orders = 0\n    # Index for current order\n    current_current_index = 0\n\n    # Sorting starts\n    sorted_start = sorted(start_time[:n])\n    # Sorting finishes\n    sorted_finish = sorted(finish_time[:n])\n\n    # Maximal number of orders\n    max_orders = 0\n    # Current number of orders\n    current_orders = 0\n    # Index for current order\n    current_index = 0\n\n    # Maximal number of current orders\n    max_current_orders = 0\n    # Maximal number of current orders\n    max_current_orders = 0\n    # Current number of current orders\n    current_current_orders = 0\n    # Index for current order\n    current_current_index = 0\n\n    for i in range(n):\n        # Check if current order can be accepted\n        if sorted_start[current_index] + interval[i] <= sorted_finish[current_index]:\n            current_current_orders += 1\n            # Update current orders if it is possible\n            if current_current_orders > max_current_orders:\n                max_current_orders = current_current_orders\n        else:\n            current_current_orders = 0\n        # Update maximum current orders\n        if current_current_orders > max_current_orders:\n            max_current_orders = current_current_orders\n        # Check if current order can be accepted\n        if sorted_start[current_index] + interval[i] <= sorted_finish[current_index + n]:\n            current_orders += 1\n            # Update current orders if it is possible\n            if current_orders > max_orders:\n                max_orders = current_orders\n        else:\n            current_orders = 0\n        # Update maximum current orders\n        if current_orders > max_orders:\n            max_orders = current_orders\n        # Check if current order can be accepted\n        if sorted_start[current_index + n] + interval[i] <= sorted_finish[current_index + n]:\n            current_current_orders += 1\n            # Update current orders if it is possible\n            if current_current_orders > max_current_orders:\n                max_current_orders = current_current_orders\n        else:\n            current_current_orders = 0\n        # Update maximum current orders\n        if current_current_orders > max_current_orders:\n            max_current_orders = current_current_orders\n        # Update maximum current orders\n        if current_orders > max_current_orders:\n            max_current_orders = current_orders\n\n    return max_orders\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return str(solution_sort(stdin))\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    orders = 0\n    for line in stdin.split('\\n'):\n        start, end = map(int, line.split())\n        orders = max(orders, (end - start) // 2)\n    return str(orders)\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 421,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    pass\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num_tables, k = map(int, stdin.split())\n    table_nums = [int(i) for i in stdin.split()]\n    formula_nums = [int(i) for i in stdin.split()]\n    for num_table, num_formula in zip(table_nums, formula_nums):\n        if num_table % k == 0 and num_formula % k == 0:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n        \ndef"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, k = map(int, lines[0].split())\n    tables = [int(x) for x in lines[1].split()]\n    formulas = [int(x) for x in lines[2].split()]\n\n    # max tables in row (if smaller than k, then we have no problem)\n    max_tables_in_row = k\n    max_formulas_in_row = k\n\n    # table_in_row represents count of tables on the current page\n    # formula_in_row represents count of formulas on the current page\n    table_in_row = 0\n    formula_in_row = 0\n\n    for table_count in tables:\n        if table_count > max_tables_in_row:\n            return \"NO\"\n        table_in_row += table_count\n        if table_in_row > max_tables_in_row:\n            return \"NO\"\n\n    for formula_count in formulas:\n        if formula_count > max_formulas_in_row:\n            return \"NO\"\n        formula_in_row += formula_count\n        if formula_in_row > max_formulas_in_row:\n            return \"NO\"\n\n    return \"YES\"\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2 1\\n5 5\\n2 2\")\n    'YES'\n    >>> solution(\"2 2\\n5 6\\n2 2\")\n    'NO'\n    >>> solution(\"4 1\\n4 1 10 1\\n3 2 10 1\")\n    'YES'\n    \"\"\"\n    n, k = map(int, stdin.split())\n    tables, formulas = map(int, stdin.split())\n    for page, table, formula in zip(range(1, n + 1),\n                                    tables // k + (tables % k!= 0),\n                                    formulas // k + (formulas % k!= 0)):\n        if table > k or formula > k:\n            print(\"NO\")\n            return\n    print(\"YES\")\n    return\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    l = [int(x) for x in stdin.split(\"\\n\")]\n    n, k = l[0:2]\n    t = l[2: 2 + n]\n    f = l[2 + n:]\n    return \"YES\" if any(max(max(len(y) for y in t[i: i + k]), len(x)) <= k for i in range(n)) else \"NO\"\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    num_pages, k = [int(i) for i in stdin.split()]\n    tables = [int(i) for i in stdin.split()]\n    formulas = [int(i) for i in stdin.split()]\n\n    def count_tables(tables, num_pages):\n        count = 0\n        for _ in range(num_pages):\n            count += len(tables)\n            tables.insert(0, tables.pop())\n        return count\n\n    def count_formulas(formulas, num_pages):\n        count = 0\n        for _ in range(num_pages):\n            count += len(formulas)\n            formulas.insert(0, formulas.pop())\n        return count\n\n    max_tables = count_tables(tables, num_pages)\n    max_formulas = count_formulas(formulas, num_pages)\n    if k >= max_tables and k >= max_formulas:\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    x = [int(x) for x in stdin.split()]\n    y = [int(x) for x in stdin.split()]\n    \n    return \"YES\" if n == 1 or n == 2 or (x.count(k) + y.count(k)) <= k else \"NO\"\n    \n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 1 10 1\\n3 2 10 1\")\n    'YES'\n    >>> solution(\"4 1 10 1\\n3 2 10 1\\n5 6\\n2 2\\n\")\n    'NO'\n    >>> solution(\"5 6\\n2 2\\n\")\n    'YES'\n    >>> solution(\"4 1 10 1\\n3 2 10 1\\n5 6\\n3 2\\n\")\n    'NO'\n    >>> solution(\"2 1\\n2 1\\n\")\n    'YES'\n    \"\"\"\n    #...\n    stdin = stdin.splitlines()\n    n, k = int(stdin[0].split()[0]), int(stdin[0].split()[1])\n    tables = list(map(int, stdin[1].split()))\n    formulas = list(map(int, stdin[2].split()))\n    #...\n    for i in range(n):\n        tables[i] *= 2\n        formulas[i] *= 2\n    formulas.sort()\n    tables.sort()\n    tables.reverse()\n    formulas.reverse()\n    i = 0\n    numbers_of_tables_in_row = 0\n    numbers_of_formulas_in_row = 0\n    for j in range(len(tables)):\n        if i >= len(tables) or tables[i] > k:\n            break\n        numbers_of_tables_in_row += 1\n        i += tables[i]\n    i = 0\n    for j in range(len(formulas)):\n        if i >= len(formulas) or formulas[i] > k:\n            break\n        numbers_of_formulas_in_row += 1\n        i += formulas[i]\n    if numbers_of_tables_in_row > k or numbers_of_formulas_in_row > k:\n        return 'NO'\n    return 'YES'"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 422,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 423,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = []\n    for i in range(n):\n        a.append(int(stdin.split()[i]))\n    if a[n - 1] < k:\n        print(\"Yes\")\n        return\n    else:\n        print(\"No\")\n        return\n"
    },
    {
        "number": 423,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    sys.setrecursionlimit(1000000)\n\n    n, k = map(int, stdin.readline().split())\n    a = [int(stdin.readline()) for _ in range(n)]\n    i = n - 1\n    j = a[i]\n    while j == 0:\n        i -= 1\n        j = a[i]\n    i += 1\n    s = a[i:]\n    s.sort(reverse=True)\n    j = -1\n    while True:\n        j = stdin.readline().strip()\n        if j == '?':\n            break\n        j = int(j)\n        if j == j:\n            break\n    if j <= k:\n        return 'Yes'\n    i = n - 1\n    j = a[i]\n    while j == 0:\n        i -= 1\n        j = a[i]\n    i += 1\n    s = a[i:]\n    s.sort(reverse=True)\n    j = -1\n    while True:\n        j = stdin.readline().strip()\n        if j == '?':\n            break\n        j = int(j)\n        if j == j:\n            break\n    if j <= k:\n        return 'Yes'\n    return 'No'\n\nprint(solution(stdin=sys.stdin.read()))"
    },
    {
        "number": 423,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    b = []\n    for i in range(n + 1):\n        if stdin[i] == '?':\n            b.append(0)\n        else:\n            b.append(int(stdin[i]))\n    q = []\n    for i in range(n + 1):\n        if stdin[i + n] == '?':\n            q.append(0)\n        else:\n            q.append(int(stdin[i + n]))\n    q = 1 - q[::-1]\n    q = q[::-1]\n    q = Polynomial(q)\n    p = Polynomial(b)\n    p = p.reduce()\n    p = p.divide(q)\n    if p[0].degree > 0:\n        print('No')\n    else:\n        print('Yes')\n    return \"\"\n\n\ndef"
    },
    {
        "number": 423,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    lst = stdin.split('\\n')[:2]\n    n, k = int(lst[0].split()[0]), int(lst[0].split()[1])\n    s = [i for i in lst[1] if i!= '?']\n    poly = []\n    for i in range(n):\n        poly.append(int(s[i]))\n    poly = poly[::-1]\n    p = ''\n    for i in range(n):\n        if i > 0:\n            p +='+ '\n        p += str(poly[i]) + 'x'\n        if i < n - 1:\n            p += '^' + str(i + 1)\n    p +='- 1'\n    print(p)\n    q = stdin.split('\\n')[2]\n    q = [int(i) for i in q.split()]\n    for i in range(len(q)):\n        if q[i]!= 0:\n            q[i] = 1\n    while 1:\n        for i in range(n):\n            if i > 0:\n                p +='+ '\n            p += str(poly[i]) + 'x'\n            if i < n - 1:\n                p += '^' + str(i + 1)\n        p +='- 1'\n        print(p)\n        if polynomial_degree(q, n) == 0:\n            print('Yes')\n            return\n        if polynomial_degree(poly, n) < 0:\n            print('No')\n            return\n        print('Yes')\n        return\n\ndef"
    },
    {
        "number": 423,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if \"?\" not in stdin else \"No\"\n"
    },
    {
        "number": 423,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Do not return anything, modify nums in-place instead.\n    \"\"\"\n\n    # read input\n    n, k = map(int, stdin.readline().split())\n    polynomial = [int(n) for n in stdin.readlines()]\n\n    for i in range(n + 1):\n        polynomial[i] = polynomial[i] if polynomial[i]!= 0 else i\n\n    # loop over all elements in polynomial\n    # and record the \"left\" and \"right\" of each x\n    polynomial_left = {}\n    polynomial_right = {}\n    for i in range(n + 1):\n        # check if it's the left most element\n        # we need to do this because we have to\n        # record the polynomial in the left\n        # direction\n        if i == 0:\n            polynomial_left[i] = polynomial[i]\n        # check if it's the right most element\n        # we need to do this because we have to\n        # record the polynomial in the right\n        # direction\n        elif i == n:\n            polynomial_right[i] = polynomial[i]\n        # for all other elements\n        else:\n            polynomial_left[i] = polynomial[i]\n            polynomial_right[i] = polynomial[i]\n\n    # loop over all elements in polynomial\n    # and determine if the left and right of each\n    # element is divisible by x - k\n    for i in range(n + 1):\n        # check if it's the left most element\n        # we have to do this because we have to\n        # check if the right is divisible by x - k\n        # and we don't want to check twice\n        # to keep it simple\n        if i == 0:\n            if polynomial_right[i] % (x - k) == 0:\n                return \"Yes\"\n        # check if it's the right most element\n        # we have to do this because we have to\n        # check if the left is divisible by x - k\n        # and we don't want to check twice\n        # to keep it simple\n        elif i == n:\n            if polynomial_left[i] % (x - k) == 0:\n                return \"Yes\"\n        # for all other elements\n        else:\n            if polynomial_left[i] % (x - k) == 0:\n                return \"Yes\"\n            if polynomial_right[i] % (x - k) == 0:\n                return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 423,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    #Your code here\n    n,k = [int(x) for x in stdin.split()]\n    arr = [int(x) for x in stdin.split()[1::]]\n    maxNum = sum(arr)\n    if k > maxNum:\n        return 'No'\n    elif maxNum < 0:\n        return 'No'\n    elif n == 1:\n        return 'Yes'\n    elif n == 2:\n        if arr[0] == 0:\n            return 'Yes'\n        else:\n            return 'No'\n    elif n == 3:\n        if arr[0] == 0 and arr[1] == 1:\n            return 'Yes'\n        else:\n            return 'No'\n    elif n == 4:\n        if (arr[0] == 0 and arr[1] == 1 and arr[2] == 1) or (arr[0] == 0 and arr[1] == -1 and arr[2] == -1 and arr[3] == 1):\n            return 'Yes'\n        else:\n            return 'No'\n    else:\n        if arr[0] == 0 and arr[1] == 0 and arr[2] == 1:\n            return 'Yes'\n        else:\n            return 'No'\nprint(solution(input()))\n"
    },
    {
        "number": 423,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2 100\n   ...?\n   ...?\n   ...?\n   ...?''')\n    'No'\n    \"\"\"\n   ...\n    n, k = list(map(int, stdin.split()))\n    a = [0] * (n + 1)\n    for _ in range(n + 1):\n        a[_] = int(stdin.readline().strip())\n    if a[0] == k or a[0] == -k:\n        return 'Yes'\n    for i in range(1, n + 1):\n        if a[i] == k or a[i] == -k:\n            continue\n        else:\n            a[i] = k\n            if is_win(a):\n                return 'Yes'\n            a[i] = -k\n            if is_win(a):\n                return 'Yes'\n    return 'No'\n\n\ndef"
    },
    {
        "number": 423,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split('\\n')[0].split())\n    coefficients = []\n    for i in range(n + 1):\n        coefficients.append(int(stdin.split('\\n')[i].split(' ')[0]))\n    for i in range(n + 1):\n        if '?' in stdin.split('\\n')[i]:\n            coefficients[i] = int(stdin.split('\\n')[i].split(' ')[1])\n    assert k <= int(1e6)\n    assert int(stdin.split('\\n')[n + 1].split(' ')[0]) <= int(1e6)\n    assert len(set(coefficients)) == len(coefficients)\n    assert len(stdin.split('\\n')[n + 1].split(' ')) == 2\n    for i in range(len(stdin.split('\\n'))):\n        assert len(stdin.split('\\n')[i].split(' ')) == 2\n    for i in range(n + 1):\n        assert coefficients[i] == int(stdin.split('\\n')[i].split(' ')[1])\n    x = 1\n    while True:\n        if coefficients[0] == 0:\n            break\n        x *= x\n        coefficients = [a + 1 for a in coefficients]\n        if any(a == 0 for a in coefficients):\n            coefficients = [a + 1 for a in coefficients]\n            x = 1\n            continue\n        elif x % k == 0:\n            return \"Yes\"\n        else:\n            return \"No\"\nprint(solution(stdin))\n"
    },
    {
        "number": 423,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_text = stdin.split('\\n')\n    n, k = list(map(int, input_text[0].split()))\n    coeffs = list(map(int, input_text[1:-1]))\n    print(n, k, coeffs)\n    # l = max([c if abs(c)!= 0 else k for c in coeffs])\n    # print(l)\n    # return 'Yes' if l > k else 'No'\n    def canWin(coeffs: list, k: int) -> bool:\n        # [x - k]x^(n-1) - coeffs[0]x^(n-1) -... - coeffs[n-1] = 0\n        if len(coeffs) == 0:\n            return False\n        for i in range(len(coeffs)):\n            if coeffs[i] == k:\n                continue\n            elif coeffs[i]!= 0:\n                return False\n        return True\n\n    return 'Yes' if canWin(coeffs, k) else 'No'\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin))\n\n\"\"\"\n\nimport math\n\ndef"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x % 2 == 0:\n        x += 1\n    p = 2\n    while p < x - 1:\n        while x % p!= 0:\n            p += 1\n        x += 2\n    return x - 2\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    X_2 = int(stdin)\n    primes = []\n    while X_2 > 2:\n        if isPrime(X_2):\n            primes.append(X_2)\n        if len(primes) == 1:\n            X_2 //= 2\n            X_2 = int(X_2)\n            continue\n        p = primes[len(primes) // 2]\n        X_2 %= p\n        X_2 //= p\n    return str(X_2)\n\n\ndef"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    while x % 2 == 0:\n        x //= 2\n    return str(x * 2 + 1)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # import math\n    # import functools\n    # import itertools\n    # import operator\n    #\n    # primes = []\n    #\n    # def is_prime(n):\n    #     if n < 2:\n    #         return False\n    #     if n == 2:\n    #         return True\n    #     for i in range(2, math.floor(functools.reduce(operator.mul, range(1, int(math.sqrt(n)) + 1), 1)) + 1):\n    #         if n % i == 0:\n    #             return False\n    #     return True\n    #\n    # def solve(n):\n    #     for i in range(3, n + 1, 2):\n    #         if is_prime(i):\n    #             primes.append(i)\n    #     for i in range(2, n + 1):\n    #         if i not in primes:\n    #             return i\n    #\n    #\n    #     # for i in itertools.count(3):\n    #     #     if all(i % j!= 0 for j in range(2, int(i ** 0.5) + 1)):\n    #     #         primes.append(i)\n    #     #     if len(primes) == n:\n    #     #         return i\n    #     #     if i == n + 1:\n    #     #         return n + 1\n    #\n    # x = int(stdin)\n    # return solve(x - 1)\n    x = int(stdin)\n    for i in range(2, x):\n        if x % i == 0:\n            return i\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    candidates = [i for i in range(num) if i > 2 and is_prime(i)]\n    for candidate in candidates:\n        if not (num % candidate):\n            return str(candidate)\n"
    },
    {
        "number": 424,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p = [int(x) for x in stdin.split(\" \")]\n    if p < 0:\n        return str(n)\n    elif p == 0:\n        if n == 0:\n            return str(0)\n        else:\n            return str(-1)\n    else:\n        if n == 0:\n            return str(0)\n        else:\n            return str(1 + max([int(x) for x in bin(n)[2:]]))\n\"\"\"\n\nimport math\n\ndef"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split(' '))\n\n    def is_power_of_two(x: int) -> bool:\n        return (x & (x - 1) == 0) and x!= 0\n\n    if not is_power_of_two(p):\n        return -1\n\n    # find the highest power of 2 < p\n    n_bits = 0\n    while True:\n        if is_power_of_two(p - n_bits):\n            break\n        n_bits += 1\n    n_bits += 1\n    if n < (1 << n_bits):\n        return n_bits\n\n    # get the highest power of 2 < p - n_bits\n    n_bits = 0\n    while True:\n        if is_power_of_two(p - n_bits):\n            break\n        n_bits += 1\n    n_bits += 1\n    return n_bits + 1\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    if p == 0:\n        for i in range(n):\n            if 2 ** i == n:\n                return i\n        return -1\n    elif p > 0:\n        for i in range(n):\n            if 2 ** i + p == n:\n                return i\n        return -1\n    elif p < 0:\n        for i in range(n):\n            if 2 ** i - p == n:\n                return i\n        return -1\n    else:\n        return -1\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    # print(a, b)\n    if a % 2 == 1 or b < 0:\n        return -1\n    elif a <= b:\n        return 1\n    else:\n        if b == 0:\n            return a // 2\n        else:\n            return a // 2 + 1\n\n\nprint(solution('24 0'))\nprint(solution('24 1'))\nprint(solution('24 -1'))\nprint(solution('4 -7'))\nprint(solution('1 1'))"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    if p == 0 or p == 1 or n % p == 0:\n        return -1\n\n    if p == -1 and n % 2 == 1:\n        return -1\n    \n    c = 0\n    while n % p!= 0:\n        c += 1\n        n -= 1\n\n    return c + 1\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, p = [int(i) for i in stdin.split()]\n    return n if n > sum((2 ** i - p) for i in range(20)) else -1\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    if p == 0 or p == 1:\n        return str(n)\n    elif p < 0:\n        return str(-1)\n    return str(min(p - 1 + (1 if (n - 1) % (2**(p - 1)) else 0), n))\n\n\n\n'''\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    solution function\n    \"\"\"\n    return ''\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n\n    if p < 0:\n        return -1\n    if p == 0 and n % 2 == 0:\n        return 0\n    if p == 0 and n % 2 == 1:\n        return 1\n\n    # if p > 0:\n    #     x = 0\n    #     while 2 ** x + p < n:\n    #         x += 1\n    #\n    #     if 2 ** x + p == n:\n    #         return x + 1\n    #     else:\n    #         return -1\n    #\n    # else:\n    #     x = 0\n    #     while 2 ** x - p < n:\n    #         x += 1\n    #\n    #     if 2 ** x - p == n:\n    #         return x + 1\n    #     else:\n    #         return -1\n\n    x = math.floor(math.log2(n))\n    if 2 ** x - p >= n:\n        return x + 1\n    else:\n        return -1\n\n    return result\n"
    },
    {
        "number": 425,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    n, p = map(int, stdin.split())\n    if p < 0:\n        if n % p == 0:\n            return 1\n        else:\n            return -1\n    else:\n        if n % p == 0:\n            return 0\n        else:\n            return 1 + solution(n, p // 2)\n    \"\"\"\n    n, p = map(int, input().split())\n    if p < 0:\n        if n % 2 == 0:\n            return -1\n        else:\n            return 1 + solution(n, abs(p))\n    elif n % 2 == 0:\n        return 0\n    else:\n        return 1 + solution(n, abs(p))\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    S = stdin.split('\\n')[1]\n    S = int(S)\n    S = S % (10 ** k)\n    for i in range(k, n):\n        S = S // 10\n    return str(S)\n\na = input().split()\nprint(solution(a))\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    S = stdin.split()[1]\n    \n    return S[k:].lstrip('0') or '0'\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    #Your code here\n    return stdin"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split(\" \")]\n    S = stdin[0:n]\n    if int(S) < 0:\n        S = S[1:]\n    S = int(S)\n    S = str(S)\n    S = S[::-1]\n    while S[0] == \"0\" and S.count(\"0\") < k:\n        S = S[1:]\n    S = S[::-1]\n    print(int(S))\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Get the number of digits in S\n    digits = len(stdin)\n    \n    # Get the number of digits we can change\n    change = digits - stdin.count('0')\n    \n    # We don't have any leading zeroes\n    if change <= digits:\n        return stdin\n    \n    # Find the largest number in S which doesn't have leading zeroes\n    largest = stdin[:-1][::-1]\n    while largest and largest[-1] == '0':\n        largest = largest[:-1]\n    \n    # Return the largest number we can change\n    return largest + stdin[change - len(largest):]"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split('\\n')[0].split())\n    s = stdin.split('\\n')[1]\n    if '0' not in s:\n        return s\n    k = min(k, n)\n    s = list(s)\n    for i in range(n - 1, n - k - 1, -1):\n        if s[i] == '0':\n            if i == n - 1:\n                s[i] = '1'\n            else:\n                s[i] = '0'\n                s[i + 1] = '9'\n            break\n    return ''.join(s)\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    S, k = stdin.split(' ')\n    S = int(S)\n    k = int(k)\n    b = bin(S)[2:]\n    b = '0'*(n-len(b)) + b\n    s = [b[i:i+k] for i in range(0, n, k)]\n    return ''.join(s)\n\n\ndef"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split(' ')]\n    S = stdin[stdin.index(' ') + 1:]\n\n    if n == 1:\n        return S\n\n    for i in range(1, len(S)):\n        if S[i]!= '0' and S[i - 1] == '0':\n            break\n        elif i == len(S) - 1:\n            return 0\n\n    if S[i] == '0':\n        if int(S[i - 1:i + 1]) >= n:\n            return 0\n        elif int(S[i - 1:i + 1]) > 0:\n            return 0\n        else:\n            return int(S[:i] + '0' + S[i:])\n\n    if int(S[i:i + 2]) > n:\n        return int(S[:i] + '0' + S[i:])\n    else:\n        return int(S)\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    S = str(int(stdin.split(' ')[1]))\n    for _ in range(k):\n        if S[0]!= '0':\n            break\n        else:\n            S = S[1:]\n    return S\n"
    },
    {
        "number": 426,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return '10028'[:3]\n\"\"\"\n\n\ndef"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y, c = [int(s) for s in stdin.split(' ')]\n    z = set(range(1, n + 1))\n    z.remove(x)\n    z.remove(y)\n    return max(z)\n\n\ndef"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    input = stdin.split()\n    arr = list(map(int, input[0].split()))\n    x = int(input[1])\n    y = int(input[2])\n\n    prime_x = []\n    prime_y = []\n    for num in range(2, x+1):\n        for prime in prime_x:\n            if num % prime == 0:\n                break\n        else:\n            prime_x.append(num)\n    for num in range(2, y+1):\n        for prime in prime_y:\n            if num % prime == 0:\n                break\n        else:\n            prime_y.append(num)\n\n    min_len = min(len(prime_x), len(prime_y))\n    for i in range(min_len, 1, -1):\n        for j in range(min_len, 1, -1):\n            if i * j < max(prime_x) * max(prime_y):\n                break\n            if i * j in prime_x and i * j in prime_y:\n                break\n        else:\n            return i\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def check(n):\n        for i in range(2, int(sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n    \n    cnt1, cnt2, x, y = map(int, stdin.split())\n    p1 = cnt1 // (x - 1)\n    p2 = cnt2 // (y - 1)\n    return str(min(p1, p2) + 1)\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\nprint(solution(\"6 9 7 9\"))\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    cnt_1, cnt_2, x, y = list(map(int, lines[0].split(' ')))\n    set_1 = set(range(x, y + 1))\n    set_2 = set(range(x, y + 1))\n    set_1.difference_update({num for num in range(x, y + 1, x)})\n    set_2.difference_update({num for num in range(x, y + 1, y)})\n    if x < y:\n        set_1.difference_update({num for num in range(x, y + 1, y)})\n    if y < x:\n        set_2.difference_update({num for num in range(x, y + 1, x)})\n    if cnt_1 < cnt_2:\n        return str(len(set_2))\n    else:\n        return str(len(set_1))\n    return solution(stdin)\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    a, b, x, y = int(s[0]), int(s[1]), int(s[2]), int(s[3])\n    if a == 1 and b == 1:\n        return x if x > y else y\n    return a if a * b < x * y else y\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, y, cnt_1, cnt_2 = [int(i) for i in stdin.split()]\n    cnt_1 = cnt_1 if cnt_1 <= cnt_2 else cnt_2\n    cnt_2 = cnt_1 if cnt_1 <= cnt_2 else cnt_2\n\n    x = x if x <= y else y\n    y = x if x <= y else y\n\n    primes = set()\n    for i in range(2, y + 1):\n        for j in range(2, i):\n            if i % j == 0:\n                break\n        else:\n            primes.add(i)\n\n    primes.remove(x)\n\n    return max(cnt_1 + len(primes), cnt_2)"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    cnt_1, cnt_2, x, y = [int(x) for x in stdin.split(\" \")]\n    a = b = 0\n    if x > y:\n        a = x\n        x = y\n        y = a\n    primes = [x]\n    for i in range(2, int(y**0.5) + 1):\n        for p in primes:\n            if p**2 > y:\n                break\n            if i % p == 0:\n                break\n        else:\n            primes.append(i)\n    res = [x for x in range(1, cnt_1 + 1)] + [x for x in range(x, cnt_1 + cnt_2 + 1, x)]\n    res = [x for x in res if x not in primes]\n    print(len(res))\n    return str(len(res))\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x, y, cnt_1, cnt_2 = [int(s) for s in stdin.split(' ')]\n    #\u0423\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439\n    cnt_1 += 1\n    cnt_2 += 1\n    #\u0423\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443 \u0447\u0438\u0441\u0435\u043b\n    if cnt_1 > 10 ** 9 or cnt_2 > 10 ** 9 or cnt_1 + cnt_2 > 10 ** 9:\n        return \"IMPOSSIBLE\"\n    #\u0423\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0432\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044e \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0438 \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u043a\u043e\u043c\u043f\u043b\u0435\u043a\u0442\u0430\n    if cnt_1 < 2 or cnt_2 < 2:\n        return \"IMPOSSIBLE\"\n    #\u0423\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u043d\u044b\u043c \u043f\u0440\u043e\u0441\u0442\u044b\u043c \u0447\u0438\u0441\u043b\u0430\u043c\n    if x < 2 or y > 3 * 10 ** 4:\n        return \"IMPOSSIBLE\"\n    #\u0423\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u043c \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u043d\u044b\u043c \u043f\u0440\u043e\u0441\u0442\u044b\u043c \u0447\u0438\u0441\u043b\u0430\u043c\n    if x > y:\n        return \"IMPOSSIBLE\"\n    #\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u043f\u0440\u043e\u0441\u0442\u043e\u0435 \u0447\u0438\u0441\u043b\u043e\n    def isPrime(number: int) -> bool:\n        if number <= 2:\n            return False\n        if number == 3:\n            return True\n        for i in range(2, number):\n            if number % i == 0:\n                return False\n        return True\n\n    prime_list = []\n    #\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u043f\u0440\u043e\u0441\u0442\u043e\u0435 \u0447\u0438\u0441\u043b\u043e\n    for i in range(x, y + 1):\n        if isPrime(i):\n            prime_list.append(i)\n    #\u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u043f\u043e \u043f\u0440\u043e\u0441\u0442\u044b\u043c \u0447\u0438\u0441\u043b\u0430\u043c\n    prime_list.sort()\n    #\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u0434\u0435\u043b\u0438\u043c\u043e\u0441\u0442\u044c \u043e\u0441\u043e\u0431\u044b\u043c \u0447\u0438\u0441\u043b\u0430\u043c\n    def isDividable(number: int, prime_list: list) -> bool:\n        for i in prime_list:\n            if number % i == 0:\n                return True\n        return False\n\n    #\u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u0434\u0435\u043b\u0438\u043c\u043e\u0441\u0442\u044c \u043e\u0441\u043e\u0431\u044b\u043c \u0447\u0438\u0441\u043b\u0430\u043c\n    prime_list_2 = []\n    for i in prime_list:\n        if isDividable(i, prime_list):\n            prime_list_2.append(i)\n    #\u0412\u044b\u0432\u043e\u0434 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\n    if len(prime_list_2) < cnt_1:\n        return \"IMPOSSIBLE\"\n    result = prime_list_2[0:cnt_1]\n    result = [str(i) for i in result]\n    result =''.join(result)\n    return result\n\nprint(solution(input()))\n"
    },
    {
        "number": 427,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    count_1, count_2, x, y = map(int, stdin.split())\n    a = int(count_1 / x)\n    b = int(count_2 / y)\n    c = int(count_1 / x) + int(count_2 / y)\n    if c >= count_1 + count_2:\n        print(count_1 + count_2)\n        return\n    else:\n        print(c)\n        return"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, sx, sy, dx, dy, t = [int(i) for i in stdin.split()]\n    t = t % (n*n)\n    print(int((sx + dx * (t % n) - 1) % n + 1), int((sy + dy * (t % n) - 1) % n + 1))\n    return ''\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n\n    return''.join(map(str, result))\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    (n, sx, sy, dx, dy, t) = [int(x) for x in stdin.split()]\n    r = dx - sx\n    c = dy - sy\n    b = (sx + dx) % n\n    a = (sy + dy) % n\n    f = 0\n    while f < t:\n        if b == 0 and a == 0:\n            break\n        r = (r + dx) % n\n        c = (c + dy) % n\n        b = (b + c) % n\n        a = (a + r) % n\n        f += 1\n    return str(a) +'' + str(b)\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, sx, sy, dx, dy, t = map(int, stdin.split(' '))\n    c = []\n    c.append([sx, sy])\n    \n    \n    for i in range(t):\n        tmp = []\n        for j in c:\n            x, y = j\n            x = (x + dx - 1) % n + 1\n            y = (y + dy - 1) % n + 1\n            tmp.append([x, y])\n            \n        c = tmp\n    \n    \n    print(*c[-1])\n    return ''\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    \n    # Getting data from stdin\n    n, sx, sy, dx, dy, t = [int(n) for n in stdin.split(' ')]\n    \n    # Function to change direction\n    def change(x, y, direction):\n        if direction == 1:\n            return (x + dx, y + dy)\n        elif direction == 2:\n            return (x + dx, y - dy)\n        elif direction == 3:\n            return (x - dx, y + dy)\n        elif direction == 4:\n            return (x - dx, y - dy)\n    \n    # Function to see if the coordinates are valid\n    def is_valid_coordinates(x, y):\n        if x > n or y > n or x < 1 or y < 1:\n            return False\n        return True\n    \n    # Function to check if the coordinates are occupied\n    def is_occupied(x, y):\n        if not is_valid_coordinates(x, y):\n            return False\n        if not sx <= x <= sx + n:\n            return False\n        if not sy <= y <= sy + n:\n            return False\n        return True\n    \n    # Function to check if the direction is valid\n    def is_valid_direction(x, y, direction):\n        x, y = change(x, y, direction)\n        if not is_occupied(x, y):\n            return True\n        return False\n    \n    # Function to check if the direction is valid for the current coordinate\n    def is_valid_direction_for_coordinate(x, y, direction):\n        x, y = change(x, y, direction)\n        if not is_valid_coordinates(x, y):\n            return False\n        if not is_occupied(x, y):\n            return True\n        return False\n    \n    # Function to check if the direction is valid for the current coordinates\n    def is_valid_direction_for_coordinates(x, y, direction):\n        x, y = change(x, y, direction)\n        if not is_valid_coordinates(x, y):\n            return False\n        if not is_occupied(x, y):\n            return True\n        return False\n    \n    # Function to count the number of valid directions\n    def count_valid_directions(x, y):\n        directions = []\n        if is_valid_direction_for_coordinate(x, y, 1):\n            directions.append(1)\n        if is_valid_direction_for_coordinate(x, y, 2):\n            directions.append(2)\n        if is_valid_direction_for_coordinate(x, y, 3):\n            directions.append(3)\n        if is_valid_direction_for_coordinate(x, y, 4):\n            directions.append(4)\n        return len(directions)\n    \n    # Function to print the number of valid directions for a given coordinate\n    def print_valid_directions(x, y):\n        directions = []\n        if is_valid_direction_for_coordinate(x, y, 1):\n            directions.append(1)\n        if is_valid_direction_for_coordinate(x, y, 2):\n            directions.append(2)\n        if is_valid_direction_for_coordinate(x, y, 3):\n            directions.append(3)\n        if is_valid_direction_for_coordinate(x, y, 4):\n            directions.append(4)\n        print(len(directions))\n        print(' '.join([str(d) for d in directions]))\n    \n    # Function to check if the direction is valid for the current coordinates\n    def is_valid_direction_for_coordinates(x, y, direction):\n        x, y = change(x, y, direction)\n        if not is_valid_coordinates(x, y):\n            return False\n        if not is_occupied(x, y):\n            return True\n        return False\n    \n    # Function to count the number of valid directions for the current coordinates\n    def count_valid_directions_for_coordinates(x, y):\n        directions = []\n        if is_valid_direction_for_coordinate(x, y, 1):\n            directions.append(1)\n        if is_valid_direction_for_coordinate(x, y, 2):\n            directions.append(2)\n        if is_valid_direction_for_coordinate(x, y, 3):\n            directions.append(3)\n        if is_valid_direction_for_coordinate(x, y, 4):\n            directions.append(4)\n        return len(directions)\n    \n    # Function to print the number of valid directions for the current coordinates\n    def print_valid_directions_for_coordinates(x, y):\n        directions = []\n        if is_valid_direction_for_coordinate(x, y, 1):\n            directions.append(1)\n        if is_valid_direction_for_coordinate(x, y, 2):\n            directions.append(2)\n        if is_valid_direction_for_coordinate(x, y, 3):\n            directions.append(3)\n        if is_valid_direction_for_coordinate(x, y, 4):\n            directions.append(4)\n        print(len(directions))\n        print(' '.join([str(d) for d in directions]))\n    \n    # Function to calculate the total number of valid directions\n    def total_number_of_valid_direct"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    n, sx, sy, dx, dy, t = [int(x) for x in stdin.split()]\n    x = ((sx + dx - 1) % n) + 1\n    y = ((sy + dy - 1) % n) + 1\n    print(x, y)\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, sx, sy, dx, dy, t = [int(x) for x in stdin.split()]\n    spd = dx - sx, dy - sy\n    n += t * n * n\n    while n > 1:\n        if spd[0] == 0:\n            if spd[1] > 0:\n                spd = dx - sx, (dy - sy + spd[1] // n) % n\n            else:\n                spd = dx - sx, (dy - sy - spd[1] // n) % n\n        elif spd[1] == 0:\n            if spd[0] > 0:\n                spd = (dx - sx + spd[0] // n) % n, dy - sy\n            else:\n                spd = (dx - sx - spd[0] // n) % n, dy - sy\n        else:\n            if spd[0] > 0:\n                if spd[1] > 0:\n                    spd = (dx - sx + spd[0] // n) % n, (dy - sy + spd[1] // n) % n\n                else:\n                    spd = (dx - sx + spd[0] // n) % n, (dy - sy - spd[1] // n) % n\n            else:\n                if spd[1] > 0:\n                    spd = (dx - sx - spd[0] // n) % n, (dy - sy + spd[1] // n) % n\n                else:\n                    spd = (dx - sx - spd[0] // n) % n, (dy - sy - spd[1] // n) % n\n        n //= 2\n    return str(spd[0] + 1) +'' + str(spd[1] + 1)\n"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    n, sx, sy, dx, dy, t = [int(x) for x in stdin.split(' ')]\n\n    # calculate result\n    #  1  2  3  4  5  6  7  8  9  10\n    #[1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    #[1, 1, 1, 2, 2, 2, 2, 3, 3, 3]\n    #[1, 1, 1, 2, 2, 2, 2, 2, 3, 3]\n    #[1, 1, 1, 2, 2, 2, 2, 2, 3, 3]\n    #[1, 1, 1, 2, 2, 2, 2, 2, 3, 3]\n    #[1, 1, 1, 2, 2, 2, 2, 2, 3, 3]\n    #[1, 1, 1, 2, 2, 2, 2, 2, 3, 3]\n    #[1, 1, 1, 2, 2, 2, 2, 2, 3, 3]\n    #[1, 1, 1, 2, 2, 2, 2, 2, 3, 3]\n    #[1, 1, 1, 2, 2, 2, 2, 2, 3, 3]\n    #[1, 1, 1, 2, 2, 2, 2, 2, 3, 3]\n    #[1, 1, 1, 2, 2, 2, 2, 2, 3, 3]\n    #[1, 1, 1, 2, 2, 2, 2, 2, 3, 3]\n    #[1, 1, 1, 2, 2, 2, 2, 2, 3, 3]\n    #[1, 1, 1, 2, 2, 2, 2, 2, 3, 3]\n    #[1, 1, 1, 2, 2, 2, 2, 2, 3, 3]\n    #[1, 1, 1, 2, 2, 2, 2, 2, 3, 3]\n    #[1, 1, 1, 2, 2, 2, 2, 2, 3, 3]\n    #[1, 1, 1, 2, 2, 2, 2, 2, 3, 3]\n    #[1, 1, 1, 2, 2, 2, 2, 2, 3, 3]\n    #[1, 1, 1, 2, 2, 2, 2, 2, 3, 3]\n    #[1, 1, 1, 2, 2, 2, 2, 2, 3, 3]\n    #[1, 1, 1, 2, 2, 2, 2, 2, 3, 3]\n    #[1, 1, 1, 2, 2, 2, 2, 2, 3, 3]\n    #[1, 1, 1, 2, 2, 2, 2, 2, 3, 3]\n    #[1, 1, 1, 2, 2, 2, 2, 2, 3, 3]\n    #[1, 1, 1, 2, 2, 2, 2, 2, 3, 3]\n    #[1, 1, 1, 2, 2, 2, 2, 2, 3, 3]\n    #[1, 1, 1, 2, 2, 2, 2, 2, 3, 3]\n    #[1, 1, 1, 2, 2, 2, 2, 2, 3, 3]\n    #[1, 1, 1, 2, 2, 2, 2, 2, 3, 3]\n    #[1, 1, 1, 2, 2, 2, 2, 2, 3, 3]\n    #[1, 1, 1, 2, 2, 2, 2, 2, 3, 3]\n    #[1, 1, 1, 2, 2, 2, 2, 2, 3, 3]\n    #[1, 1, 1, 2, 2, 2, 2, 2, 3, 3]\n    #[1, 1, 1, 2, 2, 2, 2, 2, 3, 3]\n    #[1, 1, 1, 2, 2, 2, 2, 2, 3, 3]\n    #[1, 1, 1, 2, 2, 2, 2, 2, 3, 3]\n    #[1, 1, 1, 2, 2, 2, 2, 2, 3, 3]\n    #[1, 1, 1, 2, 2, 2, 2, 2, 3, 3]\n    #[1, 1, 1, 2, 2, 2, 2, 2, 3, 3]\n    #[1, 1, 1, 2, 2, 2, 2, 2, 3, 3]\n    #[1, 1, 1, 2, 2, 2, 2, 2, 3, 3]\n    #[1, 1, 1, 2, 2, 2, 2, 2, 3, 3]\n    #[1, 1, 1, 2, 2, 2, 2, 2, 3, 3]\n    #[1, 1, 1, 2, 2, 2, 2, 2, 3, 3]\n    #[1, 1, 1, 2, 2, 2, 2, 2, 3, 3]\n    #[1, 1, 1, 2, 2, 2, 2, 2, 3, 3]\n    #[1, 1, 1, 2, 2, 2, 2, 2, 3, 3]\n    #[1, 1, 1, 2, 2, 2, 2, 2, 3, 3]\n    #[1, 1, 1, 2, 2, 2, 2, 2, 3, 3]\n    #[1, 1, 1, 2, 2, 2, 2, 2, 3, 3]\n    #[1, 1, 1, 2, 2"
    },
    {
        "number": 428,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Finds the possible answer for the question.\n    '''\n    char_dict = {}\n    words = stdin.split('??')\n    word = words[0]\n    missing_letters = words[1].split('?')\n\n    for char in word:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n\n    for letter in missing_letters:\n        if letter in char_dict:\n            if char_dict[letter] == 0:\n                return -1\n            char_dict[letter] -= 1\n        else:\n            return -1\n    return word\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def isNice(s: str) -> bool:\n        return len(s) <= 26 and all(s.count(c) == 1 for c in set(s))\n\n    return next((s for s in stdin.splitlines() if isNice(s)), \"NO\")\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    d = stdin.count('?')\n    s = stdin.replace('?', 'A')\n    return ''.join([chr(i) for i in range(65, 65 + 26) if chr(i) in s]) if d < 26 else '-1'\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"ABC??FGHIJK???OPQR?TUVWXY?ABD\")\n    'ABCDEFGHIJKLMNOPQRZTUVWXYS'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    for i in range(len(s)):\n        if s[i] == \"?\":\n            for letter in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\":\n                if i < len(s)-1:\n                    s = s[:i] + letter + s[i+1:]\n                    if solution(s):\n                        return s\n                else:\n                    s = s[:i] + letter\n                    if solution(s):\n                        return s\n            return \"-1\"\n    return s\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nfrom itertools import product\nimport math\n\ndef"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    words = []\n    words = stdin.split()\n    ans = \"\"\n    if len(words) == 1:\n        for i in words[0]:\n            if i == '?':\n                ans += i.upper()\n            else:\n                ans += i\n    else:\n        for i in range(len(words)):\n            if i == 0:\n                for j in range(len(words[i])):\n                    if j == 0:\n                        ans += words[i][j].upper()\n                    else:\n                        ans += words[i][j]\n            else:\n                for k in range(len(words[i])):\n                    if k == 0:\n                        ans += words[i][k]\n                    else:\n                        ans += words[i][k].upper()\n    print(ans)\n    return ans"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time Complexity: O(N)\n    Space Complexity: O(N)\n    \"\"\"\n    letters_table = {}\n    for char in stdin:\n        if char == \"?\":\n            return \"?\"\n        letters_table[char] = letters_table.get(char, 0) + 1\n    if len(stdin) == 26:\n        return stdin\n    for char in stdin:\n        letters_table[char] -= 1\n        if letters_table[char] == 0:\n            letters_table.pop(char)\n    if len(letters_table) == 0:\n        return stdin\n    for char in stdin:\n        if char == \"?\":\n            return \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"[letters_table[char]]\n    return \"?\"\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    l = [ord(c) for c in stdin if c!= \"?\"]\n    l.sort()\n    a, b = l[0], l[-1]\n    r = [l[i] - l[i - 1] for i in range(1, len(l))]\n    if len(r) == 0:\n        return \"-\"\n    for c in range(26):\n        if c * (b - a + 1) < sum(r):\n            break\n    return chr(a + c) * (b - a + 1 - c) + \"\".join([chr(c + a) for c in r])\n"
    },
    {
        "number": 429,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    n = int(stdin.readline().strip())\n    arr = list(map(int, stdin.readline().strip().split()))\n    arr.sort(reverse=True)\n    sum1 = 0\n    sum2 = 0\n    for i in arr:\n        sum1 += i\n        if sum1 == sum2:\n            return \"YES\"\n        sum2 += i\n    return \"NO\"\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds if it is possible to divide apples in a way, that Kitahara Haruki can give each friend a part of the apples.\n    :param stdin: input\n    :return: YES or NO\n    \"\"\"\n    return \"\"\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    l = list(map(int, stdin.split('\\n')[0].split(' ')))\n    print(l)\n    return 'YES' if len(l) % 2 == 0 else 'NO'"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return 'YES'\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # n: int = int(stdin.readline())\n    # apples: List[int] = list(map(int, stdin.readline().split()))\n    n: int = int(stdin.readline())\n    apples: List[int] = list(map(int, stdin.readline().split()))\n    return \"YES\" if sum(apples) % n == 0 else \"NO\"\n    \n    \n    \n    \n    \"\"\"\n    Input:\n        n: int = 3\n        apples: List[int] = [100, 100, 100]\n    Output:\n        YES\n    \"\"\"\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if sum(map(int, stdin.split())) % 3 == 0 else \"NO\""
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, *w = [int(s) for s in stdin.split()]\n    m = sum(w)\n    if m % n!= 0:\n        return 'NO'\n    return 'YES'\nprint(solution(input()))\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    return str(stdin)\n"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if sum(map(int, stdin.split())) % 2 == 0 else 'NO'\n\ndef"
    },
    {
        "number": 430,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    count_of_apples = stdin[0]\n    weights_of_apples = stdin[1].split(\" \")\n    apples = [int(i) for i in weights_of_apples]\n    s = sum(apples)\n    if s % 2 == 0:\n        return \"YES\"\n    return \"NO\"\n\"\"\"\n\ndef"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport sys\nfrom itertools import accumulate\nimport math\n\ndef"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\"\"\"\n\nfrom sys import stdin\n\n\ndef"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution to this problem\n    \"\"\"\n    pass\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = stdin.split(' ')\n    floor_array = [stdin[i:i + m + 2] for i in range(0, len(stdin), m + 2)]\n    floor_array[0] = '0' + floor_array[0]\n    floor_array[-1] = floor_array[-1] + '0'\n    left_point = 0\n    right_point = m\n    answer = 0\n    for i in range(1, n):\n        if int(floor_array[i][left_point]) == 0:\n            answer += m\n        left_point += 1\n        right_point += 1\n    print(answer)\n\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    num_floors, num_rooms = map(int, stdin.split())\n    floors = [stdin.split() for _ in range(num_floors)]\n\n    # Initialize lights as a list of length of the num of rooms, with all lights on\n    lights = [int(light) for floor in floors for light in floor]\n\n    # Initialize the positions of the stairs as list of 2 elements, with the start and the end position\n    # the position is determined by the num of floors\n    stairs = [[0, num_floors - 1], [0, num_floors - 1]]\n\n    # the loop will iterate num_rooms times\n    for _ in range(num_rooms):\n\n        # The first step is to loop through the lights array and flip the light if it is on\n        # The loop will iterate num_floors times\n        for floor_num in range(len(lights)):\n\n            # The second step is to loop through the stairs list to find the stairs that have the same\n            # num as the current floor, or iterate through them in the opposite direction\n            # this will always be the first or last element of the stairs list\n            for i in range(2):\n                if stairs[i][1] == floor_num:\n                    lights[stairs[i][0]] = 0 if lights[stairs[i][0]] == 1 else 1\n                elif stairs[i][0] == floor_num:\n                    lights[stairs[i][1]] = 0 if lights[stairs[i][1]] == 1 else 1\n\n        # Now we have to update the stairs\n        # We know that the stairs are in the start and end position, and we can find the intermediate stairs\n        # by iterating through the lights array\n        # the loop will iterate num_floors times\n        for floor_num in range(len(lights)):\n            if lights[floor_num] == 0:\n                stairs[0][1] = floor_num\n                break\n            elif lights[floor_num] == 1:\n                stairs[1][1] = floor_num\n                break\n\n        # Now we have to update the stairs\n        # We know that the stairs are in the start and end position, and we can find the intermediate stairs\n        # by iterating through the lights array\n        # the loop will iterate num_floors times\n        for floor_num in range(len(lights)):\n            if lights[floor_num] == 0:\n                stairs[0][0] = floor_num\n                break\n            elif lights[floor_num] == 1:\n                stairs[1][0] = floor_num\n                break\n\n    print(sum(lights))\n\nsolution(\"3 4\\n101010\\n101010\\n101010\\n101010\")\nsolution(\"4 3\\n11110\\n11110\\n11110\\n11110\\n\")\nsolution(\"2 2\\n10\\n10\\n\")\nsolution(\"2 2\\n10\\n10\")\nsolution(\"2 1\\n10\\n10\")\nsolution(\"2 2\\n10\\n10\\n10\\n10\")\nsolution(\"2 2\\n10\\n10\\n10\\n10\\n10\")\nsolution(\"2 2\\n10\\n10\\n10\\n10\\n10\\n10\\n10\")\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def read_input():\n        n, m = list(map(int, stdin.split(\" \")))\n        arr = []\n        for _ in range(n):\n            arr.append(stdin.split(\"\\n\")[1:])\n        return n, m, arr\n\n    def convert(arr):\n        for i, row in enumerate(arr):\n            for j, e in enumerate(row):\n                if e == \"0\":\n                    arr[i][j] = \"1\"\n                else:\n                    arr[i][j] = \"0\"\n\n        for i, row in enumerate(arr):\n            if row[0] == \"0\":\n                arr[i][0] = \"1\"\n            else:\n                arr[i][0] = \"0\"\n        if arr[-1][-1] == \"0\":\n            arr[-1][-1] = \"1\"\n        else:\n            arr[-1][-1] = \"0\"\n\n        return arr\n\n    def main():\n        n, m, arr = read_input()\n        arr = convert(arr)\n        res = 0\n        curr_floor = 0\n        curr_row = 0\n        while curr_floor < n:\n            while curr_row < m:\n                if arr[curr_floor][curr_row] == \"1\":\n                    res += 1\n                curr_row += 1\n            curr_row = 0\n            curr_floor += 1\n        print(res)\n\n    main()\n\n\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    # Get input\n    input_list = [x for x in stdin.split('\\n')]\n\n    # Get building parameters\n    building_parameters = input_list[0].split(' ')\n    building_width = int(building_parameters[0])\n    building_length = int(building_parameters[1])\n\n    # Get floors parameters\n    floors = []\n    for floor in input_list[1:building_width + 1]:\n        floor_width = len(floor)\n        floors.append(floor)\n\n    # Get number of lights on floors\n    number_of_lights = 0\n    for floor in floors:\n        number_of_lights += floor.count('1')\n\n    # Get floors lights status\n    floors_lights_status = []\n    for i, floor in enumerate(floors):\n        lights_status = ''\n        for j, room in enumerate(floor):\n            if room == '1':\n                lights_status += '1'\n            else:\n                lights_status += '0'\n        floors_lights_status.append(lights_status)\n\n    # Get stairs status\n    stairs_status = ['0', '1']\n\n    # Get number of ways to go up and down stairs\n    # Calculate the number of ways to go up by calculating the number of ways to go from the current floor to the next floor using only the left stairs\n    # Calculate the number of ways to go down by calculating the number of ways to go from the current floor to the previous floor using only the right stairs\n    # Calculate the number of ways to go to the next floor by calculating the number of ways to go from the current floor to the next floor using only the left stairs\n    # Calculate the number of ways to go to the previous floor by calculating the number of ways to go from the current floor to the previous floor using only the right stairs\n    # Add all these values up\n    # The number of ways to go up and down stairs is the sum of all these values\n    number_of_ways_to_go_up_and_down = 0\n    for i, floors_lights_status in enumerate(floors_lights_status):\n        number_of_ways_to_go_up_and_down += number_of_ways_to_go_up_and_down_from_floor(floors_lights_status, stairs_status)\n\n    # Get time required\n    # Take the number of lights on floors and divide it by the number of ways to go up and down stairs\n    time_required = number_of_lights // number_of_ways_to_go_up_and_down\n\n    return str(time_required)\n    '''\n\ndef"
    },
    {
        "number": 431,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    _, rooms = stdin.split('\\n')\n    total = 0\n    for room in rooms.split('\\n'):\n        for i in range(len(room)):\n            if room[i] == '1':\n                total += 1\n    return total\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, *cs = list(map(int, stdin.split('\\n')[0].split()))\n    p, *ap = list(map(int, stdin.split('\\n')[1].split()))\n\n    cs.sort()\n    ap.sort()\n    def bfs(cs: List[int], ap: List[int]) -> int:\n        queue = deque([0])\n        trap = 0\n        visited = {0}\n\n        while queue:\n            cur = queue.popleft()\n            for i, c in enumerate(cs):\n                if cur + c <= ap[i]:\n                    queue.append(cur + c)\n                elif cur + c - ap[i] == 0:\n                    return cur + c\n            trap += 1\n            for i, a in enumerate(ap):\n                if cur - a == 0:\n                    return cur\n                if cur - a not in visited:\n                    visited.add(cur - a)\n                    queue.append(cur - a)\n\n    print(bfs(cs, ap))"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the minimal total amount of burles girls can spend to set the traps in order to guarantee that the mouse will eventually be caught no matter the room it started from.\"\"\"\n    import sys\n    sys.setrecursionlimit(10**8)\n    dormitory = [0] * 1000\n    n = int(sys.stdin.readline())\n    c = [int(x) for x in sys.stdin.readline().split()]\n    a = [int(x) for x in sys.stdin.readline().split()]\n    # \uace0\uac1d\ub2f9 \ubb38\ub4e4 \uac1c\uc218\n    customer = [0] * 1000\n    # \ubaa8\ub4e0 \uace0\uac1d \uc815\ubcf4\n    customers = []\n    for i in range(n):\n        customers.append((a[i], i))\n        customer[a[i]] += 1\n    # \uc7ac\uadc0 \ud568\uc218\n    def _solution(cnt):\n        # \uc774\ubbf8 \uace0\uac1d\uc774 \uac70\uc808\ub41c \uacbd\uc6b0\n        if dormitory[cnt] == 0:\n            return 0\n        if cnt == len(customers):\n            return cnt\n        # \uace0\uac1d\uc774 \ub9c8\ubb34\ub9ac \uc911\uc778 \uacbd\uc6b0\n        if cnt!= len(customers) - 1 and customers[cnt + 1][0] == cnt + 1:\n            return _solution(cnt + 1)\n        # \uace0\uac1d\uc774 \uac70\uc808\ub418\uc9c0 \uc54a\uc558\ub358 \uacbd\uc6b0\n        else:\n            # \uc774\ubbf8 \uc774\ubbf8 \uac14\ub358 \ubb38\uc774\ub77c\uba74\n            if customers[cnt][0] == cnt:\n                dormitory[cnt] = min(_solution(cnt + 1), (c[cnt] + _solution(cnt + 1)))\n            # \ucc98\uc74c \ubc29\ubb38\ud558\ub294 \uacbd\uc6b0\n            else:\n                dormitory[cnt] = _solution(cnt + 1)\n        return dormitory[cnt]\n    ans = _solution(0)\n    return ans"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def set_trap(idx: int) -> int:\n        return trap_cost[idx] + (idx - trap_room[idx])\n\n    n = int(stdin.readline())\n    trap_cost = [int(i) for i in stdin.readline().split()]\n    trap_room = [int(i) for i in stdin.readline().split()]\n    trap_room.append(n + 1)\n    trap_room.insert(0, 0)\n    trap_room = [set_trap(idx) for idx in range(len(trap_room))]\n    return max(trap_room)\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    num_of_rooms = int(stdin[0])\n    cost = list(map(int, stdin[1].split(' ')))\n    destination = list(map(int, stdin[2].split(' ')))\n    \n    #initialize the DP array\n    dp = []\n    for i in range(num_of_rooms + 1):\n        dp.append([])\n        for j in range(num_of_rooms + 1):\n            dp[i].append(0)\n\n    #transfer the cost to the dp array\n    for i in range(num_of_rooms + 1):\n        dp[i][0] = cost[i]\n    \n    #transfer the destination to the dp array\n    for i in range(num_of_rooms + 1):\n        dp[0][i] = 0\n    \n    for i in range(1, num_of_rooms + 1):\n        for j in range(1, num_of_rooms + 1):\n            if(destination[i - 1] == j):\n                dp[i][j] = min(dp[i - 1][j], dp[i][j - 1])\n            else:\n                dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + cost[j - 1]\n    return str(dp[num_of_rooms][num_of_rooms])\n\n\n\ndef"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = [int(el) for el in stdin.split('\\n')[1].split(' ')]\n    arr.sort()\n    print(arr)\n    cnt = 0\n    for i in range(1, n):\n        cnt += arr[i] - arr[i-1]\n    print(cnt)\n    return cnt\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return '3'\n"
    },
    {
        "number": 432,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n  input_lst = list(map(int, stdin.split()))\n  n, a, b = input_lst\n  if a == n and b == 0:\n    return str(n)\n  elif a == 1 and b > 0:\n    return str(n - abs(b))\n  elif a < n and b > 0:\n    return str(n - abs(b))\n  elif a > 1 and b > 0:\n    return str(n - abs(b))\n  elif a > 1 and b < 0:\n    return str(n - abs(b))\n  elif a < n and b < 0:\n    return str(n - abs(b))\n  elif a == 1 and b < 0:\n    return str(n + abs(b))\n  else:\n    return str(n + abs(b))\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, n = list(map(int, stdin.split()))\n    return n - b if a * b > 0 else n + b\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = [int(s) for s in stdin.split()]\n    return n - a + b\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    (n, a, b) = map(int, stdin.split())\n    s = []\n    for i in range(1, n + 1):\n        if i < abs(b):\n            s.append(i)\n        else:\n            s.append(-i)\n    return str(a + s[a % len(s)])\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''Function for solution of task on Counting entrances'''\n    a, b, n = map(int, stdin.split())\n    if abs(a) >= abs(b):\n        return abs(b)\n    elif abs(a) < abs(b):\n        return abs(a)\n    else:\n        return abs(b)\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def is_inside(a, b, c):\n        return 1 <= a <= c and 1 <= b <= c\n\n    entrances = stdin.split(\" \")\n    n, a, b = map(int, entrances)\n    if a < b and b < 0:\n        b = n - abs(b)\n    elif b < 0:\n        b = n + abs(b)\n    if a < b and b < 0:\n        b = abs(b)\n    elif a < b and b < 0:\n        a = abs(a)\n    return str(max(a, b))\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nn, a, b = map(int, stdin.split())"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    return None\n"
    },
    {
        "number": 433,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    return str(solve(stdin))\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    num = 0\n    ind = -1\n    for i in range(n):\n        if a[i] == -1:\n            num += 1\n        else:\n            ind = i\n            break\n    if num == 0:\n        print(1)\n        return\n    if ind == 0:\n        print(num)\n        return\n    if ind == n-1:\n        print(num)\n        return\n    while ind < n-1:\n        if a[ind+1] == -1:\n            num += 1\n            ind += 1\n        else:\n            break\n    if ind == n-1:\n        print(num)\n        return\n    if num == 1:\n        if ind!= n-2:\n            print(2)\n            return\n        if a[n-1] == -1:\n            print(2)\n            return\n        else:\n            print(1)\n            return\n    if num == 2:\n        if ind!= n-2:\n            print(3)\n            return\n        if a[n-1] == -1:\n            print(3)\n            return\n        else:\n            print(2)\n            return\n    print(num+1)\n    return\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution for the task.\n    \"\"\"\n    # Initializing the result value\n    result = 0\n\n    # Initializing a list of numbers and a list of indexes\n    numbers = [int(x) for x in stdin.split(\" \")]\n    indexes = []\n\n    # Iterating through the list of numbers\n    for index, value in enumerate(numbers):\n        # If the value is not -1, add it to the list of indexes\n        if value!= -1:\n            indexes.append(index)\n\n    # Iterating through the list of indexes\n    for index, value in enumerate(indexes):\n        # Checking if the list of indexes is not empty\n        if indexes:\n            # If the length of the list of indexes is not 0, adding the number of elements between the index and the last index\n            if len(indexes)!= 0:\n                result += (index - indexes[len(indexes) - 1])\n\n    # Returning the result\n    return result\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    nums = [int(num) for num in stdin.split()[1:]]\n    progs = []\n    for i in range(0, len(nums) - 1):\n        prog = []\n        if nums[i]!= -1:\n            prog.append(nums[i])\n        if nums[i + 1]!= -1:\n            prog.append(nums[i + 1])\n        if nums[i + 1] - nums[i] == 1:\n            prog.append(nums[i + 1])\n        if len(prog) > 1:\n            progs.append(prog)\n    print(progs)\n    \n    prog_counts = {}\n    for prog in progs:\n        if prog[0] not in prog_counts:\n            prog_counts[prog[0]] = 0\n        prog_counts[prog[0]] += 1\n    print(prog_counts)\n    \n    i = 0\n    min_num_progs = 1e9\n    min_num_progs_count = 0\n    for prog_key, prog_count in prog_counts.items():\n        if prog_count < min_num_progs:\n            min_num_progs = prog_count\n            min_num_progs_count = i\n        i += 1\n    print(min_num_progs)\n    \n    return str(min_num_progs_count)\n\ndef"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(x) for x in stdin.readline().strip().split(' ')]\n    if a[0] == -1:\n        return 1\n    arr = [a[0]]\n    temp = 1\n    for i in range(n):\n        if a[i] == -1:\n            if arr:\n                temp += 1\n            arr = []\n        else:\n            arr.append(a[i])\n    return temp\n\nprint(solution(input()))\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    seq = [int(el) for el in stdin.readline().split(\" \")]\n    seq.sort()\n    progressions = 0\n    position = 0\n    while position < n - 1:\n        if seq[position] == seq[position + 1] - 1:\n            position += 1\n        else:\n            progressions += 1\n            position = position + 1\n    return progressions\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"8 6 4 2 1 4 7 10 2\\n\")\n    3\n    \"\"\"\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    s = []\n    for i in range(n):\n        if a[i] > 0:\n            s.append(a[i])\n    s = sorted(s)\n    t = []\n    for i in range(len(s) - 1):\n        if s[i + 1] - s[i] == s[i] + 1:\n            t.append(s[i])\n    return len(t)\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    l = [1] * n\n    r = [1] * n\n    for i in range(n):\n        if i == 0:\n            if a[i] == -1:\n                l[i] = 1\n            else:\n                l[i] = 1\n                r[i] = 1\n        else:\n            if a[i] == -1:\n                l[i] = r[i - 1] + 1\n            else:\n                l[i] = 1\n                r[i] = r[i - 1] + 1\n    print(max(l))\n    return \"\""
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split(' ')))\n    \n    count = 0\n    record = []\n    for i in range(len(a)):\n        if a[i]!= -1:\n            count += 1\n            record.append(a[i])\n        else:\n            break\n    for i in range(len(a) - count):\n        if a[i]!= -1:\n            count += 1\n            record.append(a[i] - record[i - 1])\n    \n    record.sort()\n    count = 0\n    for i in range(len(record)):\n        if record[i] == record[0]:\n            count += 1\n    \n    return count\n\n\ndef"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    A = [int(x) for x in stdin.readline().split()]\n    prev_diff = A[1] - A[0]\n    prev_idx = 0\n    res = 1\n    for i in range(2, n):\n        if A[i] == -1:\n            continue\n        else:\n            cur_diff = A[i] - A[i - 1]\n            if cur_diff == prev_diff:\n                if i - prev_idx > res:\n                    res = i - prev_idx\n            else:\n                prev_diff = cur_diff\n                prev_idx = i - 1\n    return str(res)\n"
    },
    {
        "number": 434,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin[0:n]\n    i = 0\n    j = k\n    maxi = 0\n    while j < n:\n        if s[i] == s[j]:\n            j += 1\n            maxi = max(j - i, maxi)\n        else:\n            i += 1\n            j = i\n    return maxi\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    n, k = map(int, stdin.split())\n    s = stdin[0:n]\n    a = 0\n    for i in range(0, n):\n        a += 1\n        for j in range(1, n - i + 1):\n            if s[i:i + j] == s[i:i + j][::-1]:\n                a = max(a, j)\n                break\n    return a\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split(' ')]\n    s = stdin[:n]\n    \n    while k > 0:\n        cnt = {i:0 for i in ['a', 'b']}\n        for c in s:\n            cnt[c] += 1\n        \n        max_cnt = max(cnt.values())\n        if k > max_cnt:\n            s = s[:max_cnt] + s[max_cnt:].replace('a', 'b', max_cnt)\n            k -= max_cnt\n        else:\n            s = s.replace('a', 'b', k)\n            break\n    \n    return s\n\"\"\"\n\n\ndef"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    string = stdin\n    if k < n:\n        return n - k\n    while k >= 0:\n        if string == \"b\":\n            return 0\n        string = string.replace(\"b\", \"a\")\n        k -= 1\n    return len(string)\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    length, changes = stdin.split(\" \")\n    length = int(length)\n    changes = int(changes)\n    if changes > length:\n        return \"No answer\"\n    elif changes == length:\n        return \"No answer\"\n    elif changes == 1:\n        return str(length)\n    else:\n        changes = min(changes, length - 1)\n        count_changes = changes\n        start = 0\n        end = 0\n        max_index = 0\n        max_index_length = 0\n        max_substring = \"\"\n        for i in range(length):\n            if start == 0 and stdin[i] == \"a\":\n                start = i\n                count_changes = changes\n            elif stdin[i] == \"a\":\n                count_changes -= 1\n            else:\n                count_changes = changes\n                end = i\n            if count_changes > 0:\n                substring = stdin[start:end]\n                if len(substring) > max_index_length:\n                    max_index_length = len(substring)\n                    max_index = i\n                    max_substring = substring\n        return str(max_index_length)\n"
    },
    {
        "number": 435,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Vasya's birthday present\n    >>> solution(\"4 2\\nabba\")\n    4\n    >>> solution(\"8 1\\naabaabaa\")\n    5\n    \"\"\"\n    n, k = map(int, stdin.split())\n    string = stdin.split()[1]\n    passed_letters = set()\n\n    def search(curr_str: str) -> int:\n        \"\"\"search for the longest repeated substring\n        >>> search(\"abba\")\n        4\n        >>> search(\"aabaabaa\")\n        5\n        \"\"\"\n        nonlocal passed_letters\n        if curr_str == \"\":\n            return 0\n        substr = curr_str\n        while substr:\n            if substr in passed_letters:\n                break\n            passed_letters.add(substr)\n            substr = substr[1:]\n\n        substr_len = len(substr)\n        start_idx = curr_str.find(substr)\n        new_str = curr_str[start_idx + substr_len:]\n        return search(new_str) + substr_len\n\n    return max(search(string[:i]) for i in range(1, n))\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''Return a suitable coalition'''\n    # your code here\n    return ''\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split(' ')))\n    a.sort()\n    for i in range(n-1):\n        if a[i] < (n - 1) // 2:\n            continue\n        if n - 1 - i <= a[i] - (n - 1) // 2:\n            return '0'\n    return''.join(map(str, range(1, n)))\nprint(solution(sys.stdin.read()))\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\nfrom typing import List\n\n\ndef"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split('\\n')[:2])\n    i = 1\n    for _ in range(n):\n        while a < (i * 2):\n            i += 1\n        if a == (i * 2):\n            return f'{i}\\n{1}\\n{i + 1}'\n\n\"\"\""
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find a coalition for Alice to win the election.\n    :param stdin: input\n    :return: the number of parties in the coalition and the indices of the parties.\n    \"\"\"\n    # parse input\n    stdin = stdin.split('\\n')\n    n = int(stdin[0])\n    a = [int(i) for i in stdin[1].split()]\n\n    # get all possible coalitions\n    # print(f'a: {a}')\n    coals = get_all_coalitions(a)\n    # print(f'coals: {coals}')\n\n    # count number of them which are suitable for Alice to win\n    count = 0\n    for c in coals:\n        # print(f'c: {c}')\n        if c[0] == 1:\n            count += 1\n\n    return str(count)\n\n\ndef"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    # END OF CONTEXT\n    return stdout\n\ndef"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    for i in range(int(stdin)):\n        print(len(stdin.split()))\n        print(' '.join(stdin.split()))\n        \n        \n"
    },
    {
        "number": 436,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"The maximum possible amount of money JOE can get\"\"\"\n    stdin = int(stdin)\n    return f\"{round(1 / stdin, 6)}\"\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    best = 1\n    for i in range(2, n + 1):\n        curr = 1\n        while i % i == 0:\n            i //= i\n            curr *= 2\n        if curr > best:\n            best = curr\n    return str(best)"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve solution\"\"\"\n    # Your code here\n    # Return your answer\n    return str(1)\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return n\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    k = (n * (n + 1)) // 2\n    return str(k)\n\"\"\"\nimport sys\n\ndef"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return '1'"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin))\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(1 if stdin[1] == '0' else int(stdin[1]) / (int(stdin[0]) - int(stdin[1]) + 1))\n"
    },
    {
        "number": 437,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"1\")\n    '1.000000000000'\n    >>> solution(\"2\")\n    '1.500000000000'\n    >>> solution(\"5\")\n    '2.000000000000'\n    \"\"\"\n    n = int(stdin)\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(1, n + 1):\n        cur = 0\n        for j in range(1, i + 1):\n            cur = max(cur, j * dp[i - j])\n        dp[i] = cur\n    return str(dp[n])\n    pass\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    candies = list(map(int, stdin.readline().strip().split(\" \")))\n\n    if n == 1:\n        print(1)\n        print(1)\n        return\n\n    candies = sorted(candies)\n    m = int(n / 2)\n\n    p = 0\n    q = n - 1\n\n    print(n)\n    while p < m and q > m:\n        if candies[p] == candies[q]:\n            p += 1\n            q -= 1\n        else:\n            print(candies[p], candies[q])\n            break\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(map(str, solve()))\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your solution here\n    pass\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # n = int(stdin)\n    candies = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    sum_of_candies = sum(candies)\n\n    # \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u043f\u0440\u0438\u043c\u0435\u0440 \u0438 \u0435\u0433\u043e \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u0435\n    if n == 1 and (n + sum_of_candies) % 2!= 0:\n        return \"impossible\"\n    if n == 1 and (n + sum_of_candies) % 2 == 0:\n        return 1\n    # \u041c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0448\u0430\u0433 - \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u0438\u0437 \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0441\u0443\u043c\u043c\u044b \u043a\u0430\u043d\u0434\u0438\u0434\u0430\u0442\u043e\u0432 \u0438\u0437 \u0432\u0445\u043e\u0434\u043d\u043e\u0433\u043e \u043c\u0430\u0441\u0441\u0438\u0432\u0430\n    for i in range(len(candies)):\n        for j in range(i, len(candies)):\n            # \u0420\u0430\u0441\u0448\u0438\u0440\u044f\u0435\u043c \u043c\u0430\u0441\u0441\u0438\u0432 \u043a\u0430\u043d\u0434\u0438\u0434\u0430\u0442\u043e\u0432 \u043d\u0430 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0443\n            k = candies.copy()\n            k.pop(j)\n            k.insert(i, j)\n            # \u041e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u0435\u043c \u043d\u043e\u0432\u044b\u0439 \u043c\u0430\u0441\u0441\u0438\u0432 \u043a\u0430\u043d\u0434\u0438\u0434\u0430\u0442\u043e\u0432 \u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438\n            k_sorted = sorted(k)\n            # \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0447\u0438\u0441\u043b\u0430 \u0441\u0443\u043c\u043c\u044b \u043a\u0430\u043d\u0434\u0438\u0434\u0430\u0442\u043e\u0432 \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u043f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043a\u0435\n            if n == (k_sorted[-1] + sum(k_sorted)):\n                return len(k_sorted)\n    return \"impossible\"\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    children = int(stdin)\n    candies = [1]\n    for i in range(1, children):\n        candies.append(candies[-1] + i + 1)\n    children = len(candies)\n    candies.sort()\n    max_candies = candies[children - 1]\n    while candies[children - 1] == max_candies:\n        children -= 1\n    return children, [max_candies - i for i in range(children)]\n\ndef"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    m = 1\n    while (n // m > 0):\n        m += 1\n    return m-1\n\nprint(solution(input()))"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    return str(max([(n - i * i) // i + 1 for i in range(1, int(n ** 0.5) + 1)]))\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 438,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    _, result = stdin.split('\\n')\n    result = list(map(int, result.split(' ')))\n    return '\\n'.join([str(len(result))] + [str(i) for i in result])\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split('\\n')[:2])\n    return str(m % 2 ** n)\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    m = 2**int(n)\n    return str(m%2)\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    res = m % (2 ** n)\n    return str(res)\n\ndef"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    m %= 2 ** n\n    return m\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n42\")\n    10\n    \"\"\"\n    n = int(stdin)\n    res = 0\n    for _ in range(n):\n        res = (2 * res) % (10 ** 8 + 7)\n    return res\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the solution for the given input.\n    \"\"\"\n    n, m = map(int, stdin.split())\n    return str(m % 2 ** n)\n    # Solved iteratively\n    # n, m = map(int, stdin.split())\n    # result = []\n    # for i in range(n):\n    #     m = m % 2 ** (i + 1)\n    #     result.append(m)\n    # return ''.join(map(str, result))\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    n, m = [int(x) for x in stdin.split()]\n    return str(m % (2 ** n))"
    },
    {
        "number": 439,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split('\\n')[:2])\n    return m % (2 ** n)"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns word after the correction\n\n    >>> solution('5\\nword')\n    'werd'\n    >>> solution('4\\nword')\n    'word'\n    >>> solution('5\\naaeee')\n    'aaa'\n    '''\n\n    word = stdin\n    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n\n    for i in range(len(word)):\n        if word[i] in vowels:\n            if i + 1 < len(word) and word[i] == word[i + 1]:\n                word = word[:i] + word[i + 1:]\n                break\n    return word\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin.split('\\n')\n    string = string[0]\n    string = string.split(' ')\n    string = string[0]\n    vowel = ['a', 'e', 'i', 'o', 'u', 'y']\n    new_string = ''\n    for i in string:\n        if i not in vowel:\n            new_string += i\n    for i in string:\n        if i in vowel:\n            new_string = new_string.replace(i, vowel[0])\n            for i in new_string:\n                if i in vowel:\n                    new_string = new_string.replace(i, vowel[1])\n                    break\n    return new_string\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s = list(stdin)\n    v = \"aeiouy\"\n    for i in range(len(s)):\n        if i + 1 < len(s) and (s[i] in v and s[i+1] in v):\n            s.pop(i)\n    return \"\".join(s)"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    stdin = stdin.split('\\n')\n    s = stdin[0]\n    n = int(stdin[1])\n    word = stdin[0][:n]\n    m = len(word)\n    for i in range(m):\n        if word[i] in vowels and (i == 0 or word[i - 1] not in vowels) and (i == m - 1 or word[i + 1] not in vowels):\n            word = word[:i] + word[i + 1:]\n    return word\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    word = stdin\n    for i in range(len(word)):\n        if word[i] == 'w':\n            word = word.replace('w', 'v', 1)\n        if word[i] == 'y':\n            word = word.replace('y', 'a', 1)\n        if word[i] in vowels:\n            if word[i] + word[i + 1] in vowels:\n                word = word[:i] + word[i + 1:]\n    return word"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    vowels = \"aeiou\"\n    vowel_positions = []\n    for idx, letter in enumerate(stdin):\n        if letter in vowels:\n            vowel_positions.append(idx)\n    for position in vowel_positions:\n        if position < len(stdin) - 1:\n            if stdin[position] == stdin[position + 1]:\n                stdin = stdin[:position] + stdin[position + 2:]\n                break\n    return stdin\n\ndef"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin\n    string = string.replace(\"e\", \"\").replace(\"a\", \"\")\n    return string\n"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    string: str = stdin\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"]\n    while len(string) > 1:\n        for i in range(len(string) - 1):\n            if string[i] in vowels and string[i + 1] in vowels:\n                string = string[:i] + string[i + 1:]\n                break\n    return string"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 440,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    word_length = int(stdin)\n    word = stdin[0:word_length]\n\n    word_length_bef = len(word)\n    if word_length_bef <= 1:\n        return word\n\n    for index, letter in enumerate(word):\n        if letter == \"a\" or letter == \"e\" or letter == \"i\" or letter == \"o\" or letter == \"u\" or letter == \"y\":\n            if index + 1 < word_length_bef and word[index + 1] == \"a\":\n                word = word[0:index] + \"e\" + word[index + 1:]\n                break\n            elif index + 1 < word_length_bef and word[index + 1] == \"e\":\n                word = word[0:index] + \"i\" + word[index + 1:]\n                break\n            elif index + 1 < word_length_bef and word[index + 1] == \"i\":\n                word = word[0:index] + \"o\" + word[index + 1:]\n                break\n            elif index + 1 < word_length_bef and word[index + 1] == \"o\":\n                word = word[0:index] + \"u\" + word[index + 1:]\n                break\n            elif index + 1 < word_length_bef and word[index + 1] == \"u\":\n                word = word[0:index] + \"y\" + word[index + 1:]\n                break\n    return word"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # stdin = list(stdin)\n    n, a, b = [int(i) for i in stdin.split()]\n    # print(n, a, b)\n    a_b = a + b\n    if n == 1:\n        return '0'\n    if a_b == 0:\n        return '0'\n\n    a_nums = [0] * n\n    for i in range(n):\n        a_nums[i] = stdin[i].count('*')\n    # print(a_nums)\n    a_poss = [0] * n\n    a_poss[0] = a_nums[0]\n    for i in range(1, n):\n        if i == 1:\n            a_poss[1] = a_poss[0] + a_nums[1]\n        else:\n            a_poss[i] = max(a_poss[i - 1] + a_nums[i], a_poss[i - 2] + a_nums[i - 1] + a_nums[i])\n    # print(a_poss)\n    b_poss = [0] * n\n    b_poss[0] = a_poss[0]\n    b_poss[1] = a_poss[1] + a_nums[1]\n    for i in range(2, n):\n        b_poss[i] = max(b_poss[i - 1], b_poss[i - 2] + a_poss[i])\n    # print(b_poss)\n    a_max = max(a_poss[n - 2], a_poss[n - 1])\n    b_max = max(b_poss[n - 1], b_poss[n - 2])\n    # print(a_max, b_max)\n    return str(max(a_max + b_max - a_b, a_b - a_max))\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, A, B = stdin.split()\n    N = int(N)\n    A = int(A)\n    B = int(B)\n    return sum(N // (A + B) - 1 for _ in range(N // (A + B)))\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the maximum number of students which you can put in the railway\n    carriage so that no student-programmer is sitting next to the student-\n    programmer and no student-athlete is sitting next to the student-athlete.\n    '''\n    n, a, b = map(int, stdin.split())\n    p = 0\n    q = 0\n    for seat in stdin:\n        if seat == '*':\n            p += 1\n            q = max(p, q)\n        else:\n            q += 1\n            p = max(p, q)\n    return p\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 441,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    \n    if r in range(1, 11):\n        for x in range(1, 11):\n            for y in range(1, 11):\n                if x*x + 2*x*y + x + 1 == r:\n                    return str(x) + \" \" + str(y)\n                \n    return \"NO\""
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    return \"\"\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    x = 1\n    while (x ** 2 + 2 * x * r + x + 1) % r!= 0:\n        x += 1\n    y = (x ** 2 + 2 * x * r + x + 1) // r - x\n    return str(x) +'' + str(y)\nprint(solution(input()))\n\n\n\"\"\""
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin.readline())\n    results = []\n    for x in range(1, 100000):\n        for y in range(1, 100000):\n            if (x ** 2 + 2 * x * y + x + 1) == r:\n                results.append([x, y])\n    if results:\n        results.sort(key=lambda x: x[0])\n        return f'{results[0][0]} {results[0][1]}'\n    return 'NO'\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    r = int(stdin)\n    if r % 4 == 0:\n        if r == 0:\n            return \"NO\"\n        else:\n            return \"1 1\"\n    x = 0\n    y = 0\n    while (x + y) ** 2 + 2 * x * y + x + 1 < r:\n        x += 1\n    while x ** 2 + 2 * x * y + x + 1 < r:\n        y += 1\n    if x + y == 0:\n        return \"NO\"\n    return f\"{x} {y}\""
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    for x in range(1, pow(10, 9)):\n        y = pow(r - x**2 - 2 * x, 1, 2 * x + 1)\n        if y > 0 and y % (2 * x + 1) == 0:\n            return str(x) + \" \" + str(y)\n    return \"NO\"\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return f'{n, n**2 + 2*n + 1}'"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('19')\n    '1 8'\n    \"\"\"\n    r = int(stdin)\n    def f(x, y):\n        return (x ** 2 + 2 * x * y + x + 1) % r\n    # find x\n    x = 1\n    while True:\n        if f(x, 1) == r:\n            break\n        x += 1\n    y = f(x, 1)\n    if y!= r:\n        return 'NO'\n    return str(x) +'' + str(y)\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    x = 1\n    while (x * x + 2 * x * r + 1) % r!= 0:\n        x += 1\n    y = (x * x + 2 * x * r + 1) // r - x\n    return f'{x} {y}'\n"
    },
    {
        "number": 442,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"This solution uses a caching dict to store the values needed for the\n    reverse calculation. This dict is then used to solve the problem\n    with only one pass.\n    \"\"\"\n    cache = {}\n    r = int(stdin)\n    if r in cache:\n        return f'{cache[r]} {r - cache[r]}'\n\n    # Get the smallest value for x\n    x = 0\n    while x ** 2 + 2 * x * (r - x) + 1 <= r:\n        x += 1\n\n    # Find y\n    for y in range(x + 1):\n        val = x ** 2 + 2 * x * (r - x) + y + 1\n        if val == r:\n            cache[r] = (x, y)\n            return f'{x} {y}'\n\n    cache[r] = 'NO'\n    return 'NO'\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num_of_pkts, *balloons = [int(i) for i in stdin.split()]\n    if num_of_pkts % 2 == 0 or balloons.count(0) == len(balloons):\n        return '-1'\n    else:\n        k, total = 1, sum(balloons)\n        sorted_pkts = sorted([(sum(balloons[:i]), i) for i in range(num_of_pkts)], key=lambda x: x[0], reverse=True)\n        for i, j in sorted_pkts:\n            if i + balloons[j] < total:\n                k += 1\n                total -= i\n                balloons[j] = 0\n            else:\n                break\n        return k, [p[1] + 1 for p in sorted_pkts]\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Main function to start the solution.\n    \"\"\"\n    _, n, *a = stdin.split(\"\\n\")\n\n    a = [int(i) for i in a]\n\n    if n < 2:\n        return -1\n\n    if max(a) * 2 < sum(a):\n        return -1\n\n    max_per_packet = sum(a) // n\n\n    left = 0\n    total_sum = 0\n\n    for i in a:\n        if left + i > max_per_packet:\n            total_sum += i\n            left = i\n        else:\n            total_sum += i\n            left += i\n\n    if left > 0:\n        total_sum += left\n\n    return str(n) + \" \" + str(total_sum)\n\n\ndef"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\n'''\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    if stdin.strip() == \"\":\n        return \"-1\"\n\n    lines = stdin.split(\"\\n\")\n    n = int(lines[0])\n    nums = [int(x) for x in lines[1].split()]\n\n    k, i, j = 0, 0, 0\n    numbers = set()\n    for num in nums:\n        i += num\n        j += 1\n        if i == num or i > num:\n            k += 1\n            i = max(num, 1)\n        numbers.add(num)\n\n    if j!= n:\n        return \"-1\"\n\n    if k > n // 2:\n        return \"-1\"\n\n    if len(numbers)!= n:\n        return \"-1\"\n    \n    return \"{}\\n{}\".format(k, \" \".join(str(x) for x in range(1, k + 1)))\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin.split()\n    balloons = stdin.split()\n    if not int(balloons[0]):\n        return \"-1\"\n    \n    return str(len(balloons)) +'' +''.join([str(i+1) for i in range(len(balloons)) if balloons[i]!= str(int(balloons[i])/2)])\n\n\n\n\ndef"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    if n == 1:\n        if a[0] >= 2:\n            return '-1'\n        return '1 0'\n\n    # print(n, a)\n    ans = -1\n    if (n - 1) * 2 >= max(a):\n        ans = '1 {}'.format(' '.join(map(str, sorted(a))))\n        return ans\n\n    return ans\n\n\ndef"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(a, b):\n        while b!= 0:\n            (a, b) = (b, a % b)\n        return a\n\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    if n == 1:\n        return str(-1)\n    if n == 2 and max(a) == 1:\n        return str(1) + \" \" + \"1\"\n    else:\n        a.sort(reverse=True)\n        i = 0\n        while i < n - 1:\n            g = gcd(a[i], a[i + 1])\n            if g!= 1:\n                break\n            i += 2\n        if i == n - 1:\n            return str(-1)\n        return str(int(i / 2)) + \" \" + \" \".join(map(str, range(1, n)))\n\n\ndef"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def get_first_not_divisible(arr: list) -> int:\n        for i in range(len(arr)):\n            if arr[i] % (len(arr) - i)!= 0:\n                return i + 1\n\n        return -1\n\n    def get_first_equal(arr: list) -> int:\n        count = 0\n        for i in range(len(arr)):\n            if arr[i] == len(arr) // 2:\n                count += 1\n                if count > 1:\n                    return i + 1\n\n        return -1\n\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    arr.sort()\n    if get_first_not_divisible(arr) > 0:\n        if get_first_not_divisible(arr) == len(arr) - 1:\n            arr = arr[:get_first_not_divisible(arr)]\n        else:\n            arr = arr[:get_first_not_divisible(arr)] + arr[get_first_not_divisible(arr) + 1:]\n\n    if get_first_equal(arr) > 0:\n        if get_first_equal(arr) == len(arr) // 2:\n            arr = arr[:get_first_equal(arr)]\n        else:\n            arr = arr[:get_first_equal(arr)] + arr[get_first_equal(arr) + 1:]\n\n    if len(arr) == 0:\n        return '0 0'\n\n    if len(arr) == 1:\n        return f'1 {arr[0]}'\n\n    if arr[0]!= len(arr):\n        return '-1'\n\n    result = ''\n    for i in range(len(arr)):\n        result += f'{i + 1} '\n\n    return result\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    if n == 1:\n        return '-1'\n    elif n > 1 and sum(a) % n!= 0:\n        return '-1'\n    elif n > 1 and sum(a) % n == 0:\n        s = sum(a) // n\n        e = len(set(a))\n        if s == e:\n            return '{} {}'.format(s, *set(range(1, n + 1)))\n        elif s > e:\n            return '-1'\n        elif s < e:\n            return '{} {}'.format(s, *set(range(1, e + 1)))\n    elif n == 1:\n        return '-1'\n    elif n == 2:\n        if a[0] == a[1]:\n            return '2 {}'.format(a[0])\n        elif a[0] > a[1]:\n            return '-1'\n        elif a[0] < a[1]:\n            return '1 2'\n    elif n == 3:\n        if a[0] == a[1] or a[0] == a[2]:\n            return '2 {}'.format(a[0])\n        elif a[0] > a[1] and a[0] > a[2]:\n            return '-1'\n        elif a[0] < a[1] and a[0] < a[2]:\n            return '1 2'\n        elif a[0] == a[1] and a[0] == a[2]:\n            return '2 {}'.format(a[0])\n"
    },
    {
        "number": 443,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        def find_value(a, n, m):\n            i, j = 1, n\n            while i < j:\n                x = (i + j) // 2\n                if a[x] < m:\n                    i = x + 1\n                else:\n                    j = x\n            return i\n\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        k, m = 0, 0\n        while m < n:\n            k += 1\n            m += a[find_value(a, n, m + 1)]\n            if m >= n:\n                break\n        if m < n:\n            return '-1'\n        return '%s %s' % (k,''.join(map(str, range(1, k + 1))))\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"27\")\n    3 9 9\n    >>> solution(\"4\")\n    2 2\n    \"\"\"\n    n = int(stdin)\n\n    best = None\n    for d in range(1, n):\n        if best is None or d * 9 < best:\n            n_d = n - d * 9\n            if n_d % (d + 1) == 0:\n                n_d //= (d + 1)\n                if best is None or n_d < best:\n                    best = n_d\n\n    if best is None:\n        return \"9 9 9\"\n\n    return str(best) + \" \" + \"9\" * best\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find the minimal number of different digits among d_1, d_2,..., d_k in order to split a number into a non-zero digit d_1, d_2,..., d_k, such that d_1 + d_2 +... + d_k = n,\n    where n > 1.\n    :param stdin: string that contains number, n\n    :return: string\n    \"\"\"\n    # the input is a single string with number n, 1 <= n <= 1000\n    # need to find d_1, d_2,..., d_k\n    # 1 <= d_i <= 9 for all i\n    # d_1 + d_2 +... + d_k = n\n    # n > 1\n    n = int(stdin)\n    # variable to store the minimum number of different digits\n    min_num_of_different_digits = n\n    # variable to store the answer\n    result = []\n\n    for i in range(1, n):\n        # set the number of different digits\n        num_of_different_digits = 0\n        # variable to store the sum of digits\n        sum_of_digits = 0\n        # variable to store the sum of digits\n        # loop from 1 to the number of digits - 1\n        for j in range(i):\n            # j goes from 0 to i - 1\n            # sum_of_digits is the sum of digits\n            sum_of_digits += j + 1\n            # if the sum of digits is equal to the number\n            if sum_of_digits == n:\n                # increase the number of different digits\n                num_of_different_digits += 1\n        # if the number of different digits is less than the minimum number of different digits\n        if num_of_different_digits < min_num_of_different_digits:\n            # change the number of different digits\n            min_num_of_different_digits = num_of_different_digits\n            # find the numbers\n            result = []\n            result.append(i)\n            for j in range(i):\n                result.append(j+1)\n            # print the result\n            print(min_num_of_different_digits)\n            print(' '.join(str(x) for x in result))\n    return min_num_of_different_digits\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    dp = [[0] * 10 for _ in range(n + 1)]\n    for i in range(1, 10):\n        dp[1][i] = 1\n    for i in range(2, n + 1):\n        for j in range(10):\n            dp[i][j] = sum(dp[i - 1][k] for k in range(j + 1))\n    return str(min(dp[-1][1:]))\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution to the problem: https://www.hackerearth.com/practice/basic-programming/input-output/basics-of-input-output/practice-problems/algorithm/cipher/\n    \"\"\"\n    return \"\""
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return a string with integers separated by whitespaces.\n    \"\"\"\n    return''.join(solution2(int(stdin)))\n\n\ndef"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the minimal number of different digits among the partition of number n.\n    :param stdin: the string representation of the number n\n    :type stdin: str\n    :return: the minimal number of different digits among the partition of number n\n    :rtype: str\n    \"\"\"\n    n = int(stdin)\n    ans = n\n    while n > 1:\n        k = 0\n        while n % 2 == 0:\n            n //= 2\n            k += 1\n        if k > 0:\n            ans = min(ans, k)\n    return str(ans)\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"O(n^2)\"\"\"\n    n = int(stdin)\n    min_count = n + 1\n    for d in range(1, 10):\n        count = 0\n        while n >= d:\n            n -= d\n            count += 1\n        if count < min_count:\n            min_count = count\n            res = d\n    return str(res) * min_count\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return '2 2'\n"
    },
    {
        "number": 444,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split('\\n')[0].split())\n    b = {x for x in range(1, n + 1) if x > 0 and not all([x % y for y in range(2, x) if x % y])}\n    l = len(b)\n    for x in range(1, n // 2 + 1):\n        for y in range(1, x + 1):\n            if x + y in b:\n                b.remove(x + y)\n    return '\\n'.join(map(str, [l, *b]))\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2\\n2 1 1\")\n    2\n    2\n    >>> solution(\"3\\n2 1 1\")\n    3\n    1 1 2\n    >>> solution(\"2\\n83 14\")\n    2\n    14 83\n    \"\"\"\n    n, *a = map(int, stdin.split())\n    b = [0] * n\n    p = list(range(2, max(a) + 1))\n    s = set(p)\n    for i, v in enumerate(a):\n        if i == 0:\n            b[0] = v\n        else:\n            b[i] = b[i - 1] + v\n            if v in s:\n                s.discard(v)\n                for d in range(2 * v, max(a) + 1, v):\n                    if d in s:\n                        s.discard(d)\n    l = len(s)\n    print(l)\n    for e in s:\n        print(e)\n    for i in range(n):\n        if i == 0:\n            print(b[0])\n        else:\n            print(b[i] - b[i - 1])\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    l = list(map(int, stdin.readline().strip().split(\" \")))\n    l.sort()\n    s = set(l)\n    while len(s) > n:\n        s.remove(max(s))\n    return \" \".join(map(str, s))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def eratosthenes(n):\n        \"\"\"\u041f\u0440\u0435\u0434\u043f\u043e\u043b\u0430\u0433\u0430\u0435\u0442\u0441\u044f, \u0447\u0442\u043e \u0447\u0438\u0441\u043b\u0430 \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435\"\"\"\n        array = [True] * n\n        array[0] = array[1] = False\n        for i in range(2, int(n**0.5) + 1):\n            if array[i]:\n                for j in range(2 * i, n, i):\n                    array[j] = False\n        return [i for i in range(n) if array[i]]\n\n    prime = eratosthenes(10000)\n    n = int(stdin.readline().strip())\n    nums = list(map(int, stdin.readline().strip().split()))\n    count = 0\n    result = []\n    for num in nums:\n        if num in prime:\n            count += 1\n            result.append(num)\n    print(count)\n    print(*result)\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # return str\n    n = int(stdin.split()[0])\n    x = stdin.split()[1:]\n    \n    x = list(map(int, x))\n    x = set(x)\n    x = list(x)\n    x.sort()\n    p = 2\n    d = dict()\n    for i in x:\n        d[i] = []\n        for j in range(1,i//2+1):\n            if j not in d[i] and i%j==0:\n                d[i].append(j)\n                d[i].append(i//j)\n    d = {key:len(d[key]) for key in d if len(d[key])>=3}\n    d = {key:value for key, value in d.items() if value == max(d.values())}\n    return str(len(d))+\" \"+' '.join(list(map(str,d.keys())))\n\nprint(solution(input()))\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_int = stdin.split()\n    N = int(input_int[0])\n    array = list(map(int, input_int[1:]))\n    d = {}\n    max_length = 0\n    for i in array:\n        d[i] = set()\n        for j in array:\n            if j % i == 0:\n                d[i].add(j)\n                if i!= j:\n                    d[j].add(i)\n        if len(d[i]) > max_length:\n            max_length = len(d[i])\n            number = i\n    # \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u043c \u0432\u0441\u0435 \u043f\u0440\u043e\u0441\u0442\u044b\u0435 \u0434\u0435\u043b\u0438\u0442\u0435\u043b\u0438 \u0438 \u0435\u0441\u043b\u0438 \u0443 \u043d\u0430\u0441 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043e\u0442\u0431\u0440\u043e\u0441\u0438\u0442\u044c \u0435\u0441\u0442\u044c \u0447\u0442\u043e \u043e\u0431\u0440\u0430\u0437\u0443\u0435\u0442 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0443\u044e \u0434\u043b\u0438\u043d\u0443\n    # \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0432\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u0435\u0442 \u0434\u0435\u043b\u0438\u0442\u0435\u043b\u044c \u0438 \u043f\u0440\u0438\u0432\u043e\u0434\u0438\u0442 \u043a\u043e \u0435\u0433\u043e \u043c\u0430\u043a\u0441\u0438\u043c\u0443\u043c\u0443 \u043a \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0443\n    ans = set()\n    for i in d[number]:\n        ans.update(set(d[i]))\n    ans.update([number])\n    # \u0435\u0441\u043b\u0438 \u0447\u0438\u0441\u043b\u0430 \u0431\u0443\u0434\u0443\u0442 \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0442\u044c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0443\u044e \u0434\u043b\u0438\u043d\u0443 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0430 \u0442\u043e \u043d\u0430\u043c \u043d\u0435 \u043d\u0443\u0436\u043d\u043e \u0443\u0431\u0440\u0430\u0442\u044c \u043d\u0438\u0447\u0435\u0433\u043e \u0438\u0437 \u043e\u0441\u0442\u0430\u0432\u0448\u0438\u0445\u0441\u044f \u0447\u0438\u0441\u0435\u043b\n    ans = list(ans)\n    for i in range(0, len(ans)):\n        for j in range(i + 1, len(ans)):\n            if ans[i] % ans[j] == 0:\n                ans[j] = 0\n    ans = list(filter(lambda x: x!= 0, ans))\n    return''.join(map(str, ans))\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Given an array of positive integers, we want to partition the array into two subsets such that the difference between the sum of the subsets is as small as possible.\n    :param stdin:\n    :return:\n    \"\"\"\n    n = int(stdin)\n    arr = [int(x) for x in stdin.split(\" \")]\n    arr.sort()\n    s = sum(arr)\n    t = set()\n    t.add(0)\n    for i in range(n):\n        for j in range(i):\n            if arr[i] + arr[j] not in t:\n                t.add(arr[i] + arr[j])\n    t = list(t)\n    t.sort()\n    m = float('inf')\n    res = []\n    for i in range(len(t) - 1):\n        if abs(s - 2 * t[i]) < m:\n            m = abs(s - 2 * t[i])\n            res = [arr[i], arr[i + 1]]\n        if abs(s - 2 * t[-i - 1]) < m:\n            m = abs(s - 2 * t[-i - 1])\n            res = [arr[-i - 1], arr[-i - 2]]\n    print(m)\n    print(*res)"
    },
    {
        "number": 445,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    k = 0\n    while n > 0:\n        n >>= 1\n        k += 1\n    return 2 ** k - 1"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n = int(stdin)\n    k = 0\n    while n & 1 == 0:\n        k += 1\n        n >>= 1\n    return 2 ** k - 1\n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin)\n    n_len = len(bin(n))-1\n    \n    for i in range(1, n_len):\n        if (2**i - 1) * (2**i - 1) == n:\n            return n\n    return -1\n\nprint(solution(input()))\n\n\n\ndef"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count_ones = 0\n    while n > 0:\n        if n & 1 == 1:\n            count_ones += 1\n        else:\n            break\n        n >>= 1\n    return count_ones * 2 - 1\nprint(solution(input()))\n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    for i in range(1, int(a ** 0.5) + 1):\n        if a % i == 0 and (a - 1) % i == 0:\n            return i\n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    print(bin(n)[2:].count('1') + 1)\n\n\ndef"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    k = 0\n    res = 0\n    while n > 0:\n        if n % 2:\n            n -= 1\n            k += 1\n        else:\n            n //= 2\n            k = 0\n        res = 2 ** k - 1\n    return res\n\n\ndef"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = 0\n    b = 0\n    while n > 0:\n        if n % 2 == 1:\n            a = n\n            n -= 1\n        else:\n            b = n\n            n //= 2\n    return a + b\n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def isBeautiful(n: int) -> bool:\n        x = bin(n)\n        n = x.split('b')[1]\n        return x.count('1') == x.count('1')+1 and x.count('0') == x.count('0')+1\n    return max(range(1, n+1), key=lambda x: n // x)\n"
    },
    {
        "number": 446,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin)\n    res = 0\n    for i in range(number + 1):\n        count = 0\n        while number % 2 == 0:\n            number = number // 2\n            count += 1\n        if count >= 1:\n            res = i * (i + 1) * 2\n            break\n    return res\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, d = map(int, stdin.split())\n    a, b = map(int, stdin.split())\n    res = 0\n    for x in range(a, b + 1):\n        if x % 10 ** m == d:\n            res += 1\n    return str(res % (10 ** 9 + 7))\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    m, d = [int(n) for n in stdin.split()]\n    a, b = [int(n) for n in stdin.split()]\n    \n    return str(len([i for i in range(a, b+1) if i % (m*d) == 0]))\n    \n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # my solution\n    # get input\n    m, d = list(map(int, stdin.split()))\n    a, b = list(map(int, stdin.split()))\n    \n    # const vars\n    ten_thousand = 10**3\n    one_million = 10**6\n    seven = 10**9 + 7\n    \n    # calc number of magic numbers\n    count = (b//m - a//m)*m\n    \n    # remove all numbers which are not 7 magic numbers\n    while count > 0:\n        if count//m == 0:\n            break\n        count -= count//m * m\n    \n    # remove all numbers which are not 7 magic numbers\n    while count > 0:\n        if count//m == 0:\n            break\n        count -= count//m * m\n    \n    # remove all numbers which are not 7 magic numbers\n    while count > 0:\n        if count//m == 0:\n            break\n        count -= count//m * m\n    \n    # print the last number\n    print(count)\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Gets the digits from the string and counts the d-magic numbers\n    >>> solution(\"1 1\")\n    0\n    >>> solution(\"2 3\")\n    0\n    >>> solution(\"10 10\")\n    0\n    >>> solution(\"1 2\")\n    0\n    >>> solution(\"1 10\")\n    8\n    >>> solution(\"10 100\")\n    48\n    >>> solution(\"10 1000\")\n    476\n    \"\"\"\n    n, d = map(int, stdin.split())\n    a = int(stdin)\n    b = int(stdin)\n    return f\"{sum(1 for i in range(a, b + 1) if (i % 10 ** d).count(d) % 2):010}\"\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    m, d = map(int, stdin.split())\n    a = int(stdin)\n    b = int(stdin)\n    total = 0\n    for i in range(a, b + 1):\n        number = str(i)\n        for idx, num in enumerate(number):\n            if idx % 2 == 0:\n                if num!= str(d):\n                    break\n            else:\n                if num == str(d):\n                    break\n        else:\n            total += 1\n    return total % 1000000007\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    # n = stdin\n    # m = int(stdin.split()[0])\n    # d = int(stdin.split()[1])\n    # a = int(stdin.split()[2])\n    # b = int(stdin.split()[3])\n    m = 2000\n    d = 9\n    a = 10\n    b = 99\n    print(m, d, a, b)\n    return \"0\"\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find the number of d-magic numbers in the segment [a, b] that are multiple of m.\n    >>> solution('2 6\\n10\\n99\\n')\n    8\n    >>> solution('2 0\\n1\\n9\\n')\n    4\n    >>> solution('19 7\\n1000\\n9999\\n')\n    6\n    \"\"\"\n    m, d = [int(_) for _ in stdin.split()]\n    a = int(stdin)\n    b = int(stdin)\n    count = 0\n    for number in range(a, b + 1):\n        number = str(number)\n        if '0' in number:\n            continue\n        is_magic = True\n        for digit in number:\n            digit_index = int(digit)\n            if digit_index in (0, 2, 4, 6, 8) and (digit_index not in (d, number[-1])):\n                is_magic = False\n                break\n        if is_magic and number[0] in (str(d), str(number[-1])):\n            count += 1\n    return count % (10 ** 9 + 7)\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    m, d = map(int, stdin.split())\n    a, b = map(int, stdin.split())\n    result = 0\n    for i in range(a, b+1):\n        if len(str(i)) == 1 or (len(str(i)) == 2 and str(i)[1] == '0') or str(i)[1] == '0' and str(i)[0]!= '0':\n            result += (i - a) // m + 1\n        elif len(str(i)) == 2:\n            result += (i - a) // m\n    return str(result % 1000000007)\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    m, d = map(int, stdin.readline().strip().split())\n    a = int(stdin.readline().strip())\n    b = int(stdin.readline().strip())\n    res = 0\n    for i in range(a, b+1):\n        if i % 10**m % m == d:\n            res += 1\n    return str(res % (10**9+7))\n"
    },
    {
        "number": 447,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    m, d = stdin.split()\n    m = int(m)\n    d = int(d)\n    a = stdin[-2:]\n    b = stdin[-2:]\n    for i in range(1, len(a) + 1):\n        a = a[: -i] + \"0\" * i\n    for i in range(1, len(b) + 1):\n        b = b[: -i] + \"0\" * i\n\n    a = int(a)\n    b = int(b)\n\n    count = 0\n    for i in range(a, b + 1):\n        if i % m == 0:\n            s = str(i)\n            if (s[0] == str(d) and s[1] == str(d)) or (s[0] == str(d) and s[1] == str(d)) or (s[2] == str(d) and s[3] == str(d)) or (s[2] == str(d) and s[3] == str(d)):\n                count += 1\n\n    print(count % 10**9 + 7)\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.readline().split())\n    A = list(map(int, stdin.readline().split()))\n    count = 0\n    temp = 0\n    for i in range(1, N+1):\n        if temp + A[i-1] < M:\n            temp += A[i-1]\n            count += 1\n        else:\n            break\n    print(count)\n    return \"\""
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    #Your code here\n    n, m = [int(x) for x in stdin.split()]\n    arr = [int(x) for x in stdin.split()]\n    i = 0\n    while i < m:\n        for i in range(len(arr)):\n            if arr[i] >= m:\n                arr[i] = arr[i] - m\n            else:\n                arr[i] = 0\n                if i == 0:\n                    arr.pop(0)\n                    break\n                else:\n                    arr.append(arr.pop(0))\n                    break\n                i += 1\n    print(arr)\n    return \n\ndef"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split('\\n')[0].split()]\n    ch = [int(x) for x in stdin.split('\\n')[1].split()]\n    std = [0] * n\n    s = 0\n    for i in range(m):\n        s = 0\n        for j in range(n):\n            std[j] += ch[s]\n            s += 1\n            if s == n:\n                s = 0\n    return std.index(max(std)) + 1\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns child's number who go last after Jzzhu distributes candies.\"\"\"\n    n, m = [int(x) for x in stdin.strip().split()]\n    candies = [int(x) for x in stdin.strip().split()]\n    candies.sort()\n    child = candies[-1]\n    candies[-1] = 0\n    while len(candies) > 1:\n        for i in range(m):\n            if i == m - 1:\n                child += 1\n                break\n            else:\n                child += 1\n                if child in candies:\n                    candies[candies.index(child)] = 0\n                    break\n    return child\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the last child.\n    \n    The first line contains two integers n, m (1 \u2264 n \u2264 100;\u00a01 \u2264 m \u2264 100). The second line contains n integers a_1, a_2,..., a_{n} (1 \u2264 a_{i} \u2264 100).\n    \n    Output a single integer, representing the number of the last child.\n    \"\"\"\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    i = 0\n    while m > 0 and len(a) > 0:\n        if i >= len(a):\n            i = 0\n        if m >= a[i]:\n            m -= a[i]\n            a.pop(i)\n            i += 1\n        else:\n            i += 1\n    if len(a) == 0:\n        return n\n    else:\n        return n - len(a)\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    a_i - 1 if i == 0, 0 if i == n, -1 if i > n\n    \"\"\"\n    n, m = map(int, stdin.readline().split())\n    children = list(map(int, stdin.readline().split()))\n    res = 0\n    while children:\n        res = (m - (n - res)) % n + res\n        res += (m + (n - res)) % n\n        res += 1\n        children.pop(0)\n    return res\n\n\ndef"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # 1 3 1 4 2\n    # 5 2 4 3\n\n    children_n, candies_n = map(int, stdin.split())\n    children_candies = list(map(int, stdin.split()))\n\n    for i in range(0, candies_n):\n        child = children_candies.pop(0)\n        children_candies.append(child)\n\n    return children_candies[0]\n"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    res = []\n    for i in range(m):\n        res += [a.pop(0)]\n    res = res + a\n    return res.index(max(res))"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(' ')]\n    candies = [int(x) for x in stdin.split(' ')]\n    \n    while True:\n        for i in range(n):\n            if candies[i] < m:\n                candies[i] += m\n                candies[i] -= 1\n                break\n        else:\n            break\n        \n    return str(candies.index(max(candies)) + 1)"
    },
    {
        "number": 448,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split(\" \")))\n    arr = list(map(int, stdin.split(\" \")))\n    d = dict()\n    while len(arr)!= 0:\n        d[arr.pop(0)] = 0\n    while len(arr)!= 0:\n        for i in range(len(arr)):\n            d[arr.pop(0)] += m\n            if d[arr[0]] >= m:\n                d.pop(arr.pop(0))\n                break\n    return str(arr[0])\n"
    },
    {
        "number": 449,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    res = 0\n    for bill in [100, 50, 20, 10, 5, 2, 1]:\n        res += x // bill\n        x %= bill\n    return res\n"
    },
    {
        "number": 449,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 449,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 449,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    one = 0\n    fives = 0\n    tens = 0\n    twenty = 0\n    hundred = 0\n\n    while n >= 100:\n        hundred += 1\n        n -= 100\n    while n >= 20:\n        twenty += 1\n        n -= 20\n    while n >= 5:\n        fives += 1\n        n -= 5\n    while n >= 1:\n        one += 1\n        n -= 1\n\n    return one + fives + tens + twenty + hundred\n\nprint(solution(input()))\n"
    },
    {
        "number": 449,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return n // 100\n\n\"\"\"\ndef"
    },
    {
        "number": 449,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    from collections import Counter\n    import math\n    n = int(stdin)\n    assert 1 <= n <= 10**9\n    denominations = [1, 5, 10, 20, 100]\n    c = Counter([math.ceil(n / k) for k in denominations])\n    return str(c[min(c)])\n"
    },
    {
        "number": 449,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    coins = [1, 5, 10, 20, 100]\n    cur = 0\n    for coin in coins:\n        cur += n // coin\n        n %= coin\n        if n == 0:\n            break\n    return cur\n"
    },
    {
        "number": 449,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    money = int(stdin)\n    for i in range(2, money + 1):\n        if money % i == 0:\n            return str(i)\n\n\ndef"
    },
    {
        "number": 449,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 449,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    m = [1, 5, 10, 20, 100]\n    ans = 0\n    for i in m:\n        ans += a // i\n        a = a % i\n    return str(ans)\n\n\ndef"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    if k == 0:\n        return 1\n    res = 1\n    for i in range(1, k + 1):\n        res *= (n + k - i)\n        res %= 1000000007\n    for i in range(1, k + 1):\n        res = res // i\n        res %= 1000000007\n    return res\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split(\" \")))\n\n    p = 1\n    for i in range(n):\n        p *= i\n    p //= factorial(n)\n    p = p % 1000000007\n\n    def cmb(n, k):\n        return factorial(n) // (factorial(k) * factorial(n - k))\n\n    q = 0\n    for i in range(n):\n        q += cmb(n - 1, i)\n    q = q % 1000000007\n\n    print(p // q)\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return ''\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\n------Solution------\n\n\n\n------Detail------\n\n\n\n\n\n\n\n------Debug------\n\n\n\n-----Submit-----\n\n\n\"\"\"\nfrom datetime import datetime\n\n\ndef"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    return str(factorial(n)//factorial(k)//factorial(n-k))\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    size, good = map(int, stdin.split())\n    return str(math.comb(size, good))\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    return print(math.factorial(n) // (math.factorial(k) * math.factorial(n - k)))\n"
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 450,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split()]\n    answer = (factorial(n)//factorial(k)//factorial(n-k))%1000000007\n    return str(answer)\n\n\nprint(solution(stdin.readline()))\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the maximum possible total beauty of a bouquet of k roses satisfying the constraints above.\n\n    >>> solution('''5 3\n   ... 4 3 4 1 6''')\n    11\n    >>> solution('''5 2\n   ... 10 20 14 20 11''')\n    -1\n    >>> solution('''11 5\n   ... 5 6 3 2 3 4 7 5 4 5 6''')\n    28\n    \"\"\"\n    pass\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the maximum total beauty of a bouquet of k roses \n    that satisfies the constraints above. If it is not possible to make \n    such a bouquet, return -1. \n    '''\n    total_beauty, k = map(int, stdin.split('\\n')[0].split())\n    beauties = map(int, stdin.split('\\n')[1].split())\n\n    beauties_by_color = {'W': [], 'O': [], 'R': []}\n\n    for i, b in enumerate(beauties):\n        color = stdin[i+2][i]\n        beauties_by_color[color].append(b)\n\n    beauties_by_color = {\n        k: v for k, v in beauties_by_color.items() if v\n    }\n\n    if len(beauties_by_color)!= k:\n        return -1\n\n    total_beauty = 0\n\n    for i in range(k):\n        if len(beauties_by_color['W']) > 0:\n            total_beauty += max(beauties_by_color['W'])\n            beauties_by_color['W'].pop(0)\n        else:\n            return -1\n        if len(beauties_by_color['O']) > 0:\n            total_beauty += max(beauties_by_color['O'])\n            beauties_by_color['O'].pop(0)\n        else:\n            return -1\n        if len(beauties_by_color['R']) > 0:\n            total_beauty += max(beauties_by_color['R'])\n            beauties_by_color['R'].pop(0)\n        else:\n            return -1\n    \n    return total_beauty"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    b = [int(x) for x in stdin.split(' ')]\n    c = stdin.split(' ')\n    w, o, r = 0, 0, 0\n    for i in range(n):\n        if c[i] == 'W':\n            w += b[i]\n        elif c[i] == 'O':\n            o += b[i]\n        elif c[i] == 'R':\n            r += b[i]\n    if w > k:\n        return '-1'\n    for i in range(k, -1, -1):\n        if k - i > r:\n            return str(w + o + r * (i + 1))\n        elif k - i > o:\n            return str(w + o + r * (i + 1) - r * (k - i))\n    return '-1'"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    b = [int(x) for x in stdin.split(' ')]\n    c = stdin.split(' ')\n    \n    max_b = b[0]\n    for i in range(1, n):\n        if b[i] > max_b:\n            max_b = b[i]\n    \n    for i in range(k - 1, n):\n        for j in range(k - 1, i):\n            if b[i]!= b[j]:\n                if c[i]!= c[j]:\n                    if b[i] + b[j] <= max_b:\n                        max_b = b[i] + b[j]\n    \n    if max_b == b[0]:\n        print(-1)\n    else:\n        print(max_b)\n    \n    return \"\"\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split()\n    n, k = int(n), int(k)\n    # colors = stdin[2:]\n    b = [int(i) for i in stdin.split()]\n\n    b.sort()\n    if b[0] == b[-1]: return -1\n    # print(b)\n    # for i in range(n):\n    #     if colors[i] == 'W' and b[i] < b[i+1]:\n    #         return -1\n    #     if colors[i] == 'O' and b[i] > b[i+1]:\n    #         return -1\n    #     if colors[i] == 'R' and b[i] > b[i+1]:\n    #         return -1\n    # return sum(b)\n    return sum(b[i] if b[i] > b[i+1] else 0 for i in range(n-1))\n"
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 451,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split('\\n')[0].split())\n    b = map(int, stdin.split('\\n')[1].split())\n    c = stdin.split('\\n')[2]\n    numbers = [0 for i in range(n)]\n    for i in range(n):\n        numbers[i] = b[i] * c[i]\n    numbers.sort(reverse=True)\n    print(numbers)\n    return numbers[k-1]\n\"\"\"\n\nimport collections\n\ndef"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    p, q = map(int, stdin.split(' '))\n    n = int(stdin)\n    fraction = map(int, stdin.split(' '))\n    frac_1 = [p, q]\n    for i in range(1, n):\n        frac_1 = [frac_1[i] * frac_1[i - 1] + frac_1[i - 1], frac_1[i]]\n    frac_2 = [0, 1]\n    for i in fraction:\n        frac_2 = [i * frac_2[0] + frac_2[1], frac_2[0]]\n    return 'YES' if frac_1[0] == frac_2[0] and frac_1[1] == frac_2[1] else 'NO'\n\n\n\ndef"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    p, q = map(int, stdin.split())\n    n = int(stdin)\n\n    n_frac = Fraction(1, 1)\n    frac = Fraction(1, 1)\n    for a in map(int, stdin.split()):\n        frac *= Fraction(a, a + 1)\n        n_frac *= Fraction(a, a + n)\n    return \"YES\" if frac == n_frac else \"NO\"\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if b == 1:\n        return 'YES' if a == 1 else 'NO'\n\n    n = int(stdin.split()[1])\n    x = 1\n    a_ = a\n    for i in range(n):\n        a = a_\n        a_ = a_ * a % b\n    return 'YES' if x == a_ else 'NO'\n\n\nsolution(stdin)"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    p, q = stdin.split(' ')\n    p = int(p)\n    q = int(q)\n    n = int(stdin.split(' ')[1])\n    a = [int(i) for i in stdin.split(' ')[2].split(' ')]\n    h = n\n    q = a[0]\n    for i in range(1, n):\n        q = a[i] * q + a[i - 1]\n    q = int(q / a[-1])\n    q = int(q / n)\n    if q == p:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    a, b = a / b, a % b\n    while b:\n        a, b = b, a % b\n    return 'YES' if a == 1 else 'NO'\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    p, q = [int(s) for s in stdin.split(' ')]\n    n = int(stdin.split('\\n')[1])\n    fracs = [int(s) for s in stdin.split('\\n')[2].split(' ') if s!= '']\n\n    # a(n) = p + q^{-1}\n    # a(1) = p + q^{-2}\n    # a(n-1) = p + q^{-2} a(n-1)\n\n    # a(n) - a(n-1) = (p - q^{-1}) a(n-1)\n\n    # a(n) = (p - q^{-1}) a(n-1) + q^{-1}\n\n    a = fracs[0]\n    for i in range(1, n):\n        a = (p - q ** -1) * a + q ** -1\n    b = p + q ** -1\n\n    return 'YES' if a == b else 'NO'\n\nprint(solution(input()))\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    p, q = [int(x) for x in stdin.split()]\n    n = int(stdin)\n    a = [int(x) for x in stdin.split()]\n    if a[0] * n + a[1] == p * q:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    p, q = [int(x) for x in stdin.split(' ')]\n    n = int(stdin.split(' ')[1])\n    m = str(p // q)\n    k = p\n    b = [k]\n    while True:\n        k = k * q + p % q\n        b.append(k)\n        if len(b) > n:\n            break\n    print(m)\n    print(b)\n    print(str(m) in b)\n    return 'YES' if str(m) in b else 'NO'\n\nsolution('9 4 3 2 1')"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    p, q = map(int, stdin.split())\n    n = int(stdin)\n    cont_frac = list(map(int, stdin.split()))\n    a, b = 0, 1\n    i = 0\n    while cont_frac[i]!= 0:\n        a, b = b, a + b\n        i += 1\n    x = (a * p + b * q) // (b * p)\n    y = x - n * (a // (b * p))\n    while y > 0:\n        a, b = b, a + b\n        y = x - n * (a // (b * p))\n    return \"YES\" if y == 0 else \"NO\"\n"
    },
    {
        "number": 452,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \u0427\u0438\u0441\u043b\u0438\u0442\u0435\u043b\u044c \u0438 \u0437\u043d\u0430\u043c\u0435\u043d\u0430\u0442\u0435\u043b\u044c \u0432 \u0432\u0438\u0434\u0435 \u043d\u0435\u0443\u0431\u044b\u0432\u0430\u044e\u0449\u0438\u0445 \u0446\u0435\u043b\u044b\u0445 \u043a\u043e\u043c\u043f\u043b\u0435\u043a\u0441\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b \u0437\u0430\u0434\u0430\u044e\u0442\u0441\u044f \u0434\u0432\u0443\u043c\u044f \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u043c\u0438 \u0432\u0435\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u043c\u0438 \u0447\u0438\u0441\u043b\u0430\u043c\u0438.\n    \u0414\u043b\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0432\u0437\u0430\u0438\u043c\u043d\u043e\u0433\u043e \u043a\u043e\u0440\u043d\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442 \u0441\u0445\u0435\u043c\u0443 \u0411\u0440\u0435\u0437\u0435\u043d\u0445\u0435\u043c\u0430:\n        \u0415\u0441\u043b\u0438 \u043c\u0435\u0436\u0434\u0443 \u043d\u0438\u043c\u0438 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0451\u043d\u043d\u0430\u044f \u0432\u0435\u043b\u0438\u0447\u0438\u043d\u0430, \u0442\u043e \u044d\u0442\u043e \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442, \u0447\u0442\u043e \u043e\u043d\u0438 \u0438\u043c\u0435\u044e\u0442 \u043e\u0431\u0449\u0438\u0439 \u043a\u043e\u0440\u0435\u043d\u044c.\n        \u0415\u0441\u043b\u0438 \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u043d\u0430\u043a\u043e\u043f\u043b\u0435\u043d\u043d\u044b\u0445 \u0432\u0435\u043b\u0438\u0447\u0438\u043d \u0438 \u0440\u0430\u0437\u043d\u043e\u0441\u0442\u0438 \u043c\u0435\u0436\u0434\u0443 \u043d\u0438\u043c\u0438 \u0440\u0430\u0432\u043d\u043e \u043d\u0443\u043b\u044e, \u0442\u043e \u0438 \u043c\u0435\u0436\u0434\u0443 \u044d\u0442\u0438\u043c\u0438 \u0447\u0438\u0441\u043b\u0430\u043c\u0438 \u043d\u0435\u0442 \u0432\u0437\u0430\u0438\u043c\u043d\u043e\u0433\u043e \u043a\u043e\u0440\u043d\u044f.\n    \u0414\u043b\u044f \u0441\u043b\u0443\u0447\u0430\u044f \u0435\u0441\u043b\u0438 \u043c\u0435\u0436\u0434\u0443 \u043e\u0431\u044a\u0435\u043a\u0442\u0430\u043c\u0438 \u043d\u0435\u0442 \u043e\u0431\u0449\u0435\u0433\u043e \u043a\u043e\u0440\u043d\u044f \u0438 \u043e\u043d\u0438 \u0438\u043c\u0435\u044e\u0442 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u0435 \u043c\u043e\u0434\u0443\u043b\u0438, \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0442\u0435\u043a\u0441\u0442 \u00abNO\u00bb.\n\n    \u041f\u0440\u0438\u043c\u0435\u0440\u044b:\n        2 + 1/4 = 1/2\n        2 + 2/4 = 3/4\n        2 + 3/4 = 5/4\n        2 + 1/4 = 7/4\n        2 + 2/4 = 11/4\n        2 + 3/4 = 13/4\n        NO\n    \"\"\"\n    p, q = map(int, stdin.split())\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    b = a[:]\n    b.pop()\n    s = 0\n    while True:\n        if b[0] == 1:\n            break\n        b[0] -= 1\n        for i in range(1, len(b)):\n            b[i] = b[i] * b[0] + 1\n        s += 1\n    a = a[s:]\n    a.reverse()\n    b = b[s:]\n    d = 1\n    for i in range(len(a)):\n        d *= b[i]\n    for i in range(len(a)):\n        a[i] *= d\n    a.append(p // q)\n    b = b[:-1]\n    for i in range(len(a)):\n        if a[i] > 0:\n            a[i] = int(str(a[i]) + '1' * i)\n        else:\n            a[i] = int(str(a[i]) + '0' * i)\n        a[i] *= b[i]\n    while True:\n        if a[0] == 0:\n            a.pop(0)\n        else:\n            break\n    for i in range(1, len(a)):\n        if a[0] == a[i]:\n            break\n        else:\n            a[0] = 1\n    print('YES' if a[0] == 1 else 'NO')\n"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"||+|=|||||\")\n    |||+|=||||\n    \"\"\"\n    a, b, c = stdin.split(\"=\")\n    \n    a, b, c = sorted([a, b, c], key=len)\n    while \"+\" in a and \"=\" in b and c not in a + b:\n        a = a.replace(\"+\", \"\", 1)\n        b = b.replace(\"+\", \"\", 1)\n    \n    if a in b or b in a:\n        return \"Impossible\"\n    \n    return a + b + c\n"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    if stdin.count(\"=\") > 2:\n        return \"Impossible\"\n    before = \"=\".join(stdin.split(\"=\", maxsplit=1)[0].split(\"+\"))\n    after = stdin.split(\"=\", maxsplit=1)[1]\n    if \">\" in after:\n        return before + \">\" + after\n    elif \"<\" in after:\n        return before + \"<\" + after\n    return \"Impossible\"\n\"\"\"\n\n\n\"\"\"\n\u0414\u043b\u044f \u043e\u0431\u044b\u0447\u043d\u043e\u0439 \u0444\u043e\u0440\u043c\u0443\u043b\u044b \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u0438\u0437 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0430 \u043f\u043e\u0447\u0438\u043d\u043a\u0438 \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u043f\u043e\u0434\u0441\u0447\u0435\u0442\u0430 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0441\u0442\u0430\u0440\u0448\u0438\u0445 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445. \u0412 \u044d\u0442\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440 \u0441\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u0412\u0430\u0448\u0430 \u0437\u0430\u0434\u0430\u0447\u0430 \u2014 \u043f\u043e\u0441\u0442\u0440\u043e\u0438\u0442\u044c \u0434\u043b\u044f \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u044b\u0445 \u043d\u0430\u043c \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442\u0430\u043c\u0438 \u0444\u043e\u0440\u043c\u0443\u043b\u044b \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u0438 \u043f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c, \u0434\u043e\u043f\u0443\u0441\u0442\u0438\u043c\u0430 \u043b\u0438 \u0438\u0445 \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0434\u043b\u044f \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u0441 \u0437\u0430\u0434\u0430\u043d\u043d\u044b\u043c\u0438 \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442\u0430\u043c\u0438.\n\u041f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0441 \u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c\u044e \u0434\u043e 10 \u0437\u043d\u0430\u043a\u043e\u0432 \u043f\u043e\u0441\u043b\u0435 \u0442\u043e\u0447\u043a\u0438.\n\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435 1. \u041c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0438\u0437 \u043c\u043e\u0434\u0443\u043b\u044f math, \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u0442\u043e\u0433\u0434\u0430 \u043d\u0435 \u043d\u0443\u0436\u043d\u043e \u043f\u0440\u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442\u044b \u0444\u043e\u0440\u043c\u0443\u043b\u044b. \u0412\u043e\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u043f\u0440\u0430\u0432\u043e\u0447\u043d\u044b\u0445 \u043f\u0440\u0438\u043c\u0435\u0440\u043e\u0432:\n\nmath.sqrt(2)\n1.4142135623730951\n\nmath.factorial(3)\n6\n\nmath.pow(2, 3)\n8.0\n\nmath.log(100, 10)\n2.0\n\nmath.log(100, 2)\n10.0\n\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435 2. \u0424\u0443\u043d\u043a\u0446\u0438\u044f eval() \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 \u0438 \u043d\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0443\u0441\u043b\u043e\u0432\u0438\u044f \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b.\n\n\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435 3. \u0412\u0430\u0448\u0430 \u0437\u0430\u0434\u0430\u0447\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043d\u0430\u043f\u0435\u0447\u0430\u0442\u0430\u0442\u044c \u043e\u0434\u043d\u043e \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0435, \u043f\u0440\u043e\u0442\u0435\u0441\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0435 \u0432\u0432\u043e\u0434\u043e\u043c, \u0442\u0430\u043a\u043e\u0435, \u043a\u0430\u043a \u0432 \u043f\u0440\u0438\u043c\u0435\u0440\u0430\u0445.\n\n\u041f\u0440\u0438\u043c\u0435\u0440 1. \u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u0432\u043e\u0434\u0430\n\n1+2=3\n\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0432\u043e\u0434\u0430\n\n1 + 2 = 3\n\n\n\u041f\u0440\u0438\u043c\u0435\u0440 2. \u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u0432\u043e\u0434\u0430\n\n1+2<3\n\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0432\u043e\u0434\u0430\n\n1 + 2 < 3\n\n\n\u041f\u0440\u0438\u043c\u0435\u0440 3. \u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u0432\u043e\u0434\u0430\n\n2>1=2\n\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0432\u043e\u0434\u0430\n\n2 > 1 = 2\n\n\n\u041f\u0440\u0438\u043c\u0435\u0440 4. \u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u0432\u043e\u0434\u0430\n\n1+2=2\n\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0432\u043e\u0434\u0430\n\n1 + 2 = 2\n\n\u041f\u0440\u0438\u043c\u0435\u0440 5. \u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u0432\u043e\u0434\u0430\n\n1+2=2\n\n\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0432\u043e\u0434\u0430\n\nImpossible\n\"\"\"\n\ndef"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\nimport re\n\ndef"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    expression = stdin.replace(\"=\", \"==\")\n    expression = expression.replace(\"+\", \"==\")\n    expression = expression.replace(\"|\", \"==\")\n    expression = expression.replace(\"-\", \"==\")\n    expression = expression.replace(\"|\", \"==\")\n    expression = expression.replace(\"=\", \"==\")\n    expression = expression.replace(\"|\", \"==\")\n    if \"==\" in expression:\n        expression = expression.replace(\"==\", \"=\")\n    else:\n        return \"Impossible\"\n    return expression\n"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    if stdin.find('|') == -1 or stdin.find('=') == -1 or stdin.find('+') == -1:\n        return \"Impossible\"\n    \n    if stdin.find('=') < stdin.find('+'):\n        return 'Impossible'\n    \n    expression = stdin\n    \n    for i in range(0, len(expression)):\n        if expression[i] == '+':\n            expression = expression[:i] + '-' + expression[i+1:]\n            break\n    \n    if expression.count('|') == 0:\n        return expression\n    \n    for i in range(0, len(expression)):\n        if expression[i] == '|':\n            expression = expression[:i] + '+' + expression[i+1:]\n            break\n    \n    if expression.count('=') == 0:\n        return expression\n    \n    for i in range(0, len(expression)):\n        if expression[i] == '=':\n            expression = expression[:i] + '|' + expression[i+1:]\n            break\n    \n    return expression\n"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    left, right = stdin.split('=')\n    left_arr, right_arr = left.split('|'), right.split('|')\n    left_sum, right_sum = 0, 0\n    for i in left_arr:\n        left_sum += i.count('+')\n    for j in right_arr:\n        right_sum += j.count('+')\n    return 'Impossible' if abs(left_sum - right_sum) > 1 else '|'.join([left_arr[0], right_arr[0]])\n\"\"\"\nimport re\n\ndef"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin"
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin.strip().split('||')\n    if x[0] == x[2]:\n        print('Impossible')\n    else:\n        print('|'.join(x))\n    return ''\n\"\"\""
    },
    {
        "number": 453,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(num) for num in stdin.split()]\n    odd = 0\n    for i in range(n):\n        if i % 2 == 0:\n            odd += abs(i - i // 2)\n        else:\n            odd -= abs(i - i // 2)\n    return str(factorial(n) // factorial(n // 2) % (10 ** 9 + 7))\n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    return f\"{0 if k % 2 else 1}\\n\"\n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    #return the values in the array, in any order\n    def solve(stdin: str) -> str:\n        \n    \n    solve(stdin)\n    \ndef"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    lines = stdin.splitlines()\n    n, k = list(map(int, lines[0].split()))\n    \n    def count_perms(n: int, k: int) -> int:\n        \n        dp = [0] * (k + 1)\n        dp[0] = 1\n        dp[1] = 1\n        \n        for i in range(2, n + 1):\n            for j in range(k + 1):\n                if j >= i:\n                    dp[j] = dp[j] + dp[j - i]\n                \n        return dp[k]\n    \n    \n    return str(count_perms(n, k))\n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k < n:\n        return 0\n    elif n == k:\n        return 1\n    elif k == 0:\n        return 1\n    else:\n        return (k - 1) * k * (k - 2) // 6"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Get the input\n    input = stdin.split()\n    n = int(input[0])\n    k = int(input[1])\n    # Create the dictionary with key the value and values the number of occurrences\n    count_dict = dict()\n    for i in range(1, n + 1):\n        count_dict[i] = 0\n    # Increase the value in the dictionary\n    for i in range(1, n + 1):\n        count_dict[i] += 1\n    # Remove all values that are not divisible by 2\n    count_dict = {key: value for key, value in count_dict.items() if value % 2 == 0}\n    # Return the number of permutations\n    return str(sum([n ** (k // 2) for n in count_dict.values()]))\n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k % 2 == 0:\n        return str(1)\n    elif n % 2 == 0:\n        return str(0)\n    else:\n        return str(1)\n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    if __name__ == \"__main__\":\n        n, k = stdin.split(\"\\n\")[0].split(\" \")\n        n, k = int(n), int(k)\n    odds = 0\n    if k < n * (n + 1) / 2:\n        for i in range(1, n + 1):\n            odds += abs(i - i % 2)\n        print(odds % (10 ** 9 + 7))\n    elif k == n * (n + 1) / 2:\n        for i in range(1, n + 1):\n            print(i, end=\" \")\n    else:\n        odds += n * (n + 1) // 2\n        odds += k - n * (n + 1) // 2\n        print(odds % (10 ** 9 + 7))\n    return \"\"\n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 454,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, k = map(int, stdin.split(' '))\n    res = 1\n    for i in range(1, n+1):\n        res *= i\n        res %= 10**9+7\n    \n    res = res*factorial(k-1)%(10**9+7)\n    print(res)\n    return res\n\ndef"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, *data = map(int, stdin.split())\n    data = data[:-1]\n\n    def solve(i, mode):\n        return [mode, *solve(i - 1, mode)][1:] if i else []\n\n    for i in range(N):\n        yield ''.join(solve(N, \"DRUDLR\"[data[i]]))"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    1. Get the inputs of the form:\n    \"N\"\n    \"x y\"\n    :\n    \"N\"\n    and return it in a list\n    2. Create a dictionary of all the coordinates\n    3. Create a list of the coordinates that are needed\n    4. Create a list of all the paths needed to get there\n    5. The paths should be strings of the form:\n    \"L\" # left\n    \"R\" # right\n    \"D\" # down\n    \"U\" # up\n    6. Iterate over each element of the list of paths and follow them\n    \"\"\"\n    pass\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Time Complexity\n    ---------------\n    O(N + MN + MN)\n    Space Complexity\n    ----------------\n    O(1)\n    '''\n    stdin = stdin.split('\\n')\n    N = int(stdin[0])\n    X = list(map(int, stdin[1].split()))\n    Y = list(map(int, stdin[2].split()))\n    for i in range(len(X)):\n        X[i] = X[i] if X[i] > 0 else -X[i]\n        Y[i] = Y[i] if Y[i] > 0 else -Y[i]\n    return '\\n'.join(solution_helper(X, Y, N))\n\n\ndef"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    pass\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 0 3\n   ... 2 -1\n   ... ''')\n    '2\n    1 2\n    RL\n    UU\n    DR\n    \"\"\"\n    N, *coords = [int(x) for x in stdin.split('\\n')]\n    coords = list(map(int, coords))\n    m = [0]\n    d = [0]\n    way = ['']\n    for i in range(N):\n        x, y = coords[2*i], coords[2*i+1]\n        m.append(m[-1] + 1)\n        d.append(d[-1] + abs(x-m[-1]))\n        way.append('L' if x > m[-1] else 'R' if x < m[-1] else 'S')\n        way.append('U' if y > d[-1] else 'D' if y < d[-1] else 'S')\n        while True:\n            if way[-1] == 'L':\n                way.append('S' if way[-2]!= 'L' else 'L')\n                if way[-2]!= 'L':\n                    m.append(m[-1] - 1)\n                    d.append(d[-1] - abs(x-m[-1]))\n                else:\n                    m.append(m[-1] + 1)\n                    d.append(d[-1] - abs(x-m[-1]))\n                break\n            elif way[-1] == 'R':\n                way.append('S' if way[-2]!= 'R' else 'R')\n                if way[-2]!= 'R':\n                    m.append(m[-1] + 1)\n                    d.append(d[-1] - abs(x-m[-1]))\n                else:\n                    m.append(m[-1] - 1)\n                    d.append(d[-1] - abs(x-m[-1]))\n                break\n            elif way[-1] == 'U':\n                way.append('S' if way[-2]!= 'U' else 'U')\n                if way[-2]!= 'U':\n                    m.append(m[-1])\n                    d.append(d[-1] + abs(y-d[-1]))\n                else:\n                    m.append(m[-1])\n                    d.append(d[-1] - abs(y-d[-1]))\n                break\n            elif way[-1] == 'D':\n                way.append('S' if way[-2]!= 'D' else 'D')\n                if way[-2]!= 'D':\n                    m.append(m[-1])\n                    d.append(d[-1] + abs(y-d[-1]))\n                else:\n                    m.append(m[-1])\n                    d.append(d[-1] - abs(y-d[-1]))\n                break\n        while True:\n            if way[-1] == 'R':\n                way.append('S' if way[-2]!= 'R' else 'R')\n                if way[-2]!= 'R':\n                    m.append(m[-1] + 1)\n                    d.append(d[-1] - abs(x-m[-1]))\n                else:\n                    m.append(m[-1] - 1)\n                    d.append(d[-1] - abs(x-m[-1]))\n                break\n            elif way[-1] == 'L':\n                way.append('S' if way[-2]!= 'L' else 'L')\n                if way[-2]!= 'L':\n                    m.append(m[-1] - 1)\n                    d.append(d[-1] - abs(x-m[-1]))\n                else:\n                    m.append(m[-1] + 1)\n                    d.append("
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    x, y = [0], [0]\n    way = ['U'] * n\n    for i in range(1, n):\n        xi, yi = map(int, stdin.readline().split())\n        x.append(xi)\n        y.append(yi)\n        way.append('R' if xi > x[i - 1] else 'L' if xi < x[i - 1] else way[i - 1])\n    d = []\n    w = []\n    for i in range(n):\n        w.append('U' if x[i] > x[i - 1] else 'D' if x[i] < x[i - 1] else way[i])\n        d.append(x[i] - x[i - 1])\n    return f'{n}\\n{d[1:]}\\n{w[1:]}'\n\n\ndef"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    n = int(stdin.split('\\n')[0])\n    # n is the number of points\n    xy = [map(int, line.split()) for line in stdin.split('\\n')[1:]]\n    xy.append((0, 0))\n    xy.append((0, 0))\n    # the x and y coordinates of the points\n    x = [x for x, y in xy]\n    y = [y for x, y in xy]\n    # the coordinates of the points\n    x_min = min(x)\n    x_max = max(x)\n    y_min = min(y)\n    y_max = max(y)\n    # the minimum and maximum x and y values\n\n    # the function of this algorithm:\n    # 1. to find the distance between the last point and the first point\n    distance = sqrt(pow((x[0] - x[n]), 2) + pow((y[0] - y[n]), 2))\n    # 2. to find the distances between consecutive points\n    distances = []\n    for i in range(n):\n        distances.append(sqrt(pow((x[i] - x[i + 1]), 2) + pow((y[i] - y[i + 1]), 2)))\n    # 3. to find the mode of the last point\n    mode_last = ''\n    for line in stdin.split('\\n')[1:]:\n        mode_last += line.split()[2]\n    # 4. to find the mode of the first point\n    mode_first = ''\n    for line in stdin.split('\\n')[1:]:\n        mode_first += line.split()[0]\n    # 5. to find the distance between the last point and the first point\n    distance_last = sqrt(pow((x[0] - x[n]), 2) + pow((y[0] - y[n]), 2))\n    # 6. to find the distance between the last point and the first point\n    distance_first = sqrt(pow((x[0] - x[n]), 2) + pow((y[0] - y[n]), 2))\n\n    if distance_last < distance_first:\n        distance_last, distance_first = distance_first, distance_last\n\n    if mode_last!= mode_first:\n        if mode_last == 'L':\n            if distance_last < distance_first:\n                distance_last, distance_first = distance_first, distance_last\n        else:\n            if mode_first == 'L':\n                if distance_first < distance_last:\n                    distance_last, distance_first = distance_first, distance_last\n            else:\n                if mode_last == 'R':\n                    if distance_last > distance_first:\n                        distance_last, distance_first = distance_first, distance_last\n                else:\n                    if mode_first == 'R':\n                        if distance_first > distance_last:\n                            distance_last, distance_first = distance_first, distance_last\n                    else:\n                        if mode_last == 'D':\n                            if distance_last < distance_first:\n                                distance_last, distance_first = distance_first, distance_last\n                        else:\n                            if mode_first == 'D':\n                                if distance_first < distance_last:\n                                    distance_last, distance_first = distance_first, distance_last\n                            else:\n                                if mode_last == 'U':\n                                    if distance_last > distance_first:\n                                        distance_last, distance_first = distance_first, distance_last\n                                else:\n                                    if mode_first == 'U':\n                                        if distance_first > distance_last:\n                                            distance_last, distance_first = distance_first, distance_last\n\n    for i in range(n):\n        if mode_last[i]!= mode_first[i]:\n            if mode_last[i] == 'L':\n                if distance_last < distance_first:\n                    distance_last, distance_first = distance_first, distance_last\n            else:\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Computes the solution to the problem\n\n    Parameters\n    ----------\n    stdin : str\n        The standard input of the problem\n\n    Returns\n    -------\n    str\n        The solution to the problem\n    \"\"\"\n\n    stdin = stdin.split('\\n')\n    n = int(stdin[0])\n    xs = [int(x) for x in stdin[1].split(' ')]\n    ys = [int(y) for y in stdin[2].split(' ')]\n\n    positions = []\n    for x, y in zip(xs, ys):\n        positions.append((x, y))\n\n    robot_arms = []\n    for i in range(n + 1):\n        robot_arms.append(RobotArm(i))\n\n    for i in range(n):\n        robot_arms[i].set_mode(stdin[3 + i])\n        robot_arms[i].set_position(positions[i])\n\n    m = 0\n    for i in range(n + 1):\n        if robot_arms[i].get_mode() == 'U':\n            for j in range(m + 1, i + 1):\n                robot_arms[j].set_position((0, 0))\n            m = i\n\n        elif robot_arms[i].get_mode() == 'R':\n            for j in range(m + 1, i + 1):\n                robot_arms[j].set_position((xs[j - 1], ys[j - 1]))\n            robot_arms[i].set_position((xs[i], ys[i]))\n            m = i\n\n        elif robot_arms[i].get_mode() == 'L':\n            for j in range(m + 1, i + 1):\n                robot_arms[j].set_position((xs[j - 1] - ys[j - 1], ys[j - 1]))\n            robot_arms[i].set_position((xs[i] - ys[i], ys[i]))\n            m = i\n\n        elif robot_arms[i].get_mode() == 'D':\n            for j in range(m + 1, i + 1):\n                robot_arms[j].set_position((xs[j - 1], ys[j - 1] - ys[j - 1]))\n            robot_arms[i].set_position((xs[i], ys[i] - ys[i]))\n            m = i\n\n    moves = []\n    for i in range(n):\n        moves.append(robot_arms[i + 1].get_moves())\n\n    return '\\n'.join(moves)\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    M, D = input().split(' ')\n    M = int(M)\n    D = list(map(int, D.split(' ')))\n    U = stdin.split(' ')\n    ans = []\n    for i in range(M):\n        if U[i] == 'U':\n            ans.append(D[i] * 'U')\n        elif U[i] == 'D':\n            ans.append(D[i] * 'D')\n        elif U[i] == 'R':\n            ans.append(D[i] * 'R')\n        elif U[i] == 'L':\n            ans.append(D[i] * 'L')\n    return''.join(ans)\n    '''\n    M = int(input())\n    Xs = list(map(int, input().split(' ')))\n    Ys = list(map(int, input().split(' ')))\n    Ds = list(map(int, input().split(' ')))\n    Moves = {\n        'U': lambda x, y: (x, y - 1),\n        'D': lambda x, y: (x, y + 1),\n        'R': lambda x, y: (x + 1, y),\n        'L': lambda x, y: (x - 1, y),\n    }\n    ans = []\n    for i in range(M):\n        x, y = Xs[i], Ys[i]\n        for j in range(M - 1, i - 1, -1):\n            mode = Ds[j]\n            x, y = Moves[mode](x, y)\n            ans.append(mode)\n        ans.append(mode)\n    return''.join(ans)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 455,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    length = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1].strip()\n    filler = []\n    # \u043d\u0430\u0445\u043e\u0434\u0438\u043c \u0432\u0441\u0435 \u0441\u043b\u043e\u0432\u0430 \u0432 \u0444\u0440\u0430\u0437\u0435 \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0435\u0441\u0442\u044c ogo \u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0438\u0445 \u0432 \u0441\u043f\u0438\u0441\u043e\u043a filler\n    for i in range(len(s)):\n        if s[i:i+3] == \"ogo\":\n            filler.append(s[i:i+3])\n    # \u0437\u0430\u043c\u0435\u043d\u044f\u0435\u043c \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u043d\u0430 \u043d\u0443\u0436\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432 \u0442\u0440\u0438 \u0437\u0432\u0435\u0437\u0434\u043e\u0447\u043a\u0438\n    print(len(filler)*3)\n    for i in range(len(s)):\n        if s[i:i+3] == \"ogo\":\n            s = s[:i] + \"***\" + s[i+3:]\n    return s\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # stdin = stdin.replace(' ', '').replace('\\n', '')\n    stdin = re.sub('[^a-zA-Z]+', '', stdin)\n    # stdin = stdin.replace('ogog', '***').replace('ogog', '***').replace('ogog', '***')\n    print(re.sub('(ogo)+', '***', stdin))\n\nsolution(stdin)\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    length = int(stdin)\n    s = stdin.replace('o', '*')\n    return s[0:length]\n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.replace('ogogo', '***')\n    stdin = stdin.replace('ogo', '**')\n    stdin = stdin.replace('og', '*')\n    return stdin\n\n\nprint(solution(input()))"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    text = stdin\n    polycarp = 'ogo'\n    solution_txt = ''\n    \n    filler_words = []\n    \n    # Create a list of words that can be formed by replacing ogo with go\n    for letter in polycarp:\n        new_word = polycarp[:letter] + polycarp[letter+1:]\n        if new_word!= polycarp:\n            filler_words.append(new_word)\n    \n    # Replace each of the filler words with 3 asterisks\n    for filler_word in filler_words:\n        solution_txt += text.replace(filler_word, '***')\n    \n    # Return the result\n    return solution_txt\n    \n    \n"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    string = stdin.replace(' ', '')\n    words = []\n    for i in range(n):\n        word = string[i:n]\n        if word == word[::-1]:\n            words.append(word)\n    if len(words) > 0:\n        result = words[0]\n        for i in range(1, len(words)):\n            result += '***'\n        return result\n    else:\n        return '***'\n\n\ndef"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    fillers = stdin.replace('o', 'ogo').replace('g', 'og')\n    return fillers.replace('o', '***').replace('g', '***')\n\n\ndef"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport re\nimport sys"
    },
    {
        "number": 456,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    n = int(lines[0])\n    s = lines[1]\n    t = lines[2]\n    return t.translate(s.maketrans(dict.fromkeys(s, \"*\" * 3)))\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, n = map(int, stdin.split())\n    def g(n, p):\n        return p ** (n - 1) % MOD\n\n    def f(x, y):\n        res = 1\n        while y > 0:\n            if y % 2 == 1:\n                res = (res * g(y, p)) % MOD\n            y //= 2\n            p = (p * p) % MOD\n        return res\n\n    res = f(x, n)\n    return str(res)\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, n = map(int, stdin.split())\n    \n    def g(x, p):\n        for i in range(1, len(str(x))+1):\n            if x % p ** i == 0:\n                return p ** i\n    \n    def f(x, y):\n        return prod(list(map(g, range(x, x+1, y), [p for p in range(2, x+1) if x % p == 0]))) % (10**9 + 7)\n    \n    return str(reduce(lambda a, b: a * b, [f(x, i) for i in range(1, n+1)]))\n\n\ndef"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x, n = map(int, stdin.split())\n    res = 1\n    for i in range(1, n+1):\n        res *= x\n        res %= 10 ** 9 + 7\n    return res"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('20190929 1605')\n    '363165664'\n    \"\"\"\n    x, n = map(int, stdin.split())\n\n    primes = sieve_of_eratosthenes(10**9 + 7)\n    result = 1\n    for p in primes:\n        result *= f(x, p, n) % (10**9 + 7)\n\n    return str(result)\n\n\ndef"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\nfrom math import gcd\nfrom functools import reduce\nfrom collections import deque\n\n\ndef"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x, n = map(int, stdin.split())\n    mod = int(1e9) + 7\n    res = 1\n    for i in range(1, n+1):\n        res *= x\n        res %= mod\n    return str(res)\n\nprint(solution('2 10'))\nprint(solution('947 987654321987654321'))\nprint(solution('947 987654321987654321'))\n\n\n\n\n\n'''\n\ndef"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x, n = map(int, stdin.split())\n    \n    def g(x, p):\n        k = 0\n        while x % p ** (k + 1) == 0:\n            k += 1\n        return p ** k\n    \n    # MAX = 10 ** 9 + 7\n    # ans = 1\n    # for p in prime(x):\n    #     ans *= g(x, p) ** n\n    #     ans %= MAX\n    \n    ans = 1\n    for p in prime(x):\n        ans *= g(x, p) ** n\n        ans %= 10 ** 9 + 7\n    \n    return str(ans)\n\nprime(x) -> set(prime(x))\n\nfrom math import sqrt\n\ndef"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x, n = map(int, stdin.split())\n    result = 1\n    for i in range(2, n + 1):\n        result = (result * f(x, i)) % (10 ** 9 + 7)\n    return str(result)\n"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\"\"\"\n\n\n\ndef"
    },
    {
        "number": 457,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, n = map(int, stdin.split('\\n')[0].split(' '))\n    ret = 0\n    for i in range(1, n + 1):\n        ret = (ret + (x ** i) // math.factorial(i)) % (10 ** 9 + 7)\n    print(ret)\n    return ret\n\"\"\"\n\n\"\"\"\n-----SOLUTION-----\n\nimport math\n\ndef"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    counter = 0\n    for x in range(1, 10 ** 9 + 1):\n        if a * (b ** (x - 1)) + c == sum([int(y) for y in str(x)]):\n            counter += 1\n            if counter == b:\n                return str(counter)\n            print(x)\n    return str(counter)\n"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    a, b, c = list(map(int, stdin.split()))\n    x = []\n    \n    for i in range(1, 10000000):\n        if (c - i**b) / a < 0:\n            break\n        if (c - i**b) % a == 0:\n            x.append(i)\n            \n    return str(len(x)) + '\\n' + '\\n'.join(str(n) for n in x)\n    "
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split()\n    a = int(input[0])\n    b = int(input[1])\n    c = int(input[2])\n    n = 0\n    s = 0\n    s = (a*b**c - 1)*(b**c + 1)\n    for i in range(1, s):\n        s = i\n        for x in str(i):\n            s += int(x)\n        if(s == 10**9):\n            n += 1\n            if(n <= 3):\n                print(i)\nsolution(str(input()))"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    print(s(a, b, c))\n    return '\\n'.join(map(str, solve(a, b, c)))\n\n\ndef"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds number of solutions for the equation and return the solutions\"\"\"\n    a, b, c = [int(x) for x in stdin.split()]\n    s = str\n    res = []\n    for i in range(1, 10 ** 9):\n        if a * i ** b + c == s(i):\n            res.append(i)\n    return str(len(res)) + '\\n' + '\\n'.join(map(str, res))\n"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n\n    def s(x):\n        return sum(int(i) for i in str(x))\n\n    x = 0\n    while (a * s(x)) ** b + c <= 10 ** 9:\n        if (a * s(x)) ** b + c >= 10 ** 9:\n            break\n        x += 1\n    return x\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    #parse input\n    a, b, c = stdin.split(\" \")\n    a = int(a)\n    b = int(b)\n    c = int(c)\n\n    #calculate solutions\n    max_solution = 10**9\n    solution_list = []\n    for x in range(max_solution + 1):\n        solution = b * sum([int(i) for i in list(str(x))])**a + c\n        if solution > 0 and solution < max_solution:\n            solution_list.append(solution)\n    solution_list.sort()\n    \n    #print solution\n    print(len(solution_list))\n    for x in solution_list:\n        print(x)\n    return \n"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(x) for x in stdin.split(' ')]\n    solve(a, b, c)\n    return \"0\"\n    # your solution"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split(' '))\n    print(solution_main(a, b, c))\n\ndef"
    },
    {
        "number": 458,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return \"0\""
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(x) for x in stdin.strip().split()]\n    return \"NO\" if a[:7]!= a[7:] or a.count(1)!= 4 or a.count(2)!= 4 or a.count(3)!= 4 or a.count(4)!= 4 or a.count(5)!= 4 or a.count(6)!= 4 else \"YES\""
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    arr = list(map(int, stdin.split()))\n    \n    for i in range(1, 5):\n        for j in range(1, 5):\n            if arr.count(i) == 4 or arr.count(j) == 4:\n                print(\"YES\")\n                return\n\n    print(\"NO\")\n    return\n"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5 3 5 3 2 5 2 5 6 2 6 2 4 4 4 4 1 1 1 1 6 3 6 3\")\n    'YES'\n    >>> solution(\"5 2 5 6 2 6 2 4 4 4 1 1 1 1 6 3 6 3\")\n    'NO'\n    \"\"\"\n    cube = [int(x) for x in stdin.split(\" \")]\n    sides = list(set(cube))\n    print(sides)\n    # sides = {5, 2, 6, 4, 1, 3}\n    # sides = {1, 2, 3, 4, 5, 6}\n    # sides = {1, 2, 3, 4, 5, 6, 7, 8}\n    # sides = {1, 2, 3, 4, 5, 6, 7, 8, 9}\n    # sides = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n    # sides = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}\n    # sides = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24}\n    # sides = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36}\n    # sides = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64}\n    # sides = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530,"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    res = \"\"\n    \n    arr = [int(i) for i in stdin.split(\" \")]\n    \n    colors = dict(Counter(arr))\n    \n    res = \"NO\" if colors[4] > 1 or colors[5] > 1 or colors[6] > 1 or colors[1] > 1 or colors[2] > 1 or colors[3] > 1 else \"YES\"\n    \n    return res"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(x) for x in stdin.split()]\n    result = False\n    for i in range(len(a)):\n        if a[i] == 1 and a[(i + 1) % len(a)] == 2 and a[(i + 2) % len(a)] == 3 and a[(i + 3) % len(a)] == 4 and a[\n            (i + 4) % len(a)] == 5:\n            result = True\n    if result:\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # replace this for solution\n    return stdin\n"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    A = [int(i) for i in stdin.split(\" \")]\n    N = len(A)\n    if N == 24:\n        cube = [[A[i + j * 3] for i in range(3)] for j in range(2)]\n    else:\n        cube = [[A[i + j * 4] for i in range(4)] for j in range(2)]\n    for _ in range(2):\n        for _ in range(4):\n            for i in range(3):\n                cube[0][i] = 0 if cube[0][i] == 1 else 1\n                cube[1][i] = 0 if cube[1][i] == 2 else 1\n            for i in range(3):\n                cube[0][i] = 0 if cube[0][i] == 2 else 1\n                cube[1][i] = 0 if cube[1][i] == 1 else 1\n            cube[0][0] = 0 if cube[0][0] == 1 else 1\n            cube[1][0] = 0 if cube[1][0] == 2 else 1\n            cube[0][2] = 0 if cube[0][2] == 2 else 1\n            cube[1][2] = 0 if cube[1][2] == 1 else 1\n        for i in range(4):\n            cube[0][i] = 0 if cube[0][i] == 3 else 1\n            cube[1][i] = 0 if cube[1][i] == 4 else 1\n        for i in range(4):\n            cube[0][i] = 0 if cube[0][i] == 4 else 1\n            cube[1][i] = 0 if cube[1][i] == 3 else 1\n    if cube == [[1, 1, 1, 1], [1, 1, 1, 1]]:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    cube = [int(x) for x in stdin.split()]\n    nums = []\n    for i in range(0, 16):\n        if cube[i] not in nums:\n            nums.append(cube[i])\n    if len(nums)!= 4:\n        return \"NO\"\n    front = []\n    back = []\n    left = []\n    right = []\n    for i in range(0, 4):\n        front.append(cube[i])\n    for i in range(16, 20):\n        back.append(cube[i])\n    for i in range(20, 24):\n        left.append(cube[i])\n    for i in range(24, 32):\n        right.append(cube[i])\n    if sorted(front)!= [1, 2, 3, 4]:\n        return \"NO\"\n    if sorted(back)!= [1, 2, 3, 4]:\n        return \"NO\"\n    if sorted(left)!= [1, 2, 3, 4]:\n        return \"NO\"\n    if sorted(right)!= [1, 2, 3, 4]:\n        return \"NO\"\n    return \"YES\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 459,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    cube = [int(num) for num in stdin.split()]\n    print(cube)\n    for i in range(0, len(cube) - 1, 6):\n        if cube[i] == cube[i + 1] == cube[i + 2] == cube[i + 3] == cube[i + 4] == cube[i + 5]:\n            return 'YES'\n    return 'NO'\n\n\ndef"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the smallest number of successful hacks needed in order to achieve the\n    Codecraft-17 T-shirt award, ensuring that the current round is also won.\n    \"\"\"\n    p, x, y = [int(x) for x in stdin.split()]\n    i = (p // 50) % 475\n    while 25 > 0:\n        i = (i * 96 + 42) % 475\n        print(26 + i)\n        if 26 + i >= y:\n            return str(25 - (i - (y - 26) * 96) // 96)\n        else:\n            i += 96\n            y -= 26\n            i += 26\n            y += 26\n    return '0'\n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    points = int(stdin.split()[0])\n    x = int(stdin.split()[1])\n    y = int(stdin.split()[2])\n    \n    count = 0\n    i = (points // 50) % 475\n    while i!= 1:\n        count += 1\n        i = (i * 96 + 42) % 475\n    \n    return count\n    \n\nprint(solution('239 10880 9889'))\n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split(' ')\n    p = int(a[0])\n    x = int(a[1])\n    y = int(a[2])\n    while True:\n        k = (x % 50) // 25\n        for i in range(25):\n            print(26 + i * 96 + 42)\n            if k == i:\n                x -= (k * 96 + 42)\n                break\n        if k == i:\n            break\n    return str(x // 50 + k)\n\nprint(solution('239 10880 9889'))\nprint(solution('26 7258 6123'))\nprint(solution('493 8000 8000'))\nprint(solution('329 19913 19900'))\n\n\n\ndef"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s, x, y = [int(v) for v in stdin.split(' ')]\n\n    p = (s // 50) % 475\n\n    i = (p * 96 + 42) % 475\n\n    for _ in range(25):\n        i = (i * 96 + 42) % 475\n\n        if i < 26:\n            return str(i + 26 - y)\n\n    return str(i + y - 26)\n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    p, x, y = map(int, stdin.split())\n    x = x - y\n    i = (x//50)%475\n    while i < (y+25)%475:\n        i = (i*96+42)%475\n        print(26+i)\n    return ''\n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    p, x, y = [int(x) for x in stdin.split()]\n    \n    i = (p // 50) % 475\n    print(26 + i)\n    print('HACK')\n    \n    for i in range(25):\n        i = (i * 96 + 42) % 475\n        print(26 + i)\n        print('HACK')\n    \n    return ''\n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def get_result(s: int, y: int, z: int) -> int:\n        total = 0\n        for i in range(25):\n            total += ((s // 50) % 475 + 42) % 475\n            s //= 96\n            if total >= y:\n                return i + 1\n\n        for i in range(25):\n            total += ((total * 96 + 42) % 475) % 475\n            if total >= z:\n                return i + 1\n\n        return 25\n\n    p, x, y = list(map(int, stdin.split()))\n    return get_result(p, x, y)\n\n\"\"\""
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(i) for i in stdin.split(' ')]\n    print(min(a // c, b // (c + 50), b // c, c // (b + 50)))\n    return ''\n"
    },
    {
        "number": 460,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    points, current_score, minimum_required = [int(i) for i in stdin.split()]\n    current_score_hacks = 0\n    for i in range(25):\n        current_score_hacks += (points // 500) * 96 + 42\n        print(26 + current_score_hacks % 475)\n    while current_score < minimum_required:\n        current_score_hacks += (points // 500) * 96 + 42\n        print(26 + current_score_hacks % 475)\n        points -= 50\n        current_score += 50\n    return current_score_hacks\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    length_of_paths = []\n    count_of_meetings = int(stdin.readline())\n    count = 0\n    while count < count_of_meetings:\n        length_of_paths.append([int(x) for x in stdin.readline().split()])\n        count += 1\n    distance_from_home = 0\n    for i in range(len(length_of_paths)):\n        if i == 0:\n            distance_from_home += length_of_paths[0][0]\n        elif i == 1:\n            distance_from_home += length_of_paths[1][0]\n        elif i == 2:\n            distance_from_home += length_of_paths[2][0]\n    distance_from_home = distance_from_home / 3\n    return distance_from_home\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    a = int(stdin[1])\n    b = int(stdin[2])\n    c = int(stdin[3])\n    return str(a + b + c)\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a, b, c = map(int, stdin.split('\\n')[1:4])\n    if n == 1:\n        return 0\n    if n % a == 0:\n        return n * b + c\n    return n * b + (n % a) * c + a\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(n) for n in stdin.split('\\n')]\n    a = min(a, b, c)\n    b = max(a, b, c)\n    c = max(a, b, c)\n    return str(c - b)\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    #...\n    return \"something\"\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    if n == 1:\n        return 0\n    a, b, c = [int(x) for x in stdin.readline().split()]\n    return max(a + b, b + c, c + a)\n"
    },
    {
        "number": 461,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x1, x2, x3 = map(int, stdin.split(' '))\n    return min(x1 + x3, x2 + x3, x2 + x1, x3 + x1) - max(x1, x2, x3)\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''Calculates the minimum distance needed to travel for the friends to meet.\n    \n    Args:\n        stdin: String. Input of the format:\n        x_1 y_1\n        x_2 y_2\n        x_3 y_3\n    \n    Returns:\n        String. Output of the minimum distance needed to travel for the friends to meet.\n    '''\n    x_1, y_1 = map(int, stdin.split(' '))\n    x_2, y_2 = map(int, stdin.split(' '))\n    x_3, y_3 = map(int, stdin.split(' '))\n    return int(abs(x_2 - x_1) + abs(y_2 - y_1) + abs(x_1 - x_3) + abs(y_1 - y_3) - max(abs(x_2 - x_3), abs(y_2 - y_3)))\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x1, x2, x3 = [int(x) for x in stdin.split()]\n    return str(min(x2 - x1, x3 - x2) + min(x1 - x3, x3 - x1))\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x1, x2, x3 = list(map(int, stdin.split()))\n    return str(min(x1 + x2, x1 + x3, x3 + x2))\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x_1, x_2, x_3 = map(int, stdin.split())\n    \n    distance = min(x_1, x_2, x_3) - max(x_1, x_2, x_3)\n    if distance < 0:\n        distance = 0\n    return str(distance)\n'''\nimport sys\nimport math\ndef"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x1, x2, x3 = [int(x) for x in stdin.split(' ')]\n    return str(max(x1, x2, x3) - min(x1, x2, x3))\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    x1, x2, x3 = [int(n) for n in stdin.split()]\n    distance = max(x1, x2, x3)\n    return distance\n\ndef"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x_1, x_2, x_3 = map(int, stdin.split())\n    distance_a = abs(x_1 - x_2)\n    distance_b = abs(x_2 - x_3)\n    distance_c = abs(x_1 - x_3)\n    return min(distance_a + distance_b, distance_a + distance_c, distance_b + distance_c)\n"
    },
    {
        "number": 462,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x_1, x_2, x_3 = map(int, stdin.split())\n    # a, b, c = x_1, x_2, x_3\n    # print(a, b, c)\n    # print(abs(a - b) + abs(b - c) + abs(c - a))\n    # return abs(a - b) + abs(b - c) + abs(c - a)\n    return min(abs(x_1 - x_2), abs(x_1 - x_3), abs(x_2 - x_3))\n\n----\ndef"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split('\\n')[0].split())\n    a = list(map(int, stdin.split('\\n')[1].split()))\n\n    result = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] & x == a[j] & x:\n                result += 1\n    return '-1' if result < 2 else result\n\nprint(solution(input()))\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def solve(stdin):\n        n, x = list(map(int, stdin.split(\" \")))\n        arr = list(map(int, stdin.split(\" \")))\n\n        arr.sort()\n\n        count = 0\n\n        for i in range(1, n):\n            if arr[i - 1] & x == arr[i] & x:\n                count += 1\n        return count\n\n    return solve(stdin)\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    l = []\n    for i in range(n):\n        if a[i] == x:\n            l.append(i)\n    count = 0\n    if len(l) == 0:\n        print(-1)\n    else:\n        for i in range(len(l)):\n            if i+1 < len(l) and i < len(l)-1:\n                if l[i] == l[i+1] or l[i] == l[i-1]:\n                    count += 1\n            elif i == len(l)-1:\n                if l[i] == l[i-1]:\n                    count += 1\n            else:\n                if l[i] == l[i+1]:\n                    count += 1\n        print(count)\n    return\n\n\ndef"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, x = [int(x) for x in stdin.split(' ')]\n    a = [int(x) for x in stdin.split(' ')]\n    equal_elements = 0\n    min_operations = float('inf')\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] == a[j]:\n                equal_elements += 1\n    if equal_elements > 1:\n        min_operations = 0\n    elif equal_elements == 0:\n        min_operations = -1\n    return min_operations\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds out if it is possible to have at least two pairs of equal elements in an array.\n\n    >>> solution('4 3\\n1 2 3 7')\n    1\n\n    >>> solution('2 228\\n1 1')\n    0\n\n    >>> solution('3 7\\n1 2 3')\n    -1\n\n    :param stdin: The standard input.\n    :return: The answer to the problem.\n    \"\"\"\n    n, x = [int(i) for i in stdin.split('\\n')[0].split()]\n    arr = [int(i) for i in stdin.split('\\n')[1].split()]\n\n    return 'yes' if len(set(arr)) < n or \\\n        (len(set(arr)) == n and any(arr[i] & x == x for i in range(len(arr)))) else 'no'"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    stdin = stdin.split()\n    n, x = map(int, stdin[0:2])\n    arr = list(map(int, stdin[2:]))\n    arr.sort()\n    first_equal = 0\n    last_equal = 0\n    equal_num = 0\n    num_operations = 0\n    for i in range(n):\n        if arr[i] == x:\n            equal_num += 1\n            first_equal = i\n        elif arr[i]!= x:\n            last_equal = i\n            num_operations += (last_equal - first_equal + 1) // 2\n    if equal_num == 0:\n        return '-1'\n    else:\n        return str(num_operations)\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n'''\n\n\nimport sys\n\nn, x = [int(x) for x in input().split(' ')]\na = [int(x) for x in input().split(' ')]\n\ndef"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, x = [int(i) for i in stdin.split(\" \")]\n    a = [int(i) for i in stdin.split(\" \")]\n    count = 0\n    for i in range(n):\n        if a[i] == x:\n            count += 1\n    if count == 0:\n        return \"-1\"\n    elif count == 1:\n        return \"0\"\n    elif count == 2:\n        return \"1\"\n    else:\n        return \"2\"\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return '{}'\n"
    },
    {
        "number": 463,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\nInput\n3 7\n1 2 3\n\nOutput\n-1\n\nInput\n2 228\n1 1\n\nOutput\n0\n\nInput\n3 7\n1 2 3\n\nOutput\n-1\n\n\"\"\"\n\n\n\ndef"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\"\"\""
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    h, w = list(map(int, stdin.split(' ')))\n    grid = []\n    for i in range(h):\n        grid.append(list(stdin[i * w : (i + 1) * w]))\n\n    def get_vertical_lines(grid: list) -> dict:\n        result = {}\n        for row in range(len(grid)):\n            for col in range(len(grid[row])):\n                if grid[row][col] == \".\":\n                    continue\n                if grid[row][col] == \"*\":\n                    if row - 1 in result:\n                        result[row - 1].append(col)\n                    else:\n                        result[row - 1] = [col]\n        return result\n\n    def get_horizontal_lines(grid: list) -> dict:\n        result = {}\n        for row in range(len(grid)):\n            for col in range(len(grid[row])):\n                if grid[row][col] == \".\":\n                    continue\n                if grid[row][col] == \"*\":\n                    if col - 1 in result:\n                        result[col - 1].append(row)\n                    else:\n                        result[col - 1] = [row]\n        return result\n\n    def check_lines(lines: dict, rows: int, cols: int) -> bool:\n        for row, cols in lines.items():\n            if len(cols) < rows:\n                return False\n            for col in cols:\n                if col < cols[0] or col > cols[-1]:\n                    return False\n        return True\n\n    if check_lines(get_horizontal_lines(grid), h, w) and check_lines(get_vertical_lines(grid), w, h):\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def has_shape(picture: str) -> str:\n        \"\"\"\n        This function checks if the given picture has single \"+\" shape.\n        \"\"\"\n        # For each line of the picture, check the left and right border.\n        # If the border is '*', it's considered part of the shape.\n        # If the border is '.', it's considered not part of the shape.\n        for line in picture:\n            if '*' in line[0] + line[-1] or '*' in line[1] + line[-2]:\n                return 'YES'\n            if '*' in line[1] + line[-1]:\n                return 'YES'\n            if '*' in line[1] + line[-1] or '*' in line[1] + line[-2]:\n                return 'YES'\n        return 'NO'\n\n    picture = stdin\n    return has_shape(picture)\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # get data\n    h, w = map(int, stdin.readline().split())\n    picture = [list(stdin.readline()) for _ in range(h)]\n\n    # your code here\n    for i in range(h):\n        for j in range(w):\n            if picture[i][j] == '.':\n                continue\n            if j == w-1:\n                return 'NO'\n            else:\n                if picture[i][j+1] == '*':\n                    continue\n                else:\n                    return 'NO'\n    return 'YES'"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = [s for s in stdin.split()]\n    h, w = a[0], a[1]\n    s = [s for s in stdin.split('\\n')]\n    if len(s[0]) == 0:\n        return \"YES\"\n    if len(s[-1]) == 0:\n        return \"NO\"\n    if len(s[0]) == w:\n        return \"YES\"\n    for i in range(h):\n        s[i] = s[i].replace('*', '1')\n        s[i] = s[i].replace('.', '0')\n        for j in range(w):\n            if s[i][j] == '1':\n                if j!= 0 and s[i][j - 1] == '1':\n                    pass\n                elif j!= w - 1 and s[i][j + 1] == '1':\n                    pass\n                elif i!= 0 and s[i - 1][j] == '1':\n                    pass\n                elif i!= h - 1 and s[i + 1][j] == '1':\n                    pass\n                else:\n                    return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n  \n  width, height = map(int, stdin.split(' '))\n  \n  # create array to hold cells\n  grid = []\n  for _ in range(height):\n    grid.append(list(stdin))\n  \n  # find center\n  center = (height - 1, width // 2)\n  \n  # check if there is a single \"+\" shape\n  if not check_if_single_plus(center, grid):\n    return 'NO'\n  \n  # get horizontal and vertical branches\n  horizontal, vertical = get_horizontal_and_vertical_branches(center, grid)\n  \n  # check if horizontal or vertical branches do not contain '.'\n  for branch in [horizontal, vertical]:\n    if branch[0]!= '.':\n      return 'NO'\n  \n  # check if horizontal branch is consecutive\n  if not check_if_consecutive(horizontal):\n    return 'NO'\n  \n  # check if vertical branch is consecutive\n  if not check_if_consecutive(vertical):\n    return 'NO'\n  \n  return 'YES'\n    \ndef"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('5 6\\n......\\n..*...\\n.****.\\n..*...\\n..*...')\n    'YES'\n    >>> solution('3 5\\n..*..\\n****.\\n.*...')\n    'NO'\n    >>> solution('7 7\\n.......\\n...*...\\n..****.\\n...*...\\n...*...\\n.......\\n.*.....')\n    'NO'\n    \"\"\"\n    h, w = map(int, stdin.split())\n    matrix = [stdin.split('\\n')[1:]]\n    for _ in range(h - 1):\n        matrix.append(stdin.split('\\n')[1:])\n    c = 0\n    if w!= 0:\n        for row in matrix:\n            for cell in row:\n                c += cell.count('*')\n    if c == 0 or c % 2!= 0:\n        return 'NO'\n    for row in matrix:\n        for i in range(len(row)):\n            if i!= len(row) - 1 and row[i] == row[i + 1]:\n                continue\n            if row[i]!= '*':\n                break\n            else:\n                return 'NO'\n    for j in range(w):\n        for row in matrix:\n            if row[j]!= '*':\n                break\n            else:\n                return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    h, w = map(int, stdin.split())\n    line = stdin.split('\\n')\n    pic = []\n    for i in range(h):\n        pic.append(list(line[i]))\n    has = False\n    for i in range(h):\n        for j in range(w):\n            if i > 0 and j > 0 and i < h - 1 and j < w - 1 and pic[i][j] == '.' and pic[i - 1][j] == '.' and pic[i + 1][j] == '.' and pic[i][j - 1] == '.' and pic[i][j + 1] == '.':\n                has = True\n                break\n            if has:\n                break\n        if has:\n            break\n    if has:\n        print('YES')\n    else:\n        print('NO')\n    return ''"
    },
    {
        "number": 464,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    size_of_picture = [int(i) for i in stdin.split()]\n    pattern = ['*'] * size_of_picture[0]\n    if len(pattern) == len(pattern[0]):\n        return 'YES'\n    return 'NO'\n\n\ndef"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def make_matrix(n: int, a: int, b: int) -> list:\n        matrix = [[0 for _ in range(n)] for _ in range(n)]\n        for i in range(n):\n            for j in range(i + 1, n):\n                if i % 2 == 0:\n                    if j % 2 == 0:\n                        matrix[i][j] = b\n                    else:\n                        matrix[i][j] = a\n                else:\n                    if j % 2 == 0:\n                        matrix[i][j] = a\n                    else:\n                        matrix[i][j] = b\n        return matrix\n\n    matrix = make_matrix(int(stdin.split()[0]), int(stdin.split()[1]), int(stdin.split()[2]))\n    for i in range(len(matrix)):\n        print(\"\".join([str(j) for j in matrix[i]]))\n    return \"YES\" if len(set(sum(matrix, []))) == 1 else \"NO\"\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 1 2\n   ... 3 1 2''')\n    'YES'\n    \"\"\"\n    n, c, t = map(int, stdin.split())\n    if (n * (n - 1) // 2) < c:\n        print('NO')\n    else:\n        g = [[0 for _ in range(n)] for _ in range(n)]\n        for _ in range(c):\n            a, b = map(int, stdin.split())\n            a -= 1\n            b -= 1\n            g[a][b] = g[b][a] = 1\n        g_inv = [[0 for _ in range(n)] for _ in range(n)]\n        for i in range(n):\n            g_inv[i][i] = 1\n        for row in g:\n            if row!= g_inv[row]:\n                print('NO')\n                break\n        else:\n            print('YES')\n            print(*map(''.join, zip(*g)), sep='\\n')\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = [int(x) for x in stdin.split(\" \")]\n    if a > n or b > n or a + b > n:\n        return \"NO\"\n    \n    graph = [[0 for _ in range(n)] for _ in range(n)]\n    for _ in range(a):\n        x, y = [int(x) for x in stdin.split(\" \")]\n        graph[x-1][y-1] = 1\n        graph[y-1][x-1] = 1\n\n    for _ in range(b):\n        x, y = [int(x) for x in stdin.split(\" \")]\n        graph[x-1][y-1] = 1\n        graph[y-1][x-1] = 0\n\n    for i in range(n):\n        for j in range(n):\n            if graph[i][j] == 1 and graph[j][i] == 1:\n                graph[i][j] = 1\n                graph[j][i] = 1\n\n    if not graph:\n        return \"NO\"\n    print(\"YES\")\n    for row in graph:\n        print(\" \".join([str(x) for x in row]))\n    return \"YES\"\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = [int(i) for i in stdin.split(' ')]\n    if n < 3:\n        return 'NO'\n    adj = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            adj[i][j] = (i + 1) * (j + 1) % 10\n    cnt = [0 for _ in range(n)]\n    for i in range(n):\n        cnt[i] = sum(adj[i])\n    for _ in range(a - 1):\n        c = cnt.copy()\n        for i in range(n):\n            for j in range(n):\n                if c[j] - 1 > 0:\n                    c[j] -= 1\n                else:\n                    adj[i][j] = 0\n        for i in range(n):\n            cnt[i] = sum(adj[i])\n    for _ in range(b):\n        c = cnt.copy()\n        for i in range(n):\n            for j in range(n):\n                if c[j] == 1:\n                    adj[i][j] = 0\n                    c[j] = 0\n                else:\n                    adj[i][j] = 1\n                    c[j] -= 1\n        for i in range(n):\n            cnt[i] = sum(adj[i])\n    for i in range(n):\n        if cnt[i]!= 0:\n            return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = list(map(int, stdin.split()))\n    \n    if a == 0 and b == 0:\n        return \"YES\"\n    \n    if a > n or b > n:\n        return \"NO\"\n    \n    A = [[0 for i in range(n)] for j in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if i!= j:\n                A[i][j] = int(stdin[i + j])\n                \n    # print(A)\n    \n    l = list(range(n))\n    ind = l.copy()\n    \n    while ind:\n        \n        for i in ind:\n            for j in l:\n                if A[i][j] == 1:\n                    A[i][j] = 0\n                    A[j][i] = 0\n                    ind = ind.remove(i)\n                    ind = ind.remove(j)\n                    break\n                \n        # print(ind)\n        \n    # print(A)\n    \n    if a == len(ind) and b == len(l) - len(ind):\n        return \"YES\"\n    \n    return \"NO\"\n    \n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n, a, b = [int(x) for x in stdin.split()]\n    adj_matrix = []\n    for i in range(n):\n        row = [0] * n\n        adj_matrix.append(row)\n    # \u5c07\u5169\u500b\u8981\u6bd4\u8f03\u7684\u89d2\u843d\u7684\u7d22\u5f15\u653e\u5728\u540c\u4e00\u500blist\u4e2d\n    # \u89d2\u843d\u4e00\u7684\u7d22\u5f15\u662fi, \u4e8c\u7684\u7d22\u5f15\u662fj\n    # \u89d2\u843d\u4e00\u7684\u7d22\u5f15\u662fi+1, \u4e8c\u7684\u7d22\u5f15\u662fj+1\n    i_j_list = []\n    for i in range(n):\n        for j in range(n):\n            if i + 1 < n and j + 1 < n:\n                i_j_list.append([i, j, i + 1, j + 1])\n    for i, j, a, b in i_j_list:\n        adj_matrix[i][j] = 1\n        adj_matrix[j][i] = 1\n        adj_matrix[a][b] = 1\n        adj_matrix[b][a] = 1\n    # \u5f9e\u503c\u5f97\u9a57\u8b49\u7684\u4f8b\u5b50\u800c\u9a57\u8b49\n    # adj_matrix[0][1] = 1\n    # adj_matrix[0][2] = 1\n    # adj_matrix[1][0] = 1\n    # adj_matrix[1][2] = 1\n    # adj_matrix[2][0] = 1\n    # adj_matrix[2][1] = 1\n    # \u6aa2\u67e5\u77e9\u9663\u4e2d\u662f\u5426\u6709\u76f8\u540c\u7684\u503c\uff0c\u6709\u7684\u8a71\u5c31\u4e0d\u884c\u4e86\n    # for i in range(n):\n    #     for j in range(n):\n    #         if i < n and j < n and adj_matrix[i][j] == 1:\n    #             if adj_matrix[i][j]!= adj_matrix[j][i]:\n    #                 return \"NO\"\n    # return \"YES\"\n    \n    for i in range(n):\n        for j in range(n):\n            if i < n and j < n and adj_matrix[i][j] == 1:\n                for k in range(n):\n                    if i < n and j < n and adj_matrix[i][k] == 1 and adj_matrix[k][j] == 1:\n                        return \"NO\"\n    return \"YES\"\n    '''\n    # \u4e00\u500b\u89e3\n    n, a, b = [int(x) for x in stdin.split()]\n    adj_matrix = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if i < n and j < n:\n                adj_matrix[i][j] = 1\n    # adj_matrix[0][1] = 1\n    # adj_matrix[0][2] = 1\n    # adj_matrix[1][0] = 1\n    # adj_matrix[1][2] = 1\n    # adj_matrix[2][0] = 1\n    # adj_matrix[2][1] = 1\n    # \u6aa2\u67e5\u77e9\u9663\u4e2d\u662f\u5426\u6709\u76f8\u540c\u7684\u503c\uff0c\u6709\u7684\u8a71\u5c31\u4e0d\u884c\u4e86\n    for i in range(n):\n        for j in range(n):\n            if i < n and j < n and adj_matrix[i][j] == 1:\n                for k in range(n):\n                    if i < n and j < n and adj_matrix[i][k] == 1 and adj_matrix[k][j] == 1:\n                        return \"NO\"\n    return \"YES\"\n\nprint(solution(stdin = input()))\n\n'''\ndef"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 1 2\")\n    'YES\\\\n001\\\\n001\\\\n110'\n    >>> solution(\"3 3 3\")\n    'NO'\n    >>> solution(\"5 2 2\")\n    'YES\\\\n001\\\\n110\\\\n010\\\\n011'\n    \"\"\"\n    n, a, b = map(int, stdin.split())\n    if n < a or n < b:\n        return 'NO'\n    adj = [[0] * n for _ in range(n)]\n    for _ in range(a):\n        x, y = map(int, stdin.split())\n        adj[x - 1][y - 1] = 1\n        adj[y - 1][x - 1] = 1\n    for _ in range(b):\n        x, y = map(int, stdin.split())\n        adj[x - 1][y - 1] = 1\n        adj[y - 1][x - 1] = 0\n    adj = [\n        [1 if adj[i][j] == 1 else 0 for j in range(n)] for i in range(n)\n    ]\n    print('YES')\n    for line in adj:\n        print(''.join(map(str, line)))\n"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, n, k = (int(i) for i in stdin.split())\n    if a*k > n*(n-1):\n        print('NO')\n        return\n    elif k*(n-1) < b:\n        print('NO')\n        return\n    \n    cols = [[0 for _ in range(n)] for _ in range(n)]\n    \n    for i in range(k):\n        cols[i][i] = 1\n    \n    for i in range(k, n):\n        for j in range(k, n):\n            if not is_connected(cols, i, j, b):\n                print('NO')\n                return\n            cols[i][j] = 1\n            cols[j][i] = 1\n    \n    print('YES')\n    for i in range(n):\n        print(''.join(str(e) for e in cols[i]))\n    \n    return\n\ndef"
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    if a > n or b > n:\n        return \"NO\"\n    arr = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        for j in range(i + 1, n):\n            if i + j == n - 1:\n                arr[i][j] = 1\n            if i - j == n - 1:\n                arr[i][j] = 1\n    for i in range(n):\n        for j in range(n):\n            if arr[i][j] == 0 and arr[j][i] == 0:\n                arr[i][j] = 1\n                arr[j][i] = 1\n                if a == 1 and b == 1:\n                    if i + j == n - 1:\n                        if j - i == 0:\n                            for k in range(n):\n                                arr[k][k] = 1\n                        if i - j == 0:\n                            for k in range(n):\n                                arr[k][k] = 1\n                        else:\n                            for k in range(n):\n                                if k!= i and k!= j:\n                                    arr[k][i] = 1\n                                    arr[k][j] = 1\n                    else:\n                        if j - i == 0:\n                            for k in range(n):\n                                arr[k][k] = 1\n                        else:\n                            for k in range(n):\n                                if k!= i and k!= j:\n                                    arr[k][i] = 1\n                                    arr[k][j] = 1\n                else:\n                    if a == 0 and b == 0:\n                        for k in range(n):\n                            arr[k][k] = 1\n                    else:\n                        for k in range(n):\n                            if k!= i and k!= j:\n                                arr[k][i] = 1\n                                arr[k][j] = 1\n    if a == 0 and b == 0:\n        return \"YES\"\n    for i in arr:\n        if a == 0:\n            for j in i:\n                if j!= 0:\n                    return \"NO\"\n        if b == 0:\n            for j in i:\n                if j!= 0:\n                    return \"NO\"\n    return \"YES\""
    },
    {
        "number": 465,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split(' '))\n    if a == 0 or b == 0 or n == 0:\n        return 'NO'\n    elif n == 1:\n        return 'YES'\n    elif n < a + b:\n        return 'NO'\n    else:\n        edges = [[int(i) for i in stdin.split(' ')[i:i + 2]] for i in range(0, 2 * n, 2)]\n        # \u0437\u0430\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u0439 \u043c\u0430\u0442\u0440\u0438\u0446\u044b \u0441\u043c\u0435\u0436\u043d\u043e\u0441\u0442\u044c\u044e\n        # \u0443\u0441\u043b\u043e\u0432\u0438\u0435 \u043f\u043e \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0435 \u043d\u0430 \u043f\u043e\u043b\u043d\u043e\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u043f\u0440\u0438\u043c\u0435\u043d\u044f\u0435\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435 \u043f\u043e\u0441\u0442\u0440\u043e\u0435\u043d\u0438\u044f \u0433\u0440\u0430\u0444\u0430\n        for i in range(n):\n            edges[i][i] = 1\n\n        def dfs(i, used):\n            if used[i]:\n                return False\n            used[i] = True\n            for j in range(n):\n                if edges[i][j] == 1 and used[j] == False:\n                    dfs(j, used)\n                    if not used[j]:\n                        return False\n            return True\n\n        # \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u0433\u0440\u0430\u0444\u0430\n        # \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0441\u043b\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0433\u0440\u0430\u0444\u0430\n        used = [False for i in range(n)]\n        for i in range(n):\n            used[i] = dfs(i, used)\n            if not used[i]:\n                break\n\n        # \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0433\u0440\u0430\u0444\u0430\n        # \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442\u0441\u044f \u0438\u0441\u0445\u043e\u0434\u044f \u0438\u0437 \u043c\u0430\u0442\u0440\u0438\u0446\u044b \u0441\u043c\u0435\u0436\u043d\u043e\u0441\u0442\u0438\n        for i in range(n):\n            for j in range(n):\n                if edges[i][j]!= 1 and edges[i][j]!= 0:\n                    return 'NO'\n\n        # \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u0441\u043f\u0438\u0441\u043a\u0430\n        # \u0438\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u044b\u0445 \u0440\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u0435\u0439\n        list_size = 2\n        while 2 ** list_size < n:\n            list_size += 1\n        used_edges = []\n        for i in range(n):\n            for j in range(i + 1, n):\n                edge_str = str(edges[i][j]) + str(edges[j][i])\n                if edge_str not in used_edges:\n                    used_edges.append(edge_str)\n        used_edges.sort(key=lambda x: x[0])\n        global_sizes = [len(used_edges[i]) for i in range(len(used_edges))]\n        # \u0438\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u0441\u043f\u0438\u0441\u043a\u0430\n        # \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u0441\u043c\u0435\u0436\u043d\u043e\u0441\u0442\u0438 \u0434\u043e\u043b\u0436\u043d\u043e \u0431\u044b\u0442\u044c \u0432 \u043f\u0440\u0435\u0434\u0435\u043b\u0430\u0445 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0439 \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u043e\u0439 \u0440\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u0438\n        # \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f \u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0433\u043b\u043e\u0431\u0430\u043b\u044c\u043d\u0430\u044f \u0440\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0441\u0442\u044c \u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438 \u0432\u0441\u0435\u0445 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0440\u0435\u0431\u0435\u0440\n        for i in range(n):\n            for j in range(n):\n                if edges[i][j] == 1 and (str(edges[i][j]) + str(edges[j][i])) not in used_edges:\n                    return 'NO'\n        # \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043c\u0430\u0442\u0440\u0438\u0446\u044b \u0441\u043c\u0435\u0436\u043d\u043e\u0441\u0442\u0438\n        for i in range(len(used_edges)):\n            if len(used_edges[i]) > 1:\n                used_edges[i] = str(used_edges[i])[0] + str(used_edges[i])[-1]\n        matrix = [[0 for j in range(len(used_edges))] for i in range(len(used_edges))]\n        for i in range(len(used_edges)):\n            for j in range(len(used_edges)):\n                if i == j:\n                    matrix[i][j] = 1\n                elif used_edges[i] == used_edges[j]:\n                    matrix[i][j] = 1\n        for i in range(n):\n            for j in range(n):\n                if i == j:\n                    continue\n                if edges[i][j]!= 0:\n                    for k in range(len(used_edges)):"
    },
    {
        "number": 466,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    c, d, n, m = [int(x) for x in stdin.split()]\n    return str(max(n * c, (n + m) * c + d * d))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 466,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"1 10\\n7 2\\n1\\n\")\n    2\n    \"\"\"\n    c, d, n, m, k = [int(s) for s in stdin.split(\"\\n\")[:5]]\n    return str(min(\n        k * n + (c * (n - 1) + d * (n - 1)) +\n        (n - k) * m,\n        k * m + (c * (m - 1) + d * (m - 1)) +\n        (m - k) * n\n    ))\n"
    },
    {
        "number": 466,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    c, d, n, m = map(int, stdin.split(' '))\n    k = int(stdin[-1])\n    a = n * (c * m - k)\n    b = n * k\n    return str(min(a, b))\n"
    },
    {
        "number": 466,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    c, d, n, m, k = map(int, stdin.split('\\n')[0].split())\n    \n    possible_combinations = []\n    for i in range(k+1):\n        if i == 0:\n            possible_combinations.append(0)\n        elif i <= n:\n            possible_combinations.append(possible_combinations[i-1] + c)\n        elif i <= n+m:\n            possible_combinations.append(min(\n                possible_combinations[i-1] + c,\n                possible_combinations[i-1-n] + d\n            ))\n        else:\n            possible_combinations.append(possible_combinations[i-1] + c)\n\n    return possible_combinations[k]\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 466,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    c, d, n, m = [int(n) for n in stdin.split('\\n')[0].split(' ')]\n    k = int(stdin.split('\\n')[1])\n    \n    main = int(n * m / c)\n    additional = int(n * m / c - main)\n\n    \n    return main + additional\n"
    },
    {
        "number": 466,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    # write your code in Python 3.6\n    # n, m, k = [int(i) for i in stdin.split()]\n    # return str(min(k*m - (n - k*m)**2, k*m*(n - k*m)))\n    pass\n"
    },
    {
        "number": 466,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    a, b, c, d, n, m, k = (int(i) for i in stdin.split())\n    return str(min(c*n + d*m, d*(n+m+k), a*n*m, a*n*k, a*m*k, b*(n+m+k)))\n    '''\n    a, b, c, d, n, m, k = (int(i) for i in stdin.split())\n    return str(min(c*n + d*m, d*(n+m+k), a*n*m, a*n*k, a*m*k, b*(n+m+k)))\n\n\nassert solution('1 10 2 2 1') == '0'\nassert solution('2 2 1 2') == '2'\nassert solution('2 1 1 2') == '0'\nassert solution('1 1 1 2') == '2'\nassert solution('1 1 2 1') == '1'\nassert solution('1 10 2 2 1') == '2'\n\nassert solution('7 2 1 1') == '2'\nassert solution('7 2 2 1') == '1'\nassert solution('7 2 3 1') == '2'\nassert solution('7 2 4 1') == '1'\nassert solution('7 2 5 1') == '0'\nassert solution('7 2 6 1') == '0'\nassert solution('7 2 7 1') == '0'\nassert solution('7 2 8 1') == '0'\nassert solution('7 2 9 1') == '0'\nassert solution('7 2 10 1') == '0'\n\nassert solution('6 2 1 3') == '2'\nassert solution('6 2 2 3') == '2'\nassert solution('6 2 3 3') == '2'\nassert solution('6 2 4 3') == '0'\nassert solution('6 2 5 3') == '1'\nassert solution('6 2 6 3') == '0'\nassert solution('6 2 7 3') == '1'\nassert solution('6 2 8 3') == '1'\nassert solution('6 2 9 3') == '1'\nassert solution('6 2 10 3') == '0'\nassert solution('6 3 1 3') == '1'\nassert solution('6 3 2 3') == '0'\nassert solution('6 3 3 3') == '0'\nassert solution('6 3 4 3') == '0'\nassert solution('6 3 5 3') == '1'\nassert solution('6 3 6 3') == '0'\nassert solution('6 3 7 3') == '1'\nassert solution('6 3 8 3') == '0'\nassert solution('6 3 9 3') == '0'\nassert solution('6 3 10 3') == '0'\nassert solution('6 4 1 3') == '1'\nassert solution('6 4 2 3') == '0'\nassert solution('6 4 3 3') == '0'\nassert solution('6 4 4 3') == '0'\nassert solution('6 4 5 3') == '0'\nassert solution('6 4 6 3') == '1'\nassert solution('6 4 7 3') == '0'\nassert solution('6 4 8 3') == '0'\nassert solution('6 4 9 3') == '0'\nassert solution('6 4 10 3') == '1'\nassert solution('6 5 1 3') == '0'\nassert solution('6 5 2 3') == '0'\nassert solution('6 5 3 3') == '0'\nassert solution('6 5 4 3') == '0'\nassert solution('6 5 5 3') == '0'\nassert solution('6 5 6 3') == '0'\nassert solution('6 5 7 3') == '0'\nassert solution('6 5 8 3') == '0'\nassert solution('6 5 9 3') == '0'\nassert solution('6 5 10 3') == '0'\nassert solution('6 6 1 3') == '1'\nassert solution('6 6 2 3') == '0'\nassert solution('6 6 3 3') == '0'\nassert solution('6 6 4 3') == '0'\nassert solution('6 6 5 3') == '0'\nassert solution('6 6 6 3') == '0'\nassert solution('6 6 7 3') == '0'\nassert solution('6 6 8 3') == '0'\nassert solution('6 6 9 3') == '0'\nassert solution('6 6 10 3') == '0'\nassert solution('6 7 1 3') == '0'\nassert solution('6 7 2 3') == '0'\nassert solution('6 7 3 3') == '0'\nassert solution('6 7 4 3') == '0'\nassert solution('6 7 5 3') == '0'\nassert solution('6 7 6 3') == '1'\nassert solution('6 7 7 3') == '0'\nassert solution('6 7 8 3') == '0'\nassert solution('6 7 9 3') == '0'\nassert solution('6 7 10 3') == '0'\nassert solution('6 8 1 3') == '0'\nassert solution('6 8 2 3') == '0'\nassert solution('6 8 3 3') == '0'\nassert solution('6 8 4 3') == '0'\nassert solution('6 8 5 3') == '0'\nassert solution('6 8 6 3') == '0'\nassert solution('6 8 7 3') == '0'\nassert solution('6 8 8 3') == '0'\nassert solution('6 8 9 3') == '0'\nassert solution('6 8 10 3') == '0'\nassert solution('6 9 1 3') == '0'\nassert solution('6 9 2 3') == '0'\nassert solution('6 9 3 3') == '0'\nassert solution('6 9 4 3') == '0'\nassert solution('6 9 5 3') == '0'\nassert solution('6 9 6 3') == '0'\nassert solution('6 9 7 3') == '0'\nassert solution('6 9 8 3') == '0'\nassert solution('6 9 9 3') == '0'\nassert solution('6 9 10 3') == '0'\nassert solution('6 10 1 3') == '0'\nassert solution('6 10 2 3') == '0'\nassert solution('6 10 3 3') == '0'\nassert solution('6 10 4 3') == '0'\nassert solution('6 10 5 3') == '0'\nassert solution('6 10 6 3') == '0'\nassert solution('6 10 7 3') == '0'\nassert solution('6 10 8 3') == '0'\nassert solution('6 10 9 3') == '0'\nassert solution('6 10 10 3') == '0'\nassert solution('7 2 1 3') == '0'\nassert solution('7 2 2 3') == '0'\nassert solution('7 2 3 3') == '0'\nassert solution('7 2 4 3') == '0'\nassert solution('7 2 5 3') == '0'\nassert solution('7 2 6 3') == '0'\nassert solution('7 2 7 3') == '0'\nassert solution('7 2 8 3') == '0'\nassert solution('7 2 9 3') == '0'\nassert solution('7 2 10 3') == '0'\nassert solution('7 3 1 3') == '0'\nassert solution('7 3 2 3') == '1'\nassert solution('7 3 3 3') == '1'\nassert solution"
    },
    {
        "number": 466,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, m, k = [int(i) for i in stdin.split()]\n    \n    return str(min(n*m - k, n*(n+1)//2))"
    },
    {
        "number": 466,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    c, d, n, m, k = map(int, stdin.split())\n    l = [[0, 0] for _ in range(101)]\n    l[1] = [1, c]\n    for i in range(2, n + 1):\n        l[i] = [l[i - 1][0] + l[i - 2][0], l[i - 1][0] + l[i - 2][1]]\n    for i in range(n + 1, n + m + 1):\n        l[i] = [l[i - 1][0] + l[i - 2][0] - 1, l[i - 1][0] + l[i - 2][1]]\n    for i in range(n + m + 1, n + m + k + 1):\n        l[i] = [l[i - 1][0] + l[i - 2][0] - 1, l[i - 1][0] + l[i - 2][1]]\n    return l[n + m + k][0] - l[n + m + k][1]\n\nprint(solution(stdin=input()))\n"
    },
    {
        "number": 466,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = stdin.split(\"\\n\")\n    c, d, n, m, k = list(map(int, test_cases[0].split(\" \")))\n    n, m = list(map(int, test_cases[1].split(\" \")))\n    k = int(test_cases[2])\n    return min(n*c + n*(k-1)*m, n*d + k*m)\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 467,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s: list = stdin.split(\"\\n\")\n    letters: list = list(s[0])\n    res: list = []\n    if len(letters)!= len(s[0]):\n        return \"Impossible\"\n    for i in range(len(letters)):\n        curr: str = letters[i]\n        if curr in res:\n            return \"Impossible\"\n        res.append(curr)\n        letters = letters[:i] + letters[i+1:]\n        #print(letters)\n        for j in range(len(letters)):\n            letters2: list = list(letters)\n            letters2.insert(j, curr)\n            letters2 = \"\".join(letters2)\n            if is_possible(letters2):\n                return letters2\n    return \"Impossible\"\n\n\ndef"
    },
    {
        "number": 467,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the solution\"\"\"\n    return ''\n"
    },
    {
        "number": 467,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    grid = ['.'] * 26\n    for i in range(26):\n        grid[i] = chr(ord('A') + i)\n    grid = ''.join(grid)\n    for r in range(len(grid) - 3):\n        for c in range(len(grid) - 3):\n            first_tile = stdin[r] + stdin[r + 1] + stdin[r + 2]\n            second_tile = stdin[c] + stdin[c + 1] + stdin[c + 2]\n            third_tile = stdin[r + 3] + stdin[r + 4] + stdin[r + 5]\n            fourth_tile = stdin[c + 3] + stdin[c + 4] + stdin[c + 5]\n            if first_tile == second_tile and third_tile == fourth_tile:\n                return first_tile + grid[r] + grid[c] + grid[r + 3] + grid[c + 3]\n    return 'Impossible'\n"
    },
    {
        "number": 467,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n  tiles = list(stdin)\n  paths = []\n  for i in range(len(tiles)-1):\n    for j in range(i+1, len(tiles)):\n      if are_adjacent(tiles[i], tiles[j]):\n        paths.append((tiles[i], tiles[j]))\n  if not paths:\n    return 'Impossible'\n  grid = []\n  for i in range(13):\n    grid.append(list(set(tiles)))\n  for i in range(len(paths)):\n    path = paths[i]\n    if not place_path(path, grid):\n      return 'Impossible'\n  return ''.join(row)\n\ndef"
    },
    {
        "number": 467,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 467,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    grid = [[0] * len(stdin) for _ in range(len(stdin))]\n    words = stdin.split()\n    word_dict = {}\n\n    for i in range(len(words)):\n        for c in words[i]:\n            if c not in word_dict:\n                word_dict[c] = [i]\n            else:\n                word_dict[c].append(i)\n\n    print(word_dict)\n\n    for word in words:\n        for i in range(len(word)):\n            grid[word_dict[word[i]]][i] += 1\n\n    for i in range(len(stdin)):\n        if not grid[i][0]:\n            for j in range(1, len(stdin)):\n                if grid[i][j] > 1:\n                    return \"Impossible\"\n\n    for i in range(len(stdin)):\n        if not grid[i][-1]:\n            for j in range(len(stdin) - 1, 0, -1):\n                if grid[i][j] > 1:\n                    return \"Impossible\"\n\n    for i in range(len(stdin)):\n        if not grid[0][i]:\n            for j in range(1, len(stdin)):\n                if grid[j][i] > 1:\n                    return \"Impossible\"\n\n    for i in range(len(stdin)):\n        if not grid[-1][i]:\n            for j in range(len(stdin) - 1, 0, -1):\n                if grid[j][i] > 1:\n                    return \"Impossible\"\n\n    return \"\".join(list(map(lambda x: x.pop(), grid)))\n\nprint(solution(\"ABCDEFGHIJKLMNOPQRSGTUVWXYZ\"))\nprint(solution(\"BUVTYZFQSNRIWOXXGJLKACPEMDH\"))\n"
    },
    {
        "number": 467,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"BUVTYZFQSNRIWOXXGJLKACPEMDH\")\n    'Impossible'\n    \"\"\"\n    return \"Impossible\""
    },
    {
        "number": 467,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return the solution to the problem\n    :param stdin: String with English letters that occur at least once\n    :return: The grid that solves the problem\n    \"\"\"\n    s = stdin\n    grid = [[\".\" for _ in range(13)] for _ in range(2)]\n    for idx, c in enumerate(s):\n        y = int(idx / 13)\n        x = idx % 13\n        if c == \"A\":\n            if grid[0][0] == \".\":\n                grid[0][0] = c\n                continue\n            else:\n                return \"Impossible\"\n        if c == \"B\":\n            if grid[0][1] == \".\":\n                grid[0][1] = c\n                continue\n            else:\n                return \"Impossible\"\n        if c == \"C\":\n            if grid[0][2] == \".\":\n                grid[0][2] = c\n                continue\n            else:\n                return \"Impossible\"\n        if c == \"D\":\n            if grid[0][3] == \".\":\n                grid[0][3] = c\n                continue\n            else:\n                return \"Impossible\"\n        if c == \"E\":\n            if grid[0][4] == \".\":\n                grid[0][4] = c\n                continue\n            else:\n                return \"Impossible\"\n        if c == \"F\":\n            if grid[0][5] == \".\":\n                grid[0][5] = c\n                continue\n            else:\n                return \"Impossible\"\n        if c == \"G\":\n            if grid[0][6] == \".\":\n                grid[0][6] = c\n                continue\n            else:\n                return \"Impossible\"\n        if c == \"H\":\n            if grid[0][7] == \".\":\n                grid[0][7] = c\n                continue\n            else:\n                return \"Impossible\"\n        if c == \"I\":\n            if grid[0][8] == \".\":\n                grid[0][8] = c\n                continue\n            else:\n                return \"Impossible\"\n        if c == \"J\":\n            if grid[0][9] == \".\":\n                grid[0][9] = c\n                continue\n            else:\n                return \"Impossible\"\n        if c == \"K\":\n            if grid[0][10] == \".\":\n                grid[0][10] = c\n                continue\n            else:\n                return \"Impossible\"\n        if c == \"L\":\n            if grid[0][11] == \".\":\n                grid[0][11] = c\n                continue\n            else:\n                return \"Impossible\"\n        if c == \"M\":\n            if grid[0][12] == \".\":\n                grid[0][12] = c\n                continue\n            else:\n                return \"Impossible\"\n        if c == \"N\":\n            if grid[0][10] == \".\":\n                grid[0][10] = c\n                continue\n            else:\n                return \"Impossible\"\n        if c == \"O\":\n            if grid[0][11] == \".\":\n                grid[0][11] = c\n                continue\n            else:\n                return \"Impossible\"\n        if c == \"P\":\n            if grid[0][12] == \".\":\n                grid[0][12] = c\n                continue\n            else:\n                return \"Impossible\"\n        if c == \"Q\":\n            if grid[0][13] == \".\":\n                grid[0][13] = c\n                continue\n            else:\n                return \"Impossible\"\n        if c == \"R\":\n            if grid[0][14] == \".\":\n                grid[0][14] = c\n                continue\n            else:\n                return \"Impossible\"\n        if c == \"S\":\n            if grid[0][15] == \".\":\n                grid[0][15] = c\n                continue\n            else:\n                return \"Impossible\"\n        if c == \"T\":\n            if grid[0][16] == \".\":\n                grid[0][16] = c\n                continue\n            else:\n                return \"Impossible\"\n        if c == \"U\":\n            if grid[0][17] == \".\":\n                grid[0][17] = c\n                continue\n            else:\n                return \"Impossible\"\n        if c == \"V\":\n            if grid[0][18] == \".\":\n                grid[0][18] = c\n                continue\n            else:\n                return \"Impossible\"\n        if c == \"W\":\n            if grid[0][19] == \".\":\n                grid[0][19] = c\n                continue\n            else:\n                return \"Impossible\"\n        if c == \"X\":\n            if grid[0][20] == \".\":\n                grid[0][20] = c\n                continue\n            else:\n                return \"Impossible\"\n        if c == \"Y\":\n            if grid[0][21] == \".\":\n                grid[0][21] = c\n                continue\n            else:\n                return \"Impossible\"\n        if c == \"Z\":\n            if grid[0][22] == \".\":\n                grid[0][22] = c\n                continue\n            else:\n                return \"Impossible\"\n        if c == \".\":\n            if grid[0][23] == \".\":\n                grid[0][23] = c\n                continue\n            else:\n                return \"Impossible\"\n        return \"Impossible\"\n    return \"\".join([\"\".join(x) for x in grid])\n"
    },
    {
        "number": 467,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 467,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"ABCDEFGHIJKLMNOPQRSGTUVWXYZ\")\n    'YXWVUTGHIJKLM'\n    >>> solution(\"BUVTYZFQSNRIWOXXGJLKACPEMDH\")\n    'Impossible'\n    \"\"\"\n    return ''\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \">\" if int(stdin[0]) ** int(stdin[1]) < int(stdin[1]) ** int(stdin[0]) else \"<\" if int(stdin[0]) ** int(stdin[1]) > int(stdin[1]) ** int(stdin[0]) else \"=\"\n\n\ndef"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Vasya has $x$ dollars and he wants to buy $y$ dollars.\n    If he has $s$ dollars, he can buy $p$ dollars.\n    When Vasya is at $t$ dollars, he can:\n        buy $p$ dollars\n        spend $s$ dollars\n    \"\"\"\n    x, y, s, p, t = map(int, stdin.split(' '))\n    if x*y < y*x and t <= p+s:\n        return '>'\n    elif x*y > y*x and t <= s+p:\n        return '<'\n    elif x*y == y*x and t <= p+s:\n        return '='\n    return '<'"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin[0])\n    y = int(stdin[1])\n    return '<' if x * y < y ** x else '>' if x * y > y ** x else '='\n\n\n\nsolution(\"5 8\")  # '>'\nsolution(\"10 3\")  # '<'\nsolution(\"6 6\")  # '='\nsolution(\"8 5\")  # '>'\nsolution(\"4 4\")  # '='\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    x_pow_y = x ** y\n    y_pow_x = y ** x\n    return '=' if x_pow_y == y_pow_x else '>' if x_pow_y > y_pow_x else '<'"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split(' '))\n    return {\n        x ** y < y ** x: '<',\n        x ** y > y ** x: '>',\n        x ** y == y ** x: '=',\n    }[True]\n\n\ndef"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Comparing x**y and y**x in milliseconds\n    \"\"\"\n    x, y = map(int, stdin.split())\n    return '>' if x**y < y**x else '<' if x**y > y**x else '='\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    x = int(stdin.split()[0])\n    y = int(stdin.split()[1])\n    if (x**y) < (y**x):\n        return \"<\"\n    elif (x**y) > (y**x):\n        return \">\"\n    else:\n        return \"=\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x, y = [int(s) for s in stdin.split()]\n    return '>' if x ** y < y ** x else '<' if x ** y > y ** x else '='\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    return '<' if x ** y < y ** x else '>' if x ** y > y ** x else '='\n"
    },
    {
        "number": 468,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    return '>' if x ** y < y ** x else '<' if x ** y > y ** x else '='\n\n\ndef"
    },
    {
        "number": 469,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, h = map(int, stdin.split())\n    area = r*r*3.1415926535897932384626433\n    max_area = area/4 - (r*r/4) + h\n    return int(max_area)"
    },
    {
        "number": 469,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    r, h = map(int, stdin.split())\n    \n    # set math constants\n    rad = r / 2\n    w1 = h + rad\n    w2 = h + rad\n    h1 = 2 * rad\n    h2 = 2 * rad\n    h3 = 2 * rad\n    \n    return min(w1, w2, h1, h2, h3)\n\nprint(solution(input()))\n"
    },
    {
        "number": 469,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    r, h = map(int, stdin.strip().split())\n    return str(2 * min(r, h))\n"
    },
    {
        "number": 469,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 469,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    input_ = stdin.split(' ')\n    r = int(input_[0])\n    h = int(input_[1])\n    count = 0\n    if h >= 2 * r:\n        count = 1 + (h - 2 * r) // (2 * r)\n        if (h - 2 * r) % (2 * r)!= 0:\n            count += 1\n    print(count)\n    return ''\n\ndef"
    },
    {
        "number": 469,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    r, h = map(int, stdin.split())\n    return r*r + r*h - h*h\n"
    },
    {
        "number": 469,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\"your code here\"\"\"\n\n\ndef"
    },
    {
        "number": 469,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    r, h = map(int, stdin.split())\n    h_w = h + r\n    return (h_w * h_w - r * r) // 2\n"
    },
    {
        "number": 469,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    [r, h] = [int(x) for x in stdin.split()]\n    return str(int((r * (h + r)) / 2))"
    },
    {
        "number": 469,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    r, h = map(int, stdin.split())\n    return f\"{2*r} \"\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \u89e3\u9898\u601d\u8def\uff1a\n    \u4e00\u5f00\u59cb\u6211\u4eec\u628a\u7ed9\u5b9a\u6570\u503c\u7684\u6570\u7ec4\u6392\u5e8f\uff0c\u7531\u5c0f\u5230\u5927\u3002\n    \u7136\u540e\u6211\u4eec\u53d1\u73b0\uff0c\u5982\u679c\u6709n\u4e2a\u6570\u5b57\uff0c\u6211\u4eec\u53ef\u4ee5\u9009\u62e9\u4e00\u4e2a\u6570\u5b57\uff0c\u7136\u540e\u6240\u6709\u7b26\u5408\u8fd9\u4e2a\u6570\u5b57\u7684\u6570\u5b57\u90fd\u4f1a\u88ab\u629b\u5f03\uff0c\u7ecf\u8fc7\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u6700\u540e\u5269\u4e0b\u7684n\u4e2a\u6570\u5b57\u7684\u603b\u548c\u7684\u6700\u5c0f\u503c\u5c31\u662f\u6211\u4eec\u60f3\u8981\u7684\u6700\u5c0f\u503c\u3002\n    \u5177\u4f53\u5730\uff0c\u6211\u4eec\u53ef\u4ee5\u8fd9\u6837\u8003\u8651\uff0c\u6bd4\u5982\u8fd9\u6837\u4e00\u4e2a\u6570\u7ec4\uff1a[1, 2, 2, 2, 3, 4]\n    \u6211\u4eec\u5728\u8003\u8651\u6570\u7ec4\u4e2d\u7684\u7b2c\u4e00\u4e2a\u6570\u5b571\u65f6\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u77e5\u9053[2, 2, 2, 2, 3, 4]\u662f\u7b26\u5408\u6761\u4ef6\u7684\uff0c\u56e0\u4e3a1\u4e0e2\u6309\u71671<2\u7684\u987a\u5e8f\u6392\u5e8f\u3002\n    \u6211\u4eec\u53ef\u4ee5\u77e5\u9053\uff0c\u5982\u679c\u6211\u4eec\u77e5\u9053\u6570\u7ec4\u4e2d\u67091\u4e2a\u6570\u5b57\uff0c\u90a3\u4e48\u5728\u8003\u8651\u6570\u7ec4\u4e2d\u7b2c\u4e8c\u4e2a\u6570\u5b57\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\uff0c\u5982\u679c\u4ece\u7b2c\u4e8c\u4e2a\u6570\u5b572\u5f00\u59cb\uff0c\u90fd\u662f\u7b26\u5408\u6761\u4ef6\u7684\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u628a\u8fd9\u4e9b\u6570\u5b57\u5168\u90e8\u629b\u5f03\uff0c\u5f97\u5230\u6700\u7ec8\u7684\u7ed3\u679c2+2+2+2+3+4=20\u3002\n    \u53ef\u662f\u6211\u4eec\u53ef\u4ee5\u4e0d\u7ba1\u8fd9\u4e2a\u6570\u7ec4\uff0c\u5728\u8003\u8651\u6570\u7ec4\u4e2d\u7b2c\u4e09\u4e2a\u6570\u5b572\u65f6\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u628a\u524d\u9762\u90a3\u4e9b\u7b26\u5408\u6761\u4ef6\u7684\u6570\u5b57\u5168\u90e8\u629b\u5f03\uff0c\u5f97\u5230\u6700\u7ec8\u7684\u7ed3\u679c2+2+2+2+3+4=20\u3002\n    \u6211\u4eec\u53ef\u4ee5\u628a\u8fd9\u4e2a\u8fc7\u7a0b\u7ee7\u7eed\u4e0b\u53bb\uff0c\u76f4\u5230\u8003\u8651\u5230\u6700\u540e\u4e00\u4e2a\u6570\u5b573\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\uff0c\u6211\u4eec\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\uff0c\u5982\u679c\u6211\u4eec\u77e5\u9053\u6570\u7ec4\u4e2d\u67092\u4e2a\u6570\u5b57\uff0c\u90a3\u4e48\u5728\u8003\u8651\u6570\u7ec4\u4e2d\u7b2c\u56db\u4e2a\u6570\u5b57\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\uff0c\u5982\u679c\u4ece\u7b2c\u56db\u4e2a\u6570\u5b57\u5f00\u59cb\uff0c\u90fd\u662f\u7b26\u5408\u6761\u4ef6\u7684\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u628a\u8fd9\u4e9b\u6570\u5b57\u5168\u90e8\u629b\u5f03\uff0c\u5f97\u5230\u6700\u7ec8\u7684\u7ed3\u679c2+2+2+2+3+4=20\u3002\n    \u6700\u540e\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u5728\u6700\u540e\u4e00\u4e2a\u6570\u5b574\u65f6\uff0c\u6211\u4eec\u4e0d\u7528\u629b\u5f03\u4efb\u4f55\u4e00\u4e2a\u6570\u5b57\uff0c\u56e0\u4e3a\u6211\u4eec\u6700\u540e\u8981\u8f93\u51fa\u7684\u7ed3\u679c\u662f20\uff0c\u867d\u7136\u6211\u4eec\u4e0d\u77e5\u9053\u8fd9\u4e2a\u6570\u5b57\u662f\u591a\u5c11\uff0c\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\u8fd9\u4e2a\u6570\u5b57\u662f4\u3002\n    \u8fd9\u5c31\u662f\u6211\u4eec\u8981\u60f3\u5230\u7684\u4e00\u4e2a\u601d\u8def\uff1a\n    \u6211\u4eec\u7ecf\u5386\u4e86\u4e00\u4e2a\u6570\u5b57\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u628a\u8fd9\u4e2a\u6570\u5b57\u6240\u6709\u7684\u7b26\u5408\u6761\u4ef6\u7684\u6570\u5b57\u90fd\u629b\u5f03\uff0c\u5f97\u5230\u63a5\u4e0b\u6765\u7684\u7ed3\u679c\u3002\n    \u7136\u540e\u6211\u4eec\u628a\u7b2c\u4e8c\u4e2a\u6570\u5b57\u8003\u8651\u8fdb\u53bb\uff0c\u53ef\u4ee5\u5f97\u5230\u63a5\u4e0b\u6765\u7684\u7ed3\u679c\u3002\n    \u4ee5\u6b64\u7c7b\u63a8\uff0c\u76f4\u5230\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u5f97\u5230\u6700\u7ec8\u7ed3\u679c\u3002\n    \u53ef\u4ee5\u770b\u5230\uff0c\u6240\u6709\u7684\u6570\u5b57\u90fd\u53ea\u9700\u8981\u8ba1\u7b97\u4e00\u6b21\u3002\n    \"\"\"\n    data = sorted(map(int, stdin.split()))\n    pre = data[0]\n    ans = 0\n    for i in data[1:]:\n        if i <= pre * 2:\n            ans += pre * 2 - i\n        pre = i\n    print(ans)\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\nprint(solution(input()))\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    This is the first solution, I tried.\n    It's very slow and will not pass all cases\n    '''\n    sum = 0\n    num = [int(i) for i in stdin.split()]\n    for i in range(len(num)):\n        for j in range(i+1,len(num)):\n            if num[i]==num[j]:\n                for k in range(j+1,len(num)):\n                    if num[i]==num[k]:\n                        sum+=num[k]\n                        num.remove(num[k])\n                    else:\n                        break\n            else:\n                break\n    return str(sum)"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n ...\n\"\"\"\n\nfrom itertools import combinations, permutations\nfrom typing import List, Tuple\n\nimport unittest\n\n\ndef"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    t = list(map(int, stdin.split()))\n    t.sort()\n    n = len(t)\n    t[0] -= 1\n    t[1] -= 1\n    t[2] -= 1\n    t[3] -= 1\n    t[4] -= 1\n    # t[0] = 6\n    # t[1] = 9\n    # t[2] = 5\n    # t[3] = 4\n    # t[4] = 3\n    # print(t)\n    # 1 1 1 1\n    # 1 1 2 1\n    # 1 2 1 1\n    # 1 2 2 1\n    # 1 2 3 2\n    # 1 3 1 1\n    # 1 3 2 1\n    # 2 1 1 1\n    # 2 1 2 1\n    # 2 2 1 1\n    # 2 3 1 1\n    # 3 1 1 1\n    # 3 1 2 1\n    # 3 2 1 1\n    # 4 1 1 1\n    # 4 2 1 1\n    # 4 3 1 1\n    # 5 1 1 1\n    # 5 2 1 1\n    # 5 3 1 1\n    # 6 1 1 1\n    # 6 2 1 1\n    # 6 3 1 1\n    # 7 1 1 1\n    # 7 2 1 1\n    # 7 3 1 1\n    # 8 1 1 1\n    # 8 2 1 1\n    # 8 3 1 1\n    # 9 1 1 1\n    # 9 2 1 1\n    # 9 3 1 1\n    # 10 1 1 1\n    # 10 2 1 1\n    # 10 3 1 1\n    # 11 1 1 1\n    # 11 2 1 1\n    # 11 3 1 1\n    # 12 1 1 1\n    # 12 2 1 1\n    # 12 3 1 1\n    # 13 1 1 1\n    # 13 2 1 1\n    # 13 3 1 1\n    # 14 1 1 1\n    # 14 2 1 1\n    # 14 3 1 1\n    # 15 1 1 1\n    # 15 2 1 1\n    # 15 3 1 1\n    # 16 1 1 1\n    # 16 2 1 1\n    # 16 3 1 1\n    # 17 1 1 1\n    # 17 2 1 1\n    # 17 3 1 1\n    # 18 1 1 1\n    # 18 2 1 1\n    # 18 3 1 1\n    # 19 1 1 1\n    # 19 2 1 1\n    # 19 3 1 1\n    # 20 1 1 1\n    # 20 2 1 1\n    # 20 3 1 1\n    # 21 1 1 1\n    # 21 2 1 1\n    # 21 3 1 1\n    # 22 1 1 1\n    # 22 2 1 1\n    # 22 3 1 1\n    # 23 1 1 1\n    # 23 2 1 1\n    # 23 3 1 1\n    # 24 1 1 1\n    # 24 2 1 1\n    # 24 3 1 1\n    # 25 1 1 1\n    # 25 2 1 1\n    # 25 3 1 1\n    # 26 1 1 1\n    # 26 2 1 1\n    # 26 3 1 1\n    # 27 1 1 1\n    # 27 2 1 1\n    # 27 3 1 1\n    # 28 1 1 1\n    # 28 2 1 1\n    # 28 3 1 1\n    # 29 1 1 1\n    # 29 2 1 1\n    # 29 3 1 1\n    # 30 1 1 1\n    # 30 2 1 1\n    # 30 3 1 1\n    # 31 1 1 1\n    # 31 2 1 1\n    # 31 3 1 1\n    # 32 1 1 1\n    # 32 2 1 1\n    # 32 3 1 1\n    # 33 1 1 1\n    # 33 2 1 1\n    # 33 3 1 1\n    # 34 1 1 1\n    # 34 2 1 1\n    # 34 3 1 1\n    # 35 1 1 1\n    # 35 2 1 1\n    # 35 3 1 1\n    # 36 1 1 1\n    # 36 2 1 1\n    # 36 3 1 1\n    # 37 1 1 1\n    # 37 2 1 1\n    # 37 3 1 1\n    # 38 1 1 1\n    # 38 2 1 1\n    # 38 3 1 1\n    # 39 1 1 1\n    # 39 2 1 1\n    # 39 3 1 1\n    # 40 1 1 1\n    # 40 2 1 1\n    # 40 3 1 1\n    # 41 1 1 1\n    # 41 2 1 1\n    # 41 3 1 1\n    # 42 1 1 1\n    # 42 2 1 1\n    # 42 3 1 1\n    # 43 1 1 1\n    # 43 2 1 1\n    # 43 3 1 1\n    # 44 1 1 1\n    # 44 2 1 1\n    # 44 3 1 1\n    # 45 1 1 1\n    # 45 2 1 1\n    # 45 3 1 1\n    # 46 1 1 1\n    # 46 2 1 1\n    # 46 3 1 1\n    # 47 1 1 1\n    # 47 2 1 1\n    # 47 3 1 1\n    # 48 1 1 1\n    # 48 2 1 1\n    # 48 3 1 1\n    # 49 1 1 1\n    # 49 2 1 1\n    # 49 3 1 1\n    # 50 1 1 1\n    # 50 2 1 1\n    # 50 3 1 1\n    # 51 1 1 1\n    # 51 2 1 1\n    # 51 3 1 1\n    # 52 1 1 1\n    # 52 2 1 1\n    # 52 3 1 1\n    # 53 1 1 1\n    # 53 2 1 1\n    # 53 3 1 1\n    # 54 1 1 1\n    # 54 2 1 1\n    # 54 3 1 1\n    # 55 1 1 1\n    # 55 2 1 1\n    # 55 3 1 1\n    # 56 1 1 1\n    # 56 2 1 1\n    # 56 3 1 1\n    # 57 1 1 1\n    # 57 2 1 1\n    # 57 3 1 1\n    # 58 1 1 1\n    # 58 2 1 1\n    # 58 3 1 1\n    # 59 1 1 1\n    # 59 2 1 1\n    # 59 3 1 1\n    # 60 1 1 1\n    # 60 2 1 1\n    # 60 3 1 1\n    # 61 1 1 1\n    # 61 2 1 1\n    # 61 3 1 1\n    # 62 1 1 1\n    # 62 2 1 1\n    # 62 3 1 1\n    # 63 1 1 1\n    # 63 2 1 1\n    # 63 3 1 1\n    # 64 1 1 1\n    # 64 2 1 1\n    # 64 3 1 1\n    # 65 1 1 1\n    # 65 2 1 1\n    # 65 3 1 1\n    # 66 1 1 1\n    # 66 2 1 1\n    # 66 3 1 1\n    # 67 1 1 1\n    # 67 2 1 1\n    # 67 3 1 1\n    # 68 1 1 1\n    # 68 2 1 1\n    # 68 3 1 1\n    # 69 1 1 1\n    # 69"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    a, b, c, d, e = [int(i) for i in stdin.split('\\n')[0].split(' ')]\n    \n    def diff(p1, p2):\n        return abs(p1 - p2)\n        \n    ans = min(diff(a, b), diff(a, c), diff(a, d), diff(a, e),\n              diff(b, c), diff(b, d), diff(b, e),\n              diff(c, d), diff(c, e),\n              diff(d, e))\n    print(ans)\n    \nsolution(input())\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d, e = map(int, stdin.split())\n    if b == c == d == e:\n        return 0\n    if a == b == c:\n        return a + max(d, e)\n    elif a == b:\n        return a + max(d, e)\n    elif a == c:\n        return a + max(b, d)\n    elif a == d:\n        return a + max(b, c)\n    elif a == e:\n        return a + max(b, c)\n    elif b == c:\n        return b + max(a, d)\n    elif b == d:\n        return b + max(a, e)\n    elif b == e:\n        return b + max(a, c)\n    elif c == d:\n        return c + max(a, b)\n    elif c == e:\n        return c + max(a, b)\n    elif d == e:\n        return d + max(a, b)\n    else:\n        return a + b + max(c, d)\n"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    cards: list[int] = [int(c) for c in stdin.split()]\n    n: int = len(cards)\n    res: int = 0\n    for i in range(0, n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if cards[i]!= cards[j] and cards[j]!= cards[k] and cards[k]!= cards[i]:\n                    res = max(res, cards[i] + cards[j] + cards[k])\n    print(res)\n    return ''\n\n\ndef"
    },
    {
        "number": 470,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split(' '))\n    x_s = map(int, stdin.split(' '))\n    x_s = sorted(x_s)\n    x_s = list(x_s)\n    if n == 1:\n        print(x_s[0])\n        exit()\n    k = 0\n    for i in range(1, n):\n        if x_s[i] - x_s[i - 1] > x:\n            k += x_s[i] - x_s[i - 1] - x\n    if x_s[n - 1] - x > x:\n        k += x_s[n - 1] - x\n    print(k)\n    return ''\n\n\ndef"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, a = stdin.split()\n    a = int(a)\n    x = list(map(int, stdin.split()))\n\n    return a - sum(abs(a - x[i]) for i in range(len(x)))\n\ndef"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    b = int(stdin)\n    c = list(map(int, stdin.split()))\n    distance = []\n    for i in range(len(c)-1):\n        distance.append(abs(c[i] - c[i+1]))\n    return max(distance)\n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    points = [int(line) for line in stdin.split('\\n')[:-1]]\n    print(points)\n    return str(min(abs(x) for x in points) + sum(abs(x) for x in points if abs(x) > 1))"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n\n    # The input is a TUPLE, so we have to convert it into list for our convenience\n    tup = list(map(int, stdin.split()))\n    c = tup[0]\n    a = tup[1]\n    \n    l = list(map(int, stdin.split()))\n    #print(l)\n\n    # we want to find the minimum distance to travel\n    # so we start at a and we travel all the checkpoints\n    # and we keep track of how much we went\n    # so we store the minimum distance at each step\n    # then we return the minimum of the distances at each step\n    dists = []\n    d = 0\n    dists.append(d)\n    for i in range(c):\n        d += abs(a - l[i])\n        dists.append(d)\n\n    print(dists)\n    print(min(dists))\n    \n    return min(dists)\n\ndef"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    x = sorted(map(int, stdin.split()))\n    if n == 1:\n        return str(abs(x[0] - a))\n\n    return str(min((abs(x[i] - x[i - 1]) for i in range(1, n)), default=abs(x[n - 1] - a)))\n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, a = int(lines[0].split(' ')[0]), int(lines[0].split(' ')[1])\n    points = list(map(int, lines[1].split(' ')))\n    # Write your code here\n    points.sort()\n    return str(sum([abs(a - point) for point in points[1:]]))\n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 471,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return''.join(stdin.split())\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    \n    d = {2: {0: 1}, 3: {0: 2, 1: 1}, 5: {0: 3, 1: 2, 2: 1}, 7: {0: 4, 1: 3, 2: 2, 3: 1}}\n    \n    if n % 2 == 0:\n        return -1\n    \n    if n == 1:\n        return 1\n    \n    def x(n):\n        if n in d:\n            return d[n]\n        else:\n            d[n] = {m: x(n - (m ** 2))[m] for m in x(n - 1) if m in x(n - 1)}\n            return d[n]\n    \n    return next(iter(x(n)))\n\n\ndef"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    i = 1\n    while n > 0:\n        n, s = divmod(n, 10)\n        if s!= 0:\n            i = i * 10 + s\n    return i if i > 0 else -1\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return -1\n    s = sum([int(i) for i in str(n)])\n    x = n\n    while x > 0:\n        if x * x - n * s == 0:\n            return x\n        x += 1\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for x in range(1, n):\n        if s(x) == n:\n            return x\n    return '-1'\n\ndef"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\nn = int(stdin)\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    \n    x = 0\n    while n % 2 == 0:\n        x += 1\n        n //= 2\n        \n    while n % 3 == 0:\n        x += 1\n        n //= 3\n    \n    while n % 5 == 0:\n        x += 1\n        n //= 5\n    \n    if n == 1:\n        return '1'\n    \n    if x == 0:\n        return '-1'\n    \n    return str(x)\n"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    \n    if n < 3:\n        return -1\n    \n    if n & 1 == 0:\n        return n >> 1\n    \n    d = 2\n    while d * d <= n:\n        if n % d == 0:\n            return d\n        d += 1\n    \n    return n\n\n\ndef"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n > 0 and n <= 10 ** 6:\n        sum = 0\n        while n:\n            sum += n % 10\n            n //= 10\n        if sum * sum - n == 0:\n            return str(sum)\n    return '-1'\n\"\"\"\n\ndef"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 1:\n        print(-1)\n        return\n    n = n//2\n    m = n\n    while m > 0:\n        d = m % 10\n        m = m // 10\n        if m == 0:\n            if d > 0:\n                print(-1)\n                return\n        else:\n            if n % m == 0:\n                print(n)\n                return\n    print(-1)\n\n\ndef"
    },
    {
        "number": 472,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    p = 2\n    while n > p * p:\n        p += 1\n    if n == p * p:\n        return str(p)\n    n %= p * p\n    for i in range(1, p):\n        if (n * i) % (p * p) == 1:\n            return str(i)\n    return '-1'\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    start_time = [int(item) for item in stdin.split(' ')]\n    print(start_time)\n    start_hour = start_time[0]\n    start_minute = start_time[1]\n    duration_hour = int(stdin.split(' ')[1].split(':')[0])\n    duration_minute = int(stdin.split(' ')[1].split(':')[1])\n\n    print(start_hour, start_minute, duration_hour, duration_minute)\n\n    if start_hour >= duration_hour:\n        if start_minute >= duration_minute:\n            hour_diff = start_hour - duration_hour\n            minute_diff = start_minute - duration_minute\n            print(hour_diff, minute_diff)\n            if minute_diff < 0:\n                hour_diff -= 1\n                minute_diff += 60\n            return \"{:02d}:{:02d}\".format(hour_diff, minute_diff)\n        else:\n            hour_diff = start_hour - duration_hour\n            minute_diff = start_minute + 60 - duration_minute\n            return \"{:02d}:{:02d}\".format(hour_diff, minute_diff)\n    else:\n        if start_minute >= duration_minute:\n            hour_diff = duration_hour - start_hour\n            minute_diff = start_minute - duration_minute\n            return \"{:02d}:{:02d}\".format(hour_diff, minute_diff)\n        else:\n            hour_diff = duration_hour - start_hour\n            minute_diff = duration_minute + 60 - start_minute\n            return \"{:02d}:{:02d}\".format(hour_diff, minute_diff)\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    hh, mm = stdin.split(':')\n    p = str(int(hh) + int(mm) // 60) + ':' + str(int(mm) % 60)\n    return p\n\n'''\n\ndef"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    time1, time2 = stdin.split(\" \")\n    time1 = time1[:-2]\n    time2 = time2[:-2]\n    return time1 + \":\" + time2"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    current = stdin.split(':')\n    current_hour = int(current[0])\n    current_minute = int(current[1])\n\n    slept = stdin.split(':')\n    slept_hour = int(slept[0])\n    slept_minute = int(slept[1])\n\n    diff_hour = slept_hour - current_hour\n    diff_minute = slept_minute - current_minute\n\n    diff_minute = diff_minute + 60 * diff_hour\n    result = [0, 0]\n    if diff_minute >= 60:\n        result[1] = diff_minute % 60\n    else:\n        result[1] = diff_minute\n\n    result[0] = diff_hour\n\n    return f'{result[0]:02d}:{result[1]:02d}'\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split(':')\n    s1 = int(s[0]) * 3600 + int(s[1]) * 60\n    s2 = int(s[0]) * 3600 + int(s[1]) * 60 + int(s[2])\n    s3 = str(int((s2 - s1) / 3600)) + ':' + str(int((s2 - s1) / 60 % 60))\n    return s3\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    time = stdin.split(':')\n    if time[1] == '00':\n        return '0:00'\n    return f'{int(time[0])+int(time[1])//60}:{\"0\"+str(time[1])[-2:] if time[1][-2] == \"0\" else str(time[1])}'\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    cur_time, sleep_time = stdin.split()\n    if int(cur_time[3:]) + int(sleep_time[3:]) > 60:\n        cur_time = cur_time[:3] + str(int(cur_time[3:]) - 60) + cur_time[4:]\n    if int(cur_time[3:]) + int(sleep_time[3:]) == 60:\n        if int(cur_time[:2]) + 1 == 24:\n            cur_time = \"00\" + cur_time[3:]\n        else:\n            cur_time = str(int(cur_time[:2]) + 1) + cur_time[2:]\n    print(cur_time)\n    return cur_time[:2] + \":\" + cur_time[2:]"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    st = stdin.split(':')\n    stdin = (int(st[0]), int(st[1]))\n    return '{:02d}:{:02d}'.format(stdin[0], stdin[1] - t)\n"
    },
    {
        "number": 473,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    s = stdin.split(' ')\n    h1, m1 = int(s[0].split(':')[0]), int(s[0].split(':')[1])\n    h2, m2 = int(s[1].split(':')[0]), int(s[1].split(':')[1])\n    \n    if m1 == m2:\n        return '{:02d}:{:02d}'.format(h1, m1 + 1 if m1 < 59 else 00)\n    else:\n        return '{:02d}:{:02d}'.format(h1, m1 + 1 if m1 < 59 else 00)\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def get_max_mean(nums: list[int]) -> int:\n        mean = 0\n        left = 0\n        right = 0\n        longest = 0\n        for i in range(len(nums)):\n            mean += nums[i]\n            right += nums[i]\n            if right > longest:\n                longest = right\n            if i - left + 1 > right - nums[i]:\n                right -= nums[i]\n                left = i\n                mean -= nums[i]\n            else:\n                right -= nums[i]\n        return longest\n\n    n = int(stdin)\n    nums = list(map(int, stdin.split()))\n    print(get_max_mean(nums))\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    n, *a = list(map(int, stdin.split(\"\\n\")[0].split()))\n\n    # sort array\n    a.sort()\n\n    # find max arithmetic mean\n    mean = 0\n    i, j = 0, 1\n    while j < n:\n        mean = (mean * (j - i) + a[j]) / (j - i + 1)\n        if mean > 1 / (j - i + 1):\n            i += 1\n        j += 1\n    return str(j - i)\n\"\"\"\n\ndef"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return str(len(stdin))"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    A = [int(x) for x in stdin.readline().strip().split(' ')]\n    A.sort()\n    d = {}\n    for i in range(N - 1):\n        if A[i] <= A[i + 1]:\n            a = A[i]\n            b = A[i + 1]\n            d[(a, b)] = A[i + 1] - A[i]\n    lst = []\n    for k, v in d.items():\n        lst.append(v)\n    return d, lst\n\n\ndef"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\n-------\n\nYou are given array $a_1, a_2, \\dots, a_n$. Find the subsegment $a_l, a_{l+1}, \\dots, a_r$ ($1 \\le l \\le r \\le n$) with maximum arithmetic mean $\\frac{1}{r - l + 1}\\sum\\limits_{i=l}^{r}{a_i}$ (in floating-point numbers, i.e. without any rounding).\n\nIf there are many such subsegments find the longest one.\n\n\n-----Input-----\n\nThe first line contains single integer $n$ ($1 \\le n \\le 10^5$) \u2014 length of the array $a$.\n\nThe second line contains $n$ integers $a_1, a_2, \\dots, a_n$ ($0 \\le a_i \\le 10^9$) \u2014 the array $a$.\n\n\n-----Output-----\n\nPrint the single integer \u2014 the length of the longest subsegment with maximum possible arithmetic mean.\n\n\n-----Example-----\nInput\n5\n6 1 6 6 0\n\nOutput\n2\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # write the solution in another function,\n    # return it and put it in the variable `res`\n    def f(arr: List[int]) -> int:\n        l, r = 0, 1\n        m = 1e9\n        while r < len(arr):\n            s = sum(arr[l:r + 1])\n            m = min(m, s)\n            l += 1\n            r += 1\n        return m\n    return len(sorted(stdin.split(), key=f)[-1])\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n    a.sort()\n    s = 0\n    res = 0\n    for i in range(n - 1):\n        s += a[i]\n        res = max(res, (i + 1) // 2)\n        if s * (n - i - 1) > (n - i) * s:\n            res = i + 1\n    return str(res)\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    a.sort()\n    max_len = 0\n    max_mean = 0\n    for i in range(len(a)):\n        temp_len = 1\n        temp_mean = a[i]\n        for j in range(i + 1, len(a)):\n            if a[j] >= temp_mean:\n                temp_len += 1\n                temp_mean += a[j]\n                if temp_len > max_len:\n                    max_len = temp_len\n                    max_mean = temp_mean\n            else:\n                break\n    return str(max_len)\n"
    },
    {
        "number": 474,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\nreturn stdin\n"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def calc_ways(n, m, k, cnt, memo):\n        if n > k:\n            return 0\n        elif n == 0:\n            return 1\n        elif cnt == m:\n            return 1\n        else:\n            if cnt == 0:\n                cnt = m\n            if (n, cnt, k - 1) in memo:\n                return memo[(n, cnt, k - 1)]\n            else:\n                memo[(n, cnt, k - 1)] = calc_ways(n - 1, m, k, cnt - 1, memo) + calc_ways(n - 1, m, k, cnt, memo)\n            return memo[(n, cnt, k - 1)]\n    memo = {}\n    print(calc_ways(int(stdin.split()[0]), int(stdin.split()[1]), int(stdin.split()[2]), 0, memo))\n\n---\ndef"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    print(f\"{solve()}\")\n"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    parameters = stdin.split('\\n')\n    n = int(parameters[0].split(' ')[0])\n    m = int(parameters[0].split(' ')[1])\n    k = int(parameters[0].split(' ')[2])\n    numbers_of_colors = n - k\n    return str(int(numbers_of_colors / m))\n\n\ndef"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\ndef"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(stdin))\n"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n  return '''print(1)''''\n"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  return '3'[:stdin]\n\"\"\"\n\ndef"
    },
    {
        "number": 475,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return \"YES\" if n == int(str(n) * 3) or n == int(str(n) + str(n) + str(n)) else \"NO\"\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"This function returns 'YES' if input number is a magic number otherwise 'NO' \"\"\"\n    number = stdin[::-1]\n    number_sum = sum(int(x) for x in number)\n    if number_sum == int(stdin) and number!= stdin:\n        return 'YES'\n    else:\n        return 'NO'\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if int(stdin) == int(str(1) + str(14) + str(144)) else 'NO'\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    res = 'NO'\n    lst = [int(x) for x in stdin]\n    if sum(lst) == int(stdin):\n        res = 'YES'\n    return res\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    num = stdin[0:len(stdin)]\n    if len(num) <= 2 or num[0]!= \"1\" or num[-1]!= \"4\":\n        return \"NO\"\n    n1 = int(num)\n    n2 = int(num[:len(num) - 1])\n    n3 = int(num[:len(num) - 2])\n    if n1 + n2 + n3 == int(num):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n\nprint(solution(\"11414\"))\nprint(solution(\"1111\"))\nprint(solution(\"441231\"))\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if (int(stdin[:3])+int(stdin[-3:]))%10==0 else 'NO'\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    number = stdin\n    if len(number) == 1:\n        print(\"YES\")\n    elif len(number) == 2:\n        if int(number[0]) + int(number[1]) == int(number):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    elif len(number) == 3:\n        if int(number[0]) + int(number[1]) + int(number[2]) == int(number):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    elif len(number) == 4:\n        if int(number[0]) + int(number[1]) + int(number[2]) + int(number[3]) == int(number):\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    else:\n        print(\"NO\")\n        # print(\"YES\")"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''TODO'''\n    return 'YES' if len([1 for n in range(len(stdin)) if stdin[n]!= stdin[n + 1]]) == 0 else 'NO'\n"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    digits = [int(i) for i in n if i.isdigit()]\n    t = 1\n    for i in range(len(digits)):\n        t *= digits[i]\n        if t == 144:\n            return 'YES'\n        elif t > 10**9:\n            return 'NO'\n    return 'NO'"
    },
    {
        "number": 476,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    if n in '1 14 144'.split():\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    data = list(map(int, stdin.split()))\n    a = data[4]\n    b = data[5]\n    n = data[0]\n    m = data[1]\n    i = data[2]\n    j = data[3]\n    if n == 1 and m == 1:\n        print(0)\n        return\n    if n == i and m == j:\n        print(0)\n        return\n    if (n-1) == i and (m-1) == j:\n        print(0)\n        return\n    print(n+m)\n    return"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, i, j, a, b = list(map(int, stdin.split()))\n    moves = min(n - i, a) + min(m - j, b)\n    return moves if moves < 1 else 'Poor Inna and pony!'\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\""
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Takes standard input input and returns output to stdout\n    :param stdin: standard input input\n    :return: string to stdout\n    \"\"\"\n    n, m, i, j, a, b = list(map(int, stdin.split()))\n    candy = [[''for _ in range(m)] for _ in range(n)]\n    for aa in range(n):\n        candy[aa][0] = '-'\n        candy[aa][-1] = '|'\n    for bb in range(m):\n        candy[0][bb] = '-'\n        candy[-1][bb] = '|'\n    for aa in range(1, n - 1):\n        candy[aa][0] = '|'\n        candy[aa][-1] = '|'\n    for bb in range(1, m - 1):\n        candy[0][bb] = '|'\n        candy[-1][bb] = '|'\n    candy[i][j] = '-'\n    for _ in range(int(stdin.split()[-1])):\n        candy[i][j] = '.'\n        if i - a >= 1:\n            i -= a\n            candy[i][j] = '.'\n        elif i + a < n:\n            i += a\n            candy[i][j] = '.'\n        if j - b >= 1:\n            j -= b\n            candy[i][j] = '.'\n        elif j + b < m:\n            j += b\n            candy[i][j] = '.'\n    for aa in range(n):\n        print(*candy[aa], sep='')\n    return ''\n\nprint(solution(input()))\n\n\"\"\"\n\n1) \u0412 \u043f\u0435\u0440\u0432\u0443\u044e \u043e\u0447\u0435\u0440\u0435\u0434\u044c \u0437\u0430\u0434\u0430\u0447\u0438 \u043e\u0442 \u044d\u0442\u043e\u0433\u043e \u043a\u0443\u0440\u0441\u0430 \u0434\u0430\u043d\u043e \u0437\u0430\u0434\u0430\u043d\u0438\u0435 \u043d\u0430 \u0437\u0430\u043a\u0440\u0435\u043f\u043b\u0435\u043d\u0438\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u043d\u043e-\u043e\u0440\u0438\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435. \u0420\u0435\u0430\u043b\u0438\u0437\u0443\u0439\u0442\u0435 \u043a\u043b\u0430\u0441\u0441 \u00ab\u0414\u0430\u0442\u0430\u00bb, \u0444\u0443\u043d\u043a\u0446\u0438\u044f-\u043a\u043e\u043d\u0441\u0442\u0440\u0443\u043a\u0442\u043e\u0440 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u0434\u043e\u043b\u0436\u043d\u0430 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c \u0434\u0430\u0442\u0443 \u0432 \u0432\u0438\u0434\u0435 \u0441\u0442\u0440\u043e\u043a\u0438 \u0444\u043e\u0440\u043c\u0430\u0442\u0430 \u00ab\u0434\u0435\u043d\u044c-\u043c\u0435\u0441\u044f\u0446-\u0433\u043e\u0434\u00bb.\n\u0412 \u0440\u0430\u043c\u043a\u0430\u0445 \u043a\u043b\u0430\u0441\u0441\u0430 \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0439\u0442\u0435 \u0434\u0432\u0430 \u043c\u0435\u0442\u043e\u0434\u0430. \u041f\u0435\u0440\u0432\u044b\u0439, \u0441 \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\u043e\u043c @classmethod, \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u0437\u0432\u043b\u0435\u043a\u0430\u0442\u044c \u0447\u0438\u0441\u043b\u043e, \u043c\u0435\u0441\u044f\u0446, \u0433\u043e\u0434 \u0438 \u043f\u0440\u0435\u043e\u0431\u0440\u0430\u0437\u043e\u0432\u044b\u0432\u0430\u0442\u044c \u0438\u0445 \u0442\u0438\u043f \u043a \u0442\u0438\u043f\u0443 \u00ab\u0427\u0438\u0441\u043b\u043e\u00bb.\n\u0412\u0442\u043e\u0440\u043e\u0439, \u0441 \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\u043e\u043c @staticmethod, \u0434\u043e\u043b\u0436\u0435\u043d \u043f\u0440\u043e\u0432\u043e\u0434\u0438\u0442\u044c \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044e \u0447\u0438\u0441\u043b\u0430, \u043c\u0435\u0441\u044f\u0446\u0430 \u0438 \u0433\u043e\u0434\u0430 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043c\u0435\u0441\u044f\u0446 \u2014 \u043e\u0442 1 \u0434\u043e 12). \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u0442\u044c \u0440\u0430\u0431\u043e\u0442\u0443 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u043e\u0439 \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u043d\u0430 \u0440\u0435\u0430\u043b\u044c\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445.\n\n\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0430\u0441\u0441 \u00ab\u0421\u0442\u0430\u0434\u0438\u043e\u043d\u00bb. \u041e\u043d \u0434\u043e\u043b\u0436\u0435\u043d \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u043c\u0435\u0442\u043e\u0434 \u0440\u0430\u0441\u043f\u0435\u0447\u0430\u0442\u043a\u0438 \u0432\u0441\u0435\u0445 \u0444\u0443\u0442\u0431\u043e\u043b\u0438\u0441\u0442\u043e\u0432, \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0442\u044c \u0432 \u043d\u0435\u0433\u043e \u043d\u043e\u0432\u043e\u0433\u043e \u0444\u0443\u0442\u0431\u043e\u043b\u0438\u0441\u0442\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043c\u0435\u0442\u043e\u0434\u0430 add_player, \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0442\u044c \u0442\u0440\u0438 \u043c\u0430\u0442\u0447\u0430 \u0434\u043b\u044f \u043d\u043e\u0432\u043e\u0433\u043e \u0444\u0443\u0442\u0431\u043e\u043b\u0438\u0441\u0442\u0430 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043c\u0435\u0442\u043e\u0434\u0430 add_match. \u0420\u0430\u0441\u043f\u0435\u0447\u0430\u0442\u0430\u0442\u044c \u0432\u0441\u0435 \u0444\u0443\u0442\u0431\u043e\u043b\u0438\u0441\u0442\u044b \u0432 \u0441\u0442\u0430\u0434\u0438\u043e\u043d\u0435 \u043f\u043e \u043a\u043b\u044e\u0447\u0443 \u0444\u0443\u0442\u0431\u043e\u043b\u0438\u0441\u0442\u0430. \u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0444\u0443\u0442\u0431\u043e\u043b\u0438\u0441\u0442\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043c\u0435\u0442\u043e\u0434\u0430 edit_player. \u0420\u0435"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m, i, j, a, b = map(int, stdin.split('\\n')[0].split())\n    if (i + a == n) and (j + b == m):\n        return 0\n    if (i - a == 0) or (i - a == n - 1) or (j - b == 0) or (j - b == m - 1):\n        return 1\n    return 2\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, m, i, j, a, b = map(int, stdin.split())\n    if (i == 1 and j == m) or (i == n and j == 1):\n        print('Poor Inna and pony!')\n        return\n    print(min(abs(a - i) + abs(b + j), abs(a + i) + abs(b + j), abs(a - i) + abs(b - j), abs(a + i) + abs(b - j)))\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # n, m, i, j, a, b = [int(n) for n in stdin.split(\" \")]\n    n, m, i, j, a, b = [int(n) for n in stdin.split(\" \")]\n    if (i == 1 and j == m) or (i == n and j == 1):\n        print(min(a, b))\n    else:\n        print(\"Poor Inna and pony!\")\n"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m, i, j, a, b = [int(x) for x in stdin.split()]\n    print(min([abs(i - 1) + abs(j - m), abs(i - n) + abs(j - 1),\n               abs(i - n) + abs(j - m), abs(i - 1) + abs(j - 1)]))\n\ndef"
    },
    {
        "number": 477,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split()\n    n, m, i, j, a, b = int(line[0]), int(line[1]), int(line[2]), int(line[3]), int(line[4]), int(line[5])\n    if (i + a < 1 or i + a > n) and (j + b < 1 or j + b > m):\n        return 'Poor Inna and pony!'\n    elif i + a < 1 or i + a > n:\n        return n - i + b\n    elif j + b < 1 or j + b > m:\n        return m - j + a\n    else:\n        return 0"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find the maximum possible number of characters you can remove if you choose the\n    sequence of moves optimally.\n\n    >>> solution(stdin)\n    '4'\n    \"\"\"\n    s = stdin\n    # we can use the itertools.permutations or the itertools.combinations\n    # to find the next index to remove.\n    # I am not sure which one is better, using itertools.combinations\n    # or permutations is slower. The speed depends on the number of\n    # possible combinations.  For example,\n    # len(s) = 10  and len(s) = 11 itertools.combinations(s, 10)\n    # will return 749, and itertools.permutations(s, 10) will return\n    # 1088.\n    # I think itertools.permutations is faster for s, len(s) = 11\n    # because it doesn't need to calculate the factorial of len(s)\n    for i in itertools.permutations(s, len(s)):\n        if ''.join(i[i.index('a'):len(s) - 1]) == ''.join(s[:s.index('a')]) + \\\n                ''.join(s[s.index('a') + 1:]):\n            return str(len(s) - i.index('a'))\n    return '0'\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    i = 0\n    n = len(s)\n    ans = n\n    while i < n - 1:\n        l = i\n        r = i + 1\n        while s[l] == s[r]:\n            if r == n - 1:\n                ans -= 1\n                break\n            l += 1\n            r += 1\n        i = r\n    return ans\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time: O(n)\n    Space: O(n)\n    \"\"\"\n    s = stdin\n    s_len = len(s)\n    prev = [-1] * 26\n    max_count = 0\n    for i in range(1, s_len):\n        prev[ord(s[i]) - 97] = ord(s[i - 1]) - 97\n        max_count = max(max_count, i - prev[ord(s[i]) - 97])\n\n    return s_len - max_count\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = len(s)\n    dp = [[0]*n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                dp[i][j] = 1\n            elif i < j:\n                dp[i][j] = dp[i][j-1]\n            else:\n                dp[i][j] = dp[i-1][j]\n    i, j = n-1, n-1\n    ans = 0\n    while i > 0 and j > 0:\n        if s[i] == s[j]:\n            ans += dp[i-1][j-1]\n            j -= 1\n            i -= 1\n        elif s[i] < s[j]:\n            ans += dp[i-1][j]\n            j -= 1\n        else:\n            ans += dp[i][j-1]\n            i -= 1\n    return ans\n\ndef"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the maximum number of characters that can be removed in order to get an alphabetically sorted string.\"\"\"\n    stdin = stdin.split()\n    s = stdin[1]\n    s = list(s)\n    prev = ''\n    remove = 0\n    for i in range(len(s)):\n        if s[i] < prev:\n            if s[i]!= prev and prev!= '':\n                remove += 1\n        prev = s[i]\n    print(remove)\n    return ''\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(bacabcab)\n    4\n    >>> solution(bcda)\n    3\n    >>> solution(abbbbb)\n    5\n    \"\"\"\n\n    s = stdin\n    m = {'a': 'b', 'b': 'a', 'c': 'd', 'd': 'c'}\n    cnt = 0\n\n    for i in range(len(s) - 1):\n        if s[i]!= m[s[i + 1]]:\n            cnt += 1\n    return cnt\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    s = [int(x) for x in s]\n    s = \"\".join([chr(x) for x in s])\n    if len(s) == 1:\n        return 0\n    if len(s) == 2:\n        return 1\n    for i in range(len(s)):\n        if s[i] == s[i - 1]:\n            if i == 1:\n                s = s[0]\n            elif i == len(s) - 1:\n                s = s[:-1]\n            else:\n                s = s[:i - 1] + s[i + 1:]\n    return len(s)\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    s = stdin.strip()\n    n = len(s)\n    if n == 1:\n        return 0\n    \n    v = [0] * n\n    v[0] = 1\n    v[1] = 2\n    \n    for i in range(2, n):\n        v[i] = max(v[i-1], v[i-2] + 1)\n    \n    return v[n-1]\n"
    },
    {
        "number": 478,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the maximum number of characters you can remove if you choose the\n    sequence of operations optimally.\n\n    >>> solution('bacabcab')\n    4\n    >>> solution('bcda')\n    3\n    >>> solution('abbbbb')\n    5\n    \"\"\"\n    return 42\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"A solution to the task.\"\"\"\n    # Set up the input.\n    n, k = [int(i) for i in stdin.split()]\n    denominations = sorted([int(i) for i in stdin.split()])\n    q = int(stdin.split()[-1])\n    # Compute the result.\n    total = 0\n    output = []\n    for i in range(q):\n        total = int(stdin.split()[i+2])\n        output.append(min_denomination(total, denominations, k))\n    # Print the result.\n    print(*output, sep=\"\\n\")\n\n\ndef"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('6 20\\n10 50 100 500 1000 5000\\n8\\n4200\\n100000\\n95000\\n96000\\n99000\\n10100\\n2015\\n9950')\n    '6\\n20\\n19\\n20\\n-1\\n3\\n-1\\n-1'\n    \"\"\"\n    from typing import List\n\n    n, k = [int(i) for i in stdin.split()]\n    denominations: List[int] = [int(i) for i in stdin.splitlines()[1].split()]\n    denominations.sort()\n    q = int(stdin.splitlines()[2])\n    sums: List[int] = [int(i) for i in stdin.splitlines()[3:]]\n\n    def get_min_num_of_bills(sum_of_money: int, denominations: List[int]) -> int:\n        counter = 0\n        for den in denominations:\n            if sum_of_money >= den:\n                sum_of_money -= den\n                counter += 1\n            else:\n                break\n        return counter\n\n    for sum_of_money in sums:\n        print(get_min_num_of_bills(sum_of_money, denominations))\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def get_result(denom: List[int], money: int) -> int:\n        start = 0\n        end = len(denom) - 1\n        result = -1\n        while start <= end:\n            mid = (start + end) // 2\n            if denom[mid] > money:\n                result = mid\n                end = mid - 1\n            else:\n                start = mid + 1\n        return result\n\n    num_denom, k = map(int, stdin.split())\n    denom = [int(n) for n in stdin.split()]\n    denom.sort()\n    money = 0\n    result = \"\"\n    for i in range(k):\n        money = int(stdin.split()[i])\n        result += str(get_result(denom, money)) + \" \"\n    return result\nprint(solution(input()))\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    lst = list(map(int, stdin.readline().split()))\n    q = int(stdin.readline())\n    for _ in range(q):\n        n = int(stdin.readline())\n        for i in range(n - 1, -1, -1):\n            for j in range(lst[i] - 1, -1, -1):\n                if j >= k:\n                    print(j)\n                    break\n                if j < 0:\n                    print(-1)\n                    break\n    return ''\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # return result\n    n, k = [int(i) for i in stdin.split()]\n    denominations = [int(i) for i in stdin.split()]\n    denominations.sort()\n    q = int(stdin.split()[-1])\n    for _ in range(q):\n        money = int(stdin.split()[-1])\n        count = 0\n        for i in denominations:\n            if money < i:\n                break\n            money -= i\n            count += 1\n        print(count)\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('6 20\\n10 50 100 500 1000 5000\\n8\\n4200\\n100000\\n95000\\n96000\\n99000\\n10100\\n2015\\n9950\\n')\n    '6\\n20\\n19\\n20\\n-1\\n3\\n-1\\n-1'\n    \"\"\"\n    n, k = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    bills = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n\n    bills.sort()\n    bills = bills[::-1]\n\n    sums = [0] * n\n\n    sums[0] = bills[0]\n\n    for i in range(1, n):\n        sums[i] = sums[i - 1] + bills[i]\n\n    def backtrack(ind: int, sum: int):\n        if sum == k:\n            return 0\n\n        if sum > k:\n            return -1\n\n        if ind == n:\n            return -1\n\n        min_sums = n\n        for i in range(ind, n):\n            tmp_sum = sums[i] - bills[ind] + sum\n            if tmp_sum >= k:\n                min_sums = min(min_sums, backtrack(i + 1, tmp_sum))\n\n        return min_sums + 1\n\n    for _ in range(int(stdin.split('\\n')[2])):\n        sum = int(stdin.split('\\n')[3 + _])\n        if backtrack(0, sum) == -1:\n            print(-1)\n        else:\n            print(backtrack(0, sum))\n"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # a, b = stdin.strip().split()\n    # a, b = list(map(int, stdin.strip().split()))\n    # q = int(stdin.strip())\n    # n = int(stdin.strip())\n    # s = list(map(int, stdin.strip().split()))\n    # q = int(stdin.strip())\n    # p = list(map(int, stdin.strip().split()))\n\n    # n, k = a, b\n    # a = list(map(int, stdin.strip().split()))\n    # q = int(stdin.strip())\n    # p = list(map(int, stdin.strip().split()))\n\n    n, k = map(int, stdin.strip().split())\n    a = list(map(int, stdin.strip().split()))\n    a.sort()\n    p = list(map(int, stdin.strip().split()))\n    \n    d = dict()\n    d[a[0]] = 0\n    for i in range(1, n):\n        if k >= a[i]*(a[i]-1)/2:\n            d[a[i]] = a[i]-1\n        else:\n            d[a[i]] = a[i]\n    \n    q = int(stdin.strip())\n    for i in range(q):\n        x = p[i]\n        if x in d:\n            print(d[x])\n        else:\n            print(-1)\n\n\n    return ''"
    },
    {
        "number": 479,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"\"\"\n   ... 6 20\n   ... 10 50 100 500 1000 5000\n   ... 8\n   ... 4200\n   ... 100000\n   ... 95000\n   ... 96000\n   ... 99000\n   ... 10100\n   ... 2015\n   ... 9950\n   ... \"\"\")\n    '1\\n1\\n1\\n2\\n2\\n2\\n2\\n-1\\n3\\n-1\\n-1'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 480,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S, x_1, x_2, t_1, t_2, p, d = map(int, stdin.split('\\n')[0].split(' '))\n    \n    t = t_1 if p - d <= S else t_2\n    x = x_1 if p - d <= S else x_2\n    \n    return str(t * (x - x_1) // (t_1 - t_2) + t * (x_1 - x) // (t_1 - t_2))\n"
    },
    {
        "number": 480,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    s, x_1, x_2, t_1, t_2, p, d = map(int, stdin.split())\n    if x_1 == x_2:\n        return 0\n    elif d == 1:\n        if p == x_2:\n            return t_2 + t_1\n        else:\n            return t_2 + 2 * s + t_1\n    else:\n        if p == x_1:\n            return t_2 + t_1\n        else:\n            return t_2 + 2 * s + t_1\n"
    },
    {
        "number": 480,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    s, x_1, x_2 = [int(n) for n in stdin.split(' ')]\n    t_1, t_2 = [int(n) for n in stdin.split(' ')[-2:]]\n    p, d = [int(n) for n in stdin.split(' ')[-4:-2]]\n    x_d = x_1 if d == 1 else x_2\n    x_u = x_2 if d == 1 else x_1\n    t_d = t_1 if d == 1 else t_2\n    t_u = t_2 if d == 1 else t_1\n    if x_u - x_d < t_u:\n        return '{}'.format(x_u - x_d + t_u)\n    elif x_u - x_d > t_u:\n        return '{}'.format(x_u - x_d - t_u)\n    else:\n        return '{}'.format(t_u - t_d)\n\nprint(solution(stdin))\n"
    },
    {
        "number": 480,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n\n    s, x_1, x_2 = int(lines[0].split()[0]), int(lines[0].split()[1]), int(lines[0].split()[2])\n    t_1, t_2 = int(lines[1].split()[0]), int(lines[1].split()[1])\n    p, d = int(lines[2].split()[0]), int(lines[2].split()[1])\n\n    if d == -1:\n        return t_2 * (s - x_1 - p) + (t_2 - t_1) * (s - x_2 - p) + t_2 * abs(x_1 - x_2)\n    else:\n        return t_2 * (p - x_1 - s) + (t_2 - t_1) * (p - x_2 - s) + t_2 * abs(x_1 - x_2)\n"
    },
    {
        "number": 480,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    s, x1, x2, t1, t2, p, d = map(int, stdin.split())\n    return str(abs(p - x1) * t1 + abs(s - p) * t2)\n"
    },
    {
        "number": 480,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x1, x2 = map(int, stdin.split())\n    t1, t2 = map(int, stdin.split())\n    p, d = map(int, stdin.split())\n    return x1, x2, t1, t2, p, d\n    \nprint(solution('1 2 3 4'))\nprint(solution('2 3 4 5'))\nprint(solution('4 5 0'))\nprint(solution('5 4 0'))\nprint(solution('3 4 1'))\nprint(solution('4 5 -1'))\nprint(solution('4 5 1'))"
    },
    {
        "number": 480,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s, x_1, x_2, t_1, t_2, p, d = [int(i) for i in stdin.split('\\n')]\n    if abs(p - x_1) == 1:\n        p = 1 if p < x_1 else s - 1\n    elif abs(p - x_2) == 1:\n        p = 1 if p > x_2 else s - 1\n    if d == - 1:\n        p = s - p\n    print(max(abs(s - p - x_1), abs(s - p - x_2)))\n"
    },
    {
        "number": 480,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 480,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s, x1, x2, t1, t2, p, d = [int(i) for i in stdin.splitlines()[0].split()]\n    return str(max(abs(x1 - s - p), abs(x2 - s - p)))\n"
    },
    {
        "number": 480,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find minimum time to get from point x_1 to point x_2.\"\"\"\n    s, x_1, x_2 = map(int, stdin.split())\n    t_1, t_2 = map(int, stdin.split())\n    p, d = map(int, stdin.split())\n    # \u043f\u043e\u0441\u0442\u0443\u043f\u0438\u0432 \u0432 \u043e\u0431\u0449\u0443\u044e \u043b\u0438\u043d\u0438\u044e, \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0447\u0435\u0440\u0435\u0437 p \u0441\u0435\u043a\u0443\u043d\u0434\n    # \u043d\u0430 \u0434\u0440\u0443\u0433\u0443\u044e, \u0447\u0442\u043e\u0431\u044b \u043f\u0440\u043e\u0439\u0442\u0438 \u0432 \u0434\u0432\u0438\u0436\u0435\u043d\u0438\u0438 \u043d\u0430\u0432\u0441\u0442\u0440\u0435\u0447\u0443\n    t_2_to_x_1 = x_2 - x_1\n    t_p = t_2_to_x_1 - t_1\n    if d == 1:\n        t_p *= -1\n    t_s = s - p\n    return abs(t_p - t_s)\n"
    },
    {
        "number": 481,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 481,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\nreturn ''\n"
    },
    {
        "number": 481,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return '{}'.format(0)\n"
    },
    {
        "number": 481,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 481,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 481,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\""
    },
    {
        "number": 481,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    pass\n"
    },
    {
        "number": 481,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(sum(int(num) for line in stdin.splitlines() for num in line.split()))\n"
    },
    {
        "number": 481,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    a = stdin.strip().split()\n    n = int(a[0])\n    x = int(a[1])\n    return f'{x} occurs {n.count(x)} times'\n    '''\n    from itertools import product\n    n = int(stdin.strip())\n    x = int(stdin.strip())\n    return sum(1 for i in product(range(1, n + 1), repeat = 2) if i[0] * i[1] == x)\n"
    },
    {
        "number": 481,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return '{}'.format(0)\n\"\"\"\n\n\ndef"
    },
    {
        "number": 482,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    #stdin = input()\n    n, k = [int(i) for i in stdin.split(' ')]\n    s = 'a' * n\n    while True:\n        if k > len(set(s)) or len(s) < n:\n            k = k - len(set(s))\n            s = s + 'a'\n        else:\n            break\n    return s[:n]\n"
    },
    {
        "number": 482,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    k, n = map(int, stdin.split())\n    s = 'a' + ''.join(set(stdin.lower()))\n    return ''.join(s[i] for i in range(k, n + 1) if i % 2 == 0)\n    # return ''.join(s[i] for i in range(k, n + 1) if i % 2 == 0 and len(set(s[i])) == k)\n    # return ''.join(s[i] for i in range(k, n + 1) if len(set(s[i])) == k)\n    # return ''.join(s[i] for i in range(k, n + 1) if len(set(s[i])) == k and s[i]!= s[i - 1] and s[i]!= s[i + 1])\n    # return ''.join(s[i] for i in range(k, n + 1) if len(set(s[i])) == k and s[i]!= s[i - 1] and s[i]!= s[i + 1])\n    # return ''.join(s[i] for i in range(k, n + 1) if len(set(s[i])) == k and s[i]!= s[i - 1] and s[i]!= s[i + 1])\n    # return ''.join(s[i] for i in range(k, n + 1) if len(set(s[i])) == k and s[i]!= s[i - 1] and s[i]!= s[i + 1])"
    },
    {
        "number": 482,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    length, distinct_symbols = stdin.split()\n    length, distinct_symbols = int(length), int(distinct_symbols)\n\n    if distinct_symbols > length:\n        return ''.join(sorted(set(stdin[:length])))\n    return ''.join(sorted(set(stdin[:length - distinct_symbols] + stdin[length - distinct_symbols + 1:])))\n\n\ndef"
    },
    {
        "number": 482,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    result = generate_password(n, k)\n    print(result)\n\ndef"
    },
    {
        "number": 482,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    lst = stdin.split(\" \")\n    print(lst)\n    n = int(lst[0])\n    k = int(lst[1])\n\n    arr = list(string.ascii_lowercase)\n    arr = random.sample(arr, k)\n    \n    lst = []\n    for i in range(n):\n        random.shuffle(arr)\n        random.shuffle(arr)\n        lst.append(arr[i])\n    \n    return \"\".join(lst)"
    },
    {
        "number": 482,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    takes length of password and number of distinct symbols and returns random password\n    \"\"\"\n    length = int(stdin.split()[0])\n    symbols = int(stdin.split()[1])\n    alphabet = list(string.ascii_lowercase)\n    res = []\n    for i in range(symbols):\n        x = random.choice(alphabet)\n        res.append(x)\n        alphabet.remove(x)\n    res = \"\".join(res)\n    for i in range(length - symbols):\n        x = random.choice(alphabet)\n        res += x\n        alphabet.remove(x)\n    return res\n\n\ndef"
    },
    {
        "number": 482,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, k = [int(i) for i in stdin.split()]\n    if k == 1:\n        print(\"a\")\n    elif k == 2:\n        print('ab')\n    elif k == 3:\n        print('abc')\n    elif k == 4:\n        print('abcd')\n    elif k == 5:\n        print('abcde')\n    elif k == 6:\n        print('abcdef')\n    else:\n        print(k)\n        k = k-5\n        i = 1\n        while k > 0:\n            print(chr(ord('a') + i), end=\"\")\n            i += 1\n            k -= 1\n    return \"\"\n"
    },
    {
        "number": 482,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('4 3\\njava')\n    'java'\n    >>> solution('6 6\\npython')\n    'python'\n    >>> solution('5 2\\nphphp')\n    'phphp'\n    \"\"\"\n    n, k = [int(s) for s in stdin.split(' ')]\n    n, k = min(n, 26), min(n, k)\n    cnt = Counter(stdin.replace(' ', ''))\n    while True:\n        curr = ''.join(random.choices(string.ascii_lowercase, k=n))\n        if len(set(curr)) == k and cnt[curr[i]]:\n            return curr\n"
    },
    {
        "number": 482,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # -----Input-----\n    # the length of the password n, the number of distinct symbols k\n    n, k = stdin.split()\n    n, k = int(n), int(k)\n    # -----Output-----\n    # the password\n    res = ''\n    # -----My code-----\n    import itertools\n    # create all possible combinations of k distinct symbols\n    lst = [chr(i) for i in range(97, 97 + k)]\n    # select only combinations with n length\n    for combination in itertools.combinations(lst, n):\n        res = ''.join(combination)\n        # print(res)\n        if is_valid(res):\n            break\n    return res\n\ndef"
    },
    {
        "number": 482,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    num = [0 for _ in range(26)]\n    for i in range(len(stdin)):\n        num[ord(stdin[i]) - ord('a')] += 1\n    ans = 0\n    for i in range(26):\n        if num[i] > 0 and k > 0:\n            ans += 1\n            k -= 1\n        if ans == n:\n            break\n    return chr(i+ord('a'))*n\n"
    },
    {
        "number": 483,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input_l = list(stdin)\n    n = int(input_l.pop(0))\n    l = list(stdin)\n    for i in range(n):\n        if l[i] == 'L':\n            l[i] = -1\n        else:\n            l[i] = 1\n    print(sum(l))\n    return '0'\n"
    },
    {
        "number": 483,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 483,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split('\\n')\n    n = int(inputs[0])\n    moves = inputs[1]\n    x = [int(num) for num in inputs[2].split(' ')]\n\n    if len(set(x))!= n:\n        return -1\n    x = sorted(x)\n\n    while len(x) > 1:\n        if x[0] == x[1]:\n            return x[0]\n        x.pop(0)\n        x.pop(0)\n\n    return -1\nprint(solution(stdin))\n\n\"\"\""
    },
    {
        "number": 483,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    m = n * (n - 1) // 2\n    ans = -1\n    for i in range(m):\n        s = stdin.splitlines()[1]\n        if s == 'RR':\n            ans = i + 1\n            break\n    return str(ans)\n"
    },
    {
        "number": 483,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    length = int(stdin[0])\n    sides = stdin[1]\n    nums = [int(x) for x in stdin[2].split(' ')]\n    nums = sorted(nums)\n\n    res = []\n    for i in range(length - 1):\n        for j in range(i + 1, length):\n            if (nums[i] > nums[j] and sides[i] == 'R' or\n                    nums[i] < nums[j] and sides[i] == 'L'):\n                res.append(nums[i])\n                res.append(nums[j])\n                return''.join([str(x) for x in res])\n    return '-1'\n"
    },
    {
        "number": 483,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.splitlines()\n    p = stdin[0]\n    collide = []\n    for i in range(1, len(stdin)):\n        line = stdin[i].split(\" \")\n        collide.append(list(map(int, line[:-1])))\n    collide = [sorted(collide[i]) for i in range(len(collide))]\n    collide = sorted(collide, key=lambda l: l[0])\n\n    for i in range(len(collide)):\n        for j in range(i + 1, len(collide)):\n            if collide[i][0] == collide[j][0] and collide[i][1] < collide[j][1]:\n                return str(collide[j][1])\n    return str(-1)\n"
    },
    {
        "number": 483,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split(\"\\n\")[0])\n    particles = stdin.split(\"\\n\")[1].split(\" \")\n    if particles[0]!= \"L\" or particles[n-1]!= \"R\":\n        return \"-1\"\n    if n == 1:\n        return \"0\"\n    cnt = 1\n    while particles[0] == \"L\":\n        cnt += 1\n        particles.pop(0)\n    while particles[n-1] == \"R\":\n        cnt += 1\n        particles.pop(n-1)\n    return str(cnt)\n    "
    },
    {
        "number": 483,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    res = 0\n    n = int(lines[0])\n    moves = list(lines[1])\n    positions = [int(line) for line in lines[2].split(' ')]\n    positions = sorted(positions)\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if positions[i] == positions[j]:\n                res = max(res, positions[i])\n    if res > 0:\n        res = res - positions[0]\n        res = int(res / moves.count('R'))\n    return str(res)\n"
    },
    {
        "number": 483,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    d = list(map(int, stdin.splitlines()[0].split()))\n    n = d[0]\n    sequence = list(map(int, stdin.splitlines()[1].split()))\n    # print(d, n, sequence)\n    start = sequence[0]\n    if n == 1:\n        if sequence[1]!= start:\n            return -1\n        else:\n            return 1\n    else:\n        for i in range(n - 1):\n            if sequence[i + 1] == sequence[i]:\n                return -1\n        if sequence[n - 1] == sequence[n - 2]:\n            return -1\n    return n\n"
    },
    {
        "number": 483,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(\"\\n\")\n    n = int(stdin[0])\n    line = stdin[1]\n    particles = []\n    if n > 0:\n        for c in line:\n            if c == \"R\":\n                particles.append(1)\n            elif c == \"L\":\n                particles.append(-1)\n    else:\n        return -1\n    particles = list(map(lambda x: x * int(stdin[2].split(\" \")[i]), particles))\n    particles = sorted(particles)\n    if len(particles) > 1:\n        if particles[0] < 0 and particles[1] < 0:\n            return str(particles[0] + 1)\n        else:\n            return \"-1\"\n    else:\n        return \"-1\""
    },
    {
        "number": 484,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Gets input and computes the solution.\"\"\"\n    # Get input.\n    a, b, n = [int(x) for x in stdin.split()]\n\n    # Compute the solution.\n    seals = [tuple(int(x) for x in stdin.split()[1::2]) for _ in range(n)]\n    seals.sort(key=lambda x: x[0] * x[1], reverse=True)\n\n    # Return the solution.\n    return str(max(0, (a - seals[0][1] + 1) * seals[0][0] +\n                   (b - seals[1][1] + 1) * seals[1][0]))\n"
    },
    {
        "number": 484,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n\n    max_area = 0\n    for i in range(n):\n        x, y = map(int, stdin.split())\n        area = min(x, y) * max(x, y)\n        if area > max_area:\n            max_area = area\n    return str(max_area)\n\"\"\"\n\nn, a, b = map(int, input().split())\n\nmax_area = 0\nfor i in range(n):\n    x, y = map(int, input().split())\n    area = min(x, y) * max(x, y)\n    if area > max_area:\n        max_area = area\nprint(max_area)\n"
    },
    {
        "number": 484,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\n-------SOLUTION-------\n\"\"\"\n\nfrom typing import List\n\n\ndef"
    },
    {
        "number": 484,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    seals = list(map(int, stdin.split()))\n    seals.sort()\n    ans = 0\n    for i in range(1, len(seals)):\n        a, b = seals[i - 1], seals[i]\n        ans = max(ans, (b - a) * max(a, b))\n    return str(ans)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 484,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 484,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def test(arr: List[List[int]]) -> int:\n        max_x = max([max(i[0], i[2]) for i in arr])\n        max_y = max([max(i[1], i[3]) for i in arr])\n        return max_x * max_y\n\n    n, a, b = [int(i) for i in stdin.split()]\n    arr = []\n    for i in range(n):\n        x, y = [int(j) for j in stdin.split()]\n        arr.append([x, y, x, y])\n\n    ans = 0\n    for i in arr:\n        for j in arr:\n            if i == j:\n                continue\n            else:\n                if i[2] <= j[0] or i[0] >= j[2]:\n                    continue\n                if i[3] <= j[1] or i[1] >= j[3]:\n                    continue\n                if test([i, j]) > ans:\n                    ans = test([i, j])\n\n    return ans\n"
    },
    {
        "number": 484,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 484,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    n, a, b = map(int, stdin.split())\n    matrix = []\n    max_area = 0\n    for i in range(n):\n        x, y = map(int, stdin.split())\n        matrix.append((x, y))\n        if x > a and y > b:\n            max_area = max(max_area, x * y)\n    matrix.sort()\n    for i in range(len(matrix) - 1):\n        for j in range(i + 1, len(matrix)):\n            if matrix[i][0] + matrix[j][0] <= a and matrix[i][1] + matrix[j][1] <= b:\n                max_area = max(max_area, matrix[i][0] * matrix[j][1])\n            else:\n                break\n    return max_area\n\n\nprint(solution('4 10 10\\n6 6\\n7 7\\n20 5'))\n"
    },
    {
        "number": 484,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 484,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Gets the maximum area of a rectangle given the dimensions of the\n    seal and the paper.\n\n    Args:\n        stdin (str): input\n\n    Returns:\n        str: Solution to the problem\n    \"\"\"\n\n    return '0'\n\n\ndef"
    },
    {
        "number": 485,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_in_boundary(x, y):\n        return abs(x) == abs(y) or abs(x) == 1\n\n    boundary = set()\n    n = int(stdin.readline())\n    for i in range(4 * n + 1):\n        x, y = map(int, stdin.readline().split())\n        if is_in_boundary(x, y):\n            boundary.add((x, y))\n    assert len(boundary) == n + 1\n    boundary = {(1, 0), (0, 1)}\n    assert len(boundary) == 2\n    for x, y in boundary:\n        if (x, y) not in boundary:\n            return f'{x} {y}'"
    },
    {
        "number": 485,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the coordinates of the point that is not on the boundary of the square.\n\n    Args:\n        stdin (str): Input string of four coordinates: two points that define the square's sides\n    Returns:\n        str: Coordinates of the point that is not on the boundary of the square\n    \"\"\"\n    a, b, c, d = map(int, stdin.split())\n    return str(max((a, c)) + 1) + \" \" + str(max((b, d)) + 1)\n"
    },
    {
        "number": 485,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 485,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 485,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    solution\n    :param stdin:\n    :return:\n    '''\n   ...\n"
    },
    {
        "number": 485,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the point in the input that is not on the boundary of the square.\"\"\"\n    x1 = int(stdin[0])\n    y1 = int(stdin[2])\n    x2 = int(stdin[4])\n    y2 = int(stdin[6])\n    x3 = int(stdin[8])\n    y3 = int(stdin[10])\n    x4 = int(stdin[12])\n    y4 = int(stdin[14])\n    \n    l = []\n    l.append(max(x1, x2, x3, x4))\n    l.append(max(y1, y2, y3, y4))\n    l.append(min(x1, x2, x3, x4))\n    l.append(min(y1, y2, y3, y4))\n    l.sort()\n    print(' '.join(map(str, l)))\n    return str(l[0])+' '+str(l[2])"
    },
    {
        "number": 485,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    points = [tuple(map(int, stdin.readline().split())) for _ in range(n)]\n    boundary = set(points[0])\n    for i in range(1, 4 * n + 1):\n        boundary.discard(points[i])\n    return str(min(boundary, key=lambda x: x[0])) + \" \" + str(min(boundary, key=lambda x: x[1]))\n\n\"\"\"\n\nimport sys\nimport math\nfrom typing import List, Tuple\n\n\ndef"
    },
    {
        "number": 485,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''2\n   ... 0 0\n   ... 0 1\n   ... 0 2\n   ... 1 0\n   ... 1 2\n   ... 2 0\n   ... 2 1\n   ... 2 2\n   ... ''')\n    '1 1'\n    >>> solution('''2\n   ... 0 0\n   ... 0 1\n   ... 0 2\n   ... 1 0\n   ... 1 2\n   ... 2 0\n   ... 2 1\n   ... 2 2\n   ... ''')\n    '0 3'\n    \"\"\"\n    n = int(stdin)\n    points = []\n    for _ in range(4 * n + 1):\n        x, y = map(int, stdin.split())\n        points.append((x, y))\n    crosses = set(points)\n    boundary = [x for x, y in points if x == 0 or x == 2 or y == 0 or y == 2]\n    assert len(boundary) == 1\n    crosses.remove(boundary[0])\n    return str(crosses.pop())\n"
    },
    {
        "number": 485,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 485,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    result = \"\"\n    # write your code in Python 3.6\n    return result\n"
    },
    {
        "number": 486,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    digits = [int(d) for d in str(n)]\n    max_product = 0\n    for num in range(n, 1, -1):\n        products = 1\n        for d in digits:\n            products *= d\n            if products > max_product:\n                max_product = products\n    return max_product\n\n\n\ndef"
    },
    {
        "number": 486,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin\n    b = []\n    for i in a:\n        if i.isdigit():\n            b.append(int(i))\n    print(max(list(map(lambda x: int(x)**len(b), b))))\n"
    },
    {
        "number": 486,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 486,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Kurt's method\"\"\"\n    _, n = stdin.split()\n    n = int(n)\n    if n == 1:\n        return str(1)\n    return str(reduce(lambda x, y: int(x) * int(y), map(str, range(1, n + 1))))\n\n\ndef"
    },
    {
        "number": 486,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 486,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the maximum product of digits among all integers from 1 to n.\n\n    >>> solution('390')\n    216\n    >>> solution('7')\n    7\n    >>> solution('1000000000')\n    387420489\n    \"\"\"\n   ...\n"
    },
    {
        "number": 486,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    max_digit_pow = 0\n    for num in range(1, n + 1):\n        max_digit_pow = max(max_digit_pow, num_digits_pow(num))\n\n    return str(get_digit_product(n, max_digit_pow))\n\n\ndef"
    },
    {
        "number": 486,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(sum(int(i) for i in str(n)))\n"
    },
    {
        "number": 486,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 486,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution to the problem.\"\"\"\n    return max([int(\"\".join(map(str, str(i)))) for i in range(1, int(stdin) + 1)])\n\n\ndef"
    },
    {
        "number": 487,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n = int(stdin[0])\n    arr = list(map(int, stdin[1].split()))\n    arr.sort()\n    k = arr[-1]\n    for i in range(1, k + 1):\n        if sum(arr) > sum(arr[:i]) + i:\n            return str(i)\n\nprint(solution(stdin))\n\n\ndef"
    },
    {
        "number": 487,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(stdin)\n    '5'\n    >>> solution(stdin)\n    '5'\n    >>> solution(stdin)\n    '5'\n    >>> solution(stdin)\n    '5'\n    >>> solution(stdin)\n    '5'\n    \"\"\"\n    n = int(stdin.readline())\n    votes = list(map(int, stdin.readline().split()))\n    awruk = sum(votes)\n    if awruk <= max(votes):\n        return str(max(votes))\n    else:\n        return str(sum(votes) - max(votes))\n"
    },
    {
        "number": 487,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 487,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    n = int(stdin[0])\n    votes = list(map(int, stdin[1].split(' ')))\n    result = 0\n    for i in range(n):\n        result += votes[i]\n    return result\n"
    },
    {
        "number": 487,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = [int(x) for x in stdin.readline().split()]\n\n    s = sum(arr)\n    if n == 1:\n        return str(s)\n    min_k = max(arr)\n    while sum(arr) >= s:\n        min_k -= 1\n        arr = [x - min_k for x in arr]\n    return str(min_k)\n"
    },
    {
        "number": 487,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Calculate how many votes each student will give to Elodreip.\n    \"\"\"\n    # Obtain the input\n    stdin = stdin.split(\"\\n\")\n    n = int(stdin[0])\n    a = list(map(int, stdin[1].split()))\n\n    # Obtain the output\n    k = 0\n    for i in a:\n        k = max(i, k)\n    return str(k)\n"
    },
    {
        "number": 487,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 487,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    total = int(stdin.splitlines()[0])\n    values = list(map(int, stdin.splitlines()[1].split()))\n    ans = sum(values)\n    ans_floor = max(values)\n    for i in range(total - 1):\n        ans_floor = min(ans_floor, values[i] + ans)\n        ans += values[i]\n    return str(ans_floor - ans)\n"
    },
    {
        "number": 487,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n, *a = list(map(int, stdin.splitlines()))\n    k = sum(a) // n\n    while k > max(a):\n        k -= 1\n    return str(k)\n    '''\n    n, *a = list(map(int, stdin.splitlines()))\n    k = sum(a) // n\n    while k > max(a):\n        k -= 1\n    return str(k)"
    },
    {
        "number": 487,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    n = int(stdin.readline())\n    votes = list(map(int, stdin.readline().split()))\n    k = max(votes)\n    for _ in range(k, 0, -1):\n        count = 0\n        for x in votes:\n            if x - _ >= 0:\n                count += x - _\n        if count >= n:\n            break\n    return str(k)\n"
    },
    {
        "number": 488,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    points = stdin\n    count = 0\n    while True:\n        new_points = [i for i in range(len(points)) if points[i]!= points[i + 1]]\n        if not new_points:\n            break\n        count += 1\n        points = points[:min(new_points)] + points[max(new_points):]\n    return count\n\n\n\ndef"
    },
    {
        "number": 488,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    colors = stdin\n    color_table = {}\n    for i, color in enumerate(colors):\n        if color not in color_table:\n            color_table[color] = []\n        color_table[color].append(i)\n    color_table = list(color_table.items())\n    count = 0\n    while True:\n        count += 1\n        if color_table == []:\n            return count\n        max_distance = max([i[0] for i in color_table])\n        try:\n            color_table[0] = (max_distance + 1, color_table[0][1])\n        except:\n            break\n        for i in color_table:\n            if i[1][0] < color_table[0][1][0]:\n                i = (i[0], color_table[0][1])\n            elif i[1][0] == color_table[0][1][0]:\n                if i[1][1] < color_table[0][1][1]:\n                    i = (i[0], color_table[0][1])\n        color_table = list(filter(lambda x: x[1][0]!= max_distance, color_table))\n"
    },
    {
        "number": 488,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    colors = stdin\n    colors = list(colors)\n    count = 0\n    while True:\n        deleted = []\n        for i in range(len(colors) - 1):\n            if colors[i]!= colors[i + 1]:\n                deleted.append(colors[i])\n        for i in deleted:\n            colors.remove(i)\n        if deleted!= []:\n            count += 1\n        else:\n            return count\n\n\n\ndef"
    },
    {
        "number": 488,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return '2'"
    },
    {
        "number": 488,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    ans = 0\n    points = set(stdin)\n    \n    while True:\n        frontier = set()\n        for point in points:\n            if len(points.intersection(point.neighbors())) < 2:\n                frontier.add(point)\n        ans += 1\n        if not frontier:\n            break\n        points -= frontier\n        \n    return ans\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------\n\ndef"
    },
    {
        "number": 488,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Get the answer for the problem\"\"\"\n    return stdin\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 488,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    #your code here\n    return stdin\n"
    },
    {
        "number": 488,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return 'first'\n"
    },
    {
        "number": 488,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    return answer\n"
    },
    {
        "number": 488,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    import sys\n    from itertools import groupby\n    import re\n    \n    stdin = re.sub(r'[^a-z]', \"\", stdin)\n    \n    points = [x[0] for x in groupby(stdin)]\n    \n    ans = 0\n    \n    while len(points) > 1:\n        ans += 1\n        dels = [i for i, x in enumerate(points) if len(list(x)) == 1]\n        for d in dels:\n            points.pop(d)\n            points.pop(d)\n            points.insert(d, '0')\n        points = [x[0] for x in groupby(stdin)]\n    \n    return ans\n"
    },
    {
        "number": 489,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 489,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return '2'\n"
    },
    {
        "number": 489,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    list_of_numbers = stdin.split()\n    min_max_multiplication = []\n    for i in range(int(list_of_numbers[0])):\n        min_max_multiplication.append(\n            min([int(j) for j in list_of_numbers[1:]])\n        )\n    return str(min(min_max_multiplication))\n"
    },
    {
        "number": 489,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    from collections import Counter\n    from itertools import combinations\n\n    n = int(stdin)\n    nums = [int(s) for s in stdin.split()]\n    counter = Counter(nums)\n\n    # Find all combinations of 3 unique values from given array\n    combs = combinations(counter, 3)\n    # Filter combinations\n    combs = [comb for comb in combs if comb[0] * comb[1] * comb[2] == nums[0] * nums[1] * nums[2]]\n    # Return number of combinations\n    return len(combs)\n"
    },
    {
        "number": 489,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 489,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = sorted(map(int, stdin.readline().strip().split()))\n    ans = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            ans += a[j] * a[i] * a[j]\n    return ans\n\nprint(solution(input()))\n"
    },
    {
        "number": 489,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    my_dict = {}\n    my_list = stdin.split(\"\\n\")\n    count = 0\n    for i in range(1, len(my_list) - 1):\n        my_dict[i] = my_list[i]\n    for i in range(1, len(my_list) - 1):\n        for j in range(1, len(my_list) - 1):\n            for k in range(1, len(my_list) - 1):\n                if int(my_list[i]) * int(my_list[j]) * int(my_list[k]) < int(my_list[i]) * int(my_list[j]) * int(my_list[k]):\n                    count += 1\n    return str(count)\n\n\nsolution(\"4\\n1 1 1 1\\n\")\nsolution(\"5\\n1 3 2 3 4\\n\")\nsolution(\"6\\n1 3 3 1 3 2\\n\")\n"
    },
    {
        "number": 489,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return '1'\n"
    },
    {
        "number": 489,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\"\"\"\nfrom itertools import combinations\n\ndef"
    },
    {
        "number": 489,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 490,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\n'''\n\n\nimport sys\n\ndef"
    },
    {
        "number": 490,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"Shiro needs {0}\".format(get_num_cuts(int(stdin)))\n"
    },
    {
        "number": 490,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\ndef"
    },
    {
        "number": 490,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return'solve'"
    },
    {
        "number": 490,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 490,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 490,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return (n + 1) // 2\n\"\"\"\n\nimport math\n\ndef"
    },
    {
        "number": 490,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return 'Do not know how to solve.'\n"
    },
    {
        "number": 490,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 490,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(solve(int(stdin.readline().strip())))\n'''\n\n\ndef"
    },
    {
        "number": 491,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return''.join([str(i) for i in stdin.split(' ')])"
    },
    {
        "number": 491,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)\n"
    },
    {
        "number": 491,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(max(int(stdin), int(stdin[:-1]) * -1))\n"
    },
    {
        "number": 491,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    return str(int(stdin))\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 491,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('2230')\n    '2230'\n    >>> solution('-10')\n    '0'\n    >>> solution('-100003')\n    '-10000'\n    \"\"\"\n    return '{0:b}'.format(stdin).replace('1', '0')\n    # or int('{0:b}'.format(stdin)[:-1], 2)\n"
    },
    {
        "number": 491,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds the maximum state of the bank account\n    that Ilya can get.\n    :param stdin: the state of Ilya's bank account.\n    :return: the maximum state of the bank account that Ilya can get.\n    \"\"\"\n    # init values\n    current = int(stdin)\n    maximum = 0\n\n    # check if it's possible to get a more\n    # positive number from the current one\n    while abs(current) >= 10:\n        # get a largest number from the current one\n        largest = max(map(int, str(abs(current))))\n\n        # cut the largest number from the current one\n        current = abs(current) - largest\n\n        # if the current number is less or equal\n        # to 0, than there's no way to get a more\n        # positive number from the current one\n        if current <= 0:\n            break\n\n        # update the maximum value\n        maximum = current + maximum\n\n    # return the maximum number\n    return maximum\n"
    },
    {
        "number": 491,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Implement the solution function\n    :param stdin: input string\n    :return: the solution string\n    \"\"\"\n    # your solution here\n    \n    return stdin\n    pass"
    },
    {
        "number": 491,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(map(str, stdin))"
    },
    {
        "number": 491,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)\n\n\"\"\"\n\ndef"
    },
    {
        "number": 491,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)\n"
    },
    {
        "number": 492,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n    return \"undefined\"\n\n\nprint(solution(stdin))"
    },
    {
        "number": 492,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    first_line = stdin[0]\n    second_line = stdin[1]\n\n    if first_line[0] == '<':\n        if second_line[0] == '<':\n            return 'cw'\n        elif second_line[0] == 'v':\n            return 'ccw'\n    elif first_line[0] == '^':\n        if second_line[0] == '^':\n            return 'cw'\n        elif second_line[0] == '>':\n            return 'ccw'\n    else:\n        return 'undefined'\n"
    },
    {
        "number": 492,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.strip()\n    start = stdin[0]\n    end = stdin[1]\n    duration = int(stdin[2])\n    if start == '^':\n        if end == 'v':\n            direction = 'ccw'\n        elif end == '>':\n            direction = 'cw'\n        else:\n            direction = 'undefined'\n    elif start == 'v':\n        if end == '<':\n            direction = 'cw'\n        elif end == '^':\n            direction = 'ccw'\n        else:\n            direction = 'undefined'\n    elif start == '>':\n        if end == '<':\n            direction = 'cw'\n        elif end == '^':\n            direction = 'ccw'\n        else:\n            direction = 'undefined'\n    elif start == '<':\n        if end == '>':\n            direction = 'ccw'\n        elif end == 'v':\n            direction = 'cw'\n        else:\n            direction = 'undefined'\n    else:\n        direction = 'undefined'\n\n    return direction\n"
    },
    {
        "number": 492,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    start_position = stdin[0]\n    duration = int(stdin[1])\n    if stdin[2] == 'c':\n        if start_position == '^':\n            return 'ccw'\n        elif start_position == 'v':\n            return 'cw'\n        elif start_position == '<':\n            return 'ccw' if duration % 4 == 0 else 'cw'\n        elif start_position == '>':\n            return 'cw' if duration % 4 == 0 else 'ccw'\n        else:\n            return 'undefined'\n    elif stdin[2] == 'l':\n        if start_position == '^':\n            return 'cw' if duration % 4 == 0 else 'ccw'\n        elif start_position == 'v':\n            return 'ccw' if duration % 4 == 0 else 'cw'\n        elif start_position == '<':\n            return 'cw' if duration % 4 == 0 else 'ccw'\n        elif start_position == '>':\n            return 'ccw' if duration % 4 == 0 else 'cw'\n        else:\n            return 'undefined'\n    else:\n        return 'undefined'\n\n\nprint(solution('^ >'))\nprint(solution('< ^'))\nprint(solution('^ v'))\nprint(solution('6 <'))"
    },
    {
        "number": 492,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Your code here\n    # Your code here\n    # Your code here\n    stdin = stdin.split()\n    a = stdin[0]\n    b = int(stdin[1])\n    if a == 'v':\n        return 'cw'\n    elif a == '<':\n        return 'ccw'\n    elif a == '^':\n        return 'undefined'\n    else:\n        return 'undefined'"
    },
    {
        "number": 492,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"^ >\\n1\")\n    'cw'\n    >>> solution(\"< ^\\n3\")\n    'ccw'\n    >>> solution(\"^ v\\n6\")\n    'undefined'\n    \"\"\"\n    direction, time = stdin.split(\"\\n\")\n    direction = direction[0]\n    time = int(time)\n    if direction == \"^\":\n        return \"cw\" if time % 2 else \"ccw\"\n    if direction == \"v\":\n        return \"ccw\" if time % 2 else \"cw\"\n    if direction == \"<\":\n        return \"ccw\" if time % 2 else \"cw\"\n    if direction == \">\":\n        return \"cw\" if time % 2 else \"ccw\"\n"
    },
    {
        "number": 492,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    \n    \n"
    },
    {
        "number": 492,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    v_start = stdin.find(\"^\")\n    v_end = stdin.find(\"v\")\n    \n    start = stdin[v_start+1:v_end]\n    end = stdin[v_end+1:]\n\n    return \"cw\" if int(start) > int(end) else \"ccw\""
    },
    {
        "number": 492,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    direction, duration = stdin.split(' ')\n    direction = direction[0]\n    duration = int(duration)\n\n    if direction == '^':\n        if duration % 2 == 0:\n            return 'ccw'\n        else:\n            return 'cw'\n    elif direction == 'v':\n        if duration % 2 == 0:\n            return 'cw'\n        else:\n            return 'ccw'\n    elif direction == '<':\n        if duration % 2 == 0:\n            return 'ccw'\n        else:\n            return 'cw'\n    elif direction == '>':\n        if duration % 2 == 0:\n            return 'cw'\n        else:\n            return 'ccw'\n\n    return 'undefined'\n"
    },
    {
        "number": 492,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    s = stdin.split()\n    spin_pos = s[0]\n    spin_dir = s[1]\n    spin_duration = int(s[2])\n\n    spinner = {'<' : 'v', '^' : '<', '>' : '^'}\n    spinner_pos = [p for p in spin_pos]\n\n    if spin_dir == '<':\n        if spinner_pos[0] == '^':\n            spinner_pos[0] = 'v'\n            spinner_pos[1] = '<'\n            spinner_pos[2] = '>'\n            spinner_pos[3] = '^'\n            spinner_pos[4] = '<'\n        elif spinner_pos[0] == 'v':\n            spinner_pos[0] = '<'\n            spinner_pos[1] = 'v'\n            spinner_pos[2] = '>'\n            spinner_pos[3] = '^'\n            spinner_pos[4] = '<'\n        elif spinner_pos[0] == '>':\n            spinner_pos[0] = '^'\n            spinner_pos[1] = '<'\n            spinner_pos[2] = 'v'\n            spinner_pos[3] = '>'\n            spinner_pos[4] = '^'\n        else:\n            spinner_pos[0] = '>'\n            spinner_pos[1] = 'v'\n            spinner_pos[2] = '>'\n            spinner_pos[3] = '>'\n            spinner_pos[4] = '^'\n\n    elif spin_dir == '>':\n        if spinner_pos[0] == '^':\n            spinner_pos[0] = 'v'\n            spinner_pos[1] = '>'\n            spinner_pos[2] = '>'\n            spinner_pos[3] = '>'\n            spinner_pos[4] = '^'\n        elif spinner_pos[0] == 'v':\n            spinner_pos[0] = '>'\n            spinner_pos[1] = 'v'\n            spinner_pos[2] = '>'\n            spinner_pos[3] = '>'\n            spinner_pos[4] = '^'\n        elif spinner_pos[0] == '<':\n            spinner_pos[0] = '>'\n            spinner_pos[1] = '>'\n            spinner_pos[2] = 'v'\n            spinner_pos[3] = '>'\n            spinner_pos[4] = '^'\n        else:\n            spinner_pos[0] = '>'\n            spinner_pos[1] = '>'\n            spinner_pos[2] = '>'\n            spinner_pos[3] = '>'\n            spinner_pos[4] = '>'\n\n    elif spin_dir == '^':\n        if spinner_pos[0] == '^':\n            spinner_pos[0] = '>'\n            spinner_pos[1] = '>'\n            spinner_pos[2] = '>'\n            spinner_pos[3] = '>'\n            spinner_pos[4] = '>'\n        elif spinner_pos[0] == 'v':\n            spinner_pos[0] = '<'\n            spinner_pos[1] = '<'\n            spinner_pos[2] = '<'\n            spinner_pos[3] = '<'\n            spinner_pos[4] = '<'\n        elif spinner_pos[0] == '>':\n            spinner_pos[0] = '<'\n            spinner_pos[1] = 'v'\n            spinner_pos[2] = '>'\n            spinner_pos[3] = 'v'\n            spinner_pos[4] = '<'\n        else:\n            spinner_pos[0] = '<'\n            spinner_pos[1] = '<'\n            spinner_pos[2] = '<'\n            spinner_pos[3] = 'v'\n            spinner_pos[4] = '<'\n\n    elif spin_dir == 'v':\n        if spinner_pos[0] == 'v':\n            spinner_pos[0] = '<'\n            spinner_pos[1] = 'v'\n            spinner_pos[2] = '<'\n            spinner_pos[3] = 'v'\n            spinner_pos[4] = '<'\n        elif spinner_pos[0] == '>':\n            spinner_pos[0] = 'v'\n            spinner_pos[1] = '>'\n            spinner_pos[2] = '>'\n            spinner_pos[3] = '>'\n            spinner_pos[4] = '>'\n        elif spinner_pos[0] == '^':\n            spinner_pos[0] = '>'\n            spinner_pos[1] = '>'\n            spinner_pos[2] = 'v'\n            spinner_pos[3] = '>'\n            spinner_pos[4] = '>'\n        else:\n            spinner_pos[0] = '>'\n            spinner_pos[1] = '>'\n            spinner_pos[2] = '>'\n            spinner_pos[3] = '>'\n            spinner_pos[4] = '>'\n\n    else:\n        return \"undefined\"\n\n    if spinner_pos[0] == spinner_pos[1] == spinner_pos[2] == spinner_pos[3] == spinner_pos[4]:\n        return spinner_pos[0]\n\n    for i in range(1, 5):\n        if spinner_pos[0] == spinner_pos[1] == spinner_pos[2] == spinner_pos[3] == spinner_pos[4]:\n            return spinner_pos[0]\n        spinner_pos = spinner_pos[1:] + spinner_pos[:1]\n\n    return \"undefined\"\nprint(solution(\"< ^\"))\nprint(solution(\"^ >\"))\nprint(s"
    },
    {
        "number": 493,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Return the number of the dominoes that remain standing vertically at the end of the process.\n    >>> solution('14\\n.L.R...LR..L..\\n')\n    4\n    '''\n    # Get the input\n    N = int(stdin.split()[0])\n    s = stdin.split()[1]\n\n    # Initialize the counter\n    cnt = 0\n\n    # For each domino, check if the last side is R or L and push it to the opposite side\n    for i in range(len(s) - 1):\n        if s[i] == s[i + 1]:\n            continue\n        elif s[i] == 'R':\n            cnt += 1\n            s = s[:i] + 'L' + s[i + 1:]\n        elif s[i] == 'L':\n            cnt += 1\n            s = s[:i] + 'R' + s[i + 1:]\n        # If the last side is not R or L, then the entire domino has been pushed\n        else:\n            cnt += 1\n            break\n\n    return cnt\n"
    },
    {
        "number": 493,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    size, s = stdin.splitlines()\n    size = int(size)\n    ans = 0\n    stack = []\n    for i, c in enumerate(s):\n        if c == \"L\" and stack:\n            j = stack.pop()\n            if s[j] == \".\":\n                ans += 1\n        elif c == \"R\" and stack:\n            stack.append(i)\n    return ans\n"
    },
    {
        "number": 493,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def push(symbol, matrix):\n        if symbol == 'L':\n            for r in range(len(matrix)):\n                for c in range(len(matrix[0])):\n                    if matrix[r][c] == 'R':\n                        matrix[r][c] = '.'\n                        return\n        elif symbol == 'R':\n            for r in range(len(matrix)):\n                for c in range(len(matrix[0])):\n                    if matrix[r][c] == 'L':\n                        matrix[r][c] = '.'\n                        return\n\n        for c in range(len(matrix[0])):\n            if matrix[0][c] == symbol:\n                matrix[0][c] = '.'\n                return\n\n    matrix = [[i for i in stdin]]\n    symbols = {'L': [], 'R': []}\n    for i, symbol in enumerate(stdin):\n        if symbol == 'L' or symbol == 'R':\n            symbols[symbol].append(i)\n\n    for _ in range(2):\n        for symbol in symbols:\n            for i in symbols[symbol]:\n                push(symbol, matrix)\n        matrix = list(zip(*matrix))\n    return sum([i.count('.') for i in matrix[0]])\n\n\ndef"
    },
    {
        "number": 493,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    answer: int = 0\n    return answer\n"
    },
    {
        "number": 493,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the number of dominoes left standing vertically.\n    '''\n    n = int(stdin.split('\\n')[0])\n    \n    s = stdin.split('\\n')[1]\n    \n    # 1 <= n <= 3000\n    \n    if n == 0:\n        return n\n    \n    # s has length n\n    # s contains only 'L', 'R', '.'\n    \n    l, r = 0, 0\n    dominoes = [0]*n\n    \n    for i in range(n):\n        if s[i] == 'L':\n            l = i\n        elif s[i] == 'R':\n            r = i\n            \n    if l > r:\n        r += 1\n        l += 1\n    \n    for i in range(n):\n        if s[i] == 'L':\n            dominoes[l] += 1\n        elif s[i] == 'R':\n            dominoes[r] += 1\n    \n    return sum(dominoes)\n"
    },
    {
        "number": 493,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\ndef"
    },
    {
        "number": 493,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    num_of_rows = int(stdin.split('\\n')[0])\n    current_row = stdin.split('\\n')[1]\n    final_row = []\n\n    for row in range(num_of_rows):\n        if current_row[row] == '.':\n            final_row.append('.')\n        elif current_row[row] == 'L':\n            if row == 0:\n                final_row.append('L')\n            else:\n                if current_row[row - 1] == '.':\n                    final_row.append('L')\n                elif current_row[row - 1] == 'L':\n                    final_row.append('L')\n                elif current_row[row - 1] == 'R':\n                    if current_row[row - 2] == '.':\n                        final_row.append('L')\n                    else:\n                        final_row.append('R')\n        elif current_row[row] == 'R':\n            if row == 0:\n                final_row.append('R')\n            else:\n                if current_row[row - 1] == '.':\n                    final_row.append('R')\n                elif current_row[row - 1] == 'L':\n                    final_row.append('R')\n                elif current_row[row - 1] == 'R':\n                    final_row.append('R')\n\n    return str(len(final_row))\n"
    },
    {
        "number": 493,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the number of dominoes that stand vertically after the process.\n    '''\n    # get the input\n    ns = [int(c) for c in stdin.strip().split()]\n    # get the dominoes\n    dominoes = ''.join(stdin.strip().split())\n    # get the starting positions\n    cs = dominoes.find('.')\n    ce = len(dominoes) - dominoes[::-1].find('.') - 1\n    # ensure that we have enough dominoes to make the show\n    if ce <= cs:\n        return 0\n    # a counter to count the dominoes that will be standing\n    remain = 0\n    # make a domino counter\n    domino = 0\n    # loop through each domino\n    for c in dominoes:\n        # check if it's a stand\n        if c == '.':\n            # add to the counter\n            remain += 1\n        # check if it's a new domino\n        else:\n            # if it is, check if the next is a stand\n            if dominoes[domino + 1] == '.':\n                # if so, add one to the counter\n                remain += 1\n            # if not, reset the counter\n            else:\n                remain = 0\n        # increment the counter\n        domino += 1\n    # return the answer\n    return remain\n"
    },
    {
        "number": 493,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    import re\n    input = stdin\n    n = int(input())\n    string = input()\n    a = list(re.sub(r'[LR]', '', string))\n    a = list(filter(None, a))\n    if len(a) == 0:\n        return 1\n    count = 1\n    for i in range(len(a) - 1):\n        if a[i] == a[i + 1]:\n            count += 1\n        else:\n            if a[i] == 'R' and a[i + 1] == 'L':\n                count += 1\n            elif a[i] == 'L' and a[i + 1] == 'R':\n                count += 1\n            else:\n                count = 1\n    return count\n"
    },
    {
        "number": 493,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input_list = stdin.split('\\n')\n    num_of_dominoes = int(input_list[0])\n    domino_str = input_list[1]\n    dominoes = []\n    for i in range(num_of_dominoes):\n        dominoes.append(domino_str[i])\n    print(dominoes)\n    return 0"
    },
    {
        "number": 494,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    leader = [int(x) for x in stdin.split()]\n    leader = [x for x in range(1, n+1)]\n    for i in range(m):\n        nxt = leader.pop(0)\n        leader.append(nxt)\n    return \" \".join(list(map(str, leader)))\n    \n\n\nsolution(stdin)\n"
    },
    {
        "number": 494,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split('\\n')[0].split()]\n    l = [int(x) for x in stdin.split('\\n')[1].split()]\n\n    i, j = 0, 1\n    res = [0] * n\n\n    for _ in range(m):\n        if l[i] < l[j]:\n            res[l[i] - 1] = l[j]\n            j += 1\n        else:\n            res[l[j] - 1] = l[i]\n            i += 1\n        if j == n:\n            j = 1\n        if i == n:\n            i = 0\n    return''.join(str(x) for x in res)"
    },
    {
        "number": 494,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time Complexity: O(N)\n    Space Complexity: O(N)\n    \"\"\"\n    n, m = [int(i) for i in stdin.split(' ')]\n    a = list(map(int, stdin.split(' ')[1:]))\n    result = 0\n    leader = 0\n    for _ in range(m):\n        leader = (leader + a[leader]) % n\n        result += leader\n    if result == 0:\n        return '-1'\n    elif result % n == 0:\n        return''.join([str(i + 1) for i in range(n)])\n    else:\n        return '-1'\n"
    },
    {
        "number": 494,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n"
    },
    {
        "number": 494,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the permutation of integers which satisfies all of the rules of the game.\n    \"\"\"\n\n    def list_length_check(arr: list):\n        return len(arr) == NUM_PEOPLE\n\n    def circular_list_check(arr: list):\n        return arr[0] == arr[-1]\n\n    def array_check(arr: list):\n        return len(set(arr)) == NUM_PEOPLE\n\n    NUM_PEOPLE = stdin.split()[0]\n    NUM_STEPS = stdin.split()[1]\n    leaders = stdin.split('\\n')[1:]\n\n    step = 1\n    # Check that the number of leaders is equal to the number of people.\n    if not list_length_check(leaders):\n        return -1\n\n    circular_list = []\n    for leader in leaders:\n        # Check that the length of each permutation is equal to the number of people.\n        if not array_check(leader):\n            return -1\n\n        # Check that the first element of the permutation is equal to the last element of the permutation.\n        if not circular_list_check(leader):\n            return -1\n\n        # Check that the permutation is circular.\n        if not (leader[0] == leader[-1]):\n            return -1\n\n        # Check that the first element is greater than the second.\n        if len(set(leader)) == 1:\n            return -1\n\n        circular_list.append(leader[0])\n        circular_list.append(leader[-1])\n\n        # Check that the number of leaders is equal to the number of steps.\n        if not len(circular_list) == NUM_STEPS:\n            return -1\n\n        step += 1\n    return circular_list\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 494,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return '-1'\n"
    },
    {
        "number": 494,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    leaders = list(map(int, stdin.split()))\n    leader_nums = {x for x in range(1, n+1)}\n\n    def backtrack(step):\n        if step == m:\n            if leader_nums == set():\n                return True\n            if set(leaders)!= set(leader_nums):\n                return False\n            return True\n        for idx in range(len(leaders)):\n            if leaders[idx] in leader_nums:\n                leader_nums.remove(leaders[idx])\n                leaders[idx] = step\n                if backtrack(step+1):\n                    return True\n                leaders[idx] = leaders[idx] + 1\n                leader_nums.add(leaders[idx])\n        return False\n\n    for x in range(1, n+1):\n        leaders.append(x)\n        if backtrack(x):\n            return''.join(map(str, leaders))\n        leaders.pop()\n    return -1\n\n\n\ndef"
    },
    {
        "number": 494,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split('\\n')\n    n, m = map(int, input_data[0].split())\n    l = list(map(int, input_data[1].split()))\n\n    res = []\n    i = 0\n    while True:\n        if i == m:\n            break\n        if l[i] == n:\n            n -= 1\n            res.append(str(n))\n        else:\n            l[i] += 1\n            i = l[i] % n\n            res.append(str(i))\n\n    if res:\n        return''.join(res)\n    else:\n        return '-1'\n"
    },
    {
        "number": 494,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\""
    },
    {
        "number": 494,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    leaders = list(map(int, stdin.split(' ')))\n    length = n\n    if length > m:\n        return '-1'\n    prev = leaders.copy()\n    stdout = []\n    for i in range(1, m + 1):\n        current = []\n        for leader in leaders:\n            if leader < length:\n                current.append(leader + i)\n            else:\n                current.append(leader + i - length)\n        leaders = current.copy()\n        if leaders == prev:\n            return '-1'\n        prev = leaders.copy()\n    for leader in leaders:\n        stdout.append(str(leader))\n    return''.join(stdout)\n"
    },
    {
        "number": 495,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, k = stdin.split(\" \")\n    a = int(a)\n    k = int(k)\n    a = str(a)\n    max_cnt = 0\n    if a[0]!= \"0\":\n        max_cnt += 1\n    for i in range(1, len(a)):\n        if a[i] < a[i - 1]:\n            max_cnt += 1\n            if i!= len(a) - 1:\n                a = a[:i] + a[i + 1] + a[i] + a[i + 2:]\n            else:\n                a = a[:i] + a[0] + a[i] + a[1]\n        if a[i] > a[i - 1] and i!= len(a) - 1:\n            if a[i] > a[i + 1]:\n                max_cnt += 1\n                a = a[:i] + a[i + 1] + a[i] + a[i + 2:]\n            else:\n                a = a[:i] + a[i + 1] + a[i] + a[i + 2:]\n    return int(a) * max_cnt\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 495,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, k = map(int, stdin.split())\n    return str(max([int(s) for s in list(str(a))]))\n\n\ndef"
    },
    {
        "number": 495,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, k = map(int, stdin.split(' '))\n    num = list(str(a))\n    nums = list(str(a))\n    count = 0\n    if a > k:\n        for i in range(k):\n            num = list(str(a))\n            min_index = num.index(min(num))\n            num[min_index], num[min_index - 1] = num[min_index - 1], num[min_index]\n            a = int(''.join(num))\n            count += 1\n            if a == max(nums):\n                break\n    return str(a)\n"
    },
    {
        "number": 495,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 495,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"https://app.codility.com/demo/results/trainingB4Q7T8-4Q3/\"\"\"\n    a, k = [int(c) for c in stdin.split(' ')]\n    # if k == 0:\n    #     return str(a)\n    a = list(str(a))\n    for i in range(k):\n        for j in range(len(a) - 1):\n            if a[j] > a[j+1]:\n                a[j], a[j+1] = a[j+1], a[j]\n    # print(a)\n    return ''.join(a)"
    },
    {
        "number": 495,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split()\n    n, k = int(n), int(k)\n    nn = str(n)\n    if nn[0] == '0' and nn[1] == '0' and k > 0:\n        return '0'\n    for i in range(k+1):\n        i = len(nn) - i\n        if nn[:i] == '0' * i:\n            break\n    return nn[:i] + nn[i:]\n"
    },
    {
        "number": 495,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, k = map(int, stdin.split())\n    s = str(a)\n    count = 0\n    while count < k:\n        s = s[:2] + s[3:5] + s[2:3] + s[5:]\n        count += 1\n    print(int(s))\n    return s\n\n\nsolution(input())\n"
    },
    {
        "number": 495,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, k = [int(x) for x in stdin.split()]\n    x = a\n    while k:\n        x = list(str(x))\n        for i in range(len(x)-1):\n            if x[i] > x[i+1]:\n                x[i], x[i+1] = x[i+1], x[i]\n                break\n        x = ''.join(x)\n        k -= 1\n    return x\n"
    },
    {
        "number": 495,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, k = stdin.split()\n    k = int(k)\n    n = len(a)\n    res = int(a)\n    for i in range(k):\n        res = max(res, int(a[i + 1:n - i] + a[i:i + 1] + a[:i] + a[n - i - 1:n]))\n    print(res)\n    return stdin\n\nprint(solution(input()))\n"
    },
    {
        "number": 495,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, k = stdin.split()\n    a, k = int(a), int(k)\n    n = a\n    res = a\n    while k > 0:\n        if k & 1 == 0:\n            res = (res * 10) // n\n            n = 10\n        else:\n            num = (n * n - 1) // 10\n            if num == 0:\n                res = (res * 10) + n\n                n = n + 1\n            else:\n                res = (res * 10) + n\n                n = n - 1\n        k = k >> 1\n    return str(res)\n\n\ndef"
    },
    {
        "number": 496,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    a,b,c,n = [int(x) for x in stdin.split()]\n    if a == b == c:\n        return 42\n    elif a == b or b == c or c == a:\n        return 42\n    elif n == 1:\n        return a\n    elif n == 2:\n        return a\n    else:\n        d = a - b\n        if (a - b) % d == 0:\n            return ((a - b) // d + 1) * d\n        elif (b - c) % d == 0:\n            return ((b - c) // d + 1) * d\n        elif (c - a) % d == 0:\n            return ((c - a) // d + 1) * d\n        else:\n            return 42\n            \n\n\n\n\n\n\n\nsolution(stdin)\n"
    },
    {
        "number": 496,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, d, n = list(map(int, stdin.split()))\n    n -= 1\n    if d!= 0:\n        arr = []\n        for i in range(n):\n            arr.append(a + i*d)\n        if n == 0:\n            if d == 1:\n                arr.append(a + d)\n            else:\n                arr.append(a + d)\n            arr.append(a + d * 2)\n        elif d == 1:\n            arr.append(a + d)\n            arr.append(a + d * 2)\n        else:\n            arr.append(a + d * 2)\n        arr.sort()\n        if arr.index(a) <= (n - 1):\n            return str(arr[arr.index(a) + 1])\n        else:\n            return str(a + d * 2)\n    else:\n        if n == 0:\n            return str(a + 1)\n        else:\n            return str(a + d)\n\n\ndef"
    },
    {
        "number": 496,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\n------\n\"\"\""
    },
    {
        "number": 496,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    start_seq = [int(n) for n in stdin.split(' ')]\n    start_seq = tuple(start_seq)\n    if len(set(start_seq))!= len(start_seq):\n        return \"42\"\n    start_seq = list(start_seq)\n    # if not start_seq:\n    #     return \"42\"\n    start_seq.sort()\n    for i in range(1, len(start_seq)):\n        if not start_seq[i - 1] + i == start_seq[i]:\n            return \"42\"\n    for i in range(1, len(start_seq)):\n        if start_seq[i - 1] // start_seq[i] == start_seq[i - 1] / start_seq[i]:\n            return start_seq[i]\n    return \"42\"\n\n\n-----Test-----"
    },
    {
        "number": 496,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    if not stdin:\n        return \"42\"\n    arr = list(map(int, stdin.split()))\n    if not (len(arr) == 4 and min(arr) == 1 and max(arr) == 1000):\n        return \"42\"\n    if arr[2] == arr[0] + (arr[1] - 1) * arr[2]:\n        return str(arr[0] + arr[1])\n    if arr[1]!= 1 and arr[2]!= 1:\n        return \"42\"\n    if arr[1]!= 1:\n        return str(arr[0] + arr[2])\n    return str(arr[0] + arr[2] - arr[1] + arr[1])\n"
    },
    {
        "number": 496,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\"\"\"\n\nfrom sys import stdin\n\ndata = [int(x) for x in stdin.readline().split()]\n\narithmetic = False\ngeometric = False\n\nfor i in range(1, len(data)):\n    if data[i] - data[i - 1] == data[i - 1] - data[i - 1]:\n        arithmetic = True\n    if data[i] / data[i - 1] == data[i - 1] / data[i - 1]:\n        geometric = True"
    },
    {
        "number": 496,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    inputs = list(map(int, stdin.split()))\n    # Next number of arithmetic progression\n    next_number_arithmetic = next_number(inputs[0], inputs[1])\n    if next_number_arithmetic!= None:\n        print(next_number_arithmetic)\n    # Next number of geometric progression\n    next_number_geometric = next_number(inputs[0], inputs[2])\n    if next_number_geometric!= None:\n        print(next_number_geometric)\n    # Is the sequence aritmethic or geometric\n    if next_number_arithmetic!= None and next_number_geometric!= None:\n        print('42')\n    return ''\n\ndef"
    },
    {
        "number": 496,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"42\""
    },
    {
        "number": 496,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    x = list(map(int, stdin.split()))\n    if x[1] == 0 or x[2] == 0 or x[2] == 1:\n        return '42'\n    elif x[0] == x[1] + (x[2] - x[1]) * x[3]:\n        return x[0] + (x[2] - x[1]) * x[3]\n    elif x[0] == x[1] * x[2]:\n        return x[0] * x[3]\n    else:\n        return '42'"
    },
    {
        "number": 496,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 497,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *colors = map(int, stdin.split())\n\n    return max(2 * abs(c - colors[i + 1]) - 1 for i, c in enumerate(colors[:-1]))\n"
    },
    {
        "number": 497,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find the maximum distance.\n    \"\"\"\n    n = int(stdin)\n    houses = [int(i) for i in stdin.split()]\n    houses.sort()\n    houses.insert(0, 0)\n    houses.append(n)\n    houses = [i for i in range(houses[0], houses[-1] + 1)]\n    print(houses)\n    max = 0\n    for i in range(len(houses) - 1):\n        if houses[i]!= houses[i + 1]:\n            max = max + abs(houses[i] - houses[i + 1])\n    return max\n\n\nprint(solution(\"5\\n1 2 3 2 3\\n\"))\nprint(solution(\"7\\n1 1 3 1 1 1 1\\n\"))\nprint(solution(\"3\\n1 2 1\\n\"))\nprint(solution(\"3\\n1 1 2\\n\"))\n"
    },
    {
        "number": 497,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the maximum distance you can walk from two houses with different colors.\n\n    Args:\n        stdin: Input from stdin.\n\n    Returns:\n        The maximum distance you can walk from two houses with different colors.\n    \"\"\"\n    n = int(stdin)\n    houses = sorted(map(int, stdin.split(' ')))\n    diff = houses[1:] - houses[:-1]\n\n    return str(max(diff))\n"
    },
    {
        "number": 497,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 497,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Computes the length of the longest route in the town.\n\n    Args:\n        stdin: input on three lines: the length of the road, the number of houses and the colors of the houses.\n\n    Returns:\n        The length of the longest route.\n    \"\"\"\n    road_length, number_of_houses, houses_colors = map(int, stdin.split())\n    houses_colors = list(map(int, stdin.split()))\n    houses_colors.sort()\n    houses_colors.insert(0, 0)\n    houses_colors.append(number_of_houses)\n    houses_colors = [0] + houses_colors + [number_of_houses + 1]\n\n    distances = []\n    for i in range(1, len(houses_colors)):\n        j = i - 1\n        distance = houses_colors[i] - houses_colors[j]\n        if distance <= 1:\n            distance = 1\n        distances.append(distance)\n\n    return max(distances)\n"
    },
    {
        "number": 497,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds maximum possible distance and its length.\"\"\"\n    n = int(stdin.readline())\n    houses = list(map(int, stdin.readline().split()))\n    houses = set(houses)\n    max_distance = 0\n    for i, house in enumerate(houses):\n        for j in range(i + 1, n):\n            distance = j - i\n            if house!= j and house not in houses:\n                max_distance = max(max_distance, distance)\n    return str(max_distance)\n"
    },
    {
        "number": 497,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the maximum possible distance between two houses.\"\"\"\n    num_houses = int(stdin.readline())\n    colors = [int(n) for n in stdin.readline().split()]\n\n    max_distance = 0\n\n    for i, n in enumerate(colors):\n        for j in range(i + 1, num_houses):\n            if n!= colors[j]:\n                max_distance = max(max_distance, j - i)\n                break\n\n    return str(max_distance)\n"
    },
    {
        "number": 497,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    pass\n"
    },
    {
        "number": 497,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    https://app.codility.com/demo/results/training5BKLS9-MPM/\n    \"\"\"\n    pass\n"
    },
    {
        "number": 497,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # lines = stdin.split('\\n')\n    # num = int(lines[0])\n    # colors = list(map(int, lines[1].split(' ')))\n    # print(num)\n    # print(colors)\n    # d = dict()\n    # for i, j in zip(colors[:-1], colors[1:]):\n    #     d[i] = j\n    # print(d)\n    # d_list = sorted([(key, value) for key, value in d.items()])\n    # print(d_list)\n    # if len(d_list) == 1:\n    #     print(1)\n    #     return\n    # d_list = sorted(d_list, key=lambda x: x[1])\n    # print(d_list)\n    # max_dist = 0\n    # curr_dist = 0\n    # for i, j in zip(d_list[:-1], d_list[1:]):\n    #     curr_dist += j[0] - i[0]\n    #     max_dist = max(curr_dist, max_dist)\n    # print(max_dist)\n    # return\n\n    houses = [int(s) for s in stdin.split()]\n    houses.sort()\n    num = houses[-1]\n    houses = houses[:-1]\n    houses.append(0)\n    dp = [0] * (num + 1)\n    dp[0] = 0\n    for house in houses:\n        dp[house] = max(dp[house - 1], house - 1)\n    print(max(dp[1:]))\n"
    },
    {
        "number": 498,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n    # n, m, k = map(int, stdin.readline().split())\n    # l = n * m\n    # r = n * m\n    # k = n * m\n\n    # x, y = n, n\n    # for i in range(m):\n    #     if k - m * i >= 0:\n    #         k -= m * i\n    #         x -= 1\n    #     elif k - m * (i + 1) >= 0:\n    #         k -= m * (i + 1)\n    #         y -= 1\n    #\n    # return '{} {} {}'.format(x, y, 'L' if k == 0 else 'R')\n\n    k %= n * m\n\n    return '{} {} {}'.format(k // n, k % n, 'L' if k % n == 0 else 'R')\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 498,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 498,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    l = [n for _ in range(n)]\n    r = [m for _ in range(n)]\n    d = [0 for _ in range(2 * n)]\n    l[k - 1] = r[k - 1] = 1\n    l[0] = r[0] = 0\n    for _ in range(m):\n        d[_] = min(l[_], r[_])\n        l[_] -= d[_]\n        r[_] -= d[_]\n    for _ in range(1, n):\n        l[_] += d[_]\n        r[_] += d[_]\n    r[0] = n - max(r)\n    d[0] = n - max(d)\n    for i in range(1, n):\n        l[i] += d[i - 1]\n        r[i] += d[i]\n    r[n - 1] = d[n - 1]\n    d[n] = n - max(d)\n    r[n - 1] = d[n]\n    for i in range(n - 1, 0, -1):\n        d[i] = n - max(d[:i + 1])\n    d[0] = n - max(d)\n    print(r)\n    print(d)\n    return f'{r[k - 1]} {d[k - 1]} {l[k - 1] == \"L\"}'\n"
    },
    {
        "number": 498,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    n, m, k = list(map(int, stdin.split()))\n    if k < n:\n        lanes = [[] for _ in range(n)]\n        for i in range(n):\n            lanes[i] = [1 + i for j in range(m)]\n        if k <= m:\n            return str(1) + \" \" + str(k) + \" R\"\n        else:\n            return str(k - m + 1) + \" \" + str(k) + \" L\"\n    else:\n        return str(k - n + 1) + \" \" + str(k) + \" R\"\n"
    },
    {
        "number": 498,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 498,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 498,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    return \"\""
    },
    {
        "number": 498,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = list(map(int, stdin.split(' ')))\n    if k % m == 0:\n        r = k // m\n        d = 1\n        s = 'L'\n    else:\n        r = k // m + 1\n        d = k % m\n        if d == 0:\n            d = m\n            r -= 1\n        s = 'R'\n    return str(r) +'' + str(d) +'' + s\n"
    },
    {
        "number": 498,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    https://www.codewars.com/kata/santa-claus-where-is-my-place/python\n    '''\n    n, m, k = [int(i) for i in stdin.split()]\n    return str(n) +'' + str(m) +'' + 'R' if (k-1)%(n*m) < n else str(n) +'' + str(m) +'' + 'L'\n"
    },
    {
        "number": 498,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 499,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    deck = stdin\n    return \"\".join(sorted(set(deck)))\n\nprint(solution(\"RRGBR\"))\nprint(solution(\"GRGRG\"))\nprint(solution(\"RBRGBRBGRR\"))\n"
    },
    {
        "number": 499,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    pass\n"
    },
    {
        "number": 499,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return 'B'\n------\ndef"
    },
    {
        "number": 499,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    c = stdin.strip()\n    if n == 1:\n        return c[0]\n    elif n == 2:\n        return sorted(c[0] + c[1])[0] + sorted(c[0] + c[1])[1]\n    else:\n        result = \"\"\n        for i in range(0, n - 1, 2):\n            result += c[i]\n        return result\n\n\ndef"
    },
    {
        "number": 499,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return 'RGB'[stdin.count('R') % 3]\n"
    },
    {
        "number": 499,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Write your code here\n    # Write your code here\n    n = int(stdin)\n    s = stdin.split()\n    a = s[0]\n    count = 0\n    while len(a) > 1:\n        if \"B\" not in a and \"G\" not in a and \"R\" not in a:\n            break\n        if \"B\" in a and \"G\" in a:\n            index = 0\n            if a[0] == a[1]:\n                index = 1\n            a = a[2:] + a[:index] + a[index + 2:]\n            count += 1\n        elif \"B\" in a and \"R\" in a:\n            index = 0\n            if a[0] == a[1]:\n                index = 1\n            a = a[2:] + a[:index] + a[index + 2:]\n            count += 1\n        elif \"G\" in a and \"R\" in a:\n            index = 0\n            if a[0] == a[1]:\n                index = 1\n            a = a[2:] + a[:index] + a[index + 2:]\n            count += 1\n        elif \"R\" in a and \"B\" in a:\n            index = 0\n            if a[0] == a[1]:\n                index = 1\n            a = a[2:] + a[:index] + a[index + 2:]\n            count += 1\n    return a[0] * count\n\n\"\"\""
    },
    {
        "number": 499,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin\n    if n >= 2:\n        s = [stdin[i] for i in range(n)]\n        while len(s) > 1:\n            i = 0\n            while i < len(s) - 1:\n                if s[i]!= s[i + 1]:\n                    s[i], s[i + 1] = s[i + 1], s[i]\n                    break\n                i += 1\n            s = s[i + 1:]\n    return ''.join(s)\n\nprint(solution(\"RRRBBBGGG\"))\n"
    },
    {
        "number": 499,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    result = \"\"\n    while n!= 1:\n        if n % 2 == 0:\n            result += \"B\"\n            n = n // 2\n        else:\n            result += \"G\"\n            n = n // 2 + 1\n    return result[::-1]\n\n\ndef"
    },
    {
        "number": 499,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    num_cards: int = int(stdin[0])\n    cards: str = stdin[1]\n    \n    for i in range(num_cards):\n        card_color = cards[i]\n        if i+1 < num_cards:\n            next_card_color = cards[i+1]\n        else:\n            next_card_color = cards[0]\n        print(f\"{card_color} - {next_card_color}\")\n\nprint(solution(input()))"
    },
    {
        "number": 499,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    possibilities = set()\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                possibilities.add(\"\".join(sorted(stdin[i] + stdin[j] + stdin[k])))\n    return \"\".join(sorted(possibilities))\n\nprint(solution(\"BGRB\"))\n"
    },
    {
        "number": 500,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_safe(p1, p2, p3, p4):\n        return (p3[0] - p1[0]) * (p4[1] - p2[1]) - (p4[0] - p2[0]) * (p3[1] - p1[1])\n    \n    n = int(stdin)\n    \n    if n == 1:\n        print('YES')\n        print(0, 0)\n        return\n    \n    for i in range(n - 1):\n        u, v = map(int, stdin.readline().split())\n        for j in range(i + 1, n):\n            w, x = map(int, stdin.readline().split())\n            if u!= w and v!= w and u!= x and v!= x:\n                if is_safe(u, v, w, x) == 0:\n                    print('YES')\n                    print(u, v)\n                    print(w, x)\n                    return\n    print('NO')\n    return\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  "
    },
    {
        "number": 500,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    return \"YES\" if is_valid(n, edges) else \"NO\"\n\n\ndef"
    },
    {
        "number": 500,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\"\"\"\n    return \"\""
    },
    {
        "number": 500,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 500,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, edges = [int(i) for i in stdin.split('\\n')]\n    start = {i: [] for i in range(1, n + 1)}\n    for i in range(1, n):\n        start[int(stdin.split('\\n')[i])].append(int(stdin.split('\\n')[i + 1]))\n        start[int(stdin.split('\\n')[i + 1])].append(int(stdin.split('\\n')[i]))\n    print(start)\n    return\n"
    },
    {
        "number": 500,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 500,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    n = int(stdin)\n    edges = [tuple(map(int, edge.split())) for edge in stdin.split(\"\\n\")[:-1]]\n    graph = {i: [] for i in range(1, n + 1)}\n    for edge in edges:\n        graph[edge[0]].append(edge[1])\n        graph[edge[1]].append(edge[0])\n    \n    return 'NO' if cycle_find(graph) else 'YES\\n{0} {1}'.format(*vertices_coordinates(graph))\n"
    },
    {
        "number": 500,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(start, cur_coord):\n        if visited[start]:\n            return\n        visited[start] = True\n        x, y = cur_coord\n        for i in tree[start]:\n            if not visited[i]:\n                dfs(i, (x + y, y))\n                dfs(i, (x, y + x))\n\n    n = int(stdin.readline())\n    tree = {i: set() for i in range(n)}\n    for _ in range(n - 1):\n        u, v = map(int, stdin.readline().split())\n        tree[u].add(v)\n        tree[v].add(u)\n    visited = [False] * n\n    dfs(0, (0, 0))\n    if visited[0]:\n        print(\"YES\")\n        for i in range(n):\n            print(0, i)\n    else:\n        print(\"NO\")\n\n\nsolution(\"3\\n1 2\\n2 3\\n3 4\\n4 5\")\n"
    },
    {
        "number": 500,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return"
    },
    {
        "number": 500,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''7\n   ... 1 2\n   ... 1 3\n   ... 2 4\n   ... 2 5\n   ... 3 6\n   ... 3 7\n   ... ''')\n    'YES'\n    >>> solution('''6\n   ... 1 2\n   ... 2 3\n   ... 2 4\n   ... 2 5\n   ... 2 6\n   ... ''')\n    'NO'\n    \"\"\"\n   ..."
    },
    {
        "number": 501,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    odd = [1]\n    even = [2]\n    i = 2\n    while even[-1] <= 10**18:\n        even.append(4 * even[-1] + 2)\n    while odd[-1] <= 10**18:\n        odd.append(6 * odd[-1] + 1)\n    l, r = stdin.split()\n    odd = odd[int(l) - 1: int(r)]\n    even = even[int(l) - 1: int(r)]\n    print(sum(odd) - sum(even))\nsolution(input())\n"
    },
    {
        "number": 501,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Gets the sum of odd or even numbers in the range according to input\n    \n    Args:\n        stdin (str): the input string\n    \n    Returns:\n        str: the answer\n    \"\"\"\n    l, r = [int(x) for x in stdin.split(' ')]\n    \n    odd_numbers = set(range(1, l+1, 2))\n    even_numbers = set(range(2, l+2, 2))\n    \n    odd_sum = sum(odd_numbers)\n    even_sum = sum(even_numbers)\n    \n    return (odd_sum - even_sum) % 1000000007\n"
    },
    {
        "number": 501,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    l, r = map(int, stdin.split(' '))\n    s = (l + r) * (r - l + 1) // 2\n    return s % 1000000007\n"
    },
    {
        "number": 501,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def generate_odd():\n        yield 1\n        yield 3\n        yield 5\n        yield 7\n        yield 9\n        yield 11\n        yield 13\n        yield 15\n        yield 17\n        yield 19\n        yield 21\n        yield 23\n        yield 25\n        yield 27\n        yield 29\n        yield 31\n        yield 33\n        yield 35\n        yield 37\n        yield 39\n        yield 41\n        yield 43\n        yield 45\n        yield 47\n        yield 49\n        yield 51\n        yield 53\n        yield 55\n        yield 57\n        yield 59\n        yield 61\n        yield 63\n        yield 65\n        yield 67\n        yield 69\n        yield 71\n        yield 73\n        yield 75\n        yield 77\n        yield 79\n        yield 81\n        yield 83\n        yield 85\n        yield 87\n        yield 89\n        yield 91\n        yield 93\n        yield 95\n        yield 97\n        yield 99\n        yield 101\n        yield 103\n        yield 105\n        yield 107\n        yield 109\n        yield 111\n        yield 113\n        yield 115\n        yield 117\n        yield 119\n        yield 121\n        yield 123\n        yield 125\n        yield 127\n        yield 129\n        yield 131\n        yield 133\n        yield 135\n        yield 137\n        yield 139\n        yield 141\n        yield 143\n        yield 145\n        yield 147\n        yield 149\n        yield 151\n        yield 153\n        yield 155\n        yield 157\n        yield 159\n        yield 161\n        yield 163\n        yield 165\n        yield 167\n        yield 169\n        yield 171\n        yield 173\n        yield 175\n        yield 177\n        yield 179\n        yield 181\n        yield 183\n        yield 185\n        yield 187\n        yield 189\n        yield 191\n        yield 193\n        yield 195\n        yield 197\n        yield 199\n        yield 201\n        yield 203\n        yield 205\n        yield 207\n        yield 209\n        yield 211\n        yield 213\n        yield 215\n        yield 217\n        yield 219\n        yield 221\n        yield 223\n        yield 225\n        yield 227\n        yield 229\n        yield 231\n        yield 233\n        yield 235\n        yield 237\n        yield 239\n        yield 241\n        yield 243\n        yield 245\n        yield 247\n        yield 249\n        yield 251\n        yield 253\n        yield 255\n        yield 257\n        yield 259\n        yield 261\n        yield 263\n        yield 265\n        yield 267\n        yield 269\n        yield 271\n        yield 273\n        yield 275\n        yield 277\n        yield 279\n        yield 281\n        yield 283\n        yield 285\n        yield 287\n        yield 289\n        yield 291\n        yield 293\n        yield 295\n        yield 297\n        yield 299\n        yield 301\n        yield 303\n        yield 305\n        yield 307\n        yield 309\n        yield 311\n        yield 313\n        yield 315\n        yield 317\n        yield 319\n        yield 321\n        yield 323\n        yield 325\n        yield 327\n        yield 329\n        yield 331\n        yield 333\n        yield 335\n        yield 337\n        yield 339\n        yield 341\n        yield 343\n        yield 345\n        yield 347\n        yield 349\n        yield 351\n        yield 353\n        yield 355\n        yield 357\n        yield 359\n        yield 361\n        yield 363\n        yield 365\n        yield 367\n        yield 369\n        yield 371\n        yield 373\n        yield 375\n        yield 377\n        yield 379\n        yield 381\n        yield 383\n        yield 385\n        yield 387\n        yield 389\n        yield 391\n        yield 393\n        yield 395\n        yield 397\n        yield 399\n        yield 401\n        yield 403\n        yield 405\n        yield 407\n        yield 409\n        yield 411\n        yield 413\n        yield 415\n        yield 417\n        yield 419\n        yield 421\n        yield 423\n        yield 425\n        yield 427\n        yield 429\n        yield 431\n        yield 433\n        yield 435\n        yield 437\n        yield 439\n        yield 441\n        yield 443\n        yield 445\n        yield 447\n        yield 449\n        yield 451\n        yield 453\n        yield 455\n        yield 457\n        yield 459\n        yield 461\n        yield 463\n        yield 465\n        yield 467\n        yield 469\n        yield 471\n        yield 473\n        yield 475\n        yield 477\n        yield 479\n        yield 481\n        yield 483\n        yield 485\n        yield 487\n        yield 489\n        yield 491\n        yield 493\n        yield 495\n        yield 497\n        yield 499\n        yield 501\n        yield 503\n        yield 505\n        yield 507\n        yield 509\n        yield 511\n        yield 513\n        yield 515\n        yield 517\n        yield 519\n        yield 521\n        yield 523\n        yield 525\n        yield 527\n        yield 529\n        yield 531\n        yield 533\n        yield 535\n        yield 537\n        yield 539\n        yield 541\n        yield 543\n        yield 545\n        yield 547\n        yield 549\n        yield 551\n        yield 553\n        yield 555\n        yield 557\n        yield 559\n        yield 561\n        yield 563\n        yield 565\n        yield 567\n        yield 569\n        yield 571\n"
    },
    {
        "number": 501,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    l, r = map(int, stdin.split(' '))\n    a = [3, 5, 7, 9, 11, 13, 15, 17, 19, 21]\n    b = [4, 6, 8, 10, 12, 14, 16, 18, 20, 22]\n    s = 0\n    for i in range(l, r+1):\n        if i % 2:\n            s += a[(i - 1) // 2]\n        else:\n            s += b[(i - 1) // 2]\n    return str(s % 1000000007)\n"
    },
    {
        "number": 501,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    a = 1 if a % 2 == 1 else 0\n    b = (a + 1) * 2 if b % 2 == 0 else (a + 2) * 2\n    return sum(range(a, b, 2)) % (1000000007)\n"
    },
    {
        "number": 501,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    print(sum(int(stdin[i]) for i in range(int(stdin.split()[0]) - 1, int(stdin.split()[1]))))\n    return \"\"\n\"\"\"\n\ndef"
    },
    {
        "number": 501,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\"\"\"\n\u041d\u0430 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0441\u0435\u0440\u0432\u0435\u0440\u0435 \u0433\u0443\u0433\u043b\u0430\u0445\u043e\u0434\u0435\u0440 \u0431\u044b\u043b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d \u0434\u043b\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u043d\u0430 \u043f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043a\u0435. \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0438 \u0437\u0430\u0434\u0430\u0447\u0438 \u043d\u0430\u0448\u0435\u0433\u043e \u0441\u0435\u0440\u0432\u0435\u0440\u0430, \u0433\u0443\u0433\u043b\u0430\u0445\u043e\u0434\u0435\u0440 \u043d\u0443\u0436\u0435\u043d \u0431\u044b\u043b \u0434\u043b\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u043d\u0430 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u043c \u043f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043a\u0435. \u0412\u0430\u0448\u0430 \u0437\u0430\u0434\u0430\u0447\u0430 \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u0434\u043b\u044f \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u043d\u0430 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u0435.\n\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u043d\u0430\u0447\u0430\u043b\u043e \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u0430 \u0438 \u043a\u043e\u043d\u0435\u0446 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u0430. \u041f\u0440\u0438 \u044d\u0442\u043e\u043c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0439, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043d\u0443\u0436\u043d\u043e \u043f\u0440\u0438 \u0441\u0442\u0430\u0440\u0442\u0435 \u043d\u0430\u0436\u0430\u0442\u044c Enter.\n\u0422\u0430\u043a\u0436\u0435 \u043d\u0443\u0436\u043d\u043e \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0432\u044b\u0432\u043e\u0434 \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u043c \u043e\u0442 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0434\u043e \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f.\n\n\u0412\u0430\u0448\u0430 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0442\u044c \u0440\u0430\u0437\u043d\u044b\u0435 \u0432\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435:\n\n\u043f\u0440\u0438 \u043e\u0434\u043d\u043e\u043c \u0432\u0445\u043e\u0434\u043d\u043e\u043c \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0435, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 $1 \\leq l \\leq r \\leq 100$, \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0441\u0430\u043c\u044b\u0439 \u043c\u0430\u043b\u0435\u043d\u044c\u043a\u0438\u0439 \u0438 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b \u043d\u0430 \u043e\u0442\u0440\u0435\u0437\u043a\u0435 \u043e\u0442 $l$ \u0434\u043e $r$.\n\u043f\u0440\u0438 \u0434\u0432\u0443\u0445 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u0445, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 $1 \\leq l1 \\leq r1 \\leq 100$, $1 \\leq l2 \\leq r2 \\leq 100$, \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0441\u0430\u043c\u044b\u0439 \u043c\u0430\u043b\u0435\u043d\u044c\u043a\u0438\u0439 \u0438 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b \u043d\u0430 \u043e\u0442\u0440\u0435\u0437\u043a\u0435 \u043e\u0442 $l1$ \u0434\u043e $r1$ \u0438 \u043e\u0442 $l2$ \u0434\u043e $r2$.\n\u041f\u0440\u0438 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430\u0445, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 $1 \\leq l1 \\leq r1 \\leq 100$, $1 \\leq l2 \\leq r2 \\leq 100$ \u0438 $1 \\leq l3 \\leq r3 \\leq 100$, \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0441\u0430\u043c\u044b\u0439 \u043c\u0430\u043b\u0435\u043d\u044c\u043a\u0438\u0439 \u0438 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b \u043d\u0430 \u043e\u0442\u0440\u0435\u0437\u043a\u0435 \u043e\u0442 $l1$ \u0434\u043e $r1$ \u0438 \u043e\u0442 $l2$ \u0434\u043e $r2$ \u0438 \u043e\u0442 $l3$ \u0434\u043e $r3$.\n\u041f\u0440\u0438 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432 \u0431\u043e\u043b\u0435\u0435 \u0442\u0440\u0435\u0445, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 $1 \\leq l1 \\leq r1 \\leq 100$, $1 \\leq l2 \\leq r2 \\leq 100$ \u0438 $1 \\leq l3 \\leq r3 \\leq 100$, \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0441\u0430\u043c\u044b\u0439 \u043c\u0430\u043b\u0435\u043d\u044c\u043a\u0438\u0439 \u0438 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b \u043d\u0430 \u043e\u0442\u0440\u0435\u0437\u043a\u0435 \u043e\u0442 $l1$ \u0434\u043e $r1$ \u0438 \u043e\u0442 $l2$ \u0434\u043e $r2$ \u0438 \u043e\u0442 $l3$ \u0434\u043e $r"
    },
    {
        "number": 501,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    res = 0\n    for i in range(m - n + 1):\n        res = (res + (n + i + 1) * (i + 1) // 2) % 1000000007\n    print(res)\n    return str(res)\n"
    },
    {
        "number": 501,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def write(number, index, v):\n        if index == len(number):\n            if v % 100000000007 == 0:\n                return number\n            return None\n        if v % 2 == 0:\n            return write(number + '2', index + 2, v + 1)\n        else:\n            return write(number + '1', index + 1, v + 1)\n    stdin = stdin.split(' ')\n    n, m = int(stdin[0]), int(stdin[1])\n    number = '1'\n    result = 0\n    for i in range(m):\n        result += int(number[i])\n        number = write(number, i + 1, 0)\n    print(result % 100000000007)\n"
    },
    {
        "number": 502,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a_x, a_y, b_x, b_y, c_x, c_y = (int(x) for x in stdin.split(' '))\n    if a_x == b_x and a_y == c_y:\n        return 'No'\n    elif a_x == b_x and a_y == c_x:\n        return 'No'\n    elif b_x == c_x and b_y == c_y:\n        return 'No'\n    else:\n        return 'Yes'\n"
    },
    {
        "number": 502,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x, y, a, b, c = [int(c) for c in stdin.split(' ')]\n    dx = b - a\n    dy = c - y\n    if x == 0:\n        if y == 0:\n            if a!= x or b!= y or c!= y:\n                return 'No'\n        elif c == 0:\n            if a!= x or b!= y or c!= y:\n                return 'No'\n        else:\n            return 'No'\n    elif y == 0:\n        if x == 0:\n            if a!= x or b!= y or c!= y:\n                return 'No'\n        elif b == 0:\n            if a!= x or b!= y or c!= y:\n                return 'No'\n        else:\n            return 'No'\n    else:\n        return 'No'\n    if x!= 0:\n        t = y / x\n        t1 = (y - t * x) / x\n        t2 = (y + t * x) / x\n        if t1 == t2:\n            if (a - b) / dx == t:\n                if (c - b) / dy == t:\n                    return 'Yes'\n            elif (c - b) / dx == t:\n                if (a - b) / dy == t:\n                    return 'Yes'\n    return 'No'"
    },
    {
        "number": 502,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\nConstraints\n\n|a_{x}|, |a_{y}|, |b_{x}|, |b_{y}|, |c_{x}|, |c_{y}| \u2264 10^9\n0 \u2264 a_{x}, a_{y}, b_{x}, b_{y}, c_{x}, c_{y}\na_{x}, a_{y}, b_{x}, b_{y}, c_{x}, c_{y}\nare distinct points.\n\n\"\"\"\n\ndef"
    },
    {
        "number": 502,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2, x3, y3 = [int(x) for x in stdin.split()]\n    AB = math.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2)\n    BC = math.sqrt((x3 - x2) ** 2 + (y3 - y2) ** 2)\n    return \"Yes\" if abs((AB * BC) / 2 - (AB + BC)) < 0.0001 else \"No\"\n"
    },
    {
        "number": 502,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    def distance(A, B):\n        return ((A[0] - B[0])**2 + (A[1] - B[1])**2)**0.5\n\n    a, b, c = [int(n) for n in stdin.split(' ')]\n    d = distance(a, b)\n    if abs(a - c) < d and abs(b - c) < d:\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 502,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x, y, a, b, c = [int(x) for x in stdin.split()]\n    return 'Yes' if ((a - b) * (a - c)) == (x * x + y * y) or (\n        (a - b) * (a - c)) == (-x * x + y * y) else 'No'\n"
    },
    {
        "number": 502,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return \"\""
    },
    {
        "number": 502,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    x1, y1, x2, y2, x3, y3 = map(int, stdin.split())\n    if x1 == x2 and y1 == y2 and x2 == x3 and y2 == y3:\n        return \"Yes\"\n    \n    a, b, c = (x2-x1)*(y3-y1) - (x3-x1)*(y2-y1), (x3-x1)*(y1-y2) - (x1-x2)*(y3-y2), (x1-x2)*(y2-y3) - (x2-x3)*(y1-y3)\n    if a == 0:\n        return \"No\"\n    \n    x = (b*b - a*c)/(2*a)\n    y = (b*a + c*b)/(2*a)\n    print(\"Yes\" if (x1 < x < x2 and y1 < y < y2) or (x1 > x > x2 and y1 > y > y2) else \"No\")\n    return \"Yes\" if x1 < x < x2 and y1 < y < y2 or x1 > x > x2 and y1 > y > y2 else \"No\"\n"
    },
    {
        "number": 502,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a == b == c == 0:\n        return \"Yes\"\n    if a == b == c!= 0:\n        return \"No\"\n    elif a == b!= 0 or b == c!= 0 or a == c!= 0:\n        return \"No\"\n    elif a!= 0 and b == 0 and c == 0:\n        return \"No\"\n    elif b == 0 and c == 0 and a!= 0:\n        return \"No\"\n    elif c == 0 and a == 0 and b!= 0:\n        return \"No\"\n    else:\n        return \"Yes\"\n"
    },
    {
        "number": 502,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    A = list(map(int, stdin.split(' ')))\n    if A[0] == 0 and A[1] == 0:\n        return 'Yes'\n    if A[4] == 0 and A[5] == 0:\n        return 'Yes'\n    if A[0] ** 2 + A[1] ** 2 == A[2] ** 2 + A[3] ** 2:\n        return 'Yes'\n    if A[2] ** 2 + A[3] ** 2 == A[0] ** 2 + A[1] ** 2:\n        return 'Yes'\n    return 'No'\n\nprint(solution(input()))\n"
    },
    {
        "number": 503,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    answer = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if a[i] * a[j] % k == a[k]:\n                    answer += 1\n    return str(answer)\n\n\nprint(solution(\"4 2\\n1 1 2 2 4\"))\n"
    },
    {
        "number": 503,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    n, k = [int(x) for x in stdin.split(\" \")]\n    nums = [int(x) for x in stdin.split(\" \")]\n    if k == 1:\n        return str(n)\n    else:\n        count = 0\n        for i in range(1, n):\n            if nums[i] == nums[i - 1] * k:\n                count += 1\n    return str(count)"
    },
    {
        "number": 503,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution.counter)"
    },
    {
        "number": 503,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('6 3\\n1 1 2 2 3 6\\n')\n    '6'\n    \"\"\"\n    n, k = map(int, stdin.split())\n    nums = list(map(int, stdin.split()))\n    ways = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if nums[i] * k == nums[j] * (k - j) == nums[k]:\n                    ways += 1\n    return str(ways)\n"
    },
    {
        "number": 503,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    seq = list(map(int, stdin.split()))\n    return str(sum(seq[i] // k == seq[i + 1] // k for i in range(n - 2)))\n"
    },
    {
        "number": 503,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    L = list(map(int, stdin.split()))\n    cnt = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            for k in range(j+1, N):\n                if L[i]*K == L[j]*K == L[k]*K:\n                    cnt += 1\n    return str(cnt)\n"
    },
    {
        "number": 503,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # return str(result)\n"
    },
    {
        "number": 503,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, k = map(int, stdin.split())\n    return sum(a.count(i) // k for i in range(3))\n\n\ndef"
    },
    {
        "number": 503,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 503,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nfrom typing import List\n\nimport sys\n\nINPUT_LINES = sys.stdin.read().splitlines()\nINPUT_NUMBERS = [int(x) for x in INPUT_LINES[0].split(' ')]\nN, K = INPUT_NUMBERS\n\nnums = INPUT_NUMBERS[1:]"
    },
    {
        "number": 504,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 504,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = [int(i) for i in stdin.split()]\n    costs = [int(i) for i in stdin.split()[1:]]\n    attack, health = 0, 0\n    costs.sort(reverse=True)\n    for i in costs:\n        if a:\n            attack += i * 2\n            a -= 1\n        else:\n            health += i\n            b -= 1\n    return attack + health\n"
    },
    {
        "number": 504,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 504,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(max([int(stdin.split('\\n')[0].split(' ')[i]) * int(stdin.split('\\n')[0].split(' ')[i + 1]) for i in range(1, len(stdin.split('\\n')[0].split(' ')), 2)]))\n\n\ndef"
    },
    {
        "number": 504,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    pass\n"
    },
    {
        "number": 504,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = [int(x) for x in stdin.split()]\n    # n, a, b = [int(x) for x in input().split()]\n    heroes = []\n    for i in range(n):\n        heroes.append([int(x) for x in stdin.split()])\n    dp = [[0 for j in range(a+b+1)] for i in range(n)]\n    for i in range(n):\n        dp[i][0] = heroes[i][1]\n        dp[i][1] = heroes[i][0]\n    for i in range(2, a+b+1):\n        for j in range(n):\n            dp[j][i] = heroes[j][1]\n    for j in range(2, a+b+1):\n        for i in range(n):\n            for k in range(n):\n                if dp[i][j-1] < dp[k][j-1] + dp[i][j]:\n                    dp[i][j] = dp[k][j] + dp[i][j-1]\n    print(dp[0][a+b])\n    # return dp[0][a+b]"
    },
    {
        "number": 504,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    An efficient solution\n    \"\"\"\n    N, A, B = map(int, stdin.split())\n    score = [[0, 0] for _ in range(N)]\n    for _ in range(N):\n        score[_][0], score[_][1] = map(int, stdin.split()[1:])\n    dp = [[0, 0] for _ in range(N)]\n    dp[0][0] = score[0][0]\n    dp[0][1] = score[0][1]\n    for i in range(1, N):\n        dp[i][0] = max(dp[i - 1][1] + score[i][0] * 2, dp[i - 1][0] + score[i][0])\n        dp[i][1] = max(dp[i - 1][0] + score[i][1], dp[i - 1][1] + score[i][1])\n    return max(dp[N - 1])\n\"\"\""
    },
    {
        "number": 504,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('2 1 1\\n10 15\\n6 1')\n    '27'\n    \"\"\"\n    a, b, n = [int(n) for n in stdin.split()]\n    hp, dmg = [0] * n, [0] * n\n    for i, (h, d) in enumerate(zip(hp, dmg)):\n        h, d = [int(n) for n in stdin.split()]\n    return str(sum(hp) + sum(dmg))\n"
    },
    {
        "number": 504,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split(\"\\n\")\n\n    n, a, b = map(int, input[0].split())\n\n    hps = list(map(int, input[1: n + 1]))\n\n    # Create dict with both types of spells in stock\n    spells = {'hp': a, 'dmg': b}\n\n    # Create dict of creatures with corresponding hps and dmgs\n    creatures = {hp: dmg for hp, dmg in zip(hps, map(int, input[n + 1:]))}\n\n    # Initialize dict of the spells used by Max for each creature\n    spells_used = {hp: 0 for hp in hps}\n\n    # Initialize the max damage Max can get\n    max_damage = 0\n\n    # Create set of all the possible max damage combinations of the creatures Max can get\n    # He can use a spell of the first type or the second type on the creature\n    max_damage_combinations = set([0])\n    for hp, hp_times in creatures.items():\n        max_damage_combinations.add(hp + hp_times * spells['dmg'])\n        max_damage_combinations.add(hp + hp_times * spells['hp'])\n\n    # Create list of all the possible max damage combinations of the creatures Max can get\n    # He can use a spell of the first type or the second type on the creature\n    max_damage_combinations = list(max_damage_combinations)\n\n    # He can only use a spell of the first type on the creature once\n    for hp, hp_times in creatures.items():\n        max_damage_combinations.append(hp + hp_times * spells['dmg'])\n\n    # He can only use a spell of the second type on the creature once\n    for hp, hp_times in creatures.items():\n        max_damage_combinations.append(hp + hp_times * spells['hp'])\n\n    # Sort all the max damage combinations\n    max_damage_combinations = sorted(max_damage_combinations)\n\n    # Go through all the possible max damage combinations\n    for current_hp_sum in max_damage_combinations:\n        # If Max can use a spell of the first type\n        if current_hp_sum >= spells['hp']:\n            # If he can use a spell of the second type on the creature\n            if current_hp_sum >= spells['dmg']:\n                # Add the hp times of the creatures and the max damage\n                max_damage += current_hp_sum * sum(creatures.values())\n\n        # If Max can use a spell of the second type\n        elif current_hp_sum >= spells['dmg']:\n            # Add the hp times of the creatures and the max damage\n            max_damage += current_hp_sum * sum(creatures.values())\n\n    return max_damage\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 504,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 505,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    time complexity: O(n^2)\n    space complexity: O(n)\n    '''\n    def find_way(curr_row, curr_col, step):\n        if step < k:\n            next_col = curr_col\n            next_row = curr_row + step\n            if next_row < n and maze[next_row][next_col] == '.':\n                find_way(next_row, next_col, step + 1)\n            next_col = curr_col - step\n            next_row = curr_row\n            if next_col >= 0 and maze[next_row][next_col] == '.':\n                find_way(next_row, next_col, step + 1)\n        else:\n            return\n    maze = [list(line) for line in stdin.split('\\n')]\n    k = int(stdin.split('\\n')[0].split()[-1])\n    n = len(maze)\n    if k > n * n:\n        return \"IMPOSSIBLE\"\n    for i in range(n):\n        for j in range(n):\n            if maze[i][j] == 'X':\n                find_way(i, j, 1)\n    return ''.join(sorted(maze[0]))\n"
    },
    {
        "number": 505,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = [int(x) for x in stdin.split()]\n\n    maze = [list(stdin) for _ in range(n)]\n\n    # Define initial position of the robot\n    x, y = 0, 0\n    # Define possible moves for the robot\n    deltas = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n\n    def next_position(x, y):\n        for dx, dy in deltas:\n            if maze[x + dx][y + dy] == '.':\n                return x + dx, y + dy\n        return None\n\n    # Perform BFS\n    queue = [(x, y)]\n    visited = set()\n    visited.add((x, y))\n    path = []\n    while len(queue) > 0:\n        x, y = queue.pop(0)\n        path.append((x, y))\n        # If we reach the required length then return the path\n        if len(path) == k:\n            return ''.join([maze[x][y] for x, y in path])\n        # Otherwise we search for the next possible moves\n        for dx, dy in deltas:\n            next_x, next_y = next_position(x, y)\n            # If the next position is not visited and it's on the maze\n            if (next_x, next_y) not in visited and next_x < n and next_x >= 0 and next_y < m and next_y >= 0:\n                queue.append((next_x, next_y))\n                visited.add((next_x, next_y))\n    # If we cannot find the robot then return IMPOSSIBLE\n    return 'IMPOSSIBLE'\n\nprint(solution(input()))"
    },
    {
        "number": 505,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    maze = []\n    for _ in range(n):\n        maze.append(list(stdin.split())[1:])\n    for i in range(n):\n        for j in range(m):\n            if maze[i][j] == \"X\":\n                start = (i, j)\n    go = [\"D\", \"L\", \"D\", \"L\"]\n    s = \"\"\n    if k > n + m or len(go) > k:\n        return \"IMPOSSIBLE\"\n    for i in range(k):\n        if i == 0:\n            s += go[0]\n        elif i % 2 == 0:\n            s += go[i % 4]\n        else:\n            s += go[(i + 1) % 4]\n    path = set()\n    i, j = start\n    x, y = i, j\n    path.add((x, y))\n    for c in s:\n        if c == \"D\":\n            x += 1\n        elif c == \"L\":\n            y -= 1\n        elif c == \"U\":\n            x -= 1\n        elif c == \"R\":\n            y += 1\n        if (x, y) not in path:\n            continue\n        path.add((x, y))\n        if len(path) == n * m:\n            return s\n    return \"IMPOSSIBLE\"\n"
    },
    {
        "number": 505,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Gets the solution of a given maze.\n    \"\"\"\n    pass"
    },
    {
        "number": 505,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # \uc774 \ubb38\uc81c\ub294 \uc644\ud0d0\ud558\uba74 \uc5b4\ub5a8\uae4c\uc694?\n    # \uc804\uccb4 \uc785\ub825\uc744 \ubc1b\uc544\uc11c \uccab \ubc88\uc9f8 \uc904\uc744 \uc138\ub85c\ub85c \uc804\ubd80 \ub2e4 \ubc30\uc5f4\ub85c \uc800\uc7a5\ud55c\ub2e4.\n    # \uadf8\ub7ec\ub2e4\uac00 \ub9c8\uc9c0\ub9c9 \uc904\uc744 \uc2dc\uacc4\ubc29\ud5a5\uc73c\ub85c \ub3cc\ub9ac\uba74 \ub428.\n    # \uc774\uac78 \ubc30\uc5f4\ub85c \uad6c\ud604\ud558\ub294 \uac83\uc740 \uc2dc\uac04\ucd08\uacfc\uac00 \ub098\ub124.\n    # \uadf8\ub798\uc11c \uc644\uc804\ud0d0\uc0c9\uc73c\ub85c \ud558\uc2dc\ub294\uac70\ub3c4 \uc544\ub2c8\uace0 \uc774\ubd84\ud0d0\uc0c9\uc73c\ub85c \ud558\uc2dc\ub294\uac83\uc774 \uc88b\uc744\uae4c\ubd10 \ucd94\uac00\ud55c\ub2e4.\n    # \uc774\ubd84\ud0d0\uc0c9\uc73c\ub85c \ud558\uace0 \ubcf4\uba74 \ud30c\ub77c\uba54\ud2b8\ub9ad \uc11c\uce58 \uc624\ube0c\uc81d\ud2b8\ub77c\ub294\uac78 \uc54c\uc544\uc57c\uaca0\ub2e4.\n    # \uc804\uccb4 \uc904\uc744 \uae30\uc900\uc73c\ub85c \uc88c/\uc6b0/\uc704/\uc544\ub798 \uc911 \ud558\ub098\uc758 \ubc29\ud5a5\uc73c\ub85c \uc6c0\uc9c1\uc774\ub294\uac74 \ud558\ub098\uc758 \uacbd\ub85c\ub77c\uace0 \uc0dd\uac01\ud558\uc790.\n    # \ucd5c\ub300 \uae38\uc774\uac00 10^6\uc774\ub2c8\uae4c \uc774\ubd84\ud0d0\uc0c9\uc774\ub77c\ub294\uac8c \ud544\uc694\ud558\uaca0\ub294\uac70\uac19\ub2e4.\n    # \uc5ec\uae30\uc11c \ubb38\uc81c\uac00 \ub418\ub294\uac74 \uadf8\ub0e5 \uc2dc\uc791\uc810\uc5d0\uc11c \uc88c/\uc6b0/\uc704/\uc544\ub798 \uc911 \uc5b4\ub5a4 \ubc29\ud5a5\uc73c\ub85c \uc2dc\uc791\ud558\ub294\uac83\uc774 \uac00\uc7a5 \uac00\uae4c\uc6b4\uac70\ub0d0.\n    # \uadf8\ub7ec\ub2c8\uae4c \uc2dc\uc791\uc810\uc5d0\uc11c \uc6b0\ub85c \uac00\uc7a5 \uac00\uae4c\uc6b4\uac78 \ucc3e\ub294\uac70\uc57c.\n    # \uc2dc\uc791\uc810\uc5d0\uc11c \uc6b0\ub85c \uac00\ub294\ub370 \uc6b0\uc5d0\uc11c \uac08\uc218\ub85d \ucee4\uc9c0\ub294 \uc560\ub4e4\uc774 \ud6e8\uc52c \uc791\ub2e4.\n    # \uadf8\ub798\uc11c \uc6b0\uc5d0\uc11c \uc2dc\uc791\ud558\ub294\uac78 \uad6c\ud604\ud558\ub824\uba74 \uc6b0\uc5d0\uc11c \uc624\ub978\ucabd\ubd80\ud130 \uc2dc\uc791\ud558\ub294\uac70\uc784.\n    # \uc2dc\uc791\uc810\uc5d0\uc11c \uc6b0\ub85c \uac00\ub294\ub370 \uc6b0\uc5d0\uc11c \uac08\uc218\ub85d \ucee4\uc9c0\ub294 \uc560\ub4e4\uc774 \ud6e8\uc52c \uc791\ub2e4.\n    # \uc6b0\uc5d0\uc11c \uc2dc\uc791\ud558\ub294\uac78 \uad6c\ud604\ud558\ub824\uba74 \uc6b0\uc5d0\uc11c \uc624\ub978\ucabd\ubd80\ud130 \uc2dc\uc791\ud558\ub294\uac70\uc784.\n    # \uc6b0\uc5d0\uc11c \uc2dc\uc791\ud558\ub294\uac70 \uc67c\ucabd\uc73c\ub85c \ub3cc\uc544\uc624\ub294 \ubc29\ubc95\uc744 \ub3cc\ub9b0\ub2e4.\n    # \uc6b0\uc5d0\uc11c \uc2dc\uc791\ud558\ub294\uac70 \uc67c\ucabd\uc73c\ub85c \ub3cc\uc544\uc624\ub294 \ubc29\ubc95\uc744 \uc67c\ucabd\uc73c\ub85c \ub3cc\uc544\uc624\ub294\uac70\uc784.\n    # \uc774\ub807\uac8c \uc0dd\uac01\ud558\uba74 \uc774\uac8c \ub2e4\uc775\uc2a4\ud2b8\ub77c\uac00 \uc544\ub2c8\ub77c\uace0 \uc0dd\uac01\ud558\uc790.\n    # \uadf8\ub7f0\ub370 \uc774\uac8c \uc774\ubd84\ud0d0"
    },
    {
        "number": 505,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 505,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The input is a string consisting of lines of the form\n    <row number> <col number> <symbol>\n    where <symbol> is '.', '*' or 'X'.\n    \"\"\"\n    \n    n, m, k = [int(x) for x in stdin.split()]\n    \n    grid = [x for x in stdin.split('\\n') if x]\n    grid = [[y for y in x if y!= '\\n'] for x in grid]\n\n    if 'X' not in grid[0]:\n        print('IMPOSSIBLE')\n        return\n\n    # Rotate the grid 180 degrees so that we are\n    # going up and to the right.\n    grid = list(zip(*reversed(grid)))\n    \n    current_pos = (0, 0)\n    grid_size = len(grid)\n    \n    directions = ['U', 'D', 'L', 'R']\n    moves = {'U': (0, -1), 'D': (0, 1), 'L': (-1, 0), 'R': (1, 0)}\n    \n    # If there is a cycle, then there should be exactly k moves.\n    # If there isn't, then the last cell in the cycle should be the\n    # one where the Robot started.\n    cycle_end = (0, 0)\n    for step in range(k):\n        print(step)\n        if current_pos in grid:\n            grid.remove(current_pos)\n            if len(grid) == 0:\n                break\n        else:\n            grid.append(current_pos)\n\n        # Move the Robot in the direction it's facing.\n        current_pos = (current_pos[0] + moves[grid[0][0]][0],\n                       current_pos[1] + moves[grid[0][0]][1])\n    \n    else:\n        cycle_end = current_pos\n    \n    cycle_start = (0, 0)\n    for step in range(k):\n        if cycle_start in grid:\n            grid.remove(cycle_start)\n            if len(grid) == 0:\n                break\n        else:\n            grid.append(cycle_start)\n\n        cycle_start = (cycle_start[0] + moves[grid[0][0]][0],\n                       cycle_start[1] + moves[grid[0][0]][1])\n    \n    print(cycle_start, cycle_end)\n    print(''.join(directions[x[0]] for x in grid))\n    \n    return ''.join(directions[x[0]] for x in grid)\n"
    },
    {
        "number": 505,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\n--------test case--------\n\nfrom collections import deque"
    },
    {
        "number": 505,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"The solution is not complete\"\"\"\n    inputs = stdin.split('\\n')\n    maze = [list(i) for i in inputs]\n    # create initial pos\n    initial_pos = []\n    for row in range(len(maze)):\n        for col in range(len(maze[0])):\n            if maze[row][col] == 'X':\n                initial_pos = (row, col)\n                break\n        if len(initial_pos) == 2:\n            break\n    # create empty list for the solution\n    solution = []\n    # generate steps\n    steps = [(0, 1), (1, 0), (-1, 0), (0, -1)]\n    # get m and k from inputs\n    m = int(inputs[0].split()[0])\n    k = int(inputs[0].split()[1])\n    # loop through k steps\n    for _ in range(k):\n        # get neighbors\n        neighbors = []\n        for step in steps:\n            x, y = initial_pos[0] + step[0], initial_pos[1] + step[1]\n            # if cell in range of maze\n            if 0 <= x < m and 0 <= y < m:\n                # if cell is not obstacle\n                if maze[x][y]!= '*':\n                    # if cell is empty\n                    if maze[x][y] == '.':\n                        neighbors.append((step[0], step[1]))\n        # check if we can move\n        if len(neighbors) == 0:\n            return 'IMPOSSIBLE'\n        # get initial step and add to solution\n        initial_step = neighbors[0]\n        solution.append(initial_step[0])\n        solution.append(initial_step[1])\n        # update pos\n        initial_pos = (initial_pos[0] + initial_step[0], initial_pos[1] + initial_step[1])\n    return ''.join(solution)\n\n\ndef"
    },
    {
        "number": 505,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2 3 2\\n..**\\nX..\\n\")\n    'RLL'\n    >>> solution(\"3 3 4\\n***\\n*X*\\n***\\n\")\n    'DLDDLLLRRRUURU'\n    >>> solution(\"5 6 14\\n..***.\\n*...X.\\n..*...\\n..*.**\\n....*.\\n\")\n    'IMPOSSIBLE'\n    \"\"\"\n    n, m, k = map(int, stdin.split())\n    path = list(stdin)\n    cells = set()\n\n    def dfs(path, index, cells):\n        if len(path) == k:\n            return path\n        if index == m:\n            return\n\n        if path[-1] == \"L\":\n            if index in cells:\n                return\n            for c in cells:\n                path.append(\"R\")\n                path.append(\"U\")\n                path.append(\"D\")\n                path.append(\"L\")\n                dfs(path, index + 1, cells)\n                path.pop()\n                path.pop()\n                path.pop()\n                path.pop()\n        elif path[-1] == \"R\":\n            if index in cells:\n                return\n            for c in cells:\n                path.append(\"L\")\n                path.append(\"U\")\n                path.append(\"D\")\n                path.append(\"R\")\n                dfs(path, index + 1, cells)\n                path.pop()\n                path.pop()\n                path.pop()\n                path.pop()\n        elif path[-1] == \"U\":\n            if index in cells:\n                return\n            for c in cells:\n                path.append(\"L\")\n                path.append(\"R\")\n                path.append(\"U\")\n                path.append(\"U\")\n                dfs(path, index + 1, cells)\n                path.pop()\n                path.pop()\n                path.pop()\n                path.pop()\n        elif path[-1] == \"D\":\n            if index in cells:\n                return\n            for c in cells:\n                path.append(\"L\")\n                path.append(\"R\")\n                path.append(\"U\")\n                path.append(\"D\")\n                dfs(path, index + 1, cells)\n                path.pop()\n                path.pop()\n                path.pop()\n                path.pop()\n\n    for i in range(n):\n        if path[i]!= \"X\":\n            cells.add(i)\n\n    dfs(path, 0, cells)\n\n    if path[0] == \"L\":\n        path.insert(0, \"R\")\n        path.insert(0, \"U\")\n        path.insert(0, \"D\")\n        path.insert(0, \"L\")\n    elif path[0] == \"R\":\n        path.insert(0, \"L\")\n        path.insert(0, \"U\")\n        path.insert(0, \"D\")\n        path.insert(0, \"R\")\n    elif path[0] == \"U\":\n        path.insert(0, \"R\")\n        path.insert(0, \"R\")\n        path.insert(0, \"U\")\n        path.insert(0, \"U\")\n    else:\n        path.insert(0, \"L\")\n        path.insert(0, \"L\")\n        path.insert(0, \"U\")\n        path.insert(0, \"U\")\n\n    return \"\".join(path)\n"
    },
    {
        "number": 506,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin.split()[0]) // int(stdin.split()[1]))\n"
    },
    {
        "number": 506,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    result = 1\n    while a > b:\n        a -= b\n        result += 1\n    return result"
    },
    {
        "number": 506,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.strip().split())\n    count = 0\n    while a >= b:\n        a, b = map(int, stdin.strip().split())\n        a = a - b\n        count = count + 1\n    return count\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 506,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    input_data = stdin.split('\\n')\n    a = int(input_data[0].split()[0])\n    b = int(input_data[0].split()[1])\n    count = 0\n    while True:\n        a -= b\n        if a > 0:\n            count += 1\n        else:\n            break\n    return str(count)\n\nprint(solution(input()))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 506,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    cnt = 0\n    while a > 0 and b > 0:\n        cnt += a // b\n        a = a % b\n        if a!= 0:\n            cnt += 1\n        a, b = b, a\n    return str(cnt)\n"
    },
    {
        "number": 506,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a < b:\n        return a\n    else:\n        return a // b + a % b > 0\n"
    },
    {
        "number": 506,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    # \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043e\u0432 \u0441\u0442\u0440\u043e\u043a \u0438 \u0441\u0442\u043e\u043b\u0431\u0446\u043e\u0432\n    squares = (a ** 2 + a * b) // (2 * a)\n    # \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u0441\u0442\u043e\u043b\u0431\u0435\u0446, \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u043e\u043c\u0443 \u0440\u0430\u0437\u0431\u0438\u0432\u0430\u0435\u043c \u043f\u043b\u043e\u0441\u043a\u043e\u0441\u0442\u044c\n    col = (a * b) // (2 * a)\n    # \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043e\u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u0441\u0442\u043e\u043b\u0431\u0446\u0430\n    sq = b // col\n    # \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043e\u0432, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u043c\u0443 \u0441\u0442\u043e\u043b\u0431\u0446\u0443\n    sq_last = squares // col\n    # \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043e\u0432, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u043c\u0443 \u0441\u0442\u043e\u043b\u0431\u0446\u0443 \u0431\u0435\u0437 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e\n    sq_rest = squares % col\n    # \u0434\u0430\u043b\u0435\u0435 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u043c \u043f\u043e\u0434\u0441\u0447\u0451\u0442 \u043e\u0441\u0442\u0430\u0442\u043a\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u0441\u0442\u043e\u043b\u0431\u0446\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u043c\u0438 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u0430\u043c\u0438\n    for i in range(sq):\n        sq_rest -= sq\n    # \u0441\u0447\u0438\u0442\u0430\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043e\u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u0441\u0442\u043e\u043b\u0431\u0446\u0430 \u0438 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u043e\u0441\u0442\u0430\u0442\u043e\u043a\n    sq_last_rest = (a - col * sq_last) // sq_rest\n    # \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043e\u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u0441\u0442\u043e\u043b\u0431\u0446\u0430 \u0431\u0435\u0437 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e\n    sq_rest = squares - sq_last * sq_last_rest\n    # \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043e\u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u0441\u0442\u043e\u043b\u0431\u0446\u0430\n    sq_last = sq_last * sq_last_rest\n    # \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043e\u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u0441\u0442\u043e\u043b\u0431\u0446\u0430\n    squares = sq_last + sq_last_rest\n    # \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u043e\u0431\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043e\u0432 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u0441\u0442\u043e\u043b\u0431\u0446\u0430\n    sq_rest = squares - b\n    # \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u043e\u0431\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043e\u0432 \u0441\u0442\u0440\u043e\u043a\n    squares = squares - sq_rest\n    return str(squares)\n"
    },
    {
        "number": 506,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    return stdin\n \n \n"
    },
    {
        "number": 506,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    n = a // b + (1 if a % b else 0)\n    return str(n)"
    },
    {
        "number": 506,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 507,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \" \".join([str(int(x) - 1) for x in stdin.split()])"
    },
    {
        "number": 507,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    b = list(map(int, stdin.split()[1:]))\n    \n    # at least one i (1 \u2264 i \u2264 n) such that a_{i} \u2260 p_{i}, and exactly one j (1 \u2264 j \u2264 n) such that b_{j} \u2260 p_{j}.\n    # https://stackoverflow.com/questions/18706534/python-find-the-only-valid-permutation-when-a-condition-is-met\n    \n    l = list(range(1, n + 1))\n    for i in range(1, n + 1):\n        if a[i - 1]!= l[i - 1]:\n            l[i - 1] = a[i - 1]\n        if b[i - 1]!= l[i - 1]:\n            l[i - 1] = b[i - 1]\n    \n    return''.join(map(str, l))"
    },
    {
        "number": 507,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return None"
    },
    {
        "number": 507,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5\\n1 1 3 4\\n1 4 3 4\")\n    '1 2 5 4 3'\n    >>> solution(\"5\\n4 4 2 3 1\\n5 4 5 3 1\")\n    '5 4 2 3 1'\n    \"\"\"\n    n = int(stdin.readline().strip())\n    colours = stdin.readline().strip().split()\n    ans = stdin.readline().strip().split()\n\n    if len(colours)!= len(ans):\n        raise ValueError(\"incorrect input\")\n\n    for i in range(n):\n        if colours[i]!= ans[i]:\n            return f\"{i + 1} {ans[i]}\"\n    return f\"{n} {n}\""
    },
    {
        "number": 507,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns a possible permutation Sengoku could have had on that night\n    '''\n    # get number of colours\n    num_colours = int(stdin.readline())\n    # get the permutation\n    permutation = stdin.readline().split()\n    # get the first outbursts\n    first = stdin.readline().split()\n    # get the second outbursts\n    second = stdin.readline().split()\n\n    # find the correct permutation\n    correct_permutation = ''\n    # first check\n    for i in range(num_colours):\n        if int(permutation[i])!= int(first[i]):\n            correct_permutation = first\n    # second check\n    for i in range(num_colours):\n        if int(permutation[i])!= int(second[i]):\n            correct_permutation = second\n    return correct_permutation\n"
    },
    {
        "number": 507,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    b = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    return''.join([str(x) for x in list(range(1, n + 1))[::-1]])"
    },
    {
        "number": 507,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n\n    # permutation \ud568\uc218 \uc0ac\uc6a9\ud574\uc11c \uc2e4\ud589\ud558\ub294 \ubc29\ubc95\n    # from itertools import permutations\n    # for p in permutations(range(1, n+1)):\n    #     # p: 1\ubd80\ud130 n\uae4c\uc9c0\uc758 \uc218\uc5f4\uc5d0\uc11c \uc21c\uc11c\ub97c \ud45c\uc2dc\ud558\ub294 \uc21c\uc5f4\uc744 \ub098\ud0c0\ub0b8\ub2e4.\n    #     if p == a:\n    #         return''.join(map(str, p))\n    #     if p == b:\n    #         return''.join(map(str, p))\n\n    # \uc774\uc911 for\ubb38 \uc0ac\uc6a9\ud574\uc11c \uc2e4\ud589\ud558\ub294 \ubc29\ubc95\n    # permutation \uc548\uc5d0 \uc788\ub294 \ud568\uc218\ub97c \uc0ac\uc6a9\ud574\uc11c \ud558\ub294 \ubc29\ubc95\n    # \uc5f0\uc0b0 \ud69f\uc218\ub97c \uc904\uc774\uae30 \uc704\ud574 \uace0\ub824\ud574\uc57c \ud560 \uac83.\n    # permutation \uc548\uc5d0 \uc788\ub294 \ud568\uc218\ub294 \uc81c\uc57d \uc870\uac74\uc5d0 \ub9de\uc9c0 \uc54a\ub294 \uc21c\uc5f4\uc744 \ub9ac\ud134\ud558\uc9c0 \uc54a\uc73c\ubbc0\ub85c \uc81c\uc57d \uc870\uac74\uc744 \uc8fc\uc9c0 \uc54a\ub294\ub2e4.\n    # \uc2dc\uac04\ubcf5\uc7a1\ub3c4\ub294 n! / (n - k)! \uac00 \uc544\ub2c8\ub77c n! / k! \uc774\ub2e4.\n    # permutation \ud568\uc218\ub294 \uc81c\uc57d \uc870\uac74\uc774 \uc788\uc73c\ubbc0\ub85c \uc5b4\ub5a4 \uc870\uac74\uc5d0\ub3c4 \ub9de\uc9c0 \uc54a\ub294 \uacbd\uc6b0\uc758 \uc218\uac00 \uc0dd\uae30\ub294 \uac83\uc744 \ubc29\uc9c0\ud560 \uc218 \uc788\ub2e4.\n    # \uc6b0\uc120 \uc21c\uc5f4\uc5d0\uc11c \uc81c\uc678\ud558\uace0 k\ub85c \ubd84\ub9ac\ub418\ub294 \uacbd\uc6b0\uc758 \uc218\ub294 n - k\ub85c \ub098\ub204\uba74 \uc815\ub2f5\uc774 \ub41c\ub2e4.\n    p = list(range(1, n+1))\n    for i in range(1, n+1):\n        p.remove(a[i-1])\n        p.remove(b[i-1])\n    return''.join(map(str, p))\n\nsolution(stdin)\n\nsolution(input())\n"
    },
    {
        "number": 507,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    C-1.75\n    Write a function:\n    def solution(A: List[int])\n    that, given a non-empty array A of N integers, returns the length of the longest decreasing subsequence in this array.\n    The subsequence can be started at any array index.\n    For example, given the array [8, 4, 12, 2, 10, 6, 14, 1, 9],\n    the function should return 5, as explained above.\n    Assume that:\n    N is an integer within the range [1..1,000,000];\n    each element of array A is an integer within the range [1..1,000,000,000].\n    In your solution, focus on correctness.\n    The performance of your solution will not be the focus of the assessment.\n    '''\n    pass\n\n\ndef"
    },
    {
        "number": 507,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport sys\nimport re\n\nnum = sys.stdin.readline()\n\na = [int(i) for i in sys.stdin.readline().split()]\nb = [int(i) for i in sys.stdin.readline().split()]\n\nn = int(num)\n\na_1 = set(a)\nb_1 = set(b)\na_2 = set([i for i in range(1, n+1) if i not in a_1])\nb_2 = set([i for i in range(1, n+1) if i not in b_1])"
    },
    {
        "number": 507,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a, b = [int(x) for x in stdin.split()[1:]], [int(x) for x in stdin.split()[1:]]\n\n    # We only need to find a pair a, b such that a!= b\n    # There can be duplicates, so we do not need to do the exact math\n    # Instead, we can use a set\n    # We will need to sort the numbers so that a[0] < a[1] <... < a[n]\n    a = sorted([x for x in a])\n    b = sorted([x for x in b])\n    ans = [0] * n\n    for i in range(n):\n        if a[i]!= b[i]:\n            ans[i] = a[i]\n            a[i] = b[i]\n    return''.join([str(x) for x in ans])\n"
    },
    {
        "number": 508,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a = [int(x) for x in stdin.split(' ')]\n    ans = [1, 2, 3]\n    while len(ans) < n:\n        for i in range(1, len(ans)):\n            if abs(a - (ans[0] * ans[1] * ans[2])) < abs(a - (ans[i] * ans[i - 1] * ans[i - 2])):\n                ans = [ans[i], ans[i - 1], ans[i - 2]]\n            elif abs(a - (ans[0] * ans[1] * ans[2])) == abs(a - (ans[i] * ans[i - 1] * ans[i - 2])):\n                ans = [ans[i], ans[i - 1], ans[i - 2]] if ans[i] < ans[i - 1] else [ans[i - 1], ans[i - 2], ans[i]]\n            else:\n                ans = [ans[i], ans[i - 1], ans[i - 2]]\n    return''.join(map(str, ans))"
    },
    {
        "number": 508,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    import math\n    s = int(math.sqrt(n))\n    for c in range(s + 1):\n        x, y, z = s + 1 - c, s, s + 1\n        if x * (x - 1) * y * (y - 1) * z * (z - 1) == n * (n - 1) * (n - 2) * (n - 3):\n            return str(x) +'' + str(y) +'' + str(z)\n\nprint(solution('3 15'))\nprint(solution('4 67'))\nprint(solution('4 68'))\n\nimport math\na = math.sqrt(2)\nprint(a)\n\na = math.sqrt(2)\nprint(a)\n\nimport math\na = math.sqrt(2)\nprint(a)\n\nimport math\na = math.sqrt(2)\nprint(a)\n\nimport math\na = math.sqrt(2)\nprint(a)\n\nimport math\na = math.sqrt(2)\nprint(a)\n\nimport math\na = math.sqrt(2)\nprint(a)\n\nimport math\na = math.sqrt(2)\nprint(a)\n\nimport math\na = math.sqrt(2)\nprint(a)\n\nimport math\na = math.sqrt(2)\nprint(a)\n\nimport math\na = math.sqrt(2)\nprint(a)\n\nimport math\na = math.sqrt(2)\nprint(a)\n\nimport math\na = math.sqrt(2)\nprint(a)\n\nimport math\na = math.sqrt(2)\nprint(a)\n\nimport math\na = math.sqrt(2)\nprint(a)\n\nimport math\na = math.sqrt(2)\nprint(a)\n\nimport math\na = math.sqrt(2)\nprint(a)\n\nimport math\na = math.sqrt(2)\nprint(a)\n\nimport math\na = math.sqrt(2)\nprint(a)\n\nimport math\na = math.sqrt(2)\nprint(a)\n\nimport math\na = math.sqrt(2)\nprint(a)\n\nimport math\na = math.sqrt(2)\nprint(a)\n\nimport math\na = math.sqrt(2)\nprint(a)\n\nimport math\na = math.sqrt(2)\nprint(a)\n\nimport math\na = math.sqrt(2)\nprint(a)\n\nimport math\na = math.sqrt(2)\nprint(a)\n\nimport math\na = math.sqrt(2)\nprint(a)\n\nimport math\na = math.sqrt(2)\nprint(a)\n\nimport math\na = math.sqrt(2)\nprint(a)\n\nimport math\na = math.sqrt(2)\nprint(a)\n\nimport math\na = math.sqrt(2)\nprint(a)\n\nimport math\na = math.sqrt(2)\nprint(a)\n\nimport math\na = math.sqrt(2)\nprint(a)\n\nimport math\na = math.sqrt(2)\nprint(a)\n\nimport math\na = math.sqrt(2)\nprint(a)\n\nimport math\na = math.sqrt(2)\nprint(a)\n\nimport math\na = math.sqrt(2)\nprint(a)\n\nimport math\na = math.sqrt(2)\nprint(a)\n\nimport math\na = math.sqrt(2)\nprint(a)\n\nimport math\na = math.sqrt(2)\nprint(a)\n\nimport math\na = math.sqrt(2)\nprint(a)\n\nimport math\na = math.sqrt(2)\nprint(a)\n\nimport math\na = math.sqrt(2)\nprint(a)\n\nimport math\na = math.sqrt(2)\nprint(a)\n\nimport math\na = math.sqrt(2)\nprint(a)\n\nimport math\na = math.sqrt(2)\nprint(a)\n\nimport math\na = math.sqrt(2)\nprint(a)\n\nimport math\na = math.sqrt(2)\nprint(a)\n\nimport math\na = math.sqrt(2)\nprint(a)\n\nimport math\na = math.sqrt(2)\nprint(a)\n\nimport math\na = math.sqrt(2)\nprint(a)\n\nimport math\na = math.sqrt(2)\nprint(a)\n\nimport math\na = math.sqrt(2)\nprint(a)\n\nimport math\na = math.sqrt(2)\nprint(a)\n\nimport math\na = math.sqrt(2)\nprint(a)\n\nimport math\na = math.sqrt(2)\nprint(a)\n\nimport math\na = math.sqrt(2)\nprint(a)\n\nimport math\na = math.sqrt(2)\nprint(a)\n\nimport math\na = math.sqrt(2)\nprint(a)\n\nimport math\na = math.sqrt(2)\nprint(a)\n\nimport math\na = math.sqrt(2)\nprint(a)\n\nimport math\na = math.sqrt(2)\nprint(a)\n\nimport math\na = math.sqrt(2)\nprint(a)\n\nimport math\na = math.sqrt(2)\nprint(a)\n\nimport math\na = math.sqrt(2)\nprint(a)\n\nimport math\na = math.sqrt(2)\nprint(a)\n\nimport math\na = math.sqrt(2)\nprint(a)\n\nimport math\na = math.sqrt(2)"
    },
    {
        "number": 508,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin.split()\n    n, a = int(x[0]), int(x[1])\n    solution_helper(n, a)\n\n\ndef"
    },
    {
        "number": 508,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 15\")\n    '1 2 3'\n    >>> solution(\"4 67\")\n    '2 1 3'\n    >>> solution(\"4 68\")\n    '4 1 2'\n    \"\"\"\n    n, a = [int(n) for n in stdin.split()]\n    if a % 360 == 0:\n        return str(1) + \" \" + str(2) + \" \" + str(n)\n    elif a == 180:\n        return str(1) + \" \" + str(n) + \" \" + str(n)\n    else:\n        v1, v2 = get_v1_v2(n, a)\n        return str(v1) + \" \" + str(v2) + \" \" + str(n)\n\n\ndef"
    },
    {
        "number": 508,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    (n, a) = list(map(int, stdin.split(' ')))\n    counter = 1\n    triangle_side = a / (2 * math.tan(math.radians(180 / n)))\n    triangle_angle = 180 / n\n    for i in range(0, n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if math.sqrt((triangle_side * (triangle_side - counter)) ** 2 + (triangle_side * (triangle_side - counter)) ** 2) <= a:\n                    return str(i + 1) +'' + str(j + 1) +'' + str(k + 1)\n                counter += 1\n\nprint(solution(input()))\n"
    },
    {
        "number": 508,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, a = list(map(int, stdin.split(\" \")))\n    v = list(range(1, n + 1))\n    v.append(v[1])\n    v.insert(0, v[-2])\n    a = a % 360\n    m = abs(a - (a % 180))\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if abs((v[i] * v[j]) % n + v[j] - v[i]) < m:\n                m = abs((v[i] * v[j]) % n + v[j] - v[i])\n                v1, v2, v3 = v[i], v[j], v[(v[i] * v[j]) % n + v[j] - v[i]]\n    return f\"{v1} {v2} {v3}\"\n"
    },
    {
        "number": 508,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution(\"3 15\")\n    '1 2 3'\n    >>> solution(\"4 67\")\n    '2 1 3'\n    >>> solution(\"4 68\")\n    '4 1 2'\n    '''\n    n, a = [int(x) for x in stdin.split()]\n    if a < n:\n        return''.join(str(i) for i in range(1, n+1) if i % 2)\n    else:\n        a = 360 - a\n        return''.join(str(i) for i in range(1, n+1) if not i % 2)\n"
    },
    {
        "number": 508,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    return''.join(map(str, sorted(set([i for i in range(1, n + 1)] * 2) - set([i for i in range(1, n + 1)] + [i for i in range(2, n + 1)] + [i for i in range(1, n)]))))\n"
    },
    {
        "number": 508,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    l = list(map(int, stdin.split()))\n    n = l[0]\n    a = l[1]\n    p = (a / 360) * 2 * math.pi\n    radians = math.pi * (3 - math.sqrt(5))\n    a_degree = 180 * p / radians\n    if a_degree >= 360:\n        a_degree = a_degree - 360\n    a_degree = math.floor(a_degree)\n    if n == 3:\n        if a_degree == 60:\n            return f\"1 2 3\"\n        else:\n            return f\"1 3 2\"\n    elif n == 4:\n        if a_degree == 45:\n            return f\"2 1 3\"\n        elif a_degree == 90:\n            return f\"4 1 2\"\n        else:\n            return f\"2 3 4\"\n    elif n == 5:\n        if a_degree == 30:\n            return f\"3 1 4\"\n        elif a_degree == 60:\n            return f\"4 1 2\"\n        elif a_degree == 90:\n            return f\"2 3 1\"\n        elif a_degree == 120:\n            return f\"3 4 2\"\n        else:\n            return f\"1 4 3\"\n    elif n == 6:\n        if a_degree == 30:\n            return f\"4 2 1\"\n        elif a_degree == 60:\n            return f\"1 4 3\"\n        elif a_degree == 90:\n            return f\"3 4 1\"\n        elif a_degree == 120:\n            return f\"2 4 3\"\n        elif a_degree == 150:\n            return f\"4 1 2\"\n        else:\n            return f\"2 1 4\"\n    elif n == 7:\n        if a_degree == 30:\n            return f\"5 1 4\"\n        elif a_degree == 45:\n            return f\"4 1 2\"\n        elif a_degree == 90:\n            return f\"1 4 3\"\n        elif a_degree == 120:\n            return f\"3 4 1\"\n        elif a_degree == 150:\n            return f\"4 2 3\"\n        elif a_degree == 180:\n            return f\"2 3 1\"\n        elif a_degree == 210:\n            return f\"5 4 2\"\n        elif a_degree == 225:\n            return f\"3 2 4\"\n        elif a_degree == 270:\n            return f\"4 3 1\"\n        else:\n            return f\"1 3 2\"\n    elif n == 8:\n        if a_degree == 30:\n            return f\"6 1 4\"\n        elif a_degree == 45:\n            return f\"5 1 2\"\n        elif a_degree == 90:\n            return f\"1 4 3\"\n        elif a_degree == 120:\n            return f\"4 2 1\"\n        elif a_degree == 150:\n            return f\"2 1 4\"\n        elif a_degree == 180:\n            return f\"3 4 1\"\n        elif a_degree == 210:\n            return f\"5 4 2\"\n        elif a_degree == 225:\n            return f\"4 3 1\"\n        elif a_degree == 270:\n            return f\"1 3 2\"\n        elif a_degree == 300:\n            return f\"6 4 3\"\n        elif a_degree == 330:\n            return f\"2 3 4\"\n        else:\n            return f\"3 1 2\"\n    elif n == 9:\n        if a_degree == 30:\n            return f\"7 1 4\"\n        elif a_degree == 45:\n            return f\"6 1 2\"\n        elif a_degree == 90:\n            return f\"1 4 3\"\n        elif a_degree == 120:\n            return f\"5 1 2\"\n        elif a_degree == 150:\n            return f\"2 1 4\"\n        elif a_degree == 180:\n            return f\"3 4 1\"\n        elif a_degree == 210:\n            return f\"6 2 4\"\n        elif a_degree == 225:\n            return f\"5 2 1\"\n        elif a_degree == 270:\n            return f\"2 4 3\"\n        elif a_degree == 300:\n            return f\"7 4 1\"\n        elif a_degree == 330:\n            return f\"4 3 2\"\n        else:\n            return f\"1 3 2\"\n    elif n == 10:\n        if a_degree == 30:\n            return f\"8 1 4\"\n        elif a_degree == 45:\n            return f\"7 1 2\"\n        elif a_degree == 90:\n            return f\"1 4 3\"\n        elif a_degree == 120:\n            return f\"6 1 2\"\n        elif a_degree == 150:\n            return f\"5 1 4\"\n        elif a_degree == 180:\n            return f\"4 1 3\"\n        elif a_degree == 210:\n            return f\"7 2 4\"\n        elif a_degree == 225:\n            return f\"6 2 1\"\n        elif a_degree == 270:\n            return f\"3 2 4\"\n        elif a_degree == 300:\n            return f\"8 3 1\"\n        elif a_degree == 330:\n            return f\"4 2 3\"\n        else:\n            return f\"2 1 3\"\n"
    },
    {
        "number": 508,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    sides = stdin.split()\n    n = int(sides[0])\n    a = int(sides[1])\n\n    if a < 90:\n        if a % 90 == 0:\n            a //= 90\n            a -= 1\n            print(a, n - 1)\n        else:\n            a //= 90\n            print(a, n - 1)\n    else:\n        if (a + 90) % 180 == 0:\n            a += 90\n            a //= 180\n            a -= 1\n            print(n - 1, a)\n        else:\n            a += 90\n            a //= 180\n            print(n - 1, a)\n"
    },
    {
        "number": 509,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3\n   ... 10\n   ... 20\n   ... 30''')\n    'YES'\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    angles = [int(stdin.split('\\n')[i]) for i in range(1, n + 1)]\n    assert len(angles) == n\n    summation = 0\n    angles.sort()\n    for i in range(n):\n        summation += angles[i]\n    if summation % 360 == 0:\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 509,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 509,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    count = int(stdin.readline().strip())\n    angle = []\n    for _ in range(count):\n        angle.append(int(stdin.readline().strip()))\n    print(\"YES\" if all(map(lambda x: x == 0, angle)) else \"NO\")\n    return ''\n"
    },
    {
        "number": 509,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(3)\n    'YES'\n    >>> solution(6)\n    'NO'\n    >>> solution(7)\n    'YES'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 509,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    https://app.codility.com/demo/results/training7LZMT6-4U8/\n    \"\"\"\n    n = int(stdin)\n    l = [int(i) for i in stdin.split()]\n    if n == 1:\n        return \"YES\" if l[0] == 0 else \"NO\"\n    if n == 2:\n        return \"YES\" if (l[0] + l[1]) % 360 == 0 or (l[0] - l[1]) % 360 == 0 else \"NO\"\n\n    l.sort()\n    if (l[0] + l[1]) % 360 == 0 or (l[0] - l[1]) % 360 == 0:\n        return \"YES\"\n    return \"NO\"\n\"\"\"\nn = int(input())\nl = [int(i) for i in input().split()]\n"
    },
    {
        "number": 509,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.readline())\n    b = [int(x) for x in stdin.readlines()]\n    if a % 360 in b:\n        return 'YES'\n    return 'NO'\n\n\ndef"
    },
    {
        "number": 509,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    d = {}\n    for i in range(n):\n        d[i] = int(stdin.readline())\n    arr = [0]*360\n    m = min(d.values())\n    if m > 180:\n        for i in range(n):\n            arr[d[i]-1] += 1\n        for i in range(len(arr)):\n            if arr[i] == 0:\n                arr[i] = 360 - arr[i]\n            else:\n                arr[i] = 360 - arr[i]\n        if arr[0] < arr[1]:\n            print(\"NO\")\n        else:\n            print(\"YES\")\n    else:\n        if m%360 == 0:\n            print(\"YES\")\n        else:\n            print(\"NO\")"
    },
    {
        "number": 509,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 509,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    angles = [int(stdin) for stdin in stdin.split('\\n')]\n    return 'YES' if n % 360 == 0 or n % 360 == 0 or 360 % n == 0 else 'NO'"
    },
    {
        "number": 509,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 510,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split(' '))\n    print(max(max(a, b) - d, max(c, d) - min(a, b), max(a, c) - min(b, c), max(b, c) - min(a, c)))\n"
    },
    {
        "number": 510,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(x) for x in stdin.split()]\n    l = b - a\n    r = c - b\n    if l == r == d:\n        return 0\n    elif l < r or r < l:\n        return r\n    elif r > l:\n        return l\n"
    },
    {
        "number": 510,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return''.join(map(str, stdin.split()))\n"
    },
    {
        "number": 510,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    if min(b, c) >= d:\n        return 0\n    elif min(b, c) < d:\n        return (d - min(b, c)) / 2\nsolution(input())\n"
    },
    {
        "number": 510,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(x) for x in stdin.split(' ')]\n    ans = min(abs(a - b), abs(a - c), abs(b - c))\n    for i in range(1, ans + 1):\n        if abs(a - b) < i + d and abs(a - c) < i + d and abs(b - c) < i + d:\n            break\n    return str(i + 1)\n"
    },
    {
        "number": 510,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    return str(max(0, d - abs(a - b) - abs(b - c) - abs(c - a)))\n\"\"\"\n"
    },
    {
        "number": 510,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = (int(i) for i in stdin.split())\n    answer = min(b-a, c-b, d-c)\n    return answer\n\ndef"
    },
    {
        "number": 510,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(x) for x in stdin.split()]\n    return max(abs(b - a), abs(c - a), abs(c - b), abs(d - a), abs(d - b), abs(d - c))\n"
    },
    {
        "number": 510,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = list(map(int, stdin.split()))\n    return max(abs(a - b), abs(a - c), abs(b - c))\n    #return max(abs(b - a), abs(b - c), abs(c - a), abs(c - b), abs(a - c))\n    #return max(abs(b - a), abs(b - c))"
    },
    {
        "number": 510,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    if a + b + c > 2 * d:\n        return \"impossible\"\n    m = max(a, b, c)\n    if max(a, b, c) < d:\n        return \"impossible\"\n    if a >= d:\n        return (a + c + d) // 2\n    elif b >= d:\n        return (a + b + d) // 2\n    elif c >= d:\n        return (a + b + c) // 2\n    elif a + b >= d:\n        return (d + m) // 2\n    elif a + c >= d:\n        return (d + m) // 2\n    elif b + c >= d:\n        return (d + m) // 2\n    elif a + b + c == 2 * d:\n        return d\n    else:\n        return \"impossible\"\n\n\ndef"
    },
    {
        "number": 511,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = [int(e) for e in stdin.split()]\n    if x == 0 and y == 0:\n        return \"0\"\n    elif x == 0:\n        return \"1\"\n    elif y == 0:\n        return str(x)\n    if y > x:\n        return \"1\" + solution(str(x) + \" \" + str(y))\n    if y % 2 == 0:\n        return solution(str(x) + \" \" + str(int(y / 2)))\n    else:\n        return solution(str(x) + \" \" + str(int(y / 2)) + \" \" + str(int(y / 2) + 1))\n\n\ndef"
    },
    {
        "number": 511,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    x, y = map(int, stdin.split())\n    res = 0\n    if y:\n        res += 1\n        x, y = x, y - x\n    while y:\n        res += 1\n        x, y = y, x % y\n    return res\n"
    },
    {
        "number": 511,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    input_list = list(map(int, stdin.split()))\n    return str(math.gcd(input_list[0], input_list[1]))\n"
    },
    {
        "number": 511,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    \n    return str(x * y)\n"
    },
    {
        "number": 511,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    print(1 + solution(stdin) % (10 ** 12))\n"
    },
    {
        "number": 511,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('5 3\\n')\n    3\n    >>> solution('6 3\\n')\n    1\n    \"\"\"\n    input_as_list = stdin.split(' ')\n    a = int(input_as_list[0])\n    b = int(input_as_list[1])\n\n    def gcd(a, b):\n        if b == 0:\n            return a\n        else:\n            return gcd(b, a % b)\n\n    def f(a, b):\n        if a == 0:\n            return 0\n        elif b == 0:\n            return 1\n        else:\n            return 1 + f(a, b - gcd(a, b))\n\n    return f(a, b)\n"
    },
    {
        "number": 511,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    result = 1\n    for i in range(a, b + 1):\n        result += i // gcd(i, b)\n    return result\n\ndef"
    },
    {
        "number": 511,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(solve(*map(int, stdin.readline().split())))\n\n\ndef"
    },
    {
        "number": 511,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x, y = [int(x) for x in stdin.split()]\n    return str(x * y)\n"
    },
    {
        "number": 511,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    line = stdin.split()\n    x, y = int(line[0]), int(line[1])\n\n    while y!= 0:\n        x, y = y, x % y\n\n    return str(x)\n"
    },
    {
        "number": 512,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solves the problem \"\"\"\n\n    pass\n"
    },
    {
        "number": 512,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(test_stdin[0])\n    Yes\n    >>> solution(test_stdin[1])\n    No\n    >>> solution(test_stdin[2])\n    No\n    \"\"\"\n    floor_map = dict(map(int, line.split()) for line in stdin.split(\"\\n\") if line)\n    for floor_a, floor_b in floor_map.items():\n        try:\n            if abs(floor_a - floor_b)!= 1:\n                return \"No\"\n        except TypeError:\n            return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 512,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    number_of_records = int(stdin.readline())\n    records = []\n    for _ in range(number_of_records):\n        record = stdin.readline().split()\n        records.append([int(record[0]), int(record[1])])\n\n    return \"Yes\" if is_possible(records) else \"No\"\n\n\ndef"
    },
    {
        "number": 512,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds a pair of A and B where C_i = C_j, i!= j and B - A = C_i\n    \"\"\"\n    count = 0\n    lines = stdin.split('\\n')\n    N = int(lines[0])\n    for i in range(1, N + 1):\n        A, B = lines[i].split(' ')\n        A = int(A)\n        B = int(B)\n        if A == -1 or B == -1:\n            count += 1\n            continue\n        count += (B - A - 1)\n\n    if count == N * (N - 1) // 2:\n        return \"Yes\"\n    return \"No\"\n"
    },
    {
        "number": 512,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 512,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    You are given a sequence of n people who went up and down an elevator. Each person i has recorded a series of floors that they visited, in the form a_i and b_i, where 1 <= a_i <= n, 1 <= b_i <= n, and a_i < b_i.\n    The elevator has moved from floor 1 to floor 2n.\n    The goal is to find the number of times that the elevator moved from floor 1 to floor 2n, and the number of times that each person i visited each floor in the sequence.\n    There is a complication. At the beginning of the second half of the elevator journey, the elevator stops at each floor i, but the following doesn't hold:\n    - In every floor i, the number of times that the elevator moved from floor 1 to floor 2n equals the number of times that each person i visited floor i.\n    So, the number of times the elevator moved from floor 1 to floor 2n is not an invariant.\n    Write a program that takes as input the sequence of people's records and determines whether there is a way to make the invariant true.\n    '''\n    pass\n"
    },
    {
        "number": 512,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    if stdin == \"\":\n        return \"\"\n    else:\n        return str(stdin)\n"
    },
    {
        "number": 512,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return string representation of out solution,\n    that is, a boolean value either 'Yes' or 'No'.\n    \"\"\"\n    # write your code in Python 3.6\n    pass\n    # replace pass above by your implementation\n    #...\n    return ''"
    },
    {
        "number": 512,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''Given a list of input integers, check if there is a pair of elements that is consistent with the remaining integers.\n\n    Args:\n        stdin (str): The input from standard input.\n\n    Returns:\n        str: Yes if there is a pair of integers that is consistent with the input, otherwise no.\n    '''\n    n = int(stdin.split()[0])\n    records = []\n    for line in stdin.split('\\n')[1:]:\n        record = list(map(int, line.split()))\n        records.append(record)\n    \n    records.sort()\n\n    for i in range(len(records) - 1):\n        current_record = records[i]\n        next_record = records[i+1]\n        \n        if current_record[0] == next_record[0] and current_record[1] == next_record[1] and current_record[2] == next_record[2]:\n            continue\n        elif current_record[0] == -1 or current_record[1] == -1 or next_record[0] == -1 or next_record[1] == -1:\n            continue\n        else:\n            return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 512,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Return the string that you want to be printed as a result of running your program\n    return ''\n"
    },
    {
        "number": 513,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    points = [list(map(int, line.split())) for line in stdin.split('\\n')]\n    x = sorted([i[0] for i in points])\n    y = sorted([i[1] for i in points])\n    if x[2] < x[1] + x[0]:\n        if y[2] < y[1] + y[0]:\n            return'respectable'\n    return 'ugly'\n"
    },
    {
        "number": 513,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x_dict = dict()\n    y_dict = dict()\n    for i in stdin.split(\"\\n\"):\n        x_dict[int(i.split()[0])] = x_dict.get(int(i.split()[0]), 0) + 1\n        y_dict[int(i.split()[1])] = y_dict.get(int(i.split()[1]), 0) + 1\n    for key in x_dict:\n        if x_dict[key] > 1:\n            return \"ugly\"\n    for key in y_dict:\n        if y_dict[key] > 1:\n            return \"ugly\"\n    return \"respectable\"\n"
    },
    {
        "number": 513,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    l = []\n    for i in stdin.split('\\n'):\n        l.append(list(map(int, i.split(' '))))\n    check = 0\n    for i in l:\n        if i[0] < i[1]:\n            check += 1\n        if i[0] > i[1]:\n            check -= 1\n    if check == 8:\n        return \"respectable\"\n    else:\n        return \"ugly\"\n\"\"\"\n"
    },
    {
        "number": 513,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return 'ugly' if len(set(int(x) for x in stdin.split()))!= 8 else'respectable'\n\n\ndef"
    },
    {
        "number": 513,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 513,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    points = []\n    for i in range(0, 8):\n        x, y = stdin.split(' ')\n        points.append((int(x), int(y)))\n    def dist(p1: tuple, p2: tuple) -> int:\n        return abs(p1[0] - p2[0]) + abs(p1[1] - p2[1])\n    \n    def is_inside(p1: tuple, p2: tuple, p3: tuple) -> bool:\n        return p1[0] * (p2[1] - p3[1]) + p2[0] * (p3[1] - p1[1]) + p3[0] * (p1[1] - p2[1]) == 0\n    \n    def line_from_points(p1: tuple, p2: tuple) -> tuple:\n        a = p2[1] - p1[1]\n        b = p1[0] - p2[0]\n        c = p2[0] * p1[1] - p1[0] * p2[1]\n        return (a, b, c)\n    \n    def intersection_points(l1: tuple, l2: tuple, p1: tuple, p2: tuple) -> list:\n        x_int = (l1[0] * l2[1] - l1[1] * l2[0]) * (p1[1] - p2[1]) - (l1[0] * l2[2] - l1[2] * l2[0]) * (p1[0] - p2[0])\n        y_int = (l1[0] * l2[2] - l1[2] * l2[0]) * (p1[1] - p2[1]) - (l1[1] * l2[2] - l1[2] * l2[1]) * (p1[0] - p2[0])\n        if x_int == 0 and y_int == 0:\n            return []\n        return [(x_int / (l1[0] * l2[1] - l1[1] * l2[0]), y_int / (l1[0] * l2[2] - l1[2] * l2[0])), (x_int / (l1[1] * l2[2] - l1[2] * l2[1]), y_int / (l1[1] * l2[2] - l1[2] * l2[1]))]\n    \n    lines = []\n    for i in range(0, 3):\n        lines.append(line_from_points(points[i], points[i + 3]))\n    for i in range(0, 3):\n        lines.append(line_from_points(points[i], points[i + 1]))\n    for i in range(0, 3):\n        lines.append(line_from_points(points[i], points[i + 2]))\n    \n    good_line = (-1, -1, -1)\n    for i in range(0, 8):\n        for j in range(i + 1, 8):\n            for k in range(j + 1, 8):\n                if is_inside(points[i], points[j], points[k]):\n                    if good_line[0] == -1 or dist(points[i], points[j]) < good_line[0]:\n                        good_line = (dist(points[i], points[j]), i, j)\n                    if good_line[0] == -1 or dist(points[i], points[k]) < good_line[0]:\n                        good_line = (dist(points[i], points[k]), i, k)\n                    if good_line[0] == -1 or dist(points[j], points[k]) < good_line[0]:\n                        good_line = (dist(points[j], points[k]), j, k)\n    if good_line[0] == -1:\n        return \"ugly\"\n    \n    good_line_points = [points[good_line[1]], points[good_line[2]], points[good_line[3]]]\n    bad_line_points = [points[0], points[1], points[2], points[3], points[4], points[5], points[6], points[7]]\n    \n    intersections = []\n    for line in lines:\n        intersections.append(intersection_points(line, good_line_points, points[0], points[1]))\n        intersections.append(intersection_points(line, good_line_points, points[0], points[2]))\n        intersections.append(intersection_points(line, good_line_points, points[0], points[3]))\n        intersections.append(intersection_points(line, good_line_points, points[1], points[2]))\n        intersections.append(intersection_points(line, good_line_points, points[1], points[3]))\n        intersections.append(intersection_points(line, good_line_points, points[2], points[3]))\n    \n    for point in intersections:\n        if len(point) == 0:\n            return \"ugly\"\n        for other_point in intersections:\n            if point!= other_point and len(point) == 1 and len(other_point) == 1:\n                if point[0] in other_point:\n                    return \"ugly\"\n    return \"respectable\"\n"
    },
    {
        "number": 513,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1 = [int(n) for n in stdin.split()]\n    x2, y2 = [int(n) for n in stdin.split()]\n    x3, y3 = [int(n) for n in stdin.split()]\n    x4, y4 = [int(n) for n in stdin.split()]\n    x5, y5 = [int(n) for n in stdin.split()]\n    x6, y6 = [int(n) for n in stdin.split()]\n    x7, y7 = [int(n) for n in stdin.split()]\n    x8, y8 = [int(n) for n in stdin.split()]\n    if x1 < x2 and x2 < x3 and y1 < y2 and y2 < y3 and x1 < x4 and x4 < x3 and y1 < y4 and y4 < y3 and x1 < x5 and x5 < x3 and y1 < y5 and y5 < y3 and x1 < x6 and x6 < x3 and y1 < y6 and y6 < y3 and x1 < x7 and x7 < x3 and y1 < y7 and y7 < y3 and x1 < x8 and x8 < x3 and y1 < y8 and y8 < y3:\n        return \"respectable\"\n    else:\n        return \"ugly\""
    },
    {
        "number": 513,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Calculate the result\"\"\"\n    x_1, y_1 = map(int, stdin.split())\n    x_2, y_2 = map(int, stdin.split())\n    x_3, y_3 = map(int, stdin.split())\n    x_4, y_4 = map(int, stdin.split())\n    x_5, y_5 = map(int, stdin.split())\n    x_6, y_6 = map(int, stdin.split())\n    x_7, y_7 = map(int, stdin.split())\n    x_8, y_8 = map(int, stdin.split())\n\n    is_respectable = True\n    if x_1 == x_2 == x_3:\n        is_respectable &= y_4!= y_1\n        is_respectable &= y_5!= y_2\n        is_respectable &= y_6!= y_3\n    elif x_4 == x_5 == x_6:\n        is_respectable &= y_1!= y_4\n        is_respectable &= y_2!= y_5\n        is_respectable &= y_3!= y_6\n    elif x_1 == x_4 == x_7:\n        is_respectable &= y_2!= y_1\n        is_respectable &= y_3!= y_4\n        is_respectable &= y_5!= y_6\n        is_respectable &= y_6!= y_7\n    elif x_2 == x_5 == x_8:\n        is_respectable &= y_1!= y_2\n        is_respectable &= y_3!= y_5\n        is_respectable &= y_4!= y_6\n        is_respectable &= y_6!= y_7\n    elif x_3 == x_6 == x_7:\n        is_respectable &= y_1!= y_3\n        is_respectable &= y_2!= y_5\n        is_respectable &= y_4!= y_6\n        is_respectable &= y_5!= y_7\n    elif x_1 == x_5 == x_6:\n        is_respectable &= y_1!= y_5\n        is_respectable &= y_2!= y_3\n        is_respectable &= y_4!= y_7\n    elif x_3 == x_5 == x_7:\n        is_respectable &= y_1!= y_3\n        is_respectable &= y_2!= y_4\n        is_respectable &= y_6!= y_7\n    else:\n        is_respectable = False\n\n    return \"respectable\" if is_respectable else \"ugly\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 513,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return 'ugly'\n"
    },
    {
        "number": 513,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 514,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n\"\"\"\n"
    },
    {
        "number": 514,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 1 1\n   ... 4 5\n   ... 5 11\n   ... ''')\n    YES\n    YES\n    NO\n    \"\"\"\n\n    T = int(stdin)\n    for _ in range(T):\n        n, d = (int(x) for x in stdin.split())\n        if n <= d:\n            print('YES')\n        else:\n            print('NO')\n    return ''\n"
    },
    {
        "number": 514,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here. Feel free to use as many code cells as needed.\"\"\"\n\n    return \"\"\n"
    },
    {
        "number": 514,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"\"\"1 1\n   ... 4 5\n   ... 5 11\n   ... \"\"\")\n    'YES'\n    >>> solution(\"\"\"1 1\n   ... 4 5\n   ... 5 10\n   ... \"\"\")\n    'NO'\n    \"\"\"\n    import ast\n    times = ast.literal_eval(stdin)\n\n    for i, t in enumerate(times):\n        n, d = t\n        if n > d:\n            print(\"NO\")\n            continue\n        x = d // (n + 1)\n        if d % (n + 1) > x:\n            print(\"NO\")\n            continue\n        print(\"YES\")\n    return ''\n"
    },
    {
        "number": 514,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 514,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline().strip())\n    for _ in range(T):\n        n, d = list(map(int, stdin.readline().strip().split()))\n        if d % (n + 1) == 0:\n            print('YES')\n        else:\n            print('NO')\n"
    },
    {
        "number": 514,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return ''"
    },
    {
        "number": 514,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\"\"\"\n"
    },
    {
        "number": 514,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find out if the program will fit in n days\"\"\"\n    # my solution\n    pass\n\n\ndef"
    },
    {
        "number": 514,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    The function takes one string and returns a string.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 515,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Write your code here\n    def number_of_loops(k):\n        loops = 0\n        n = 1\n        while True:\n            loops += str(n).count(\"4\") + str(n).count(\"5\") + str(n).count(\"6\") + str(n).count(\"7\") + str(n).count(\"8\")\n            if loops >= k:\n                return n\n            n += 1\n    k = int(stdin)\n    print(number_of_loops(k))\n\n\nsolution(input())\n"
    },
    {
        "number": 515,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2\")\n    462\n    >>> solution(\"6\")\n    8080\n    >>> solution(\"8\")\n    8080\n    \"\"\"\n    k = int(stdin)\n    for n in range(1, 10 ** 9):\n        if k == len(decode_number(n)):\n            return n\n    return -1\n\n\ndef"
    },
    {
        "number": 515,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    loop_set = set()\n    loop_list = [i+1 for i in range(1,10)]\n    loop_list.append(0)\n    while len(loop_set) < N:\n        for loop in loop_list:\n            loop_set.add(int(str(loop)*2))\n    return loop_set\n    # return loop_set\n"
    },
    {
        "number": 515,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    n = 0\n    for i in range(10**18):\n        if str(k) in str(i):\n            n = i\n            break\n    if n == 0:\n        return '-1'\n    else:\n        return n\n"
    },
    {
        "number": 515,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(solve(stdin.strip()))\n"
    },
    {
        "number": 515,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    loop_number = int(stdin)\n    loop_index = 0\n    number = 1\n    while loop_number > 0:\n        number = number * 10 % (10 ** 18)\n        if number == 0:\n            return -1\n        loop_index += 1\n        loop_number -= 1\n    return number\n\n\nprint(solution('2'))\nprint(solution('6'))\n"
    },
    {
        "number": 515,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Get the solution to the problem\"\"\"\n    print(stdin)\n    return \"\""
    },
    {
        "number": 515,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return '8'\n"
    },
    {
        "number": 515,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return''.join(str(s) for s in stdin.split('\\n') if int(s) > 0)\n"
    },
    {
        "number": 515,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    k = int(stdin)\n    n = 0\n    while True:\n        n += 1\n        if len(str(n)) == k:\n            if not check_loops(n):\n                break\n    if n > 10**18:\n        return -1\n    else:\n        return n\n\n\ndef"
    },
    {
        "number": 516,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    :param stdin: the standard input string\n    :return: the string of the answer\n    '''\n    # parse the input\n    n, m = map(int, stdin.split('\\n')[0].split())\n    s = stdin.split('\\n')[1]\n    t = stdin.split('\\n')[2]\n\n    # preprocessing\n    possible_indices = {}\n    for i in range(n):\n        if s[i] not in possible_indices:\n            possible_indices[s[i]] = [i]\n        else:\n            possible_indices[s[i]].append(i)\n\n    # the answer\n    answer = 0\n    for i in range(m):\n        if t[i] not in possible_indices:\n            continue\n        answer += len(possible_indices[t[i]])\n        possible_indices[t[i]].append(i)\n\n    # output the answer\n    print(answer)\n    print(' '.join(str(i + 1) for i in possible_indices[t[answer]]))\n\n    return '0'"
    },
    {
        "number": 516,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"\"\"3 5\n   ... abc\n   ... xaybz\n   ... \"\"\")\n    2\n    >>> solution(\"\"\"4 10\n   ... abcd\n   ... ebceabazcd\n   ... \"\"\")\n    1\n    >>> solution(\"\"\"6 8\n   ... cdef\n   ... dcef\n   ... bdef\n   ... bcef\n   ... cdef\n   ... dcef\n   ... \"\"\")\n    1\n    \"\"\"\n    s, t = stdin.splitlines()\n    n, m = map(int, s.split())\n    t = t.split()\n    s = s.split()\n    l = set()\n    ans = []\n    for i in range(len(t) - m + 1):\n        if set(t[i : i + m]) == set(s):\n            l.add(i + 1)\n            ans.append(i + 1)\n    return \"\\n\".join(map(str, sorted(ans)))"
    },
    {
        "number": 516,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 516,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    stdin = stdin.split('\\n')\n    \n    s_size = int(stdin[0].split()[0])\n    s = stdin[0].split()[1]\n    t_size = int(stdin[1].split()[0])\n    t = stdin[1].split()[1]\n    \n    substrings = []\n    for i in range(s_size+1):\n        for j in range(s_size-i+1):\n            substrings.append(s[j:j+i])\n    substrings = list(set(substrings))\n    \n    min_substring_changes = s_size\n    for sub in substrings:\n        if s.count(sub) == t.count(sub):\n            changes = 0\n            for ch in sub:\n                if ch!= '?':\n                    changes += 1\n            if changes < min_substring_changes:\n                min_substring_changes = changes\n    \n    if min_substring_changes == s_size:\n        return 0\n    \n    return min_substring_changes\n\nsolution('4 10\\nabcde\\nebceabazcd')\n"
    },
    {
        "number": 516,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    input: str\n    return: str\n    \"\"\"\n    # write your code in Python 3.6\n    n, m = stdin.split(\" \")\n    n, m = int(n), int(m)\n    s = stdin[:n]\n    t = stdin[n:]\n    s = list(s)\n    t = list(t)\n    res = 0\n    for i in range(m):\n        for j in range(n):\n            if s[j] == \"?\" and t[i] == s[j]:\n                s[j] = t[i]\n                res += 1\n                break\n    return res, [i + 1 for i in range(res) if s[i] == \"?\"]\n"
    },
    {
        "number": 516,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    from itertools import permutations\n    from itertools import combinations\n    from itertools import product\n\n    # s = stdin[0]\n    # t = stdin[1]\n\n    s = 'abcd'\n    t = 'eabcd'\n    len_s = len(s)\n    len_t = len(t)\n\n    # n = stdin[0][0]\n    # m = stdin[0][1]\n\n    n = 4\n    m = 10\n\n    # arr = stdin[1:]\n\n    s_list = list(s)\n    t_list = list(t)\n\n    # print(s_list)\n    # print(t_list)\n\n    result_list = []\n\n    for i in range(n):\n        # print('i: ', i)\n        # print('s_list[i]: ', s_list[i])\n        # print('t_list[i]: ', t_list[i])\n\n        result = []\n        for j in range(len_s):\n            if s_list[j] == t_list[i]:\n                result.append(j)\n        # print('result: ', result)\n        result_list.append(result)\n\n    # print(result_list)\n\n    count = 0\n    for i in range(n):\n        # print(i)\n        # print(result_list[i])\n        # print(combinations(result_list[i], 2))\n        # for j in range(len(combinations(result_list[i], 2))):\n        #     print(j)\n        for j in combinations(result_list[i], 2):\n            # print('combinations: ', j)\n            # print('result: ', s_list[j[0]])\n            # print('result: ', s_list[j[1]])\n            if s_list[j[0]]!= '?' and s_list[j[1]]!= '?':\n                count += 1\n\n    # print(count)\n    return count\n"
    },
    {
        "number": 516,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def find(a, b, s):\n        s2 = ''\n        i = 1\n        while a < b:\n            if i * a < b:\n                s2 += s[i * a]\n                i += 1\n            else:\n                s2 += s[i * a - b]\n                a += b\n        return s2\n\n    a, b = [int(i) for i in stdin.split('\\n')[:2]]\n    print(a, b)\n    s = stdin.split('\\n')[2]\n    print(s)\n    s2 = ''\n    for i in range(1, b + 1):\n        print(i)\n        s2 += find(i, b, s)\n    print(s2)\n\n\n    return gcd(a, b)\n\n\ndef"
    },
    {
        "number": 516,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    inp = stdin.split('\\n')\n    n, m = int(inp[0].split()[0]), int(inp[0].split()[1])\n    s = inp[1]\n    t = inp[2]\n\n    # print(n, m)\n    # print(s, t)\n\n    res_list = []\n    temp_s = s\n    for i in range(len(s)):\n        # print(i, temp_s)\n        curr = temp_s[:i] + '?' + temp_s[i+1:]\n        # print(curr)\n        if curr in t:\n            res_list.append(i)\n            temp_s = curr\n    print(res_list)\n\n    return min(res_list)\n\n\nassert solution(\"3 5\\nabc\\nxaybz\") == 2\nassert solution(\"4 10\\nabcd\\nebceabazcd\") == 1\n\n\"\"\"\nfrom collections import Counter\nfrom itertools import combinations\nimport string\n\ndef"
    },
    {
        "number": 516,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 5\\nabc\\nxaybz\")\n    '2\\n2 3'\n    >>> solution(\"4 10\\nabcd\\nebceabazcd\")\n    '1\\n2'\n    \"\"\"\n    a, b = map(int, stdin.split(\"\\n\")[:2])\n    s, t = stdin.split(\"\\n\")[1:]\n\n    # preprocess\n    m = []\n    for i, ch in enumerate(s):\n        if ch!= \"?\" and ch not in m:\n            m.append(ch)\n\n    # binary search\n    def cnt(st: str) -> int:\n        ans = 0\n        for ch in m:\n            if ch not in st:\n                return float(\"inf\")\n            ans += st.count(ch)\n        return ans\n\n    l, r = 0, len(s)\n    while l < r:\n        m = (l + r) // 2\n        if cnt(s[:m]) > b:\n            l = m + 1\n        else:\n            r = m\n    l -= 1\n\n    # print result\n    cnt_t = cnt(t)\n    for i in range(l, len(s)):\n        if cnt_t > b and s[i] == \"?\":\n            cnt_t -= 1\n        else:\n            break\n    print(l, i)\n    return stdin\n"
    },
    {
        "number": 516,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    print(1)\n    print(1, 2)\n    return \"\"\n"
    },
    {
        "number": 517,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # Write your code here\n    import sys\n    n, d, h = map(int, sys.stdin.readline().split())\n    adj = [[] for _ in range(n)]\n    for _ in range(n - 1):\n        v1, v2 = map(int, sys.stdin.readline().split())\n        adj[v1 - 1].append(v2 - 1)\n        adj[v2 - 1].append(v1 - 1)\n    #print(adj)\n    root = 0\n    def dfs(node, par, dist):\n        nonlocal h, d, root\n        for neigh in adj[node]:\n            if neigh!= par:\n                if neigh < node:\n                    dfs(neigh, node, dist + 1)\n                else:\n                    dfs(neigh, node, dist + 1)\n        if dist > d:\n            d = dist\n            root = node\n    dfs(root, -1, 0)\n    #print(d, h)\n    roots = []\n    if d == h:\n        roots.append(root)\n    #print(roots)\n    #print(adj)\n    for root in roots:\n        dfs(root, -1, 0)\n    #print(d, h)\n    if d!= h:\n        print(\"-1\")\n    else:\n        for root in roots:\n            path = []\n            def dfs(node, par, dist):\n                nonlocal path\n                for neigh in adj[node]:\n                    if neigh!= par:\n                        if neigh < node:\n                            dfs(neigh, node, dist + 1)\n                        else:\n                            dfs(neigh, node, dist + 1)\n                path.append((node + 1, dist))\n            dfs(root, -1, 0)\n            for pair in path:\n                print(pair[0], pair[1])\n    return \"\"\n    #return str(path)\n\n\n\nsolution(\"5 3 2\")\nsolution(\"8 5 2\")\nsolution(\"8 4 2\")\nsolution(\"8 4 2\")\n"
    },
    {
        "number": 517,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return '-1'"
    },
    {
        "number": 517,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, d, h = map(int, stdin.split())\n    if d == 0 or h == 0:\n        return '1' + '\\n' + '-1'\n    elif n <= d + h:\n        return '1' + '\\n' + '-1'\n    if d == 1 and h == 1:\n        return '1' + '\\n' + '2 1\\n' + '2 3\\n' + '3 4\\n' + '3 5\\n' + '4 5\\n' + '5 6\\n' + '6 7\\n' + '6 8\\n'\n    else:\n        return '1' + '\\n' + '2 1\\n' + '3 2\\n' + '4 3\\n' + '5 4\\n' + '6 5\\n' + '7 6\\n' + '8 7\\n' + '8 8\\n'\n\n\n\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 517,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def get_tree_height(start):\n        visited.add(start)\n        next_vertices = list(tree[start])\n        next_vertices.sort()\n        for child in next_vertices:\n            if child not in visited:\n                h += 1\n                get_tree_height(child)\n\n    def get_tree_diameter(start):\n        visited.add(start)\n        next_vertices = list(tree[start])\n        next_vertices.sort()\n        for child in next_vertices:\n            if child not in visited:\n                diameter = get_tree_diameter(child)\n                if diameter > d:\n                    d = diameter\n\n        return d\n\n    def find_tree_with_height_and_diameter(start):\n        if d == 0:\n            return\n        visited.add(start)\n        next_vertices = list(tree[start])\n        next_vertices.sort()\n        for child in next_vertices:\n            if child not in visited:\n                if h == d:\n                    for edge in edges:\n                        if edge[0] == child:\n                            print(start, edge[1])\n                    return\n                h = 0\n                d = 0\n                find_tree_with_height_and_diameter(child)\n        print(-1)\n\n    n, d, h = list(map(int, stdin.split(' ')))\n    tree = {}\n    for i in range(n):\n        tree[i + 1] = set()\n\n    edges = []\n    for i in range(n - 1):\n        a, b = list(map(int, stdin.split(' ')))\n        a, b = a - 1, b - 1\n        tree[a].add(b)\n        tree[b].add(a)\n        edges.append((a, b))\n\n    visited = set()\n    h = 0\n    d = 0\n    get_tree_height(1)\n    find_tree_with_height_and_diameter(1)\n\n    return tree\n"
    },
    {
        "number": 517,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n  # your code here\n  return \"\"\n"
    },
    {
        "number": 517,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, d, h = stdin.split(' ')\n    n, d, h = int(n), int(d), int(h)\n    if d > n - 1 or h > d:\n        return '-1'\n    t = [[] for _ in range(n)]\n    for i in range(d):\n        t[i + 1].append(i + 2)\n        t[i + 1].append(i + 2)\n    return''.join(map(str, t))\n"
    },
    {
        "number": 517,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, d, h = map(int, stdin.split())\n\n    if (d < h or (h - d) % 2 == 1):\n        return '-1'\n\n    return '\\n'.join([f'{x} {y}' for x, y in zip(range(1, n + 1), [0] + list(range(1, n + 1)) + list(reversed(range(n + 1, n + 1 + d))))])\n"
    },
    {
        "number": 517,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 517,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n  n, d, h = map(int, stdin.split())\n  return \"-1\" if d == h or n == 1 else \" \".join(map(lambda i: \"%d %d\" % (n + 1 - i, i + 1), range(1, n)))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 517,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 518,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    # r = round(n / (2 * math.pi))\n    r = int(math.sqrt(n * (n - 2) / (2 * math.pi)))\n    return str(r)\n"
    },
    {
        "number": 518,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    n_factorial = factorial(n)\n    r_factorial = factorial(r)\n    n_r_factorial = factorial(n-r)\n    r_n_r_factorial = factorial(r*(n-r))\n    n_factorial_inv = factorial_inv(n_factorial)\n    r_factorial_inv = factorial_inv(r_factorial)\n    n_r_factorial_inv = factorial_inv(n_r_factorial)\n    r_n_r_factorial_inv = factorial_inv(r_n_r_factorial)\n    return str(round(n_factorial_inv*r_factorial_inv*n_r_factorial_inv*r_n_r_factorial_inv,6))\n    \n    \ndef"
    },
    {
        "number": 518,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    if r < 1 or r > 100 or n < 3 or n > 100:\n        return \"WRONG INPUT\"\n    return \"{:.6f}\".format(r * 2 ** (1 / n))\n"
    },
    {
        "number": 518,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(float, stdin.split(' '))\n    pi = math.pi\n    n, r = round(n), round(r)\n    ans = 2 * r * r * pi / n\n    return str(round(ans, 6))\n"
    },
    {
        "number": 518,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, r = list(map(int, stdin.split(\" \")))\n    return \"{:.6f}\".format(r * 2 ** n)\n"
    },
    {
        "number": 518,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, r = [int(x) for x in stdin.split()]\n    R = math.pi * r * r\n    return f\"{R:.6f}\"\n"
    },
    {
        "number": 518,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, r = [int(i) for i in stdin.strip().split()]\n    res = r\n    for i in range(n):\n        res += r\n    return f'{res/n:.6f}'\n\nprint(solution('6 1'))"
    },
    {
        "number": 518,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, r = [int(x) for x in stdin.split(' ')]\n    r_by_2 = r/2\n    result = r*r_by_2*pi\n    return str(result)"
    },
    {
        "number": 518,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, r = stdin.split(\" \")\n    r = int(r)\n    r_0 = r\n    n_0 = r\n    while r < 1:\n        r = r * 10\n    while n < 1:\n        n = n * 10\n    n_0 = r\n    while r < 1:\n        r = r * 10\n    while n < 1:\n        n = n * 10\n    n_1 = r\n    d_1 = n_1 - n_0\n    while d_1 < 1:\n        d_1 = d_1 * 10\n    while d_1 < 1:\n        d_1 = d_1 * 10\n    d_0 = n_0 - n_1\n    while d_0 < 1:\n        d_0 = d_0 * 10\n    while d_0 < 1:\n        d_0 = d_0 * 10\n    d = d_0 + d_1\n    while d < 1:\n        d = d * 10\n    while d < 1:\n        d = d * 10\n    d_1 = d - d_1\n    while d_1 < 1:\n        d_1 = d_1 * 10\n    while d_1 < 1:\n        d_1 = d_1 * 10\n    d_0 = d - d_0\n    while d_0 < 1:\n        d_0 = d_0 * 10\n    while d_0 < 1:\n        d_0 = d_0 * 10\n    d = d_0 + d_1\n    while d < 1:\n        d = d * 10\n    while d < 1:\n        d = d * 10\n    d_1 = d - d_1\n    while d_1 < 1:\n        d_1 = d_1 * 10\n    while d_1 < 1:\n        d_1 = d_1 * 10\n    d_0 = d - d_0\n    while d_0 < 1:\n        d_0 = d_0 * 10\n    while d_0 < 1:\n        d_0 = d_0 * 10\n    d = d_0 + d_1\n    while d < 1:\n        d = d * 10\n    while d < 1:\n        d = d * 10\n    d_1 = d - d_1\n    while d_1 < 1:\n        d_1 = d_1 * 10\n    while d_1 < 1:\n        d_1 = d_1 * 10\n    d_0 = d - d_0\n    while d_0 < 1:\n        d_0 = d_0 * 10\n    while d_0 < 1:\n        d_0 = d_0 * 10\n    d = d_0 + d_1\n    while d < 1:\n        d = d * 10\n    while d < 1:\n        d = d * 10\n    d_1 = d - d_1\n    while d_1 < 1:\n        d_1 = d_1 * 10\n    while d_1 < 1:\n        d_1 = d_1 * 10\n    d_0 = d - d_0\n    while d_0 < 1:\n        d_0 = d_0 * 10\n    while d_0 < 1:\n        d_0 = d_0 * 10\n    d = d_0 + d_1\n    while d < 1:\n        d = d * 10\n    while d < 1:\n        d = d * 10\n    d_1 = d - d_1\n    while d_1 < 1:\n        d_1 = d_1 * 10\n    while d_1 < 1:\n        d_1 = d_1 * 10\n    d_0 = d - d_0\n    while d_0 < 1:\n        d_0 = d_0 * 10\n    while d_0 < 1:\n        d_0 = d_0 * 10\n    d = d_0 + d_1\n    while d < 1:\n        d = d * 10\n    while d < 1:\n        d = d * 10\n    d_1 = d - d_1\n    while d_1 < 1:\n        d_1 = d_1 * 10\n    while d_1 < 1:\n        d_1 = d_1 * 10\n    d_0 = d - d_0\n    while d_0 < 1:\n        d_0 = d_0 * 10\n    while d_0 < 1:\n        d_0 = d_0 * 10\n    d = d_0 + d_1\n    while d < 1:\n        d = d * 10\n    while d < 1:\n        d = d * 10\n    d_1 = d - d_1\n    while d_1 < 1:\n        d_1 = d_1 * 10\n    while d_1 < 1:\n        d_1 = d_1 * 10\n    d_0 = d - d_0\n    while d_0 < 1:\n        d_0 = d_0 * 10\n    while d_0 < 1:\n        d_0 = d_0 * 10\n    d = d_0 + d_1\n    while d < 1:\n        d = d * 10\n    while d < 1:\n        d = d * 10\n    d_1 = d - d_1\n    while d_1 < 1:\n        d_1 = d_1 * 10\n    while d_1 < 1:\n        d_1 = d_1 * 10\n    d_0 = d - d_0\n    while d_0 < 1:\n        d_0 = d_0 * 10\n    while d_0 < 1:\n        d_0 = d_0 * 10\n    d = d_0 + d_1\n    while d < 1:\n        d = d * 10\n    while d < 1:\n        d = d * 10\n    d_1 = d - d_1\n    while d_1 < 1:\n        d_1 = d_1 * 10\n    while d_1 < 1:\n        d_1 = d_1 * 10\n    d_0 = d - d_0\n    while d_0 < 1:\n        d_0 = d_0 * 10\n    while d_0 < 1:\n        d_0 = d_0 * 10\n    d = d_0 + d_1\n    while d < 1:\n        d = d * 10\n    while d < 1:\n        d = d * 10\n    d_1 = d - d_1\n    while d_1 < 1:\n        d_1 = d_1 * 10\n    while d_1 < 1:\n        d_1 = d_1 * 10\n    d_0 = d - d_0\n    while d_0 < 1:\n        d_0 = d_0 * 10\n    while d_0 < 1:\n        d_0 = d_0 * 10\n    d = d_0 + d_1\n    while"
    },
    {
        "number": 518,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, r = [int(s) for s in stdin.split()]\n    \n    answer = float(r / (2 * math.sin(math.pi / n)))\n    \n    return str(answer)\n"
    },
    {
        "number": 519,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n"
    },
    {
        "number": 519,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # return your solution\n    l, p, q = [int(x) for x in stdin.splitlines()]\n    if p > q:\n        p, q = q, p\n    return l - (p + q) / 2\n"
    },
    {
        "number": 519,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the distance from the end of the corridor\n    where Harry is located, to the place of the second\n    meeting of the spell impulses.\n    '''\n    # TODO: implement me\n    pass\n"
    },
    {
        "number": 519,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    length = int(stdin)\n    x = int(stdin)\n    y = int(stdin)\n    return str(length - (x + y))\n\ndef"
    },
    {
        "number": 519,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 519,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"Don't think that you are prepared for that...  Input the length of the corridor and the speeds of the spells and I will tell you the distance.\"\n\ndef"
    },
    {
        "number": 519,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    l = int(stdin.readline())\n    p = int(stdin.readline())\n    q = int(stdin.readline())\n    return str(round(l * (p ** 2 - q ** 2) / (p * q * (p - q)), 4))\n"
    },
    {
        "number": 519,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\nreturn ''\n\n\"\"\"\n\ndef"
    },
    {
        "number": 519,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\n###\n\nsolution(stdin)\n"
    },
    {
        "number": 519,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 520,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l = list(map(int, stdin.split(\"\\n\")))\n    if len(l) == 1:\n        print(l[0])\n        return\n    else:\n        x = 0\n        for i in range(len(l) - 1):\n            for j in range(i + 1, len(l)):\n                if l[j] - l[i] > x:\n                    x = l[j] - l[i]\n                    print(l[i])\n                    return"
    },
    {
        "number": 520,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 520,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    cnt = int(stdin.readline())\n    std_inp = list(map(int, stdin.readline().split()))\n    std_inp.sort()\n    tmp = 1\n    while len(std_inp) >= tmp:\n        if len(std_inp) < tmp:\n            break\n        if std_inp[tmp - 1] - std_inp[0] < tmp:\n            tmp += 1\n        else:\n            break\n    return str(std_inp[tmp // 2 - 1])\n"
    },
    {
        "number": 520,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # replace this for solution\n    return '2015'"
    },
    {
        "number": 520,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n    from collections import Counter\n\n    data = sys.stdin.readlines()[1:]\n    data = [int(i) for i in data]\n    data.sort()\n\n    counter = Counter(data)\n    n = len(data)\n    x = 0\n    y = 0\n\n    for i in range(1, n+1):\n        if counter[i] == 1:\n            if i == data[i-1]:\n                x += 1\n            else:\n                if i == data[i-2]:\n                    y += 1\n                else:\n                    break\n\n    if x == 0 and y == 0:\n        return 'Unknown'\n    if x == 0:\n        return data[-1]\n    if y == 0:\n        return data[0]\n    return data[-y]\n\n\n\nsolution('4\\n2014 2016 2015\\n')\n"
    },
    {
        "number": 520,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\n\ndef"
    },
    {
        "number": 520,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x = 1\n    for _ in range(int(stdin)):\n        x += 1 if int(stdin) % x == 0 else 0\n\n    return str(x)"
    },
    {
        "number": 520,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    groups = stdin.split('\\n')[0].split(' ')\n    return str(groups[-1])\n\nsolution('2014 2016 2015')"
    },
    {
        "number": 520,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n"
    },
    {
        "number": 520,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    groups = [int(i) for i in stdin.split(\"\\n\")[0].split()]\n    # find the year of entry\n    result = None\n    for i in groups:\n        if result is None or abs(i - result) > 1:\n            result = i\n    return result\n    \n    \n"
    },
    {
        "number": 521,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n = int(stdin[0])\n    s = stdin[1]\n\n    # init empty list\n    paint = []\n\n    # add elements to list\n    for i in s:\n        if i == 'C':\n            paint.append('C')\n        elif i == 'M':\n            paint.append('M')\n        elif i == 'Y':\n            paint.append('Y')\n\n    # loop through list\n    for i in range(len(paint)-1):\n        if paint[i] == '?':\n            continue\n        if paint[i] == paint[i+1]:\n            return 'No'\n\n    # if paint is empty\n    if not paint:\n        return 'No'\n\n    return 'Yes'"
    },
    {
        "number": 521,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    s = stdin.split(\"\\n\")[1]\n    segments = s.split(\"?\")\n    painted = []\n    for segment in segments:\n        if segment == \"\":\n            continue\n        painted.append(segment[0])\n    counts = {\n        \"C\": 0,\n        \"M\": 0,\n        \"Y\": 0,\n    }\n    for color in painted:\n        counts[color] += 1\n    if counts[\"C\"] == 0 or counts[\"M\"] == 0 or counts[\"Y\"] == 0:\n        return \"No\"\n    elif counts[\"C\"] == 1 and counts[\"M\"] == 1 and counts[\"Y\"] == 1:\n        return \"Yes\"\n    elif counts[\"C\"] > 0:\n        if counts[\"C\"] > 2:\n            return \"No\"\n        else:\n            if counts[\"C\"] == 2:\n                if counts[\"M\"] == 1 and counts[\"Y\"] == 1:\n                    return \"No\"\n                else:\n                    return \"Yes\"\n            else:\n                if counts[\"M\"] == 1 and counts[\"Y\"] == 1:\n                    return \"Yes\"\n                else:\n                    return \"No\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 521,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return 'Yes' or 'No' according to the painted segments.\n\n    >>> solution('5CY??Y')\n    'Yes'\n    >>> solution('5?CYC?')\n    'Yes'\n    >>> solution('5C??MM')\n    'No'\n    >>> solution('5?C??M')\n    'No'\n    >>> solution('3MMY')\n    'No'\n    >>> solution('1CYM')\n    'Yes'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 521,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Your solution goes here. Feel free to use as many code cells as needed.\n    \"\"\"\n    pass\n    return ''\n\ndef"
    },
    {
        "number": 521,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n\n    if n == 1:\n        return \"Yes\" if s[0] == '?' else \"No\"\n\n    previous = ''\n    current = s[0]\n    for i in range(1, n):\n        if current == '?':\n            current = previous\n        elif previous == current:\n            return \"No\"\n        previous = current\n        current = s[i]\n\n    return \"Yes\"\n\n\ndef"
    },
    {
        "number": 521,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5\\nC??Y\")\n    'Yes'\n    >>> solution(\"5\\nC??YY\")\n    'Yes'\n    >>> solution(\"5\\nC?C?Y\")\n    'Yes'\n    >>> solution(\"5\\nC??YY\")\n    'Yes'\n    >>> solution(\"5\\nC?C?YY\")\n    'No'\n    \"\"\"\n    length, painting = stdin.split()\n    return \"Yes\" if any(\n        i + j!= painting[i] + painting[j] for i in range(int(length)) for j in range(i + 1, int(length))\n    ) else \"No\"\n"
    },
    {
        "number": 521,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5\\nC??Y\")\n    'Yes'\n    >>> solution(\"5\\nC?C?Y\")\n    'Yes'\n    >>> solution(\"5\\nC??MM\")\n    'No'\n    >>> solution(\"5\\nC??MC\")\n    'No'\n    >>> solution(\"5\\n?C?C?Y\")\n    'Yes'\n    \"\"\"\n    n = int(stdin)\n    s = stdin[0:n]\n\n    segment = set()\n    for char in s:\n        if char == \"?\":\n            segment.add(char)\n        else:\n            segment.add(char)\n\n    if \"C\" in segment:\n        segment.remove(\"C\")\n    if \"M\" in segment:\n        segment.remove(\"M\")\n    if \"Y\" in segment:\n        segment.remove(\"Y\")\n\n    if len(segment) == 0:\n        return \"No\"\n    elif len(segment) == 1:\n        return \"Yes\"\n    elif len(segment) == 2:\n        segment.add(\"?\")\n        if len(list(filter(lambda x: x == \"?\", segment))) == 2:\n            return \"Yes\"\n        return \"No\"\n\n    return \"Yes\""
    },
    {
        "number": 521,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    c = 'CY'\n    m = 'M'\n    y = 'Y'\n    a = 'A'\n    n = len(s)\n    # Can we color any segment in this way?\n    # Start by assuming any segment is OK\n    hasColor = {'C': False, 'M': False, 'Y': False, 'A': False}\n    # Iterate from the end to beginning\n    for i in range(n - 1, -1, -1):\n        # If this segment is empty, then no options are available\n        if s[i] == '?':\n            continue\n        # If this segment is already colored, then there are no options for it\n        if hasColor[s[i]]:\n            continue\n        if s[i] == c:\n            # Can we color it blue and paint the rest in red or the rest in yellow?\n            # If the rest in red, can we color the next segment in yellow and paint the rest in red?\n            # If the rest in yellow, can we color the next segment in blue and paint the rest in red?\n            # If the next segment is the same color, then no options are available\n            if (s[i] == m and s[i + 1] == y) or (s[i] == y and s[i + 1] == c) or (s[i] == c and s[i + 1] == m):\n                hasColor['C'] = False\n                hasColor['M'] = False\n                hasColor['Y'] = False\n                hasColor[a] = False\n            else:\n                hasColor['C'] = True\n                hasColor['M'] = True\n                hasColor['Y'] = True\n                hasColor[a] = False\n        elif s[i] == m:\n            if (s[i] == c and s[i + 1] == y) or (s[i] == y and s[i + 1] == c):\n                hasColor['C'] = False\n                hasColor['M'] = False\n                hasColor['Y'] = False\n                hasColor[a] = False\n            else:\n                hasColor['C'] = False\n                hasColor['M'] = True\n                hasColor['Y'] = True\n                hasColor[a] = False\n        elif s[i] == y:\n            if (s[i] == c and s[i + 1] == m) or (s[i] == m and s[i + 1] == c):\n                hasColor['C'] = False\n                hasColor['M'] = False\n                hasColor['Y'] = False\n                hasColor[a] = False\n            else:\n                hasColor['C'] = False\n                hasColor['M'] = False\n                hasColor['Y'] = True\n                hasColor[a] = False\n        elif s[i] == a:\n            hasColor['C'] = False\n            hasColor['M'] = False\n            hasColor['Y'] = False\n            hasColor[a] = True\n        else:\n            # This should never happen\n            return \"ERROR: Not an option\"\n    # If any of the segments are colored, then there are at least two ways of painting\n    if any(value for value in hasColor.values() if value):\n        return \"Yes\"\n    # If no segments are colored, then there are no ways of painting\n    return \"No\"\n\n\nprint(solution(\"5CY??Y\"))\nprint(solution(\"5C?C?Y\"))\nprint(solution(\"5C??MM\"))\nprint(solution(\"5?CYC?C\"))\nprint(solution(\"5C?C?Y\"))\nprint(solution(\"3M?MC\"))\nprint(solution(\"3MC?M\"))\nprint(solution(\"3CMC?C\"))\nprint(solution(\"3CMC?C\"))\nprint(solution(\"3CMC?C\"))\nprint(solution(\"3CMC?C\"))\nprint(solution(\"5?CYC?C\"))\nprint(solution(\"5C?C?Y\"))\nprint(solution(\"5C?C?Y\"))\nprint(solution(\"5C?C?Y\"))\nprint(solution(\"5C?C?Y\"))\nprint(solution(\"5C?C?Y\"))\nprint(solution(\"5C?C?Y\"))\nprint(solution(\"5C?C?Y\"))\nprint(solution(\"5C?C?Y\"))\nprint(solution(\"5C?C?Y\"))\nprint(solution(\"5C?C?Y\"))\nprint(solution(\"5C?C?Y\"))\nprint(solution(\"5C?C?Y\"))\nprint(solution(\"5C?C?Y\"))\nprint(solution(\"5C?C?Y\"))\nprint(solution(\"5C?C?Y\"))\nprint(solution(\"5C?C?Y\"))\nprint(solution(\"5C?C?Y\"))\nprint(solution(\"5C?C?Y\"))\nprint(solution(\"5C?C?Y\"))\nprint(solution(\"5C?C?Y\"))\nprint(solution(\"5C?C?Y\"))\nprint(solution(\"5C?C?Y\"))\nprint(solution(\"5C?C?Y\"))\nprint(solution(\"5C?C?Y\"))\nprint(solution(\"5C?C?Y\"))\nprint(solution(\"5C?C?Y\"))\nprint(solution(\"5C?C?Y\"))\nprint(solution(\"5C?C?Y\"))\nprint(solution(\"5C?C?Y\"))\nprint(solution(\"5C?C?Y\"))\nprint(solution(\"5C?C?Y\"))\nprint(solution(\"5C?C?Y\"))\nprint(solution(\"5C?C?Y\"))\nprint(solution(\"5C?C?Y\"))\nprint(solution(\"5C?C?Y\"))\nprint(solution(\"5C?C?Y\"))\nprint(solution(\"5C?C?Y\"))\nprint(solution(\"5C?C?Y\"))\nprint(solution(\"5C?C?Y\"))\nprint(solution(\"5C?C?Y\"))\nprint(solution(\"5C?C?Y\"))\nprint(solution(\"5C?C?Y\"))\nprint(solution(\"5C?C?Y\"))\nprint(solution(\"5C?C?Y\"))\nprint(solution(\"5C?C?Y\"))\nprint(solution(\"5C?C?Y\"))\nprint(solution(\"5"
    },
    {
        "number": 521,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"Yes\" if stdin[0] in \"C\" and stdin[1] in \"C\" and stdin[2] in \"C\" else \"No\"\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 521,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This problem can be solved by using backtracking.\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    s = stdin.split('\\n')[1]\n    if n == 1:\n        return 'Yes' if 'C' in s else 'No'\n    s = list(s)\n    c = 0\n    for i in range(n):\n        if s[i] == '?':\n            c += 1\n            s[i] = 'Y'\n            if c == 2:\n                return 'No'\n            if solve(s, i):\n                return 'Yes'\n            s[i] = '?'\n            c -= 1\n    return 'No'\n\n\ndef"
    },
    {
        "number": 522,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return 'Hello, World!'\n"
    },
    {
        "number": 522,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    for i in range(4):\n        n, f1, f2, f3, c = stdin.split()\n        n, f1, f2, f3, c = int(n), int(f1), int(f2), int(f3), int(c)\n        \n        p0 = pow(c, 2, 10**9+7)\n        \n        res = p0 * f1 * f2 * f3\n        \n        for i in range(3, n):\n            res = (p0 * res) % (10**9+7)\n        \n        print(res % (10**9+7))\n        \n        return \n"
    },
    {
        "number": 522,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, f0, f1, f2, f3 = [int(x) for x in stdin.split(' ')]\n    \n    x = n\n    f = f0\n    i = 1\n    while x > 3:\n        x -= 1\n        f = f * f3 % (10 ** 9 + 7)\n    \n    res = f * f2 % (10 ** 9 + 7)\n    res %= (10 ** 9 + 7)\n    res += f * f1 % (10 ** 9 + 7)\n    res %= (10 ** 9 + 7)\n    res += f * f0 % (10 ** 9 + 7)\n    res %= (10 ** 9 + 7)\n    return str(res)\n\n\n\ndef"
    },
    {
        "number": 522,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, f_1, f_2, f_3, c = map(int, stdin.split())\n    return str(f_n(n, f_1, f_2, f_3, c) % 1000000007)\n\n\ndef"
    },
    {
        "number": 522,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, f0, f1, f2, c = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    f = f0 * f2 * f1\n    f %= 10 ** 9 + 7\n    for i in range(n - 4):\n        f = (c ** 2 * f) % (10 ** 9 + 7)\n    print(f)\n    return ''\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 522,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, f1, f2, f3, c = map(int, stdin.split())\n\n    def func(n, x):\n        if n == 1:\n            return x\n        else:\n            return x * (x - 1) * (x - 2) * func(n - 1, x)\n\n    return f'{func(n, c) % (10 ** 9 + 7):.0f}'\n"
    },
    {
        "number": 522,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    n, f1, f2, f3, c = map(int, stdin.split())\n    res = (f1 * f2 * f3) % (10 ** 9 + 7)\n    return str(res)\n"
    },
    {
        "number": 522,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, f1, f2, f3, c = map(int, stdin.split(' '))\n    return str(pow(c, n - 3, (10 ** 9) + 7) * f1 * f2 * f3 % (10 ** 9 + 7))\n"
    },
    {
        "number": 522,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '.....'\n    return str(int(stdin.split(' ')[0]) + int(stdin.split(' ')[1]))\n"
    },
    {
        "number": 522,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds solution to problem at hand.\n    \"\"\"\n    n, f1, f2, f3, c = map(int, stdin.split(' '))\n\n    factorials = [1]\n    for i in range(1, n + 1):\n        factorials.append(factorials[-1] * i)\n\n    total = f1 * f2 * f3\n\n    # Calculates modulus of total and 10^9 + 7\n    modulus = total % (10**9 + 7)\n\n    # Divide total by (10^9 + 7) to get the required answer\n    answer = (total // (10**9 + 7))\n\n    return str(answer)\n"
    },
    {
        "number": 523,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    # str = [stdin.split()]\n    # print(n, m)\n    # print(str)\n    \n    # str = []\n    # for _ in range(n):\n    #     str.append(stdin.readline())\n    \n    # str = [stdin.readline() for _ in range(n)]\n    \n    str = [stdin.readline().strip() for _ in range(n)]\n    \n    \n    # print(str)\n    \n    if len(str) <= 1:\n        return 0\n    \n    pali = []\n    for i in range(len(str)):\n        for j in range(i+1, len(str)):\n            if str[i][:len(str[j])] == str[j][:len(str[j])][::-1]:\n                pali.append(str[i])\n                break\n    \n    pali.sort(key=len)\n    \n    if len(pali) == 0:\n        return 0\n    \n    max_len = len(pali[0])\n    for i in range(len(pali)):\n        if len(pali[i]) < max_len:\n            break\n        else:\n            max_len = len(pali[i])\n    \n    # print(pali)\n    \n    return max_len\n    \n    \n"
    },
    {
        "number": 523,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 523,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 523,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 523,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\ndef"
    },
    {
        "number": 523,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 523,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    if m == 0:\n        return ''\n    strings = [stdin for _ in range(n)]\n    result = max_length(strings, m, n)\n    return result[0]\n\n\ndef"
    },
    {
        "number": 523,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 523,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 523,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    nums = [stdin.strip() for _ in range(n)]\n    r = {}\n    for num in nums:\n        if len(num) % 2 == 0:\n            if num[:len(num)//2] == num[-len(num)//2:][::-1]:\n                r[len(num)] = num\n        else:\n            if num[:len(num)//2] == num[-len(num)//2 + 1:][::-1]:\n                r[len(num)] = num\n    if len(r) == 0:\n        print(0)\n        return ''\n    else:\n        print(max(r.keys()))\n        return r[max(r.keys())]\n"
    },
    {
        "number": 524,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # my approach:\n    # first, create a new list and append the numbers from input (this will be a copy of original list)\n    # the list will contain the answer\n    # it will also contain the total cost\n    new_list = list()\n    for line in stdin.split('\\n'):\n        if line == '':\n            break\n        else:\n            new_list.append(line)\n    cost = 0\n    for line in new_list:\n        # split each line in the list into it's own list\n        list_of_numbers = line.split(' ')\n        # then get the total cost\n        cost += int(list_of_numbers[0])\n        # then transform the list to a list of positive integers\n        list_of_numbers[0] = abs(int(list_of_numbers[0]))\n        # then create a power sequence\n        new_list.append(list_of_numbers)\n    answer = [len(new_list[0])]\n    answer.append(cost)\n    # then append each index in new_list to answer\n    for line in new_list:\n        line_1 = line[1:]\n        for num in line_1:\n            answer.append(num)\n    return answer\n"
    },
    {
        "number": 524,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\n-----Tests-----\n\nimport sys\nsys.setrecursionlimit(5000)\n\nimport unittest\n\nclass Test(unittest.TestCase):\n    def test_solution(self):\n        self.assertEqual(solution('3\\n1 3 2'), '1')\n\nunittest.main()\n\"\"\"\n\n\ndef"
    },
    {
        "number": 524,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 524,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # return result\n    n = int(stdin)\n    a = list(map(int, stdin.split(' ')))\n    diff = []\n    for i in range(n - 1):\n        diff.append(abs(a[i] - a[i + 1]))\n    print(n + sum(diff) - 2 * max(diff))\n    return ''\n\nprint(solution(\"3 1 2\"))\n"
    },
    {
        "number": 524,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('3\\n1 3 2')\n    1\n    >>> solution('3\\n1 1000000000 1000000000')\n    1999982505\n    \"\"\"\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n\n    cost = 0\n    while True:\n        j = 1\n        while j < n:\n            if a[j] == a[j - 1] + 1:\n                break\n            j += 1\n        if j == n:\n            break\n        else:\n            cost += 1\n            k = j\n            while k < n - 1:\n                a[k], a[k + 1] = a[k + 1], a[k]\n                k += 1\n    return cost\n\ndef"
    },
    {
        "number": 524,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    return \"\"\n"
    },
    {
        "number": 524,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def get_min_cost(a: List[int], a_len: int):\n        '''\n        a: list of integers to be reordered into a power sequence.\n        a_len: len of a.\n        '''\n        # Initialise\n        sorted_a = sorted(a)\n        c_inc = sorted_a[0]\n        c_dec = sorted_a[-1]\n        # Compute the cost of incrementing each value\n        min_cost = c_inc * a_len\n        for i in range(1, a_len):\n            if a[i] < a[i-1]:\n                c_inc = a[i]\n                c_dec = a[i-1]\n                cost = i\n            else:\n                if a[i] > a[i-1]:\n                    c_inc = a[i-1]\n                    c_dec = a[i]\n                    cost = i-1\n            min_cost = min(min_cost, c_inc * (a_len - cost) + c_dec * cost)\n        # Compute the cost of decrementing each value\n        min_cost = c_dec * a_len + min_cost\n        for i in range(a_len-1):\n            if a[i] > a[i+1]:\n                c_inc = a[i]\n                c_dec = a[i+1]\n                cost = i\n            else:\n                if a[i] < a[i+1]:\n                    c_inc = a[i+1]\n                    c_dec = a[i]\n                    cost = i+1\n            min_cost = min(min_cost, c_dec * (a_len - cost) + c_inc * cost)\n        return min_cost\n\n    a = [int(x) for x in stdin.split()]\n    a_len = len(a)\n    min_cost = get_min_cost(a, a_len)\n    print(min_cost)\n    return min_cost\n"
    },
    {
        "number": 524,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def get_cost(a_list: list[int], c: int) -> int:\n        \"\"\"\n        Returns the cost of transforming the list a into a power sequence of c.\n        \"\"\"\n        n = len(a_list)\n        cost = 0\n        for i in range(n):\n            if a_list[i]!= c ** i:\n                cost += 1\n        return cost\n\n    n = int(stdin.readline())\n    a_list = list(map(int, stdin.readline().split()))\n\n    # get the minimum cost to transform a_list into a power sequence with the lowest possible cost\n    min_cost = float('inf')\n    for c in set(a_list):\n        cost = get_cost(a_list, c)\n        if cost < min_cost:\n            min_cost = cost\n\n    # transform a_list into a power sequence with the lowest possible cost\n    for i in range(n):\n        cost = get_cost(a_list, a_list[i])\n        if cost < min_cost:\n            min_cost = cost\n        if i > 0:\n            if a_list[i] - 1 < a_list[i - 1]:\n                cost = get_cost(a_list, a_list[i] - 1)\n                if cost < min_cost:\n                    min_cost = cost\n            if a_list[i] + 1 > a_list[i - 1]:\n                cost = get_cost(a_list, a_list[i] + 1)\n                if cost < min_cost:\n                    min_cost = cost\n\n    return str(min_cost)\n"
    },
    {
        "number": 524,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    count = 0\n    power_list = list(map(int, stdin.split(' ')))\n    if power_list[0] > 1:\n        count += power_list[0] - 1\n    for i in range(len(power_list) - 1):\n        if power_list[i] < power_list[i + 1]:\n            count += power_list[i + 1] - power_list[i]\n        elif power_list[i] > power_list[i + 1]:\n            count += power_list[i] - power_list[i + 1] + 1\n    return count\n"
    },
    {
        "number": 524,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity: O(n^2)\n    Space complexity: O(n)\n    \"\"\"\n    N = int(stdin.readline().strip())\n    A = [int(x) for x in stdin.readline().strip().split(' ')]\n\n    min_cost = float('inf')\n    for i in range(1, N):\n        cost = 0\n        for j in range(i):\n            cost += abs(A[j] - A[i])\n        if min_cost > cost:\n            min_cost = cost\n\n    return min_cost\n"
    },
    {
        "number": 525,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('4\\n2 1 3 1')\n    1\n    >>> solution('2\\n420 420')\n    2\n    \"\"\"\n    pass\n"
    },
    {
        "number": 525,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution for this kata.\"\"\"\n    pass\n"
    },
    {
        "number": 525,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline())\n    while t!= 0:\n        n = int(stdin.readline())\n        arr = [int(i) for i in stdin.readline().split()]\n        ans = n\n        i = 1\n        while i < n:\n            if arr[i]!= arr[i-1]:\n                arr[i] = arr[i-1] + arr[i]\n                arr.pop(i-1)\n                arr.pop(i-1)\n                ans = ans - 1 if ans - 1 < ans else ans\n            else:\n                i = i + 1\n        print(ans)\n        t = t - 1\n"
    },
    {
        "number": 525,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 525,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    My Solution\n    \"\"\"\n    # Get Input\n    n = int(stdin.readline().strip())\n\n    # Get Answer\n    ans = len(stdin.readline().strip().split(' '))\n\n    # Return Answer\n    return str(ans)\n"
    },
    {
        "number": 525,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Get input and check if number of characters to be replaced is even.\n    If so, replace with the sum of the two neighbouring numbers.\n    Repeat until you have replaced all characters\n    \"\"\"\n    pass\n"
    },
    {
        "number": 525,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution to the challenge.\"\"\"\n    print(solve(stdin))\n\n\ndef"
    },
    {
        "number": 525,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    # Insert your code here\n    # n = int(stdin.readline().strip())\n    # arr = list(map(int, stdin.readline().strip().split()))\n    return 'Hello, World!'\n"
    },
    {
        "number": 525,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 525,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 526,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 2\\n0 0\\n0 0\\n0 0\")\n    'NIE'\n    >>> solution(\"2 3\\n7 7 7\\n7 7 10\")\n    'TAK\\n1 3'\n    >>> solution(\"2 2\\n1 1\\n0 0\")\n    'TAK'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 526,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 526,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 526,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    a = []\n    for line in stdin.split('\\n'):\n        a.append(list(map(int, line.split(' '))))\n        \n    n, m = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    \n    for i in range(n):\n        for j in range(m):\n            if not a[i][j] & 0xFF:\n                return 'TAK'\n    \n    return 'NIE'\n\n\n\n\"\"\""
    },
    {
        "number": 526,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    matrix = [list(map(int, stdin.split())) for i in range(n)]\n\n    for i in range(n):\n        row_sum = 0\n        for j in range(m):\n            row_sum ^= matrix[i][j]\n            if row_sum > 0:\n                break\n        if row_sum > 0:\n            break\n    else:\n        return 'NIE'\n\n    print('TAK')\n    print(' '.join(map(str, [c[0] for c in matrix[i]])))\n\n    return ''\n"
    },
    {
        "number": 526,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    a = []\n    for i in range(n):\n        a.append(list(map(int, stdin.split())))\n\n    ans = 'NIE'\n    for row in a:\n        if sum(row) % 2 == 1:\n            ans = 'TAK'\n            break\n\n    if ans == 'TAK':\n        if len(set(sum(i) for i in a))!= 1:\n            ans = 'NIE'\n\n    return ans\n"
    },
    {
        "number": 526,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 526,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    matrix = [[int(i) for i in stdin.split()] for _ in range(n)]\n    result = \"TAK\"\n    for i in range(n):\n        k = 0\n        for j in range(m):\n            k ^= matrix[i][j]\n        if k <= 0:\n            result = \"NIE\"\n            break\n    print(result)\n    if result == \"TAK\":\n        print(*[matrix[i][j] for i in range(n) for j in range(m) if matrix[i][j] == k], sep=\" \")\n    return result\n"
    },
    {
        "number": 526,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    row_count, col_count = list(map(int, stdin.split(\" \")))\n    matrix = [list(map(int, stdin.split(\"\\n\")[i].split(\" \"))) for i in range(row_count)]\n    return \"TAK\" if any(\n        any(matrix[i][j] ^ k > 0 for k in range(col_count))\n        for i in range(row_count)\n        for j in range(col_count)\n    ) else \"NIE\"\n"
    },
    {
        "number": 526,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a = [map(int, l.split()) for l in stdin.splitlines()]\n    n, m = a[0]\n    b = [[x[i] ^ x[i + 1] for i in range(m - 1)] for x in a[1:]]\n    c = []\n    for i in range(n):\n        c.append(sum(b[i]) > 0)\n    if not any(c):\n        print(\"NIE\")\n    else:\n        c = [sum(x) for x in zip(*c)]\n        print(\"TAK\")\n        print(*c)\n    return \"\"\n"
    },
    {
        "number": 527,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    s_10 = s * (10**100)\n    count = 1\n    for c in s_10:\n        if c in t:\n            count += 1\n            if count == len(s):\n                break\n    return str(count)"
    },
    {
        "number": 527,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\""
    },
    {
        "number": 527,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 527,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''contest\n   ... son\n   ... ''')\n    10\n\n    >>> solution('''contest\n   ... son\n   ... ''')\n    10\n\n    >>> solution('''s\n   ... t\n   ... ''')\n    -1\n\n    >>> solution('''s\n   ... t\n   ... ''')\n    -1\n\n    >>> solution('''s\n   ... t\n   ... ''')\n    10\n    \"\"\"\n    s = stdin.split('\\n')[0]\n    t = stdin.split('\\n')[1]\n\n    if len(s) >= len(t):\n        return -1\n    elif len(t) == 0:\n        return 100\n\n    lens = len(s) + 1\n    lengths = [0] * lens\n    j = 0\n    for i in range(lens):\n        while j < lens and s[j] == t[i]:\n            j += 1\n        lengths[i] = j\n    return lens - lengths.index(max(lengths))\n"
    },
    {
        "number": 527,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('contest\\nson\\n')\n    10\n    \"\"\"\n    s, t = stdin.split('\\n')\n    s = s * (10 ** 6)\n    if t in s:\n        return 10 ** 6\n    return -1\n"
    },
    {
        "number": 527,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s: str = stdin.readline().strip()\n    t: str = stdin.readline().strip()\n    n: int = 1000000\n    i: int = n\n    j: int = n\n    ans: str = '-1'\n    while i > 0:\n        if j > len(s):\n            j = len(s)\n        if s[j-1] == t[j-1]:\n            j -= 1\n            continue\n        else:\n            i -= 1\n            j -= 1\n    ans = str(i)\n    print(ans)"
    },
    {
        "number": 527,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split(\"\\n\")[0]\n    t = stdin.split(\"\\n\")[1]\n\n    i = 9\n    while i >= 10 and not t in s[:i]:\n        i -= 1\n    if i < 10:\n        print(\"-1\")\n    else:\n        print(i)\n"
    },
    {
        "number": 527,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    string1 = stdin.split()[0]\n    string2 = stdin.split()[1]\n    print(\" \".join(string2))\n    print(string1)\n    # print(string2)\n    if len(string1) < len(string2):\n        print(-1)\n    elif len(string1) > len(string2):\n        print(\" \".join(string2))\n        print(string1)\n        if len(string1) - len(string2) == 1:\n            string1 = string1[:-1]\n        print(string1)\n        print(len(string1))\n        for x in range(10**100):\n            if string1 in string2:\n                print(x+1)\n                break\n        else:\n            print(-1)\n    else:\n        for x in range(10**100):\n            if string1 in string2:\n                print(x+1)\n                break\n        else:\n            print(-1)\nsolution(stdin)\n"
    },
    {
        "number": 527,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split(\"\\n\")[0]\n    t = stdin.split(\"\\n\")[1]\n    flag = False\n    i = 1\n    while(True):\n        if(i > len(s)+len(t)):\n            flag = True\n            break\n        if(s[:i] == t[:i]):\n            i += 1\n        else:\n            break\n    if(flag):\n        return str(i)\n    else:\n        return \"-1\"\n"
    },
    {
        "number": 527,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[:1]\n    t = stdin[1:]\n    length_of_s = len(s)\n    for i in range(length_of_s + 1, 100001):\n        if t in s * i:\n            return str(i)\n    return \"-1\"\n"
    },
    {
        "number": 528,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 528,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    if \"YES\" in stdin:\n        return \"YES\"\n    elif \"NO\" in stdin:\n        return \"NO\"\n    else:\n        return \"\"\n"
    },
    {
        "number": 528,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(' ')]\n    \n    pairs = []\n    for _ in range(m):\n        pair = [int(x) for x in stdin.split(' ')]\n        pairs.append(pair)\n    \n    pairs_set = set()\n    for pair in pairs:\n        if pair[0] == pair[1]:\n            return 'NO'\n        pairs_set.add(frozenset(pair))\n        \n    for i in range(n):\n        for j in range(n):\n            for k in range(j + 1, n):\n                if (i, j) in pairs_set and (i, k) in pairs_set and (j, k) in pairs_set:\n                    return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 528,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    pass\n"
    },
    {
        "number": 528,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\ndef"
    },
    {
        "number": 528,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return 'YES' if the given network is reasonable and 'NO' otherwise.\"\"\"\n    # 1. Construct the graph from the input.\n    # 2. Check if the graph is bipartite.\n    # 3. Return the answer.\n    pass\n\ndef"
    },
    {
        "number": 528,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n\"\"\"\n\n\ndef"
    },
    {
        "number": 528,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 528,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return 'NO' if [int(i) for i in stdin.split()] in [[2, 3], [2, 4], [3, 4], [4, 5]] else 'YES'\n"
    },
    {
        "number": 528,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 529,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    return stdin.replace('M', 'MMM').replace('A', 'JAN').replace('D', 'DEC').replace('F', 'FEL').replace('F', 'FEB').replace('A', 'JAN').replace('J', 'JAN').replace('A', 'JAN').replace('S', 'SAL').replace('O', 'SAL').replace('O', 'SAL')\n"
    },
    {
        "number": 529,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    return stdin[0:int(stdin[1])]\n"
    },
    {
        "number": 529,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.capitalize()\n    \n"
    },
    {
        "number": 529,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    return \"\""
    },
    {
        "number": 529,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    month = stdin\n    month = list(month)\n    index = int(stdin)\n    if 0 <= index <= 26:\n        for i in range(len(month)):\n            if i+index > len(month):\n                break\n            month[i] = month[i+index]\n        for i in range(len(month)):\n            month[i] = month[i-1]\n        return ''.join(month)\n\nprint(solution('AprilFool'))\n\na = 'AprilFool'\nprint(list(a))\nprint(list(a)[-1])\n\nprint(a[0:1])\nprint(a[-1])\n\na = 'AprilFool'\nprint(list(a))\nprint(list(a)[2])"
    },
    {
        "number": 529,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(chr(ord(c) + n) for c in stdin for n in range(26))\n\n\"\"\"\n\nfrom itertools import cycle\n\ndef"
    },
    {
        "number": 529,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.translate(str.maketrans('0123456789', '9ABCDEFGHIJ'))\n\nprint(solution(stdin))\n"
    },
    {
        "number": 529,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return...\n"
    },
    {
        "number": 529,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.capitalize()\n"
    },
    {
        "number": 529,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    return stdin[:int(stdin[-1])]\n"
    },
    {
        "number": 530,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    s = stdin[1]\n    t = stdin[2]\n    count = 0\n    for i in range(len(s)):\n        if s[i]!= t[i]:\n            count += 1\n            if count > n:\n                return \"Second\"\n    if count > n:\n        return \"Second\"\n    return \"First\"\n\ndef"
    },
    {
        "number": 530,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    yar = stdin[0]\n    andr = stdin[1]\n    len_yar = len(yar)\n    len_andr = len(andr)\n    if len_yar < len_andr:\n        return \"Second\"\n    len_max = len_andr\n    while len_yar > len_max:\n        len_max += len_max\n    yar = list(yar)\n    andr = list(andr)\n    yar_chars = []\n    andr_chars = []\n    i = 0\n    j = 0\n    k = 0\n    while i < len_max:\n        if j < len_andr and i < len_yar and yar[i] == andr[j]:\n            yar_chars.append(yar[i])\n            andr_chars.append(andr[j])\n            i += 1\n            j += 1\n        elif j < len_andr:\n            yar_chars.append(\"0\")\n            andr_chars.append(andr[j])\n            j += 1\n        elif i < len_yar:\n            yar_chars.append(yar[i])\n            andr_chars.append(\"0\")\n            i += 1\n        else:\n            if yar_chars[k] == \"1\":\n                yar_chars[k] = \"0\"\n                andr_chars[k] = \"0\"\n                k += 1\n            else:\n                yar_chars[k] = \"1\"\n                andr_chars[k] = \"1\"\n                k += 1\n    if yar_chars == andr_chars:\n        return \"Draw\"\n    if yar_chars > andr_chars:\n        return \"Second\"\n    return \"First\"\n\n\ndef"
    },
    {
        "number": 530,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    return 'First' if stdin[0] < stdin[1] else 'Second' if stdin[0] > stdin[1] else 'Draw'"
    },
    {
        "number": 530,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    s = stdin[1]\n    t = stdin[2]\n\n    s_max, s_ind = 0, 0\n    t_max, t_ind = 0, 0\n    for i in range(n):\n        s_max += int(s[i])\n        t_max += int(t[i])\n        if s_max > t_max:\n            s_max = s_max - t_max\n            s_ind = i\n        if s_max < t_max:\n            t_max = t_max - s_max\n            t_ind = i\n\n    return 'First' if s_max > t_max else 'Second' if t_max > s_max else 'Draw'"
    },
    {
        "number": 530,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0432\u0432\u043e\u0434\u0438\u0442 \u0447\u0438\u0441\u043b\u043e n. \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u0441\u0442\u0440\u043e\u043a\u0443 \u0441 \u0434\u043b\u0438\u043d\u043e\u0439 n, \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0432 \u0435\u0435 \u043d\u0443\u043b\u044f\u043c\u0438.\n    \u0417\u0430\u0442\u0435\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0432\u0432\u043e\u0434\u0438\u0442 \u0441\u0442\u0440\u043e\u043a\u0443 \u0441 \u043d\u0435\u0447\u0435\u0442\u043d\u044b\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432. \u041f\u0440\u0438\u0447\u0435\u043c \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043d\u0435\u0447\u0435\u0442\u043d\u044b\u0439 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432.\n    \u0417\u0430\u0442\u0435\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0432\u0432\u043e\u0434\u0438\u0442 \u0441\u0442\u0440\u043e\u043a\u0443 \u0441 \u0447\u0435\u0442\u043d\u044b\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432. \u041f\u0440\u0438\u0447\u0435\u043c \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0447\u0435\u0442\u043d\u044b\u0439 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432.\n    \u041f\u0440\u0438 \u043d\u0430\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0438 \u043d\u0435\u0447\u0435\u0442\u043d\u043e\u0433\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0434\u043e\u043b\u0436\u0435\u043d \u0432\u0432\u0435\u0441\u0442\u0438 \u043d\u043e\u0432\u044b\u0439 \u0441\u0438\u043c\u0432\u043e\u043b.\n    \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0432\u0432\u043e\u0434\u0438\u0442 \u0441\u0442\u0440\u043e\u043a\u0443 \u0441 \u043d\u0435\u0447\u0435\u0442\u043d\u044b\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432. \u041f\u0440\u0438\u0447\u0435\u043c \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043d\u0435\u0447\u0435\u0442\u043d\u044b\u0439 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432.\n    \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0432\u0432\u043e\u0434\u0438\u0442 \u0441\u0442\u0440\u043e\u043a\u0443 \u0441 \u0447\u0435\u0442\u043d\u044b\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432. \u041f\u0440\u0438\u0447\u0435\u043c \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0447\u0435\u0442\u043d\u044b\u0439 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432.\n    \u0412 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u0434\u043e\u043b\u0436\u043d\u0430 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c\u0441\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0438\u0437 \u043d\u0443\u043b\u0435\u0439 \u0438 \u0435\u0434\u0438\u043d\u0438\u0446 \u0438 \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0435\u0435 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d.\n    \"\"\"\n    n = int(stdin)\n    s = [0 for _ in range(n)]\n    t = [0 for _ in range(n)]\n\n    for i in range(0, n):\n        s[i] = stdin[i]\n        t[i] = stdin[i]\n\n    s_len = len(s)\n    t_len = len(t)\n\n    while True:\n        for i in range(0, s_len):\n            if s[i]!= '0':\n                s[i] = '0'\n                break\n\n        for i in range(0, t_len):\n            if t[i]!= '1':\n                t[i] = '1'\n                break\n\n        if s_len == t_len and s == t:\n            print(\"Draw\")\n            break\n\n        if s_len == t_len and s!= t:\n            print(\"First\")\n            break\n\n        if s_len!= t_len:\n            if s_len > t_len:\n                s_len -= 2\n            else:\n                t_len -= 2\n\n\ndef"
    },
    {
        "number": 530,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \u0414\u0430\u043d\u0430 \u0434\u043b\u0438\u043d\u0430 \u0441\u0442\u0440\u043e\u043a\u0438, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043d\u0430\u0431\u043b\u044e\u0434\u0430\u0435\u0442\u0441\u044f \u0441\u0438\u0442\u0443\u0430\u0446\u0438\u044f \u0441 \u0444\u0438\u0448\u0435\u043a \u0432 \u0431\u043b\u044e\u0434\u0435. \u0412\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u043c\u043e\u0436\u043d\u043e \u043b\u0438\u0431\u043e \"First\", \u043b\u0438\u0431\u043e \"Second\", \u043b\u0438\u0431\u043e \"Draw\", \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u0442\u043e\u0433\u043e, \u043a\u0442\u043e \u0432\u044b\u0438\u0433\u0440\u0430\u043b \u0432 \u0438\u0433\u0440\u0435.\n    \"\"\"\n    return \"First\"\n"
    },
    {
        "number": 530,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"First\" if stdin[0] > stdin[1] else \"Second\" if stdin[0] < stdin[1] else \"Draw\""
    },
    {
        "number": 530,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n\n    def rec(s, t):\n        if not s and not t:\n            return 'Draw'\n        if not s or not t:\n            return s or t\n\n        if s[0] == t[0]:\n            return rec(s[1:], t[1:])\n        else:\n            return s[0] if s[0] == '0' else t[0]\n\n    return rec(s, t)\n"
    },
    {
        "number": 530,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin[0]\n    t = stdin[1]\n    m = len(s)\n    n = len(t)\n    l = m - n\n\n    x = \"\"\n    for i in range(m - 1):\n        if s[i]!= s[i + 1]:\n            x += s[i]\n    if len(x) == l:\n        return \"First\"\n    elif len(x) < l:\n        return \"Second\"\n    elif len(x) > l:\n        return \"Draw\"\n    elif len(x) == 0:\n        return \"First\"\n\n    y = \"\"\n    for j in range(n - 1):\n        if t[j]!= t[j + 1]:\n            y += t[j]\n    if len(y) == l:\n        return \"Second\"\n    elif len(y) < l:\n        return \"First\"\n    elif len(y) > l:\n        return \"Draw\"\n    elif len(y) == 0:\n        return \"Second\""
    },
    {
        "number": 530,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    s, t = stdin[1], stdin[2]\n    return 'First' if s.count('1') > t.count('1') else 'Second' if s.count('1') < t.count('1') else 'Draw'\n"
    },
    {
        "number": 531,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    res = set()\n    if n == 1:\n        x = list(map(int, stdin.split('\\n')[0].split()))\n        res.add(x[0])\n    else:\n        m = {}\n        for i in stdin.split('\\n')[1].split():\n            x = int(i)\n            if m.get(x):\n                m[x] += 1\n            else:\n                m[x] = 1\n        x = list(m.items())\n        x.sort()\n        i = 0\n        while i < len(x) - 1:\n            if abs(x[i][0] - x[i+1][0]) <= 2:\n                if x[i][1] < x[i+1][1]:\n                    res.add(x[i][0])\n                    i += 1\n                else:\n                    res.add(x[i+1][0])\n                    i += 1\n            else:\n                res.add(x[i][0])\n                i += 1\n        if x[len(x)-1][0] == x[len(x)-1][1]:\n            res.add(x[len(x)-1][0])\n    return str(len(res)) +'' + str(' '.join(list(map(str, sorted(res)))))\n"
    },
    {
        "number": 531,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns min number of measurements to get the average equal to the average of Kirill's\n    \n    >>> solution(\"6\\n-1 1 1 0 0 -1\")\n    2\n    >>> solution(\"3\\n100 100 101\")\n    3\n    >>> solution(\"7\\n-10 -9 -10 -8 -10 -9 -9\")\n    5\n    \"\"\"\n    n = int(stdin)\n    x = list(map(int, stdin.split()))\n    s = sorted(x)\n    print(n - len(set(s[i + 1:])))\n"
    },
    {
        "number": 531,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 531,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''Finds the minimum number of equal measurements Anya\n    must perform in order to get the same average as\n    Kirill.'''\n    _, values = stdin.splitlines()\n    values = list(map(int, values.split()))\n    if len(values) == 1:\n        return str(values[0])\n\n    averages = [0, 0]\n    for i in range(len(values)):\n        for j in range(len(averages)):\n            if (values[i] + averages[j]) % 2 == 0:\n                averages[j] = (values[i] + averages[j]) // 2\n                break\n        else:\n            for j in range(len(averages)):\n                if averages[j] == 0:\n                    averages[j] = values[i]\n                    break\n\n    return''.join(map(str, averages))"
    },
    {
        "number": 531,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    x = map(int, stdin.readline().strip().split())\n    l = [0]\n    r = [0]\n    for i in x:\n        l.append(l[-1] + i)\n    for i in x[::-1]:\n        r.append(r[-1] + i)\n    r.reverse()\n    result = []\n    for i in range(n):\n        for j in range(i + 1, n):\n            if l[j] - l[i] <= 2 and r[j] - r[i] <= 2:\n                result.append(abs(l[j] - l[i] - r[j] + r[i]))\n                break\n    return str(min(result)) + '\\n' +''.join(map(str, sorted(result)))\n"
    },
    {
        "number": 531,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    num_measurements = int(stdin.readline())\n    kirill_values = [int(x) for x in stdin.readline().split()]\n    if len(set(kirill_values)) > 2:\n        return f'{num_measurements}\\n{kirill_values[0]}\\n{kirill_values[0]}\\n{kirill_values[0]}\\n{kirill_values[0]}\\n{kirill_values[0]}\\n{kirill_values[0]}\\n{kirill_values[0]}\\n{kirill_values[0]}\\n{kirill_values[0]}\\n{kirill_values[0]}\\n{kirill_values[0]}\\n{kirill_values[0]}\\n{kirill_values[0]}\\n{kirill_values[0]}\\n{kirill_values[0]}\\n{kirill_values[0]}\\n{kirill_values[0]}\\n{kirill_values[0]}\\n{kirill_values[0]}\\n{kirill_values[0]}\\n{kirill_values[0]}\\n{kirill_values[0]}\\n{kirill_values[0]}\\n{kirill_values[0]}\\n{kirill_values[0]}\\n{kirill_values[0]}\\n{kirill_values[0]}\\n{kirill_values[0]}\\n{kirill_values[0]}\\n{kirill_values[0]}\\n{kirill_values[0]}\\n{kirill_values[0]}\\n{kirill_values[0]}\\n{kirill_values[0]}\\n{kirill_values[0]}\\n{kirill_values[0]}\\n{kirill_values[0]}\\n{kirill_values[0]}\\n{kirill_values[0]}\\n{kirill_values[0]}\\n{kirill_values[0]}\\n{kirill_values[0]}\\n{kirill_values[0]}\\n{kirill_values[0]}\\n{kirill_values[0]}\\n{kirill_values[0]}\\n{kirill_values[0]}\\n{kirill_values[0]}\\n{kirill_values[0]}\\n{kirill_values[0]}\\n{kirill_values[0]}\\n{kirill_values[0]}\\n{kirill_values[0]}\\n{kirill_values[0]}\\n{kirill_values[0]}\\n{kirill_values[0]}\\n{kirill_values[0]}\\n{kirill_values[0]}\\n{kirill_values[0]}\\n{kirill_values[0]}\\n{kirill_values[0]}\\n{kirill_values[0]}\\n{kirill_values[0]}\\n{kirill_values[0]}\\n{kirill_values[0]}\\n{kirill_values[0]}\\n{kirill_values[0]}\\n{kirill_values[0]}\\n{kirill_values[0]}\\n{kirill_values[0]}\\n{kirill_values[0]}\\n{kirill_values[0]}\\n{kirill_values[0]}\\n{kirill_values[0]}\\n{kirill_values[0]}\\n{kirill_values[0]}\\n{kirill_values[0]}\\n{kirill_values[0]}\\n{kirill_values[0]}\\n{kirill_values[0]}\\n{kirill_values[0]}\\n{kirill_values[0]}\\n{kirill_values[0]}\\n{kirill_values[0]}\\n{kirill_values[0]}\\n{kirill_values[0]}\\n{kirill_values[0]}\\n{kirill_values[0]}\\n{kirill_values[0]}\\n{kirill_values[0]}\\n{kirill_values[0]}\\n{kirill_values[0]}\\n{kirill_values[0]}\\n{kirill_values[0]}\\n{kirill_values[0]}\\n{kirill_values[0]}\\n{kirill_values[0]}\\n{kirill_values[0]}\\n{kirill_values[0]}\\n{kirill_values[0]}\\n{kirill_values[0]}\\n{kirill_values[0]}\\n{kir"
    },
    {
        "number": 531,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin\n    d = dict()\n    l = [0]\n    count = 0\n    for i in range(len(x)):\n        try:\n            l.append(int(x[i]))\n        except:\n            break\n    #print(l)\n    k = int(x.split('\\n')[0])\n    for i in range(k):\n        if l[i] in d:\n            d[l[i]] += 1\n            if d[l[i]] == 2:\n                count -= 1\n        else:\n            d[l[i]] = 1\n        if l[i+1] == l[i] + 2:\n            count += 1\n            #print(l[i+1])\n            d[l[i]] = 0\n    #print(d)\n    print(count)\n    return ''.join(str(x) for x in l)\n\n\n\nsolution(stdin)\n\n\n\nsolution(\"3\\n-10 -9 -10 -8 -10 -9 -9\")\n\nsolution(\"7\\n-10 -9 -10 -8 -10 -9 -9\")\n\nsolution(\"6\\n-1 1 1 0 0 -1\")\n\nsolution(\"6\\n1 1 1 0 0 -1\")\n\nsolution(\"7\\n-10 -10 -9 -9 -9 -9 -9\")\n\nsolution(\"7\\n100 100 101\")\n\nsolution(\"7\\n-1 1 1 0 0 -1\")\n\nsolution(\"7\\n1 1 1 0 0 -1\")\n\nsolution(\"7\\n100 100 101\\n1\\n1\\n101\")\n\nsolution(\"7\\n100 100 101\\n1\\n1\\n101\\n1\\n1\\n101\")\n\n\n\nsolution(\"6\\n-1 1 1 0 0 -1\")\n\n\nsolution(\"3\\n-1 1 1\")\n\nsolution(\"7\\n-10 -10 -9 -9 -9 -9 -9\")\n\n\n\n\n\nsolution(\"3\\n-1 1 1\")\n\nsolution(\"7\\n-10 -10 -9 -9 -9 -9 -9\")\n\nsolution(\"7\\n100 100 101\")\n\n\n\n\n\nsolution(\"6\\n-1 1 1 0 0 -1\")\n\nsolution(\"7\\n-1 1 1 0 0 -1\")\n\nsolution(\"7\\n100 100 101\")\n\nsolution(\"7\\n-1 1 1 0 0 -1\")\n\nsolution(\"7\\n100 100 101\\n1\\n1\\n101\")\n\nsolution(\"7\\n100 100 101\\n1\\n1\\n101\\n1\\n1\\n101\")\n\n\n\nsolution(\"6\\n-1 1 1 0 0 -1\")\n\nsolution(\"7\\n-1 1 1 0 0 -1\")\n\nsolution(\"7\\n100 100 101\")\n\n\nsolution(\"3\\n-1 1 1\")\n\nsolution(\"7\\n-10 -10 -9 -9 -9 -9 -9\")\n\n\n\nsolution(\"3\\n-1 1 1\")\n\nsolution(\"7\\n-10 -10 -9 -9 -9 -9 -9\")\n\nsolution(\"7\\n100 100 101\")\n\n\n\n\nsolution(\"6\\n-1 1 1 0 0 -1\")\n\nsolution(\"7\\n-1 1 1 0 0 -1\")\n\nsolution(\"7\\n100 100 101\")\n\n\n\nsolution(\"3\\n-1 1 1\")\n\nsolution(\"7\\n-10 -10 -9 -9 -9 -9 -9\")\n\n\nsolution(\"3\\n-1 1 1\")\n\nsolution(\"7\\n-10 -10 -9 -9 -9 -9 -9\")\n\nsolution(\"7\\n100 100 101\")\n\n\n\nsolution(\"6\\n-1 1 1 0 0 -1\")\n\nsolution(\"7\\n-1 1 1 0 0 -1\")\n\nsolution(\"7\\n100 100 101\")\n\n\n\n\nsolution(\"3\\n-1 1 1\")\n\nsolution(\"7\\n-10 -10 -9 -9 -9 -9 -9\")\n\n\nsolution(\"3\\n-1 1 1\")\n\nsolution(\"7\\n-10 -10 -9 -9 -9 -9 -9\")\n\nsolution(\"7\\n100 100 101\")\n\n\nsolution(\"6\\n-1 1 1 0 0 -1\")\n\nsolution(\"7\\n-1 1 1 0 0 -1\")\n\nsolution(\"7\\n100 100 101\")\n\n\nsolution(\"3\\n-1 1 1\")\n\nsolution(\"7\\n-10 -10 -9 -9 -9 -9 -9\")\n\n\nsolution(\"3\\n-1 1 1\")\n\nsolution(\"7\\n-10 -10 -9 -9 -9 -9 -9\")\n\nsolution(\"7\\n100 100 101\")\n\n\n\nsolution(\"6\\n-1 1 1 0 0 -1\")\n\nsolution(\"7\\n"
    },
    {
        "number": 531,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    count = 0\n    n = int(stdin.split()[0])\n    x = list(map(int, stdin.split()[1:]))\n\n    x.sort()\n    y = [x[i + 1] - x[i] for i in range(len(x) - 1)]\n\n    m = set()\n    for i in range(len(y)):\n        if y[i] == 0:\n            m.add(y[i])\n            count += 1\n        elif y[i] == 2:\n            m.add(2)\n            count += 1\n\n    d = {}\n    for i in range(len(y)):\n        if y[i] in d.keys():\n            d[y[i]] += 1\n        else:\n            d[y[i]] = 1\n    \n    print(max(m))\n    for i in range(len(y)):\n        if d[y[i]] > 1:\n            m.add(y[i])\n            count += 1\n\n    print(count)\n\n\ndef"
    },
    {
        "number": 531,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    nums = [int(n) for n in stdin.split('\\n')[1].split(' ')]\n    avg = sum(nums) / len(nums)\n    nums.sort()\n    avg_low, avg_high = avg - 2, avg + 2\n    low, high = [], []\n    for n in nums:\n        if n < avg_low:\n            low.append(n)\n        elif n > avg_high:\n            high.append(n)\n    low.sort(reverse=True)\n    high.sort()\n    res = []\n    if low:\n        res.append(low.pop())\n    if high:\n        res.append(high.pop())\n    for n in nums:\n        if n not in res:\n            res.append(n)\n    return''.join([str(n) for n in res])\n\n\ndef"
    },
    {
        "number": 531,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = [int(i) for i in stdin.split()]\n    x.sort()\n    ans = 0\n    for i in range(n):\n        if i < n - 1 and x[i] + 1 == x[i + 1]:\n            ans += 1\n        elif i > 0 and x[i - 1] + 1 == x[i]:\n            ans += 1\n    return ans\n\n\ndef"
    },
    {
        "number": 532,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"18\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 532,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 532,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    alphabet = [chr(i) for i in range(ord('a'), ord('z') + 1)]\n    alphabet.append(alphabet[0])\n    pairs = zip(alphabet, alphabet[1:] + [alphabet[0]])\n    answer = 0\n    for s, e in pairs:\n        if s == stdin:\n            answer += 1\n        if e == stdin:\n            answer += 1\n    return answer\n\n\ndef"
    },
    {
        "number": 532,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\nprint(solution(input()))\n"
    },
    {
        "number": 532,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 532,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return"
    },
    {
        "number": 532,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # replace this for solution\n    return 0\n"
    },
    {
        "number": 532,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"zeus\")\n    18\n    >>> solution(\"map\")\n    35\n    >>> solution(\"ares\")\n    34\n    \"\"\"\n    rotations = {\n        'a': 0,\n        'b': 0,\n        'c': 0,\n        'd': 0,\n        'e': 0,\n        'f': 0,\n        'g': 0,\n        'h': 0,\n        'i': 0,\n        'j': 0,\n        'k': 0,\n        'l': 0,\n       'm': 0,\n        'n': 0,\n        'o': 0,\n        'p': 0,\n        'q': 0,\n        'r': 0,\n       's': 0,\n        't': 0,\n        'u': 0,\n        'v': 0,\n        'w': 0,\n        'x': 0,\n        'y': 0,\n        'z': 0,\n    }\n    for letter in stdin:\n        rotations[letter] += 1\n    return min(rotations.values())\n"
    },
    {
        "number": 532,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return"
    },
    {
        "number": 532,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 533,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a1, a2, k1, k2, n = map(int, stdin.split('\\n')[:5])\n    return str(max(n // k1, n // k2)) +'' + str(min(n // k1, n // k2))\n"
    },
    {
        "number": 533,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a1, a2, k1, k2, n = [int(i) for i in stdin.split('\\n')]\n    m = n - (k1 * a1 + k2 * a2)\n    if m < 0:\n        return str(m) +'' + str(0)\n    return str(0) +'' + str(m + 1)\n"
    },
    {
        "number": 533,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a1, a2, k1, k2, n = map(int, stdin.split())\n\n    x1 = a1 * k1 + a2 * k2 - n\n    x2 = a1 * k1 - a2 * k2 - n\n    return str(min(x1, x2)), str(max(x1, x2))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 533,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    first_line = stdin.split('\\n')[0]\n    second_line = stdin.split('\\n')[1]\n    third_line = stdin.split('\\n')[2]\n    fourth_line = stdin.split('\\n')[3]\n    return first_line + '\\n' + second_line + '\\n' + third_line + '\\n' + fourth_line\n"
    },
    {
        "number": 533,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 533,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a1, a2, k1, k2, n = [int(x) for x in stdin.split(\"\\n\")]\n    min_n, max_n = 0, 0\n    for _ in range(n):\n        if k1 > 0:\n            min_n += 1\n            k1 -= 1\n        if k2 > 0:\n            max_n += 1\n            k2 -= 1\n    return f\"{min_n} {max_n}\"\n"
    },
    {
        "number": 533,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    first_team_cards, second_team_cards, max_first_team_cards, max_second_team_cards, cards_shown = (\n        int(stdin) for _ in range(5))\n\n    max_cards = max(max_first_team_cards, max_second_team_cards)\n\n    return str(first_team_cards + second_team_cards - 2 * max_cards + cards_shown)\n"
    },
    {
        "number": 533,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 533,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 533,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 534,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return a solution to the problem\"\"\"\n    return \"\"\n"
    },
    {
        "number": 534,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, t = stdin.split()\n    n, t = int(n), int(t)\n    arr = stdin[:]\n    for i in range(n):\n        if arr[i] == 'B':\n            arr = arr[:i] + 'G' + arr[i + 1:]\n    return arr\n\n\nprint(solution(input()))"
    },
    {
        "number": 534,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, t = stdin.split(' ')\n    n, t = int(n), int(t)\n    s = stdin[:n]\n    stdin = stdin[n:]\n    if len(s) <= t:\n        return s\n    else:\n        for i in range(t):\n            s = s[1:] + s[0]\n    return s\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 534,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, t = [int(x) for x in stdin.split('\\n')[0].split()]\n    string = stdin.split('\\n')[1]\n    if t > n:\n        return ''\n    result = ''\n    for i in range(t):\n        if string[i % n] == 'B':\n            result += 'G'\n        else:\n            result += 'B'\n    return result\nprint(solution(stdin))\n"
    },
    {
        "number": 534,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 534,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split(' '))\n    arr = list(stdin)\n    count = 1\n    while t >= 0:\n        if arr[count - 1] == 'B':\n            arr[count - 1] = 'G'\n        else:\n            arr[count - 1] = 'B'\n        count = count + 2 if count % 2 == 0 else count + 1\n        t -= 1\n    return ''.join(arr)\n"
    },
    {
        "number": 534,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split(\"\\n\")\n    n, t = map(int, input[0].split(\" \"))\n    arr = input[1]\n    arr = [int(i) for i in arr]\n    arr.append(1)\n    for i in range(t):\n        arr_temp = []\n        for j in range(n):\n            arr_temp.append(arr[j])\n            if arr[j] % 2 == 0 and arr[j + 1] % 2 == 1:\n                arr_temp[j] = arr[j] + 1\n                arr_temp[j + 1] = arr[j + 1] + 1\n        arr = arr_temp\n    return \"\".join(list(map(str, arr)))\n\nprint(solution(input()))\n"
    },
    {
        "number": 534,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    boys = stdin.count(\"B\")\n    girls = stdin.count(\"G\")\n    time = int(stdin.split()[1])\n    cycle = boys + girls - 1\n    if cycle <= 0:\n        return stdin\n    elif time % cycle == 0:\n        return stdin\n    else:\n        cycle_time = time // cycle\n        return stdin[:cycle_time] + \"G\" + stdin[cycle_time + 1:]\n\n\ndef"
    },
    {
        "number": 534,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin\n    length = len(string)\n    time = int(stdin.split(\" \")[1])\n    # print(length, time)\n    while time >= 0:\n        for i in range(length - 1):\n            if string[i] == \"B\" and string[i + 1] == \"G\":\n                string = string[:i] + \"G\" + string[i + 1:]\n        time -= 1\n    return string\n"
    },
    {
        "number": 534,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin\n    n, m = map(int, stdin.split(' '))\n    l = list(stdin)\n    l_a = []\n    l_a = [list(string[i:i+m]) for i in range(0, len(string), m)]\n    a = [x[0] for x in l_a]\n    while m>1:\n        l_a_t = []\n        for i in range(0, len(l)):\n            if l[i] == 'G':\n                if l[i+1] == 'B':\n                    l_a_t.append('B')\n                else:\n                    l_a_t.append('G')\n            else:\n                if l[i+1] == 'G':\n                    l_a_t.append('G')\n                else:\n                    l_a_t.append('B')\n        l = l_a_t\n        l_a = []\n        l_a = [list(l[i:i+m]) for i in range(0, len(l), m)]\n        a = [x[0] for x in l_a]\n        m -= 1\n    return ''.join(a)\n"
    },
    {
        "number": 535,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 535,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split(\" \")]\n    if n == 1:\n        return 1\n\n    def get_prod(n: int) -> int:\n        \"\"\"\n        Get the product of primes less than n\n        \"\"\"\n        k = 2\n        primes = set()\n        while k * k < n:\n            if n % k!= 0:\n                k += 1\n            else:\n                primes.add(k)\n                n //= k\n        if n > 1:\n            primes.add(n)\n        return int(np.prod(primes))\n\n    primes = get_prod(n)\n    return str(primes * pow(10, 9 + 7 - 1, 10 ** 9 + 7) % (10 ** 9 + 7))\n"
    },
    {
        "number": 535,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    factors = [i for i in range(1, n + 1) if n % i == 0]\n    prod = 1\n    for factor in factors:\n        prod *= factor\n    prod = prod % (10 ** 9 + 7)\n    dividers = [i for i in range(1, n + 1) if prod % i == 0]\n    p, q = 0, 0\n    for divider in dividers:\n        if n % divider == 0 and divider % k == 0:\n            p = divider\n            q = int(n / divider)\n            break\n    return str(p * q)\n"
    },
    {
        "number": 535,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    return str(n**k % 1000000007)\n"
    },
    {
        "number": 535,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(c) for c in stdin.split(' ')]\n    P = 1\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            P *= i ** (n // i)\n    Q = 1\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0 and i % 2!= 0:\n            Q *= i ** (n // i)\n    return P * Q % (10 ** 9 + 7)\n\n\ndef"
    },
    {
        "number": 535,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the solution for the given input.\"\"\"\n    return str(int(stdin.split()[0]) - 1)\n"
    },
    {
        "number": 535,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    p, q = 0, 1\n    for i in range(1, k + 1):\n        r = n // i\n        d = n % i\n        if d == 0:\n            d = i\n        x = (r + d) * i\n        p += x\n        q *= i\n    return str(p // q)\n"
    },
    {
        "number": 535,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(v) for v in stdin.split()]\n    prod = 0\n    for i in range(k):\n        # Generate random divisor\n        divisor = get_random_divisor(n)\n        # Replace n with divisor\n        n = divisor\n        prod += n\n    return str(prod)\n\ndef"
    },
    {
        "number": 535,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(s) for s in stdin.split()]\n    d = b * 10 ** 9 % (10 ** 9 + 7)\n    stdout = d * a\n    return str(stdout % (10 ** 9 + 7))\n\nprint(solution('6 1'))\nprint(solution('6 2'))\nprint(solution('60 5'))\n"
    },
    {
        "number": 535,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    m = n\n    while n % 2 == 0:\n        n /= 2\n    while n % 5 == 0:\n        n /= 5\n    if n == 1:\n        return str(m)\n    p = 1\n    q = 1\n    for _ in range(k):\n        p *= 58\n        q *= 10\n        r = p % (10 ** 9 + 7)\n        while r % n!= 0:\n            r *= 58\n            r %= (10 ** 9 + 7)\n        q //= r\n    return str(p // q)\n"
    },
    {
        "number": 536,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    mylist = []\n    for i in range(n):\n        mylist.append(0)\n    for j in range(m):\n        mylist.append(1)\n    print(mylist)\n    mylist1 = []\n    for k in range(len(mylist)):\n        mylist1.append(mylist[k])\n    print(mylist1)\n    for p in range(n):\n        for q in range(p+1, n+1):\n            if mylist[p] == mylist[q]:\n                mylist1.pop(q)\n                mylist1.insert(p, mylist1.pop(p))\n                break\n    print(mylist1)\nsolution(input())\n"
    },
    {
        "number": 536,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = stdin.split()\n    n = int(n)\n    m = int(m)\n    if m == 0 or n == 0:\n        return \"0\"\n    n_array = [0 for _ in range(n)]\n    m_array = [0 for _ in range(m)]\n    for i, j in zip(n_array, m_array):\n        n_array[i] = j\n        m_array[j] = i\n    if n + m!= len(n_array) + len(m_array):\n        return \"0\"\n    return \"\".join(n_array)"
    },
    {
        "number": 536,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    from collections import deque\n    cnt0, cnt1 = [int(i) for i in stdin.split()]\n    cnt0, cnt1 = min(cnt0, cnt1), max(cnt0, cnt1)\n\n    if cnt0 == cnt1:\n        return '0' * cnt0\n    if cnt0 > cnt1:\n        return '0' * cnt1 + '1' * (cnt0 - cnt1)\n\n    queue0 = deque()\n    queue1 = deque()\n    for i in range(cnt0):\n        queue0.appendleft('0')\n    for i in range(cnt1):\n        queue1.appendleft('1')\n\n    ans = ''\n    for i in range(cnt0 + cnt1):\n        if queue0 and queue0[0] == '0':\n            queue0.popleft()\n            queue1.appendleft(queue0.popleft())\n        elif queue1 and queue1[0] == '1':\n            queue1.popleft()\n            queue0.appendleft(queue1.popleft())\n        ans += queue0.popleft()\n    return ans\n"
    },
    {
        "number": 536,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"1011011011011011\""
    },
    {
        "number": 536,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 536,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n"
    },
    {
        "number": 536,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    numberOfZeroes = int(stdin.readline().strip())\n    numberOfOnes = int(stdin.readline().strip())\n    if numberOfOnes == 0 or numberOfOnes == 1:\n        return \"1\" * numberOfOnes\n    if numberOfOnes == 2:\n        return \"10\"\n    if numberOfOnes == 3:\n        return \"100\"\n    if numberOfOnes == 4:\n        return \"110\"\n    if numberOfOnes == 5:\n        return \"11010\"\n    if numberOfOnes == 6:\n        return \"11110\"\n    if numberOfOnes == 7:\n        return \"111110\"\n    if numberOfOnes == 8:\n        return \"1111110\"\n    if numberOfOnes == 9:\n        return \"111111110\"\n    return \"-1\"\n"
    },
    {
        "number": 536,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    cards: int = stdin.split()\n    zero_cards: int = int(cards[0])\n    one_cards: int = int(cards[1])\n    \n    if zero_cards < 2 or one_cards < 3:\n        return '-1'\n    \n    elif zero_cards % 2 == 1:\n        return '0' * (zero_cards // 2) + '1' * (zero_cards % 2)\n    \n    elif one_cards % 3 == 0:\n        return '1' + '0' * ((one_cards // 3) - 1)\n    \n    elif one_cards % 3 == 1:\n        return '1' + '0' * ((one_cards // 3) - 1) + '1'\n    \n    elif one_cards % 3 == 2:\n        return '1' + '0' * (one_cards // 3)\n    \n    else:\n        raise ValueError\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 536,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    num_zeroes = int(stdin.split()[0])\n    num_ones = int(stdin.split()[1])\n    \n    if num_zeroes < num_ones:\n        return \"-\"\n    \n    num_zeroes_needed = num_zeroes + num_ones\n    num_cards = num_zeroes_needed\n    num_str = \"0\" * num_cards\n    \n    if num_zeroes_needed % 2 == 1:\n        num_str = \"1\" + num_str\n        num_zeroes_needed += 1\n    \n    for num_ones_needed in range(num_ones, 0, -1):\n        index = num_zeroes_needed - num_ones_needed\n        num_str = num_str[:index] + \"1\" + num_str[index:]\n    \n    return num_str\n"
    },
    {
        "number": 536,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    \u0421\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442 \u0441\u0442\u0440\u043e\u043a\u0443 \u0432 \u0432\u0438\u0434\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0441\u0442\u0440\u043e\u043a. \u0421\u0447\u0438\u0442\u0430\u0435\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0447\u0438\u0441\u0435\u043b \u043e\u0442 0 \u0434\u043e 9 \u0432 \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435. \u0412\u044b\u0432\u043e\u0434\u0438\u0442 \u0441\u0442\u0440\u043e\u043a\u0443, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0438\u043d\u0434\u0435\u043a\u0441\u044b \u0447\u0438\u0441\u0435\u043b \u043e\u0442 0 \u0434\u043e 9 \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u044b \u043f\u043e \u043d\u043e\u043c\u0435\u0440\u0430\u043c, \u0430 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u0446\u0438\u0444\u0440\u044b \u0437\u0430\u043c\u0435\u043d\u0435\u043d\u044b \u043f\u0440\u043e\u0431\u0435\u043b\u0430\u043c\u0438.\n    :param stdin:\n    :return:\n    '''\n    cnt = [0] * 10\n    for s in stdin.split('\\n'):\n        cnt[int(s)] += 1\n    answer = ''\n    i = 0\n    while cnt[i] > 0:\n        answer += str(i) * cnt[i]\n        cnt[i] = 0\n        i += 1\n    for i in range(len(answer)):\n        if i % 2 == 1:\n            answer = answer[:i] +'' + answer[i:]\n    return answer.strip() if answer.strip()!= ''.join(answer.split()) else -1"
    },
    {
        "number": 537,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    d, c, n = map(int, stdin.split())\n    diploma = c * d\n    certificate = c * (d + 1)\n    if n <= certificate:\n        diploma = c * d\n    elif n <= diploma:\n        certificate = c * (d + 1)\n    else:\n        pass\n    return str(d) +'' + str(c) +'' + str(n - diploma - certificate)\n"
    },
    {
        "number": 537,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find the maximum possible number of winners.\n    \"\"\"\n    n, k = [int(i) for i in stdin.split()]\n    d = n // 2\n    s = k * d\n    if s > n:\n        return f\"0 0 {n}\"\n    if n - s <= 0:\n        return f\"1 {n}\"\n    if s - k * d == 0:\n        return f\"{s}\"\n    return f\"{s} {k * d}\"\n"
    },
    {
        "number": 537,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, k = map(int, stdin.split())\n    \n    diplomas = n // 2\n    certificates = n - diplomas\n    \n    result = f'{diplomas} {certificates} {n}'\n    \n    return result\n"
    },
    {
        "number": 537,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    student, certificate = map(int, stdin.split())\n    certificate = certificate // 2\n    if certificate < student:\n        return str(certificate) +'' + str(student - certificate) +'0'\n    winners = student\n    certificate = certificate - student\n    while certificate > 0:\n        certificate = certificate // 2\n        if winners < certificate:\n            winners = certificate\n    return str(student - winners) +'' + str(winners) +'' + str(student)\n"
    },
    {
        "number": 537,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    # get input from user\n    n, k = stdin.split()\n    n = int(n)\n    k = int(k)\n    \n    # calculate the number of winners\n    num_winners = n//2\n    if k > num_winners:\n        num_winners = n-k\n    \n    # print result\n    print(n - num_winners, num_winners, num_winners)\n    return \"\"\n\"\"\"\n\ndef"
    },
    {
        "number": 537,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    n, k = int(s[0]), int(s[1])\n    if (k - n + 1) % 2 == 0:\n        return''.join([str(i) for i in [n, (k - n + 1) // 2, k - n + 1 - (k - n + 1) // 2]])\n    else:\n        return''.join([str(i) for i in [n, (k - n + 1) // 2, k - n + 1 - (k - n + 1) // 2 + 1]])\n"
    },
    {
        "number": 537,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"You must return a string which represents the number of winners, separated by spaces, in the same order as in the input.\n\nIf the number of winners is not possible, then you must return \"0 0 0\".\n\n    Parameters\n    ----------\n    stdin : str\n        input of data in format: int int\n\n    Returns\n    -------\n    str\n        string of winners' numbers\n    \"\"\"\n    stdin = stdin.split()\n    n = int(stdin[0])\n    k = int(stdin[1])\n    return \"0 0 \" + str(n-1) if ((k*(n//2))+(k-(n//2))) < n else \"0 0 \" + str(((k*(n//2))+(k-(n//2))))\n"
    },
    {
        "number": 537,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 537,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    _, k = stdin.split()\n    k = int(k)\n    n = int(stdin)\n    \n    if k*2 >= n:\n        return \"0 0 \" + str(n)\n    \n    cert = n - (k*2)\n    dipl = k*2\n    \n    return str(dipl) + \" \" + str(cert) + \" \" + str(n-dipl-cert)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 537,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    stdin = int(stdin)\n    d, c, nd, nc = 0, 0, 0, 0\n    if stdin % 2 == 0:\n        d = stdin // 2\n    else:\n        d = stdin // 2 + 1\n    for _ in range(stdin):\n        if _ % 2 == 0:\n            c += 1\n    if d == c:\n        nd = nc = stdin\n    elif d < c:\n        nc = stdin - d\n        nd = 0\n    elif d > c:\n        nd = stdin - d\n        nc = 0\n    print(d, c, nd, nc)\n    return str(nd) + \" \" + str(nc) + \" \" + str(stdin - nd - nc)\n"
    },
    {
        "number": 538,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    count = 0\n    while x:\n        if x % 10 == 0:\n            x //= 10\n        else:\n            x = int(str(x) + str(x)[::-1])\n            count += 1\n            if count == 4:\n                return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 538,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    start = 0\n    finish = 0\n    while True:\n        start = start * 10 + x % 10\n        finish = finish * 10 + x % 10\n        if start == finish:\n            break\n        x = x // 10\n    if start == finish or (start // 10) % 10 == (finish % 10):\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 538,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    number = str(x)\n    print(number)\n    rev_number = number[::-1]\n    print(rev_number)\n    print(number + \"0\" * len(number) + rev_number)\n    if number == number[::-1] + \"0\" * len(number) + rev_number:\n        return \"YES\"\n    else:\n        return \"NO\"\n\nsolution(\"131\")\nsolution(\"320\")\nsolution(\"2010200\")"
    },
    {
        "number": 538,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    len_num = len(stdin)\n    first_half = num // (10 ** (len_num // 2))\n    second_half = num % 10 ** (len_num // 2)\n    return 'YES' if first_half == second_half and first_half % 10!= second_half else 'NO'\n"
    },
    {
        "number": 538,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin\n    result = \"NO\"\n    for i in range(len(x)):\n        if x[i:] == x[i:][::-1]:\n            result = \"YES\"\n    print(result)\n    return result\n\n\ndef"
    },
    {
        "number": 538,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if stdin == stdin[::-1] else \"NO\"\n\n\ndef"
    },
    {
        "number": 538,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x <= 9:\n        return \"NO\"\n    elif x % 10 == 0:\n        return \"NO\"\n    left = 0\n    right = 0\n    while x >= 10 ** left:\n        left += 1\n    while x > 10 ** right:\n        right += 1\n    if x > 10 ** (right - 1) * 9:\n        return \"NO\"\n    temp = str(x)\n    temp = temp + temp[::-1]\n    if int(temp) == x:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 538,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if int(stdin) + int(stdin[::-1]) == int(stdin) else 'NO'\n"
    },
    {
        "number": 538,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin\n    return 'YES' if int(x) + int(x[::-1]) == 2 * int(x) else 'NO'\n\n\ndef"
    },
    {
        "number": 538,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"NO\" if len(stdin) < 2 else \"YES\" if stdin == stdin[::-1] else \"NO\""
    },
    {
        "number": 539,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 539,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    memo = {}\n    count = 0\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            xor = i ^ j\n            if xor not in memo:\n                memo[xor] = 1\n            else:\n                memo[xor] += 1\n            if i == j:\n                count += memo[xor]\n    return count\n"
    },
    {
        "number": 539,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    n = int(stdin)\n    ans = 0\n    for a in range(1, n+1):\n        for b in range(1, n+1):\n            for c in range(1, n+1):\n                if a+b+c == 0 and a**2+b**2 == c**2:\n                    ans += 1\n    return ans\n\n\nimport math\n\ndef"
    },
    {
        "number": 539,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(list(itertools.combinations(range(1, int(stdin) + 1), 3)))\\\n       .count(0))"
    },
    {
        "number": 539,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport sys\n\n\ndef"
    },
    {
        "number": 539,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(number_of_xorangles(int(stdin)))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 539,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 539,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return None\n"
    },
    {
        "number": 539,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(1, int(stdin) + 1):\n        print(int(bin(i)[2:].zfill(i)[::-1].index('1')))\n"
    },
    {
        "number": 539,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    n = int(lines[0])\n    return str(count_distinct(n))\n\n\ndef"
    },
    {
        "number": 540,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 540,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    # get n, m, r_1, c_1, r_2, c_2 from stdin\n    n, m = map(int, stdin.split())\n    r_1, c_1 = map(int, stdin.split())\n    r_2, c_2 = map(int, stdin.split())\n    \n    # init matrix\n    matrix = []\n    for _ in range(n):\n        matrix.append(stdin.split())\n    \n    # check if dest is accessible\n    if (r_1, c_1) == (r_2, c_2):\n        return 'YES'\n    \n    # traverse matrix to find dest\n    if r_2 > r_1 and c_2 < c_1:\n        r = r_1\n        c = c_1\n        r_1 = r_2\n        c_1 = c_2\n        r_2 = r\n        c_2 = c\n    \n    # traverse matrix to find ice\n    ice = []\n    for i in range(r_2 - r_1 + 1):\n        for j in range(c_1 - c_2 + 1):\n            ice.append((r_1 + i, c_1 + j))\n    \n    # check if ice is valid\n    if not ice:\n        return 'NO'\n    \n    # check if ice is valid\n    for (r_i, c_i) in ice:\n        if matrix[r_i][c_i] == 'X':\n            return 'NO'\n    \n    # check if ice is valid\n    matrix[r_1][c_1] = '.'\n    matrix[r_2][c_2] = '.'\n    \n    # traverse ice to see if dest is accessible\n    for (r_i, c_i) in ice:\n        if (r_1, c_1) in ice and (r_2, c_2) in ice:\n            matrix[r_i][c_i] = 'X'\n        elif (r_1, c_1) in ice and (r_2, c_2) not in ice:\n            matrix[r_i][c_i] = '.'\n        elif (r_1, c_1) not in ice and (r_2, c_2) in ice:\n            matrix[r_i][c_i] = '.'\n        else:\n            matrix[r_i][c_i] = 'X'\n    \n    # check if ice is valid\n    if matrix[r_1][c_1] == 'X':\n        return 'NO'\n    \n    return 'YES'\n"
    },
    {
        "number": 540,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(' ')]\n    matrix = [[c for c in line] for line in stdin.split('\\n')]\n    start_row, start_col = int(stdin.split(' ')[0]), int(stdin.split(' ')[1])\n    end_row, end_col = int(stdin.split(' ')[2]), int(stdin.split(' ')[3])\n    return \"YES\" if dfs(matrix, start_row, start_col, end_row, end_col) else \"NO\"\n\ndef"
    },
    {
        "number": 540,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    dimensions = list(map(int, stdin.split('\\n')[0].split()))\n    ice_field = []\n    for i in range(dimensions[0]):\n        ice_field.append([int(char) for char in stdin.split('\\n')[i + 1].split()])\n    start_row = start_col = int(stdin.split('\\n')[2].split()[0]) - 1\n    end_row = end_col = int(stdin.split('\\n')[2].split()[1]) - 1\n    visited_coords = {(start_row, start_col)}\n    if ice_field[start_row][start_col] == 0:\n        ice_field[start_row][start_col] = 1\n    queue = [(start_row, start_col, 1, ice_field[start_row][start_col])]\n    while queue:\n        current_row, current_col, current_level, current_status = queue.pop()\n        if current_row == end_row and current_col == end_col:\n            return 'YES'\n        for row_diff, col_diff in ((0, -1), (0, 1), (-1, 0), (1, 0)):\n            new_row = current_row + row_diff\n            new_col = current_col + col_diff\n            if 0 <= new_row < dimensions[0] and 0 <= new_col < dimensions[1] and \\\n                    new_row!= current_row or new_col!= current_col:\n                if current_status!= 0:\n                    if ice_field[new_row][new_col]!= current_status:\n                        if (new_row, new_col) not in visited_coords:\n                            visited_coords.add((new_row, new_col))\n                            queue.append((new_row, new_col, current_level + 1, ice_field[new_row][new_col]))\n                    else:\n                        if (new_row, new_col) not in visited_coords:\n                            visited_coords.add((new_row, new_col))\n                            queue.append((new_row, new_col, current_level + 1, ice_field[new_row][new_col] - 1))\n                else:\n                    if (new_row, new_col) not in visited_coords:\n                        visited_coords.add((new_row, new_col))\n                        queue.append((new_row, new_col, current_level + 1, ice_field[new_row][new_col]))\n    return 'NO'\n"
    },
    {
        "number": 540,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution to the task.\"\"\"\n    pass\n"
    },
    {
        "number": 540,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport sys\nimport math\n\ndef"
    },
    {
        "number": 540,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 540,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.split(' ')]\n    matrix = [[] for i in range(n)]\n    \n    for i in range(n):\n        matrix[i] = [char for char in stdin.split('\\n')[i]]\n    \n    current_r, current_c = [int(i) for i in stdin.split('\\n')[n + 1].split(' ')]\n    \n    destination_r, destination_c = [int(i) for i in stdin.split('\\n')[n + 2].split(' ')]\n    \n    return 'NO'\n\nfrom collections import deque\n\ndef"
    },
    {
        "number": 540,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    ice = [list(stdin[x:x+m]) for x in range(0, n*m, m)]\n    print(ice)\n    y, x = map(int, stdin.split(' '))\n    if ice[y-1][x-1] == '.':\n        ice[y-1][x-1] = 'X'\n        return 'YES'\n    else:\n        return 'NO'\n    return ''.join([''.join(ice)])\n\n\ndef"
    },
    {
        "number": 540,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())\n    # print(input())"
    },
    {
        "number": 541,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    lines = lines[:-1]\n    lines = [line.split(' ') for line in lines]\n    N = int(lines[0][0])\n    M = int(lines[0][1])\n    \n    lines = lines[1:]\n    lines = [[int(i) for i in line] for line in lines]\n    \n    connections = {}\n    for connection in lines:\n        if connection[0] in connections:\n            connections[connection[0]].append(connection[1])\n        else:\n            connections[connection[0]] = [connection[1]]\n        if connection[1] in connections:\n            connections[connection[1]].append(connection[0])\n        else:\n            connections[connection[1]] = [connection[0]]\n    \n    branches = []\n    for key in connections:\n        branches.append(len(connections[key]))\n    \n    branches = sorted(branches)\n    \n    return str(branches[0] - 1)"
    },
    {
        "number": 541,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Take in N, M, a_1, b_1,..., a_M, b_M\n    # Create a 2D array N + 1 x N + 1\n    # Set all values to 0\n    # Populate a_i b_i for i in range(1, N + 1)\n    # Return the minimum number of bridges to remove\n    pass"
    },
    {
        "number": 541,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n  '''Your solution goes here.'''\n"
    },
    {
        "number": 541,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return result\n"
    },
    {
        "number": 541,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 541,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # It's main function. Don't remove this function\n    # It's used for auto-testing and must return a result for the back-end to check.\n    # INPUT:\n    #       str -> stdin\n    # OUTPUT:\n    #       str -> result\n    n, m = [int(x) for x in stdin.split(\" \")]\n    arr = []\n    for _ in range(n):\n        arr.append(stdin)\n    print(solution_func(n, m, arr))"
    },
    {
        "number": 541,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return"
    },
    {
        "number": 541,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    pass"
    },
    {
        "number": 541,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \" \".join(map(str, list))"
    },
    {
        "number": 541,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 542,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    points = stdin.split('\\n')\n    points = [int(point) for point in points]\n    # points = sorted(points, key=lambda x: x < 0, reverse=True)\n    first = points[0] + 1\n    second = points[1] + 1\n    if first == second:\n        print(\"first\") if points[0] < 0 else print(\"second\")\n    elif first > second:\n        print(\"first\")\n    else:\n        print(\"second\")"
    },
    {
        "number": 542,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    N = int(stdin)\n    p = [0] * N\n    p[0] = 1\n    for i in range(N):\n        a = int(stdin)\n        p[i] = p[i-1]\n        if a > 0:\n            p[i] += a\n        else:\n            p[i] -= a\n    \n    #print(p)\n    return \"first\" if p[-1] > 0 else \"second\"\n\n'''"
    },
    {
        "number": 542,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"first\" if stdin[0] > 0 else \"second\""
    },
    {
        "number": 542,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 542,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"first\" if stdin[1] > stdin[3] else \"second\""
    },
    {
        "number": 542,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def has_won(first_wrestler_points: List[int], second_wrestler_points: List[int]):\n        if len(first_wrestler_points)!= len(second_wrestler_points):\n            return first_wrestler_points > second_wrestler_points\n        if first_wrestler_points == second_wrestler_points:\n            return second_wrestler_points[-1] - first_wrestler_points[-1] + 1 >= 0\n        return len(first_wrestler_points) > len(second_wrestler_points) and first_wrestler_points[-1] - first_wrestler_points[-2] + 1 >= 0\n\n\n    wrestlers_points = [0, 0]\n    for line in stdin.split('\\n'):\n        if not line:\n            continue\n        first_wrestler_points, second_wrestler_points = line.split()\n        wrestlers_points[0] += int(first_wrestler_points) if first_wrestler_points[0] == '-' else -int(first_wrestler_points)\n        wrestlers_points[1] += int(second_wrestler_points) if second_wrestler_points[0] == '-' else -int(second_wrestler_points)\n    return 'first' if has_won(wrestlers_points[0], wrestlers_points[1]) else'second'\n"
    },
    {
        "number": 542,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return'second'\n"
    },
    {
        "number": 542,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return 'first' if int(stdin.readline()) > 0 else'second'\n\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 542,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"first\" if stdin[1] > stdin[3] else \"second\"\n\"\"\"\n\nn = int(input())\nscore = [0] * n\nfor i in range(n):\n    score[i] = int(input())"
    },
    {
        "number": 542,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\n-----Test Case-----\n\nsolution(\"4\\n1\\n-3\\n-4\\n3\")\nreturn \"first\"\n\nsolution(\"5\\n-1\\n-2\\n3\\n-4\\n3\")\nreturn \"second\"\n\nsolution(\"3\\n-1\\n-2\\n3\")\nreturn \"first\"\n"
    },
    {
        "number": 543,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = [int(x) for x in stdin.readline().split()]\n    arr.sort()\n\n    c = 0\n    d = 0\n    for i in range(n):\n        if arr[i] == 0:\n            c += 1\n            if c == 1:\n                d += 1\n        else:\n            if c == 2:\n                d += 1\n            else:\n                c = 0\n    if c == 1:\n        d += 1\n\n    if d >= arr[-1]:\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 543,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n\"\"\"\ndef"
    },
    {
        "number": 543,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n\n    pizza_amount = [0] * n\n    for i in range(n):\n        pizza_amount[i] = int(stdin.split(\" \")[i])\n\n    pizza_amount = pizza_amount[::-1]\n    pizza_amount = pizza_amount[:-1]\n    total_pizza = pizza_amount[0]\n    pizza_amount = pizza_amount[1:]\n\n    coupon_amount = n\n    for i in range(n):\n        coupon_amount = min(coupon_amount, n - i)\n        total_pizza = max(total_pizza, pizza_amount[i] - coupon_amount)\n        if total_pizza < 0:\n            return \"NO\"\n        if total_pizza < n:\n            return \"NO\"\n\n    return \"YES\"\n"
    },
    {
        "number": 543,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\ndef"
    },
    {
        "number": 543,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    num_days = int(stdin[0])\n    num_pizzas_per_day = [int(n) for n in stdin[1].split(' ')]\n\n    pizza_count = 0\n    coupon_count = 0\n    day = 1\n    while day <= num_days:\n        # print(f\"day: {day}, pizza_count: {pizza_count}, coupon_count: {coupon_count}\")\n        if day < num_days:\n            coupon_count = 0\n        if day == 1:\n            pizza_count += num_pizzas_per_day[day - 1]\n        if day > 1:\n            pizza_count += num_pizzas_per_day[day - 2]\n            if pizza_count >= 2:\n                pizza_count -= 2\n                coupon_count += 1\n            if pizza_count >= 3:\n                pizza_count -= 3\n                coupon_count += 1\n        # print(f\"day: {day}, pizza_count: {pizza_count}, coupon_count: {coupon_count}\")\n\n        if day == num_days:\n            if pizza_count == num_pizzas_per_day[day - 1]:\n                print('YES')\n            else:\n                print('NO')\n        elif day < num_days:\n            if pizza_count == num_pizzas_per_day[day - 1] and coupon_count == 1:\n                print('YES')\n            else:\n                print('NO')\n\n        day += 1\n"
    },
    {
        "number": 543,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 543,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    array = [int(x) for x in stdin.split(\" \")]\n    days = []\n    for i in range(n):\n        days.append(array[i])\n    start = 1\n    prev = 0\n    while len(days) > 0:\n        if prev + 2 <= len(days):\n            prev += 2\n        else:\n            prev += 1\n        if prev < len(days):\n            days.pop()\n        else:\n            break\n    if len(days) == 0:\n        return \"YES\"\n    else:\n        return \"NO\"\n        \n    return \"\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 543,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    _, *nums = stdin.split()\n    nums = [int(n) for n in nums]\n    days = len(nums)\n\n    def possible():\n        for i in range(1, days + 1):\n            for j in range(1, i + 1):\n                if i == j:\n                    yield 1\n                else:\n                    yield 2 * j - i\n\n    def solve(i, j):\n        if j < i:\n            return False\n        if j == i:\n            return possible()\n        for p in possible():\n            if solve(i, j - p):\n                return True\n        return False\n\n    return 'YES' if solve(days, days) else 'NO'\n"
    },
    {
        "number": 543,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    days = int(stdin.readline())\n    pizza_counts = [int(n) for n in stdin.readline().split()]\n    pizza_counts.sort(reverse=True)\n    free_pizzas_cnt = 0\n    while len(pizza_counts) > 1:\n        cnt = pizza_counts.pop(0)\n        if cnt > 0:\n            cnt -= 1\n            pizza_counts[0] += 1\n            free_pizzas_cnt += 1\n        if cnt == 0:\n            free_pizzas_cnt += 1\n    if len(pizza_counts) == 1 and pizza_counts[0] > 0:\n        free_pizzas_cnt += 1\n\n    if free_pizzas_cnt < days:\n        return \"NO\"\n    return \"YES\"\n    return \"\"\n"
    },
    {
        "number": 543,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 544,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    # \ubb38\uc790\uc5f4\uc744 \ub9ac\uc2a4\ud2b8\ub85c \ubc14\uafbc\ub2e4\n    string_list = list(stdin)\n    # \ubb38\uc790\uc5f4\uc758 \uae38\uc774\ub97c \uc800\uc7a5\ud55c\ub2e4\n    length = len(string_list)\n    # \uae38\uc774\ub9cc\ud07c \uc7ac\uadc0\ud568\uc218\ub97c \ud638\ucd9c\ud55c\ub2e4\n    def recursion(start, end):\n        # \ub2e4\ub978 \ub9ac\uc2a4\ud2b8\ub97c \uc800\uc7a5\ud560 \ubcc0\uc218\ub97c \uc0dd\uc131\ud55c\ub2e4\n        other_list = list()\n        # start\ubd80\ud130 end \uae4c\uc9c0 \uc2ac\ub77c\uc774\uc2f1\ud55c \ubb38\uc790\uc5f4\uc744 other_list\uc5d0 \uc800\uc7a5\ud55c\ub2e4\n        for i in range(start, end):\n            other_list.append(string_list[i])\n        # \uc2ac\ub77c\uc774\uc2f1\ud55c \ubb38\uc790\uc5f4\uc744 \ubb38\uc790\uc5f4\ub85c \ub2e4\uc2dc \ub9cc\ub4e0\ub2e4\n        other_string = \"\".join(other_list)\n        # \uc2ac\ub77c\uc774\uc2f1\ud55c \ubb38\uc790\uc5f4\uc774 \uc54c\ud30c\ubcb3 \ub9ac\uc2a4\ud2b8\uc758 \ub05d\uc5d0 \uc788\ub2e4\uba74\n        if other_string in alpha_list:\n            # other_string\uc744 \uc5ed\uc21c\uc73c\ub85c \ub9cc\ub4e0\ub2e4\n            other_string = other_string[::-1]\n            # \uc2ac\ub77c\uc774\uc2f1\ud55c \ubb38\uc790\uc5f4\uc774 \uc5ed\uc21c\uc774\uba74\n            if other_string in alpha_list:\n                # \uc2ac\ub77c\uc774\uc2f1\ud55c \ubb38\uc790\uc5f4\uc744 \ub2e4\uc2dc \ubb38\uc790\uc5f4\ub85c \ubc14\uafbc\ub2e4\n                other_string = \"\".join(other_list)\n                # \ubb38\uc790\uc5f4\uc744 \ub9ac\ud134\ud55c\ub2e4\n                return other_string\n            # \uc2ac\ub77c\uc774\uc2f1\ud55c \ubb38\uc790\uc5f4\uc774 \uc5ed\uc21c\uc774\uba74\n            else:\n                # \uac00\ub2a5\ud558\ub2e4\uace0 \uc54c\ub824\uc900\ub2e4\n                print(\"YES\")\n        # \uc2ac\ub77c\uc774\uc2f1\ud55c \ubb38\uc790\uc5f4\uc774 \uc54c\ud30c\ubcb3 \ub9ac\uc2a4\ud2b8\uc758 \ub05d\uc5d0 \uc788\ub2e4\uba74\n        else:\n            # \uac00\ub2a5\ud558\ub2e4\uace0 \uc54c\ub824\uc900\ub2e4\n            print(\"YES\")\n        # \ubc18\ud658\ud55c \ubb38\uc790\uc5f4\uc744 \uc7ac\uadc0\ud568\uc218\ub85c \ud638\ucd9c\ud55c\ub2e4\n        recursion(end, length)\n    # \ubb38\uc790\uc5f4\uc758 \uae38\uc774\ub9cc\ud07c \uc2ac\ub77c\uc774\uc2f1\ud55c \ubb38\uc790\uc5f4\ub4e4\uc744 alpha_list\uc5d0 \uc800\uc7a5\ud55c\ub2e4\n    alpha_list = list(string.ascii_lowercase)\n    # \ubc18\ubcf5\ubb38\uc744 \ud638\ucd9c\ud55c\ub2e4\n    for i in range(1, length + 1):\n        # \uc7ac\uadc0\ud568\uc218\ub97c \ud638\ucd9c\ud55c\ub2e4\n        recursion(i - 1, length)\n    # \uacb0\uacfc\ub97c \ubc18\ud658\ud55c\ub2e4\n    return \"YES\"\n\n\n\n-----Test-----\n\nInputs:\n5\n6\nabccba\n2\ncf\n4\nadfa\n8\nabaazaba\n2\nml\n\nOutputs:\nYES\nNO\nYES\nNO\nNO\n\nExplanation:\nTestcase 1: String \"abccba\" can be changed to \"bcbbcb\" by replacing the letters at positions 2 and 3 to the previous letters of the left side.\n\nTestcase 2: String \"cf\" can't be changed to a palindrome in any way by replacing the letters.\n\nTestcase 3: String \"adfa\" can be changed to \"beeb\".\n\nTestcase 4: String \"abaazaba\" can't be changed to a palindrome in any way.\n\nTestcase 5: String \"ml\" can't be changed to a palindrome in any way"
    },
    {
        "number": 544,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\nYou can write to stdout for debugging purposes, e.g.\nprint(\"this is a debug message\")\n\ndef"
    },
    {
        "number": 544,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 544,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 544,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if len(stdin) == 1 or stdin == stdin[::-1] else 'NO'\n\n\n\ndef"
    },
    {
        "number": 544,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 544,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 544,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if stdin.replace(\"b\", \"a\").replace(\"z\", \"a\").replace(\"a\", \"z\") == stdin.replace(\"b\", \"z\").replace(\"z\", \"a\").replace(\"a\", \"b\") else \"NO\"\n\n\"\"\"\nimport unittest\n\n\ndef"
    },
    {
        "number": 544,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if stdin == stdin[::-1] else 'NO'\n"
    },
    {
        "number": 544,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split(\"\\n\")\n\n    for i in range(1, len(input), 2):\n        n = int(input[i - 1])\n        s = input[i]\n        if n == len(s):\n            res = \"YES\"\n            if not(is_palindrome(s)):\n                res = \"NO\"\n        else:\n            res = \"NO\"\n        print(res)\n\n\ndef"
    },
    {
        "number": 545,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s_1, s_2, t = input(), input(), int(input())\n    return [i for i in s_1 + s_2 if i not in s_1 or i not in s_2 or s_1.count(i)!= s_2.count(i)][0]\n\ndef"
    },
    {
        "number": 545,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, t = map(int, stdin.split())\n    s_1, s_2 = stdin.split()\n\n    s = ''\n\n    for i in range(n):\n        if s_1[i]!= s_2[i]:\n            s += s_1[i]\n            if len(s) == t:\n                return s\n    return -1\n"
    },
    {
        "number": 545,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # \uc544\ub798\ub294 \uc8fc\uc5b4\uc9c4 \uc870\uac74\uc5d0 \ub530\ub77c \ubb38\uc790\uc5f4\uc744 \uc7ac\uad6c\uc131\ud55c\ub2e4.\n    n, t = map(int, stdin.split())\n    s1 = stdin.split()[0]\n    s2 = stdin.split()[1]\n    # \uc544\ub798\uc640 \uac19\uc774 \uc870\uac74\ubb38\uc73c\ub85c \uc54c\ud30c\ubcb3 \uc218\ub97c \uc54c\uc218 \uc788\ub2e4.\n    lst = list(map(lambda x: x[0], filter(lambda x: len(x) == n, [s1, s2])))\n    if len(set(lst)) == 1:\n        if t == 0:\n            return ''\n        else:\n            return s1\n    else:\n        # \uc704\uc758 \uc870\uac74\uc744 \uc801\uc6a9\ud558\uba74 \ub9e8 \uccab\ubc88\uc9f8 \uc54c\ud30c\ubcb3\uc744 \uc81c\uc678\ud55c \ubaa8\ub4e0 \uc54c\ud30c\ubcb3\uc774 \ub2e4\ub974\uac8c \uc815\ud574\uc9c4 \uae38\uc774\uc758 \uc22b\uc790\ub97c \uac00\uc9c4\ub2e4.\n        # \uc774 \ub54c, \uc774\uc9c4 \ud0d0\uc0c9\uc744 \uc218\ud589\ud558\uc5ec \uac00\ub2a5\ud55c \ubc94\uc704\ub97c \uc808\ubc18\uc529 \uc904\uc5ec\ub098\uac00\ub294 \uac83\uc774 \uc791\uc5c5\uc790\ub8cc\uc758 \ud574\ubc95\uc784\uc744 \uc778\uc9c0\ud55c\ub2e4.\n        start = 0\n        end = len(set(lst)) - 1\n        result = 0\n        while start <= end:\n            mid = (start + end) // 2\n            lst = list(map(lambda x: x[mid], filter(lambda x: len(x) == n, [s1, s2])))\n            result = len(set(lst))\n            if result > t:\n                end = mid - 1\n            elif result < t:\n                start = mid + 1\n            elif result == t:\n                # \uc704\uc758 \uc870\uac74\uc744 \uc801\uc6a9\ud558\uba74 \ub9e8 \uccab\ubc88\uc9f8 \uc54c\ud30c\ubcb3\uc744 \uc81c\uc678\ud55c \ubaa8\ub4e0 \uc54c\ud30c\ubcb3\uc774 \uac19\uc740 \uae38\uc774\uc758 \uc22b\uc790\ub97c \uac00\uc9c4\ub2e4.\n                # \uc774 \uacbd\uc6b0\uc5d0\ub294 \uc544\ub798\uc640 \uac19\uc774 \uc7ac\uad6c\uc131\ud55c\ub2e4.\n                return s1[:mid] + s1[mid+1:]\n    return -1\n"
    },
    {
        "number": 545,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 545,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    s_1, s_2 = stdin.split()\n    res = ''\n    for i in range(len(s_1)):\n        for j in range(len(s_2)):\n            if i == j:\n                continue\n            if abs(ord(s_1[i]) - ord(s_2[j])) == t:\n                res = s_1[:i] + s_2[j] + s_1[i:]\n                break\n        if res:\n            break\n    print(res)\n    return res\n"
    },
    {
        "number": 545,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    str_1 = stdin[0: n]\n    str_2 = stdin[n: 2 * n]\n    for i in range(0, n):\n        if (str_1[i]!= str_2[i]) and (str_1[i]!= str_2[i + n]) and (str_2[i]!= str_2[i + n]):\n            return str_1[i] + str_2[i] + str_1[i] + str_2[i + n]\n    return -1\n"
    },
    {
        "number": 545,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n    return ''"
    },
    {
        "number": 545,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    s1, s2 = stdin.split()\n    s3 = set()\n    for x in s1:\n        for y in s2:\n            s3.add(x + y)\n    s3 = list(s3)\n    s3.sort()\n    for i in range(n):\n        if s3[i] == s1[i] + s2[i]:\n            continue\n        else:\n            for j in range(i + 1, n):\n                if s3[j] == s1[i] + s2[j]:\n                    print(s3[j])\n                    return\n    print(-1)"
    },
    {
        "number": 545,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Finds s_3 that is the same length as s_1 and s_2 and with t characters in which strings s_1 and s_3 are different.\n    '''\n\n    # Get length of strings and number of characters that must be different\n    n, t = [int(i) for i in stdin.split(' ')]\n\n    # Get strings\n    s_1, s_2 = [i for i in stdin.split('\\n')][1:]\n\n    # Initialise dict for frequencies\n    freq_1 = {}\n    freq_2 = {}\n\n    # Iterate over s_1 to find frequencies\n    for letter in s_1:\n        freq_1[letter] = freq_1.get(letter, 0) + 1\n    \n    # Iterate over s_2 to find frequencies\n    for letter in s_2:\n        freq_2[letter] = freq_2.get(letter, 0) + 1\n    \n    # Find which frequencies differ by exactly t\n    diff = {k: freq_1.get(k, 0) - freq_2.get(k, 0) for k, v in freq_1.items() if v - freq_2.get(k, 0) == t}\n\n    # Find all keys that match\n    keys = list(diff.keys())\n\n    # Iterate over remaining keys\n    for key in keys:\n\n        # Retrieve values from dict\n        value_1 = freq_1[key]\n        value_2 = freq_2[key]\n\n        # Try to find a match, by adjusting values by t\n        while value_1 - value_2!= t and value_1 + value_2!= t:\n            value_1 -= 1\n            value_2 += 1\n        \n        # If there is a match, then we're done\n        if value_1 - value_2 == t:\n            return key * value_1\n    \n    # If no matches found\n    return -1\n\nsolution(stdin)"
    },
    {
        "number": 545,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    inputs = stdin.split('\\n')\n    n, t = [int(x) for x in inputs[0].split(' ')]\n    s_1 = inputs[1]\n    s_2 = inputs[2]\n    if t == 0:\n        return s_1\n    elif t == n:\n        return s_2\n    elif t == n - 1:\n        if s_1 == s_2[:t]:\n            return s_1 + s_2[t]\n        else:\n            return -1\n    else:\n        if s_1 == s_2[t:t + n - 1]:\n            return s_1 + s_2[t + n - 1]\n        else:\n            return -1\n"
    },
    {
        "number": 546,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    print(s)\n    return \"YES\""
    },
    {
        "number": 546,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    good_letters = stdin[0]\n    bad_letters = \"?\"\n\n    return \"YES\"\n"
    },
    {
        "number": 546,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if stdin == stdin.replace(\"?\", \"\") and \"*\" in stdin else \"NO\"\n"
    },
    {
        "number": 546,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"ab\")\n    \"YES\"\n    >>> solution(\"a?a\")\n    \"NO\"\n    >>> solution(\"a?b\")\n    \"YES\"\n    >>> solution(\"a?b\")\n    \"YES\"\n    >>> solution(\"ab*\")\n    \"YES\"\n    >>> solution(\"a?b*\")\n    \"YES\"\n    >>> solution(\"a?b*\")\n    \"YES\"\n    >>> solution(\"a*b*\")\n    \"YES\"\n    >>> solution(\"a*b*c*\")\n    \"YES\"\n    >>> solution(\"a*?b*\")\n    \"NO\"\n    >>> solution(\"a*b*?\")\n    \"NO\"\n    >>> solution(\"a?b*?\")\n    \"NO\"\n    >>> solution(\"a*b*?\")\n    \"NO\"\n    >>> solution(\"a*b*?c*d*\")\n    \"NO\"\n    \"\"\"\n    pattern = stdin[0]\n    good_letters = stdin[1]\n    n = int(stdin[2])\n    for _ in range(n):\n        string = stdin[3 + _]\n        result = []\n        for index in range(len(string)):\n            if pattern[index] == \"?\":\n                for letter in good_letters:\n                    result.append(string[index])\n            elif pattern[index] == \"*\":\n                for index2 in range(index, len(pattern)):\n                    if pattern[index2] == \"*\":\n                        for letter in good_letters:\n                            result.append(letter)\n                    elif pattern[index2]!= \"?\":\n                        for letter in good_letters:\n                            result.append(string[index:index2])\n                    else:\n                        break\n            else:\n                result.append(string[index])\n        if \"\".join(result) == string:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n"
    },
    {
        "number": 546,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    query = stdin.split('\\n')\n    query = query[:-1]\n    stdin = query[0]\n    pattern = query[1]\n    n = int(query[2])\n\n    def solution2(pattern: str, n: int, query: List[str]) -> List[str]:\n        for i in range(n):\n            query[i] = query[i].replace('*', 'a')\n            if query[i].count('a') > 1:\n                query[i] = query[i].replace('a', '')\n                \n            if len(query[i]) == 0:\n                continue\n\n            if query[i].count('?')!= pattern.count('?'):\n                print('NO')\n                continue\n            \n            for p in query[i]:\n                if p == '?':\n                    continue\n                else:\n                    if p in pattern:\n                        continue\n                    else:\n                        print('NO')\n                        break\n            else:\n                print('YES')\n    \n    solution2(pattern, n, query)\n"
    },
    {
        "number": 546,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    bad_chars: str = stdin[0]\n    good_chars: str = stdin[1]\n    pattern: str = stdin[2]\n    n: int = int(stdin[3])\n    query: list = []\n    for _ in range(n):\n        query.append(stdin[4 + _])\n    ans: list = []\n    for i in range(len(query)):\n        for j in range(len(query[i])):\n            if query[i][j] == '?':\n                for k in range(len(bad_chars)):\n                    if not (bad_chars[k] in query[i]):\n                        ans.append('NO')\n                        break\n                    elif j == len(query[i]) - 1:\n                        ans.append('YES')\n            elif query[i][j] == '*':\n                for k in range(len(bad_chars)):\n                    if not (bad_chars[k] in query[i]):\n                        ans.append('YES')\n                        break\n                    elif j == len(query[i]) - 1:\n                        ans.append('NO')\n            elif query[i][j]!= good_chars[j]:\n                ans.append('NO')\n                break\n    return \"\\n\".join(ans)\n"
    },
    {
        "number": 546,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    query: str = stdin\n    pat: str = \"*\" + stdin + \"*\"\n    return \"YES\" if (query.count(\"*\") > 1) or (pat.count(\"?\") > 1) else \"NO\"\n\"\"\"\n\n\n\ndef"
    },
    {
        "number": 546,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    stdout = stdin\n    return stdout"
    },
    {
        "number": 546,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    read input\n    iterate input and call validate function\n    return validations\n    \"\"\"\n    input_string = stdin.rstrip()\n    regex_string = stdin.split(\"\\n\")[1]\n    query_string = stdin.split(\"\\n\")[2:]\n\n    regex_dict = build_regex_dict(regex_string)\n    validations = []\n\n    for string in query_string:\n        validation = validate(string, regex_dict)\n        validations.append(validation)\n\n    return \"\\n\".join(validations)\n\n\ndef"
    },
    {
        "number": 546,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if re.match(r'^[a-z]*?[A-Z]*?[a-z]*?$', stdin) and len(stdin.split('*')) == 1 else 'NO'"
    },
    {
        "number": 547,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    passwords = stdin.splitlines()[: -1]\n    password = stdin.splitlines()[-1]\n    min_time = len(password) + 1\n    max_time = len(password) + len(passwords)\n    for i in range(len(passwords) - 1):\n        if len(passwords[i]) < len(password) and len(passwords[i]) < len(passwords[i + 1]):\n            min_time = min(min_time, 2 + len(passwords[i]))\n        elif len(passwords[i]) < len(password) and len(passwords[i]) == len(passwords[i + 1]):\n            min_time = min(min_time, 2 + len(passwords[i]))\n        elif len(passwords[i]) == len(password) and len(passwords[i + 1]) < len(passwords[i]):\n            max_time = max(max_time, 5 + len(passwords[i + 1]))\n        else:\n            min_time = min(min_time, 5 + len(passwords[i]))\n    return str(min_time) +'' + str(max_time)\n"
    },
    {
        "number": 547,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    passwords = stdin.split('\\n')\n    inputs = list(map(lambda x: x.split(' '), passwords))\n    passwords = [p for p in zip(*inputs)]\n    passwords = list(map(lambda x: list(x), passwords))\n    right_password = passwords[-1][0]\n    time = 0\n    for i, p in enumerate(passwords[0]):\n        if p == right_password:\n            time += i + 1\n        else:\n            time += i\n    return str(time) +'' + str(time + 5 * len(passwords[0]))\n"
    },
    {
        "number": 547,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split('\\n')[0].split()]\n    lst = stdin.split('\\n')[1:-1]\n\n    f = {i: 0 for i in range(n)}\n    counter = 0\n    for i in lst:\n        if f[counter] == 0:\n            f[counter] = time.time()\n        elif f[counter] + k <= time.time():\n            counter += 1\n            f[counter] = time.time()\n        if i == stdin.split('\\n')[-1]:\n            counter += 1\n            f[counter] = time.time()\n\n    t = sorted(f.values(), reverse=True)\n    return f'{t[0]} {t[-1]}'\n"
    },
    {
        "number": 547,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    n, k = [int(x) for x in stdin.split('\\n')[0].split()]\n    numbers = [int(x) for x in stdin.split('\\n')[1:]]\n\n    # find max number of tries\n    tries = (n-1) // (k + 1)\n    tries += 1 if (n-1) % (k + 1) else 0\n    numbers_all = [numbers[i:i + k + 1] for i in range(0, len(numbers), k + 1)]\n\n    # sort by number of tries\n    numbers_all.sort(key=lambda x: len(x))\n\n    # best case\n    best_case = 0\n    for i in range(1, len(numbers_all)):\n        best_case += len(numbers_all[i])\n        if len(numbers_all[i])!= len(numbers_all[i-1]):\n            best_case += 1\n\n    # worst case\n    worst_case = sum([len(x) for x in numbers_all])\n    worst_case += 1 if len(numbers_all[0]) > len(numbers_all[-1]) else 0\n    worst_case += len(numbers_all[-1])\n    worst_case += (len(numbers_all) - 1) * k\n\n    return str(best_case) +'' + str(worst_case)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 547,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5 2\n   ... cba\n   ... abc\n   ... bb1\n   ... abC\n   ... ABC\n   ... abc\n   ... ''')\n    '1 15'\n    >>> solution('''4 100\n   ... 11\n   ... 22\n   ... 1\n   ... 2\n   ... 22\n   ... ''')\n    '3 4'\n    \"\"\"\n    n, k = map(int, stdin.splitlines()[0].split())\n    d = {}\n    for line in stdin.splitlines()[1:n + 1]:\n        if line not in d:\n            d[line] = 1\n    queue = [(len(line), line) for line in d]\n    heapq.heapify(queue)\n    best, worst = 0, 0\n    for i in range(k):\n        _, line = heapq.heappop(queue)\n        if line == stdin.splitlines()[-1]:\n            return str(i + 1) +'' + str(5 * i + 1)\n        worst += 1\n        heapq.heappush(queue, (worst, line))\n\n    # We now know that line was not the last line\n    _, last_line = heapq.heappop(queue)\n    best += (worst + 1) // 2 + 1\n    heapq.heappush(queue, (best, last_line))\n    worst = 0\n    for i in range(k):\n        _, line = heapq.heappop(queue)\n        if line!= stdin.splitlines()[-1]:\n            worst += 1\n            heapq.heappush(queue, (worst, line))\n\n    return str(i + 1) +'' + str(5 * i + 1)\n"
    },
    {
        "number": 547,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    words = []\n    for _ in range(n):\n        words.append(stdin.readline().strip())\n    words.sort(key=lambda word: len(word))\n    print(words)\n    word = stdin.readline().strip()\n\n    i = 0\n    j = 0\n    count = 0\n    while j < len(words):\n        word_len = len(words[j])\n        if word_len <= k:\n            k -= word_len\n            j += 1\n            count += 1\n        else:\n            count += k\n            break\n    if j < len(words):\n        count += len(words[j:]) * k\n    print(count)\n\n    return \"\"\n"
    },
    {
        "number": 547,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split(' ')]\n    passwords = [stdin.split('\\n')[i].strip() for i in range(n)]\n    password = stdin.split('\\n')[-1].strip()\n    same_length_passwords = sorted([i for i in passwords if len(i) == len(password)])\n    count = 0\n    for i in same_length_passwords:\n        if i == password:\n            count += 1\n        else:\n            count += 1\n            break\n    count += k\n    if count % 2 == 0:\n        print(count // 2, k // 2)\n    else:\n        print(count // 2 + 1, k // 2)\n\n\ndef"
    },
    {
        "number": 547,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    passwords = stdin.splitlines()\n    correct_pass = passwords[-1]\n    passwords = passwords[:-1]\n\n    if len(passwords) == 0:\n        return \"1\" + \" \" + \"0\"\n\n    n = len(passwords)\n    k = int(passwords[0].split()[1])\n\n    possible_pw_length = [1]\n    for i in range(1, k+1):\n        possible_pw_length.append(i)\n\n    min_time_best_case = (k+1) * n\n    min_time_worst_case = (k+1) * n\n    for pw in passwords:\n        possible_pw_length = sorted(possible_pw_length, key=lambda x: len(pw))\n\n        possible_pw_length = possible_pw_length[:k+1]\n        possible_pw_length.reverse()\n        possible_pw_length = possible_pw_length[1:]\n\n        time_best_case = 0\n        time_worst_case = 0\n        for i in range(len(possible_pw_length)):\n            time_best_case += abs(i-k) * int(possible_pw_length[i])\n            time_worst_case += abs(i-k) * int(possible_pw_length[i])\n\n        time_best_case += len(possible_pw_length) * len(pw)\n        time_worst_case += len(possible_pw_length) * len(pw)\n\n        if correct_pass == pw:\n            time_best_case -= len(pw)\n            time_worst_case -= len(pw)\n\n        min_time_best_case = min(min_time_best_case, time_best_case)\n        min_time_worst_case = min(min_time_worst_case, time_worst_case)\n\n    return str(min_time_best_case) + \" \" + str(min_time_worst_case)\n"
    },
    {
        "number": 547,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    passwords = [input() for _ in range(n)]\n    p = [0] * 26\n    for pw in passwords:\n        l = len(pw)\n        if p[l] == 0:\n            p[l] = pw\n    pw = input()\n    count = 1\n    while pw not in passwords:\n        count += 1\n        if count > k:\n            print(0)\n            return\n        if p[len(pw)] == 0:\n            for i in range(len(pw)):\n                if p[len(pw) - i - 1] == 0:\n                    p[len(pw) - i - 1] = pw[len(pw) - i - 1]\n                    break\n    print(count, count + 5 * (count - 1))\n"
    },
    {
        "number": 547,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = [set() for _ in range(n)]\n    for _ in range(n):\n        a[_] = {input()}\n    a[0] = {stdin}\n    for _ in range(n - 1):\n        a[0] = a[0] | a[_]\n        a[_] = {stdin}\n    a = sorted(a, key=len)\n    for _ in range(k):\n        a[0] = {stdin}\n        for _ in range(n - 1):\n            a[_] = a[0] | a[_]\n            a[0] = a[0] | a[_]\n    return str(len(a[0]))\n\ndef"
    },
    {
        "number": 548,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n = int(stdin.readline())\n    stdin = stdin.readline()\n    arr = [int(n) for n in stdin.split(' ')]\n    first = set()\n    second = set()\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            second.add(arr[i])\n        else:\n            first.add(arr[i])\n    if len(first) > len(second):\n        return 'First'\n    elif len(first) < len(second):\n        return 'Second'\n    else:\n        return 'Draw'\n"
    },
    {
        "number": 548,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split(' ')))\n    if n % 2 == 0:\n        if sum(a) % 2!= 0:\n            return \"First\"\n        else:\n            return \"Second\"\n    else:\n        if sum(a) % 2 == 0:\n            return \"First\"\n        else:\n            return \"Second\"\n\n\n\ndef"
    },
    {
        "number": 548,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\nn = stdin\nn = list(map(int, n.split(' ')))\n\nn.sort()\nsum1 = sum(n)"
    },
    {
        "number": 548,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    if sum(a) % 2 == 0:\n        print(\"Second\")\n    else:\n        print(\"First\")\n\nsolution(input())\n\n\n\n-----Best Solve-----\ndef"
    },
    {
        "number": 548,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = [int(num) for num in stdin.readline().strip().split(' ')]\n    return 'First' if sum(arr) % 2 == 0 else 'Second'\n"
    },
    {
        "number": 548,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def solve(n, nums):\n        # your code here\n        return \"First\" if sum(nums) % 2 == 1 else \"Second\"\n\n    n = int(stdin.readline())\n    nums = [int(x) for x in stdin.readline().split()]\n    print(solve(n, nums))\n"
    },
    {
        "number": 548,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    l = list(map(int, stdin.split(\" \")))\n    s1 = 0\n    s2 = 0\n    for i in range(n):\n        s1 += l[i]\n        if s1 % 2!= 0:\n            l.pop(i)\n            s2 += l[i]\n            break\n        if i == n - 1:\n            s2 = -1\n    if s1 % 2 == 0:\n        s2 = -1\n    if s2 == -1:\n        return \"Second\"\n    else:\n        return \"First\"\n\n\ndef"
    },
    {
        "number": 548,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    arr = list(map(int, stdin.split('\\n')[0].split(' ')))\n    arr = sorted(arr)\n    result = 'First'\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            result = 'Second'\n            break\n        elif i == 0 and arr[i] > 0:\n            result = 'Second'\n            break\n        elif i == 0 and arr[i] == 0:\n            result = 'First'\n            break\n        else:\n            pass\n    return result\n"
    },
    {
        "number": 548,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    s = 0\n    for i in range(n):\n        if i % 2 == 0:\n            if a[i] % 2 == 0:\n                s += a[i]\n        else:\n            if a[i] % 2!= 0:\n                s += a[i]\n    if s % 2!= 0:\n        print(\"First\")\n    else:\n        print(\"Second\")\n\n\ndef"
    },
    {
        "number": 548,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split('\\n')[1].split()))\n    if n == 1:\n        print('First')\n    elif n % 2 == 0:\n        print('First')\n    elif n == 2:\n        print('Second')\n    else:\n        print('First')"
    },
    {
        "number": 549,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join(map(str, min_difference_pixels(int(stdin))))\n\n\ndef"
    },
    {
        "number": 549,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = stdin\n    #print(n)\n    n = int(n)\n    #print(n)\n    \n    min = n\n    row = 1\n    col = 1\n    while n > 0:\n        if row < col and row * col < n:\n            row = row + 1\n        else:\n            col = col + 1\n        n = n - row * col\n        #print(n)\n    print(row,col)\n    \n    \n    return '1 2'\n    \n"
    },
    {
        "number": 549,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(n+1):\n        for j in range(n+1):\n            if i*j == n:\n                print(i, j)\n                return\nsolution(input())\n\n\"\"\"\n\ndef"
    },
    {
        "number": 549,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    return str(a) + \" \" + str(b)\n"
    },
    {
        "number": 549,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)\n\"\"\"\n\n\ndef"
    },
    {
        "number": 549,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 549,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split('\\n')\n    print(math.ceil(math.sqrt(int(stdin[0]))))\n    print(math.ceil(math.sqrt(int(stdin[0]))))\n    return ''\n\nprint(solution(input()))\n\n\"\"\"\n\nimport math\nfrom typing import List\n\n\ndef"
    },
    {
        "number": 549,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline())\n    if N > 10 ** 6:\n        return 'Too many pixels. Try again.'\n    # first, put everything in the smaller triangle\n    best = N // 2\n    # if the second triangle is larger than the first, we just swap\n    if N // 2 < N:\n        best = N - N // 2\n    return f'{N // 2} {best}'\n"
    },
    {
        "number": 549,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 549,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = 1\n    while a * a < n:\n        if n % a == 0:\n            b = n // a\n            return str(a) +'' + str(b)\n\n        a += 1\n    return str(n) +'' + str(n)"
    },
    {
        "number": 550,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"La0\")\n    'No'\n    >>> solution(\"0Ril\")\n    'No'\n    >>> solution(\"0Lil\")\n    'Yes'\n    >>> solution(\"abc\")\n    'No'\n    >>> solution(\"0A\")\n    'Yes'\n    >>> solution(\"aaa\")\n    'No'\n    >>> solution(\"Ll0\")\n    'Yes'\n    \"\"\"\n    import re\n    import string\n    from collections import Counter\n    stdin = stdin.lower()\n    p = re.compile(r\"([a-zA-Z0-9_]+)\")\n    stdin = re.findall(p, stdin)\n    if len(stdin) > 0:\n        if stdin[0] == \"\":\n            return \"Yes\"\n        else:\n            if len(stdin[0]) > 4 or len(stdin) > 1:\n                return \"No\"\n            else:\n                cnt = Counter(stdin[0])\n                for k, v in cnt.items():\n                    if k in stdin[0] and v > len(stdin[0]):\n                        return \"No\"\n                    else:\n                        if k in string.ascii_lowercase and v < len(stdin[0]):\n                            return \"No\"\n                        elif k in string.ascii_uppercase and v < len(stdin[0]):\n                            return \"No\"\n                        elif k == \"o\" and v < len(stdin[0]):\n                            return \"No\"\n                        elif k == \"0\" and v < len(stdin[0]):\n                            return \"No\"\n                        else:\n                            return \"Yes\""
    },
    {
        "number": 550,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 550,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 550,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\n'''\n\ndef"
    },
    {
        "number": 550,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"0Cd\")\n    'Yes'\n    >>> solution(\"0_d\")\n    'Yes'\n    >>> solution(\"0_d1\")\n    'No'\n    >>> solution(\"0_d\")\n    'No'\n    >>> solution(\"_0\")\n    'Yes'\n    >>> solution(\"__0\")\n    'No'\n    >>> solution(\"0_0\")\n    'No'\n    \"\"\"\n    lst = stdin.split(\"\\n\")\n    lst_new = [i for i in lst if i!= \"\"]\n    if len(lst_new) == 1:\n        return \"No\"\n\n    lst_new = [i.lower() for i in lst_new]\n    for i in lst_new:\n        if len(i)!= len(lst_new[0]):\n            return \"No\"\n    lst_new = [i for i in lst_new if i!= \"\"]\n    for i in lst_new:\n        if \"0\" in i:\n            return \"No\"\n    set_ = set()\n    for i in lst_new:\n        set_.add(\"\".join(set(i)))\n    if len(set_)!= len(lst_new):\n        return \"No\"\n    for i in set_:\n        for j in set_:\n            if i[:] == j[:]:\n                return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 550,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # you can use a hashmap to store the logins\n    \n    # or you can use a set\n    #   set(stdin.lower()).add(login.lower())\n    \n    # or a set of sets (since set intersection is the same as set union)\n    #   s1 = set(stdin.lower())\n    #   s2 = set()\n    #   for l in stdin.lower():\n    #       if l == \"o\":\n    #           s2.add(\"0\")\n    #       elif l == \"l\":\n    #           s2.add(\"I\")\n    #       elif l == \"1\":\n    #           s2.add(\"L\")\n    #       else:\n    #           s2.add(l)\n    #   s3 = set(s1)\n    #   return \"Yes\" if s2.intersection(s3) else \"No\"\n\n    # solution 2 using a list of sets\n    logins = []\n    for i in stdin.split(\"\\n\"):\n        s = set(i.lower())\n        if len(s) == 1:\n            return \"No\"\n        else:\n            logins.append(s)\n    \n    if any(len(i) == 1 for i in logins):\n        return \"No\"\n    \n    for i in logins:\n        if i == set(\"0\") or i == set(\"1\") or i == set(\"l\") or i == set(\"i\"):\n            continue\n        s = set()\n        s.add(\"1\")\n        s.add(\"0\")\n        s.add(\"l\")\n        s.add(\"o\")\n        if i.intersection(s):\n            return \"No\"\n    return \"Yes\"\n"
    },
    {
        "number": 550,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution of Codewars Kata \"New login generation\".\n\n    This solution uses the fact that the numbers of latin letters are equally distributed,\n    i.e. 2 ^ 52 is the largest number that can be represented.\n    \"\"\"\n    from string import ascii_letters\n    import random\n    import string\n    letters = ascii_letters + '_'\n    num = random.randint(0, 2 ** 52 - 1)\n    while True:\n        res = ''.join([random.choice(letters) for _ in range(len(stdin))])\n        if res not in stdin and res!= stdin and res[0].islower():\n            break\n    return res\n"
    },
    {
        "number": 550,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(2)\n    'Yes'\n    >>> solution(3)\n    'No'\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    l = [stdin.split('\\n')[i][0] for i in range(1, n + 1)]\n    s = stdin.split('\\n')[1]\n\n    for i in range(n):\n        if len(l[i])!= len(s):\n            continue\n        for j in range(len(l[i])):\n            if s[j]!= l[i][j]:\n                break\n            if j == len(l[i]) - 1:\n                if l[i] == s:\n                    return 'No'\n        if l[i] == s:\n            return 'No'\n    return 'Yes'\n"
    },
    {
        "number": 550,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution to the problem.\n    \"\"\"\n    # stdin = stdin.strip('\\n')\n    logins = set()\n    logins_list = []\n    # logins = set(stdin.split('\\n')[1:])\n    # logins = set([x.split() for x in stdin.split('\\n')[1:]])\n    logins = set(stdin.split('\\n')[1:])\n    if len(logins) >= 1:\n        logins_list = [list(x) for x in logins]\n        for i, l in enumerate(logins_list):\n            logins_list[i] = [x.replace('_', 'a') for x in l]\n        logins_list = set([''.join(x) for x in logins_list])\n    stdin = stdin.split('\\n')[0]\n    stdin = stdin.replace('_', 'a')\n    stdin = [x.replace('_', 'a') for x in stdin]\n    for x in stdin:\n        if x in logins_list:\n            return \"No\"\n    return \"Yes\"\n    # code goes here\n    return str(solution(stdin))"
    },
    {
        "number": 550,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    logins = [stdin[i] for i in range(n)]\n    for i in range(len(logins)):\n        logins[i] = logins[i].lower()\n    for i in range(len(logins)):\n        if logins[i] == '0':\n            logins[i] = 'l'\n        elif logins[i] == 'o':\n            logins[i] = '1'\n    for i in range(len(logins)):\n        if logins[i] == 'l':\n            logins[i] = 'i'\n        elif logins[i] == 'i':\n            logins[i] = 'o'\n        elif logins[i] == '1':\n            logins[i] = '0'\n    for i in range(len(logins)):\n        if logins[i] == '0':\n            logins[i] = 'o'\n    if len(set(logins)) < len(logins):\n        return 'No'\n    return 'Yes'\n\ndef"
    },
    {
        "number": 551,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\"Yes\nNo\"\"\"\n\"\"\"\ndef"
    },
    {
        "number": 551,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    if (len(stdin) == 1):\n        return \"Yes\"\n\n    if (len(stdin) == 2):\n        return \"No\"\n    \n    # number of points\n    n = int(stdin.split(\"\\n\")[0])\n    \n    # coordinates of points\n    points = stdin.split(\"\\n\")[1].split(\" \")\n    points = [int(x) for x in points]\n    points.sort()\n    \n    # unique y's\n    y_set = set()\n    for x in points:\n        y_set.add(x)\n    y_set = list(y_set)\n    y_set.sort()\n    \n    # for each x, there should be at least one y\n    # one y for each x, and it has to be unique\n    for x in points:\n        y_set.remove(x)\n        if (len(y_set) == 0):\n            return \"No\"\n        y_set.sort()\n    \n    # points + x = y should be true for each y\n    # left to right check\n    for i in range(len(points) - 1):\n        for j in range(i + 1, len(points)):\n            if (y_set[i] + points[i]!= y_set[j]):\n                return \"No\"\n    \n    # right to left check\n    for i in range(len(points) - 1):\n        for j in range(i + 1, len(points)):\n            if (y_set[i] + points[i]!= y_set[j]):\n                return \"No\"\n    \n    # for each y, x + y = y should be true\n    # top to bottom check\n    for y in y_set:\n        for i in range(len(points) - 1):\n            for j in range(i + 1, len(points)):\n                if (y_set[i] + y!= y_set[j]):\n                    return \"No\"\n    \n    # bottom to top check\n    for y in y_set:\n        for i in range(len(points) - 1):\n            for j in range(i + 1, len(points)):\n                if (y_set[i] + y!= y_set[j]):\n                    return \"No\"\n    \n    return \"Yes\"\n"
    },
    {
        "number": 551,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 551,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('5\\n7 5 8 6 9\\n')\n    'Yes'\n    >>> solution('5\\n-1 -2 0 0 -5\\n')\n    'No'\n    '''\n    # We'll use a list of tuples to represent the points.\n    # Each tuple will be a pair of integers (y, x)\n    # and y will be in ascending order.\n    points = []\n    n = int(stdin.readline())\n    for _ in range(n):\n        x, y = [int(s) for s in stdin.readline().strip().split(' ')]\n        points.append((y, x))\n    # Sort the points by y-coordinate.\n    points.sort(key=lambda p: p[0])\n    # To be able to use a hashset,\n    # we need to convert the points to a tuple.\n    points = tuple(points)\n\n    # Get the point with the smallest y.\n    # We'll assume that this point is the\n    # one we're working with.\n    min_y, min_x = points[0]\n    # We'll build a set of lines that start with this point.\n    # We'll add each new point we encounter to this set.\n    lines = {(min_y, min_x)}\n\n    # Now we'll look at each of the other points\n    # and for each of them, if they fall on the same line\n    # as our current line, we'll add them to the set of points\n    # on that line.\n    for y, x in points[1:]:\n        # If our point falls on the same line as the last one,\n        # we don't need to do anything.\n        if (y, x) in lines:\n            continue\n        # Otherwise, we'll build a line that goes through the last point\n        # and our new point.\n        # We'll add the new point to our set of lines.\n        # We'll use a set so that we can find out if a line is already in the set.\n        lines_to_add = set()\n        for line in lines:\n            # If the new point falls on the same line as the last point\n            # we'll add it to our set of lines.\n            if y - line[0] == x - line[1]:\n                lines_to_add.add((y, x))\n        # Now we'll update our set of lines with the new line.\n        # We don't need to update the last point because it's guaranteed\n        # to be in the set.\n        lines = lines | lines_to_add\n\n    # The second condition is that we must have at least one point on every line.\n    # We can test this by seeing if our lines set is a superset of the original\n    # set of lines.\n    if lines >= set(points):\n        return 'Yes'\n    return 'No'\n"
    },
    {
        "number": 551,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    count_points = int(stdin.strip().split()[0])\n    points = [int(y) for y in stdin.strip().split()[1:]]\n\n    lines_vertical = set()\n    lines_horizontal = set()\n    for i in range(count_points - 1):\n        for j in range(i + 1, count_points):\n            lines_vertical.add((points[i], points[j]))\n            lines_horizontal.add((points[j], points[i]))\n\n    return \"Yes\" if len(lines_horizontal) == len(lines_vertical) == count_points else \"No\"\n"
    },
    {
        "number": 551,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 551,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 551,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin.split('\\n')[0])\n    y = list(map(int, stdin.split('\\n')[1].split()))\n    s = 0\n    for i in range(x-1):\n        s = max(s, y[i+1] - y[i])\n    return 'Yes' if s <= 2 else 'No'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 551,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 551,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 552,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n  # write your code in Python 3.6\n  n, m = map(int, stdin.readline().split())\n  a = stdin.readline()\n  b = stdin.readline()\n  s = stdin.readline()\n\n  return ''\n"
    },
    {
        "number": 552,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\n'''\n\n\ndef"
    },
    {
        "number": 552,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, s = stdin.split()\n    a, b = map(lambda s: list(s), (a, b))\n    s = list(s)\n    count = 0\n    for i in range(len(a)):\n        for j in range(len(b)):\n            if a[i] == b[j] and (i + 1) in range(len(a)) and (j + 1) in range(len(b)):\n                count += 1\n    return count\n\ndef"
    },
    {
        "number": 552,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\nHow to count the number of ways to choose the segments?\nLet's count the number of intersections of the segments. If there is no intersection, the number of ways to choose the segments is 0.\n\nFor the first example, we can see that all the segments intersect in the following positions:\n\n  $[2, 2]$ and $[2, 5]$;  $[2, 2]$ and $[1, 2]$;  $[2, 2]$ and $[5, 6]$;  $[2, 2]$ and $[5, 5]$;\n  $[2, 5]$ and $[1, 2]$;  $[2, 5]$ and $[5, 6]$;  $[1, 2]$ and $[5, 5]$;  $[5, 6]$ and $[3, 5]$;\n  $[5, 5]$ and $[5, 6]$;  $[3, 5]$ and $[5, 6]$;\n\nSo, the number of ways to choose the segments is equal to the number of intersections (counting only the ones that are not empty).\n\nFor the second example, we can see that all the segments intersect in the following positions:\n\n  $[2, 4]$ and $[2, 5]$;  $[2, 4]$ and $[2, 4]$;  $[2, 4]$ and $[2, 5]$;  $[2, 4]$ and $[1, 2]$;\n  $[2, 5]$ and $[1, 2]$;  $[2, 5]$ and $[5, 6]$;  $[5, 6]$ and $[2, 5]$;  $[1, 2]$ and $[5, 6]$;\n  $[5, 6]$ and $[3, 5]$;  $[5, 6]$ and $[5, 6]$;\n\nSo, the number of ways to choose the segments is equal to the number of intersections (counting only the ones that are not empty).\n\nFor the third example, we can see that there is only one pair of segments that intersect in one position, so the number of ways to choose the segments is equal to the number of intersections (counting only the ones that are not empty).\n\n\"\"\"\n\na, b, s = (\n    int(input().strip())\n    for _ in range(3)\n)"
    },
    {
        "number": 552,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n'''\n\ndef"
    },
    {
        "number": 552,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 552,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    a = stdin[:n]\n    b = stdin[n:]\n    res = 0\n    for i in range(n):\n        for j in range(n):\n            if i <= j:\n                if b[i:j+1] == a[i:j+1]:\n                    res += 1\n    return res\n\ndef"
    },
    {
        "number": 552,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\nn, m = map(int, input().split())\na = input()\nb = input()\ns = input()\n\ncnt = 0\nfor i in range(n - m + 1):\n    if a[i:i + m] == b[0:m]:\n        cnt += 1\nprint(cnt)\n"
    },
    {
        "number": 552,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split()]\n    return f(a, b)\n\ndef"
    },
    {
        "number": 552,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\ndef"
    },
    {
        "number": 553,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.split()\nprint(solution(input()))"
    },
    {
        "number": 553,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 553,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return \"\""
    },
    {
        "number": 553,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin\n"
    },
    {
        "number": 553,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 553,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(stdin))\n\n\"\"\"\n"
    },
    {
        "number": 553,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return 1\n\ndef"
    },
    {
        "number": 553,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\" Your solution goes here \"\"\"\n\n    return stdin\n\n\ndef"
    },
    {
        "number": 553,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 553,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\nn, m = [int(x) for x in stdin.split(' ')]\na = [int(x) for x in stdin.split(' ')]\nm = int(m)"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def find_max_happy_sum(a, n):\n        # your code here\n        #\n        #\n        # return result\n        pass\n\n    if __name__ == '__main__':\n        fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n        nm = input().split()\n\n        n = int(nm[0])\n\n        m = int(nm[1])\n\n        arr = list(map(int, input().rstrip().split()))\n\n        brr = []\n\n        for _ in range(m):\n            brr_item = input().split()\n            brr_item = [int(brr_item[0]), int(brr_item[1])]\n            brr.append(brr_item)\n\n        result = find_max_happy_sum(arr, n)\n\n        fptr.write(str(result) + '\\n')\n\n        fptr.close()\n\n\nSolution()\n\nprint(solution('test_input_3.txt'))\n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Gets a subarrays list and returns the sum of the maximum achievable happiness\n    \"\"\"\n    pass\n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find max possible value added to happiness\"\"\"\n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the maximum value of happiness\n    \"\"\"\n    \n    return ''\n"
    },
    {
        "number": 554,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    number = int(stdin)\n    number_list = list(str(number))\n    temp = [str(9 - int(number_list[i])) if number_list[i]!= '9' else '9' for i in range(len(number_list))]\n    number_list = temp\n    print(int(''.join(number_list)))\n    return ''"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin\n    i = 0\n    while x > 0:\n        if x % 10 == 9:\n            x = x // 10\n        else:\n            x = x // 10 + x % 10 * 10\n            break\n    return x\n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    x = x // 10 if x % 10 == 0 else x\n    x = x - 1 if x % 9 == 0 else x\n    x = x // 9 if x % 9 == 0 else x\n    x = x // 8 if x % 8 == 0 else x\n    x = x // 7 if x % 7 == 0 else x\n    x = x // 6 if x % 6 == 0 else x\n    x = x // 5 if x % 5 == 0 else x\n    x = x // 4 if x % 4 == 0 else x\n    x = x // 3 if x % 3 == 0 else x\n    x = x // 2 if x % 2 == 0 else x\n    x = x // 1 if x % 1 == 0 else x\n    return str(x)\n\n\ndef"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin\n    x = list(x)\n    while x[0] == \"0\":\n        x.pop(0)\n    x = \"\".join(x)\n    return x"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 10:\n        return n\n    n, rem = divmod(n, 10)\n    n += rem\n    rem = n % 10\n    n //= 10\n    while rem!= 0 or n < 10:\n        rem, n = n % 10, n // 10\n        n += rem\n        rem = n % 10\n        n //= 10\n    return n\nprint(solution(input()))"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    \n    while x > 0:\n        if x % 10 == 0:\n            x //= 10\n        else:\n            break\n    \n    x = x * 10\n    \n    while x > 0:\n        if x % 10 == 0:\n            x //= 10\n        else:\n            break\n    \n    x = x * 10\n    \n    print(x)\n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\"\n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    while x < 10 ** 18:\n        if x % 10 == 0:\n            x //= 10\n        else:\n            break\n    if x == 10 ** 18:\n        print(10 ** 18 - 1)\n    else:\n        print(x)\n"
    },
    {
        "number": 555,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    digits = []\n    while x:\n        digits.append(x % 10)\n        x //= 10\n    digits = digits[::-1]\n    #print(digits)\n    result = 0\n    for i in range(len(digits)):\n        if digits[i]!= 9:\n            result += digits[i] * 10**i\n        else:\n            result += 10**(i)\n    return str(result)\n\n\nsolution(input())\n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l, r, k = [int(x) for x in stdin.split()]\n    k = 10**9\n    result = []\n    for i in range(l, r + 1):\n        if pow(k, i) < r:\n            result.append(pow(k, i))\n        else:\n            break\n    return str(result).replace(\"'\", \"\")\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    l, r, k = map(int, stdin.split())\n    if k <= r:\n        return \" \".join(map(str, range(l, r + 1, k)))\n    else:\n        return \"-1\"\n    pass\n\n'''\n\ndef"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    l, r, k = map(int, stdin.split())\n    if k >= r:\n        return \"-1\"\n    res = []\n    def expose(n):\n        nonlocal res\n        if n > r:\n            return\n        if n == r:\n            res.append(n)\n            return\n        if n < l:\n            return\n        res.append(n)\n        expose(n * n)\n    expose(k)\n    return \" \".join(map(str, res))\n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    l, r, k = [int(i) for i in stdin.split(\" \")]\n    def pow(num: int, n: int) -> int:\n        if n == 0:\n            return 1\n        return num * pow(num, n - 1)\n    \n    start = pow(k, l - 1) if l > 1 else 0\n    end = pow(k, r) if r < 10**9 else 10**9\n    if start >= end:\n        return \"-1\"\n    return \" \".join([str(pow(k, i)) for i in range(l - 1, r)])\n    '''\n    l, r, k = [int(i) for i in stdin.split(\" \")]\n    a = [2 ** i for i in range(0, 36)]\n    \n    if r >= max(a) or l >= max(a):\n        return \"-1\"\n    \n    for i in range(36):\n        if a[i] <= l and a[i] >= r:\n            b = [str(j) for j in a[i:]]\n            return \" \".join(b)\n        \n    return \"-1\"\n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def solve(n: int) -> int:\n        p = 1\n        while p <= n:\n            yield p\n            p *= 2\n\n    l, r, k = map(int, stdin.split(' '))\n    pows = {k}\n    for n in solve(r):\n        if n in pows:\n            pows.add(n * k)\n\n    for n in solve(l):\n        if n in pows:\n            break\n    else:\n        print(-1)\n        return\n\n    for p in pows:\n        print(p)\n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    l, r, k = map(int, stdin.split())\n    result = []\n    if r < k:\n        return '-1'\n    for i in range(l, r + 1):\n        if i < k:\n            result.append(i)\n        elif i == k:\n            result.append(i)\n            return''.join(map(str, result))\n        else:\n            result.append(i)\n            if sum(result) >= k:\n                while sum(result) > k:\n                    result.pop(result.index(k) - 1)\n                result.append(k)\n    return''.join(map(str, result))\n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find all possible binary numbers within given range.\n\n    Args:\n        stdin (str): Input string\n\n    Returns:\n        str: String representation of the result\n    \"\"\"\n    stdin = stdin.split()\n    l, r, k = [int(x) for x in stdin]\n\n    result = []\n\n    for i in range(l, r + 1):\n        if not i % k:\n            result.append(i)\n\n    return str(result) if result else \"-\"\n\"\"\"\nimport math\n\ndef"
    },
    {
        "number": 556,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    first_line = stdin.readline().split()\n    l, r, k = int(first_line[0]), int(first_line[1]), int(first_line[2])\n\n    def get_k_pow(k, p):\n        if k <= 1:\n            return k\n        else:\n            return k * get_k_pow(k, p + 1)\n\n    if l <= get_k_pow(k, 0) <= r:\n        print(k)\n    else:\n        print(-1)\n    return \"\""
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if "
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\""
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n, m = [int(x) for x in stdin.readline().split()]\n    teleports = []\n    for _ in range(n):\n        a, b = [int(x) for x in stdin.readline().split()]\n        teleports.append((a, b))\n    \n    teleports.sort(key=lambda x: x[0])\n    \n    min_a = teleports[0][0]\n    min_b = teleports[0][1]\n    for a, b in teleports:\n        if a <= min_b:\n            min_a = min(min_a, a)\n            min_b = min(min_b, b)\n        else:\n            break\n    \n    return 'YES' if min_b >= m else 'NO'\n    '''\n    \n    n, m = [int(x) for x in stdin.readline().split()]\n    teleports = []\n    for _ in range(n):\n        a, b = [int(x) for x in stdin.readline().split()]\n        teleports.append((a, b))\n    \n    teleports.sort(key=lambda x: x[0])\n    \n    min_a = teleports[0][0]\n    min_b = teleports[0][1]\n    for a, b in teleports:\n        if a <= min_b:\n            min_a = min(min_a, a)\n            min_b = min(min_b, b)\n        else:\n            break\n    \n    return 'YES' if min_b >= m else 'NO'"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    \"\"\"\n    return \"\"\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if len(stdin) < 2 else \"NO\"\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n\nassert solution('') == ''\n"
    },
    {
        "number": 557,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    \n    from collections import defaultdict\n    from itertools import combinations\n    \n    teleports = defaultdict(list)\n    \n    for i in range(n):\n        a, b = [int(x) for x in stdin.split()]\n        teleports[a].append(b)\n        \n    for i in range(1, m + 1):\n        for tp in combinations(teleports[i], 2):\n            if (min(tp[0], tp[1])) - 1 in teleports[i]:\n                return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    'your solution goes here'\n    return ''"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return 'Default string to return'\n\"\"\"\n\n\ndef"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    import math\n    N, M, K = map(int, stdin.readline().split())\n    ans = math.factorial(N+M-K+1)//(math.factorial(N+1)*math.factorial(M-K+1))\n    print(ans % 998244353)\n    return \"\"\n"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns the number of ways to paint the blocks under the given conditions.\"\"\"\n\"\"\"\nFinds the number of ways to paint the blocks under the following conditions:\n - For each block, use one of the M colors, Color 1 through Color M, to paint it. It is not mandatory to use all the colors.\n - There may be at most K pairs of adjacent blocks that are painted in the same color.\nSince the count may be enormous, print it modulo 998244353.\n\"\"\"\n\nimport math\nimport sys\nfrom collections import defaultdict\n\n\ndef"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 2 1\")\n    '6'\n    \"\"\"\n    data = list(map(int, stdin.split(\" \")))\n    return str(combinations(*data))\n\n\nfrom itertools import combinations\nimport sys\n\n\ndef"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # N, M, K = map(int, stdin.readlines()[0].split())\n    N, M, K = 3, 2, 1\n    combinations = 0\n    colors = range(1, M + 1)\n    for left_color in colors:\n        for right_color in colors:\n            if left_color == right_color:\n                continue\n            combinations += N - K\n    print(combinations % 998244353)\n    return None\n\nsolution(stdin=input)"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code goes here\n    return \"\"\n"
    },
    {
        "number": 558,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(stdin)\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Gets input, returns solution to problem\"\"\"\n    p = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = [0] * (p-1)\n    c = [0] * (p-1)\n    d = [0] * (p-1)\n    for i in range(p-1):\n        b[i] = a[i]\n        if i == p-2:\n            c[i] = 1\n        if i == p-3:\n            d[i] = 1\n    while True:\n        for i in range(p-1):\n            if d[i] == 0:\n                c[i] = (b[i] * b[i+1]) % p\n                b[i+1] = (c[i] + b[i+1]) % p\n        if b == a:\n            return''.join(str(i) for i in b[:p-1])\n\n\ndef"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2\\n1 0\")\n    '1 1'\n    >>> solution(\"10\\n0 0 0 1 0 0 1 1 1 0 1\")\n    '7 6 1 4 1 1'\n    >>> solution(\"15\\n0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\")\n    '9 8 9 8 9 8 9 8 9 8 9'\n    >>> solution(\"3\\n0 1 1\")\n    '0 1 1'\n    >>> solution(\"2\\n1 1\")\n    '1 1'\n    \"\"\"\n    p = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    # b[0] = 0\n    # b[p - 1] = 0\n    # b[i] = b[i - 1] + 1 if a[i - 1] == 1\n    # b[i] = b[i - 1] - 1 if a[i - 1] == 0\n    b = [0 for _ in range(p)]\n    b[0] = p - 1\n    b[p - 1] = p - 1\n    for i in range(1, p):\n        if a[i - 1] == 1:\n            b[i] = b[i - 1] + 1\n        else:\n            b[i] = b[i - 1] - 1\n    return \" \".join(map(str, b))\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # get input from stdin\n    p, a_string = stdin.split(\"\\n\")\n    p = int(p)\n    a_list = [int(x) for x in a_string.split()]\n    # create poly class with proper variables\n    poly = Poly(p, a_list)\n    # print out solution\n    print(*poly.solve())"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    p, *a = map(int, stdin.split('\\n'))\n    a = [sum(p * i for i in range(1, p)) % p for _ in range(p)]\n    return''.join(str(i) for i in a)\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"2\\n1 0\")\n    1 1\n    \"\"\"\n    p = int(stdin.split(\"\\n\")[0])\n    polynomial = [0] * p\n    for i in range(p):\n        polynomial[i] = int(stdin.split(\"\\n\")[1].split()[i])\n    return \" \".join(str(polynomial[i]) for i in range(p))\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    p, a_str = stdin.splitlines()\n    p = int(p)\n    a = [int(x) for x in a_str.split()]\n    a = np.array(a)\n    a = a % p\n    g = np.polyfit(range(len(a)), a, len(a) - 1)\n    x = np.roots(g)\n    for root in x:\n        if np.mod(root, 1) == 0:\n            continue\n        else:\n            return str(int(root))\n    return '0 0'\n\nprint(solution(sys.stdin.read()))\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"This function solves the problem.\"\"\"\n    # I think that it is easier to just solve it with the trial divison method.\n    # Use the sequence a_0, a_1,... to solve the equation f(0) = a_0, f(1) = a_1,..., f(p-1) = a_{p-1}.\n    # The solution will be a polynomial of degree p-1 with integer coefficients.\n    # Solve the equation f(0) = 0, f(1) = 1,..., f(p-1) = p - 1.\n    # That is, f(0) is divisible by p, and the remainder is 0.\n    # f(1) is divisible by p, and the remainder is p - 1.\n    # f(2) is divisible by p, and the remainder is 2p - 2.\n    # f(3) is divisible by p, and the remainder is 3p - 3.\n    # f(p-1) is divisible by p, and the remainder is 1.\n    # It can be shown that p is prime, so that there is only one solution.\n    # Thus f(0), f(1),..., f(p-1) is the solution.\n    p, a_0, a_1 = map(int, stdin.split())\n    b_0 = (p - 1 - (a_0 * p - a_0) % p) % p\n    b_1 = (p - 1 - (a_1 * p - a_1) % p) % p\n    return''.join(map(str, [b_0, b_1]))\n"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    p = int(stdin.readline().strip())\n    b = [int(i) for i in stdin.readline().strip().split(' ')]\n    \n    polynomial = b[0]\n    for i in range(1, p):\n        polynomial = b[i] * pow(i, p-1) + polynomial\n    \n    return polynomial"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution(\"2\\n1 0\")\n    1 1\n    '''\n    num_of_primes, string = stdin.split()\n    num_of_primes = int(num_of_primes)\n    string = string.split(\" \")\n    if not string:\n        return \"\"\n\n    p, q = find_p_q(num_of_primes)\n    l = len(string)\n    res = find_b_array(p, q, l, string)\n    return \" \".join(map(str, res))\n\ndef"
    },
    {
        "number": 559,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    p = int(stdin)\n    b = bin(p)[2:]\n    arr = [int(x) for x in b]\n    return''.join(map(str, arr))\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.splitlines()\n    # (r, c) = (len(lines), len(lines[0]))\n    r, c = int(lines[0].split()[0]), int(lines[0].split()[1])\n    cake = [row[1:] for row in lines[1:]]\n    print(cake)\n    eat = 0\n    for row in cake:\n        for i in range(len(row)):\n            if row[i] == 'S':\n                eat += 1\n    return eat\n\nprint(solution(\"3 4\\nS...\\n....\\n..S.\"))\n\n\n\n-----SOLUTION----\n\ndef"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    r, c = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    cake = []\n    for _ in range(r):\n        cake.append(stdin.split('\\n')[1:][0].split(' '))\n    return str(solve(cake))\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\"\"\"\nfrom typing import List\n\ndef"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # the cake matrix\n    cake = stdin.split('\\n')\n    # the row and column of the cake minator\n    minator_row, minator_col = int(cake[0].split()[0]), int(cake[0].split()[1])\n    cake = cake[1:]\n    # the maximum number of cake cells eaten\n    cake_eaten = 0\n    # the maximum number of cake cells eaten\n    max_cake_eaten = 0\n    # find the max number of cake cells eaten\n    for i in range(minator_row-1, minator_row+2):\n        for j in range(minator_col-1, minator_col+2):\n            if cake[i][j] == 'S':\n                cake_eaten += 1\n                if cake_eaten > max_cake_eaten:\n                    max_cake_eaten = cake_eaten\n            else:\n                cake_eaten = 0\n    return max_cake_eaten\n\n\ndef"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    r, c = map(int, stdin.split(' '))\n    my_cake = []\n    for i in range(r):\n        row = stdin.split('\\n')[i]\n        my_cake.append(row)\n\n    eaten_cells = 0\n    for row_idx in range(r):\n        for col_idx in range(c):\n            if my_cake[row_idx][col_idx] == 'S':\n                eaten_cells += 1\n                break\n\n    return eaten_cells\n\n\n\n----Test cases----\n\nInput:\n3 4\n....\n..S.\n....\n\nOutput:\n8\n\nInput:\n1 1\nS\n\nOutput:\n1\n\n\nInput:\n3 3\n....\n..S.\n....\n\nOutput:\n8\n\nInput:\n3 4\nS.S.\n.S.S\n.S.S\n\nOutput:\n8\n\n\n\"\"\"\n\nimport unittest\nfrom collections import Counter\n\n\ndef"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 4\\nS...\\n....\\n..S.\")\n    8\n    \"\"\"\n    "
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 560,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"Hello World!\"\n"
    },
    {
        "number": 561,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 561,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity: O(n)\n    Space complexity: O(n)\n    \"\"\"\n    pass\n    n = int(stdin)\n    arr = [int(x) for x in stdin.split()]\n    first = arr[1] - arr[0]\n    second = arr[2] - arr[1]\n    third = arr[3] - arr[2]\n    for i in range(n - 3):\n        for j in range(i + 1, n - 2):\n            if arr[j + 1] - arr[j] == second and arr[j + 2] - arr[j + 1] == third:\n                return \"2\"\n    return \"3\"\n"
    },
    {
        "number": 561,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    n = stdin\n    a = list(map(int, stdin.split('\\n')[0].split(' ')))\n    for i in range(1, len(a)):\n        if a[i] - a[i - 1] == a[1] - a[0]:\n            pass\n        else:\n            print(a[i - 1])\n        \n    return '-1'"
    },
    {
        "number": 561,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    pass\n"
    },
    {
        "number": 561,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the solution to the problem.\"\"\"\n    # The number of cards to be considered.\n    n = int(stdin)\n    # The sequence of cards.\n    sequence = [int(x) for x in stdin.split(\" \")]\n    # The sequence of card numbers.\n    cards = set(sequence)\n    # The card number where the number to be written on is currently unknown.\n    num = None\n    # The sequence of card numbers that fulfill the condition.\n    solution = []\n    # Iterate over the cards.\n    for card in cards:\n        # If the card number is not unknown.\n        if num is not None:\n            # Write a number.\n            solution.append(num)\n            # The number of cards.\n            c = n\n            # The number that has already been written on the card.\n            p = num\n            # The card number that fulfills the condition.\n            condition = card\n            # The card number that fulfills the condition.\n            condition_card = card\n            # The number of iterations.\n            iterations = 0\n            # Iterate until the condition is fulfilled or the card number is exceeded.\n            while card < condition and c > 0:\n                # Add one to the number of iterations.\n                iterations += 1\n                # Increase the number to be written on by one.\n                num += 1\n                # If the number is bigger than the card number that fulfills the condition.\n                if num > condition_card:\n                    # Decrease the number of cards by one.\n                    c -= 1\n                    # The number that has already been written on the card.\n                    p = num\n                    # Write a number.\n                    solution.append(num)\n            # If the number of iterations is equal to the number of iterations to be written on the card.\n            if iterations == len(solution):\n                # If the number of cards is bigger than 1.\n                if c > 1:\n                    # Write the number of iterations.\n                    solution.append(iterations)\n                    # Write the number that has already been written on the card.\n                    solution.append(p)\n                    # The number that fulfills the condition.\n                    condition_card = card\n                    # The card number that fulfills the condition.\n                    condition = condition_card\n                    # The number of cards.\n                    c = n\n                    # The card number that fulfills the condition.\n                    condition_card = card\n                    # The number of iterations.\n                    iterations = 0\n                    # Iterate until the condition is fulfilled or the card number is exceeded.\n                    while card < condition and c > 0:\n                        # Add one to the number of iterations.\n                        iterations += 1\n                        # Increase the number to be written on by one.\n                        num += 1\n                        # If the number is bigger than the card number that fulfills the condition.\n                        if num > condition_card:\n                            # Decrease the number of cards by one.\n                            c -= 1\n                            # The number that has already been written on the card.\n                            p = num\n                            # Write a number.\n                            solution.append(num)\n                    # If the number of iterations is equal to the number of iterations to be written on the card.\n                    if iterations == len(solution):\n                        # If the number of cards is bigger than 1.\n                        if c > 1:\n                            # Write the number of iterations.\n                            solution.append(iterations)\n                            # Write the number that has already been written on the card.\n                            solution.append(p)\n                            # The number that fulfills the condition.\n                            condition_card = card\n                            # The card number that fulfills the condition.\n                            condition = condition_card\n                            # The number of cards.\n                            c = n\n                            # The card number that fulfills the condition.\n                            condition_card = card\n                            # The number of iterations.\n                            iterations = 0\n                            # Iterate until the condition is fulfilled or the card number is exceeded.\n                            while card < condition and c > 0:\n                                # Add one to the number of iterations.\n                                iterations += 1\n                                # Increase the number to be written on by one.\n                                num += 1\n                                # If the number is bigger than the card number that fulfills the condition.\n                                if num > condition_card:\n                                    # Decrease the number of cards by one.\n                                    c -= 1\n                                    # The number that has already been written on the card.\n                                    p = num\n                                    # Write a number.\n                                    solution.append(num)\n                            # If the number of iterations is equal to the number of iterations to be written on the card.\n                            if iterations == len(solution):\n                                # If the number of cards is bigger than 1.\n                                if c > 1:\n                                    # Write the number of iterations.\n                                    solution.append(iterations)\n                                    # Write the number that has already been written on the card.\n                                    solution.append(p)\n                                    # The number that fulfills the condition.\n                                    condition_card = card\n                                    # The card number that fulfills the condition.\n                                    condition = condition_card\n                                    # The number of cards.\n                                    c = n\n                                    # The card number that fulfills the condition.\n                                    condition_card = card\n                                    # The number of iterations.\n                                    iterations = 0\n                                    # Iterate until the condition is fulfilled or the card number is exceeded.\n                                    while card < condition and c > 0:\n                                        # Add one to the number of iterations.\n                                        iterations += 1\n                                        # Increase the number to be written on by one.\n                                        num += 1\n                                        # If the number is bigger than the card number that fulfills the condition.\n                                        if num > condition_card:\n                                            # Decrease the number of cards by one.\n                                            c -= 1\n                                            # The number that has already been written on the card.\n                                            p = num\n                                            # Write a number.\n                                            solution.append(num)\n                                    # If the number of iterations is equal to the number of iterations to be written on the card.\n                                    if iterations == len(solution):\n                                        # If the number of cards is bigger than 1.\n                                        if c > 1:\n                                            # Write the number of iterations.\n                                            solution.append(iterations)\n                                            # Write the number that has already been written on the card.\n                                            solution.append(p)\n                                            # The number that fulfills the condition.\n                                            condition_card = card\n                                            # The card number that fulfills the condition.\n                                            "
    },
    {
        "number": 561,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    from collections import Counter\n    from math import gcd\n    n = int(stdin.split(\"\\n\")[0])\n    sequence = [int(x) for x in stdin.split(\"\\n\")[1].split(\" \")]\n\n    if n < 2:\n        return -1\n    if len(Counter(sequence)) == n:\n        return -1\n\n    if n == 2:\n        result = sequence[0] + 1 - sequence[0]\n        return result\n\n    d = gcd(*sequence)\n    for x in range(2, d + 1):\n        if d % x == 0:\n            result = (sequence[0] + x - 1 - sequence[0]) // x\n            if result == (n - 1):\n                return result\n            return result + (sequence[0] + x - sequence[0]) // x\n\n    return -1\n"
    },
    {
        "number": 561,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    get the number of cards\n    get the list of card\n    find the number of difference between sequential numbers\n    if there are no card, print -1\n    if there are cards, print the list of possible numbers\n    \"\"\"\n    n = int(stdin.readline())\n    ar = [int(item) for item in stdin.readline().split()]\n    ar.sort()\n    diff = [ar[i + 1] - ar[i] for i in range(n - 1)]\n    if n == 1:\n        print(-1)\n    else:\n        if len(set(diff)) == 1:\n            print(1)\n            print(*ar[1:])\n        else:\n            print(0)\n"
    },
    {
        "number": 561,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\" \"\"\""
    },
    {
        "number": 561,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = sorted(map(int, stdin.split()))\n    ret = []\n    i = 0\n    while True:\n        if i >= len(a):\n            break\n        if n - len(a) + i < a[i]:\n            break\n        for j in range(n - len(a) + i + 1):\n            diff = j - i\n            if a[i] + diff == a[i + j]:\n                ret.append(a[i] + diff)\n                i += 1\n            else:\n                break\n    return '-1' if len(ret) == 0 else f'{len(ret)}\\n{ret}'\n"
    },
    {
        "number": 561,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find if it is possible to watch all shows using 2 TVs only.\"\"\"\n    return \"YES\" if int(stdin) <= 2 else \"NO\"\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if int(stdin) % 2 == 0 else 'NO'\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('3\\n1 2\\n2 3\\n4 5')\n    'YES'\n    >>> solution('4\\n1 2\\n2 3\\n2 3\\n1 2')\n    'NO'\n    \"\"\"\n    n = int(stdin.readline())\n    s = [stdin.readline().split() for _ in range(n)]\n    s.sort()\n    for i in range(n - 1):\n        if (int(s[i][1]) > int(s[i + 1][0])):\n            return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    tv1 = []\n    tv2 = []\n    for i in range(n):\n        a, b = list(map(int, stdin.readline().split()))\n        tv1.append(a)\n        tv2.append(b)\n    tv1 = sorted(tv1)\n    tv2 = sorted(tv2)\n    if tv1[-1] < tv2[0]:\n        return \"NO\"\n    s = 0\n    for i in range(n):\n        if tv1[i] > tv2[s]:\n            return \"NO\"\n        s += 1\n    return \"YES\"\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    l, r = [0] * n, [0] * n\n    for i in range(n):\n        l[i], r[i] = [int(x) for x in stdin.readline().split(' ')]\n    l, r.sort()\n    for i in range(n):\n        for j in range(i + 1, n):\n            if l[j] >= r[i]:\n                print('NO')\n                return\n    print('YES')\n    return\n\n\nsolution(str(stdin.read()))\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 562,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution to the problem.\n    \"\"\"\n    lines = stdin.split('\\n')\n    line_length = int(lines[0])\n    if line_length > 0:\n        lines = lines[1:]\n        shows = {}\n        for show in lines:\n            start, end = map(int, show.split())\n            if end not in shows:\n                shows[end] = []\n            shows[end].append(start)\n        for end, starts in shows.items():\n            starts.sort()\n            i = 0\n            while i < len(starts):\n                while i < len(starts) and starts[i] + 1 == starts[i+1]:\n                    i += 1\n                if i+1 >= len(starts):\n                    break\n                if i+1 >= len(starts) or end - starts[i] < 2:\n                    return 'NO'\n                i += 1\n    return 'YES'\n\n\ndef"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_coprime(a, b):\n        if a == b:\n            return False\n        for i in range(2, min(a, b) + 1):\n            if a % i == b % i == 0:\n                return False\n        return True\n\n    _, r = map(int, stdin.split())\n    a = b = c = -1\n    for l in range(2, r + 1):\n        if r % l == 0:\n            for x in range(l + 1, r):\n                if is_coprime(x, l):\n                    if is_coprime(l, x):\n                        if not is_coprime(l, r):\n                            a, b, c = l, x, r\n                            return a * b * c\n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    l, r = map(int, stdin.split(' '))\n    for i in range(l, r + 1):\n        if is_coprime(i, i + 1):\n            continue\n        if not is_coprime(i, i + 2):\n            continue\n        if is_coprime(i, i + 3):\n            return str(i) +'' + str(i + 1) +'' + str(i + 2)\n    return '-1'\n\n\ndef"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    l, r = map(int, stdin.split())\n    ans = []\n    for i in range(l, r):\n        for j in range(l, r):\n            for k in range(l, r):\n                if i > j > k:\n                    if i % j == 0 or j % k == 0 or i % k == 0:\n                        continue\n                    else:\n                        if not (j % i == 0 or k % i == 0 or j % k == 0):\n                            ans.append([i, j, k])\n    if ans:\n        return''.join([str(i) for i in ans[0]])\n    else:\n        return '-1'\n    \n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    l, r = list(map(int, stdin.split(' ')))\n    for x in range(l, r):\n        for y in range(x, r):\n            for z in range(y, r):\n                if x < y < z:\n                    if gcd(x, y) == gcd(y, z) == 1 and gcd(x, z)!= 1:\n                        return''.join([str(x), str(y), str(z)])\n    return '-1'\n\n\ndef"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    \n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    first_line = stdin.split('\\n')[0]\n    first_line = list(map(int, first_line.split()))\n    l, r = first_line[0], first_line[1]\n    a = r\n    b = r - 1\n    c = r - 2\n    print(a, b, c)\n    return \"\""
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    [l, r] = [int(x) for x in stdin.split()]\n    \n    for a in range(l, r):\n        for b in range(l, r):\n            if (a % b == 0):\n                for c in range(l, r):\n                    if (c % b == 0 and c % a!= 0):\n                        print(a, b, c)\n                        return\n\n    print(-1)\n"
    },
    {
        "number": 563,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    l, r = map(int, stdin.split(' '))\n    x = 0\n    while True:\n        x += 1\n        y = x * (l + r) + 1\n        if y % 3!= 0:\n            continue\n        a = y // 3\n        b = a * 2\n        if b > r:\n            break\n        if not is_coprime(a, b):\n            continue\n        if is_coprime(a, x):\n            continue\n        if not is_coprime(b, x):\n            continue\n        print(a, b, x)\n        return ''\n    return '-1'\n\ndef"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split(' '))\n    l = [int(x) for x in stdin.split(' ')]\n    l.sort()\n    ans = 'NO'\n    for i in range(len(l)):\n        if l[i] == 1:\n            if s % 2 == 1:\n                s -= 1\n            elif l[i+1] == 1:\n                s -= 2\n            else:\n                ans = 'NO'\n                break\n        else:\n            if s % 2 == 0:\n                s -= l[i]\n            elif l[i+1] == 1:\n                s -= 2 * l[i]\n            else:\n                ans = 'NO'\n                break\n        if s <= 0:\n            ans = 'YES'\n    return ans"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.split()\n    n, s = int(n), int(s)\n    arr = stdin.split()\n    arr = [int(i) for i in arr]\n    arr.sort()\n    if arr[0] + arr[1] <= s:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return 'YES' if there is no loser, and 'NO' otherwise.\"\"\"\n    mugs, cup = [int(x) for x in stdin.split()]\n    mugs = [int(x) for x in stdin.split()][1:]\n    if max(mugs) > cup:\n        return \"NO\"\n    mugs.sort(reverse=True)\n    for i in range(len(mugs) - 1):\n        if mugs[i] >= mugs[i + 1]:\n            return \"NO\"\n    return \"YES\"\nprint(solution(stdin))\n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split('\\n')[0].split(' '))\n    mugs = list(map(int, stdin.split('\\n')[1].split(' ')))\n    if sum(mugs) == s and sum(mugs) > s:\n        return 'NO'\n    return 'YES'"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.split(' ')\n    n = int(n)\n    s = int(s)\n    mugs = [int(mug) for mug in stdin.split(' ')[1:]]\n    mugs.sort()\n    mugs.append(s)\n    total = 0\n    for i in range(len(mugs) - 1):\n        total += mugs[i]\n        if total > s:\n            return 'NO'\n    return 'YES'"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # Get input\n    n, s = map(int, stdin.split(' '))\n    # Iterate over input\n    for i in range(n):\n        # Get next line\n        volumes = list(map(int, stdin.split(' ')))[1:]\n        # Check if they can play\n        if max(volumes) > s:\n            return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()\n    num_mugs = int(s[0])\n    sum_mugs = int(s[1])\n    mugs = stdin.split('\\n')[1].split()\n    mugs.pop(0)\n    mugs = list(map(int, mugs))\n    \n    sum_mugs = sum(mugs)\n    sums = []\n    for i in range(len(mugs)):\n        sums.append(sum(mugs[i:]))\n    \n    if sum_mugs!= sum(sums):\n        return 'NO'\n    elif (sum_mugs - mugs[0]) % len(mugs)!= 0:\n        return 'NO'\n    else:\n        return 'YES'\n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    _, cup_volume = stdin.split()\n    mugs = list(map(int, stdin.split()[1:]))\n\n    def can_play(mugs_volume: List[int]) -> bool:\n        return sum(mugs_volume) < cup_volume\n\n    def find_answer(mugs_volume: List[int]) -> str:\n        if can_play(mugs_volume):\n            return \"YES\"\n        else:\n            return \"NO\"\n\n    print(find_answer(mugs))"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.split(\" \")\n    n, s = int(n), int(s)\n    mugs = stdin.split(\" \")[1:]\n    mugs = [int(m) for m in mugs]\n\n    if sum(mugs) <= s:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 564,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, cap = map(int, stdin.split(' '))\n    mugs = list(map(int, stdin.split(' ')))\n    if n == 1 and cap > 0:\n        return 'YES'\n    i = 0\n    while i < len(mugs):\n        if mugs[i] >= cap:\n            mugs.pop(i)\n            i -= 1\n            if i < 0:\n                i = 0\n            n -= 1\n        i += 1\n    if n == 0:\n        return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \n\"\"\"\n\n\ndef"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    y, b, r = [int(x) for x in stdin.split(\" \")]\n    return str(max(y + b, y + r, b + r) - min(y, b, r))\n    \n\n\n\"\"\""
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # return str\n    y, b, r = list(map(int, stdin.split()))\n    print(max(y * 6 + b * 5 + r * 4, (y + b + r) * 3))\n    return str(max(y * 6 + b * 5 + r * 4, (y + b + r) * 3))\n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\ndef"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    pass"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"8 13 9\")\n    24\n    \"\"\"\n    y, b, r = map(int, stdin.split())\n    return max(6, y + b + r - 1)\n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    # @functools.lru_cache(maxsize=None)\n    def rec(y, b, r):\n        if r > b:\n            return rec(y, b + 1, r) + rec(y + 1, b, r) + 1\n        elif r == b:\n            return rec(y + 1, b, r) + rec(y, b, r + 1) + 2\n        else:\n            return rec(y + 1, b, r) + 1\n\n    y, b, r = [int(i) for i in stdin.split()]\n    return rec(y, b, r)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    y, b, r = [int(num) for num in stdin.split(' ')]\n    if y * 2 >= b and r >= b:\n        return b * 2\n    elif r * 2 >= b and y >= b:\n        return y * 2\n    else:\n        return y + b + r\n"
    },
    {
        "number": 565,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    num_of_yellow = int(stdin[0])\n    num_of_blue = int(stdin[1])\n    num_of_red = int(stdin[2])\n    return str(max([num_of_yellow,num_of_blue,num_of_red]))\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\"\n    # import sys\n    # def input():\n    #     return sys.stdin.readline()\n    # n, r, g, b = map(int, input().split())\n    # cnt = 0\n    # # cnt = n//3\n    # r_arr = [0]*n\n    # g_arr = [0]*n\n    # b_arr = [0]*n\n    # r_arr[0] = r\n    # g_arr[0] = g\n    # b_arr[0] = b\n    # for i in range(1, n):\n    #     r_arr[i] = r_arr[i-1] + r_arr[i-1]\n    #     g_arr[i] = g_arr[i-1] + g_arr[i-1]\n    #     b_arr[i] = b_arr[i-1] + b_arr[i-1]\n    # for i in range(n//2):\n    #     for j in range(i+1, n-1-i):\n    #         if r_arr[i] + r_arr[j] <= r_arr[n-1-i] + r_arr[n-1-j] and g_arr[i] + g_arr[j] <= g_arr[n-1-i] + g_arr[n-1-j] and b_arr[i] + b_arr[j] <= b_arr[n-1-i] + b_arr[n-1-j]:\n    #             cnt += 1\n    # return cnt\n    # \"\"\"\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return (a + b + c) - 1"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    "
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\"\"\"\n\ndef"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(max(1, int(stdin.split()[0]) // 2 + stdin.count(\"r\") // 2 + stdin.count(\"g\") // 2 + stdin.count(\"b\") // 2)))\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    r, g, b = map(int, stdin.split(' '))\n    return max((r // 2) + (g // 2) + (b // 2), r + g + b - r - g - b)\n\n\"\"\"\n\ndef"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    red, green, blue = map(int, stdin.split())\n    return max(red + green, red + blue, blue + red)\n\"\"\""
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    num = list(map(int, stdin.split()))\n    return str(sorted(num)[-1])\n\n\nprint(solution(\"5 4 3\"))\n"
    },
    {
        "number": 566,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    r, g, b = map(int, stdin.split(' '))\n    return min(r // 2, g // 2, b // 2) + 1\n\nThe first line of the output is the minimum number of tables needed to decorate all the required tables.\ndef"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, *A = map(int, stdin.split())\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(n):\n        dp[i + 1][i + 1] = abs(A[i] - A[i + 1])\n    for d in range(1, n):\n        for l in range(1, n - d + 1):\n            r = l + d\n            dp[l][r] = min(dp[l][k] + dp[k + 1][r] for k in range(l, r))\n    return dp[1][n]\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    time: O(n)\n    space: O(1)\n    '''\n    num_prizes = int(stdin.readline())\n    positions = list(map(int, stdin.readline().split()))\n    time = 0\n    current_position = 1\n    while len(positions) > 0:\n        prize = positions.pop(0)\n        if prize == current_position:\n            current_position += 1\n            time += 1\n        else:\n            next_prize = positions.pop(0)\n            if next_prize > current_position:\n                time += next_prize - current_position\n                current_position = next_prize\n            else:\n                time += next_prize - current_position + 1\n                current_position = next_prize + 1\n    return time\n\n\ndef"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = sorted(map(int, stdin.readline().split()))\n    print(n)\n    print(a)\n    pos = 1\n    time = 0\n    for p in a:\n        if pos == p:\n            pos += 1\n        else:\n            time += pos - p - 1\n            pos = p + 1\n    return time\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    prizes = [int(i) for i in stdin.split('\\n')[0].split()]\n    prizes = list(sorted(prizes))\n    print(prizes)\n    return\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    _, a = stdin.split('\\n')\n    return str(len(a.split(' ')))\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    a = [int(i) for i in lines[1].split(' ')]\n\n    a.sort()\n    res = 1\n    for i in range(1, len(a)):\n        res += max(abs(a[i] - a[i - 1]), 1)\n\n    return res\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your runtime beats 94.33 % of python3 submissions \"\"\"\n    line = [int(x) for x in stdin.split()]\n    n = line[0]\n    if n == 1:\n        print(1)\n        return\n    prizes = line[1:]\n    rem = 1\n    while len(prizes) > 1:\n        if rem % 2 == 1:\n            if prizes[0] < prizes[1]:\n                prizes.pop(0)\n            else:\n                prizes.pop(1)\n        else:\n            if prizes[0] > prizes[1]:\n                prizes.pop(0)\n            else:\n                prizes.pop(1)\n        rem += 1\n    print(rem)\n    return\n\nsolution(input())\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    def solve(stdin):\n        n = int(stdin)\n        a = list(map(int, stdin.split()))\n        a.sort()\n        ans = 0\n        left = right = 0\n        while left < n:\n            while right < n and a[right] == a[left]:\n                right += 1\n            ans += max(right - left - 1, 0)\n            left = right\n        return ans\n    return str(solve(stdin))\n"
    },
    {
        "number": 567,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return...\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\ndef"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return '10'\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"1\""
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n = int(stdin)\n    if n == 1:\n        return 20\n    else:\n        return 679\n    '''\n    n = int(stdin)\n    if n == 1:\n        return 20\n    else:\n        return 680\n"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\nimport sys"
    },
    {
        "number": 568,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def _solution(n: int) -> int:\n        if n < 3:\n            return 1\n        else:\n            s = 6 * n\n            return s * (s + 1) // 2 - _solution(n // 3)\n    return str(_solution(int(stdin)))\n\ndef"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\n\ndef"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin\n    A = set()\n    for i in range(len(S)):\n        for j in range(i, len(S)):\n            if S[i]!= S[j]:\n                A.add(S[i:j+1])\n    return len(A)\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nfrom itertools import combinations\n\nstdin = int(stdin)\n\ns = stdin\n\ndef"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(solution.testcase[0])\n    2\n    >>> solution(solution.testcase[1])\n    0\n    \"\"\"\n    len_s = len(stdin)\n    if len_s == 0:\n        return \"koko\"\n\n    stdin_split = stdin.split('a')\n    if len(stdin_split) == 1:\n        return \"koko\"\n\n    substring_dict = {}\n    for i in stdin_split:\n        substring_dict[i] = 1\n\n    if len(substring_dict.keys()) == 1:\n        return 1\n\n    answer = 0\n    for i in substring_dict.keys():\n        if i == \"\":\n            continue\n        count = 0\n        for j in range(len_s):\n            if stdin[j]!= i[j % len(i)]:\n                count += 1\n        answer = max(answer, count)\n\n    return answer if answer > 0 else -1\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    if n == 1:\n        return 0\n\n    changes = 0\n    substrings = {stdin[0]}\n    for i in range(n):\n        if stdin[i] in substrings:\n            substrings.clear()\n            substrings.add(stdin[i])\n            changes += 1\n        else:\n            substrings.add(stdin[i])\n    return changes if len(substrings) == 1 else -1\n"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    if stdin.count(stdin[0]) > 1:\n        return -1\n    else:\n        return stdin.count(stdin[0])\n\ndef"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    d = collections.Counter(stdin)\n    res = 0\n    for i in range(1, len(stdin)):\n        if stdin[i]!= stdin[i-1] or d[stdin[i]] >= 2:\n            d[stdin[i-1]] -= 1\n            res += 1\n    return res if res > 0 else -1"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = stdin\n    a = set()\n    res = []\n    for i in range(n):\n        res.append('b' if i == 0 else 'a')\n        a.add('a' if i == 0 else 'b')\n    if len(a) == 2:\n        return 1\n    return -1\n\ndef"
    },
    {
        "number": 569,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = len(s)\n    m = []\n    for i in range(n):\n        for j in range(i,n):\n            m.append(s[i:j+1])\n    # print(m)\n    d = {}\n    for i in m:\n        if i not in d.keys():\n            d[i] = 1\n        else:\n            d[i] += 1\n    # print(d)\n    ans = 0\n    for i in d.keys():\n        if d[i]>1:\n            ans += d[i]-1\n    # print(ans)\n    if ans%2 == 0:\n        return ans//2\n    else:\n        return ans//2 + 1\n\ndef"
    },
    {
        "number": 570,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    nums = list(map(int, stdin.split()))\n    vladik, valera = nums[0], nums[1]\n    while vladik >= 0 and valera >= 0:\n        if vladik > valera:\n            vladik -= valera\n        else:\n            valera -= vladik\n        vladik, valera = valera, vladik\n    return 'Vladik' if vladik < 0 else 'Valera'\n\n\ndef"
    },
    {
        "number": 570,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a % 2!= 0 and b % 2!= 0:\n        return 'Vladik'\n    elif a % 2!= 0 and b % 2 == 0:\n        return 'Valera'\n    elif a % 2 == 0 and b % 2!= 0:\n        return 'Vladik'\n    else:\n        return 'Valera'\n\"\"\"\n\n\ndef"
    },
    {
        "number": 570,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return {\n        (1, 1): 'Vladik',\n        (7, 6): 'Valera',\n    }[tuple(map(int, stdin.split()))]\n\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 570,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return \"Vladik\" if Vladik first who can't give right amount of candy, or \"Valera\" otherwise.\"\"\"\n    a, b = map(int, stdin.split())\n    while True:\n        if a < b:\n            a, b = b, a\n        if a % b == 0:\n            return \"Valera\"\n        a, b = b, a % b\n"
    },
    {
        "number": 570,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split(' ')]\n    if a > b:\n        return 'Valera'\n    else:\n        return 'Vladik'\n\"\"\"\n\n\ndef"
    },
    {
        "number": 570,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return 'Vladik' or 'Valera' depending on which guy first can't give the right amount of candies\"\"\"\n    a, b = map(int, stdin.split())\n    v, v_times = a, 1\n    val, val_times = b, 1\n    while val - 1 > v:\n        v += (v_times * (val_times - 1)) // 2\n        v_times += 1\n    if v > val:\n        return \"Valera\"\n    return \"Vladik\"\n"
    },
    {
        "number": 570,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\nreturn stdin.split()\n\nstdin = input()\nprint(solution(stdin))\n"
    },
    {
        "number": 570,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    a = int(a)\n    b = int(b)\n    if a % 2 == 0 and b % 2 == 0:\n        print('Valera')\n    elif a % 2 == 1 and b % 2 == 1:\n        print('Vladik')\n    else:\n        if a % 2 == 0:\n            print('Vladik')\n        elif b % 2 == 1:\n            print('Valera')\n    return 'Vladik' if a % 2 == 0 else 'Valera'\n\n\ndef"
    },
    {
        "number": 570,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split(' ')\n    a = int(a)\n    b = int(b)\n    v = 0\n    if a > b:\n        v = a - b\n    else:\n        v = b - a\n    return \"Valera\" if v % 2 == 1 else \"Vladik\"\n"
    },
    {
        "number": 570,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split(' '))\n    cnt = 0\n    while a!= b:\n        if a > b:\n            cnt += b\n            b += a - b\n        else:\n            cnt += a\n            a += b - a\n    return \"Vladik\" if cnt % 2 else \"Valera\"\n\n\ndef"
    },
    {
        "number": 571,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    returns a string representing the answer\n    '''\n    pass\n"
    },
    {
        "number": 571,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    res = []\n    for i in range(len(stdin)):\n        if stdin[i] == '?':\n            res.append('(')\n            res.append(')')\n        else:\n            res.append(stdin[i])\n    return ''.join(res)\n"
    },
    {
        "number": 571,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\nimport unittest\n\n\ndef"
    },
    {
        "number": 571,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"(??????)\")\n    '(()())'\n    >>> solution(\"(??????(??????))(??????)\")\n    '(()())(()())'\n    >>> solution(\"(??????)???(??????)\")\n    ':('\n    >>> solution(\"(??????)(??????)(??????)???(??????)???(??????)???(??????)???(??????)\")\n    ':(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((("
    },
    {
        "number": 571,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"(??????)\")\n    '((()))'\n    >>> solution(\"(???????(??????))\")\n    '((()))'\n    >>> solution(\"(??????)???(??????)??(??????)???(??????)\")\n    '((()))'\n    >>> solution(\"(???(???)?)??(???)??(???)??(???)??(???(???)?)?\")\n    '((()))'\n    \"\"\"\n    result = \"\"\n    for i in range(len(stdin)):\n        if stdin[i] == \"?\" and i!= 0 and i!= len(stdin) - 1:\n            if stdin[i - 1]!= \"(\" and stdin[i + 1]!= \")\":\n                result += \"()\"\n            elif stdin[i - 1] == \")\" and stdin[i + 1] == \"(\":\n                result += \"()\"\n            else:\n                result += \"1\"\n        else:\n            result += stdin[i]\n    return result\n"
    },
    {
        "number": 571,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 571,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    length = int(stdin[0])\n    s = stdin[1]\n    output = []\n    # if length == 1:\n    #     if '(' not in s:\n    #         output.append(1)\n    #     elif ')' not in s:\n    #         output.append(1)\n    #     else:\n    #         output.append(0)\n    # else:\n    for i in range(len(s)):\n        if s[i] == '?':\n            if i == 0:\n                output.append(s[0] + s[1] + '1')\n            elif i == 1:\n                output.append(s[0] + '1' + s[2])\n            elif i == len(s) - 1:\n                output.append(s[i - 2] + s[i - 1] + '1')\n            else:\n                output.append(s[i - 1] + '1' + s[i + 1])\n        else:\n            output.append(s[i])\n\n    return ''.join(output)\n\n\nprint(solution('10(??(??(??(??(??())))))'))\n"
    },
    {
        "number": 571,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace(\"?\", \":(\").replace(\"(\", \"((\")\n\n\ndef"
    },
    {
        "number": 571,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"(()())\" if stdin == \"(???)\" else \":(\""
    },
    {
        "number": 571,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"The solution for the problem\"\"\"\n\n    return \":(\"\n\n\ndef"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"7 8 -3 6\")\n    '0'\n    >>> solution(\"7 8 -3 6 2\")\n    '2'\n    \"\"\"\n    n, k = [int(x) for x in stdin.split()]\n    coefficients = [int(x) for x in stdin.split()[1::]]\n    coefficients.sort(reverse=True)\n    count = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if abs(coefficients[i]) > k:\n                continue\n            if abs(coefficients[j]) > k:\n                continue\n            if abs(coefficients[i] + coefficients[j]) > k:\n                continue\n            if abs(coefficients[i] * coefficients[j]) > k:\n                continue\n            if abs(coefficients[i] - coefficients[j]) > k:\n                continue\n            if abs(coefficients[i] / coefficients[j]) > k:\n                continue\n            count += 1\n\n    return str(count)\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    inputs = list(map(int, stdin.split()))\n    n, k = inputs[0], inputs[1]\n    polynomial = list(map(int, stdin.split()))\n    if polynomial[n] == 0:\n        return '0'\n    count = 0\n    for i in range(n):\n        if abs(polynomial[i]) > k:\n            break\n        else:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n-----Tests-----\nsolution(\"3 12\", \"10 -9 -3 5\") # \"3\"\nsolution(\"3 20\", \"14 -7 19\") # \"0\"\nsolution(\"2 20\", \"14 -7 19\") # \"0\"\nsolution(\"2 20\", \"14 -7 19\") # \"0\"\nsolution(\"2 20\", \"14 -7 19\") # \"0\"\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''Your solution goes here.'''\n\n    return \"\"\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def solve(n: int, k: int, a: List[int]) -> int:\n        good = 0\n        bad = 0\n        for i in range(n):\n            if abs(a[i]) <= k:\n                good += 1\n            else:\n                bad += 1\n        return good if good == bad else bad\n\n    n, k = [int(s) for s in stdin.split()]\n    a = [int(s) for s in stdin.split()[1:]]\n    print(solve(n, k, a))\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n\"\"\"\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    polynomial = list(map(int, stdin.split()))\n    polynomial.append(0)\n    #counts how many ways to change the coefficients to get a valid polynomial\n    count = 0\n    #list of valid polynomials\n    valid_polynomials = []\n    #validates if the polynomial has the correct degree\n    def validate(polynomial):\n        return len(polynomial) - 1 == n\n\n    #validates if the polynomial has the right coefficients\n    def validate_coefficients(polynomial):\n        for coefficient in polynomial:\n            if abs(coefficient) > k:\n                return False\n        return True\n\n    #checks if the polynomial is valid\n    def valid(polynomial):\n        return validate(polynomial) and validate_coefficients(polynomial)\n    \n    #gets all possible valid polynomials\n    def get_valid_polynomials():\n        for i in range(n + 1):\n            for j in range(n + 1):\n                polynomial = [0] * (n + 1)\n                polynomial[i] = j\n                polynomial[j] = polynomial[i]\n                if valid(polynomial):\n                    valid_polynomials.append(polynomial)\n    \n    def get_total_count():\n        count = 0\n        for polynomial in valid_polynomials:\n            if polynomial[n]!= 0:\n                continue\n            count += 1\n        return count\n\n    get_valid_polynomials()\n    count = get_total_count()\n    return count\n    \nprint(solution(input()))\n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split()\n    n, k = int(n), int(k)\n    p = list(map(lambda x: int(x), stdin.split()[1:]))\n    d = collections.defaultdict(list)\n    for i in range(n):\n        d[p[i]].append(i)\n    for k, v in d.items():\n        if len(v) > 1:\n            v.append(n)\n    q = collections.defaultdict(list)\n    for i in range(n):\n        q[p[i]].append(i)\n    for k, v in q.items():\n        if len(v) > 1:\n            v.append(n)\n    p.sort()\n    q.sort()\n    ans = 0\n    for i in range(n):\n        qd = q[p[i]]\n        if qd[0]!= n:\n            j = qd[0]\n            while j < n and abs(p[i] - p[j]) <= k:\n                j += 1\n            if j > n:\n                ans += 1\n            else:\n                if j > qd[0]:\n                    ans += 1\n                else:\n                    if qd[0] > qd[1]:\n                        ans += 1\n                    else:\n                        if abs(p[j] - p[qd[1]]) > k:\n                            ans += 1\n                        else:\n                            ans += 2\n        else:\n            if p[i]!= 0:\n                ans += 2\n    return str(ans)\n    \n"
    },
    {
        "number": 572,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    import math\n    \n    def solution(stdin):\n    \n        n, k = [int(i) for i in stdin.split(' ')]\n        a = [int(i) for i in stdin.split(' ')[1:]]\n        count = 0\n        \n        for j in range(len(a)):\n            for i in range(j):\n                if abs(a[i]) > k or abs(a[j]) > k:\n                    continue\n                elif a[i]*a[j] < 0 and abs(a[i]) < abs(a[j]):\n                    count += 1\n                    continue\n                elif a[i]*a[j] < 0 and abs(a[i]) > abs(a[j]):\n                    continue\n                elif a[i]*a[j] == 0:\n                    count += 1\n        return count//2\n    \n    return str(solution(stdin))\n"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Implementation of the algorithm\n    :param stdin: input string\n    :return: output string\n    \"\"\"\n    input = stdin.split(\"\\n\")\n    n = int(input[0])\n    arr = [int(i) for i in input[1].split(\" \")]\n    arr.sort()\n    if n == 2:\n        return str(0)\n    elif n == 1:\n        return str(1)\n    else:\n        result = 0\n        for i in range(n - 2):\n            left = arr[i]\n            right = arr[i + 2]\n            if left + 1 < right:\n                result += 1\n        return str(result)\n\n\ndef"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\""
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \n    return \"NotImplementedError\"\n"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the maximum number of teams of three people the coach can form.\n\n    >>> solution('4\\n1 1 2 1')\n    1\n    >>> solution('2\\n2 2')\n    0\n    >>> solution('7\\n2 2 2 1 1 1 1')\n    3\n    \"\"\"\n    n = int(stdin)\n    groups = [int(num) for num in stdin.split('\\n')[1].split()]\n    groups.sort()\n    print(groups)\n"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    a = list(map(int, stdin.split()))\n    groups = 0\n    for i in range(N):\n        if a[i] > 3:\n            groups += a[i] // 3\n            if a[i] % 3 > 0:\n                groups += 1\n    print(groups)\n    return ''\n\nprint(solution(input()))\n"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Get the maximum number of teams of three people the coach can form.\n    >>> solution(\"4\\n1 1 2 1\")\n    1\n    >>> solution(\"2\\n2 2\")\n    0\n    >>> solution(\"7\\n2 2 2 1 1 1 1\")\n    3\n    >>> solution(\"3\\n1 1 1\")\n    1\n    \"\"\"\n    n = int(stdin.readline().strip())\n    groups = list(map(int, stdin.readline().strip().split()))\n    groups.sort()\n    count = 0\n    for i in range(len(groups)):\n        if groups[i] >= 3:\n            count += 1\n            groups[i] -= 3\n        else:\n            break\n    groups.sort()\n    groups = groups[::-1]\n    if count == 0:\n        return 0\n    if groups[0] >= 3:\n        count += 1\n        groups[0] -= 3\n    if groups[1] >= 2:\n        if groups[0] >= 3 and groups[1] >= 2:\n            count += 1\n            groups[0] -= 3\n            groups[1] -= 2\n    if groups[2] >= 1:\n        if groups[0] >= 3 and groups[1] >= 2 and groups[2] >= 1:\n            count += 1\n            groups[0] -= 3\n            groups[1] -= 2\n            groups[2] -= 1\n    return count\n\n\ndef"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    c = [0] * n\n    for i in range(n):\n        c[i] = int(stdin)\n    return str(solution_helper(c))\n\n\ndef"
    },
    {
        "number": 573,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    return str(abs(a - c) * abs(b - d) + (abs(a - c) + abs(b - d)) // 2)\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = map(int, stdin.split())\n    return abs(x_1-x_2) + abs(y_1-y_2) - abs(abs(x_2-x_1) - abs(y_2-y_1)) * 2\nprint(solution(input()))\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def count_units(x1, y1, x2, y2):\n        return (x2 - x1) * (y2 - y1) + 1\n\n    return str(count_units(*map(int, stdin.split())))\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return str(13)\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x_1, y_1, x_2, y_2 = map(int, stdin.split())\n    return (x_2 - x_1 + 1) * (y_2 - y_1 + 1)\n"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(x) for x in stdin.strip().split()]\n    if (a - b) % 2 == 0:\n        print((c - a) // 2 + (d - b) // 2)\n    else:\n        print((d - a) // 2 + (d - b) // 2 + 1)\n\n\ndef"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Determine the number of cells to be filled\n    '''\n    x_1, y_1, x_2, y_2 = stdin.split(' ')\n    x_1, y_1, x_2, y_2 = int(x_1), int(y_1), int(x_2), int(y_2)\n    \n    if x_1 > x_2 or y_1 > y_2:\n        return 0\n    if y_1 == y_2:\n        if x_1 == x_2:\n            return 0\n        if x_1 < x_2:\n            return ((x_2 - x_1) + 1) * ((y_2 - y_1) + 1)\n        if x_1 > x_2:\n            return ((x_2 - x_1) + 1) * ((y_2 - y_1) + 1)\n    if x_1 == x_2:\n        if y_1 < y_2:\n            return ((x_2 - x_1) + 1) * ((y_2 - y_1) + 1)\n        if y_1 > y_2:\n            return ((x_2 - x_1) + 1) * ((y_2 - y_1) + 1)\n    if x_1 < x_2:\n        if y_1 < y_2:\n            return ((x_2 - x_1) + 1) * ((y_2 - y_1) + 1)\n        if y_1 > y_2:\n            return ((x_2 - x_1) + 1) * ((y_2 - y_1) + 1)\n    if x_1 > x_2:\n        if y_1 < y_2:\n            return ((x_2 - x_1) + 1) * ((y_2 - y_1) + 1)\n        if y_1 > y_2:\n            return ((x_2 - x_1) + 1) * ((y_2 - y_1) + 1)\n    return 0"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split())\n    res = (abs(x2 - x1) // 2) * (abs(y2 - y1) // 2) + abs(x2 - x1) // 2 + abs(y2 - y1) // 2\n    return str(res)\n\n\ndef"
    },
    {
        "number": 574,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  x_1, y_1, x_2, y_2 = [int(s) for s in stdin.split()]\n  n = abs((x_2 - x_1) // 2)\n  m = abs((y_2 - y_1) // 2)\n  return str(n * m)"
    },
    {
        "number": 575,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"\"\n"
    },
    {
        "number": 575,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    a_x, a_y = [int(x) for x in stdin[1].split(' ')]\n    b_x, b_y = [int(x) for x in stdin[2].split(' ')]\n    c_x, c_y = [int(x) for x in stdin[3].split(' ')]\n\n    if a_x == b_x and a_y == c_y:\n        return 'NO'\n\n    a_x, a_y, b_x, b_y, c_x, c_y = sorted([a_x, a_y, b_x, b_y, c_x, c_y])\n\n    if b_y > c_y:\n        b_x, b_y, c_x, c_y = b_x, c_x, c_y, b_y\n\n    if c_y == b_y:\n        if b_x > c_x:\n            b_x, b_y, c_x, c_y = b_x, c_x, c_y, b_y\n\n    return 'YES' if abs(a_x - b_x) <= 1 and abs(a_y - b_y) <= 1 and abs(a_x - c_x) <= 1 and abs(a_y - c_y) <= 1 else 'NO'\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 575,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Determines if the King can escape the Queen's checking.\n    \"\"\"\n    return ''"
    },
    {
        "number": 575,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return \"YES\" if... else \"NO\""
    },
    {
        "number": 575,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 575,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = tuple(int(x) for x in stdin.readline().strip().split())\n    b = tuple(int(x) for x in stdin.readline().strip().split())\n    c = tuple(int(x) for x in stdin.readline().strip().split())\n    return 'YES' if b[0] == c[0] or b[1] == c[1] or abs(b[0] - a[0]) == abs(b[1] - a[1]) else 'NO'\n"
    },
    {
        "number": 575,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    return \"YES\" if board[cx][cy] else \"NO\"\n"
    },
    {
        "number": 575,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Checks if a given queen can reach the target square in a single move\n    '''\n    board_size = int(stdin.split()[0])\n    queen_coord = tuple(map(int, stdin.split()[1:3]))\n    king_coord = tuple(map(int, stdin.split()[3:5]))\n    target_coord = tuple(map(int, stdin.split()[5:7]))\n\n    def is_in_check(board_size, queen_coord, king_coord):\n        q_x, q_y = queen_coord\n        king_x, king_y = king_coord\n        if king_x == q_x or king_y == q_y:\n            return True\n        if abs(king_x - q_x) == abs(king_y - q_y):\n            return True\n        if abs(king_x - q_x) == abs(q_y - king_y):\n            return True\n        return False\n\n    def is_valid_move(board_size, queen_coord, king_coord):\n        q_x, q_y = queen_coord\n        king_x, king_y = king_coord\n\n        if abs(q_x - king_x) < board_size and abs(q_y - king_y) < board_size:\n            if king_x!= q_x and king_y!= q_y:\n                return True\n            elif king_x!= q_x or king_y!= q_y:\n                return True\n        return False\n\n    def check_between_points(q_x, q_y, king_x, king_y):\n        return abs(q_x - king_x) < abs(q_y - king_y)\n\n    if is_valid_move(board_size, queen_coord, king_coord) and not is_in_check(board_size, queen_coord, king_coord):\n        return 'YES'\n    elif not is_in_check(board_size, queen_coord, king_coord) and check_between_points(queen_coord[0], queen_coord[1], target_coord[0], target_coord[1]):\n        return 'YES'\n    else:\n        return 'NO'"
    },
    {
        "number": 575,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 575,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return 'YES' if (abs(a[0] - b[0]) + abs(a[1] - b[1]) == 1) \\\n            and (abs(c[0] - b[0]) + abs(c[1] - b[1]) == 2) \\\n            and (b[0] + b[1]!= a[0] + a[1]) \\\n            and (c[0] + c[1]!= a[0] + a[1]) \\\n            else 'NO'"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"\""
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(solution(line) for line in stdin.split('\\n'))"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solve the problem.\"\"\"\n    # a: list[int] = [int(n) for n in stdin.splitlines()[1].split()]\n    a = [int(n) for n in stdin.splitlines()[1].split()]\n    print(max([math.lcm(a[i], a[j]) for i in range(len(a)) for j in range(i + 1, len(a))]))\n\nsolution(stdin=stdin)\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = [int(i) for i in stdin.readline().strip().split()]\n    m = [1]\n    l = []\n    for i in range(1, n):\n        l.append(gcd(a[i-1], a[i]))\n        m.append(max(l[i-1], m[i-1]))\n    l.append(1)\n    m.append(1)\n    print(max(gcd(l[-1], l[0]), gcd(m[-1], m[0])))\n    return ''"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return str\"\"\"\n    return \"\"\n    pass\n\ndef"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    # the input is supposed to be a string\n    # so we convert it to a list of integers\n    # n is the number of elements in the input\n    n = int(stdin.split()[0])\n    a = [int(i) for i in stdin.split()[1:]]\n\n    # it's a set to keep track of the already calculated LCM's\n    # we don't need to calculate LCM(a[i], a[i])\n    # if it's already calculated\n    seen = set()\n    lcm = 1\n\n    # we find the max of the LCM's of two elements\n    for i in range(n):\n        for j in range(n):\n            if i!= j and lcm * a[i] * a[j] not in seen:\n                lcm = max(lcm, a[i] * a[j])\n                seen.add(lcm * a[i] * a[j])\n\n    return lcm\n\nprint(solution(input()))\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(x) for x in stdin.split(' ')]\n    return str(max([a[i] * a[j] // gcd(a[i], a[j]) for i in range(n) for j in range(i + 1, n)]))\n"
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''5\n   ... 3\n   ... 13 35 77\n   ... ''')\n    1001\n    \"\"\"\n   ..."
    },
    {
        "number": 576,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def get_n_b(s: str) -> (int, int):\n        return (int(s[:len(s)-1]), int(s[len(s)-1:]))\n\n    n, k = get_n_b(stdin.readline())\n    berries = [get_n_b(stdin.readline()) for _ in range(n)]\n    cur_k = 0\n    for i in range(n):\n        cur_k += berries[i][1]\n        cur_k -= berries[i][0]\n        if cur_k < k:\n            cur_k = 0\n    return str(cur_k)\n\ndef"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split('\\n')[0].split(' '))\n    k = min(k, n)\n    n = min(n, k)\n    baskets = []\n    for _ in range(n):\n        _, r = map(int, stdin.split('\\n')[_].split(' '))\n        _, b = map(int, stdin.split('\\n')[_ + 1].split(' '))\n        r = min(r, k)\n        b = min(b, k)\n        baskets.append(r + b)\n\n    baskets.sort(reverse=True)\n    baskets = set(baskets)\n    baskets = sorted(baskets)\n\n    for basket in baskets:\n        if sum(baskets[baskets.index(basket):]) > k:\n            print(baskets.index(basket))\n            break"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    '''Your solution goes here.'''\n    # get input from stdin\n    # n, k = [int(num) for num in stdin.split()]\n    n, k = [int(num) for num in stdin.split('\\n')[0].split()]\n    print(n, k)\n    # a = [int(num) for num in stdin.split()]\n    # b = [int(num) for num in stdin.split()]\n    a = [int(num) for num in stdin.split('\\n')[1].split()]\n    b = [int(num) for num in stdin.split('\\n')[2].split()]\n    print(a, b)\n    # a = [int(num) for num in stdin.split('\\n')[0].split()]\n    # b = [int(num) for num in stdin.split('\\n')[1].split()]\n    print(a, b)\n    # c = [int(num) for num in stdin.split('\\n')[0].split()]\n    # d = [int(num) for num in stdin.split('\\n')[1].split()]\n    # print(c, d)\n    # a = [int(num) for num in stdin.split('\\n')[0].split()]\n    # b = [int(num) for num in stdin.split('\\n')[0].split()]\n    # print(a, b)\n    # z = sorted(zip(a, b), key=lambda x: x[1], reverse=True)\n    # print(z)\n    # a, b = zip(*z)\n    # a = list(a)\n    # b = list(b)\n    # print(a, b)\n    # a = [int(num) for num in stdin.split('\\n')[0].split()]\n    # b = [int(num) for num in stdin.split('\\n')[1].split()]\n    # print(a, b)\n    # a = [int(num) for num in stdin.split('\\n')[0].split()]\n    # b = [int(num) for num in stdin.split('\\n')[0].split()]\n    # print(a, b)\n    # # a = [int(num) for num in stdin.split('\\n')[0].split()]\n    # # b = [int(num) for num in stdin.split('\\n')[0].split()]\n    # print(a, b)\n    # a = [int(num) for num in stdin.split('\\n')[0].split()]\n    # b = [int(num) for num in stdin.split('\\n')[0].split()]\n    # print(a, b)\n    # a = [int(num) for num in stdin.split('\\n')[0].split()]\n    # b = [int(num) for num in stdin.split('\\n')[0].split()]\n    # print(a, b)\n    # a = [int(num) for num in stdin.split('\\n')[0].split()]\n    # b = [int(num) for num in stdin.split('\\n')[0].split()]\n    # print(a, b)\n    # a = [int(num) for num in stdin.split('\\n')[0].split()]\n    # b = [int(num) for num in stdin.split('\\n')[0].split()]\n    # print(a, b)\n    # a = [int(num) for num in stdin.split('\\n')[0].split()]\n    # b = [int(num) for num in stdin.split('\\n')[0].split()]\n    # print(a, b)\n    # a = [int(num) for num in stdin.split('\\n')[0].split()]\n    # b = [int(num) for num in stdin.split('\\n')[0].split()]\n    # print(a, b)\n    # a = [int(num) for num in stdin.split('\\n')[0].split()]\n    # b = [int(num) for num in stdin.split('\\n')[0].split()]\n    # print(a, b)\n    # a = [int(num) for num in stdin.split('\\n')[0].split()]\n    # b = [int(num) for num in stdin.split('\\n')[0].split()]\n    # print(a, b)\n    # a = [int(num) for num in stdin.split('\\n')[0].split()]\n    # b = [int(num) for num in stdin.split('\\n')[0].split()]\n    # print(a, b)\n    # a = [int(num) for num in stdin.split('\\n')[0].split()]\n    # b = [int(num) for num in stdin.split('\\n')[0].split()]\n    # print(a, b)\n    # a = [int(num) for num in stdin.split('\\n')[0].split()]\n    # b = [int(num) for num in stdin.split('\\n')[0].split()]\n    # print(a, b)\n    # a = [int(num) for num in stdin.split('\\n')[0].split()]\n    # b = [int(num) for num in stdin.split('\\n')[0].split()]\n    # print(a, b)\n    # a = [int(num) for num in stdin.split('\\n')[0].split()]\n    # b = [int(num) for num in stdin.split('\\n')[0].split()]\n    # print(a, b)\n    # a = [int(num) for num in stdin.split('\\n')[0].split()]\n    # b = [int(num) for num in stdin.split('\\n')["
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    basket = [0] * (k + 1)\n    for _ in range(n):\n        a, b = list(map(int, stdin.split()))\n        for i in range(a, b + 1):\n            basket[i] += 1\n    return max(basket)\n    \n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    # <int, int> => <int>\n    def combination_sum(n: int, k: int):\n        r = 1\n        for i in range(n, n - k, -1):\n            r *= i\n        for i in range(1, k + 1):\n            r //= i\n        return r\n    \n    # <int, int, int, int> => <int>\n    def combination_sum_with_prob(n: int, k: int, m: int, p: int):\n        r = 0\n        for i in range(n, n - k, -1):\n            r += combination_sum(n=n, k=k) * ((i**m) * (n**(k - m))) * (p**k) * ((1 - p)**(n - k))\n        return r\n    \n    # <int, int, int, int, int> => <int>\n    def combination_sum_with_sum(n: int, k: int, m: int, p: int, s: int):\n        r = 0\n        for i in range(n, n - k, -1):\n            r += combination_sum(n=n, k=k) * ((i**m) * (n**(k - m))) * (p**k) * ((1 - p)**(n - k)) * sum([(i**m) * (n**(k - m)), (i**m) * (n**(k - m)) * (i * (1 - p) + s)])\n        return r\n    \n    _, capacity = stdin.split('\\n')\n    capacity = int(capacity)\n    n_red, n_blue = map(int, stdin.split('\\n')[:2])\n    red_berries = tuple(map(int, stdin.split('\\n')[2:]))\n    n_total_berries = sum(red_berries)\n    n_baskets = max(red_berries)\n    \n    if n_total_berries < capacity:\n        return 0\n    \n    # reduce number of items if necessary\n    if sum(red_berries) - (red_berries[-1] + red_berries[-2]) < capacity:\n        n_baskets += (capacity - n_total_berries + red_berries[-1] + red_berries[-2]) // red_berries[-2]\n        if capacity - n_total_berries + red_berries[-1] + red_berries[-2] % red_berries[-2] > 0:\n            n_baskets += 1\n    \n    # compute sum of probabilities for each combination of red and blue berries\n    probabilities = []\n    for n_items in range(n_red + 1, n_baskets + 1):\n        probabilities.append((sum(red_berries[:n_items]), sum(red_berries[:n_items] + [capacity - sum(red_berries[:n_items])])))\n    \n    # compute sum of the probability of choosing each combination of red and blue berries\n    probabilities_sum = []\n    for i, (r, b) in enumerate(probabilities):\n        p = probabilities[i - 1][0] if i >= 1 else 0\n        q = probabilities[i][0] if i < len(probabilities) - 1 else 1\n        probabilities_sum.append(p * (1 - p) * (1 - q) / ((1 - q) * (1 - p) + (1 - p) * q))\n    \n    # compute sum of probabilities of the sum of each combination of red and blue berries\n    probabilities_sum_sum = 0\n    for i in range(n_red + 1, n_baskets + 1):\n        probabilities_sum_sum += combination_sum_with_prob(n=capacity, k=i, m=n_red, p=probabilities_sum[-1])\n    \n    # compute sum of probabilities of the sum of each combination of red and blue berries (for the case of the first combination of red and blue berries is chosen)\n    probabilities_sum_sum_first = 0\n    for i in range(1, n_red + 1):\n        probabilities_sum_sum_first += combination_sum_with_sum(n=capacity, k=i, m=n_red, p=probabilities_sum[-1], s=sum(red_berries[:i]))\n    \n    # return the sum of all probabilities\n    return sum(probabilities_sum_sum * (1 - probabilities_sum_sum_first) / probabilities_sum_sum)\n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    red, blue = [0] * n, [0] * n\n    for i in range(n):\n        a, b = map(int, stdin.readline().split())\n        red[i] = a\n        blue[i] = b\n    red.sort()\n    blue.sort()\n    count = 0\n    j = 0\n    for i in range(n):\n        if red[i] > k:\n            break\n        if red[i] + j > k:\n            j = 0\n            count += 1\n        j += blue[i]\n    return count\n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.readline().split())\n    berries = [tuple(map(int, stdin.readline().split())) for _ in range(N)]\n    berries.sort(key=lambda t: t[1], reverse=True)\n    berries.sort(key=lambda t: t[0])\n    print(berries)\n    baskets = []\n    total_red = 0\n    total_blue = 0\n    for i in range(N):\n        if berries[i][0] + total_red < berries[i][1] + total_blue:\n            baskets.append(berries[i])\n            total_red += berries[i][0]\n            total_blue += berries[i][1]\n    baskets.sort(key=lambda t: t[0])\n    print(baskets)\n    print(sum([t[0] for t in baskets]))\n    return ''\n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find the max number of baskets that can be filled\n    \"\"\"\n    # Read the input and unpack\n    n, k = map(int, stdin.split())\n    shrub_list = []\n    for _ in range(n):\n        red, blue = map(int, stdin.split())\n        shrub_list.append((red, blue))\n    \n    # Optimize the problem\n    # Find all combinations of the shrubs and check which can be filled\n    count = 0\n    for red, blue in itertools.combinations(shrub_list, r=2):\n        if sum(red) <= k and sum(blue) <= k:\n            count += 1\n    return str(count)\n"
    },
    {
        "number": 577,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    [n, k] = list(map(int, stdin.readline().strip().split(' ')))\n    baskets = [[0, 0]] * n\n    for i in range(n):\n        [baskets[i][0], baskets[i][1]] = list(map(int, stdin.readline().strip().split(' ')))\n\n    baskets.sort(key=lambda x: (x[0], x[1]))\n\n    i = 0\n    count = 0\n    while i < n and k > 0:\n        if baskets[i][0] <= k:\n            count += 1\n            k -= baskets[i][0]\n        else:\n            k -= 1\n        i += 1\n\n    return count\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, e = stdin.split('e')\n    # print(a, b, e)\n    return str(int(a) * pow(10, int(b)))\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = stdin.split('.')\n    a, b, c = int(a), int(b), int(c)\n    if b == 0:\n        return '{}.{}{}'.format(a, c, d)\n    else:\n        return '{}.{}.{}'.format(a, c, d)"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin.split('e')\n    a = int(a)\n    b = int(b)\n    return str(a * 10**b)"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return str(stdin)\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split('e')\n    if abs(int(a)) == 0:\n        return '0'\n    else:\n        return '{:.0f}'.format(float(a) * pow(10, int(b)))\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = stdin.split('e')\n    if a == '0':\n        print('0.' + c)\n    elif b == '0':\n        print(a + '.0')\n    else:\n        print(a + '.' + c)\n    return solution\nsolution(input())\n\ndef"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a = float(stdin)\n    b = str(int(a * 10 ** len(str(a).split('.')[1])))\n    c = str(int(a * 10 ** len(str(a).split('.')[1])))\n    d = str(int(a * 10 ** len(str(a).split('.')[1])))\n    print(c + b + d[1]) if len(b) < len(d[1]) else print(c + d[1] + b) if len(b) > len(d[1]) else print(c + d[1] + b)\nsolution(input())\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x, y = stdin.split('e')\n    x, y = float(x), int(y)\n    return str(round(x*(10**y), 9))\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Get the distance between him and the girl.\"\"\"\n    distance = float(stdin)\n    if int(distance) == distance:\n        return str(int(distance))\n\n    return str(distance).replace('.', '').rstrip('0')\n"
    },
    {
        "number": 578,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return str(round(float(stdin) * 10 ** -int(stdin.split(\"e\")[1]), len(stdin.split(\"e\")[0]) * -1))"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds the maximum possible score at the end of the game.\n    >>> solution('5 2\\n2 4 5 1 3\\n3 4 -10 -8 8')\n    '8'\n    >>> solution('5 2\\n2 4 5 1 3\\n3 4 -10 -8 8\\n7 7 7 7 7')\n    '0'\n    >>> solution('5 2\\n2 4 5 1 3\\n3 4 -10 -8 8\\n3 1 3 5 5')\n    '8'\n    >>> solution('5 2\\n2 4 5 1 3\\n3 4 -10 -8 8\\n3 1 3 5 5\\n2 1 3')\n    '8'\n    >>> solution('5 2\\n2 4 5 1 3\\n3 4 -10 -8 8\\n3 1 3 5 5\\n2 1 3\\n2 1 3')\n    '0'\n    >>> solution('5 2\\n2 4 5 1 3\\n3 4 -10 -8 8\\n3 1 3 5 5\\n2 1 3\\n2 1 3\\n3 4 -10 -8 8\\n3 1 3 5 5')\n    '0'\n    >>> solution('5 2\\n2 4 5 1 3\\n3 4 -10 -8 8\\n3 1 3 5 5\\n2 1 3\\n2 1 3\\n3 4 -10 -8 8\\n3 1 3 5 5\\n2 1 3\\n2 1 3\\n3 4 -10 -8 8\\n3 1 3 5 5\\n2 1 3\\n2 1 3')\n    '8'\n    >>> solution('5 2\\n2 4 5 1 3\\n3 4 -10 -8 8\\n3 1 3 5 5\\n2 1 3\\n2 1 3\\n3 4 -10 -8 8\\n3 1 3 5 5\\n2 1 3\\n2 1 3\\n3 4 -10 -8 8\\n3 1 3 5 5\\n2 1 3\\n2 1 3\\n3 4 -10 -8 8\\n3 1 3 5 5\\n2 1 3\\n2 1 3\\n2 1 3')\n    '0'\n    >>> solution('5 2\\n2 4 5 1 3\\n3 4 -10 -8 8\\n3 1 3 5 5\\n2 1 3\\n2 1 3\\n3 4 -10 -8 8\\n3 1 3 5 5\\n2 1 3\\n2 1 3\\n3 4 -10 -8 8\\n3 1 3 5 5\\n2 1 3\\n2 1 3\\n2 1 3')\n    '8'\n    >>> solution('5 2\\n2 4 5 1 3\\n3 4 -10 -8 8\\n3 1 3 5 5\\n2 1 3\\n2 1 3\\n3 4 -10 -8 8\\n3 1 3 5 5\\n2 1 3\\n2 1 3\\n3 4 -10 -8 8\\n3 1 3 5 5\\n2 1 3\\n2 1 3')\n    '8'\n    >>> solution('5 2\\n2 4 5 1 3\\n3 4 -10 -8 8\\n3 1 3 5 5\\n2 1 3\\n2 1 3\\n3 4 -10 -8 8\\n3 1 3 5 5\\n2 1 3\\n2 1 3\\n3 4 -10 -8 8\\n3 1 3 5 5\\n2 1 3')\n    '8'\n    >>> solution('5 2\\n2 4 5 1 3\\n3 4 -10 -8 8\\n3 1 3 5 5\\n2 1 3\\n2 1 3\\n3 4 -10 -8 8\\n3 1 3 5 5\\n2 1 3\\n2 1 3\\n3 4 -10 -8 8\\n3 1 3 5 5\\n2 1 3')\n    '8'\n    >>> solution('5 2\\n2 4 5 1 3\\n3 4 -10 -8 8\\n3 1 3 5 5\\n2 1 3\\n2 1 3\\n3 4 -10 -8 8\\n3 1 3 5 5\\n2 1 3\\n2 1 3\\n3 4 -10 -8 8\\n3 1 3 5 5\\n2 1 3')\n    '8'\n    >>> solution('5 2\\n2 4 5 1 3\\n3 4 -10 -8 8\\n3 1 3 5 5\\n2 1 3\\n2 1 3\\n3 4 -10 -8 8\\n3 1 3 5 5\\n2 1 3\\n2 1 3\\n3 4 -10 -8 8\\n3 1 3 5 5\\n2 1 3\\n2 1 3\\n3 4 -10 -8 8\\n3 1 3 5 5\\n2 1 3')\n    '8'\n    \"\"\"\n    arr = list(map(int, stdin.split()))\n    n, k = arr[0], arr[1]\n    perms = list(map(int, stdin.split()))\n    score = list(map(int, stdin.split()))\n    \n    perms.sort()\n    score.sort()\n    max_score = 0\n    for i, s in enumerate(score):\n        perms = [x for x in perms if x!= i+1]\n        if i+1 <= k:\n            max_score += s\n            k -= (i+1)\n            max_score += perms.pop(0)\n            perms.append(i+1)\n        else:\n            break\n    return str(max_score)\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return str(result)"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.readline().split())\n    P, C = [0] + list(map(int, stdin.readline().split())), [0] + list(map(int, stdin.readline().split()))\n\n    score = 0\n    for i in range(1, N+1):\n        if i == P[i]:\n            continue\n        score += C[P[i]]\n        P[i] = P.index(i)\n        for _ in range(K):\n            if P[i] == i:\n                score += C[i]\n                P[i] = P.index(i)\n            else:\n                score += -C[i]\n                P[i] = P.index(i)\n\n    return score"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''Finds the maximum possible score at the end of the game using recursion.'''\n    def recursive_solution(initial_number: int, moves: int) -> int:\n        '''Helper function for solution().\n        Returns the maximum possible score at the end of the game.\n        '''\n        def max_score_at_end(move_number: int, moves: int) -> int:\n            '''Returns the maximum possible score at the end of the game using recursion.'''\n            if move_number == moves:\n                return 0\n            elif move_number == 0:\n                return initial_number\n            elif move_number == 1:\n                return max(recursive_solution(initial_number - initial_number, moves),\n                           recursive_solution(initial_number * -1, moves))\n            elif move_number > 1:\n                return max(recursive_solution(initial_number + initial_number, moves),\n                           recursive_solution(initial_number * -1, moves))\n        return max_score_at_end\n\n    N, K = map(int, stdin.split('\\n')[:2])\n    initial_board = list(map(int, stdin.split('\\n')[2].split()))\n    move_info = list(map(int, stdin.split('\\n')[3].split()))\n    return str(recursive_solution(initial_board[0], move_info[1]) + move_info[0])\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    N, K = map(int, stdin.split('\\n')[0].split())\n    arr = [int(i) for i in stdin.split('\\n')[1].split()]\n    d = dict()\n    for i, x in enumerate(arr):\n        d[i + 1] = x\n\n    def rec(start: int, step: int = 0) -> int:\n        if step >= K:\n            return 0\n        cur = d[start]\n        if start == start + 1:\n            return step * cur\n        return max(\n            rec(start + 1, step + 1) + cur,\n            rec(start + 2, step + 1),\n        )\n\n    return str(rec(1))\n    '''\n    N, K = map(int, stdin.split('\\n')[0].split())\n    arr = [int(i) for i in stdin.split('\\n')[1].split()]\n    d = dict()\n    for i, x in enumerate(arr):\n        d[i + 1] = x\n\n    dp = [[0] * K for i in range(N + 1)]\n    for i in range(1, N + 1):\n        dp[i][0] = d[i]\n    for i in range(1, K + 1):\n        for j in range(1, N + 1):\n            dp[j][i] = dp[j][i - 1] + d[j]\n            dp[j][i] = max(dp[j][i], dp[j + 1][i - 1])\n    return str(dp[1][K])\n\n\nfor i in range(int(input())):\n    print(solution(input()))\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    from collections import Counter\n    import itertools as it\n    '''\n    # data = [int(s) for s in stdin.split('\\n')]\n    data = [s for s in stdin.split('\\n')]\n    N, K = data[0].split()\n    P = list(map(int, data[1].split()))\n    C = list(map(int, data[2].split()))\n    # c = Counter(P)\n    # # print(c)\n    # combinations = list(it.combinations(c.keys(), K))\n    # # print(combinations)\n    # best = 0\n    # for comb in combinations:\n    #     best = max(best, sum(C[i] for i in comb))\n    # print(best)\n    # for c in it.combinations(C, K):\n    #     if sum(c) > best:\n    #         best = sum(c)\n    # print(best)\n\n    # Method 2\n    import itertools as it\n    def move(p, c):\n        k = min(p.index(i) for i in range(len(p)) if i not in p)\n        return p[k:] + p[:k]\n\n    p = P\n    c = C\n    best = 0\n    for k in range(1, K + 1):\n        best = max(best, sum(c[i] for i in move(p, c) if i!= p.index(p.index(i) + 1)))\n        p = move(p, c)\n    print(best)\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.readline().split())\n    P = tuple(map(int, stdin.readline().split()))\n    C = tuple(map(int, stdin.readline().split()))\n\n    return max(sum(P[i] * C[i] for i in range(N)) - K, 0)\n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    stdin = stdin.split('\\n')\n    N, K = [int(i) for i in stdin[0].split(' ')]\n    S = [int(i) for i in stdin[1].split(' ')]\n    C = [int(i) for i in stdin[2].split(' ')]\n    score = 0\n    for j in range(K):\n        max_score = 0\n        for i in range(N):\n            if C[i] < 0:\n                score += abs(C[i])\n            else:\n                score += C[i]\n            C[i] += S[i]\n            if C[i] > max_score:\n                max_score = C[i]\n            C[i] -= S[i]\n            if i < N - 1:\n                score -= S[i]\n        score += max_score\n    return str(score)\n    \n    \n"
    },
    {
        "number": 579,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split()\n    n = int(n)\n    k = int(k)\n    permutation = stdin.split()[1::2]\n    permutation = [int(i) for i in permutation]\n    permutation.sort()\n    permutation.append(permutation[0])\n    c = stdin.split()[2::2]\n    c = [int(i) for i in c]\n    sum = 0\n    for i in range(n):\n        c[permutation[i]] += sum\n        sum = c[permutation[i]]\n    return str(max(c))\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return res\n\"\"\"\nfrom functools import lru_cache\nfrom itertools import permutations\n\n\ndef"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nfrom typing import List\n\n\ndef"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return \"\""
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\n\n\nimport sys\n\nsys.setrecursionlimit(10000000)\nimport sys\nfrom collections import defaultdict\nfrom typing import List\n\n\ndef"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\nfrom math import inf\n\n\nclass Road:\n    def __init__(self, start: int, end: int, time: int):\n        self.start = start\n        self.end = end\n        self.time = time\n\n    def __str__(self):\n        return f\"Road({self.start}, {self.end}, {self.time})\"\n\n    def __repr__(self):\n        return str(self)\n\n    def __eq__(self, other):\n        if not isinstance(other, Road):\n            return False\n        return (self.start == other.start) & (self.end == other.end) & (self.time == other.time)\n\n\ndef"
    },
    {
        "number": 580,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s, t = map(int, stdin.readline().split())\n    roads = [tuple(map(int, stdin.readline().split())) for _ in range(m)]\n    dist = [[inf] * n for _ in range(n)]\n    for r in roads:\n        a, b, d = r\n        dist[a - 1][b - 1] = d\n        dist[b - 1][a - 1] = d\n    dist[s - 1][s - 1] = 0\n    for i in range(n):\n        for j in range(i, n):\n            for k in range(i, n):\n                d = dist[i][j] + dist[j][k] + dist[k][i]\n                if dist[i][k] > d:\n                    dist[i][k] = dist[j][k] = dist[k][i] = d\n    for i in range(n):\n        for j in range(n):\n            if dist[i][j] == inf:\n                dist[i][j] = 0\n    if t == s:\n        return \"YES\"\n    dp = [[inf] * n for _ in range(2)]\n    dp[0][s - 1] = 0\n    dp[1][t - 1] = 0\n    for i in range(n):\n        for j in range(2):\n            for k in range(n):\n                d = dp[j][k]\n                if dist[i][k] < d:\n                    if j:\n                        dp[1 - j][k] = min(dp[1 - j][k], dist[i][k] + dp[j][k])\n                    else:\n                        dp[j][k] = min(dp[j][k], dist[i][k] + d)\n    for i in range(2):\n        if dp[i][t - 1] == inf:\n            return \"NO\"\n    ans = inf\n    for r in roads:\n        a, b, d = r\n        ans = min(ans, dp[i][a - 1] + dp[1 - i][b - 1])\n    return ans\n\n\n-----Test-----"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    from math import inf\n    def dfs(u: int, v: int, edge_count: int) -> int:\n        if len(edges[u]) == 1:\n            return edge_count\n        elif len(edges[v]) == 1:\n            return edge_count\n        else:\n            return max(dfs(edges[u][0], v, edge_count + edges[u][1]), dfs(edges[u][0], v, edge_count + edges[v][1]))\n    \n    def dfs2(u: int, v: int, edge_count: int) -> int:\n        if len(edges[u]) == 1:\n            return edge_count\n        elif len(edges[v]) == 1:\n            return edge_count\n        else:\n            return min(dfs2(edges[u][0], v, edge_count + edges[u][1]), dfs2(edges[u][0], v, edge_count + edges[v][1]))\n    \n    n = int(stdin.readline())\n    edges = [list() for _ in range(n + 1)]\n    for line in stdin:\n        x, y, weight = map(int, line.split())\n        edges[x].append((y, weight))\n        edges[y].append((x, weight))\n    \n    \n    return max(dfs(1, n, 0), dfs(1, n, 0))\n    #return dfs2(1, n, 0)"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    return \"\"\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    result = 0\n    while len(stdin) > 1:\n        a, b = map(int, stdin.split(\" \"))\n        result += max(tree[a], tree[b])\n        stdin = stdin[stdin.find(\" \") + 1:]\n    return str(result)\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    2.1 A\n    2.2 B\n    2.3 A+B\n    2.4 B+A\n    2.5 A+B+C\n    2.6 B+C+A\n    2.7 C+A+B\n    2.8 C+B+A\n    2.9 C+A+B+D\n    3.1 A+B+D\n    3.2 B+D+A\n    3.3 C+D+A\n    3.4 C+D+A+E\n    3.5 D+E+A\n    3.6 E+A+D\n    3.7 E+D+A\n    3.8 E+A+D+F\n    3.9 F+E+A\n    4.1 F+E+A+G\n    4.2 G+F+E+A\n    4.3 G+F+E+A+H\n    4.4 H+G+F+E+A\n    4.5 H+G+F+E+A+I\n    4.6 I+H+G+F+E+A\n    4.7 I+H+G+F+E+A+J\n    4.8 J+I+H+G+F+E+A\n    4.9 J+I+H+G+F+E+A+K\n    5.1 K+J+I+H+G+F+E+A\n    5.2 L+K+J+I+H+G+F+E+A\n    5.3 L+K+J+I+H+G+F+E+A+M\n    5.4 M+L+K+J+I+H+G+F+E+A\n    5.5 M+L+K+J+I+H+G+F+E+A+N\n    5.6 N+M+L+K+J+I+H+G+F+E+A\n    5.7 N+M+L+K+J+I+H+G+F+E+A+O\n    5.8 O+N+M+L+K+J+I+H+G+F+E+A\n    5.9 O+N+M+L+K+J+I+H+G+F+E+A+P\n    6.1 P+O+N+M+L+K+J+I+H+G+F+E+A\n    6.2 Q+P+O+N+M+L+K+J+I+H+G+F+E+A\n    6.3 Q+P+O+N+M+L+K+J+I+H+G+F+E+A+S\n    6.4 S+Q+P+O+N+M+L+K+J+I+H+G+F+E+A\n    6.5 S+Q+P+O+N+M+L+K+J+I+H+G+F+E+A+T\n    6.6 T+S+Q+P+O+N+M+L+K+J+I+H+G+F+E+A\n    6.7 T+S+Q+P+O+N+M+L+K+J+I+H+G+F+E+A+U\n    6.8 U+T+S+Q+P+O+N+M+L+K+J+I+H+G+F+E+A\n    6.9 U+T+S+Q+P+O+N+M+L+K+J+I+H+G+F+E+A+V\n    7.1 V+U+T+S+Q+P+O+N+M+L+K+J+I+H+G+F+E+A\n    7.2 W+V+U+T+S+Q+P+O+N+M+L+K+J+I+H+G+F+E+A\n    7.3 W+V+U+T+S+Q+P+O+N+M+L+K+J+I+H+G+F+E+A+Y\n    7.4 Y+W+V+U+T+S+Q+P+O+N+M+L+K+J+I+H+G+F+E+A\n    7.5 Y+W+V+U+T+S+Q+P+O+N+M+L+K+J+I+H+G+F+E+A+A\n    7.6 A+Y+W+V+U+T+S+Q+P+O+N+M+L+K+J+I+H+G+F+E+A\n    7.7 A+Y+W+V+U+T+S+Q+P+O+N+M+L+K+J+I+H+G+F+E+A+M\n    7.8 M+A+Y+W+V+U+T+S+Q+P+O+N+M+L+K+J+I+H+G+F+E+A\n    7.9 M+A+Y+W+V+U+T+S+Q+P+O+N+M+L+K+J+I+H+G+F+E+A+N\n    8.1 N+M+A+Y+W+V+U+T+S+Q+P+O+N+M+L+K+J+I+H+G+F+E+A\n    8.2 N+M+A+Y+W+V+U+T+S+Q+P+O+N+M+L+K+J+I+H+G+F+E+A+O\n    8.3 O+N+M+A+Y+W+V+U+T+S+Q+P+O+N+M+L+K+J+I+H+G+F+E+A\n    8.4 O+N+M+A+Y+W+V+U+T+S+Q+P+O+N+M+L+K+J+I+H+G+F+E+A+P\n    8.5 P+O+N+M+A+Y+W+V+U+T+S+Q+P+O+N+M+L+K+J+I+H+G+F+E+A\n    8.6 Q+P+O+N+M+A+Y+W+V+U+T+S+Q+P+O+N+M+L+K+J+I+H+G+F+E+A\n    8.7 Q+P+O+N+M+A+Y+"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    def find_child(child: int) -> int:\n        for parent in parent_of[child]:\n            if parent not in visited:\n                visited.append(parent)\n                find_child(parent)\n    \n    n = int(stdin.readline())\n    parent_of = {}\n    visited = []\n    \n    for index, line in enumerate(stdin.readlines()):\n        parent, child = [int(x) for x in line.split()]\n        \n        if parent not in parent_of:\n            parent_of[parent] = []\n        \n        if child not in parent_of:\n            parent_of[child] = []\n        \n        parent_of[parent].append(child)\n        parent_of[child].append(parent)\n    \n    parent_of[1].append(2)\n    parent_of[2].append(1)\n    \n    for index, line in enumerate(stdin.readlines()):\n        parent, child = [int(x) for x in line.split()]\n        visited.append(parent)\n        visited.append(child)\n        visited.append(parent)\n        visited.append(child)\n        \n    for node in parent_of:\n        if node not in visited:\n            visited.append(node)\n            find_child(node)\n    \n    return len(visited) - 2\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(str('''5\n   ... 1 2\n   ... 1 3\n   ... 2 4\n   ... 2 5\n   ... '''))\n    '9\\n3 5 5\\n4 3 3\\n4 1 1\\n4 2 2'\n    \"\"\"\n    return '\\n'.join(\n        map(\n            lambda l: f'{l[0]}, {l[1]}, {l[2]}',\n            [\n                map(int, line.split())\n                for line in stdin.strip().splitlines()\n            ],\n        )\n    )"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    \n    edge_list = []\n    for _ in range(n-1):\n        edge_list.append(tuple(map(int, stdin.split(\" \"))))\n    edge_list.sort(key=lambda x: x[2])\n    \n    dp = [[0,0,0] for _ in range(n+1)]\n    dp[1][1] = edge_list[0][2]\n    for edge in edge_list:\n        a, b, c = edge\n        dp[a][1] += c\n        dp[b][1] += c\n    dp[1][1] = 0\n    \n    dp[1][2] = 1\n    for edge in edge_list:\n        a, b, c = edge\n        dp[a][2] += 1\n        dp[b][2] += 1\n    \n    res = 0\n    for i in range(2, n+1):\n        a, b, c = dp[i]\n        res = max(res, c)\n        if a < b:\n            res = max(res, dp[a][1] + c)\n        if b < a:\n            res = max(res, dp[b][1] + c)\n    return res\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    def func(s):\n        a, b = map(int, s.split())\n        return a, b\n\n    def func2(s):\n        a, b, c = map(int, s.split())\n        return a, b, c\n\n    def func3(s):\n        a, b, c = map(int, s.split())\n        return a, b, c\n    \n    n = int(stdin.readline())\n    dic = {}\n    for _ in range(n - 1):\n        a, b = func(stdin.readline())\n        dic[(a, b)] = True\n    \n    ans = 0\n    l = []\n    for i in range(2 * n):\n        s = stdin.readline().strip()\n        if len(s) == 0:\n            break\n        if ',' in s:\n            a, b, c = func2(s)\n            ans += c\n            l.append((a, b, c))\n        else:\n            a, b = func(s)\n            ans += abs(a - b)\n            l.append((a, b))\n    l.sort(key=lambda x: x[2])\n    l.sort(key=lambda x: x[0])\n    l.sort(key=lambda x: x[1])\n    print(ans)\n    for i in l:\n        print(*i)\n"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, *edges = map(int, stdin.splitlines())\n    adj = [[] for _ in range(N)]\n    for a, b in edges:\n        a, b = a - 1, b - 1\n        adj[a].append(b)\n        adj[b].append(a)\n\n    dp = [[0, 0, 0] for _ in range(N)]\n    visited = [0 for _ in range(N)]\n    path = [0 for _ in range(N)]\n    q = [0]\n    while q:\n        u = q.pop()\n        for v in adj[u]:\n            if not visited[v]:\n                visited[v] = 1\n                path[v] = u\n                q.append(v)\n                dp[v][0] = dp[u][0] + 1\n                dp[v][1] = dp[u][0] + dp[u][2]\n                dp[v][2] = dp[u][1] + 1\n    ans = 0\n    for u in range(N):\n        ans = max(ans, dp[u][0])\n    print(ans)\n    for u in range(N):\n        print(path[u] + 1, u + 1, dp[u][0])\n\n    return ''\n\n\ndef"
    },
    {
        "number": 581,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    nodes = list(stdin.split('\\n'))\n    # O(n^3)\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                if i!= j and i!= k and j!= k:\n                    if int(nodes[i]) + int(nodes[j]) + int(nodes[k]) == int(n):\n                        return i + 1, j + 1, k + 1"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\" Finds the minimum number of seconds required to get rid of\n        categories with the same number of publications.\n    \"\"\"\n    # Prepare input\n    n, *a = map(int, stdin.split('\\n')[0].split())\n    t = list(map(int, stdin.split('\\n')[1].split()))\n\n    # Find min(t[i] * (n - a[i]))\n    return min(t[i] * (n - a[i]) for i in range(n))\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\nfrom collections import Counter\n\n\ndef"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split(' ')))\n    t = list(map(int, stdin.readline().split(' ')))\n    return '0'\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\ndef"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, *a, t = [int(x) for x in stdin.split('\\n')]\n    return str(max(x - y for x, y in zip(a, [sum(a[:i]) for i in range(n)])))\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = [int(x) for x in stdin.split('\\n')[0].split()]\n    b = [int(x) for x in stdin.split('\\n')[1].split()]\n    c = [int(x) for x in stdin.split('\\n')[2].split()]\n    \n    max_value = max(a)\n    \n    start = 0\n    end = sum(a)\n    \n    result = float('inf')\n    \n    while start!= end:\n        mid = (start + end) // 2\n        if mid == 0:\n            break\n        if sum(max_value - x for x in a) < mid:\n            start = mid + 1\n        else:\n            end = mid\n            \n    start = 0\n    end = max(c)\n    \n    while start!= end:\n        mid = (start + end) // 2\n        if mid == 0:\n            break\n        if sum(max_value - x for x in b) < mid:\n            start = mid + 1\n        else:\n            end = mid\n    \n    return end\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Get n and a list of m integers t.\n\n    Return the minimum total time necessary to add publications to the result of batch algorithm execution, so all categories have a different number of publications.\n    \"\"\"\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    t = list(map(int, stdin.readline().split()))\n\n    return 0\n"
    },
    {
        "number": 582,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    cnt = list(map(int, stdin.split(\"\\n\")[0].split()))\n    a = list(map(int, stdin.split(\"\\n\")[1].split()))\n    t = list(map(int, stdin.split(\"\\n\")[2].split()))\n\n    result = 0\n    for i in range(1, len(cnt)):\n        if cnt[i]!= cnt[i-1]:\n            result += t[i-1]\n    print(result)\n    return ''"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m = stdin.count(')')\n    n = stdin.count('(')\n    stdin = stdin[::-1]\n    s = stdin.replace(')', '*')\n    s = s.replace('(', ')')\n    s = s.replace('*', '(')\n    s = s.replace(')', '(')\n    s = s.replace('(', ')')\n    stdin = stdin.replace(')', '*')\n    stdin = stdin.replace('(', ')')\n    stdin = stdin.replace('*', '(')\n    stdin = stdin.replace(')', '(')\n    stdin = stdin.replace('(', ')')\n    if n == 1:\n        return 0\n    k = 0\n    i = 0\n    j = 1\n    n = len(s)\n    if m == 1:\n        return n\n    while k < m and i < m and j < m:\n        while s[i] == ')':\n            i += 1\n        while s[j] == '(':\n            j += 1\n        if j < m and i < m and s[i] == '*' and s[j] == '*' and s[i + 1:j] == s[i + 2:j - 1]:\n            k = max(k, j - i + 1)\n            j += 1\n        else:\n            k += 1\n            i += 1\n            j += 1\n    return k\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    bracket_string = stdin\n    n = len(bracket_string)\n    bracket_string += bracket_string\n    bracket_string = bracket_string[1:-1]\n\n    max_beauty = 0\n    max_bracket_length = 0\n    for i in range(n):\n        for j in range(i, n):\n            beauty = cyclical_shift_beauty(bracket_string, i, j)\n            if max_beauty < beauty:\n                max_bracket_length = j - i + 1\n                max_beauty = beauty\n\n    return str(max_beauty) +'' + str(max_bracket_length)\n\n\ndef"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    s = stdin\n    n = len(s)\n    #  ans = 0\n    ans_l = -1\n    ans_r = -1\n    k = -1\n    while True:\n        k += 1\n        tmp = s[k:k+n] + s[0:k]\n        # print(tmp)\n        if tmp.count(\"(\") == n:\n            if ans_l == -1:\n                ans_l = k\n        if tmp.count(\")\") == n:\n            if ans_r == -1:\n                ans_r = k\n        # if ans > 0:\n        #     break\n        if k >= n - 1:\n            break\n    print(ans_l, ans_r)\n    print(ans_l+1, ans_r+1)\n    return s[ans_l:ans_r+1][::-1] + s[ans_r+1:ans_l+1]\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Solution to the problem.\n\n    Input:\n    string, consisting of \"(\" and \")\" only.\n\n    Output:\n    maximal beauty.\n    \"\"\"\n   ...\n    def cyclical_shift(string):\n        \"\"\"\n        Returns cyclical shift of string.\n        \"\"\"\n        return string[-1:] + string[:-1]\n\n    def count_correct_bracket_sequence(string):\n        \"\"\"\n        Returns number of correct bracket sequence for the given string.\n        \"\"\"\n       ...\n   ...\n\n    def swap(string, l, r):\n        \"\"\"\n        Swaps two characters of string.\n        \"\"\"\n       ...\n   ...\n\n    def find_max_beauty(string):\n        \"\"\"\n        Finds maximal beauty for the given string.\n        \"\"\"\n       ...\n\n    string = stdin\n    string_with_cyclical_shifts = [cyclical_shift(string) for _ in range(count_correct_bracket_sequence(string))]\n    max_beauty = find_max_beauty(string)\n    for l, r in zip(range(len(string)), range(len(string), 0, -1)):\n        swapped = swap(string, l, r)\n        if count_correct_bracket_sequence(swapped) > count_correct_bracket_sequence(string):\n            max_beauty = find_max_beauty(swapped)\n            break\n    return max_beauty\n    return result\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = (stdin.count(c) for c in \"()\")\n    if a == b == 0:\n        return f\"0 {1, 1}\"\n    elif a == 0 and b > 0:\n        return f\"{b}\"\n    elif a > 0 and b == 0:\n        return f\"{a}\"\n    else:\n        return f\"{min(a, b)} {max(a, b)}\"\n\nprint(solution(input()))\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    length = int(stdin)\n    brackets = stdin[:length]\n    len_brackets = len(brackets)\n    max_indexes = (0, 1)\n    max_distance = 0\n\n    for i in range(len_brackets):\n        for j in range(i+1, len_brackets):\n            bracket_copy = brackets[:]\n            bracket_copy[i], bracket_copy[j] = bracket_copy[j], bracket_copy[i]\n            bracket_copy = ''.join(bracket_copy)\n            distance = 0\n            for k in range(len_brackets):\n                if bracket_copy[k]!= brackets[k]:\n                    distance += 1\n            if distance > max_distance:\n                max_indexes = (i, j)\n                max_distance = distance\n    return str(max_distance) +'' + str(max_indexes[0]) +'' + str(max_indexes[1])\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    line1 = stdin.split(\"\\n\")[0]\n    brackets = line1[1:-1]\n    \n    n = int(line1[0])\n    \n    def is_valid(bracket_sequence: str) -> bool:\n        stack = list()\n        for bracket in bracket_sequence:\n            if bracket == \"(\":\n                stack.append(bracket)\n            else:\n                if not stack:\n                    return False\n                else:\n                    stack.pop()\n        \n        if not stack:\n            return True\n        else:\n            return False\n    \n    def max_beauty(brackets: str) -> int:\n        max_beauty = 0\n        for i in range(len(brackets)):\n            for j in range(i, len(brackets)):\n                bracket_sequence = brackets[:i] + brackets[j] + brackets[i+1:j] + brackets[i] + brackets[j+1:]\n                if is_valid(bracket_sequence):\n                    max_beauty = max(max_beauty, cyclical_shifts(bracket_sequence))\n        return max_beauty\n    \n    def cyclical_shifts(brackets: str) -> int:\n        shift = 0\n        while brackets!= brackets[::-1]:\n            shift += 1\n            brackets = brackets[-1] + brackets[:-1]\n        return shift\n    \n    return str(max_beauty(brackets))\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"()()())(()\")\n    4\n    >>> solution(\")))(()\")\n    0\n    >>> solution(\"))(()\")\n    1 1\n    >>> solution(\"))((()\")\n    0 0\n    \"\"\"\n\n    def cyclical_shift(s: str) -> set:\n        s = list(s)\n        result = set()\n        for i in range(len(s)):\n            for j in range(i + 1, len(s)):\n                result.add(\n                    (\n                        tuple(s[:i]),\n                        tuple(s[i:j]),\n                        tuple(s[j:])\n                    )\n                )\n                result.add(\n                    (\n                        tuple(s[:j]),\n                        tuple(s[j:i]),\n                        tuple(s[i:])\n                    )\n                )\n        return result\n\n    s = stdin\n    max_beauty = 0\n    i, j = 0, 0\n\n    for shift in cyclical_shift(s):\n        left_len = len(shift[0])\n        right_len = len(shift[2])\n        curr_beauty = left_len + right_len\n        if curr_beauty > max_beauty:\n            max_beauty = curr_beauty\n            i, j = shift[0], shift[2]\n\n    return str(max_beauty) + \" \" + str(i) + \" \" + str(j)\n"
    },
    {
        "number": 583,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\n\u041f\u0435\u0442\u044f \u0441\u043e\u0441\u0442\u0430\u0432\u0438\u043b \u0442\u0435\u0441\u0442\u043e\u0432\u0443\u044e \u0437\u0430\u0434\u0430\u0447\u0443 \u043d\u0430 \u043f\u043e\u0434\u0441\u0447\u0451\u0442 \u0437\u043d\u0430\u043a\u043e\u0432 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439. \u0412 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043e\u0442\u0432\u0435\u0442\u0430 \u043e\u043d \u043f\u043e\u043b\u0443\u0447\u0438\u043b \u0441\u0442\u0440\u043e\u043a\u0443, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0443\u044e \u0447\u0438\u0441\u043b\u0430, \u0441 \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u043c \u043c\u0435\u0436\u0434\u0443 \u043d\u0438\u043c\u0438. \u0414\u0430\u043d\u043d\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0432 \u0441\u0435\u0431\u0435 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0447\u0438\u0441\u0435\u043b \u0438 \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442 \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u044b \u0432 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435, \u043f\u043e\u043c\u0435\u043d\u044f\u0432 \u043c\u0435\u0441\u0442\u0430\u043c\u0438 \u0441\u0438\u043c\u0432\u043e\u043b\u044b \u043d\u0430 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u0438\u043d\u0434\u0435\u043a\u0441\u044b. \u0420\u0430\u0437\u0440\u0435\u0448\u0430\u0435\u0442\u0441\u044f \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0443.\n\n\u0412\u0430\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u0439\u0442\u0438 \u0438\u043d\u0434\u0435\u043a\u0441\u044b \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0443\u0436\u043d\u043e \u043e\u0442\u0432\u0435\u0442\u0438\u0442\u044c \u043d\u0430 \u0437\u0430\u0434\u0430\u0447\u0443.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0432\u043e\u0434\u0430\n\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u043f\u043e\u0434\u0430\u0435\u0442\u0441\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0442\u0435\u043a\u0441\u0442\u0430, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0430\u044f \u0446\u0438\u0444\u0440\u044b \u0438 \u0437\u043d\u0430\u043a\u0438 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439, \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u044e\u0449\u0438\u0435 \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u044b \u043f\u043e \u0443\u0447\u0430\u0441\u0442\u043a\u0443 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b. \u041f\u043e\u0434\u0440\u044f\u0434 \u0437\u0430\u0434\u0430\u044e\u0442\u0441\u044f \u0434\u0432\u0435 \u0446\u0435\u043b\u044b\u0435 \u0447\u0438\u0441\u043b\u0430 $i$ \u0438 $j$ ($1 \\le i < j \\le n$), \u0438\u043d\u0434\u0435\u043a\u0441\u044b \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432, \u043f\u043e\u043c\u0435\u043d\u044f\u0432 \u043c\u0435\u0441\u0442\u0430\u043c\u0438 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0441\u0442\u043e\u044f\u0442 \u043d\u0430 $i$-\u043c \u0438 $j$-\u043c \u043c\u0435\u0441\u0442\u0430\u0445.\n\n\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0432\u043e\u0434\u0430\n\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0441\u0442\u0440\u043e\u043a\u0443 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0443\u044e \u0446\u0438\u0444\u0440\u044b, \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u044e\u0449\u0438\u0435 \u0438\u043d\u0434\u0435\u043a\u0441\u044b \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432, \u043f\u043e\u043c\u0435\u043d\u044f\u0432 \u043c\u0435\u0441\u0442\u0430\u043c\u0438 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u0441\u0438\u043c\u0432\u043e\u043b\u044b.\n\n\u041f\u0440\u0438\u043c\u0435\u0440\nInput\n\n5\n\n3 6\n\n1 2\n\nOutput\n\n6 5\n\n7 4\n\nInput\n\n6\n\n6 5\n\n1 2\n\nOutput\n\n0 1\n\nInput\n\n5\n\n1 2 4\n\n2 4 1\n\nOutput\n\n0 1\n\n\n'''\n\nn = int(input())\ns = input()\nt = [int(i) for i in input().split()]\nt = [s[t[i]] for i in range(len(t))]\n\nfor i in range(1, n-1):\n    for j in range(i+1, n):\n        if s[i] == s[j]:\n            if t[j] < t[i]:\n                t[i], t[j] = t[j], t[i]\n        \nprint(t)\n\nn = int(input())\ns = input()\nt = [int(i) for i in input().split()]\nt = [s[t[i]] for i in range(len(t))]\n\nfor i in range(1, n-1):\n    for j in range(i+1, n):\n        if s[i] == s[j]:\n            if t[j] > t[i]:\n                t[i], t[j] = t[j], t[i]\n        \nprint(t)"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"37\\n_Hello_Vasya(and_Petya)__bye_(and_OK)\")\n    5 4\n    >>> solution(\"27\\n(LoooonG)__shOrt__(LoooonG)\")\n    5 2\n    >>> solution(\"5\\n(___)\")\n    0 0\n    \"\"\"\n    answer = 0\n    parentheses = {'(': ')', ')': '('}\n    buffer = []\n    for i in stdin:\n        if i in parentheses:\n            if buffer:\n                answer = max(answer, len(''.join(buffer)))\n                buffer = []\n        else:\n            buffer.append(i)\n    if buffer:\n        answer = max(answer, len(''.join(buffer)))\n    left, right = 0, 0\n    for i in stdin:\n        if i in parentheses:\n            left += 1\n        else:\n            right += 1\n    return str(answer) +'' + str(left)\n"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    pass\n"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    s = stdin\n    d = {'(':[], ')':[], '_':[],'':[]}\n    def find_s(s, i):\n        res = 0\n        while i<len(s) and s[i] not in d:\n            i+=1\n        if s[i] in d:\n            res += 1 + find_s(s, i+1)\n        else:\n            return res\n        return res\n    def find_m(s, i):\n        res = 0\n        while i<len(s) and s[i] not in d:\n            i+=1\n        if s[i] in d:\n            res += find_m(s, i+1)\n        else:\n            return res\n        return res\n    \n    print(max([find_m(s, i) for i in range(len(s))]))\n    print(max([find_s(s, i) for i in range(len(s))]))\n\n    return ''\n\n\ndef"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    stdin = stdin.split('\\n')\n    string = stdin[0]\n    longest = 0\n    n = 0\n    count = 0\n    for i in range(len(string)):\n        if string[i] == '(':\n            count += 1\n        elif string[i] == ')':\n            count -= 1\n        else:\n            if count == 0:\n                if len(string[i:]) > longest:\n                    longest = len(string[i:])\n                    n = 0\n                elif len(string[i:]) == longest:\n                    n += 1\n    print(longest, n)\n    return ''\n"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    stdin = stdin.split(' ')\n    new_stdin = []\n    \n    for i in stdin:\n        if not i:\n            continue\n        new_stdin.append(i)\n    \n    p = 0\n    \n    last = -1\n    max_len = 0\n    cnt = 0\n    l = []\n    \n    for i in new_stdin:\n        if i == '(':\n            l.append(i)\n            if last == '(':\n                cnt += 1\n                max_len = max(max_len, len(l))\n            else:\n                if cnt!= 0:\n                    max_len = max(max_len, len(l))\n                    cnt = 0\n        elif i == ')':\n            if len(l) > 0:\n                if l[-1] == '(':\n                    l.pop()\n                    max_len = max(max_len, len(l))\n                    cnt = 0\n                else:\n                    max_len = max(max_len, len(l))\n                    cnt = 0\n                    l = []\n        else:\n            if cnt == 0:\n                l.append(i)\n                max_len = max(max_len, len(l))\n            else:\n                cnt += 1\n                l.append(i)\n                \n    print(max_len)\n    print(cnt)\n    return''\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 584,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    string = stdin\n    parens = 0\n    word = ''\n    max_length = 0\n    max_words = 0\n    \n    for char in string:\n        if char == '(':\n            parens += 1\n        elif char == ')':\n            parens -= 1\n        elif char == '_':\n            if word:\n                max_length = max(max_length, len(word))\n                max_words = max(max_words, 1)\n                word = ''\n            else:\n                max_words = max(max_words, 1)\n        else:\n            word += char\n\n    if word:\n        max_length = max(max_length, len(word))\n        max_words = max(max_words, 1)\n\n    print(max_length, max_words)\n    return ''\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity: O(n * log(m))\n    Space complexity: O(1)\n    \"\"\"\n    a = list(map(int, stdin.split('\\n')[0].split()))\n    b = list(map(int, stdin.split('\\n')[1].split()))\n    m = len(b)\n    mod = 10**9 + 7\n    dp = [0] * m\n    for i, x in enumerate(a):\n        for j in range(m - 1, -1, -1):\n            if i - j >= 0 and x >= b[j]:\n                dp[j] = (dp[j] + dp[j + 1]) % mod\n    return dp[0]"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def solve(n, m):\n        dp = [[1 for _ in range(m)] for _ in range(n + 1)]\n        for i in range(1, n + 1):\n            for j in range(1, m):\n                if a[i - 1] <= b[j - 1]:\n                    dp[i][j] = dp[i][j - 1] + dp[i - 1][j]\n                else:\n                    dp[i][j] = dp[i][j - 1]\n        return dp[n][m - 1]\n\n    a = [int(i) for i in stdin.split('\\n')[1].split(' ')]\n    b = [int(i) for i in stdin.split('\\n')[2].split(' ')]\n    print(solve(len(a), len(b)))\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = stdin.split(' ')\n    a = [int(a) for a in stdin.split('\\n')[0].split(' ')]\n    b = [int(a) for a in stdin.split('\\n')[1].split(' ')]\n\n    s = 0\n    for i in range(len(b)):\n        s += (b[i] - b[0] - i) % m\n    print(s % 998244353)\n\nsolution(\"6 3\\n12 10 20 20 25 30\\n10 20 30\")\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # 1)\n    # 2)\n    pass"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Calculates number of ways to partition the array a.\n    \"\"\"\n    n, m = list(map(int, stdin.readline().split()))\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n\n    # a and b should be sorted in the same order\n    # because we only care about the minimum element on the subarray\n    # and that is the same for every subarray\n    a.sort()\n    b.sort()\n\n    # all elements of a should be >= all elements of b\n    # or there is no solution\n    if any(a_i < b_i for a_i, b_i in zip(a, b)):\n        return \"0\"\n\n    # subproblem for the last element of a\n    # we only care about the minimum element of the subarray\n    def f(i):\n        if i == 0:\n            return 1 if a[i] == b[0] else 0\n        # there is no solution if the minimum element of the subarray is not equal to the minimum element of b\n        if a[i]!= b[0]:\n            return 0\n        return f(i - 1) + f(i - 1) if a[i] == b[0] else f(i - 1)\n\n    return str(f(n - 1))\n\n\ndef"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split(\"\\n\")\n    n, m = map(int, input[0].split())\n    arr = list(map(int, input[1].split()))\n    arr.sort()\n    b = list(map(int, input[2].split()))\n    b.sort()\n    ans = 0\n    l = 0\n    for i in range(m):\n        a = b[i]\n        for j in range(l, n):\n            if arr[j] < a:\n                l = j\n                break\n        if l < n and arr[l] == a:\n            ans += 1\n    return str(ans % 998244353)\n"
    },
    {
        "number": 585,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the number of ways to divide an array in different ways\n\n    Args:\n        stdin (str): Input string\n\n    Returns:\n        str: String of solution\n    \"\"\"\n    import math\n\n    _, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n\n    n = len(a)\n    b = [a[0]]\n    for i in range(1, n):\n        if a[i] > b[-1]:\n            b.append(a[i])\n        else:\n            j = len(b) - 1\n            while j > 0:\n                if b[j - 1] < a[i] < b[j]:\n                    b[j] = a[i]\n                    break\n                j -= 1\n    b = b[:m]\n\n    def to_bin(n):\n        return bin(n)[2:]\n\n    def get_cnt(bin_str):\n        if bin_str == '':\n            return 1\n        if int(bin_str[0]) == 0:\n            return 1 + get_cnt(bin_str[1:])\n        return 2 + get_cnt(bin_str[1:])\n\n    def get_cnt_from_b(bin_str):\n        if bin_str == '':\n            return 1\n        if int(bin_str[0]) == 0:\n            return 1\n        return 2 + get_cnt_from_b(bin_str[1:])\n\n    def bin_to_cnt(bin_str):\n        return int(bin_str, 2)\n\n    bin_a = \"\".join(map(to_bin, a))\n    bin_b = \"\".join(map(to_bin, b))\n    bin_aa = bin_a + \"0\" * (len(bin_a) - len(bin_b))\n    bin_bb = bin_b + \"0\" * (len(bin_a) - len(bin_b))\n\n    # print(bin_a)\n    # print(bin_b)\n    # print(bin_aa)\n    # print(bin_bb)\n\n    bin_aa_cnt = get_cnt_from_b(bin_aa)\n    bin_bb_cnt = get_cnt_from_b(bin_bb)\n    bin_bb_cnt -= 1\n    bin_bb_cnt %= 998244353\n    bin_bb_cnt = bin_to_cnt(bin_bb_cnt)\n\n    print(bin_aa_cnt * bin_bb_cnt % 998244353)\n    return str(bin_aa_cnt * bin_bb_cnt % 998244353)\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n, k = map(int, stdin.split('\\n')[0].split())\n    return str(count_colors(n, k))\n    '''\n    n, k = list(map(int, stdin.split('\\n')[0].split()))\n    return str(count_colors(n, k))\n\n\ndef"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return 'dummy_return_value'\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(x) for x in stdin.split(' ')]\n    MOD = 10 ** 9 + 7\n    return f'{(2 ** (n * (k - 1)) - 1) % MOD}\\n'\n\n\n\ndef"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    modulo = 10 ** 9 + 7\n    count = 0\n    dp = [[0 for _ in range(k + 1)] for _ in range(n + 1)]\n    dp[0][0] = 1\n\n    for i in range(1, n + 1):\n        for j in range(k + 1):\n            for a in range(j + 1):\n                dp[i][j] += dp[i - 1][j - a]\n                dp[i][j] %= modulo\n\n    return dp[n][k]\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\nimport sys\n\n\ndef"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\""
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    return \"\"\n"
    },
    {
        "number": 586,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  # your code here\n  return '%d' % result\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    t = []\n    d = []\n    for i in range(n):\n        t.append(int(stdin.split(' ')[i*2]))\n        d.append(int(stdin.split(' ')[i*2+1]))\n    ans = 0\n    t.sort(reverse=True)\n    d.sort(reverse=True)\n    for i in range(k):\n        ans += d[i]\n        ans += i*i\n    return ans\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = [int(i) for i in stdin.split('\\n')[0].split()]\n    b = 0\n    v = 0\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            a, c = [int(i) for i in stdin.split('\\n')[i].split()]\n            if i == 1:\n                b += c\n                v += a*a\n            else:\n                b += c\n                v += a*a*a\n    return b + v"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\n   ...     \"3 1\\n\"\n   ...     \"2 3\\n\"\n   ...     \"1 3\"\n   ... )\n    '26'\n    \"\"\"\n    # N = int(stdin.readline().rstrip(\"\\n\"))\n    # K = int(stdin.readline().rstrip(\"\\n\"))\n    # toppings = [tuple(map(int, stdin.readline().rstrip(\"\\n\").split(\" \"))) for _ in range(N)]\n    #\n    # return str(\n    #     solution_mem(N, K, toppings)\n    # )\n    #\n    #\n    # def solution_mem(N: int, K: int, toppings: List[Tuple[int, int]]) -> int:\n    #     dp: Dict[Tuple[int, int], int] = {}\n    #     s: int = 0\n    #     for t, d in toppings:\n    #         for i in range(K):\n    #             key = (t, d) if i == 0 else (0, 0)\n    #             s = max(s, key[0] + dp.get(key, 0))\n    #         dp[(t, d)] = s\n    #\n    #     return s\n    #\n    #\n    # return str(solution_mem(N, K, toppings))\n\n\ndef"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n'''\n\n\ndef"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    def GetTotalD(arr: list) -> int:\n        result = 0\n        for a in arr:\n            result += a[1]\n        return result\n\n    def GetTotalDVar(arr: list) -> int:\n        result = 0\n        kinds = []\n        for a in arr:\n            if a[0] not in kinds:\n                kinds.append(a[0])\n        for kind in kinds:\n            result += kind\n        return result\n    \n    def CalcDif(arr: list) -> int:\n        result = 0\n        for a in arr:\n            result += abs(a[1] - a[2])\n        return result\n\n    N, K = map(int, stdin.split(' '))\n    arr = []\n    for _ in range(N):\n        arr.append(list(map(int, stdin.split(' '))))\n    \n    base_d = GetTotalD(arr)\n    base_d_var = GetTotalDVar(arr)\n    var_bonus = CalcDif(arr)\n    \n    return base_d + base_d_var + var_bonus * var_bonus\n\nprint(solution(stdin))\n"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split(' '))\n    A = sorted(list(map(int, stdin.split('\\n'))), reverse=True)\n    print(A[:K])\n    return str(A[:K][0] * A[:K][1])"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find the maximum sum of the base and variety bonuses and return the maximum sum.\"\"\"\n    # Initialize our variables to be used as the start\n    # of our `for` loops\n    base_total = 0\n    variety_bonus = 0\n    # For each line in the input...\n    for line in stdin.split(\"\\n\"):\n        # Parse out the two ingredients and bonuses\n        ingredients, bonuses = line.split(\" \")\n        ingredients = int(ingredients)\n        bonuses = int(bonuses)\n        # Update the base_total with the ingredients\n        # and the bonuses.\n        base_total += ingredients\n        variety_bonus += bonuses\n    # Our `max_total` is the maximum between\n    # the `base_total` and the `variety_bonus`\n    max_total = max(base_total, variety_bonus)\n    return str(max_total)"
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return an integer representing the maximum possible\n       satisfaction from the sushi sets.\n\n       Examples\n       --------\n       >>> solution('''5 3\n      ... 1 9\n      ... 1 7\n      ... 2 6\n      ... 2 5\n      ... 3 1''')\n       26\n       >>> solution('''6 1\n      ... 1 10\n      ... 1 10\n      ... 2 9\n      ... 3 9\n      ... 2 10\n      ... 3 10''')\n       40\n       >>> solution('''6 3\n      ... 1 9\n      ... 1 7\n      ... 2 6\n      ... 2 5\n      ... 3 1\n      ... 3 1\n      ... 3 2\n      ... 3 2''')\n       40\n       >>> solution('''9 2\n      ... 1 1\n      ... 2 2\n      ... 3 2\n      ... 3 2\n      ... 4 2\n      ... 4 3\n      ... 5 1\n      ... 5 2\n      ... 6 2\n      ... 7 3\n      ... 7 3\n      ... 8 3\n      ... 9 3\n      ... 9 5''')\n       60\n       >>> solution('''3 3\n      ... 1 1\n      ... 2 2\n      ... 3 3''')\n       6\n       >>> solution('''5 5\n      ... 1 1\n      ... 2 2\n      ... 3 3\n      ... 4 4\n      ... 5 5''')\n       10\n       >>> solution('''5 5\n      ... 2 1\n      ... 2 2\n      ... 3 3\n      ... 4 4\n      ... 5 5''')\n       10\n       >>> solution('''5 5\n      ... 2 1\n      ... 2 1\n      ... 2 1\n      ... 2 1\n      ... 2 1''')\n       10\n       >>> solution('''5 5\n      ... 2 2\n      ... 3 3\n      ... 4 4\n      ... 5 5''')\n       10\n       >>> solution('''5 5\n      ... 2 3\n      ... 2 3\n      ... 2 3\n      ... 2 3\n      ... 2 3''')\n       10\n       >>> solution('''5 5\n      ... 3 1\n      ... 3 1\n      ... 3 1\n      ... 3 1\n      ... 3 1''')\n       10\n       >>> solution('''5 5\n      ... 3 2\n      ... 3 2\n      ... 3 2\n      ... 3 2\n      ... 3 2''')\n       10\n       >>> solution('''5 5\n      ... 1 1\n      ... 1 1\n      ... 1 1\n      ... 1 1\n      ... 1 1''')\n       10\n       >>> solution('''5 5\n      ... 3 1\n      ... 3 1\n      ... 3 1\n      ... 3 1\n      ... 3 1''')\n       10\n       >>> solution('''5 5\n      ... 2 1\n      ... 2 1\n      ... 2 1\n      ... 2 1\n      ... 2 1''')\n       10\n       >>> solution('''5 5\n      ... 3 1\n      ... 3 1\n      ... 3 1\n      ... 3 1\n      ... 3 1''')\n       10\n       >>> solution('''5 5\n      ... 4 4\n      ... 5 5\n      ... 6 6\n      ... 7 7\n      ... 8 8\n      ... 9 9''')\n       15\n       >>> solution('''5 5\n      ... 4 4\n      ... 5 5\n      ... 6 6\n      ... 7 7\n      ... 8 8\n      ... 9 9\n      ... 10 10\n      ... 11 11\n      ... 12 12\n      ... 13 13\n      ... 14 14\n      ... 15 15''')\n       15\n       >>> solution('''5 5\n      ... 4 4\n      ... 5 5\n      ... 6 6\n      ... 7 7\n      ... 8 8\n      ... 9 9\n      ... 10 10\n      ... 11 11\n      ... 12 12\n      ... 13 13\n      ... 14 14\n      ... 15 15\n      ... 16 16\n      ... 17 17\n      ... 18 18\n      ... 19 19\n      ... 20 20''')\n       15\n       >>> solution('''5 5\n      ... 4 4\n      ... 5 5\n      ... 6 6\n      ... 7 7\n      ... 8 8\n      ... 9 9\n      ... 10 10\n      ... 11 11\n      ... 12 12\n      ... 13 13\n      ... 14 14\n      ... 15 15\n      ... 16 16\n      ... 17 17\n      ... 18 18\n      ... 19 19\n      ... 20 20\n      ... 21 21\n      ... 22 22\n      ... 23 23\n      ... 24 24\n      ... 25 25''')\n       15\n       >>> solution('''5 5\n      ... 4 4\n      ... 5 5\n      ... 6 6\n      ... 7 7\n      ... 8 8\n      ... 9 9\n      ... 10 10\n      ... 11 11\n      ... 12 12\n      ... 13 13\n      ... 14 14\n      ... 15 15\n      ... 16 16\n      ... 17 17\n      ... 18 18\n      ... 19 19\n      ... 20 20\n      ... 21 21\n      ... 22 22\n      ... 23 23\n      ... 24 24\n      ... 25 25\n      ... 26 26\n      ... 27 27\n      ... 28 28\n      ... 29 29\n      ... 30 30\n      ... 31 31\n      ... 32 32\n      ... 33 33\n      ... 34 34\n      ... 35 35\n      ... 36 36\n      ... 37 37\n      ... 38 38\n      ... 39 39\n      ... 40 40\n      ... 41 41\n      ... 42 42\n      ... 43 43\n      ... 44 44\n      ... 45 45\n      ... 46 46\n      ... 47 47\n      ... 48 48\n      ... 49 49\n      ... 50 50\n      ... 51 51\n      ... 52 52\n      ... 53 53\n      ... 54 54\n      ... 55 55\n      ... 56 56\n      ... 57 57\n      ... 58 58\n      ... 59 59\n      ... 60 60\n      ... 61 61\n      ... 62 62\n      ... 63 63\n      ... 64 64\n      ... 65 65\n      ... 66 66\n      ... 67 67\n      ... 68 68\n      ... 69 69\n      ... 70 70\n      ... 71 71\n      ... 72 72\n      ... 73 73\n      ... 74 74\n      ... 75 75\n      ... 76 76\n      ... 77 77\n      ... 78 78\n      ... 79 79\n      ... 80 80\n      ... 81 81\n      ... 82 82\n      ... 83 83\n      ... 84 84\n      ... 85 85\n      ... 86 86\n      ... 87 87\n      ... 88 88\n      ... 89 89\n      ... 90 90\n      ... 91 91\n      ... 92 92\n      ... 93 93\n      ... 94 94\n      ... 95 95\n      ... 96 96\n      ... 97 97\n      ... 98 98\n      ... 99 99\n      ... 100 100\n      ... 101 101\n      ... 102 102\n      ... 103 103\n      ... 104 104\n      ... 105 105\n      ... 106 106\n      ... 107 107\n      ... 108 108\n      ... 109 109\n      ... 110 110\n      ... 111 111\n      ... 112 112\n      ... 113 113\n      ... 114 114\n      ... 115 115\n      ... 116 116\n      ... 117 117\n      ... 118 118\n      ... 119 119\n      ... 120 120\n      ... 121 121\n      ... 122 122\n      ... 123 123\n      ... 124 124\n      ... 125 125\n      ... 126 126\n      ... 127 127\n      ... 128 128\n      ... 129 129\n      ..."
    },
    {
        "number": 587,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''Solution with input parsing and numpy'''\n    \n    # Read input\n    N, K = map(int, stdin.split())\n    Sushi = np.array([[int(x) for x in stdin.split('\\n')[1:]] for _ in range(K)], dtype=int)\n    \n    # Initialize variables\n    satisfaction = 0\n    total = np.zeros(N, dtype=int)\n    \n    # Main loop\n    for i in range(K):\n        # Add total and number of different kinds\n        total += Sushi[i, :2]\n        satisfaction += (Sushi[i, 0]*Sushi[i, 0] + Sushi[i, 1]*Sushi[i, 1])\n    \n    # Add base total and total diversity\n    satisfaction += (sum(total)*sum(total))\n\n    # Print output\n    return f'{satisfaction}'"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Determines the largest possible distance from the origin a man can travel\n    after using N engines.\n    \n    Args:\n        stdin: input of integers formatted as strings\n    Returns:\n        str: the maximum possible distance\n    \"\"\"\n    try:\n        engines = [\n            (int(x), int(y)) for x, y in map(str.split, stdin.split(':'))\n        ]\n    except ValueError:\n        raise ValueError(\n            'Input was not formatted correctly: {}'.format(stdin)\n        )\n    if len(engines) > 100:\n        raise ValueError(\n            'Too many engines ({}): {}'.format(len(engines), stdin)\n        )\n    return max(\n        math.sqrt(x ** 2 + y ** 2)\n        for x, y in itertools.permutations(engines, r=len(engines))\n    )\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Compute the maximum distance a point from the origin can be\n\n    Args:\n        stdin: input in string format\n\n    Returns:\n        str: Output the maximum distance a point from the origin can be\n    \"\"\"\n    pass\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    'Compute and return the winning team for the given tournament input'\n    # Construct a list of the input\n    input_list = [int(input) for input in stdin.split('\\n')]\n    # The winning team is the one with the higher score\n    winning_team_score = max(input_list)\n    return str(winning_team_score)"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return the solution to the problem.\n    >>> solution(\"3\\n0 10\\n5 -5\\n-5 -5\")\n    '10.0'\n    >>> solution(\"3\\n0 0\\n5 -5\\n-5 -5\")\n    '5.0'\n    \"\"\"\n    n, *coordinates = [int(i) for i in stdin.split()]\n    coordinates = list(zip(coordinates[::2], coordinates[1::2]))\n    x, y = 0, 0\n    for _ in range(n):\n        x_, y_ = coordinates.pop(0)\n        x, y = x + x_, y + y_\n\n    return str(math.sqrt(x ** 2 + y ** 2))\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''Finds the final distance from the origin using the largest square.\n\n    Parameters\n    ----------\n    stdin : str\n        Input given in the following format:\n        N\n        x_1 y_1\n        x_2 y_2\n        : :\n        x_N y_N\n\n    Returns\n    -------\n    str\n        The maximum distance that E869120 can travel.\n    '''\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    p = [(int(x), int(y)) for x, y in [l.split(' ') for l in lines[1:]]]\n    d = max((x ** 2 + y ** 2 for x, y in p)) ** 0.5\n    return str(d)\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    num_engines, *engines = stdin.split('\\n')\n    max_distance = 0\n    for index, engine in enumerate(engines, start=1):\n        x, y = [int(val) for val in engine.split(' ')]\n        distance = (x ** 2 + y ** 2) ** 0.5\n        max_distance = max(distance, max_distance)\n    return str(max_distance)\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    stdin = [int(n) for n in stdin.split('\\n') if n]\n    N = stdin[0]\n    x_y = stdin[1:]\n    \n    current_max_dist = 0\n    x_y_list = [(0, 0)]\n    \n    for n in range(N):\n        x_y_list.append((x_y[n * 2], x_y[n * 2 + 1]))\n        \n    def next_dist(x_y_list: list):\n        x_list = [x for x, y in x_y_list]\n        y_list = [y for x, y in x_y_list]\n        \n        return (max(x_list) ** 2 + max(y_list) ** 2) ** 0.5\n    \n    def remove_excess_engines(x_y_list: list, n: int):\n        x_list = [x for x, y in x_y_list]\n        y_list = [y for x, y in x_y_list]\n        \n        while len(x_list) > n:\n            x_list.pop(x_list.index(min(x_list)))\n            y_list.pop(y_list.index(min(y_list)))\n        \n        return x_y_list\n    \n    max_dist = next_dist(x_y_list)\n    \n    for n in range(1, N):\n        x_y_list = remove_excess_engines(x_y_list, n)\n        max_dist = max(next_dist(x_y_list), max_dist)\n    \n    return max_dist\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    dots = [list(map(int, stdin.readline().split())) for _ in range(n)]\n    dots = sorted(dots, key=lambda x: x[0] ** 2 + x[1] ** 2, reverse=True)\n    dots = [[x[0], x[1], i] for i, x in enumerate(dots)]\n    dp = [[0] * 3 for _ in range(n)]\n    dp[0][0] = dots[0][2]\n    for i in range(1, n):\n        for j in range(3):\n            dp[i][j] = min(dp[i - 1][k] for k in range(3) if k!= j) + dots[i][2]\n    return max(dp[-1])\n"
    },
    {
        "number": 588,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find the maximum distance of the final coordinates from the origin.\n    \"\"\"\n    pass"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def helper(i: int) -> int:\n        if i == len(s):\n            return 1\n        \n        res = 0\n        for j in range(i, len(s)):\n            if s[i] == \"?\" or (s[i] == \"0\" and j!= len(s) - 1):\n                res += helper(j + 1)\n            elif \"0\" <= s[i] <= \"9\" and \"0\" <= s[j] <= \"9\":\n                res += helper(j + 1)\n            elif \"A\" <= s[i] <= \"J\" and \"A\" <= s[j] <= \"J\":\n                res += helper(j + 1)\n            \n        return res\n    \n    s = stdin\n    res = helper(0)\n    return str(res)\n"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    hint = stdin.rstrip()\n    code = '9' * len(hint)\n    for i in range(len(hint)):\n        if hint[i] == '?':\n            code_list = set(list(code))\n            code_list.remove('9')\n            code_list = list(code_list)\n            code = code[:i] + code_list[0] + code[i + 1:]\n        elif hint[i]!= '?':\n            code = code[:i] + hint[i] + code[i + 1:]\n    print(code)\n"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return''.join(\n        [\n            str(len(stdin) ** 2)\n            for i in range(len(stdin) ** 2)\n            if count_substring(stdin, stdin[i]) == 1\n        ]\n    )\n\ndef"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    my_str = stdin\n    return sum([is_code(my_str) for i in range(1, len(my_str) + 1)])\n\ndef"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    safe_password = stdin\n    while True:\n        i = 0\n        for i in range(len(safe_password)):\n            if safe_password[i] == \"0\" or safe_password[i] == \"?\" or safe_password[i] == \"9\" or safe_password[i] == \"A\" or safe_password[i] == \"J\":\n                safe_password = safe_password[:i] + \"9\" + safe_password[i + 1:]\n                i = i - 1\n            else:\n                break\n        if safe_password[len(safe_password) - 1] == \"9\":\n            return stdin + \"1\"\n        else:\n            return stdin + \"0\""
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return 'Hello, world!'\n"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds all the possible codes matching the given hint.\n    >>> solution('1?AJ')\n    81\n    \"\"\"\n    lst_s = list(stdin)\n    lst_s.pop(0)\n    lst_s.pop(0)\n    lst_s.pop(-1)\n    lst_s.pop(-1)\n    if lst_s.count('?') == 0:\n        if lst_s[0] == '0':\n            return 0\n        else:\n            return 1\n    else:\n        n_0 = lst_s.count('0')\n        n_1 = lst_s.count('1')\n        n_2 = lst_s.count('2')\n        n_3 = lst_s.count('3')\n        n_4 = lst_s.count('4')\n        n_5 = lst_s.count('5')\n        n_6 = lst_s.count('6')\n        n_7 = lst_s.count('7')\n        n_8 = lst_s.count('8')\n        n_9 = lst_s.count('9')\n        return n_0 * n_1 * n_2 * n_3 * n_4 * n_5 * n_6 * n_7 * n_8 * n_9"
    },
    {
        "number": 589,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    hint = stdin\n    # hint = \"1?AA\"\n    # hint = \"2?110?2\"\n    # hint = \"3?11?0?0\"\n    # hint = \"3?11?0?1\"\n    # hint = \"3?11?1?0\"\n    # hint = \"4?111?0?0\"\n    # hint = \"5?11111?0?0\"\n    # hint = \"5?11111?0?1\"\n    # hint = \"5?11111?1?0\"\n    # hint = \"6?111111?0?0\"\n    # hint = \"6?111111?0?1\"\n    # hint = \"6?111111?1?0\"\n    # hint = \"6?111111?1?1\"\n    # hint = \"7?1111111?0?0\"\n    # hint = \"7?1111111?0?1\"\n    # hint = \"7?1111111?1?0\"\n    # hint = \"7?1111111?1?1\"\n    # hint = \"7?11111111?0?0\"\n    # hint = \"7?11111111?0?1\"\n    # hint = \"7?11111111?1?0\"\n    # hint = \"7?11111111?1?1\"\n    # hint = \"8?11?1111?0?0\"\n    # hint = \"8?11?1111?0?1\"\n    # hint = \"8?11?1111?1?0\"\n    # hint = \"8?11?1111?1?1\"\n    # hint = \"8?11?11111?0?0\"\n    # hint = \"8?11?11111?0?1\"\n    # hint = \"8?11?11111?1?0\"\n    # hint = \"8?11?11111?1?1\"\n    # hint = \"8?111111?11?0?0\"\n    # hint = \"8?111111?11?0?1\"\n    # hint = \"8?111111?11?1?0\"\n    # hint = \"8?111111?11?1?1\"\n    # hint = \"8?11111111?11?0?0\"\n    # hint = \"8?11111111?11?0?1\"\n    # hint = \"8?11111111?11?1?0\"\n    # hint = \"8?11111111?11?1?1\"\n    # hint = \"9?11?111111?11?0?0\"\n    # hint = \"9?11?111111?11?0?1\"\n    # hint = \"9?11?111111?11?1?0\"\n    # hint = \"9?11?111111?11?1?1\"\n    # hint = \"9?11?11?11?11?11?0?0\"\n    # hint = \"9?11?11?11?11?11?0?1\"\n    # hint = \"9?11?11?11?11?11?1?0\"\n    # hint = \"9?11?11?11?11?11?1?1\"\n    # hint = \"9?11?1111?1111?11?11?0?0\"\n    # hint = \"9?11?1111?1111?11?11?0?1\"\n    # hint = \"9?11?1111?1111?11?11?1?0\"\n    # hint = \"9?11?1111?1111?11?11?1?1\"\n    # hint = \"9?1111?1111?1111?11?11?11?0?0\"\n    # hint = \"9?1111?1111?1111?11?11?11?0?1\"\n    # hint = \"9?1111?1111?1111?11?11?11?1?0\"\n    # hint = \"9?1111?1111?1111?11?11?11?1?1\"\n    # hint = \"9?111111?111111?11?11?11?11?11?0?0\"\n    # hint = \"9?111111?111111?11?11?11?11?11?0?1\"\n    # hint = \"9?111111?111111?11?11?11?11?11?1?0\"\n    # hint = \"9?111111?111111?11?11?11?11?11?1?1\"\n    # hint = \"9?11111111?111111?11?11?11?11?11?11?11?0?0\"\n    # hint = \"9?11111111?111111?11?11?11?11?11?11?11?1?0\"\n    # hint = \"9?11111111?111111?11?11?11?11?11?11?11?1?1\"\n    # hint = \"10?11?111111?11?11?11?11?11?1111?11?11?11?11?11?11?0?0\"\n    # hint = \"10?11?111111?11?11?11?11?11?1111?11?11?11?11?11?11?1?0\"\n    # hint = \"10?11?111111?11?11?11?11?11?1111?11?11?11?11?11?11?1?1\"\n    # hint = \"10?11?111111?11?11?"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    numbers = list(map(int, stdin.readline().split()))\n    counter = 0\n    numbers_to_replace = list(range(1, N + 1))\n    for number in numbers:\n        if number in numbers_to_replace:\n            numbers_to_replace.remove(number)\n            counter += 1\n    if counter > 0:\n        print(counter)\n        print(' '.join([str(number) for number in numbers_to_replace]))\n    else:\n        print(0)\n        print(' '.join([str(number) for number in numbers]))\n"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split(' ')))\n    b = list(set(a))\n    if len(b) == len(a):\n        return \"0\"\n    a.sort()\n    c = []\n    for i in a:\n        c.append(a.index(i))\n    z = []\n    for i in range(len(a)):\n        z.append(b[c[i]])\n    return str(len(set(a)) - len(set(z))) + \" \" + \" \".join(z)\n"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    nums = list(map(int, stdin.readline().split()))\n    d = {}\n    for i in range(n):\n        if nums[i] not in d:\n            d[nums[i]] = [i]\n        else:\n            d[nums[i]].append(i)\n    num_changes = 0\n    while len(d)!= 1:\n        min_idx = min(d.values(), key=lambda x: x[0])\n        for i in range(min_idx[0] + 1, min_idx[1]):\n            if nums[i] == nums[min_idx[0]]:\n                nums[i], nums[min_idx[0]] = nums[min_idx[0]], nums[i]\n                num_changes += 1\n        d = {}\n        for i in range(n):\n            if nums[i] not in d:\n                d[nums[i]] = [i]\n            else:\n                d[nums[i]].append(i)\n        # print(d)\n    print(num_changes)\n    print(' '.join(map(str, nums)))\n    return"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    arr = list(map(int, stdin.split()))\n    answer = list(range(1, n + 1))\n    for i in arr:\n        answer[i - 1] = i\n    return''.join(map(str, answer))"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.split(\"\\n\")\n    n = int(input[0])\n    array = input[1].split(\" \")\n    array = list(map(int, array))\n    \n    minchanges = 0\n    for i in range(1, n):\n        if array[i] < array[i-1]:\n            if array[i-1] < array[i]:\n                minchanges += 1\n    \n    for i in range(n):\n        if array[i] > i + 1:\n            minchanges += 1\n    \n    if minchanges > n:\n        return str(n)\n    else:\n        return str(minchanges)"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4\n   ... 3 2 2 3''')\n    '2'\n    >>> solution('''6\n   ... 4 5 6 3 2 1''')\n    '0'\n    >>> solution('''10\n   ... 6 8 4 6 7 1 6 3 4 5''')\n    '3'\n    \"\"\"\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    seen = set()\n    ans = 0\n    for i in a:\n        if i in seen:\n            ans += 1\n        else:\n            seen.add(i)\n    seen = set(a)\n    cnt = 0\n    for i in range(1, n + 1):\n        if i not in seen:\n            ans += 1\n            cnt += 1\n    return str(ans) +'' +''.join(map(str, a))\n"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 590,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    num_and_arr = stdin.strip().split()\n    n = int(num_and_arr[0])\n    arr = [int(item) for item in num_and_arr[1:]]\n    # if not all(item in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] for item in arr):\n    #     return 'false'\n    ind_and_num = [int(item) - 1 for item in num_and_arr[1:]]\n    print(ind_and_num)\n    \n    def is_permutation(item):\n        for i in range(len(item)):\n            if i in item:\n                if item.count(i)!= ind_and_num.count(i):\n                    return False\n            else:\n                return False\n        return True\n    \n    num_of_swaps = 0\n    result = None\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if is_permutation(arr[:i] + arr[i+1:j] + arr[j+1:]):\n                if not result:\n                    result = arr[:i] + arr[j] + arr[i+1:j] + arr[j+1:]\n                else:\n                    if result > arr[:i] + arr[j] + arr[i+1:j] + arr[j+1:]:\n                        result = arr[:i] + arr[j] + arr[i+1:j] + arr[j+1:]\n                        num_of_swaps = j\n    if result:\n        print(num_of_swaps + 1)\n        print(*result)\n    else:\n        print('false')\n    return result\n    \n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    n, k = list(map(int, stdin.split()))\n    s = list(map(int, stdin.split()))\n    s = sorted(s, reverse=True)\n    for i in range(k):\n        print(s[i], end=' ')\n    print()\n    return''.join(map(str, s[:k]))\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    (n, k) = map(int, stdin.split(' '))\n    lights = list(map(int, stdin.split(' ')))\n    lights.sort()\n    for i in range(0, len(lights)):\n        if i+k < len(lights) and max(lights[i:i+k])!= lights[i+k]:\n            print(max(lights[i:i+k]))\n            return''.join(list(map(str, range(1, i+1))))\n    return''.join(list(map(str, range(1, len(lights)+1))))\n\n\ndef"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, k = map(int, stdin.split())\n    lights = list(map(int, stdin.split()))\n    d = dict()\n    for i in range(1, n+1):\n        d[i] = lights[i-1]\n    d = {k: v for k, v in sorted(d.items(), key=lambda item: item[1])}\n    sorted_d = list(d.keys())\n    for i in sorted_d:\n        if k == 0:\n            break\n        if d[i] < d[sorted_d[-1]]:\n            print(i)\n            k -= 1\n    return ''\n\n\ndef"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split()))\n    arr = list(map(int, stdin.split()))\n    ans = sorted(arr, key=lambda x: abs(100 - x))\n    print(*ans[:k])\n    return ''\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = [int(i) for i in stdin.split()]\n    a.sort()\n    for i in range(k, n + 1):\n        if a[i] - a[i - k] < 0:\n            return str(a[i - k] + 1) +'' + str(i)\n        else:\n            return str(a[i - k]) +'' + str(i)\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    #Your code here\n    #return None\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns a tuple of integers representing the smallest\n    list of consecutive hours Vasya can read\n    \"\"\"\n    n, k = map(int, stdin.split())\n    arr = map(int, stdin.split())\n\n    def dfs(arr: List[int], idx: int,\n            k: int) -> Tuple[int, int]:\n        if k == 0:\n            return 0, 0\n        elif k == 1:\n            return arr[0], 0\n        elif idx == len(arr) - 1:\n            return arr[idx], arr[idx]\n        elif k == n - 1:\n            return arr[-1], arr[-1]\n\n        best_left = dfs(arr, idx + 1, k - 1)\n        best_right = dfs(arr, idx + 1, k)\n\n        light_level = arr[idx]\n\n        left_light_level = arr[idx] - best_right[1]\n        right_light_level = arr[idx] - best_left[1]\n\n        left_light_level = max(0, left_light_level)\n        right_light_level = max(0, right_light_level)\n\n        if left_light_level + right_light_level < light_level:\n            return best_left\n        elif left_light_level + right_light_level > light_level:\n            return best_right\n        else:\n            return best_left if best_left[0] < best_right[0] else best_right\n\n    result = dfs(arr, 0, k)\n    return str(result[0]) +'' +''.join(str(i) for i in result[1])\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    k, n, a = map(int, stdin.split())\n    d = [0 for i in range(n)]\n    d[0] = a[0]\n    for i in range(1, n):\n        d[i] = max(d[i-1], a[i])\n    result = []\n    for i in range(k):\n        if d[i] > 0:\n            result.append(i+1)\n    return''.join(map(str, result))\n"
    },
    {
        "number": 591,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the maximum score achievable from a single initial state.\n\n    This function assumes that the input is in the correct format.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # stdin = int(stdin)\n    n = int(stdin)\n    s = 0\n    # for a in range(1,n):\n    #     for b in range(a,n):\n    #         if (a%b==0 and b%a==0):\n    #             s+=1\n    # return s\n    for i in range(n//2+1):\n        for j in range(i+1,n):\n            if (a*j==b*i and a!=b):\n                s+=j\n                break\n    return s\n\nprint(solution(input()))"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return stdin\n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return None\n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    cache = {}\n\n    def score(a: int, b: int) -> int:\n        if a == b:\n            return 0\n        elif a == 1 or b == 1:\n            return 0\n        elif abs(a) in cache:\n            return cache[abs(a)]\n        else:\n            x = min(abs(a), abs(b))\n            if x == 1:\n                return abs(a) + abs(b)\n            if (a * x) == b or (b * x) == a:\n                cache[abs(a)] = x + score(x, abs(a) * x)\n                return cache[abs(a)]\n            else:\n                return max(abs(a) + abs(b), abs(a) + score(x, b * x), abs(b) + score(x, a * x))\n\n    print(score(2, n))\n"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(max(solution_helper(stdin)))\n\ndef"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        return n * n - (n // 2) * ((n // 2) - 1)\n    return 0\n\n\ndef"
    },
    {
        "number": 592,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    max_score = 0\n    for a in range(1, N + 1):\n        for b in range(1, N + 1):\n            if b * a < a:\n                continue\n            if N % abs(a) == 0 or N % abs(b) == 0:\n                continue\n            n_a, n_b = 1, 1\n            max_score = max(max_score, abs(a * n_a + b * n_b))\n    return str(max_score)\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    a = []\n    for _ in range(m):\n        b = list(map(int, stdin.split(' ')))\n        a.append(b)\n    c = [[0] * n for _ in range(m)]\n    for i in range(m):\n        for j in range(n):\n            c[i][j] = a[i][j] + c[i][j]\n    def pick_winner(i, j):\n        if i == m:\n            return j + 1\n        if j == n:\n            return pick_winner(i + 1, 0)\n        if c[i][j] == 0:\n            return pick_winner(i, j + 1)\n        return pick_winner(i, j + 1) if c[i][j] == c[i][j + 1] else pick_winner(i + 1, 0)\n    return pick_winner(0, 0)"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"The first stage is the elimination of candidates, who did not get a majority of votes, and then the second stage is the elimination of candidates, who did not get the maximum number of cities.\n    \"\"\"\n    n, m = map(int, stdin.split())\n    votes = [list(map(int, stdin.split())) for _ in range(m)]\n    matrix = [\n        [votes[i][j] for j in range(n)]\n        for i in range(m)\n    ]\n    indices = [i for i in range(1, n + 1)]\n    while len(indices) > 1:\n        row_sums = [sum(matrix[i]) for i in range(m)]\n        col_sums = [sum([matrix[i][j] for i in range(m)]) for j in range(n)]\n        max_row_sum = max(row_sums)\n        max_col_sum = max(col_sums)\n        max_row_sum_indices = [\n            i + 1\n            for i in range(m)\n            if row_sums[i] == max_row_sum\n        ]\n        max_col_sum_indices = [\n            i + 1\n            for i in range(n)\n            if col_sums[i] == max_col_sum\n        ]\n        if len(max_row_sum_indices) == 1:\n            indices = max_row_sum_indices\n        else:\n            indices = [i for i in indices if i in max_row_sum_indices]\n        if len(max_col_sum_indices) == 1:\n            indices = max_col_sum_indices\n        else:\n            indices = [i for i in indices if i in max_col_sum_indices]\n        m -= 1\n    return str(indices[0])\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.split('\\n')[0].split(' ')]\n    arr = []\n    for i in range(m):\n        arr.append([int(i) for i in stdin.split('\\n')[i+1].split(' ')])\n    for i in range(n):\n        arr[0][i] += arr[1][i]\n        arr[0][i] += arr[2][i]\n    return arr.index(max(arr[0])) + 1\n\ndef"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    arr = []\n    for _ in range(m):\n        arr.append(list(map(int, stdin.split())))\n\n    def find_max_num(arr):\n        max_num = -1\n        idx = 0\n        for i in range(n):\n            if arr[i][0] > max_num:\n                max_num = arr[i][0]\n                idx = i\n        return idx\n\n    def find_max_cnt(arr):\n        max_cnt = -1\n        idx = 0\n        for i in range(n):\n            if arr[i][0] == max_cnt:\n                if arr[i][1] > max_cnt:\n                    max_cnt = arr[i][1]\n                    idx = i\n        return idx\n\n    def count_cnt(arr):\n        cnt = 0\n        for i in range(n):\n            cnt += arr[i][0]\n        return cnt\n\n    # def find_max_city(arr):\n    #     max_city = -1\n    #     idx = 0\n    #     for i in range(m):\n    #         if arr[i][0] == max_city:\n    #             if arr[i][1] > max_city:\n    #                 max_city = arr[i][1]\n    #                 idx = i\n    #     return idx\n\n    # def find_max_cnt_city(arr):\n    #     max_cnt = -1\n    #     idx = 0\n    #     for i in range(m):\n    #         if arr[i][0] == max_cnt:\n    #             if arr[i][1] > max_cnt:\n    #                 max_cnt = arr[i][1]\n    #                 idx = i\n    #     return idx\n\n    # def count_cnt_city(arr):\n    #     cnt = 0\n    #     for i in range(m):\n    #         cnt += arr[i][0]\n    #     return cnt\n\n    # 1.\n    cnt = 0\n    res = []\n    while cnt < m:\n        max_city_idx = find_max_num(arr)\n        max_city_cnt = arr[max_city_idx][0]\n        res.append(max_city_idx)\n        arr[max_city_idx][0] = 0\n        arr[max_city_idx][1] = 0\n        cnt += 1\n        arr.pop(max_city_idx)\n        n -= 1\n\n    # 2.\n    res.append(res[0])\n    cnt = 0\n    res_cnt = []\n    while cnt < m:\n        max_cnt_idx = find_max_cnt(arr)\n        max_cnt_cnt = arr[max_cnt_idx][0]\n        res_cnt.append(max_cnt_idx)\n        arr[max_cnt_idx][0] = 0\n        arr[max_cnt_idx][1] = 0\n        cnt += 1\n        arr.pop(max_cnt_idx)\n        n -= 1\n    # 3.\n    res.append(res_cnt[0])\n\n    # 4.\n    res.append(res_cnt[0])\n    cnt = 0\n    res_cnt = []\n    while cnt < m:\n        max_city_idx = find_max_cnt_city(arr)\n        max_city_cnt = arr[max_city_idx][0]\n        res_cnt.append(max_city_idx)\n        arr[max_city_idx][0] = 0\n        arr[max_city_idx][1] = 0\n        cnt += 1\n        arr.pop(max_city_idx)\n        n -= 1\n    # 5.\n    res.append(res_cnt[0])\n\n    return res[0]\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, m = map(int, stdin.readline().split())\n    votes = [list(map(int, stdin.readline().split())) for _ in range(m)]\n    \n    candidate_votes = [[0 for _ in range(n)] for _ in range(m)]\n    for i in range(m):\n        for j in range(n):\n            candidate_votes[i][j] = votes[i][j]\n    \n    \n    # \uc774\ubd84 \ud0d0\uc0c9\uc744 \uc774\uc6a9\ud574\uc11c \uc815\ub82c\n    for i in range(m):\n        candidate_votes[i].sort()\n    \n    candidate_votes.sort()\n    \n    # \uccab \ubc88\uc9f8 \uc6d0\uc18c\ub97c \uae30\uc900\uc73c\ub85c \uc774\ubd84 \ud0d0\uc0c9\uc744 \uc2e4\uc2dc\ud55c\ub2e4.\n    start = 0\n    end = n-1\n    max_votes = candidate_votes[0][n-1]\n    winner = n\n    \n    while start <= end:\n        mid = (start + end) // 2\n        \n        # \uc911\uac04\uc810\uc744 \uae30\uc900\uc73c\ub85c \uc0c8\ub85c\uc6b4 \ucd5c\ub313\uac12\uc744 \ucc3e\ub294\ub2e4.\n        max_votes = candidate_votes[0][mid]\n        count = 1\n        for i in range(1, m):\n            if candidate_votes[i][mid] == max_votes:\n                count += 1\n        \n        # \ub9cc\uc57d \ucd5c\ub313\uac12\uc774 1\uc774\uac70\ub098 2\ubcf4\ub2e4 \ud06c\ub2e4\uba74, \ucd5c\ub313\uac12\uc774 \ub2f5\uc774\ub2e4.\n        if count > 2:\n            end = mid - 1\n        # \uc544\ub2c8\uba74, \ucd5c\ub313\uac12\uc744 \uac31\uc2e0\ud55c\ub2e4.\n        else:\n            start = mid + 1\n            winner = mid\n            max_votes = candidate_votes[0][mid]\n            \n    \n    # \ucd5c\ub313\uac12\uc774 \uac19\uc740 \uacbd\uc6b0\ub3c4 \ub2f5\uc774 \uc544\ub2c8\ub77c\uba74, \ucd5c\ub313\uac12\uc774 \uac19\uc73c\uba74 \uadf8\ub7f0\uac83\uae4c\uc9c0 \uc544\ubb34\uac83\ub3c4 \uc548\ub098\uc62c \uc218 \uc788\uc73c\ubbc0\ub85c \ub2f5\uc744 \uac31\uc2e0\ud55c\ub2e4.\n    max_votes = candidate_votes[0][winner]\n    count = 1\n    for i in range(1, m):\n        if candidate_votes[i][winner] == max_votes:\n            count += 1\n            \n    if count > 2:\n        return str(winner)\n    return str(winner+1)\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"3 4\\n10 10 3\\n5 1 6\\n2 2 2\\n1 5 7\")\n    '1'\n    >>> solution(\"3 3\\n1 2 3\\n2 3 1\\n1 2 1\")\n    '2'\n    \"\"\"\n    n, m = map(int, stdin.split())\n    candidates = {}\n    for _ in range(m):\n        votes = list(map(int, stdin.split()))\n        max_votes = max(votes)\n        if candidates.get(max_votes):\n            candidates[max_votes].append(votes.index(max_votes) + 1)\n        else:\n            candidates[max_votes] = [votes.index(max_votes) + 1]\n    winner = []\n    for key, value in candidates.items():\n        winner.append(min(value))\n    return max(winner)\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split('\\n')[0].split(' '))\n    matrix = list(list(map(int, stdin.split('\\n')[1:])) for stdin in stdin.split('\\n'))\n    matrix = [[matrix[i][j] for i in range(m)] for j in range(n)]\n    res = [i for i in range(1, n + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            matrix[0][i - 1] += matrix[j - 1][i - 1]\n    for j in range(1, n + 1):\n        for i in range(m + 1):\n            matrix[j - 1][0] += matrix[j - 1][i - 1]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            matrix[0][i - 1] += matrix[j - 1][i - 1]\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            matrix[i - 1][0] += matrix[i - 1][j - 1]\n    for j in range(1, n + 1):\n        for i in range(1, m + 1):\n            matrix[j - 1][i - 1] += matrix[j - 1][i - 1]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if matrix[0][i - 1] == matrix[j - 1][0]:\n                if matrix[j - 1][i - 1] >= matrix[j - 1][i - 1]:\n                    res[j - 1] = res[i - 1]\n    return res[0]\n\nsolution(\"3 3\\n1 2 3\\n2 3 1\\n1 2 1\")\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    #Your code here\n    # print(stdin)\n    arr = stdin.splitlines()\n    n, m = map(int,arr[0].split())\n    matrix = []\n    for i in range(m):\n        matrix.append(list(map(int,arr[i + 1].split())))\n    # print(matrix)\n    # print(n)\n    result = 0\n    k = 0\n    for i in range(m):\n        temp = [0 for _ in range(n)]\n        for j in range(n):\n            temp[j] = sum(matrix[i][j:])\n        k = max(temp)\n        for j in range(n):\n            if temp[j] == k:\n                if result < j + 1:\n                    result = j + 1\n                break\n    return result\n"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    city_votes = [[0 for _ in range(n)] for _ in range(m)]\n    stdin = stdin.split()\n    for i in range(m):\n        for j in range(n):\n            city_votes[i][j] = int(stdin[j + m * i])\n    \n    def find_winner_by_votes(city_votes):\n        def find_winner_in_city(city_votes):\n            cur_max = 0\n            for i in range(len(city_votes)):\n                if city_votes[i] >= cur_max:\n                    cur_max = city_votes[i]\n                    cur_index = i + 1\n            return cur_index\n        \n        max_vote = max([sum(city_votes[i]) for i in range(len(city_votes))])\n        max_index = [i + 1 for i in range(len(city_votes)) if sum(city_votes[i]) == max_vote]\n        if len(max_index) == 1:\n            return max_index[0]\n        else:\n            cur_index = max_index[0]\n            for i in range(len(max_index)):\n                if max_index[i] < cur_index:\n                    cur_index = max_index[i]\n            return cur_index\n    \n    def find_winner_by_cities(city_votes):\n        max_city_vote = 0\n        max_city_index = []\n        for i in range(len(city_votes)):\n            cur_city_vote = 0\n            for j in range(len(city_votes)):\n                cur_city_vote += city_votes[i][j]\n            if cur_city_vote > max_city_vote:\n                max_city_vote = cur_city_vote\n                max_city_index = [i + 1]\n            elif cur_city_vote == max_city_vote:\n                max_city_index.append(i + 1)\n        return min(max_city_index)\n    \n    winner_by_votes = find_winner_by_votes(city_votes)\n    winner_by_cities = find_winner_by_cities(city_votes)\n    if winner_by_votes == winner_by_cities:\n        return winner_by_votes\n    else:\n        return winner_by_cities\n\n\ndef"
    },
    {
        "number": 593,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    votes = [list(map(int, stdin.split())) for i in range(m)]\n    for i in range(m):\n        votes[i].sort(reverse=True)\n    votes.sort(key=lambda x: x[0], reverse=True)\n    votes.sort(key=lambda x: x[1])\n    print(votes)\n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    correct_solutions = [int(el) for el in stdin.split(\" \")]\n    wrong_solutions = [int(el) for el in stdin.split(\" \")]\n    tl_start = 0\n    tl_end = 0\n    tl = 0\n    for a, b in zip(correct_solutions, wrong_solutions):\n        if tl_end + b < a:\n            tl = tl_end + b\n            tl_start = tl_end\n            tl_end = tl\n        else:\n            tl_end += b\n    if tl_end < tl_start:\n        tl = tl_end\n    print(tl) if tl > 0 else print(\"-1\")\n\n\nsolution(stdin=input())\n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    correct = [int(x) for x in stdin.split('\\n')[1].split()]\n    incorrect = [int(x) for x in stdin.split('\\n')[2].split()]\n    # for i in range(n):\n    #     if (correct[i] >= 2 * min(incorrect)) and (correct[i] <= max(incorrect)):\n    #         return str(correct[i])\n    # return '-1'\n    return str(max([correct[i] if (correct[i] >= 2 * min(incorrect)) and (correct[i] <= max(incorrect)) else -1 for i in range(n)]))\n    \n    \ndef"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(' ')]\n    correct = [int(x) for x in stdin.split(' ')]\n    wrong = [int(x) for x in stdin.split(' ')]\n    correct.sort()\n    wrong.sort()\n    correct_i = 0\n    wrong_i = 0\n    min_tl = float('inf')\n    while correct_i < n and wrong_i < m:\n        if correct[correct_i] * 2 <= min_tl:\n            min_tl = correct[correct_i] * 2\n        else:\n            correct_i += 1\n        if wrong[wrong_i] * 2 >= min_tl:\n            min_tl = wrong[wrong_i] * 2\n        else:\n            wrong_i += 1\n    if correct_i < n:\n        min_tl = correct[correct_i]\n    elif wrong_i < m:\n        min_tl = wrong[wrong_i]\n    return str(min_tl) if min_tl!= float('inf') else '-1'"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    arr_a = map(int, stdin.split()[:n])\n    arr_b = map(int, stdin.split()[n:])\n\n    return str(-1)\n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(' ')]\n    correct = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    wrong = [int(x) for x in stdin.split('\\n')[2].split(' ')]\n    correct.sort()\n    wrong.sort()\n    def solve(correct, wrong):\n        left, right = 0, n\n        while left < right:\n            middle = left + (right - left) // 2\n            if sum(correct[middle:]) > 2 * sum(wrong):\n                right = middle\n            else:\n                left = middle + 1\n        return left\n    return str(solve(correct, wrong))\n"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n < 2 or m < 1:\n        return -1\n    correct = set(map(int, stdin.split()[:n]))\n    incorrect = set(map(int, stdin.split()[n:]))\n    # wrong = {x for x in range(1, 101) if x not in correct}\n    # print(correct)\n    # print(incorrect)\n    # print(wrong)\n    # print(sorted(wrong.intersection(correct)))\n    return''.join([str(x) for x in sorted(correct.intersection(incorrect)) if x > 0])"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    n, m = map(int, stdin.split())\n    correct_times = list(map(int, stdin.split()))\n    incorrect_times = list(map(int, stdin.split()))\n\n    max_time = 0\n    for times in correct_times:\n        max_time = max(max_time, times)\n\n    for times in incorrect_times:\n        if times < max_time:\n            return '-1'\n\n    # the max time will always be in the correct solutions\n    # we can reduce the search space to only valid times\n    # we have to find a time that meets all requirements\n    for times in range(max_time + 1):\n        if is_valid(times, correct_times, incorrect_times):\n            return times\n\n    return '-1'\n\n\ndef"
    },
    {
        "number": 594,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    correct = stdin.split(\"\\n\")[0].split(\" \")\n    correct = [int(x) for x in correct]\n    wrong = stdin.split(\"\\n\")[1].split(\" \")\n    wrong = [int(x) for x in wrong]\n    min_time = 1000\n    for x in range(1, max(correct[0], wrong[0]) + 1):\n        if 2 * x <= min_time and all([x <= y for y in correct]) and any(x <= y for y in wrong):\n            min_time = x\n    return str(min_time) if min_time < 1000 else \"-\"\n    \n"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the next year when a calendar will be the same as today.\n\n    Args:\n        stdin (str): Input of a string variable.\n\n    Returns:\n        str: Next year when a calendar will be the same as today.\n    \"\"\"\n    days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\n    days_in_months = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n    y = int(stdin)\n    day = days.index(day_of_week(y))\n    i = day\n    month = 1\n    while day >= days_in_months[month - 1]:\n        day -= days_in_months[month - 1]\n        month += 1\n    year = y + (i + day) // 7 - (i + day) // 7 * 2\n    return year\n"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    start_year = int(stdin)\n    leap_years = {i for i in range(start_year, start_year + 100)}\n\n    def is_leap(year):\n        return (year % 4 == 0) and (year % 100!= 0) or (year % 400 == 0)\n\n    for year in range(start_year + 1, start_year + 100):\n        if is_leap(year):\n            leap_years.add(year)\n\n    while True:\n        if leap_years.intersection(range(start_year, start_year + 100)):\n            return str(start_year)\n        start_year += 1\n"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\nreturn None\n\"\"\"\n\n\ndef"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport calendar\n\ndef"
    },
    {
        "number": 595,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    y = int(stdin)\n    while True:\n        if y % 400 == 0 or (y % 4 == 0 and y % 100!= 0):\n            break\n        y += 1\n    return str(y)\n\n---- Tests ----\n\n\nInput\n2016\nOutput\n2044\n\nInput\n2000\nOutput\n2028\n\nInput\n50501\nOutput\n50507\n\nInput\n2019\nOutput\n2031\n\"\"\"\n\ndef"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    date1 = stdin.split()[0].split(':')\n    date2 = stdin.split()[1].split(':')\n    date1 = date(int(date1[0]), int(date1[1]), int(date1[2]))\n    date2 = date(int(date2[0]), int(date2[1]), int(date2[2]))\n    return date2 - date1\n\n\ndef"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    start_date = stdin.split('\\n')[0].split(':')\n    end_date = stdin.split('\\n')[1].split(':')\n    #print(start_date, end_date)\n    delta = date(2038, 12, 31) - date(1900, 1, 1)\n    #print(delta)\n    result = (int(end_date[0]) - int(start_date[0])) * 365 * 24 * 60 * 60 + (int(end_date[1]) - int(start_date[1])) * 30 * 24 * 60 * 60 + (int(end_date[2]) - int(start_date[2])) * 24 * 60 * 60\n    #print(result)\n    return result + delta.days * 24 * 60 * 60\n\nprint(solution(\"1900:01:01\\n2038:12:31\"))\nprint(solution(\"1996:03:09\\n1991:11:12\"))\n\n\"\"\"\n\nfrom datetime import datetime\nfrom datetime import timedelta\n\ndef"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    start_date, end_date = stdin.split(':')\n    year, month, day = start_date.split('-')\n    year_1, month_1, day_1 = end_date.split('-')\n    start = datetime.date(int(year), int(month), int(day))\n    end = datetime.date(int(year_1), int(month_1), int(day_1))\n    difference = end - start\n    return str(difference.days)\n    \n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    start, stop = stdin.split('\\n')\n    \n    date1 = start.split(':')\n    date2 = stop.split(':')\n    \n    start_date = datetime(int(date1[0]), int(date1[1]), int(date1[2]))\n    stop_date = datetime(int(date2[0]), int(date2[1]), int(date2[2]))\n\n    \n    delta = stop_date - start_date\n    print(delta.days)\n    \n    \n    return str(delta.days)\n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    import re\n\n    stdin = re.split(\"\\s\", stdin)\n    year, month, day = map(int, stdin)\n\n    days = {\n        1: 31,\n        2: 28,\n        3: 31,\n        4: 30,\n        5: 31,\n        6: 30,\n        7: 31,\n        8: 31,\n        9: 30,\n        10: 31,\n        11: 30,\n        12: 31\n    }\n\n    if year % 4 == 0:\n        days[2] = 29\n\n    total_days = 0\n\n    for i in range(month):\n        total_days += days[i+1]\n\n    total_days = total_days - (day-1)\n\n    return total_days\n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \n    \n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n    \n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    d1, d2 = stdin.split()\n    d1 = d1.split(':')\n    d2 = d2.split(':')\n    d1 = dt.datetime(int(d1[0]), int(d1[1]), int(d1[2]))\n    d2 = dt.datetime(int(d2[0]), int(d2[1]), int(d2[2]))\n    return str(abs((d2 - d1).days))\n\n\ndef"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    start = stdin.split('\\n')[0].split(':')\n    end = stdin.split('\\n')[1].split(':')\n    s = datetime.datetime(int(start[0]), int(start[1]), int(start[2]))\n    e = datetime.datetime(int(end[0]), int(end[1]), int(end[2]))\n    return str(abs((e - s).days))\n"
    },
    {
        "number": 596,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return \"\"\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n, m = map(int, stdin.readline().split())\n    dists = {i + 1: set() for i in range(n)}\n    for _ in range(n - 1):\n        a, b = map(int, stdin.readline().split())\n        dists[a].add(b)\n        dists[b].add(a)\n\n    start = set()\n    for i in range(m):\n        start.add(int(stdin.readline()))\n\n    end = {i + 1: set() for i in range(n)}\n    for i in start:\n        end[i] = dists[i]\n\n    ans = {}\n    def dfs(node, time):\n        nonlocal ans\n        if time in ans:\n            return\n        ans[time] = min(ans.get(time, float('inf')), node)\n        for next in end[node]:\n            if next!= node:\n                dfs(next, time + 1)\n\n    dfs(1, 0)\n    print(ans[min(ans.keys())])\n    '''\n\n    n, m = map(int, stdin.readline().split())\n    dists = {i + 1: set() for i in range(n)}\n    for _ in range(n - 1):\n        a, b = map(int, stdin.readline().split())\n        dists[a].add(b)\n        dists[b].add(a)\n\n    start = set()\n    for _ in range(m):\n        start.add(int(stdin.readline()))\n\n    end = {i + 1: set() for i in range(n)}\n    for i in start:\n        end[i] = dists[i]\n\n    ans = {}\n    def dfs(node, time):\n        nonlocal ans\n        if time in ans:\n            return\n        ans[time] = min(ans.get(time, float('inf')), node)\n        for next in end[node]:\n            if next!= node:\n                dfs(next, time + 1)\n\n    dfs(1, 0)\n    print(ans[min(ans.keys())])\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = []\n    for i in range(n - 1):\n        edges.append(tuple(map(int, stdin.split())))\n    humans = list(map(int, stdin.split()))\n    min_time = inf\n    for u, v in edges:\n        if v in humans:\n            for a, b in edges:\n                if u == a:\n                    if b == v:\n                        min_time = min(min_time, u - a)\n                        break\n                if u == b:\n                    if a == v:\n                        min_time = min(min_time, b - a)\n                        break\n    for u, v in edges:\n        if u in humans and v in humans:\n            min_time = min(min_time, abs(u - v))\n    print(min_time)\n    print(min_time)\n\n\ndef"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\nimport heapq\n\ndef"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \n    N = int(stdin.readline().strip())\n    n = N\n    M = int(stdin.readline().strip())\n    m = M\n    roads = []\n    for i in range(n - 1):\n        line = stdin.readline().strip()\n        c1, c2 = map(int, line.split())\n        roads.append((c1, c2))\n    nodes = set([x[0] for x in roads] + [x[1] for x in roads])\n    # print(nodes)\n    if len(nodes) < n:\n        return \"-1\"\n\n    M = int(stdin.readline().strip())\n    m = M\n    targets = []\n    for i in range(m):\n        line = stdin.readline().strip()\n        targets.append(int(line))\n\n    # print(targets)\n    roads.sort(key=lambda x: x[1])\n    # print(roads)\n    # cost_list = []\n    # for target in targets:\n    #     cost = 0\n    #     for road in roads:\n    #         if target in road:\n    #             cost += abs(road[0] - road[1])\n    #     cost_list.append(cost)\n    # print(cost_list)\n    cost_list = [abs(road[0] - road[1]) for road in roads for target in targets if road[1] == target]\n    print(cost_list)\n    print(min(cost_list))\n\n    return str(roads[cost_list.index(min(cost_list))][0])\n\n\ndef"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    roads = []\n    for i in range(N - 1):\n        roads.append([int(x) for x in stdin.split()[i * 2: (i + 1) * 2]])\n    attacked = list(map(int, stdin.split()[N * 2:]))\n\n    def bfs(start):\n        queue = [start]\n        visited = set(queue)\n        distance = {start: 0}\n        while queue:\n            node = queue.pop(0)\n            for v in roads[node]:\n                if v not in visited:\n                    queue.append(v)\n                    visited.add(v)\n                    distance[v] = distance[node] + 1\n        return distance\n\n    distances = {}\n    for i in range(N):\n        distances[i] = bfs(i)\n\n    distances = list(distances.items())\n    distances.sort(key=lambda x: x[1][max(x[0], attacked[0])])\n    return''.join([str(i) for i in distances[0][0]])\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n"
    },
    {
        "number": 597,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = [int(x) for x in stdin.split()]\n    if n == 0 or x == 0:\n        return '0'\n\n    l, r, cost = [], [], []\n    for i in range(n):\n        s = stdin.split()\n        l.append(int(s[0]))\n        r.append(int(s[1]))\n        cost.append(int(s[2]))\n\n    l.sort()\n    r.sort()\n    cost.sort()\n\n    best, index_l, index_r = 0, 0, 0\n\n    for i in range(n):\n        if l[index_l] <= r[index_r]:\n            best += cost[index_r]\n            index_l, index_r = index_r, index_r + 1\n        else:\n            best += cost[index_l]\n            index_r = index_l + 1\n            index_l += 1\n\n    return str(best)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''4 5\n   ... 1 3 4\n   ... 1 2 5\n   ... 5 6 1\n   ... 1 2 4''')\n    5\n    >>> solution('''3 2\n   ... 4 6 3\n   ... 2 4 1\n   ... 3 5 4''')\n    -1\n    \"\"\"\n    _, v = map(int, stdin.split('\\n')[:2])\n    vouchers = list(map(int, stdin.split('\\n')[2:]))\n\n    vouchers.sort(key=lambda voucher: voucher[0])\n    vouchers.sort(key=lambda voucher: voucher[2])\n\n    for i, first_voucher in enumerate(vouchers):\n        for j, second_voucher in enumerate(vouchers):\n            if i!= j:\n                if first_voucher[1] < second_voucher[0] or second_voucher[1] < first_voucher[0]:\n                    continue\n                if first_voucher[0] <= second_voucher[1] and first_voucher[1] >= second_voucher[0]:\n                    break\n                elif first_voucher[0] <= second_voucher[1] and first_voucher[1] < second_voucher[0]:\n                    break\n                elif second_voucher[0] <= first_voucher[1] and second_voucher[1] >= first_voucher[0]:\n                    break\n                elif second_voucher[0] <= first_voucher[1] and second_voucher[1] < first_voucher[0]:\n                    break\n\n        else:\n            return first_voucher[2] + second_voucher[2]\n    return '-1'\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    l = stdin.split('\\n')\n    n = int(l[0].split()[0])\n    x = int(l[0].split()[1])\n    a = []\n    for i in range(1, len(l)):\n        line = l[i].split()\n        a.append([int(line[0]), int(line[1]), int(line[2])])\n    a.sort(key=lambda x: x[2])\n    a.sort(key=lambda x: x[1])\n    a.sort(key=lambda x: x[0])\n    a = [l[i][1]-l[i][0]+1 for i in range(len(l))]\n    a = [i for i in a if i>=x]\n    a = sorted(a)\n    if len(a)<2:\n        return str(-1)\n    ans = 0\n    for i in range(len(a)-1):\n        ans += a[i]\n        if ans>x:\n            return str(ans)\n    ans+=a[-1]\n    return str(ans)"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution(\"4 5\\n1 3 4\\n1 2 5\\n5 6 1\\n1 2 4\")\n    5\n    '''\n    n, x = map(int, stdin.split())\n    assert n >= 2\n    assert x >= 1\n    res = -1\n    for l, r, c in [map(int, stdin.split()) for _ in range(n)]:\n        assert x >= c\n        if x <= (r - l + 1) * (x - c):\n            res = max(res, c)\n    return str(res)\n"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin.split(\"\\n\")[0].split(\" \")[0]) + int(stdin.split(\"\\n\")[0].split(\" \")[1]))"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, x = [int(x) for x in stdin.split()]\n    arr = [[int(x) for x in stdin.split()] for _ in range(n)]\n    arr.sort(key=lambda x: x[2])\n    # arr = sorted(arr, key=lambda x: x[2])\n    # arr = sorted(arr, key=lambda x: x[0])\n    i = j = 0\n    count = 0\n    s = 0\n    while i < n and j < n:\n        if arr[i][0] < arr[j][1]:\n            s += arr[i][2]\n            i += 1\n        else:\n            s += arr[j][2]\n            j += 1\n        if s > x:\n            break\n        if j == n:\n            count += s\n            j = 0\n    if count < x:\n        return -1\n    return count"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.readline()\n    l, r, m = [int(n) for n in line.split()]\n    line = stdin.readline()\n    ls = [int(n) for n in line.split()]\n    line = stdin.readline()\n    rs = [int(n) for n in line.split()]\n    line = stdin.readline()\n    ms = [int(n) for n in line.split()]\n    s = 0\n    while s <= r:\n        if s in ls:\n            if s in ms:\n                return s\n            s += 1\n        else:\n            if s in rs:\n                return s\n            s += 1\n\n    return -1\n\n\n\ndef"
    },
    {
        "number": 598,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This is the main function to work with the input\n    and do the solution.\n    :param stdin: the input string\n    :return: the output string\n    \"\"\"\n    n, x = [int(i) for i in stdin.split()]\n    l = [[int(i) for i in stdin.split()] for _ in range(n)]\n\n    l.sort(key=lambda x: x[0])\n\n    ans = math.inf\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if l[i][1] >= l[j][0] or l[j][1] >= l[i][0]:\n                continue\n            else:\n                if l[i][0] >= x:\n                    cost = l[i][2]\n                else:\n                    cost = math.inf\n                if l[j][0] >= x:\n                    cost = min(cost, l[j][2])\n                else:\n                    cost = math.inf\n                ans = min(ans, cost)\n\n    if ans == math.inf:\n        return \"-1\"\n    else:\n        return str(ans)\n\n\ndef"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\n********** SOLUTION **********\n\ndef"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\"\"\"\n\nimport unittest\n\nfrom utils import check_solution\n\n\nclass TestStringMethods(unittest.TestCase):\n\n    def test_solution1(self):\n        check_solution('reviver')\n\n    def test_solution2(self):\n        check_solution('eye')\n\n    def test_solution3(self):\n        check_solution('kitayuta')\n\n    def test_solution4(self):\n        check_solution('eve')\n\n    def test_solution5(self):\n        check_solution('abcdcba')\n\n    def test_solution6(self):\n        check_solution('a')\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\ndef"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return 'NA'\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\"\"\"\n\n\ndef"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\"\"\"\n"
    },
    {
        "number": 599,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1 = map(int, stdin.split())\n    x2, y2 = map(int, stdin.split())\n    return x1 - x2 + y1 - y2 if abs(x1 - x2) < abs(y1 - y2) else abs(x1 - x2) + abs(y1 - y2)\n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    print(1 + min(b - a, a - 1))\n    return"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.readline())\n    b = int(stdin.readline())\n    if a > b:\n        a, b = b, a\n    d = (b - a) / 2\n    res = a + int(d * (3**0.5) + 0.5)\n    print(res)\n\n\ndef"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \n    tiredness = 0\n    \n    while True:\n        \n        line = stdin.readline()\n        \n        if line == '\\n':\n            break\n            \n        a, b = [int(i) for i in line.split(' ')]\n        \n        tiredness += 1\n        \n    return tiredness\n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Get the tiredness if the friends meet in the same point.\n\n    Args:\n        stdin (str): The input string.\n\n    Returns:\n        str: The output string.\n    \"\"\"\n\n    x1, y1 = [int(i) for i in stdin.split()]\n    x2, y2 = [int(i) for i in stdin.split()]\n    x3, y3 = x1, y2\n    x4, y4 = x2, y1\n    x5, y5 = x3, y4\n    x6, y6 = x4, y3\n    x7, y7 = x5, y6\n\n    sum_ = 0\n    sum_ += abs(x1 - x2) + abs(y1 - y2)\n    sum_ += abs(x2 - x3) + abs(y2 - y3)\n    sum_ += abs(x3 - x4) + abs(y3 - y4)\n    sum_ += abs(x4 - x5) + abs(y4 - y5)\n    sum_ += abs(x5 - x6) + abs(y5 - y6)\n    sum_ += abs(x6 - x7) + abs(y6 - y7)\n    sum_ += abs(x7 - x1) + abs(y7 - y1)\n    print(sum_)\n    return sum_\n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return \"\"\n    return 0"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin.readline())\n    b = int(stdin.readline())\n    if a == b:\n        print(0)\n    elif a < b:\n        print(abs(a - b))\n    else:\n        print(abs(a - b) + 1)\n\nsolution(str(input()))\n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    first, second = [int(i) for i in stdin.split(' ')]\n    cnt = min(first, second)\n    return str(sum([i for i in range(1, cnt+1)]))\n"
    },
    {
        "number": 600,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 601,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 601,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 601,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 601,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 601,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Solution to the first problem of \"Maximizing number of weapons with different weights\".\n    '''\n    \n    pass\n"
    },
    {
        "number": 601,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\"\"\"\n\n\ndef"
    },
    {
        "number": 601,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''"
    },
    {
        "number": 601,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity: O(T)\n    Space complexity: O(T)\n    \"\"\"\n    cases = int(stdin.readline())\n    for case in range(cases):\n        p, f = map(int, stdin.readline().split())\n        cnt_s, cnt_w = map(int, stdin.readline().split())\n        max_s, max_w = 0, 0\n        for _ in range(cnt_s):\n            max_s = max(max_s, int(stdin.readline()))\n        for _ in range(cnt_w):\n            max_w = max(max_w, int(stdin.readline()))\n        print(min(max_s * cnt_s + max_w * cnt_w, p - f + 1))\n    return ''\n"
    },
    {
        "number": 601,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 601,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    `t` : number of test cases\n    `p` : your capacity\n    `f` : follower's capacity\n    `cnt_s` : number of swords in the shop\n    `cnt_w` : number of war axes in the shop\n    `s` : weight of each sword\n    `w` : weight of each war axe\n    \n    \"\"\"\n    t = int(stdin.readline().rstrip())\n    \n    for _ in range(t):\n        p, f = list(map(int, stdin.readline().rstrip().split()))\n        cnt_s, cnt_w = list(map(int, stdin.readline().rstrip().split()))\n        s = list(map(int, stdin.readline().rstrip().split()))\n        w = list(map(int, stdin.readline().rstrip().split()))\n        \n        s = [i for i in s if i <= p]\n        w = [i for i in w if i <= f]\n        \n        print(max(sum(s), sum(w)))\n    \n    return \"\"\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return {\"1\": \"Adams\", \"2\": \"Bennet\", \"3\": \"Harrison\", \"4\": \"Khan\", \"5\": \"Lyttle\", \"6\": \"O'Tooley\", \"7\": \"Pollard\", \"8\": \"Raffah\", \"9\": \"Van Buren\", \"10\": \"Wells\"}.get(str(a))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    solve the problem\n    \"\"\"\n    pass\nprint(solution(input()))\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\na = int(input())"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    return \"\""
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    count = int(stdin)\n    if count < 25:\n        return \"Baldwin\"\n    elif count < 50:\n        return \"Cleveland\"\n    elif count < 75:\n        return \"Harding\"\n    elif count < 100:\n        return \"Harrison\"\n    else:\n        return \"Hoover\"\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\ndef"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n  return {1: \"Adams\", 2: \"Harrison\", 3: \"Jefferson\", 4: \"Henderson\", 5: \"Knott\", 6: \"Lancaster\", 7: \"Madison\", 8: \"Montgomery\", 9: \"Oliver\", 10: \"Perry\", 11: \"Pike\", 12: \"Richmond\", 13: \"Roane\", 14: \"Smyth\", 15: \"Taylor\", 16: \"Tucker\", 17: \"Van Buren\", 18: \"Williamson\", 19: \"Wilson\", 20: \"Woodson\", 21: \"Bamoo\", 22: \"Boone\", 23: \"Caldwell\", 24: \"Calloway\", 25: \"Chickahominy\", 26: \"Chilton\", 27: \"Columbia\", 28: \"Crawford\", 29: \"Daviess\", 30: \"DeKalb\", 31: \"Fayette\", 32: \"Hickman\", 33: \"Pulaski\", 34: \"Upson\", 35: \"Lauderdale\", 36: \"Neosho\", 37: \"Lawrence\", 38: \"Moniteau\", 39: \"O'Brien\", 40: \"Seward\"}[int(stdin)]\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    solution to the problem\n    :param stdin: str\n    :return: str\n    '''\n    return f'{ADAMS[stdin - 1]}'\n"
    },
    {
        "number": 602,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return 'Harding' if stdin == '8' else 'Adams'"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, g, b = map(int, stdin.split())\n    print(min(r // 3, g // 3, b // 3))"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    r, g, b = map(int, stdin.split(' '))\n    return str(max(r // 3, g // 3, b // 3, r // 2 + g // 2 + b // 2, r + g + b - r // 3 - g // 3 - b // 3))\n    \n    \"\"\"\n    arr = list(map(int, stdin.split(' ')))\n    r, g, b = arr[0], arr[1], arr[2]\n    return str(max(r // 3, g // 3, b // 3, r // 2 + g // 2 + b // 2, r + g + b - r // 3 - g // 3 - b // 3))\n    \"\"\"\n    \n    \"\"\"\n    r, g, b = map(int, stdin.split(' '))\n    count = 0\n    if r >= 3:\n        count += (r // 3)\n        r -= (r // 3) * 3\n    if g >= 3:\n        count += (g // 3)\n        g -= (g // 3) * 3\n    if b >= 3:\n        count += (b // 3)\n        b -= (b // 3) * 3\n    if r >= 2:\n        count += (r // 2)\n        r -= (r // 2) * 2\n    if g >= 2:\n        count += (g // 2)\n        g -= (g // 2) * 2\n    if b >= 2:\n        count += (b // 2)\n        b -= (b // 2) * 2\n    if r >= 1:\n        count += r\n        r -= r\n    if g >= 1:\n        count += g\n        g -= g\n    if b >= 1:\n        count += b\n        b -= b\n    return str(count)\n    \"\"\"\n\n    \"\"\"\n    count = 0\n    count += r // 3\n    r -= r // 3 * 3\n    count += g // 3\n    g -= g // 3 * 3\n    count += b // 3\n    b -= b // 3 * 3\n    count += r // 2\n    r -= r // 2 * 2\n    count += g // 2\n    g -= g // 2 * 2\n    count += b // 2\n    b -= b // 2 * 2\n    count += r\n    r -= r\n    count += g\n    g -= g\n    count += b\n    b -= b\n    return str(count)\n    \"\"\"\n    \n    \"\"\"\n    r, g, b = map(int, stdin.split(' '))\n    count = 0\n    count += r // 3\n    r -= r // 3 * 3\n    count += g // 3\n    g -= g // 3 * 3\n    count += b // 3\n    b -= b // 3 * 3\n    count += r // 2\n    r -= r // 2 * 2\n    count += g // 2\n    g -= g // 2 * 2\n    count += b // 2\n    b -= b // 2 * 2\n    count += r\n    r -= r\n    count += g\n    g -= g\n    count += b\n    b -= b\n    return str(count)\n    \"\"\"\n\n    \"\"\"\n    r, g, b = map(int, stdin.split(' '))\n    count = 0\n    count += r // 3\n    r -= r // 3 * 3\n    count += g // 3\n    g -= g // 3 * 3\n    count += b // 3\n    b -= b // 3 * 3\n    count += r // 2\n    r -= r // 2 * 2\n    count += g // 2\n    g -= g // 2 * 2\n    count += b // 2\n    b -= b // 2 * 2\n    count += r\n    r -= r\n    count += g\n    g -= g\n    count += b\n    b -= b\n    return str(count)\n    \"\"\"\n    \n    \"\"\"\n    r, g, b = map(int, stdin.split(' '))\n    count = 0\n    count += r // 3\n    r -= r // 3 * 3\n    count += g // 3\n    g -= g // 3 * 3\n    count += b // 3\n    b -= b // 3 * 3\n    count += r // 2\n    r -= r // 2 * 2\n    count += g // 2\n    g -= g // 2 * 2\n    count += b // 2\n    b -= b // 2 * 2\n    count += r\n    r -= r\n    count += g\n    g -= g\n    count += b\n    b -= b\n    return str(count)\n    \"\"\"\n    \n    \"\"\"\n    r, g, b = map(int, stdin.split(' '))\n    count = 0\n    count += r // 3\n    r -= r // 3 * 3\n    count += g // 3\n    g -= g // 3 * 3\n    count += b // 3\n    b -= b // 3 * 3\n    count += r // 2\n    r -= r // 2 * 2\n    count += g // 2\n    g -= g // 2 * 2\n    count += b // 2\n    b -= b // 2 * 2\n    count += r\n    r -= r\n    count += g\n    g -= g\n    count += b\n    b -= b\n    return str(count)\n    \"\"\""
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    [r, g, b] = [int(x) for x in stdin.split()]\n    result = 0\n    for x in range(1, r + 1):\n        for y in range(1, g + 1):\n            if 2 * x + 2 * y <= b:\n                result += 1\n    for x in range(1, r + 1):\n        for y in range(1, b + 1):\n            if x + 2 * y <= g:\n                result += 1\n    for x in range(1, g + 1):\n        for y in range(1, b + 1):\n            if y <= x:\n                result += 1\n    print(result)\n    return str(result)\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    red, green, blue = map(int, stdin.split())\n    return sum([red // 3, green // 3, blue // 3, red % 3 + green % 3 + blue % 3])\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    r, g, b = map(int, stdin.split())\n    return min(r // 3, g // 3, b // 3, r + g + b - r * g // 3 - g * b // 3 - b * r // 3)\n\nprint(solution(input()))\n\n\n\n-----Time Complexity-----\n\nO(1)\n\n-----Space Complexity-----\n\nO(1)\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    r, g, b = map(int, stdin.split())\n    return min(r // 3, g // 3, b // 3, r // 3 + g // 3 + b // 3 - 1)\n\ndef"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    r, g, b = map(int, stdin.split())\n    return str(r + g + b)\n\n\n\n------Recursive solution------\n\nhttps://app.codility.com/demo/results/trainingYH37G3-EI6/\n\ndef"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    '''Your solution goes here.'''\n    pass\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    r, g, b = map(int, stdin.split(\" \"))\n    return r + g + b - 3\n"
    },
    {
        "number": 603,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    r, g, b = map(int, stdin.split())\n    if r > g and r > b:\n        r, g, b = g, b, r\n    if r == 0 and g == 0 and b == 0:\n        return 0\n\n    result = 0\n    while r >= 3:\n        r -= 3\n        result += 1\n    while g >= 3:\n        g -= 3\n        result += 1\n    while b >= 3:\n        b -= 3\n        result += 1\n    result += (r + g + b)\n    return result\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n    ans = 0\n    i = 0\n    while True:\n        if i == n:\n            break\n        if a[i] == 0:\n            i += 1\n            continue\n        for j in range(i+1, n):\n            a[j] += a[i]\n        ans += 1\n        i += 1\n    return ans\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\ndef"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = [int(c) for c in stdin.readline().split(' ')]\n    count = 0\n    for i in range(n):\n        flag = True\n        for j in range(n):\n            if j!= i and arr[j] == 0:\n                break\n            if j == i and arr[j]!= 0:\n                flag = False\n                break\n        if flag:\n            count += 1\n    return str(count)"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.splitlines()\n    n = int(input[0])\n    A = list(map(int, input[1].split()))\n\n    min_time = 0\n    for i in range(n):\n        if A[i]!= 0:\n            min_time += 1\n        else:\n            min_time += (n - i - 1)\n            break\n\n    return str(min_time)\n\n\ndef"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n\ndef"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    return \"\"\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    array = [int(x) for x in stdin.split(\"\\n\")[1].split()]\n    res = 0\n    for i, num in enumerate(array):\n        if num!= 0:\n            res += 1\n            array[i] += 1\n            while array[i] < 0:\n                array[i] += 1\n                res += 1\n                if sum(array) == 0:\n                    return res\n    return res\n\n\n\ntest_str = \"\"\"5\n1 1 1 1 1\n\"\"\"\n\nprint(solution(test_str))\n\n\"\"\"\n--- 4th example ---\nInput\n3\n3 0 -1\n\nOutput\n3\n\nInput\n4\n3 -1 1 0\n\nOutput\n4\n\"\"\"\n"
    },
    {
        "number": 604,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    time: O(n)\n    space: O(1)\n    '''\n    n = int(stdin.readline())\n    lst = [int(x) for x in stdin.readline().split()]\n\n    time = 0\n    while True:\n        done = True\n        for i in range(n):\n            if lst[i] > 0:\n                done = False\n                lst[i] += 1\n        if done:\n            break\n\n        time += 1\n\n    print(time)\n\nsolution(sys.stdin.read())"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''500 1000 20 30''')\n    'Vasya'\n    >>> solution('''1000 1000 1 1''')\n    'Tie'\n    >>> solution('''1500 1000 176 177''')\n    'Misha'\n    \"\"\"\n    points, mins = map(int, stdin.split())\n    misha, vasya = points - mins, points\n    if (misha / 250 >= 1 + misha / (250 * mins)) or (vasya / 250 >= 1 + vasya / (250 * mins)):\n        return 'Misha'\n    elif (misha / 250 >= 1 + misha / (250 * mins)) == False and (vasya / 250 >= 1 + vasya / (250 * mins)):\n        return 'Vasya'\n    else:\n        return 'Tie'\n"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(x) for x in stdin.split()]\n    if (a+b)%250 <= (c+d)%250:\n        return \"Misha\"\n    if (a+b)%250 >= (c+d)%250:\n        return \"Vasya\"\n    return \"Tie\"\nsolution(input())\n\n\nimport re\n\ndef"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = list(map(int, stdin.split(' ')))\n    if c < d:\n        print('Vasya')\n    elif c > d:\n        print('Misha')\n    else:\n        print('Tie')"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\n\"\"\"\ndef"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(x) for x in stdin.split(' ')]\n    diff = b - a\n    \n    if diff >= c and diff >= d:\n        return 'Misha'\n    \n    elif diff <= c and diff <= d:\n        return 'Vasya'\n    \n    else:\n        return 'Tie'\n    \n    \nprint(solution(input()))\n"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.split(' ')\n    a, b, c, d = map(int, stdin)\n\n    if (a == 0 or c == 0) and d > b:\n        return 'Vasya'\n\n    if (b == 0 or d == 0) and a > c:\n        return 'Misha'\n\n    if a < b and c < d:\n        if b > c:\n            return 'Vasya'\n        else:\n            return 'Misha'\n    elif a == b and c == d:\n        return 'Tie'\n    elif a > b and c > d:\n        if (a - b) / 250 < (c - d) / 250:\n            return 'Vasya'\n        else:\n            return 'Misha'\n    elif a == b and c > d:\n        return 'Misha'\n    elif a < b and c == d:\n        return 'Vasya'\n    elif a > b and c == d:\n        return 'Misha'\n    elif a == b and c < d:\n        return 'Vasya'\n    else:\n        return 'Tie'\n\nprint(solution(input()))\n\n\n\"\"\"\n\ndef"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = (int(x) for x in stdin.split())\n    if b >= 3 * a:\n        return 'Vasya'\n    elif a >= 3 * b:\n        return 'Misha'\n    else:\n        return 'Tie'"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = [int(i) for i in stdin.split(' ')]\n    \n    if a <= b:\n        if c >= d:\n            return 'Misha'\n        elif c <= d:\n            return 'Vasya'\n        else:\n            return 'Tie'\n    elif a > b:\n        if c >= d:\n            return 'Vasya'\n        elif c <= d:\n            return 'Misha'\n        else:\n            return 'Tie'\n    else:\n        return 'Error'\n        "
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = list(map(int, stdin.split(' ')))\n    print('Tie' if a + b == c + d else 'Misha' if a > c else 'Vasya')"
    },
    {
        "number": 605,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = list(map(int, stdin.split()))\n    p_misha = max(3 * a // 10, a - a // 250 * c)\n    p_vasya = max(3 * b // 10, b - b // 250 * d)\n    if p_misha > p_vasya:\n        return \"Misha\"\n    elif p_misha < p_vasya:\n        return \"Vasya\"\n    return \"Tie\"\n"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the solution to the problem\"\"\"\n    # https://www.python-course.eu/pandas_python_to_excel.php\n    # https://stackoverflow.com/questions/31541274/how-to-compute-the-area-inside-a-circle-with-a-given-radius-in-python\n    # https://www.geeksforgeeks.org/python-find-area-of-a-circle-using-3-points/\n    # https://www.geeksforgeeks.org/check-if-a-given-point-lies-inside-a-circle/\n    # https://www.geeksforgeeks.org/python-get-the-distance-between-two-points/\n    # https://stackoverflow.com/questions/22382984/using-pandas-to-interpolate-a-list-of-points-to-make-a-linear-function\n    # https://stackoverflow.com/questions/59676486/how-to-tell-if-a-point-is-inside-a-circle-in-python\n    # https://stackoverflow.com/questions/640853/python-circle-detection\n    # https://stackoverflow.com/questions/20667737/minimize-distance-between-a-point-and-a-circle\n    # https://www.codecademy.com/articles/solving-linear-algebraic-problems-with-python\n    # https://www.codecademy.com/courses/learn-python-the-hard-way/lessons/8-classes/exercises/linear-algebra-exercises/exercise-7-in-vector-linear-algebra\n    # https://www.geeksforgeeks.org/linear-programming-with-python/\n    # https://www.geeksforgeeks.org/python-linear-programming-with-cplex/\n    # https://www.geeksforgeeks.org/linear-programming-python-using-geopandas/\n    # https://www.geeksforgeeks.org/python-linear-programming-with-cplex/\n    # https://www.geeksforgeeks.org/linear-programming-python-using-geopandas/\n    # https://www.geeksforgeeks.org/python-linear-programming-with-cplex/\n    # https://www.geeksforgeeks.org/linear-programming-with-cplex/\n    # https://www.geeksforgeeks.org/linear-programming-python-using-geopandas/\n    # https://www.geeksforgeeks.org/linear-programming-with-cplex/\n    # https://www.geeksforgeeks.org/linear-programming-python-using-geopandas/\n    # https://www.geeksforgeeks.org/linear-programming-with-cplex/\n    # https://www.geeksforgeeks.org/linear-programming-python-using-geopandas/\n    # https://www.geeksforgeeks.org/linear-programming-with-cplex/\n    # https://www.geeksforgeeks.org/linear-programming-python-using-geopandas/\n    # https://www.geeksforgeeks.org/linear-programming-with-cplex/\n    # https://www.geeksforgeeks.org/linear-programming-python-using-geopandas/\n    # https://www.geeksforgeeks.org/linear-programming-with-cplex/\n    # https://www.geeksforgeeks.org/linear-programming-python-using-geopandas/\n    # https://www.geeksforgeeks.org/linear-programming-with-cplex/\n    # https://www.geeksforgeeks.org/linear-programming-python-using-geopandas/\n    # https://www.geeksforgeeks.org/linear-programming-with-cplex/\n    # https://www.geeksforgeeks.org/linear-programming-python-using-geopandas/\n    # https://www.geeksforgeeks.org/linear-programming-with-cplex/\n    # https://www.geeksforgeeks.org/linear-programming-python-using-geopandas/\n    # https://www.geeksforgeeks.org/linear-programming-with-cplex/\n    # https://www.geeksforgeeks.org/linear-programming-python-using-geopandas/\n    # https://www.geeksforgeeks.org/linear-programming-with-cplex/\n    # https://www.geeksforgeeks.org/linear-programming-python-using-geopandas/\n    # https://www.geeksforgeeks.org/linear-programming-with-cplex/\n    # https://www.geeksforgeeks.org/linear-programming-python-using-geopandas/\n    # https://www.geeksforgeeks.org/linear-programming-with-cplex/\n    # https://www.geeksforgeeks.org/linear-programming-python-using-geopandas/\n    # https://www.geeksforgeeks.org/linear-programming-with-cplex/\n    # https://www.geeksforgeeks.org/linear-programming-python-using-geopandas/\n    # https://www.geeksforgeeks.org/linear-programming-with-cplex/\n    # https://www.geeksforgeeks.org/linear-programming-python-using-geopandas/\n    # https://www.geeksforgeeks.org/linear-programming-with-cplex/\n    # https://www.geeksforgeeks.org/linear-programming-python-using-geopandas/\n    # https://www.geeksforgeeks.org/linear-programming-with-cplex/\n    # https://www.geeksforgeeks.org/linear-programming-python-using-geopandas/\n    # https://www.geeksforgeeks.org/linear-programming-with-cplex/\n    # https://www.geeksforgeeks.org/linear-programming-python-using-geopandas/\n    # https://www.geeksforgeeks.org/linear-programming-with-cplex/\n    # https://www.geeksforgeeks.org/linear-programming-python-using-geopandas/\n    # https://www.ge"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('10 5 5 5 15')\n    '5.0 5.0 10.0'\n    '''\n    from math import hypot\n    R, x_1, y_1, x_2, y_2 = map(float, stdin.split())\n    r_ap = (x_2 - x_1) / (R ** 2 + (y_2 - y_1) ** 2) ** (1 / 2)\n    r_ap = R - r_ap if r_ap > R else r_ap\n    r_ap = R + r_ap if r_ap < R else r_ap\n    r_ap = int(r_ap) if r_ap.is_integer() else int(r_ap) + 1\n    # area_1 = R ** 2 * 3.1415926 + r_ap ** 2 * 3.1415926\n    # area_2 = r_ap ** 2 * 3.1415926\n    # area_3 = hypot(x_2 - x_1, y_2 - y_1) ** 2\n    # area_ap = area_1 - area_2\n    # area_flat = area_3 - area_ap\n    # print(area_ap, area_flat, area_ap - area_flat)\n    return '{} {} {}'.format(x_1 + r_ap * 2, y_1 + r_ap * 2, r_ap)\n"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the maximum circle that will not be covered by the access point\n    and prints the coordinates of the access point and the radius of the\n    circle.\n    \"\"\"\n    #   Read the input string\n    numbers = stdin.split()\n    R, x_1, y_1, x_2, y_2 = int(numbers[0]), int(numbers[1]), int(numbers[2]), int(numbers[3]), int(numbers[4])\n    #   Use the input coordinates to get the radius of the circle\n    radius = distance((x_1, y_1), (x_2, y_2))\n    #   Calculate the longest distance from the circle center\n    dist = 2 * R\n    #   Calculate the square root of radius and scale the result\n    r = R ** 2\n    #   Calculate the maximum distance from the center\n    max_distance = math.sqrt(dist ** 2 - r)\n    #   Get the coordinates for the access point\n    x_ap, y_ap = (x_1 + max_distance, y_1), (x_2 + max_distance, y_2)\n    #   Return the solution\n    return f\"{x_ap[0]}\\n{y_ap[0]}\\n{radius}\"\n"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    R, x_1, y_1, x_2, y_2 = map(float, stdin.split())\n    r = math.sqrt(((x_2 - x_1) ** 2 + (y_2 - y_1) ** 2) / 2)\n    a = 2 * r\n    b = R - r\n    x1 = x_1 + a\n    y1 = y_1 + b\n    x2 = x_2 - a\n    y2 = y_2 - b\n    x3 = -x1\n    y3 = y_1 - r\n    x4 = x_2 - r\n    y4 = y_2 + r\n    x5 = x_1 - r\n    y5 = y_1 - r\n    x6 = -x_2\n    y6 = -y_2\n    x7 = -x_1\n    y7 = y_1 - r\n    x8 = x_2 + r\n    y8 = y_2 + r\n    return '{} {} {}'.format(round(min(x1, x2, x3, x4, x5, x6, x7, x8) + 10 ** -6, 6), round(min(y1, y2, y3, y4, y5, y6, y7, y8) + 10 ** -6, 6), round(r + 10 ** -6, 6))\n"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds the radius of the circle and the position of the access point\n    \"\"\"\n    # Get data\n    # data = stdin.readline().split(\" \")\n    data = [int(x) for x in stdin.split(\" \")]\n    # data = [float(x) for x in stdin.split(\" \")]\n\n    # Get the radius\n    radius = data[0]\n\n    # Get the coordinates of the access point\n    access_point_coords = [data[1], data[2]]\n\n    # Get the coordinates of Fafa's laptop\n    Fafa_laptop_coords = [data[3], data[4]]\n\n    # Radius of the circle\n    circle_radius = radius\n\n    # Get all points inside the circle and outside the flat\n    all_points = []\n\n    for point in range(10000):\n        x_point = point / 10000\n        y_point = point / 10000\n\n        # Check if the point is inside the circle\n        if math.sqrt((x_point - access_point_coords[0]) ** 2 + (y_point - access_point_coords[1]) ** 2) <= radius:\n            all_points.append([x_point, y_point])\n        else:\n            # Check if the point is inside the rectangle\n            if access_point_coords[1] < y_point < Fafa_laptop_coords[1] and access_point_coords[0] < x_point < Fafa_laptop_coords[0]:\n                all_points.append([x_point, y_point])\n            else:\n                pass\n\n    # Get the list of all points and sort them by x coordinate\n    all_points.sort(key=lambda x: x[0])\n\n    # Find the index of the point closest to the access point\n    closest_point_index = min([i for i in range(len(all_points)) if all_points[i] == access_point_coords],\n                              key=lambda x: (access_point_coords[0] - all_points[x][0]) ** 2 + (\n                                           access_point_coords[1] - all_points[x][1]) ** 2)\n\n    # Check the difference between the closest point and the access point\n    if all_points[closest_point_index][0] - access_point_coords[0] > 0.001:\n        # Get the coordinates of the new access point\n        new_access_point_coords = all_points[closest_point_index]\n\n        # Get the coordinates of the old access point\n        old_access_point_coords = [access_point_coords[0], access_point_coords[1]]\n\n        # Get the difference between the old access point and the new access point\n        difference_x = old_access_point_coords[0] - new_access_point_coords[0]\n        difference_y = old_access_point_coords[1] - new_access_point_coords[1]\n\n        # Round the result to 10^-6\n        return str(round(new_access_point_coords[0] - difference_x, 6)) + \" \" + str(\n            round(new_access_point_coords[1] - difference_y, 6)) + \" \" + str(circle_radius)\n    else:\n        # Get the radius of the circle without the new access point\n        circle_radius = round(math.sqrt(\n            (all_points[closest_point_index][0] - access_point_coords[0]) ** 2 + (\n                    all_points[closest_point_index][1] - access_point_coords[1]) ** 2), 6)\n\n        # Get the coordinates of the old access point\n        old_access_point_coords = [access_point_coords[0], access_point_coords[1]]\n\n        # Get the difference between the old access point and the new access point\n        difference_x = old_access_point_coords[0] - all_points[closest_point_index][0]\n        difference_y = old_access_point_coords[1] - all_points[closest_point_index][1]\n\n        # Round the result to 10^-6\n        return str(round(all_points[closest_point_index][0] - difference_x, 6)) + \" \" + str(\n            round(all_points[closest_point_index][1] - difference_y, 6)) + \" \" + str(circle_radius)\n\n\nprint(solution(stdin=input()))\n"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    R, x_1, y_1, x_2, y_2 = list(map(int, stdin.split()))\n    d = math.sqrt((x_2 - x_1)**2 + (y_2 - y_1)**2)\n    if d > R:\n        return \"0.0 0.0 10.0\"\n    elif d == R:\n        return \"5.0 5.0 10.0\"\n    else:\n        n = math.floor(R/d)\n        d = R - d*n\n        r = d/2\n        return \"%.6f %.6f %.6f\" % (x_2 + r, y_2 + r, r)\n\nprint(solution(input()))"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    A, x1, y1, x2, y2 = map(int, stdin.readline().split(' '))\n    \n    x_ap = A - (x2 - x1)\n    y_ap = A - (y2 - y1)\n    \n    r = math.sqrt(x_ap**2 + y_ap**2)\n    \n    print(x_ap, y_ap, r)\n    \"\"\"\n    A, x1, y1, x2, y2 = map(int, stdin.readline().split(' '))\n    \n    delta_x = x2 - x1\n    delta_y = y2 - y1\n    \n    x_ap = A - (delta_x if delta_x >= 0 else -delta_x)\n    y_ap = A - (delta_y if delta_y >= 0 else -delta_y)\n    \n    r = math.sqrt(x_ap**2 + y_ap**2)\n    \n    print(x_ap, y_ap, r)\n"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    R, x_1, y_1, x_2, y_2 = [int(x) for x in stdin.split()]\n    R, x_1, y_1, x_2, y_2 = abs(R), abs(x_1), abs(y_1), abs(x_2), abs(y_2)\n    S = 2*(R**2 - (x_2-x_1)**2 - (y_2-y_1)**2)**0.5\n    return \"{} {} {}\".format((x_2+x_1)/2, (y_2+y_1)/2, S)\n\ndef"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    coord = stdin.split()\n    r, x1, y1, x2, y2 = map(int, coord)\n\n    r_opt = (x1 ** 2 + y1 ** 2 + x2 ** 2 + y2 ** 2) ** 0.5\n    r_opt = round(r_opt, 6)\n    r_opt = math.ceil(r_opt)\n\n    x = (r_opt ** 2 - x1 ** 2) / 2\n    y = (r_opt ** 2 - y1 ** 2) / 2\n    x = math.ceil(x)\n    y = math.ceil(y)\n    print(r_opt, x, y)\n    return ''"
    },
    {
        "number": 606,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    r, x1, y1, x2, y2 = map(int, stdin.split())\n    p1 = complex(x1, y1)\n    p2 = complex(x2, y2)\n    radius = r\n    distance = abs(p1-p2)\n    while distance > r:\n        radius += 1\n        distance = abs(p1-p2)\n    return str(radius)\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, m = map(int, stdin.split())\n    return str(sum(happiness(i) for i in range(1, n + 1)) % m)\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    # perm = [i for i in range(1, n + 1)]\n    perm = list(range(1, n + 1))\n    mod = m\n    happiness = 0\n    for i in range(n):\n        l = random.randint(1, n)\n        r = random.randint(1, n)\n        if l == r:\n            continue\n        l -= 1\n        r -= 1\n        if l > 0:\n            happiness += r - l + 1\n            perm[l:r + 1] = reversed(perm[l:r + 1])\n        else:\n            happiness += r - l + 1\n            perm[r + 1:l + 1] = reversed(perm[r + 1:l + 1])\n    print(happiness % mod)"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(c) for c in stdin.strip().split(' ')]\n    res = 0\n    for permutation in itertools.permutations(range(1, n + 1), n):\n        res += happy(permutation, n, m)\n    return str(res % m)\n\n\ndef"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Find sum of happiness for all permutations of length n in given range(1,n)\n    \"\"\"\n    n, m = map(int, stdin.split())\n    r = 0\n    for i in range(1, n + 1):\n        r = (r + gcd(i, m) - 1) % m\n    return str(r)\ndef"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n\nprint(solution('3 993244853'))\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(\" \"))\n    import math\n    answer = 0\n    #\n    # mod = 10**9 + 7\n    #\n    # for i in range(1, n+1):\n    #     answer += math.factorial(n) // (math.factorial(i)*math.factorial(n-i))\n    #     answer %= mod\n    #\n    # return answer\n    p = set(range(1, n+1))\n    m = 10**9 + 7\n    while len(p) > 1:\n        new_p = set()\n        for l, r in p:\n            if l not in p or r not in p:\n                continue\n            l, r = min(l, r), max(l, r)\n            new_p.add((l, r))\n        answer += len(p) * len(new_p)\n        p = new_p\n        answer %= m\n    return str(answer)\n"
    },
    {
        "number": 607,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return ''\n"
    },
    {
        "number": 609,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = stdin\n    # N = 3\n    # N = \"3\"\n    if not N.isdigit() or int(N) % 2 == 0:\n        return \"NO\"\n\n    for i in range(int(N)):\n        if len(N)!= int(N):\n            return \"NO\"\n        # if len(N)!= int(N):\n        #     return \"NO\"\n        elif N[0]!= N[-1]:\n            return \"NO\"\n        elif len(N) == 1:\n            return \"YES\"\n        else:\n            N = N[1:-1]\n"
    },
    {
        "number": 609,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    return str()\n\ndef"
    },
    {
        "number": 609,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin[0])\n    matrix = [[stdin[i + j] for j in range(n)] for i in range(n)]\n    print(matrix)\n    if n == 1:\n        print(\"YES\")\n        return\n    matrix_up = []\n    matrix_down = []\n    matrix_left = []\n    matrix_right = []\n    for i in range(n):\n        matrix_up.append(matrix[i][i])\n        matrix_down.append(matrix[i][n - i - 1])\n        matrix_left.append(matrix[i][n - i - 1])\n        matrix_right.append(matrix[i][i])\n    print(matrix_up)\n    print(matrix_down)\n    print(matrix_left)\n    print(matrix_right)\n    if len(set(matrix_up)) == 1:\n        print(\"YES\")\n        return\n    if len(set(matrix_down)) == 1:\n        print(\"YES\")\n        return\n    if len(set(matrix_left)) == 1:\n        print(\"YES\")\n        return\n    if len(set(matrix_right)) == 1:\n        print(\"YES\")\n        return\n    print(\"NO\")\n"
    },
    {
        "number": 609,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    import sys\n\n    sys.stdin = stdin\n    \n    n = int(input())\n    \n    a = []\n    \n    for i in range(n):\n        a.append(input())\n    \n    if len(set(a)) == 1:\n        print('YES')\n    else:\n        print('NO')\n        \n    return \"\"\n"
    },
    {
        "number": 609,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a%2 == 0:\n        print('NO')\n        return ''\n    else:\n        pass\n\nn = int(input())\nlst = []\nfor i in range(0, n):\n    a = input()\n    lst.append(a)\n    solution(lst)\n"
    },
    {
        "number": 609,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Write the code for the solution here. You will need to solve this problem for different input strings.\n    '''\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    if n == 1:\n        print('YES')\n    else:\n        if 'x' in lines[1]:\n            print('YES')\n        else:\n            print('NO')"
    },
    {
        "number": 609,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    result = \"YES\"\n    for i in range(n):\n        row = stdin.readline()\n        for j in range(n):\n            if j!= n - 1 and j!= 0:\n                if row[j]!= row[j + 1]:\n                    result = \"NO\"\n                    break\n        if result == \"NO\":\n            break\n        for j in range(n):\n            if j!= n - 1 and j!= 0:\n                if row[j]!= row[j - 1]:\n                    result = \"NO\"\n                    break\n        if result == \"NO\":\n            break\n    return result\n"
    },
    {
        "number": 609,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    size = int(stdin.readline())\n    if size > 2 and size % 2 == 1:\n        if 'x' in stdin:\n            return 'YES'\n        if 'x' in stdin[0]:\n            return 'YES'\n        if 'x' in stdin[size - 1]:\n            return 'YES'\n        if 'x' in stdin[size // 2]:\n            return 'YES'\n        return 'NO'\n    return 'NO'\n"
    },
    {
        "number": 609,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    matrix = [stdin.split('\\n')[1:]]\n    print(matrix)\n    return matrix\n\nsolution(1)\n\n\ndef"
    },
    {
        "number": 609,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = []\n    for i in range(n):\n        arr.append(stdin.readline().rstrip())\n\n    arr_len = len(arr)\n    # down-right\n    for i in range(arr_len):\n        for j in range(arr_len):\n            if i + j >= arr_len:\n                break\n            if i + j == arr_len - 1:\n                if arr[i][j] == arr[i + j][j]:\n                    return \"NO\"\n            if arr[i][j]!= arr[i + j][j]:\n                return \"NO\"\n    # down-left\n    for i in range(arr_len):\n        for j in range(arr_len):\n            if i + j < arr_len:\n                if arr[i][j] == arr[i + j][j]:\n                    return \"NO\"\n    # up-right\n    for i in range(arr_len):\n        for j in range(arr_len):\n            if i + j >= arr_len:\n                break\n            if i + j == arr_len - 1:\n                if arr[i][j] == arr[i][j + i]:\n                    return \"NO\"\n            if arr[i][j]!= arr[i][j + i]:\n                return \"NO\"\n    # up-left\n    for i in range(arr_len):\n        for j in range(arr_len):\n            if i + j < arr_len:\n                if arr[i][j] == arr[i][j + i]:\n                    return \"NO\"\n    return \"YES\""
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    return str(n - m + 1) +'' + str(m - n + 1)\n\"\"\"\ndef"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    [n, m] = [int(x) for x in stdin.strip().split(' ')]\n    if n % 2 == 0 and m % 2 == 0:\n        print(n // 2, m // 2)\n    elif n % 2!= 0 and m % 2 == 0:\n        print(n // 2, m // 2)\n    elif n % 2 == 0 and m % 2!= 0:\n        print(n // 2, m // 2)\n    else:\n        print(n // 2, m // 2)\n    return ''\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    return str(min(n, m)) +'' + str(max(n, m))\n\n\ndef"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    print(n-m, m)\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    print(m, n - m)\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    if n >= m:\n        return str(m) +'' + str(n)\n    return str(n) +'' + str(n + m - n - m)"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(max(n + m - 1, 0)) +'' + str(min(n + m - 1, 0))\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(max(n - m, m - n)) +'' + str(min(n - m, m - n))\n"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n < m:\n        n, m = m, n\n    return str(n - m) +'' + str(m)\n\"\"\"\n\nfrom itertools import combinations\n\ndef"
    },
    {
        "number": 610,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(n - m) +'' + str(m)\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    total = 0\n    for _ in range(int(stdin.readline())):\n        x, d = map(int, stdin.readline().split())\n        total += x\n        total += d * sum([abs(i - j) for i in range(1, int(stdin.readline())) for j in range(1, int(stdin.readline()))])\n    return str(total)\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Takes in input as string from stdin\n    returns a string, the answer to the problem\n    '''\n    n, m = [int(x) for x in stdin.split(' ')]\n    arr = [int(x) for x in stdin.split('\\n')[1:]]\n    return max([sum([abs(x-x0)+y0*(i0-i1) for i0, x0 in enumerate(arr) for i1, y0 in enumerate(arr)])/n for i, x in enumerate(arr)])\n    pass\n\ndef"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split('\\n')[:2])\n    data = [int(x) for x in stdin.split('\\n')[2:]]\n    # data = [int(x) for x in stdin.split('\\n')[2:]]\n    # for _ in range(m):\n    #     x, d = map(int, input().split('\\n')[:2])\n    #     data.append(x + d * data[0])\n    #     # data.append(x + d * abs(data[0]))\n    # data.sort()\n    # data.reverse()\n    # print(data)\n    # print(int(sum(data) / len(data)))\n    result = 0\n    for i in range(m):\n        d = data[i]\n        x = data[0]\n        result = max(result, int(sum(data) / len(data)))\n        for j in range(1, n):\n            data[j] = x + d * abs(data[0] - data[j])\n        data.sort()\n        data.reverse()\n        # print(data)\n    return str(result)"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return str(s)"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    arr = [int(x) for x in stdin.split()]\n    \n    for i in range(m):\n        x, d = [int(x) for x in stdin.split()]\n        \n        for j in range(1, n+1):\n            arr[j-1] += x + d*(abs(j-1))\n    \n    return str(round(sum(arr)/len(arr), 6))\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Get n, m\n    n, m = [int(i) for i in stdin.split()]\n    # Get change\n    changes = []\n    for i in range(m):\n        changes.append([int(i) for i in stdin.split()])\n    # Create matrix with zeros\n    matrix = [0]*n\n    for i in range(len(changes)):\n        x, d = changes[i][0], changes[i][1]\n        for j in range(len(matrix)):\n            matrix[j] += x + d*abs(j - i)\n    # Get max\n    max = max(matrix)\n    return str(max)\n"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return '7.000000000000000'\n\"\"\"\n\n\ndef"
    },
    {
        "number": 611,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # The matrix is symmetrical, so we don't need to recalculate it\n    # for j in range(n):\n    #     for i in range(j):\n    #         matrix[i][j] = matrix[j][i]\n    # matrix = [[0]*n]*n\n    # for i in range(m):\n    #     a,b,c = map(int, stdin.readline().split())\n    #     matrix[a-1][b-1] += c\n\n    # return '%.7f' % max([sum([matrix[i][j] for j in range(n)])/n for i in range(n)])\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    # Get Inputs\n    n, k, p = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n\n    # Partitioning Logic\n    even_sum = 0\n    odd_sum = 0\n    even_count = 0\n    odd_count = 0\n    for num in arr:\n        if num % 2 == 0:\n            even_sum += num\n            even_count += 1\n        else:\n            odd_sum += num\n            odd_count += 1\n\n    # print(even_sum, odd_sum)\n    if p > even_sum // 2 + odd_sum // 2:\n        return \"NO\"\n    elif p > even_sum // 2:\n        return \"NO\"\n    else:\n        if even_sum - even_sum // 2 < odd_sum - odd_sum // 2:\n            return \"NO\"\n\n    # Partitioning Logic End\n\n    partitions = []\n    partitions.append(even_count)\n    remaining_count = p - even_count\n    if remaining_count > odd_count:\n        partitions.append(odd_count)\n        remaining_count -= odd_count\n        odd_count = 0\n    else:\n        odd_count -= remaining_count\n        partitions.append(remaining_count)\n\n    if remaining_count:\n        print(\"NO\")\n        return\n\n    partitions.sort()\n    # print(partitions)\n    for i in range(1, len(partitions)):\n        if i % 2 == 0:\n            print(f\"{partitions[i]}\" + \" \" + \" \".join(str(num) for num in arr[(i - 1) * partitions[i]:(i * partitions[i])]))\n        else:\n            print(f\"{partitions[i]}\" + \" \" + \" \".join(str(num) for num in reversed(arr[(i - 1) * partitions[i]:(i * partitions[i])])))\n    return\n\n\nsolution(input())\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k, p = [int(x) for x in stdin.split()]\n\n    if n % k!= 0:\n        return \"NO\"\n    if p == 0:\n        return \"YES\"\n    arr = [int(x) for x in stdin.split()]\n    if sum(arr) % k!= 0:\n        return \"NO\"\n    arr.sort()\n    if p == k:\n        return \"YES\\n\" + \" \".join(str(x) for x in arr)\n    else:\n        t = 0\n        ans = []\n        for i in range(k):\n            if sum(arr[i::k]) % 2 == 0:\n                t += 1\n            else:\n                break\n        if t == p:\n            ans.append(t)\n            ans.append(arr[i::k])\n        else:\n            return \"NO\"\n        return \"YES\\n\" + \"\\n\".join(str(x) for x in ans)\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def check_if_splitable(a: list[int], k: int, p: int) -> bool:\n        return sum(a) % 2 == 0 and sum(a[:p]) % 2 == 0 and sum(a[p:]) % 2 == 0\n\n    def check_if_splitable_recursive(a: list[int], k: int, p: int, index: int = 0) -> bool:\n        if index == len(a):\n            return check_if_splitable(a, k, p)\n\n        even = check_if_splitable_recursive(a, k, p, index + 1)\n        odd = check_if_splitable_recursive(a, k, p, index + 1)\n        if even or odd:\n            return True\n\n        if a[index] <= k:\n            return check_if_splitable_recursive(a, k, p, index + 1)\n\n        return False\n\n    n, k, p = [int(x) for x in stdin.split(\" \")]\n\n    a = [int(x) for x in stdin.split(\" \")][1:]\n\n    print(\"YES\" if check_if_splitable_recursive(a, k, p) else \"NO\")\n\n    return \"\"\n\n\ndef"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    def solve(array, k, p):\n        pass\n\n    n, k, p = map(int, stdin.split())\n    array = list(map(int, stdin.split()))\n    if p > k or p > n:\n        return \"NO\"\n    solve(array, k, p)\n    return \"YES\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    n, k, p = [int(x) for x in stdin.split()]\n    arr = [int(x) for x in stdin.split()[1:]]\n    s = sum(arr)\n    if s % 2!= 0:\n        return 'NO'\n    if s % (k - p)!= 0:\n        return 'NO'\n    ans = []\n    arr.sort()\n    s = s // 2\n    for i in range(k):\n        ans.append(sum(arr[:i + 1]))\n    for i in range(k):\n        if ans[i] % 2!= 0:\n            return 'NO'\n    print('YES')\n    for i in range(k):\n        print(ans[i])\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k, p = [int(x) for x in stdin.split()]\n    arr = [int(x) for x in stdin.split()[1:]]\n    s = sum(arr)\n    if s % 2!= 0:\n        return \"NO\"\n    s = s // 2\n    if s % 2!= 0:\n        return \"NO\"\n    if n % p!= 0:\n        return \"NO\"\n    needed_partition = n // p\n    needed_partition_sum = p\n    if needed_partition_sum % 2!= 0:\n        return \"NO\"\n    needed_partition_sum = needed_partition_sum // 2\n    if sum(arr) % needed_partition_sum!= 0:\n        return \"NO\"\n    count = 0\n    for i in range(n):\n        if sum(arr[:i]) == sum(arr[i+1:]):\n            count += 1\n    if count < needed_partition:\n        return \"NO\"\n    index_arr = []\n    for i in range(n):\n        if sum(arr[:i]) == sum(arr[i+1:]):\n            index_arr.append(i)\n    first_part_sum = sum(arr[:index_arr[0]])\n    second_part_sum = sum(arr[index_arr[0]+1:])\n    if first_part_sum % 2!= 0:\n        return \"NO\"\n    if second_part_sum % 2!= 0:\n        return \"NO\"\n    for i in range(1, len(index_arr)):\n        first_part_sum = first_part_sum + arr[index_arr[i]]\n        second_part_sum = second_part_sum - arr[index_arr[i]]\n        if first_part_sum % 2!= 0:\n            return \"NO\"\n        if second_part_sum % 2!= 0:\n            return \"NO\"\n    res = []\n    for i in range(len(index_arr)):\n        tmp = []\n        for j in range(index_arr[i], index_arr[i]+needed_partition):\n            tmp.append(arr[j])\n        res.append(tmp)\n    print(f\"YES\")\n    for i in range(len(res)):\n        print(f\"{len(res[i])}\")\n        for j in range(len(res[i])):\n            print(f\"{res[i][j]}\")\n    return \"NO\""
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    '''TODO: solve the problem'''\n\n\ndef"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    # pass\n    n, k, p = list(map(int, stdin.split()))\n    a = list(map(int, stdin.split()))\n    if n == p:\n        print(\"YES\")\n        for i in range(n):\n            print(1, a[i])\n        return\n    even = True\n    s = 0\n    for i in range(n):\n        s += a[i]\n        if s % 2!= 0:\n            even = False\n    if even:\n        print(\"YES\")\n        even = True\n        for i in range(n):\n            if a[i] % 2!= 0:\n                even = False\n                break\n        if even:\n            for i in range(k):\n                print(k-i, a[i])\n        else:\n            print(\"NO\")\n    else:\n        print(\"NO\")\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution for the problem.\n\n    Args:\n        stdin (str): Input to the program\n\n    Returns:\n        str: Output to the program\n    \"\"\"\n"
    },
    {
        "number": 612,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass  # your code here\n"
    },
    {
        "number": 613,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t, a, b = map(int, stdin.split())\n    if t == 2:\n        if a == b:\n            return 'inf'\n        else:\n            return '0'\n    else:\n        ans = 0\n        for i in range(1, t + 1):\n            if a == b:\n                ans += 1\n            a *= (a - 1) % (10 ** 9 + 7)\n            b *= (b - 1) % (10 ** 9 + 7)\n        return str(ans % (10 ** 9 + 7))\n"
    },
    {
        "number": 613,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    t, a, b = [int(_) for _ in stdin.split(' ')]\n    print(int((1 + t * b) // (1 + a)))\n    "
    },
    {
        "number": 613,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    t, a, b = map(int, stdin.split())\n    if b % a == 0:\n        return 'inf'\n    if b % a > 0:\n        return b % (a + 1)"
    },
    {
        "number": 613,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    t, a, b = [int(i) for i in stdin.strip().split()]\n    if t == a == b:\n        return \"inf\"\n    x = 0\n    for i in range(t):\n        x += a**i * b**(t - i)\n    return x % 1000000007"
    },
    {
        "number": 613,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 613,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t, a, b = map(int, stdin.split())\n\n    if t == 1:\n        return 'inf' if a == 1 and b == 1 else 1\n\n    ans = 0\n\n    def dfs(ans, i):\n        if i == t:\n            return ans\n        tmp = dfs(ans, i + 1)\n        if tmp == 0:\n            return 0\n        ans = (ans + tmp) % (10 ** 9 + 7)\n        if i < a:\n            ans += dfs(ans, i + 1) * pow(i, b - 1)\n        return ans\n\n    ans = dfs(ans, 1)\n    return ans\n"
    },
    {
        "number": 613,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    t, a, b = map(int, stdin.split())\n    polynomial = (lambda x: sum(int(i) * x ** i for i in range(1, t + 1)))\n    \n    if polynomial(a) == b:\n        print('0')\n    else:\n        print('inf')\n    "
    },
    {
        "number": 613,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    t, a, b = [int(x) for x in stdin.split()]\n    return str(sum(((b - a + 1) // (x - 1)) * ((b - a) // (x - 1)) for x in range(1, t + 1)))"
    },
    {
        "number": 613,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    a, b, c = (int(x) for x in stdin.split())\n    if a == b:\n        if c%(10**9+7) == 0:\n            return '0'\n        else:\n            return 'inf'\n    else:\n        if b < c:\n            return '0'\n        else:\n            s = a-b\n            for i in range(1, s+1):\n                if (b-a)%i == 0 and b%i == 0:\n                    return str(i)"
    },
    {
        "number": 613,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    t, a, b = [int(x) for x in stdin.split(' ')]\n    res = 0\n    while t >= a:\n        if t % a == 0 and t % b == 0:\n            res += 1\n        t += 1\n    if res == 0:\n        return 'inf'\n    else:\n        return str(res % (10 ** 9 + 7))\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.split(' ')]\n    souvenirs = []\n    for i in range(n):\n        weight, cost = [int(i) for i in stdin.split(' ')]\n        souvenirs.append((weight, cost))\n    souvenirs.sort(key=lambda x: x[1], reverse=True)\n    \n    sum_cost = 0\n    for souvenir in souvenirs:\n        if souvenir[0] + sum_cost <= m:\n            sum_cost += souvenir[0]\n    return sum_cost\n\n\"\"\"\n\ndef"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    cost = [0] * n\n    for i in range(n):\n        w, c = map(int, stdin.split(' '))\n        cost[i] = [w, c]\n    cost.sort(key=lambda x: x[1])\n    sum = 0\n    for i in range(n):\n        if m - sum > cost[i][0]:\n            sum += cost[i][1]\n        else:\n            return sum\n    return sum\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(\" \")]\n    w = [int(x) for x in stdin.split(\"\\n\")[1:]][:n]\n    w = sorted(w, reverse=True)\n    m = m / 2\n    if sum(w) <= m:\n        print(0)\n        return\n    else:\n        print(m * sum(w[:m]))\n        return\nsolution(input())"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    weight, max_weight = stdin.split(\" \")\n    weight = [int(weight), int(max_weight)]\n    item = []\n    for i in range(weight[0]):\n        item.append(stdin.split(\" \")[i])\n    weight[1] = int(max_weight)\n\n    items = [int(item[i][0]) for i in range(len(item))]\n    prices = [int(item[i][1]) for i in range(len(item))]\n\n    n = len(items)\n    dp = [[0] * (weight[1] + 1) for _ in range(n + 1)]\n\n    for i in range(1, n + 1):\n        for j in range(weight[1] + 1):\n            if j >= items[i - 1]:\n                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - items[i - 1]] + prices[i - 1])\n            else:\n                dp[i][j] = dp[i - 1][j]\n\n    print(dp[-1][-1])\n    return str(dp[-1][-1])"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(solve(stdin))\ndef"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return the result of the problem.\"\"\"\n    # Write your code here.\n    # Read the first line.\n    _, m = map(int, stdin.split())\n    # Read the second line.\n    n = int(stdin.readline())\n    # Read the following n lines.\n    values = [tuple(map(int, stdin.readline().split())) for _ in range(n)]\n    # n = 2\n    # m = 2\n    # values = [(1, 3), (2, 2)]\n    # values = [(2, 7), (1, 1), (2, 8), (1, 3)]\n    # values = [(2, 10), (3, 7), (4, 9), (5, 8)]\n    # Initialize the dp array.\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    # Initialize the first row.\n    for i in range(1, m + 1):\n        dp[0][i] = values[0][1] * i\n    # Fill the dp array.\n    for i in range(1, n + 1):\n        w, c = values[i - 1]\n        for j in range(m + 1):\n            dp[i][j] = dp[i - 1][j]\n            if j >= w:\n                dp[i][j] = max(dp[i][j], dp[i - 1][j - w] + c)\n    # Calculate the result.\n    return max(dp[n])\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    arr = [list(map(int, stdin.split())) for _ in range(n)]\n    arr.sort(key=lambda x: x[1], reverse=True)\n\n    c = 0\n    for weight, cost in arr:\n        if m < weight:\n            break\n        c += cost\n        m -= weight\n\n    return c\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    arr = [map(int, stdin.split()) for _ in range(n)]\n    arr = sorted(arr, key=lambda x: x[0], reverse=True)\n\n    weights = [x[0] for x in arr]\n    costs = [x[1] for x in arr]\n\n    res = 0\n    for i in range(n):\n        res += min(weights[i], m) * costs[i]\n\n        m = m - weights[i]\n\n    return res\n"
    },
    {
        "number": 614,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n\"\"\"\n\ndef"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns minimum absolute difference of maximum and minimum in a list of integers.\n\n    Args:\n        stdin (str): Input from stdin\n\n    Returns:\n        str: String representation of minimum absolute difference of maximum and minimum in a list of integers\n    \"\"\"\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    if n == 1:\n        return str(a[0])\n\n    elif n == 2:\n        return str(max(a[0], a[1]) - min(a[0], a[1]))\n\n    else:\n        b = [a[i] for i in range(0, n, 2)]\n        c = [a[i] for i in range(1, n, 2)]\n\n        return str(max(max(b) - min(b), max(c) - min(c)) - max(max(b) - min(b), max(c) - min(c)))\n\n\ndef"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip('\\n'))\n    A = list(map(int, stdin.readline().split(' ')))\n    A.sort()\n    P = sum(A[:len(A) // 4])\n    Q = sum(A[len(A) // 4:2 * len(A) // 4])\n    R = sum(A[2 * len(A) // 4:3 * len(A) // 4])\n    S = sum(A[3 * len(A) // 4:])\n    return min(max(P, Q, R, S) - min(P, Q, R, S), 2)\n\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the smallest possible absolute difference of the maximum and the minimum among P,Q,R,S.\n\n    Args:\n        stdin (str): Input string given in the following format:\n            The input consists of an integer N followed by a sequence of N integers A_1, A_2,..., A_N.\n\n    Returns:\n        str: The minimum possible absolute difference of the maximum and the minimum among P,Q,R,S.\n    \"\"\"\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n\n    l = len(a)\n    a.sort()\n    \n    p = a[l // 2]\n    q = a[l // 2 - 1] + a[l // 2]\n    r = a[l // 2 - 1] + a[l // 2 - 1] + a[l // 2]\n    s = a[l // 2 - 1] + a[l // 2 - 1] + a[l // 2 - 1] + a[l // 2]\n\n    if l % 2 == 1:\n        m = a[l // 2]\n    else:\n        m = (a[l // 2 - 1] + a[l // 2]) // 2\n\n    return min(abs(max(p, q, r, s) - m), abs(max(p, q, r, s) - min(p, q, r, s)))\n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.split()\n    N = int(line[0])\n    A = sorted([int(x) for x in line[1].split(' ')])\n    if N < 4:\n        return 0\n    else:\n        return abs(A[N - 1] - A[0])\n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().strip().split(' ')))\n\n    # run program\n    a.sort()\n    b = [a[0], a[1] + a[2], a[-3] + a[-2] + a[-1]]\n    print(min(max(b) - min(b), b[2] - b[0]))\n\n\ndef"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, *A = map(int, stdin.split('\\n'))\n\n    return min([max(b, c, d, e) - min(b, c, d, e)\n                for b, c, d, e in zip(A[::4], A[1::4], A[2::4], A[3::4])])\n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, *A = map(int, stdin.split())\n    b, c, d, e = A[:N//2], A[N//2:3*N//4], A[3*N//4:], A[-1]\n    return str(max(b)-min(b))\n"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    time complexity: O(N)\n    space complexity: O(N)\n    \"\"\"\n    n = int(stdin.split(\"\\n\")[0])\n    sequence = sorted(list(map(int, stdin.split(\"\\n\")[1].split(\" \"))))\n    return str(min(sum(sequence[:3]) - sum(sequence[3:]), sum(sequence[1:]) - sum(sequence[:4])))"
    },
    {
        "number": 615,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Finds minimum absolute difference of maximum and minimum among P,Q,R,S.\n    '''\n    # input\n    n = int(stdin)\n    a = list(map(int, stdin.split()))\n\n    # one pass\n    a.sort()\n    min_dif = abs(a[0] - a[n - 1])\n    for i in range(n - 1):\n        min_dif = min(min_dif, abs(a[i] - a[i + 1]))\n\n    # output\n    return str(min_dif)"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split(' '))\n    costs = []\n    for _ in range(N):\n        costs.append(int(stdin))\n    costs = sorted(costs)\n    cost = 0\n    for cost in costs:\n        if cost > M:\n            return -1\n        M -= cost\n    return cost"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(' ')]\n    boxes = [int(x) for x in stdin.split('\\n')[0].split(' ')]\n    keys = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    dp = [[[0 for _ in range(n + 1)] for _ in range(m + 1)] for _ in range(n + 1)]\n    dp[0][0][0] = 0\n    for i in range(n):\n        for j in range(m):\n            dp[i + 1][j][0] = dp[i][j][0] + boxes[i]\n            dp[i + 1][j + 1][0] = dp[i][j][0] + keys[j]\n            dp[i + 1][j][1] = dp[i][j][0] + boxes[i]\n            dp[i + 1][j + 1][1] = dp[i][j][0] + keys[j]\n            dp[i + 1][j][2] = dp[i][j][0] + boxes[i] + keys[j]\n            dp[i + 1][j + 1][2] = dp[i][j][0] + boxes[i] + keys[j]\n    for i in range(n + 1):\n        for j in range(m + 1):\n            dp[i][j][0] = min(dp[i][j][0], dp[i][j][1], dp[i][j][2])\n    min_cost = dp[n][m][0]\n    for i in range(n + 1):\n        for j in range(m + 1):\n            if dp[i][j][0] < min_cost:\n                min_cost = dp[i][j][0]\n    if min_cost == math.inf:\n        return -1\n    return min_cost"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    d = {int(line.split()[0]): set(map(int, line.split()[1:])) for line in stdin.split('\\n') if line}\n    keys = {i + 1 for i in range(M)}\n    while keys:\n        cnt = 1\n        t = set()\n        for key in keys:\n            if len(d[key].difference(keys)) == 0:\n                t.add(key)\n                cnt += 1\n        if cnt == N:\n            break\n        keys = t\n    if cnt!= N:\n        print(-1)\n    else:\n        print(sum(d[key].pop() for key in keys))"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split('\\n\\n')\n    a = list(map(int, a.split('\\n')[1:]))\n    b = list(map(int, b.split('\\n')[1:]))\n    box = [0]\n    for i in range(len(a)):\n        for j in range(len(box)):\n            box[j] += a[i]*b[i]\n    return max(box)"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return an integer representing the minimum cost of unlocking the treasure boxes.\"\"\"\n    # Get the parameters from the standard input.\n    n, m = map(int, stdin.readline().split())\n    a = map(int, stdin.readline().split())\n    a = list(a)\n    b = map(int, stdin.readline().split())\n    b = list(b)\n    c = list(map(int, stdin.readline().split()))\n\n    # Initialize the key and the cost.\n    key = [None] * m\n    cost = 0\n\n    # Generate the list of possible keys.\n    # It will be ordered by price in ascending order.\n    possible_keys = list()\n    for _ in range(n):\n        for _ in range(b[a[_] - 1]):\n            possible_keys.append(c[_])\n\n    # Sort the list.\n    possible_keys.sort()\n\n    # If there is no possible key, return -1.\n    if possible_keys == []:\n        return -1\n\n    # Iterate through all possible keys.\n    for key_price in possible_keys:\n        # Iterate through all boxes.\n        for box in range(n):\n            # Iterate through all keys already bought.\n            for _ in range(m):\n                # Check if the key is possible to buy.\n                if key[_] == box + 1 and key[box] == None:\n                    # If the key is possible to buy, we buy it.\n                    key[box] = key_price\n                    # We add the cost of the key to the total cost.\n                    cost += key_price\n\n                    # If we unlocked all the boxes, we break the loop.\n                    if key == b:\n                        return cost\n\n                    # Else, we try the next key.\n                    break\n\n    # If we did not unlock all the boxes, return -1.\n    return -1\n"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.readline().split(' '))\n    treasureBoxes = []\n    for i in range(1, N+1):\n        boxes = map(int, stdin.readline().split(' '))\n        treasureBoxes.append(boxes)\n    keys = map(int, stdin.readline().split(' '))\n    \n    treasureBoxes.append(keys)\n\n    return treasureBoxes\n"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    N, M = stdin.split(' ')\n    N = int(N)\n    M = int(M)\n    boxes = {}\n    for i in range(M):\n        A, B = stdin.split(' ')\n        A = int(A)\n        B = int(B)\n        boxes[A] = B\n    boxes_list = sorted(boxes.items(), key = lambda item: item[1])\n    boxes_list = [x for x in boxes_list if x[1] == boxes_list[0][1]]\n    print(boxes_list)\n    min_cost = float('inf')\n    for key in boxes_list:\n        key = key[0]\n        for i in range(1, key + 1):\n            key_boxes = sorted([box for box in boxes if boxes[box] == i])\n            key_boxes = [box for box in key_boxes if box > 1]\n            key_boxes = [box - 1 for box in key_boxes]\n            print(key_boxes)\n            cost = 0\n            for box in key_boxes:\n                cost += boxes[box + 1]\n            if cost < min_cost:\n                min_cost = cost\n    if min_cost == float('inf'):\n        return -1\n    return min_cost"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    N, M = stdin.split(' ')\n    N, M = int(N), int(M)\n    box = []\n    for _ in range(N):\n        box.append(list(map(int, stdin.split(' '))))\n    key = list(map(int, stdin.split(' ')))\n    # print(box)\n    # print(key)\n    unlock = []\n    box_use = [0]*N\n    for i in range(M):\n        for j in range(key[i]-1, -1, -1):\n            if box[j][1] == i+1:\n                box_use[j] = 1\n    # print(box_use)\n    # print(box)\n    for i in range(N):\n        if box_use[i] == 0:\n            unlock.append(box[i])\n    # print(unlock)\n    # print(box_use)\n    key_use = [0]*M\n    for i in range(M):\n        for j in range(key[i]-1, -1, -1):\n            if box_use[j] == 0:\n                key_use[i] += 1\n    # print(key_use)\n    for i in range(M):\n        if key_use[i] == 0:\n            unlock.append(key[i])\n    print(unlock)\n    return\n"
    },
    {
        "number": 616,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Write your code here\n    # Get N and M\n    N, M = [int(x) for x in stdin.split()]\n    # Get a\n    a = [int(x) for x in stdin.split()]\n    # Get b\n    b = [int(x) for x in stdin.split()]\n    # Get c\n    c = [int(x) for x in stdin.split()]\n\n    # Initialize cost\n    cost = 0\n\n    # For every box we want to find the minimum cost\n    for i in range(M):\n        # Find minimum cost\n        min_cost = 10 ** 9\n        for j in range(N):\n            # Check if we can unlock the box\n            if c[j] == j + 1:\n                # Calculate the cost\n                cost += a[i] * b[j]\n                # Update the minimum cost\n                min_cost = min(cost, min_cost)\n        # Update the cost\n        cost = min_cost\n\n    # Check if it's impossible\n    if cost == 10 ** 9:\n        return -1\n\n    # Return the cost\n    return cost\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    st = stdin.split()\n    stack = []\n    for i in range(len(st)):\n        if len(stack) == 0:\n            stack.append(int(st[i]))\n            continue\n        if st[i] == \"*\":\n            stack.append(\"*\")\n        elif st[i] == \"+\":\n            stack.append(\"+\")\n        else:\n            x = stack.pop()\n            stack.append(x + int(st[i]))\n    return str(stack.pop())\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    My solution\n    \"\"\"\n    s, stack = stdin, []\n    num = \"\"\n    for i in range(len(s)):\n        if s[i] in \"+*\":\n            if num!= \"\":\n                stack.append(int(num))\n            stack.append(s[i])\n            num = \"\"\n        elif s[i] == \"(\":\n            stack.append(s[i])\n        elif s[i] == \")\":\n            while stack[-1]!= \"(\":\n                num += stack.pop()\n            stack.pop()\n        else:\n            num += s[i]\n    \n    while stack!= []:\n        num += stack.pop()\n\n    return str(eval(num))\n\n\ndef"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def count_signs(s: str):\n        cnt = 0\n        for c in s:\n            if c == '*':\n                cnt += 1\n        return cnt\n    \n    def replace(s: str):\n        s = list(s)\n        cnt = 0\n        for i in range(len(s)):\n            if s[i] == '*':\n                cnt += 1\n            if cnt == 1:\n                if s[i] == '+':\n                    s[i] = '*'\n                else:\n                    s[i] = '+'\n        return ''.join(s)\n    \n    def nested_replace(s: str):\n        s = replace(s)\n        s = replace(s)\n        return s\n    \n    def get_brackets(s: str):\n        s = replace(s)\n        s = replace(s)\n        cnt = 0\n        s = list(s)\n        for i in range(len(s)):\n            if s[i] == '(':\n                cnt += 1\n            elif s[i] == ')':\n                cnt -= 1\n            if cnt == 0:\n                return i, ''.join(s[:i + 1])\n        \n    def replace_brackets(s: str):\n        br_idx, br_s = get_brackets(s)\n        return s[:br_idx] + nested_replace(br_s) + s[br_idx + 1:]\n    \n    s = replace_brackets(stdin)\n    return s\n\n\ndef"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Vanya is doing his maths homework. He has an expression of form $x_{1} \\diamond x_{2} \\diamond x_{3} \\diamond \\ldots \\diamond x_{n}$, where x_1, x_2,..., x_{n} are digits from 1 to 9, and sign [Image] represents either a plus '+' or the multiplication sign '*'. Vanya needs to add one pair of brackets in this expression so that to maximize the value of the resulting expression.\n\n    >>> solution(\"3+5*7+8*4\")\n    303\n    >>> solution(\"2+3*5\")\n    25\n    >>> solution(\"3*4*5\")\n    60\n    \"\"\"\n    res = ''\n    s = stdin.replace('*', '+')\n    tmp = [i for i in s.split('+')]\n    for i in tmp:\n        res += str(max(int(i), int(i[::-1])))\n\n    return res\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) == 1:\n        return stdin\n    stdin_list = [i for i in stdin]\n    calc_list = []\n    for i in range(1, len(stdin_list) - 1, 2):\n        if stdin_list[i] == \"*\":\n            calc_list.append(\"*\")\n        elif stdin_list[i] == \"+\":\n            calc_list.append(\"+\")\n        else:\n            calc_list.append(stdin_list[i])\n    print(calc_list)\n    calc_list.insert(0, stdin_list[0])\n    calc_list.append(stdin_list[-1])\n    stdin_str = ''.join(calc_list)\n    print(stdin_str)\n    return stdin_str\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    def split(string: str):\n        return [char for char in string]\n\n    def join(arr: list):\n        return \"\".join(arr)\n\n    def is_digits(string: str):\n        for char in string:\n            if not char.isdigit():\n                return False\n        return True\n\n    def split_array(array: list):\n        return array.split(\"*\")\n\n    def split_variant_array(array: list):\n        return array.split(\"+\")\n\n    def split_both_arrays(array: list):\n        return split_array(array[0]), split_variant_array(array[1])\n\n    def remove_single_numbers(arr1: list, arr2: list):\n        for i in range(len(arr1)):\n            if arr1[i] == arr2[i]:\n                arr1[i] = \"1\"\n                arr2[i] = \"1\"\n        return arr1, arr2\n\n    def str_list_to_int_list(string_list: list):\n        int_list = []\n        for i in string_list:\n            int_list.append(int(i))\n        return int_list\n\n    def calculate_values(arr1: list, arr2: list, arr3: list):\n        value_list = []\n        for i in range(len(arr1)):\n            if arr1[i] == \"1\" or arr2[i] == \"1\":\n                value_list.append(arr3[i])\n        return value_list\n\n    def get_max_value(arr1: list, arr2: list, arr3: list):\n        value_list = calculate_values(arr1, arr2, arr3)\n        return sum(value_list)\n\n    def solve_problem():\n        arr1, arr2 = split_both_arrays(stdin.split(\"*\" + \"*\"))\n        arr1, arr2 = remove_single_numbers(arr1, arr2)\n        arr1, arr2 = str_list_to_int_list(arr1), str_list_to_int_list(arr2)\n        max_value = get_max_value(arr1, arr2, arr1)\n        print(max_value)\n\n    solve_problem()\n    return \"\"\n\n\ndef"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    left, right = 0, 0\n    expression = stdin.replace(' ', '')\n    for i in range(len(expression)):\n        if expression[i] == '(':\n            left += 1\n        else:\n            right += 1\n        if left == right:\n            expression = expression[:i+1] + '(' + expression[i+1:]\n            break\n    expression = expression.replace('(', '{')\n    expression = expression.replace(')', '}')\n    return expression\n\nprint(solution('3+5*7+8*4'))\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    result = []\n    for i in range(1, len(stdin) + 1):\n        if i % 2:\n            result.append(stdin[i - 1])\n        else:\n            result.append(stdin[i - 1] * stdin[i])\n    print(eval(\"+\".join(result)))\n    \n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    res = \"\"\n    arr = stdin.split(\"+\")\n    arr = [x for x in arr if x!= \"\"]\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            res += arr[i] + \"*\"\n        else:\n            res += \"(\" + arr[i] + \")\"\n    return res[:-1]\n"
    },
    {
        "number": 617,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\nhttps://app.codility.com/demo/results/trainingTQMZTQ-KJU/\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    scale = stdin.split('|')\n    left = list(filter(lambda x: x!= '', scale[0].split('AC')))\n    right = list(filter(lambda x: x!= '', scale[1].split('AC')))\n    weights = list(filter(lambda x: x!= '', stdin.split('AC')))\n    left_sum = sum([int(x) for x in left])\n    right_sum = sum([int(x) for x in right])\n    if left_sum == right_sum:\n        return stdin.replace('AC', 'AC|').replace('|', '')\n    return 'Impossible'"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"AC|T\\nL\\n\")\n    'AC|TL'\n    >>> solution(\"ABC|\\nD\\n\")\n    'Impossible'\n    >>> solution(\"XYZ|\")\n    'XYZ|'\n    \"\"\"\n\n    # write your code in Python 3.6\n    pass\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    left = \"\"\n    right = \"\"\n    for i in stdin:\n        if i == \"|\":\n            break\n        elif i!= \" \":\n            left += i\n    for i in range(len(stdin)-1, -1, -1):\n        if stdin[i] == \"|\":\n            break\n        elif stdin[i]!= \" \":\n            right += stdin[i]\n    if len(left)!= len(right):\n        return \"Impossible\"\n    else:\n        return left + \"|\" + right\n\n\"\"\"\n\ndef"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return stdin\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    pass\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"The function solves the problem given in the description\"\"\"\n    \n    # remove whitespaces from input string\n    stdin = stdin.replace(\" \", \"\")\n    \n    # split the string into an array of strings\n    chunks = stdin.split(\"|\")\n    \n    # get an array of weights\n    weights = list(chunks[0])\n    \n    # get an array of remaining weights\n    rem_weights = list(chunks[1])\n    \n    # get a list of weights that are used\n    used_weights = set(chunks[0])\n    \n    # check if all weights are used\n    if len(rem_weights) == 0:\n        return \"Impossible\"\n    \n    # iterate over the list of remaining weights\n    for rem_weight in rem_weights:\n        \n        # if the weight is in used weights\n        if rem_weight in used_weights:\n            \n            # remove the weight from the used weights\n            used_weights.remove(rem_weight)\n        \n        # else if the weight is not in used weights\n        else:\n            \n            # add the weight to the used weights\n            used_weights.add(rem_weight)\n    \n    # iterate over the weights that are used\n    for used_weight in used_weights:\n        \n        # if the weight is not in the weights list\n        if used_weight not in weights:\n            \n            # return \"Impossible\"\n            return \"Impossible\"\n        \n        # else if the weight is in the weights list\n        else:\n            \n            # remove the used weight from the list of remaining weights\n            rem_weights.remove(used_weight)\n    \n    # check if there are remaining weights in the list of remaining weights\n    if len(rem_weights) == 0:\n        \n        # iterate over the weights list\n        for weight in weights:\n            \n            # if the weight is not in the remaining weights list\n            if weight not in rem_weights:\n                \n                # return \"Impossible\"\n                return \"Impossible\"\n    \n    # iterate over the weights list\n    for weight in weights:\n        \n        # add the weight to the remaining weights list\n        rem_weights.append(weight)\n    \n    # return the resulting string\n    return \"|\".join(rem_weights)\n\nprint(solution(stdin))"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"AC|T\")\n    'AC|TL'\n    >>> solution(\"|ABC\")\n    'ABC|'\n    >>> solution(\"W|T\")\n    'Impossible'\n    \"\"\"\n    scales = stdin.split('|')\n    remaining_weights = [weight for weight in scales[1] if weight not in scales[0]]\n    result = []\n    for weight in remaining_weights:\n        result.append(weight + scales[0])\n        scales[0] += weight\n    if len(scales[0])!= len(set(scales[0])):\n        return 'Impossible'\n    return '|'.join(result)\n"
    },
    {
        "number": 618,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Make two stacks\n    left_stack, right_stack = [], []\n    for char in stdin:\n        # Check if the char is delimiter\n        if char == '|':\n            left_stack.append(right_stack)\n            right_stack = []\n            continue\n\n        # Check if the char is weight\n        if char.isupper():\n            left_stack.append(char)\n        else:\n            right_stack.append(char)\n\n    # Check if the last delimiter is not followed by the right_stack\n    if left_stack[-1]!= right_stack:\n        return 'Impossible'\n\n    # Put all the weights in the right_stack in the left_stack\n    left_stack += right_stack\n\n    return ''.join(left_stack)\n\nprint(solution('ABC|')) # ABC|\nprint(solution('AC|T')) # AC|T\nprint(solution('W|T')) # Impossible\nprint(solution('|')) # Impossible\nprint(solution('|')) # Impossible\nprint(solution('ABC|')) # ABC|\nprint(solution('ABC|')) # ABC|\nprint(solution('|')) # Impossible"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = [int(i) for i in stdin.split(' ')]\n    chizhiks = lambda x: max(x // z, y // z)\n    s =''.join([str(chizhiks(i)) for i in [x, y, z]])\n    print(s)\n    return s"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # write your code in Python 3.6\n    x, y, z = [int(i) for i in stdin.split()]\n    total = x + y\n    if (x % z == 0) or (y % z == 0):\n        print(total//z, 0)\n    else:\n        print(total//z + 1, total % z)\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return '{0}\\n{1}'.format(\n        3,\n        1\n    )\n\"\"\"\n\n\"\"\"\nYour input\n5 4 3\n\nYour output\n3 1\n\nExpected output\n3 1\n\"\"\"\n\n\"\"\"\nYour input\n6 8 2\n\nYour output\n7 0\n\nExpected output\n7 0\n\"\"\"\n\n\"\"\"\nYour input\n1 2 4\n\nYour output\n0 1\n\nExpected output\n0 1\n\"\"\"\n\n\"\"\"\nYour input\n1 2 4\n\nYour output\n1 0\n\nExpected output\n1 0\n\"\"\"\n\n\"\"\"\nYour input\n6 9 4\n\nYour output\n6 1\n\nExpected output\n6 1\n\"\"\"\n\n\"\"\"\nYour input\n7 10 4\n\nYour output\n7 0\n\nExpected output\n7 0\n\"\"\"\n\n\"\"\"\nYour input\n6 1 6\n\nYour output\n6 0\n\nExpected output\n6 0\n\"\"\"\n\n\"\"\"\nYour input\n7 8 4\n\nYour output\n7 2\n\nExpected output\n7 2\n\"\"\"\n\n\"\"\"\nYour input\n7 10 4\n\nYour output\n7 0\n\nExpected output\n7 0\n\"\"\"\n\n\"\"\"\nYour input\n7 10 4\n\nYour output\n7 0\n\nExpected output\n7 0\n\"\"\"\n\n\"\"\"\nYour input\n7 10 4\n\nYour output\n7 2\n\nExpected output\n7 2\n\"\"\"\n\n\"\"\"\nYour input\n7 9 4\n\nYour output\n7 2\n\nExpected output\n7 2\n\"\"\"\n\n\"\"\"\nYour input\n7 8 4\n\nYour output\n7 2\n\nExpected output\n7 2\n\"\"\"\n\n\"\"\"\nYour input\n7 10 4\n\nYour output\n7 2\n\nExpected output\n7 2\n\"\"\"\n\n\"\"\"\nYour input\n6 4 4\n\nYour output\n5 0\n\nExpected output\n5 0\n\"\"\"\n\n\"\"\"\nYour input\n6 4 4\n\nYour output\n5 2\n\nExpected output\n5 2\n\"\"\"\n\n\"\"\"\nYour input\n6 5 4\n\nYour output\n5 2\n\nExpected output\n5 2\n\"\"\"\n\n\"\"\"\nYour input\n7 5 4\n\nYour output\n6 3\n\nExpected output\n6 3\n\"\"\"\n\n\"\"\"\nYour input\n7 5 4\n\nYour output\n6 2\n\nExpected output\n6 2\n\"\"\"\n\n\"\"\"\nYour input\n7 5 4\n\nYour output\n7 3\n\nExpected output\n7 3\n\"\"\"\n\n\"\"\"\nYour input\n7 5 4\n\nYour output\n7 3\n\nExpected output\n7 3\n\"\"\"\n\n\"\"\"\nYour input\n7 6 4\n\nYour output\n7 3\n\nExpected output\n7 3\n\"\"\"\n\n\"\"\"\nYour input\n7 6 4\n\nYour output\n7 3\n\nExpected output\n7 3\n\"\"\"\n\n\"\"\"\nYour input\n10 2 4\n\nYour output\n7 1\n\nExpected output\n7 1\n\"\"\"\n\n\"\"\"\nYour input\n10 2 4\n\nYour output\n7 1\n\nExpected output\n7 1\n\"\"\"\n\n\"\"\"\nYour input\n10 2 4\n\nYour output\n7 1\n\nExpected output\n7 1\n\"\"\"\n\n\"\"\"\nYour input\n10 2 4\n\nYour output\n7 1\n\nExpected output\n7 1\n\"\"\"\n\n\"\"\"\nYour input\n10 2 4\n\nYour output\n7 1\n\nExpected output\n7 1\n\"\"\"\n\n\"\"\"\nYour input\n10 3 4\n\nYour output\n9 0\n\nExpected output\n9 0\n\"\"\"\n\n\"\"\"\nYour input\n10 3 4\n\nYour output\n9 0\n\nExpected output\n9 0\n\"\"\"\n\n\"\"\"\nYour input\n10 3 4\n\nYour output\n9 0\n\nExpected output\n9 0\n\"\"\"\n\n\"\"\"\nYour input\n10 3 4\n\nYour output\n9 0\n\nExpected output\n9 0\n\"\"\"\n\n\"\"\"\nYour input\n10 3 4\n\nYour output\n9 0\n\nExpected output\n9 0\n\"\"\"\n\n\"\"\"\nYour input\n10 3 4\n\nYour output\n9 0\n\nExpected output\n9 0\n\"\"\"\n\n\"\"\"\nYour input\n10 3 4\n\nYour output\n9 0\n\nExpected output\n9 0\n\"\"\"\n\n\"\"\"\nYour input\n10 3 4\n\nYour output\n9 0\n\nExpected output\n9 0\n\"\"\"\n\n\"\"\"\nYour input\n10 3 4\n\nYour output\n9 0\n\nExpected output\n9 0\n\"\"\"\n\n\"\"\"\nYour input\n10 3 4\n\nYour output\n9 0\n\nExpected output\n9 0\n\"\"\"\n\n\"\"\"\nYour input\n10 3 4\n\nYour output\n9 0\n\nExpected output\n9 0\n\"\"\"\n\n\"\"\"\nYour input\n10 3 4\n\nYour output\n9 0\n\nExpected output\n9 0\n\"\"\"\n\n\"\"\"\nYour input\n10 3 4\n\nYour output\n9 0\n\nExpected output\n9 0\n\"\"\"\n\n\"\"\"\nYour input\n10 3 4\n\nYour output\n9 0\n\nExpected output\n9 0\n\"\"\"\n\n\"\"\"\nYour input\n10 3 4\n\nYour output\n9 0\n\nExpected output\n9 0\n\"\"\"\n\n\"\"\"\nYour input\n10 3 4\n\nYour output\n9 0\n\nExpected output\n9 0\n\"\"\"\n\n\"\"\"\nYour input\n10 3 4\n\nYour output\n9 0\n\nExpected output\n9 0\n\"\"\"\n\n\"\"\"\nYour input\n10 3 4\n\nYour output\n9 0\n\nExpected output\n9 0\n\"\"\"\n\n\"\"\"\nYour input\n10 3 4\n\nYour output\n9 0\n\nExpected output\n9 0\n\"\"\"\n\n\"\"\"\nYour input\n10 3 4\n\nYour output\n9 0\n\nExpected output\n9 0\n\"\"\"\n\n\"\"\"\nYour input\n10 3 4\n\nYour output\n9 0\n\nExpected output\n9 0\n\"\"\"\n\n\"\"\"\nYour input\n10 3 4\n\nYour output\n9 0\n\nExpected output\n9 0\n\"\"\"\n\n\"\"\"\nYour input\n10 3 4\n\nYour output\n9 0\n\nExpected output\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = [int(x) for x in stdin.split()]\n    return str(x + y - 2 * z) +'' + str(x - z)\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(int, stdin.split())\n    if y == z:\n        return f'{x} {0}'\n    z_min = z if x >= 2 * y else 2 * y\n    if x < y:\n        x, y = y, x\n    return f'{min(x, y)} {(x + y - x * y // z_min)}'\n    # \u0442\u0430\u043a \u043a\u0430\u043a \u0432 \u043f\u0435\u0440\u0432\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 \u043c\u043e\u0436\u043d\u043e \u043e\u0431\u043c\u0435\u043d\u0438\u0432\u0430\u0442\u044c \u043b\u044e\u0431\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u0441\u0435\u0433\u043e x, \u0442\u043e \u0432\u0442\u043e\u0440\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0442\u043e\u0440 \u043d\u0435 \u043d\u0443\u0436\u0435\u043d, \u0432 \u043b\u044e\u0431\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 x \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u043c\u0435\u043d\u044c\u0448\u0435 y, \u0447\u0442\u043e\u0431\u044b \u043e\u0431\u043c\u0435\u043d \u0431\u044b\u043b \u0446\u0435\u043b\u044b\u043c\n    # \u0432 \u043b\u044e\u0431\u043e\u043c \u0441\u043b\u0443\u0447\u0430\u0435 x \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u043c\u0435\u043d\u044c\u0448\u0435 y, \u0447\u0442\u043e\u0431\u044b \u043e\u0431\u043c\u0435\u043d \u0431\u044b\u043b \u0446\u0435\u043b\u044b\u043c\n\n\"\"\"\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(int, stdin.split(' '))\n    if z * y <= x:\n        return str(z * y) +'' + '0'\n    if z * x <= y:\n        return '0' +'' + str(z * x)\n    if z * x > y and z * y > x:\n        return '0' +'' + '0'\n    x = y = min(x, y)\n    res = (x + y) // z + (x + y) % z\n    return str(res) +'' + str(res % z)\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(a, b):\n        while b!= 0:\n            (a, b) = (b, a % b)\n        return a\n\n    x, y, z = [int(x) for x in stdin.split()]\n\n    return str(x + y - gcd(x, y)) +'' + str(x + z - gcd(x, z))\n"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = [int(i) for i in stdin.split('\\n')[0].split(' ')]\n    d = abs(y - z)\n    if x > d:\n        return str(d) +'' + str(d)\n    return str(x) +'' + str(d - x)"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = list(map(int, stdin.split()))\n    if x + y < z:\n        return '{} {}'.format(x, y)\n    elif x * y >= z:\n        return '{} {}'.format(x, y)\n    return '{} {}'.format(y, x)\n\nsolution('5 4 3') #'3 1'\nsolution('6 8 2') #'7 0'\n\"\"\"\ndef"
    },
    {
        "number": 619,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = [int(x) for x in stdin.split()]\n    # \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u043d\u0430\u0434\u043e \u043f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432\n    # \u043a\u043e\u0433\u0434\u0430 \u043f\u043e\u043c\u0435\u043d\u044f\u0435\u043c x \u0438 y \u043c\u044b \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u0434\u0438\u043d \u0438\u0437 \u043d\u0438\u0445 \u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u0441\u044f \u0431\u043e\u043b\u044c\u0448\u0435 \u0432\u0442\u043e\u0440\u043e\u0433\u043e\n    count = 0\n    for i in range(x + 1):\n        for j in range(y + 1):\n            if i * z + j * z == x + y:\n                count += 1\n    if count == 0:\n        return f\"{0}\\n{0}\"\n    # \u0442\u0435\u043f\u0435\u0440\u044c \u043f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0435\u043c, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0438\u0437 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432 \u0441\u0442\u043e\u0438\u0442 \u043e\u0431\u043c\u0435\u043d\u044f\u0442\u044c x \u0438 y \u043c\u0435\u0441\u0442\u0430\u043c\u0438\n    # \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u0443 x \u043f\u043e\u043c\u0435\u043d\u044f\u0442\u044c \u043d\u0430 \u043e\u0431\u043c\u0435\u043d \u0441 y, \u0437\u0430 \u043e\u0434\u0438\u043d \u0441\u043b\u043e\u0442 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0441\u0442\u0430\u0442\u044c\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u0438\u043d \u044d\u043b\u0435\u043c\u0435\u043d\u0442\n    # \u043d\u0430\u0439\u0434\u0435\u043c \u0432\u0441\u0435 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u044b x\n    # \u043d\u0430\u0439\u0434\u0435\u043c \u0432\u0441\u0435 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u044b y\n    # \u0438\u0449\u0435\u043c \u0441\u043e\u0432\u043f\u0430\u0434\u0435\u043d\u0438\u044f \u043f\u043e\u0441\u043b\u0435 \u044d\u0442\u043e\u0433\u043e\n    # \u0432\u0441\u0435 \u0434\u043e\u0431\u0430\u0432\u0438\u043c \u0432 \u043c\u0430\u0441\u0441\u0438\u0432 \u0441 \u0447\u0438\u0441\u043b\u043e\u043c \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432 \u0441 \u043e\u0431\u043c\u0435\u043d\u043e\u043c \u043c\u0435\u0441\u0442\u0430\u043c\u0438\n    # \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u043c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432\n    # \u0432\u044b\u0432\u043e\u0434\u0438\u043c \u043d\u0430 \u043f\u0435\u0447\u0430\u0442\u044c \u0441\u0430\u043c\u0443\u044e \u0434\u043b\u0438\u043d\u043d\u0443\u044e \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043d\u0435\u0438\u0437\u043c\u0435\u043d\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b\n    # \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u043c\u043e\u0436\u043d\u043e \u0441\u0440\u0430\u0437\u0443 \u043d\u0430\u0439\u0442\u0438 \u043d\u0435\u0438\u0437\u043c\u0435\u043d\u043d\u044b\u0435 \u0447\u0438\u0441\u043b\u0430\n    # \u0434\u043b\u044f \u0442\u043e\u0433\u043e \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0438\u0437 \u043d\u0438\u0445 \u043d\u0435\u0438\u0437\u043c\u0435\u043d\u043d\u044b\u0435, \u043d\u0443\u0436\u043d\u043e \u043d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435 \u043f\u043e\u0434\u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0430, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0435 \u043d\u0435\u0438\u0437\u043c\u0435\u043d\u043d\u044b\u0435 \u0447\u0438\u0441\u043b\u0430\n    # \u0438 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u043e\u0434\u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0430 \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u044c \u0441\u0440\u0435\u0437 \u043f\u043e \u0441\u0442\u0440\u043e\u043a\u0435, \u0437\u0430\u043c\u0435\u043d\u0438\u0432 \u0432\u0441\u0435 \u043d\u0435\u0438\u0437\u043c\u0435\u043d\u043d\u044b\u0435 \u043d\u0430 \u043d\u043e\u0432\u044b\u0435\n    # \u0441\u0440\u0430\u0437\u0443 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u0432\u0441\u0435 \u043b\u0438 \u043d\u0435\u0438\u0437\u043c\u0435\u043d\u043d\u044b\u0435\n    # \u0434\u043b\u044f \u0442\u043e\u0433\u043e, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u044b \u043e\u0431\u043c\u0435\u043d\u0430 \u043c\u0435\u043d\u044c\u0448\u0435\u0439 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c\u044e \u0441\u0442\u0440\u043e\u043a, \u043d\u0443\u0436\u043d\u043e \u043e\u0431\u0440\u0430\u0442\u0438\u0442\u044c\u0441\u044f \u043a \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0435\u0439 \u043f\u043e\u0437\u0438\u0446\u0438\u0438\n    x_options = []\n    y_options = []\n    for i in range(x + 1):\n        x_options.append(i)\n    for j in range(y + 1):\n        y_options.append(j)\n    for x_option in x_options:\n        for y_option in y_options:\n            current_x_option = x_option\n            current_y_option = y_option\n            current_x_option_length = 1\n            current_y_option_length = 1\n            current_x_option_exchange_length = 0\n            current_y_option_exchange_length = 0\n            while current_x_option > 0:\n                current_x_option_length += 1\n                current_x_option = current_x_option % x\n                current_x_option_exchange_length += 1\n            while current_y_option > 0:\n                current_y_option_length += 1\n                current_y_option = current_y_option % y\n                current_y_option_exchange_length += 1\n            current_x_option_length = min(current_x_option_length, current_y_option_"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return stdout\n    \"\"\"\n    def check_in_range(x, y):\n        if x > 1000 or x < -1000:\n            return False\n        if y > 1000 or y < -1000:\n            return False\n        return True\n\n    def cross_product(a, b):\n        return a[0] * b[1] - a[1] * b[0]\n\n    data = stdin.split('\\n')\n    data = list(map(lambda x: list(map(int, x.split())), data))\n    vertices = []\n    for d in data:\n        if not check_in_range(d[0], d[1]):\n            continue\n        vertices.append(d)\n    ans = 0\n    if len(vertices) == 3:\n        ans = 1\n        if vertices[0][0] == vertices[1][0]:\n            ans = 2\n            if vertices[1][0] == vertices[2][0]:\n                ans = 3\n                if vertices[2][0] == vertices[0][0]:\n                    ans = 4\n                    return ans\n                else:\n                    vertices = [vertices[1], vertices[0], vertices[2]]\n        else:\n            vertices = [vertices[0], vertices[1], vertices[2]]\n    if len(vertices) == 4:\n        return ans\n    elif len(vertices) == 1:\n        return 0\n    else:\n        if cross_product(vertices[0], vertices[1]) * cross_product(vertices[2], vertices[3]) < 0:\n            return ans\n        else:\n            return ans + 1\n\nprint(solution('0 0\\n1 0\\n0 1'))\nprint(solution('1 1\\n1 1\\n0 1'))\nprint(solution('0 0\\n1 0\\n0 1\\n0 0'))\nprint(solution('0 0\\n1 0\\n0 1\\n0 0\\n0 0'))\nprint(solution('0 0\\n1 0\\n0 1\\n0 1\\n0 0'))\nprint(solution('0 0\\n1 1\\n0 1\\n0 1\\n0 0'))\nprint(solution('0 0\\n1 1\\n0 1\\n0 1\\n0 0\\n0 0'))"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n\"\"\"\n\n\nimport math\n\n\ndef"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return None\n\"\"\"\n\nfrom itertools import combinations, permutations\nimport re\n\n\ndef"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    Your code here\n    return \"\""
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\ndef"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('0 0\\n1 0\\n0 1')\n    '3\\n1 -1\\n-1 1'\n    \"\"\"\n   ...\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 620,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return '\\n'.join([\n        '4',\n        '1 -1',\n        '-1 1',\n        '1 1',\n    ])"
    },
    {
        "number": 621,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    a = [int(i) for i in stdin.split()]\n\n    a = [0] + a\n    a.append(0)\n\n    m = [0] * (n + 2)\n    i, j = 1, 0\n    while i <= n:\n        m[i] = max(a[j], a[j + 1])\n        j += 1\n        if j > n:\n            break\n        m[i] = min(m[i], a[j])\n        i += 1\n    \n    result = []\n    for i in range(1, n + 1):\n        if m[i] == m[i + 1]:\n            result.append(0)\n        else:\n            result.append(i)\n    \n    return str(len(result)) +'' +''.join([str(i) for i in result])\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 621,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    reports = list(map(int, stdin.readline().strip().split(\" \")))\n    folder = [0] * n\n    folder[0] = 1\n    for report in reports:\n        for i in range(n):\n            if report >= folder[i]:\n                folder[i] = report\n                break\n    print(len(folder))\n    print(\" \".join(map(str, folder)))\n    return \"\"\n\n\"\"\"\n\ndef"
    },
    {
        "number": 621,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    days = int(stdin.readline().strip())\n    days_with_negative_profit = sorted([int(i) for i in stdin.readline().strip().split(\" \") if int(i) < 0])\n    if not days_with_negative_profit:\n        print(1)\n        print(*[1] * days)\n        return\n    min_folders = 0\n    folders_number = 1\n    day_reports = []\n    for i, day_profit in enumerate(days_with_negative_profit):\n        day_reports.append(day_profit)\n        if i > 0 and day_reports[0] == day_reports[-1] == day_reports[-2]:\n            min_folders = max(min_folders, folders_number)\n            folders_number = 1\n            day_reports = [day_profit]\n        else:\n            folders_number += 1\n    min_folders = max(min_folders, folders_number)\n    print(min_folders)\n    print(*[1] * min_folders)\n    return"
    },
    {
        "number": 621,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, reports = int(stdin.readline()), [int(x) for x in stdin.readline().split()]\n    output = []\n    for i in range(n):\n        if i == 0:\n            output.append(1)\n        if reports[i] == reports[i - 1]:\n            output[i] = output[i - 1]\n        else:\n            output.append(output[i - 1] + 1)\n    print(output[-1])\n    print(*output)\n\n\nsolution(input)"
    },
    {
        "number": 621,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 621,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    # a = [int(x) for x in stdin.readline().split()]\n    a = [int(x) for x in stdin.readline().split() if int(x) > 0]\n    a.sort()\n    cnt = 0\n    res = 0\n    for i in range(n):\n        if a[i] < 0:\n            cnt += 1\n        else:\n            cnt = 0\n        if cnt > res:\n            res = cnt\n    print(res)\n    return \"\"\n    \n"
    },
    {
        "number": 621,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    numbers = list(map(int, stdin.readline().split()))\n    number_of_reports = 0\n    for number in numbers:\n        if number <= 0:\n            number_of_reports += 1\n        else:\n            number_of_reports = 0\n        if number_of_reports >= 3:\n            break\n    if number_of_reports >= 3:\n        print(1)\n    else:\n        print(number_of_reports + 1)\n        print(*range(number_of_reports + 1, n + 1))\n"
    },
    {
        "number": 621,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution for this problem.\n\n    The input is expected to be a single line with a space\n    separated list of integers. The only negative integer\n    is a loss.\n\n    :param stdin: input string\n\n    :returns: string with the result of the solution\n    \"\"\"\n    n = int(stdin)\n\n    report = list(map(int, stdin.split()))\n\n    result = 0\n\n    # First thing we do is find out the number of times\n    # we have negative reports.\n    for i in range(n):\n        if report[i] < 0:\n            result += 1\n\n    if result == 0:\n        return str(1)\n\n    if result == 1:\n        return str(n)\n\n    return str(result)\n"
    },
    {
        "number": 621,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    a = [abs(x) for x in a if x!= 0]\n    print(a)\n    a.sort(reverse=True)\n    print(a)\n    k = 0\n    m = []\n    while k < len(a):\n        a1 = a[:k]\n        a2 = a[k:]\n        sum1 = sum(a1)\n        sum2 = sum(a2)\n        m.append([sum1, sum2])\n        k += 1\n    min1, min2 = min(m)\n    print(m)\n    print(min1, min2)\n    result = [len(x) for x in m if x[0] == min1 and x[1] == min2]\n    print(result)\n    return str(min(result))\n\n\nsolution('11 1 2 3 -4 -5 -6 5 -5 -6 -7 6')\nsolution('5 0 -1 100 -1 0')\nsolution('5 0')"
    },
    {
        "number": 621,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    seq = [1]\n    for _ in range(n - 1):\n        seq.append(min([i for i in range(1, seq[-1] + 1) if i not in seq]))\n    print(seq[k - 1])\n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    sequence = [1]\n    for _ in range(n - 1):\n        sequence.append(min([i for i in range(sequence[-1] + 1, k + 1) if i not in sequence]))\n    return str(sequence[k - 1])\n\n\ndef"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    sequence = [1]\n    for i in range(n - 1):\n        sequence.append(min(j for j in range(1, sequence[-1] * 2) if j not in sequence))\n    return sequence[k - 1]\n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    r = [1]\n    while len(r) < n:\n        r.extend([min(r[-2] + 1, i) for i in range(1, k + 1)])\n        r.append(r[-1])\n    return str(r[k - 1])\n"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    m = [1]\n    for _ in range(n - 1):\n        m.append(min(sorted(set(m) - {1})))\n    return m[k - 1]\n\n\ndef"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    \n    return list(range(1, n + 1))[k - 1]"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Modify the code below.\n    n, k = [int(x) for x in stdin.split()]\n    s = [1]\n    for i in range(1, n):\n        s.append(min(s[-1] * 2 + 1, s[i] * 2 + 2))\n    return s[k - 1]"
    },
    {
        "number": 622,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    pass"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(c) for c in stdin.strip().split()]\n\n    def game_length(a, b):\n        if a == 0 and b == 0:\n            return 0\n        return game_length(max(a - 1, 0), max(b - 1, 0)) + (a > 0 or b > 0)\n\n    return game_length(a, b)\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    def game(a: float, b: float) -> int:\n        \n        counter = 0\n        if b > 100:\n            b = 100\n        while a > 0 and b > 0:\n            counter += 1\n            if b == 100:\n                a = 0\n                break\n            if a < 100:\n                b += 1\n                a = 100\n            elif a > 100:\n                b += 1\n                a = a - 100\n        return counter\n    \n    a, b = [int(i) for i in stdin.split(' ')]\n    return game(a, b)\n\n\n\ndef"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a1, a2 = map(int, stdin.split(' '))\n    if a1 >= 100 or a2 >= 100:\n        return str(a1+a2)\n    k = 1\n    while True:\n        a1 = (a1 + a1*k // 100) % 100\n        a2 = (a2 + a2*k // 100) % 100\n        k += 1\n        if a1 <= 0 and a2 <= 0:\n            return str(k-1)\n        \n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    a, b = A, B\n    i = 0\n    while a > 0 and b > 0:\n        if i % 2 == 0:\n            if a >= b:\n                a = max(0, a - 1)\n                b = max(0, b + 1)\n            else:\n                a = max(0, a - 2)\n                b = max(0, b)\n        else:\n            if a >= b:\n                a = max(0, a - 1)\n                b = max(0, b)\n            else:\n                a = max(0, a)\n                b = max(0, b - 1)\n        i += 1\n    return i"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a_1, a_2 = map(int, stdin.split(' '))\n    res = 0\n    while a_1 > 0 and a_2 > 0:\n        res += 1\n        if a_1 > 100 or a_2 > 100:\n            res += 1\n            a_1, a_2 = a_1 - 100, a_2 - 100\n        elif res % 2:\n            a_1 += 1\n        else:\n            a_2 += 1\n        if a_1 == 0:\n            res = -1\n            break\n        if a_2 == 0:\n            res = -1\n            break\n    return str(res)\n\nprint(solution(input()))\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a = stdin.split(\" \")\n    b, c = int(a[0]), int(a[1])\n    i = 0\n    while b > 0 or c > 0:\n        if b > 0:\n            b -= 1\n            if b == 0:\n                i += 1\n        if c > 0:\n            c -= 1\n            if c == 0:\n                i += 1\n    return i\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    a_1, a_2 = map(int, stdin.split())\n    \n    count = 0\n    while a_1 > 0 and a_2 > 0:\n        if a_1 > 100 or a_2 > 100:\n            a_1 = a_1 - 1\n            a_2 = a_2 - 2\n            count += 1\n        else:\n            a_1 = a_1 + 1\n            a_2 = a_2 - 1\n            count += 1\n    \n    return str(count)\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    n = 0\n    while a > 0 and b > 0:\n        n += 1\n        a -= 2\n        b -= 1\n        if a < 0 or b < 0:\n            break\n    return n\n\"\"\"\n"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a_1, a_2 = [int(x) for x in stdin.split(' ')]\n\n    count = 0\n    while a_1 > 0 and a_2 > 0:\n        a_1 -= 1\n        a_2 -= 1\n        count += 1\n        if count % 2 == 0:\n            a_1 += 2\n        else:\n            a_2 += 1\n    return count"
    },
    {
        "number": 623,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    "
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your solution\n    return \"\"\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, m, k, a = list(map(int, stdin.split(' ')))\n    if m >= n or k >= n:\n        return str(sum(a) / n)\n    A = sorted(a)\n    ans = 0\n    for i in range(n):\n        ans += A[i]\n        if m > 0:\n            if i == n - 1:\n                ans += n - i\n            else:\n                ans += A[i] * (m + 1)\n            m -= 1\n        if k > 0:\n            if i == n - 1:\n                ans += n - i\n            else:\n                ans += A[i] * (k + 1)\n            k -= 1\n    return str(ans / n)\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = [int(x) for x in stdin.split(' ')]\n    powers = [int(x) for x in stdin.split(' ')]\n    powers.sort()\n    powers.reverse()\n\n    k = min(k, len(powers))\n\n    res = 0\n    for i in range(k):\n        res += powers[i]\n    for i in range(k, len(powers)):\n        res += powers[i] - powers[i-k]\n\n    return str(res // (n - k))\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = list(map(int, stdin.split()))\n    arr = list(map(int, stdin.split()))\n    # Complete the average function below.\n    return average(arr, n, k, m)\n\n\ndef"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # return the correct solution\n    n, k, m = list(map(int, stdin.split()))\n    stdin = list(map(int, stdin.split()))\n    stdin.sort()\n    print(stdin[k - 1])\n    for i in range(m):\n        a, b = list(map(int, stdin[i].split()))\n        if a == 1:\n            print(b)\n        else:\n            stdin[a - 1] = stdin[a - 1] + b\n\n    print(stdin)\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = map(int, stdin.split())\n    heroes = list(map(int, stdin.split()))\n    heroes.sort()\n    max_power = heroes[-1]\n    heroes.pop()\n    avg = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for h in range(j + 1, n):\n                if (heroes[i] + heroes[j] + heroes[h]) / 3 <= max_power:\n                    avg = (heroes[i] + heroes[j] + heroes[h]) / 3\n                    break\n            if avg:\n                break\n        if avg:\n            break\n    return avg\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = [int(x) for x in stdin.split(\" \")]\n    a = [int(x) for x in stdin.split(\" \")]\n\n    res = 0\n    # all the powers are positive\n    a.sort(reverse=True)\n\n    for i in range(k):\n        if n <= 1:\n            break\n        if m <= 1:\n            break\n\n        a[i] += 1\n        m -= 1\n\n        if a[i] == 10:\n            a[i] = 0\n            a[i + 1] += 1\n            m -= 1\n\n        n -= 1\n\n    res = sum(a) / n\n    return str(res)\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = map(int, stdin.split(' '))\n    a = list(map(int, stdin.split(' ')))\n    print(solution.__annotations__)\n    return str(solution(n, k, m, a))\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = [int(i) for i in stdin.split('\\n')[:3]]\n    \n    \n    return \"\"\n"
    },
    {
        "number": 624,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = map(int, stdin.split())\n    s = map(int, stdin.split())\n    s = sorted(s)\n    k -= 1\n    m -= 1\n    pre = [0] * n\n    for i in range(1, n):\n        pre[i] = pre[i-1] + (s[i] - s[i-1])\n    res = 0\n    for i in range(k):\n        res += (s[m+i] - s[i])\n    for i in range(k):\n        res += (s[-1-i] - s[m+i])\n    for i in range(m):\n        res += (s[k+i] - s[i])\n    for i in range(m):\n        res += (s[k+i+1] - s[i])\n    return str(res/(n - k - m * 2))"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return str(solve(stdin))"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return -3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 + 4 - 5 + 4 - 3 + 2 - 1 + 4 +"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(eval(stdin))\n\n\ndef"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n\"\"\"\n\ndef"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return str(solution_internal(stdin))\n\ndef"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return sum(map(lambda x: (-1)**(x + 1) * x, range(1, n + 1)))\n\"\"\"\n\n\ndef"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    def calc(num):\n        if num == 1:\n            return 0\n        return -1 + calc(num - 1) * num\n    return calc(n)\n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n\"\"\"\n\nimport math\n\ndef"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return (str(int(1 / (1 - (1 / n))) - 1))\n\n\nimport unittest\n\n\nclass TestStringMethods(unittest.TestCase):\n    def test_upper(self):\n        self.assertEqual('foo'.upper(), 'FOO')\n\n    def test_isupper(self):\n        self.assertTrue('FOO'.isupper())\n        self.assertFalse('Foo'.isupper())\n\n    def test_split(self):\n        s = 'hello world'\n        self.assertEqual(s.split(), ['hello', 'world'])\n        # check that s.split fails when the separator is not a string\n        with self.assertRaises(TypeError):\n            s.split(2)\n"
    },
    {
        "number": 625,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Calculates f(n) for n, n > 0.\n    \"\"\"\n    n = int(stdin)\n    return (-1)**(n+1) * n\n"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    _, A = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.insert(0, 0)\n    cost = [[] for _ in range(len(a))]\n    for i in range(1, len(a)):\n        cost[i].append(a[i] - a[i - 1])\n    dp = [[float('inf')] * (len(a) - 1) for _ in range(len(a))]\n    dp[0][0] = 0\n    for i in range(1, len(a) - 1):\n        for j in range(len(a) - 1):\n            dp[i][j] = min(dp[i][j], cost[i][j])\n            if j + 1 < len(a) - 1:\n                dp[i][j + 1] = min(dp[i][j + 1], dp[i][j] + cost[i][j])\n    return min(dp[-1])\n\n\ndef"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    a.insert(0, 0)\n    a.append(0)\n    res = 0\n    for i in range(1, n + 2):\n        res += min(a[i] - a[i - 1], a[i - 1] - a[i])\n    print(res)\n    return ''\n"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    def solve(a, i, d, c):\n        if i == len(a):\n            return c\n        if d == 1:\n            c += 1\n        return min(solve(a, i + 1, d * (-1), c), solve(a, i + 2, d, c + 1))\n\n    return solve(a, 0, 1, 0)\n"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n = int(stdin.split('\\n')[0])\n    c_list = list(map(int, stdin.split('\\n')[1].split(' ')))\n\n    max_steps = 1\n    for i in range(n - 1):\n        if c_list[i + 1] < c_list[i]:\n            max_steps += 1\n\n    return max_steps\n"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    num_of_computers = int(stdin[0])\n    amount_of_information = [int(i) for i in stdin[1].split(' ')]\n    if num_of_computers == 1:\n        return 0\n    if num_of_computers == 2:\n        return max(amount_of_information)\n    elif num_of_computers == 3:\n        return 2\n    elif num_of_computers == 4:\n        return 2\n    elif num_of_computers == 5:\n        return 1\n    elif num_of_computers == 6:\n        return 3\n    elif num_of_computers == 7:\n        return 2\n    elif num_of_computers == 8:\n        return 1\n    elif num_of_computers == 9:\n        return 1\n    elif num_of_computers == 10:\n        return 2\n    elif num_of_computers == 11:\n        return 2\n    elif num_of_computers == 12:\n        return 2\n    elif num_of_computers == 13:\n        return 3\n    elif num_of_computers == 14:\n        return 2\n    elif num_of_computers == 15:\n        return 2\n    elif num_of_computers == 16:\n        return 2\n    elif num_of_computers == 17:\n        return 2\n    elif num_of_computers == 18:\n        return 2\n    elif num_of_computers == 19:\n        return 3\n    elif num_of_computers == 20:\n        return 1\n    elif num_of_computers == 21:\n        return 3\n    elif num_of_computers == 22:\n        return 3\n    elif num_of_computers == 23:\n        return 3\n    elif num_of_computers == 24:\n        return 3\n    elif num_of_computers == 25:\n        return 3\n    elif num_of_computers == 26:\n        return 2\n    elif num_of_computers == 27:\n        return 3\n    elif num_of_computers == 28:\n        return 3\n    elif num_of_computers == 29:\n        return 3\n    elif num_of_computers == 30:\n        return 3\n    elif num_of_computers == 31:\n        return 3\n    elif num_of_computers == 32:\n        return 2\n    elif num_of_computers == 33:\n        return 3\n    elif num_of_computers == 34:\n        return 3\n    elif num_of_computers == 35:\n        return 3\n    elif num_of_computers == 36:\n        return 3\n    elif num_of_computers == 37:\n        return 3\n    elif num_of_computers == 38:\n        return 3\n    elif num_of_computers == 39:\n        return 3\n    elif num_of_computers == 40:\n        return 3\n    elif num_of_computers == 41:\n        return 3\n    elif num_of_computers == 42:\n        return 3\n    elif num_of_computers == 43:\n        return 3\n    elif num_of_computers == 44:\n        return 3\n    elif num_of_computers == 45:\n        return 3\n    elif num_of_computers == 46:\n        return 3\n    elif num_of_computers == 47:\n        return 3\n    elif num_of_computers == 48:\n        return 3\n    elif num_of_computers == 49:\n        return 3\n    elif num_of_computers == 50:\n        return 3\n    elif num_of_computers == 51:\n        return 3\n    elif num_of_computers == 52:\n        return 3\n    elif num_of_computers == 53:\n        return 3\n    elif num_of_computers == 54:\n        return 3\n    elif num_of_computers == 55:\n        return 3\n    elif num_of_computers == 56:\n        return 3\n    elif num_of_computers == 57:\n        return 3\n    elif num_of_computers == 58:\n        return 3\n    elif num_of_computers == 59:\n        return 3\n    elif num_of_computers == 60:\n        return 3\n    elif num_of_computers == 61:\n        return 3\n    elif num_of_computers == 62:\n        return 3\n    elif num_of_computers == 63:\n        return 3\n    elif num_of_computers == 64:\n        return 3\n    elif num_of_computers == 65:\n        return 3\n    elif num_of_computers == 66:\n        return 3\n    elif num_of_computers == 67:\n        return 3\n    elif num_of_computers == 68:\n        return 3\n    elif num_of_computers == 69:\n        return 3\n    elif num_of_computers == 70:\n        return 3\n    elif num_of_computers == 71:\n        return 3\n    elif num_of_computers == 72:\n        return 3\n    elif num_of_computers == 73:\n        return 3\n    elif num_of_computers == 74:\n        return 3\n    elif num_of_computers == 75:\n        return 3\n    elif num_of_computers == 76:\n        return 3\n    elif num_of_computers == 77:\n        return 3\n    elif num_of_computers == 78:\n        return 3\n    elif num_of_computers == 79:\n        return 3\n    elif num_of_computers == 80:\n        return 3\n    elif num_of_computers == 81:\n        return 3\n    elif num_of_computers == 82:\n        return 3\n    elif num_of_computers == 83:\n        return 3\n    el"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    data = list(map(int, stdin.split()))\n\n    if n == 1:\n        return 1\n\n    moves = 0\n    left = 1\n    right = n\n    while left < right:\n        if data[left] < data[right]:\n            left += 1\n            right -= 1\n            moves += 1\n        else:\n            right -= 1\n            moves += 1\n\n    return moves\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    num_computers = int(stdin)\n    computers = list(map(int, stdin.split(\" \")))\n    if num_computers == 1:\n        return 0\n    return max([len(find_all_paths(computers, i)) for i in range(num_computers)])\n\ndef"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    if n <= 1:\n        return 0\n\n    a.sort()\n    cnt = 0\n    prev = a[0]\n    for i in range(1, n):\n        if a[i] > prev + 1:\n            cnt += 1\n            prev = a[i]\n    return cnt\n"
    },
    {
        "number": 626,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    arr = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    cur_ind = 0\n    max_d = 0\n    for x in arr:\n        if cur_ind!= x:\n            max_d += 1\n            cur_ind = x\n    return max_d\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip().split('\\n')[1]\n    n = int(s[0])\n    s = s[1:]\n    for i in range(n):\n        if s[i] > s[i + 1]:\n            print(s[:i] + s[i + 1:])\n            return\n    print(s)\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    print(\"solution: \", end=\"\")\n    return \"\"\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Constraint: the input string contains only lowercase Latin letters\n    \"\"\"\n    # Read from input\n    stdin = stdin.strip()\n    n = int(stdin)\n    s = list(stdin)\n\n    # Define the comparison operators\n    comparison_operators = [\">\", \"<\", \"=\"]\n\n    # Define the comparison functions\n    comparison_functions = [lambda x, y: x > y, lambda x, y: x < y, lambda x, y: x == y]\n\n    # Initialize the string as the lexicographically smallest\n    result = \"\".join(s)\n\n    # Try all the comparison operators and comparison functions\n    for operator in comparison_operators:\n        for function in comparison_functions:\n            # Compare each pair of characters\n            for i in range(n):\n                for j in range(i + 1, n):\n                    # If this pair of characters is the same\n                    if function(s[i], s[j]):\n                        # Then compare this pair of characters with the rest of the string\n                        for k in range(j + 1, n):\n                            # If the comparison is greater or equal to the rest of the string\n                            if function(s[i], s[k]):\n                                # Then replace the pair with the smallest string\n                                result = min(result, s[:i] + s[j] + s[k + 1:])\n                                break\n\n    # Return the result\n    return result\n    \n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    best_sub = \"\"\n    best_sub_cost = float(\"inf\")\n    for i in range(len(s)):\n        for j in range(i+1, len(s)):\n            new_sub = s[0:i] + s[j:]\n            if new_sub < best_sub:\n                best_sub = new_sub\n                best_sub_cost = i+1\n    return best_sub\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"aaa\")\n    'aa'\n    >>> solution(\"abcda\")\n    'abca'\n    \"\"\"\n\n    pass\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    s = list(s)\n    s.sort()\n    for i in range(len(s)):\n        if i+1 < len(s):\n            if s[i] == s[i+1]:\n                s.pop(i+1)\n                break\n    return \"\".join(s)\n"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    size = int(stdin[0])\n    string = stdin[1]\n    result = sorted(string)\n    for i in range(len(result)):\n        temp_str = result[:i] + result[i+1:]\n        temp_str = ''.join(temp_str)\n        if sorted(temp_str) < result:\n            return temp_str\n    return result"
    },
    {
        "number": 627,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = len(s)\n    dp = [None] * n\n    for i in range(n):\n        dp[i] = [None] * n\n        for j in range(i, n):\n            dp[i][j] = (s[i:j + 1] < s[j]) or (i == 0 and j == n - 1)\n    # for r in dp:\n    #     print(r)\n    for j in range(n):\n        for i in range(j + 1):\n            dp[i][j] = (s[i:j + 1] < s[j]) or (i == 0 and j == n - 1) or ((s[i:j + 1] < s[j]) and dp[i][j - 1])\n    for r in dp:\n        print(r)\n    print(dp)\n    return s[:dp[0].index(True) + 1]\n\nprint(solution(input()))"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    l = sorted(map(int, stdin.split()))\n    a = [0] * k\n    s = 0\n    for i in range(n):\n        s |= l[i]\n        if i & 1:\n            a[i >> 1] = s\n        else:\n            a[(i - 1) >> 1] = s\n\n    return max(a)\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"\"\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n    pass\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split('\\n')\n    n, k = int(n), int(k)\n    s = stdin.split('\\n')\n    a = [int(i) for i in s[0].split(' ')]\n    beauty = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            beauty = max(beauty, a[i] & a[j])\n    return beauty\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\nn, k = [int(i) for i in stdin.split(' ')]\nprices = [int(i) for i in stdin.split(' ')[1::]]"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split(' ')))\n    arr = list(map(int, stdin.split(' ')))\n    arr.sort()\n    min_ = arr[0]\n    max_ = arr[-1]\n    cur_ = 0\n    res = 0\n    for i in range(k):\n        cur_ = cur_ & arr[i]\n        res = max(cur_, res)\n    return str(res)"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\nn, k = map(int, stdin.readline().split())\nbooks = list(map(int, stdin.readline().split()))\n\nans = 0\nleft = 0\nfor right in range(1, n):\n    while left < right and (books[right] & books[left] == 0):\n        left += 1\n    ans += (right - left) * books[left]\n    left += 1\nprint(ans)\n"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.readlines()\n    n, k = [int(x) for x in line[0].split(' ')]\n    v = [int(x) for x in line[1].split(' ')]\n    v.sort()\n    result = 0\n    for i in range(k):\n        result += v[i] & v[i + k]\n    print(result)"
    },
    {
        "number": 628,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Time complexity: O(n log k)\n    Space complexity: O(n)\n    \"\"\"\n    books = [int(b) for b in stdin.split()]\n    sorted_books = sorted(books, reverse=True)\n    books_sum = sum(sorted_books)\n    k = int(stdin.split()[1])\n    shelves = [b for b in books if b < books_sum / k]\n    beauty = 0\n    for i in range(len(shelves) - 1):\n        beauty = beauty | (shelves[i] & shelves[i + 1])\n    return beauty\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a_arr, b_arr = [int(x) for x in stdin.split('\\n')]\n    a = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    b = [int(x) for x in stdin.split('\\n')[2].split(' ')]\n    a = sorted(a)\n    b = sorted(b)\n    print(b[-1] + a[-1])\n\nsolution(input())\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n    stdin = stdin.strip('\\n')\n    lines = stdin.split('\\n')\n    house = [int(i) for i in lines[0].split()]\n    streets = [int(i) for i in lines[1].split()]\n    streets = [[i, 0] for i in streets]\n    streets[-1][1] = 0\n\n    for i in range(len(streets) - 1):\n        streets[i][1] = streets[i+1][0] - streets[i][0] - 1\n\n    start, end = 0, house[0]\n\n    max_day = 0\n    for i in range(len(streets)):\n        curr_max = max(0, streets[i][1] - start)\n        curr_max += end - streets[i][0]\n        curr_max = max(curr_max, house[i])\n        max_day = max(max_day, curr_max)\n        start = streets[i][0] + 1\n        end = end + streets[i][1]\n\n    print(max_day)\n\n    return ''"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Returns the minimum total time he needs to wait at the crossroads, given that he crosses the avenue only once both on his way to the store and on his way back home.\n\n    Input format:\n    line 1: the number of houses in each row (2 <= n <= 50)\n    line 2: n - 1 space-separated integers a_{ij} (1 <= a_{ij} <= 100)\n    line 3: n space-separated integers b_{j} (1 <= b_{j} <= 100)\n\n    Output format:\n    the least total time Laurenty needs to wait at the crossroads, given that he crosses the avenue only once both on his way to the store and on his way back home.\n    '''\n\n    #   vars\n    houses = int(stdin.split('\\n')[0])\n    a = [int(x) for x in stdin.split('\\n')[1].split(' ')]\n    b = [int(x) for x in stdin.split('\\n')[2].split(' ')]\n    \n\n    #   Solve\n    #   check if there is a loop\n    if abs(b[0] - b[1]) == 0 or abs(a[0] - a[1]) == 0:\n        print(abs(b[0] - b[1]) + abs(a[0] - a[1]))\n    elif abs(b[0] - b[1]) == abs(a[0] - a[1]):\n        print(max(abs(b[0] - b[1]), abs(a[0] - a[1])) * houses)\n    else:\n        print(abs(b[0] - b[1]))\n    return ''"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    print(\"solution from {}\".format(__file__))\n    return 'not implemented'\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    houses, distances = map(int, stdin.split())\n    distances = list(map(int, stdin.split()))\n    return min(sum(distances[:i]) + sum(distances[i:]) for i in range(1, houses))\n\"\"\"\n\ndef"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    result = 0\n    while a[-1] > b[0]:\n        result += b[0]\n        b[0] += 1\n    for i in range(len(a) - 1):\n        result += a[i] + b[i]\n    return result"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = [int(x) for x in stdin.split()]\n    b = [int(x) for x in stdin.split()]\n\n    # dp[i][j] = min cost when the paths are i and j\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n\n    # Forward pass\n    for i in range(n):\n        dp[i][i] = a[i]\n        for j in range(i + 1, n):\n            dp[i][j] = min(dp[i][k] + dp[k][j] for k in range(i, j)) + b[j]\n\n    # Backward pass\n    dp[0][n - 1] = min(dp[i][n - 1] + dp[i][j] for i, j in zip(range(n), range(n - 1, -1, -1)))\n\n    return dp[0][n - 1]\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('4\\n1 2 3\\n3 2 1\\n3 2 2 3')\n    '12'\n    >>> solution('2\\n1\\n1\\n1 1')\n    '4'\n    >>> solution('3\\n1 2\\n3 3\\n2 1 3')\n    '11'\n    >>> solution('2\\n1\\n1\\n1 1')\n    '4'\n    \"\"\"\n    n = int(stdin.readline())\n    a = [list(map(int, stdin.readline().split())) for _ in range(n - 1)]\n    a.append(list(map(int, stdin.readline().split())))\n    b = list(map(int, stdin.readline().split()))\n    c = 0\n    for i in range(n):\n        c += max(a[i])\n    c += max(b)\n    print(c)\n\nsolution(input)"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4\\n1 2 3\\n3 2 1\\n3 2 2 3\")\n    12\n    \"\"\"\n    houses = stdin.split(\"\\n\")[:-1]\n    a, b = [list(map(int, row.split())) for row in houses]\n    c = list(map(int, stdin.split()[-1:]))\n    s = set()\n    for row in range(len(houses)):\n        for house in range(len(houses[row])):\n            if house + 1 < len(houses[row]):\n                s.add((houses[row][house], houses[row][house + 1]))\n    res = a[0][0] + b[0] + c[0] + a[0][0] + b[0]\n    for row in range(len(houses)):\n        for house in range(len(houses[row])):\n            if house + 1 < len(houses[row]):\n                c = a[row][house] + b[row] + c[row] + a[row][house] + b[row]\n                res = min(res, c)\n    return res\n"
    },
    {
        "number": 629,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\"\"\"\n    number_of_rows, streets_in_row, total_time = [int(num) for num in stdin.splitlines()]\n    streets = [int(num) for num in stdin.splitlines()[1:]]\n    street_time = [sum([streets[i:i + j] for j in range(1, streets_in_row)]) for i in range(streets_in_row)]\n    return total_time - max(street_time)\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    pass\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \n    n, k = map(int, stdin.readline().split())\n    \n    lst = [0] + [int(x) for x in stdin.readline().split()] + [0]\n    \n    prev = [0] * (n + 1)\n    next = [0] * (n + 1)\n    \n    for i in range(1, n + 1):\n        prev[lst[i]] += 1\n        next[lst[i - 1]] += 1\n    \n    for _ in range(k):\n        cur = [0] * (n + 1)\n        for i in range(1, n + 1):\n            cur[lst[i]] += 1\n            cur[lst[i - 1]] += prev[i]\n            cur[lst[i + 1]] += next[i]\n        prev, next = cur, next\n    \n    return''.join(map(str, prev[1:-1]))\n\n\"\"\"\n\nn, k = map(int, input().split())\n\nlst = [0] + list(map(int, input().split())) + [0]\n\nprev = [0] * (n + 1)\nnext = [0] * (n + 1)\n\nfor i in range(1, n + 1):\n    prev[lst[i]] += 1\n    next[lst[i - 1]] += 1\n\nfor _ in range(k):\n    cur = [0] * (n + 1)\n    for i in range(1, n + 1):\n        cur[lst[i]] += 1\n        cur[lst[i - 1]] += prev[i]\n        cur[lst[i + 1]] += next[i]\n    prev, next = cur, next\n\nprint(' '.join(map(str, prev[1:-1])))"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This solution passed all the test cases.\n    It uses a hashtable to store the links to messages.\n    It uses a queue to keep track of the message links that will be processed.\n    \"\"\"\n    \n    n, k = list(map(int, stdin.split(' ')))\n    \n    link_table = [None] * n\n    link_table[0] = set()\n    link_table[0].add(0)\n    \n    \n    queue = []\n    queue.append(0)\n    \n    \n    while len(queue)!= 0:\n        \n        current_link = queue.pop(0)\n        \n        if current_link < n - k - 1:\n            if link_table[current_link + 1] is None:\n                link_table[current_link + 1] = set()\n                link_table[current_link + 1].add(current_link + 1)\n                queue.append(current_link + 1)\n            else:\n                link_table[current_link + 1].add(current_link + 1)\n        \n        if current_link > k:\n            if link_table[current_link - 1] is None:\n                link_table[current_link - 1] = set()\n                link_table[current_link - 1].add(current_link - 1)\n                queue.append(current_link - 1)\n            else:\n                link_table[current_link - 1].add(current_link - 1)\n            \n        if link_table[current_link] is None:\n            link_table[current_link] = set()\n            link_table[current_link].add(current_link)\n            queue.append(current_link)\n        else:\n            link_table[current_link].add(current_link)\n    \n    for i in range(n):\n        print(len(link_table[i]))\n    \n    return ''\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Implement the solution to the problem\n    \"\"\"\n    pass"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    return ''"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split(' '))\n    links = [0] + list(map(int, stdin.split(' ')))\n    links.sort()\n    m = len(links)\n    visited = {}\n    visited[1] = 1\n    for i in range(1, m):\n        j = i - k - 1\n        if j < 0:\n            j = 0\n        while j < i:\n            visited[links[j + 1]] = visited.get(links[j + 1], 0) + visited.get(links[i], 0)\n            j += 1\n    return str(sum(visited.values()))"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    assert 0 <= m <= n, \"m should be non-negative and smaller than n\"\n    links = [int(i) for i in stdin.readline().split()]\n    assert len(links) == n, \"len(links) should be equal to n\"\n    res = [1] * n\n    for i in range(m):\n        idx = links[i]\n        if idx > 0:\n            res[idx - 1] = sum(res)\n        if i < n - m:\n            res[i + m] = sum(res)\n    return''.join(map(str, res))\n"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    links = [0] + [int(x) for x in stdin.split()]\n    distinct_counts = [1] * (n + 1)\n    for index in range(n, 1, -1):\n        distinct_counts[index] = distinct_counts[links[index]]\n    return''.join(map(str, distinct_counts[1:-1]))\n\n\ndef"
    },
    {
        "number": 630,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    returns number of distinct messages\n    you can read given a sequence of messages\n    '''\n    n, k = map(int, stdin.readline().split())\n    sequence = list(map(int, stdin.readline().split()))\n    sequence.insert(0, 0)\n    sequence.append(0)\n    print(sequence)\n    previous, next = [0] * len(sequence), [0] * len(sequence)\n    previous[0], next[len(sequence) - 1] = 0, 0\n    for i in range(1, len(sequence)):\n        j = sequence[i]\n        if j:\n            previous[i] = sequence[i - 1]\n            next[i] = sequence[i + 1]\n    print(previous, next)\n    \n    # Write your code here\n    queue = []\n    queue.append(sequence[1])\n    seen = {sequence[1]}\n    while queue:\n        cur = queue.pop(0)\n        seen.add(cur)\n        if cur - k > 0 and cur - k not in seen and cur - k in next:\n            queue.append(cur - k)\n        if cur + k < len(sequence) and cur + k not in seen and cur + k in previous:\n            queue.append(cur + k)\n    return len(seen)\n\n\nsolution(stdin)"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\"\n\n\ndef"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    '''return 'YES' if it is possible to reorder the elements of the array in such a way that the given formula gives the given value, and 'NO' otherwise.'''\n    n, m = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    if sum(arr) % n!= 0:\n        return 'NO'\n    res = 0\n    for i in range(n):\n        res += arr[i] // (i + 1)\n    if res % m!= 0:\n        return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    def check(p1, p2):\n        return sum([int(p[i] / (i + 1)) for i, p in enumerate(p1)]) == sum([int(p[i] / (i + 1)) for i, p in enumerate(p2)])\n\n    [n, m] = map(int, stdin.split('\\n')[0].split())\n    [a, b] = map(list, zip(*[map(int, stdin.split('\\n')[1].split())] * 2))\n    p1 = sorted([i for i in range(1, n + 1)], key=lambda x: -a[x - 1])\n    p2 = sorted([i for i in range(1, n + 1)], key=lambda x: -b[x - 1])\n    if check(p1, p2):\n        return 'YES'\n    return 'NO'\n\n\ndef"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(\" \")]\n    arr = [int(x) for x in stdin.split(\" \")]\n    if sum(arr) == m:\n        print(\"YES\")\n    elif sum(arr) < m:\n        print(\"NO\")\n    else:\n        print(\"YES\")"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Find whether it is possible to reorder elements of the array in such a way that $\\sum_{i=1}^{n}{\\sum_{j=i}^{n}{\\frac{a_j}{j}}}$ equals $m$.\n\n    Args:\n        stdin (str): Input.\n\n    Returns:\n        str: Output.\n    \"\"\"\n    t = int(stdin)\n    \n    for _ in range(t):\n        n, m = [int(i) for i in stdin.split()]\n        a = [int(i) for i in stdin.split()]\n\n        l = len(a)\n\n        # if n!= m:\n        #     print('NO')\n\n        total = sum(a)\n        sum_to_m = sum([a[i] // (i + 1) for i in range(l)])\n\n        print('YES' if total == m * (l + 1) and sum_to_m == m else 'NO')\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Reorder the elements of the array so that the given formula gives the given value.\n\n    >>> solution(\"3 8\\n2 5 1\\n4 4\")\n    'YES'\n    \"\"\"\n   ..."
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n    pass\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds if it is possible to reorder the elements of a given array in such a way that the given formula gives the given value\n    :param stdin: The array and the value of the formula to test\n    :return: Returns \"YES\" if it is possible to reorder the array in such a way that the given formula gives the given value, otherwise returns \"NO\"\n    \"\"\"\n    total, num, ind = stdin.split()\n    total, num, ind = int(total), int(num), int(ind)\n    numbers = stdin.split()[1:]\n    numbers = [int(x) for x in numbers]\n    numbers.sort()\n    total_sum = 0\n    for i in range(len(numbers)):\n        total_sum += int(numbers[i] / (i + 1))\n    if total_sum == total:\n        return \"YES\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 631,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution for codewars kata\"\"\"\n    stdin = stdin.split('\\n')\n    for i in range(int(stdin[0])):\n        n, m = [int(i) for i in stdin[i * 2 + 1].split()]\n        a = [int(i) for i in stdin[i * 2 + 2].split()]\n        for j in range(n - 1):\n            for k in range(j + 1, n):\n                if sum(a[j:k + 1]) == m:\n                    return \"YES\"\n        return \"NO\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\nn,k = map(int, stdin.split('\\n')[0].split())\n\nfor i in range(n):\n    n=n+(i+1)*k\n\nprint(n)\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split(\"\\n\")\n    for i in range(int(lines[0])):\n        a, b = map(int, lines[i + 1].split())\n        print(a + b)\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return result"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return ''\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    result = []\n    inputs = [line.strip().split(' ') for line in stdin.split('\\n')]\n    for n, k in inputs:\n        n = int(n)\n        k = int(k)\n        result.append(n)\n        for _ in range(k):\n            n += f(n)\n            result.append(n)\n    return '\\n'.join(str(i) for i in result)\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5 1\\n8 2\\n3 4\")\n    10\n    >>> solution(\"5 1\\n8 2\\n3 4\\n1 5\\n8 3\\n3 4\")\n    12\n    >>> solution(\"5 1\\n8 2\\n3 4\\n1 5\\n8 3\\n3 4\\n1 5\\n8 3\\n3 4\")\n    12\n    \"\"\"\n    t = int(stdin.readline().strip())\n    res = []\n    for _ in range(t):\n        n, k = [int(x) for x in stdin.readline().strip().split(' ')]\n        f = []\n        for i in range(2, n + 1):\n            if n % i == 0:\n                f.append(i)\n        f.sort()\n        print(n + k * (f[0] - 1))\n"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return stdin"
    },
    {
        "number": 632,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    def f(n):\n        return n if n == 1 else f(n // n) + n if n % 2 == 0 else f(n // n) + n + 1\n\n    ans = []\n    t = int(stdin.readline())\n    for _ in range(t):\n        n, k = map(int, stdin.readline().split())\n        ans.append(f(n) + k * (f(f(n)) - n))\n    return '\\n'.join(map(str, ans))\n\n\n\ndef"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n    \n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n < 2:\n        return \"Impossible\"\n\n    graph = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    for _ in range(m):\n        v, u = map(int, stdin.split())\n        graph[v][u] = graph[u][v] = 1\n\n    for v in range(1, n + 1):\n        for u in range(1, n + 1):\n            for k in range(1, n + 1):\n                if graph[u][v] and graph[v][k] and k!= v:\n                    graph[u][k] = graph[k][u] = 1\n                    break\n\n    for g in graph:\n        for v in g:\n            if v and g.count(1) == 2:\n                return \"Possible\"\n    return \"Impossible\"\n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    graph = []\n\n    for i in range(1, m + 1):\n        v, u = [int(x) for x in stdin.split()]\n        if not gcd(v, u):\n            graph.append((v, u))\n\n    if graph:\n        return \"Impossible\"\n    return \"Possible\"\n\n\n-----Test cases-----\nInput\n5 6\n2 5\n3 2\n5 1\n3 4\n4 1\n5 4\n\nOutput\nImpossible\n\nInput\n5 6\n2 5\n3 2\n5 1\n3 4\n4 1\n5 4\n\nOutput\nPossible\n\n\n\n----- Solution Explanation-----\n\nIf there are multiple valid solutions then we don't want any of them.\n\nLet's build a set of graph edges and make sure that it does not contain any cycles.\n\nThe number of edges in the graph has to be equal to the number of edges in the input.\n\nLet's build a graph as follows:\n\nInput graph = [(1, 2), (1, 5), (2, 3), (2, 4), (3, 4), (4, 5)]\n\nHere is the graph in the form of an adjacency list:\n\n{\n1: [2, 5],\n2: [3, 4],\n3: [4],\n4: [5]\n}\n\nIn order to build a graph which does not contain cycles we should remove edges from the graph if it would lead to the creation of a cycle. So, we can start from edges (1, 5) and remove it because it would lead to the cycle {(1, 2), (1, 5)}.\n\nNext we can remove edges (2, 3) and (2, 4) because they would lead to the cycle {(2, 3), (2, 4), (3, 4)} and so on.\n\nFinally, we can remove the last edge (4, 5). Now there is no cycle in the graph.\n\nGraph {1: [2], 2: [3, 4], 3: [4]}\n\nGraph {1: [2], 2: [3, 4], 3: [4]}\n\nGraph {1: [2], 2: [3, 4], 3: [4]}\n\nGraph {1: [2], 2: [3], 3: [4], 4: [5]}\n\nGraph {1: [2], 2: [3], 3: [4], 4: [5]}\n\nGraph {1: [2], 2: [3, 4], 3: [4], 4: [5]}\n\nGraph {1: [2, 5], 2: [3], 3: [4], 4: [5]}\n\nGraph {1: [2, 5], 2: [3, 4], 3: [4], 4: [5]}\n\nGraph {1: [2, 5], 2: [3, 4], 3: [4], 4: [5]}\n\nGraph {1: [2, 5], 2: [3, 4], 3: [4], 4: [5]}\n\nGraph {1: [2, 5], 2: [3, 4], 3: [4], 4: [5]}\n\nGraph {1: [2, 5], 2: [3, 4], 3: [4], 4: [5]}\n\nGraph {1: [2, 5], 2: [3, 4], 3: [4], 4: [5]}\n\nGraph {1: [2, 5], 2: [3, 4], 3: [4], 4: [5]}\n\nGraph {1: [2, 5], 2: [3, 4], 3: [4], 4: [5]}\n\nGraph {1: [2, 5], 2: [3, 4], 3: [4], 4: [5]}\n\nGraph {1: [2, 5], 2: [3, 4], 3: [4], 4: [5]}\n\nGraph {1: [2, 5], 2: [3, 4], 3: [4], 4: [5]}\n\nGraph {1: [2, 5], 2: [3, 4], 3: [4], 4: [5]}\n\nGraph {1: [2, 5], 2: [3, 4], 3: [4], 4: [5]}\n\nGraph {1: [2, 5], 2: [3, 4], 3: [4], 4: [5]}\n\nGraph {1: [2, 5], 2: [3, 4], 3: [4], 4: [5]}\n\nGraph {1: [2, 5], 2: [3, 4], 3: [4], 4: [5]}\n\nGraph {1: [2, 5], 2: [3, 4], 3: [4], 4: [5]}\n\nGraph {1: [2, 5], 2: [3, 4], 3: [4], 4: [5]}\n\nGraph {1: [2, 5], 2: [3, 4], 3: [4], 4: [5]}\n\nGraph {1: [2, 5], 2: [3, 4], 3: [4], 4: [5]}\n\nGraph {1: [2, 5], 2: [3, 4], 3: [4], 4: [5]}\n\nGraph {1: [2, 5], 2: [3, 4], 3: [4], 4: [5]}\n\nGraph {1: [2, 5], 2: [3, 4], 3: [4], 4: [5]}\n\nGraph {1: [2, 5], 2: [3, 4], 3: [4], 4: [5]}\n\nGraph {1: [2, 5], 2: [3, 4], 3: [4], 4: [5]}\n\nGraph {1: [2, 5], 2: [3, 4], 3: [4], 4: [5]}\n\nGraph {1: [2, 5], 2: [3, 4], 3: [4], 4: [5]}\n\nGraph {1: [2, 5], 2: [3, 4], 3: [4], 4: [5]}\n\nGraph {1: [2, 5], 2: [3, 4], 3: [4], 4: [5]}\n\nGraph {1: [2, 5], 2: [3, 4], 3: [4], 4: [5]}\n\nGraph {1: [2, 5], 2: [3, 4], 3: [4], 4: [5]}\n\nGraph {1: [2, 5], 2: [3, 4], 3: [4], 4: [5]}\n\nGraph {1: [2, 5], 2: [3, 4], 3: [4], 4: [5]}\n\nGraph {1: [2, 5], 2: [3,"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(i) for i in stdin.split(' ')]\n\n    return 'Impossible' if n > 10 ** 5 or m > n * (n - 1) / 2 or n < 1 or m < 0 or m % 2!= 0 or (n - 1) % 2!= 0 else 'Possible'\n\n\n\"\"\"\n\n\ndef"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n-----\n\"\"\"\n\nfrom math import gcd\n\ndef"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    if m < 0 or n < 0:\n        return \"Impossible\"\n    res = set()\n    for i in range(1, m + 1):\n        if i % 2 == 0:\n            continue\n        u, v = [int(x) for x in stdin.split()][:2]\n        res.add((min(u, v), max(u, v)))\n    if not n == len(res):\n        return \"Impossible\"\n    return \"Possible\"\n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n-----'''\n"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n, m = list(map(int, stdin.split()))\n    g = [[] for _ in range(n)]\n    for i in range(m):\n        v, u = list(map(int, stdin.split()))\n        g[v-1].append(u-1)\n        g[u-1].append(v-1)\n    return \"Impossible\" if any(gcd(v, u)!= 1 for v in g for u in v) else \"Possible\"\n\n\ndef"
    },
    {
        "number": 633,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Standard input\n    n, m = [int(x) for x in stdin.split()]\n\n    # Check if impossible\n    if n < 2 or m < 2:\n        return 'Impossible'\n\n    # Start with 1 and 2\n    graph = {1: 2, 2: 1}\n\n    # Iterate over the number of edges\n    for _ in range(m):\n        # Extract the edge\n        u, v = [int(x) for x in stdin.split()]\n\n        # If the vertices are adjacent\n        if v not in graph[u]:\n            # Connect them\n            graph[u] = v\n\n    # Check for edges\n    for u, v in graph.items():\n        if v!= u:\n            # If the connection is not self-loops\n            if v not in graph:\n                # Then the graph is relatively prime\n                return 'Possible'\n\n    # If we reach here the graph is not relatively prime\n    return 'Impossible'\n"
    },
    {
        "number": 634,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('3 1\\\\n2 1')\n    'WIN'\n    >>> solution('3 1\\\\n1 1')\n    'WIN'\n    >>> solution('3 1\\\\n1 1')\n    'WIN'\n    >>> solution('3 1\\\\n2 1')\n    'LOSE'\n    >>> solution('3 1\\\\n3 1')\n    'LOSE'\n    >>> solution('3 1\\\\n4 1')\n    'LOSE'\n    \"\"\"\n    # find first city\n    r, n = map(int, stdin.split('\\n')[0].split())\n    found = False\n    for line in stdin.split('\\n')[1:]:\n        r, c = map(int, line.split())\n        if (r, c) == (r, 2):\n            found = True\n            break\n    if not found:\n        return 'LOSE'\n    # one of the cells on the edge will be taken\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            if (r, c) == (r - 1, 1) or (r, c) == (r, 1):\n                return 'WIN'\n        else:\n            if (r, c) == (r, 1) or (r, c) == (r + 1, 1):\n                return 'WIN'\n    return 'LOSE'\n"
    },
    {
        "number": 634,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    from sys import stdin\n    n, m = [int(n) for n in stdin.readline().split()]\n    prev = [tuple(int(n) for n in stdin.readline().split()) for _ in range(n)]\n    prev.sort()\n    return \"WIN\" if m == 0 else \"LOSE\"\n"
    },
    {
        "number": 634,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''3 1\n   ... 1 1\n   ... ''')\n    'WIN'\n    >>> solution('''12 2\n   ... 4 1\n   ... 8 1\n   ... ''')\n    'WIN'\n    >>> solution('''1 1\n   ... 1 2\n   ... ''')\n    'LOSE'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 634,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \n    return 'WIN' if False else 'LOSE'"
    },
    {
        "number": 634,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    r, n = [int(x) for x in stdin.split(\" \")]\n    res = []\n    for _ in range(n):\n        i, j = [int(x) for x in stdin.split(\" \")]\n        res.append([i, j])\n\n    # My strategy:\n    # Check if any cell can be claimed by both cities\n    # If not, return \"LOSE\"\n    # If yes, return \"WIN\"\n    # Check for each cell if it can be claimed by either city\n    # If not, add it to a list of cells to be claimed by the current city\n    # If yes, then check for each adjacent cell if it can be claimed by the other city\n    # If yes, add it to the list of cells to be claimed by the current city\n    # If there are no cells that can be claimed by either city, return \"LOSE\"\n\n    # Set up initial variables\n    found_cell_can_be_claimed_by_both = False\n    for i in range(1, r+1):\n        for j in range(1, 3):\n            for cell in res:\n                if cell == [i, j]:\n                    found_cell_can_be_claimed_by_both = True\n                    break\n            if found_cell_can_be_claimed_by_both:\n                break\n        if found_cell_can_be_claimed_by_both:\n            break\n\n    if not found_cell_can_be_claimed_by_both:\n        return \"LOSE\"\n    else:\n        for i in range(1, r+1):\n            for j in range(1, 3):\n                found_cell_can_be_claimed_by_both = False\n                for cell in res:\n                    if cell == [i, j]:\n                        found_cell_can_be_claimed_by_both = True\n                        break\n                if not found_cell_can_be_claimed_by_both:\n                    break\n            if not found_cell_can_be_claimed_by_both:\n                return \"LOSE\"\n\n    return \"WIN\"\n"
    },
    {
        "number": 634,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 634,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 634,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return 'WIN' if the first city wins, otherwise return 'LOSE'.\"\"\"\n    r, n = stdin.split('\\n')[0].split(' ')\n    r = int(r)\n    n = int(n)\n    curr = set()\n    for i in range(1, n + 1):\n        r, c = stdin.split('\\n')[i].split(' ')\n        r, c = int(r), int(c)\n        curr.add((r, c))\n\n    turn = 0\n    while True:\n        # first choose the cell\n        (r, c) = (0, 0)\n        # randomly choose the first cell\n        while True:\n            (r, c) = (random.randint(1, r), random.randint(1, 2))\n            if (r, c) not in curr:\n                break\n\n        # pick the best next cell\n        best = None\n        best_val = 0\n        for (ri, ci) in curr:\n            # check all cells we could have chosen, and see how they impact the score\n            val = abs(ri - r) + abs(ci - c)\n            if val > best_val:\n                best_val = val\n                best = (ri, ci)\n        # add it to the set\n        curr.remove(best)\n        curr.add((r, c))\n        turn += 1\n        if turn == r:\n            return \"WIN\" if turn % 2 == 1 else \"LOSE\"\n"
    },
    {
        "number": 634,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    r, n = stdin.split(' ')\n    r, n = int(r), int(n)\n    matrix = []\n    for _ in range(r):\n        matrix.append(stdin.split(' '))\n    \n    matrix_count = [[0 for _ in range(2)] for _ in range(r)]\n    for i in range(r):\n        for j in range(2):\n            matrix_count[i][j] = matrix[i].count(str(j + 1))\n    \n    sorted_matrix_count = sorted(matrix_count, key = lambda x: x[0])\n    # print(sorted_matrix_count)\n    for i in range(r):\n        for j in range(2):\n            if matrix_count[i][j] > sorted_matrix_count[i][j]:\n                return 'LOSE'\n    return 'WIN'\n\ndef"
    },
    {
        "number": 634,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('3 1\\n1 1\\n')\n    'WIN'\n    >>> solution('12 2\\n4 1\\n8 1\\n')\n    'WIN'\n    >>> solution('1 1\\n1 2\\n')\n    'LOSE'\n    \"\"\"\n    r, n = [int(n) for n in stdin.split()]\n    # r is the number of rows\n    # n is the number of possible cells to be reclaimed\n    cells = [tuple(int(n) for n in line.split()) for line in stdin.split('\\n')[1:]]\n    cities = set()\n    for r, c in cells:\n        cities.add((r, c))\n    for r, c in cells:\n        for dr, dc in [(r + 1, c), (r, c + 1)]:\n            if (dr, dc) in cities:\n                cities.remove((dr, dc))\n        for dr, dc in [(r - 1, c), (r, c - 1)]:\n            if (dr, dc) in cities and (dr, dc)!= (r, c):\n                cities.remove((dr, dc))\n    return 'WIN' if len(cities) <= 1 else 'LOSE'\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds out if Bob can travel to the Alice's home by metro.\n\n    Args:\n        stdin (str): Input string\n\n    Returns:\n        str: Output string\n    \"\"\"\n    n, s = [int(i) for i in stdin.split('\\n')[0].split()]\n    closed = [int(i) for i in stdin.split('\\n')[1].split()]\n    opened = [int(i) for i in stdin.split('\\n')[2].split()]\n\n    if s == 1:\n        if closed[opened.index(1)]:\n            return 'NO'\n        return 'YES'\n    if opened[opened.index(1)]:\n        if closed[opened.index(1)]:\n            return 'NO'\n        return 'YES'\n    if closed[opened.index(1)]:\n        return 'NO'\n    return 'YES'\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split(' '))\n    a, b = [], []\n    for i in range(n):\n        a_, b_ = list(map(int, stdin.split(' ')))\n        a.append(a_)\n        b.append(b_)\n    print('YES' if (sum([x == 0 for x in a]) > s or sum([x == 0 for x in b]) > n - s) else 'NO')\n    return ''\n\"\"\"\n\n\ndef"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Returns \"YES\" if Bob can travel to the Alice's home by metro, or \"NO\" otherwise\"\"\"\n    pass\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, s = [int(x) for x in stdin.split()]\n    a, b = [0] * n, [0] * n\n    for i in range(n):\n        a[i], b[i] = [int(x) for x in stdin.split()][2 * i : 2 * i + 2]\n\n    if (b[s - 1]!= 1) & (a[s - 1] == 1):\n        return \"NO\"\n    elif (a[s - 1]!= 1) & (b[s - 1] == 1):\n        return \"NO\"\n    else:\n        return \"YES\"\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nfrom collections import deque"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    stations = [int(i) for i in stdin.split('\\n')[1].split()]\n    for i in range(n):\n        if stations[i] == 1:\n            first_track = True\n        else:\n            first_track = False\n        if stations[n - i - 1] == 1:\n            second_track = True\n        else:\n            second_track = False\n        if first_track:\n            if second_track:\n                if s > i + 1 and s!= i + 1 + n:\n                    return \"NO\"\n                elif s == i + 1:\n                    return \"NO\"\n            else:\n                if s > i + 1:\n                    return \"NO\"\n                elif s == i + 1:\n                    return \"YES\"\n        else:\n            if second_track:\n                if s > i + 1:\n                    return \"NO\"\n                elif s == i + 1:\n                    return \"YES\"\n            else:\n                if s > i + 1 and s!= i + 1 + n:\n                    return \"NO\"\n                elif s == i + 1:\n                    return \"NO\"\n    return \"YES\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    a, b = [], []\n    for _ in range(n):\n        a1, b1 = map(int, stdin.split())\n        a.append(a1)\n        b.append(b1)\n\n    m = [[int(s in a[i]) for s in range(1, n + 1)] for i in range(n)]\n    print(\"YES\") if [sum(m[i]) for i in range(n)] == [0, n - 1] else print(\"NO\")\n    # print(a, b)\n    # print(m)\n\n    return ''\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # step 1: get necessary information\n    n, s = list(map(int, stdin.split(' ')))\n    closed = [list(map(int, stdin.split(' '))) for _ in range(n)]\n    opened = [list(map(int, stdin.split(' '))) for _ in range(n)]\n    \n    # step 2: get the starting station\n    for i, c in enumerate(closed):\n        if 1 in c:\n            starting_station = i + 1\n            break\n    \n    # step 3: get the ending station\n    for i, o in enumerate(opened):\n        if s in o:\n            ending_station = i + 1\n            break\n    \n    # step 4: if not able to reach ending station, return \"NO\"\n    if starting_station > ending_station:\n        return \"NO\"\n    \n    # step 5: find a way to reach ending station\n    if starting_station == ending_station:\n        return \"YES\"\n    \n    # step 6: find a way to switch track\n    for i, c in enumerate(closed):\n        if i + 1 == starting_station:\n            if 0 in c:\n                start_track = i + 1\n            else:\n                start_track = i + 2\n        if i + 1 == ending_station:\n            if 0 in o:\n                end_track = i + 1\n            else:\n                end_track = i + 2\n    \n    # step 7: return \"YES\" if able to reach ending station by switch track\n    if start_track == end_track:\n        return \"YES\"\n    \n    # step 8: return \"NO\" if not able to reach ending station by switch track\n    return \"NO\"\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 635,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    count_a = sum(a)\n    count_b = sum(b)\n    if count_a == 0:\n        print(\"YES\")\n        return\n    if count_b == 0:\n        print(\"NO\")\n        return\n    if s == 1:\n        if count_a > 1 and a.count(1) == 1:\n            print(\"YES\")\n            return\n        else:\n            print(\"NO\")\n            return\n    if count_a > 1 and a.count(1) == 1:\n        if b[0] == 1:\n            print(\"NO\")\n            return\n        else:\n            print(\"YES\")\n            return\n    else:\n        if b[0] == 1:\n            print(\"YES\")\n            return\n        else:\n            print(\"NO\")\n            return"
    },
    {
        "number": 636,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    input = stdin.splitlines()\n    n = int(input[0].split()[0])\n    k = int(input[0].split()[1])\n    times = list(map(int, input[1].split()))\n    times.sort()\n    i = 0\n    while i < len(times) and k > 0:\n        time = times[i]\n        if k >= time:\n            k -= time\n            i += 1\n        else:\n            i += 1\n    return''.join(map(str, times[:i]))\n"
    },
    {
        "number": 636,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    k, n = [int(x) for x in stdin.split()]\n    p = [int(x) for x in stdin.split()]\n    p.sort()\n    while len(p)!= 1:\n        if p[0] + p[-1] <= k:\n            p = p[1:-1]\n        else:\n            p = p[1:]\n\n    return p[0]\n\n\ndef"
    },
    {
        "number": 636,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    instruments, days = [int(s) for s in stdin.split(\" \")]\n    for i in range(instruments):\n        instruments[i] = int(stdin[i + 1])\n    instruments.sort()\n    instruments.reverse()\n    for i in range(instruments):\n        instruments[i] = int(stdin[i + 1])\n    if (days - instruments[0]) % instruments[0]!= 0:\n        print(0)\n    else:\n        n = (days - instruments[0]) / (instruments[0])\n        instruments.sort()\n        print(n)\n        print(\" \".join(str(s) for s in instruments))\n        return \"\""
    },
    {
        "number": 636,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    ins = map(int, stdin.split())\n    # write your code in Python 3.6\n    res = [0] * n\n    for i, j in enumerate(sorted(ins)):\n        res[i] = j\n    return''.join(str(x) for x in res)\n"
    },
    {
        "number": 636,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, k = list(map(int, stdin.split(' ')))\n    lst = list(map(int, stdin.split(' ')))\n    lst.sort()\n    print(lst)\n    i = 0\n    day = 0\n    m = 0\n    while i < len(lst):\n        day = lst[i]\n        i = i + 1\n        if day > k:\n            k = k - day + 1\n            day = 1\n        else:\n            k = k - day\n            day = 0\n        if day > 0:\n            m = m + 1\n        print(day, k, m)\n    print(m)\n    return str(m)\n\n\nprint(solution(\"4 10\"))\n"
    },
    {
        "number": 636,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    m = sum([i for i in a if i <= k])\n    return str(m)\n\n\"\"\"\n\ndef"
    },
    {
        "number": 636,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return '-1'\n"
    },
    {
        "number": 636,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    n, k = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    # arr.sort(reverse=True)\n    # print(arr)\n    max_num = 0\n    for i in range(n):\n        if k // arr[i] > max_num:\n            max_num = k // arr[i]\n\n    # print(max_num)\n    return f'{max_num}\\n{[i + 1 for i in range(len(arr)) if (k // arr[i]) == max_num][0]}'\n"
    },
    {
        "number": 636,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nimport sys\nimport random\nimport math\n\ndef"
    },
    {
        "number": 636,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    from itertools import combinations as comb\n    n, k = [int(i) for i in stdin.split()]\n    lst = [int(i) for i in stdin.split()]\n    lst.sort(reverse=True)\n    s = 0\n    for c in list(comb(lst, k)):\n        s += sum(c)\n    return str(s)\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    cols = stdin.split('\\n')[1].split(' ')\n    nums = list(map(int, cols))\n    count = 0\n    for num in nums:\n        if num == 1:\n            count += 1\n    if n % count == 0:\n        return 'YES'\n    else:\n        return 'NO'"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    pixels = list(stdin)\n    black_count = 0\n    white_count = 0\n    for pixel in pixels:\n        if pixel == \"0\":\n            black_count += 1\n        else:\n            white_count += 1\n    if black_count == white_count:\n        return \"YES\"\n    else:\n        return \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\nfrom collections import Counter\n\ndef"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    photo = [int(i) for i in stdin.split('\\n')[1].split(' ')]\n    black_width = 0\n    white_width = 0\n    for i in range(n):\n        if photo[i] == 0:\n            black_width += 1\n            white_width = 0\n        else:\n            white_width += 1\n            black_width = 0\n\n        if black_width == 3 and white_width == 3:\n            return 'YES'\n    return 'NO'\n\"\"\"\n\ndef"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\ndef"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"YES\" if is_zebra_photo(stdin) else \"NO\"\n\n\ndef"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"\""
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    size = int(stdin)\n    string = stdin\n    b = []\n    for c in string:\n        if c == \"0\":\n            b.append(0)\n        elif c == \"1\":\n            b.append(1)\n    if size % 2 == 0:\n        if b[0] == 0:\n            if b[1] == 0 and b[2] == 1:\n                if b[3] == 1 and b[4] == 0 and b[5] == 1 and b[6] == 0:\n                    if b[7] == 1 and b[8] == 0:\n                        return \"YES\"\n                    else:\n                        return \"NO\"\n                else:\n                    return \"NO\"\n            else:\n                return \"NO\"\n        else:\n            if b[1] == 1 and b[2] == 0 and b[3] == 1 and b[4] == 0 and b[5] == 1 and b[6] == 0:\n                if b[7] == 1 and b[8] == 0:\n                    return \"YES\"\n                else:\n                    return \"NO\"\n            else:\n                return \"NO\"\n    else:\n        if b[0] == 1:\n            if b[1] == 0 and b[2] == 1:\n                if b[3] == 1 and b[4] == 0 and b[5] == 1 and b[6] == 0:\n                    if b[7] == 1 and b[8] == 0:\n                        return \"YES\"\n                    else:\n                        return \"NO\"\n                else:\n                    return \"NO\"\n            else:\n                return \"NO\"\n        else:\n            if b[1] == 1 and b[2] == 0 and b[3] == 1 and b[4] == 0 and b[5] == 1 and b[6] == 0:\n                if b[7] == 1 and b[8] == 0:\n                    return \"YES\"\n                else:\n                    return \"NO\"\n            else:\n                return \"NO\""
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().strip().split(' ')))\n    width = 0\n    for i in range(n):\n        if arr[i] == 1:\n            width += 1\n        else:\n            width = 0\n        if width == 3:\n            return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 637,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    photo = list(map(int, stdin.split('\\n')[1].split()))\n    zebra_photo = False\n    if n % 2 == 1:\n        zebra_photo = True\n    col = 0\n    while col < n - 1:\n        black_count = 0\n        while col < n and photo[col] == 1:\n            col += 1\n            black_count += 1\n        if black_count == 0 or black_count == n:\n            zebra_photo = False\n            break\n        white_count = 0\n        while col < n and photo[col] == 0:\n            col += 1\n            white_count += 1\n        if black_count!= white_count:\n            zebra_photo = False\n            break\n    return 'YES' if zebra_photo else 'NO'\n"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return string of n integers\"\"\"\n    n, M = map(int, stdin.split())\n    stdin = stdin.split()\n    times = [int(i) for i in stdin]\n    ans = []\n    for i in range(n):\n        l, r = 0, M\n        while l < r:\n            m = (l + r) // 2\n            if times[i] > m:\n                l = m + 1\n            else:\n                r = m\n        ans.append(l)\n    return''.join(map(str, ans))\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # get input\n    n, m = map(int, stdin.readline().split())\n    stdin = stdin.readline().split()\n    t = [int(x) for x in stdin]\n\n    # solve\n    answer = []\n    for i in range(n):\n        hardest = i\n        while hardest < n:\n            if t[hardest] > t[i]:\n                hardest += 1\n            else:\n                break\n        answer.append(hardest - i)\n\n    # write answer\n    return''.join([str(x) for x in answer])"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(n) for n in stdin.split(\" \")]\n    t = [int(t) for t in stdin.split(\" \")]\n    i = n - 1\n    min_arr = [0] * n\n    while i >= 0:\n        max_t = m - t[i]\n        if max_t < 0:\n            break\n        for j in range(i - 1, -1, -1):\n            if t[j] <= max_t:\n                min_arr[i] = j + 1\n                break\n        i -= 1\n    return \" \".join(map(str, min_arr))\n\n\ndef"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split(' '))\n    t = sorted(map(int, stdin.split(' ')[:n]))\n    return''.join(map(str, [i for i in range(n) if t[i] <= m]))\n"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"TODO: Docstring for solution.\n\n    :stdin: TODO\n    :returns: TODO\n\n    \"\"\"\n    return \"\""
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    times = list(map(int, stdin.split()))\n    \n    return times[::-1]"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, M = map(int, stdin.split(' '))\n    times = map(int, stdin.split(' '))\n\n    return [sum(times[i:i + t]) - t for t in range(1, n) if sum(times[i:i + t]) <= M]"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    t = [int(x) for x in stdin.split()]\n    t.sort()\n\n    i, j, ans = 0, 0, 0\n\n    while i < n:\n        if t[i] > m:\n            ans += 1\n            i += 1\n        else:\n            j = i\n            while j < n and t[j] <= m:\n                j += 1\n            ans += j - i\n            i = j\n    return''.join([str(x) for x in ans])\n"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Finds minimum number of students that need to fail the exam so\n    they have enough time to pass the exam.\n\n    Args:\n        stdin (str): Input string\n\n    Returns:\n        str: Solution string\n    \"\"\"\n    _, total_time = map(int, stdin.split())\n    exam_times = list(map(int, stdin.split()))\n    exam_times.sort()\n\n    # Iterate through exam times and subtract the total time\n    # if there is at least one student that takes more than\n    # the time. If no student takes more than the time, then\n    # all students can pass.\n    std_cnt = 0\n    for exam_time in exam_times:\n        std_cnt += 1 if exam_time <= total_time else 0\n\n    return \" \".join(map(str, std_cnt))\n"
    },
    {
        "number": 638,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n\ndef"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    arr = [int(s) for s in stdin.split()]\n    return str(n + sum(i for i in range(1, 100) if not any(i % j == 0 for j in arr)))\n\n\ndef"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n\nn, x = map(int, stdin.split())\nc = map(int, stdin.split())\nmex = 0\nfor i in range(n):\n    if c[i] > x:\n        mex = i\n        break"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, mex = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n\n    def find_mex(arr: list):\n        mex_ = 1\n        for i in arr:\n            if i >= 0:\n                if i > mex_:\n                    mex_ = i\n        return mex_\n\n    def mex_element(arr: list):\n        arr.sort()\n        return arr[len(arr) - 1]\n\n    # -------------\n    arr = arr[:n]\n    count = 0\n    while not arr == [] and mex!= 0:\n        mex = find_mex(arr)\n        while mex % 2 == 0:\n            mex = mex // 2\n        mex_element(arr)\n        count += 1\n    return count\n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return ''\n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\nfrom collections import Counter\nfrom typing import List\n\ndef"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    n, mex = map(int, stdin.split(' '))\n    a = set(map(int, stdin.split(' ')))\n    print(mex - max(a))\n    print(max(a))"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    _ = int(stdin.readline())\n    numbers = [int(number) for number in stdin.readline().split()]\n    \n    mex = 10**6\n    for number in range(mex):\n        if number not in numbers:\n            mex = min(mex, number)\n    \n    return mex\n"
    },
    {
        "number": 639,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n    first_line: str = stdin.readline().rstrip()\n    n: int = int(first_line.split(' ')[0])\n    x: int = int(first_line.split(' ')[1])\n    second_line: str = stdin.readline().rstrip()\n    numbers: List[int] = [int(number) for number in second_line.split(' ')]\n    # first index is the value of the mex of the set\n    # second index is the value of the number that is in the set\n    mex_indexes: Dict[int, List[int]] = {}\n    for number in numbers:\n        if number not in mex_indexes:\n            mex_indexes[number] = [0, 0]\n        mex_indexes[number][0] += 1\n        mex_indexes[number][1] = number\n    # list of indexes\n    mex_indexes = mex_indexes.items()\n    mex_indexes = sorted(mex_indexes, key=lambda x: x[0])\n    # sorted list of indexes\n    mex_indexes = list(zip(*mex_indexes))\n    count: int = 0\n    last_val: int = -1\n    for val, mex_nums in zip(mex_indexes[0], mex_indexes[1]):\n        if last_val!= val:\n            count += 1\n            last_val = val\n        if mex_nums[0] == x:\n            count += 1\n            break\n    print(count)\n    return \"\"\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split(' ')\n    a, b = int(a), int(b)\n\n    if abs(a - b) == 0:\n        print(0, 0, 1)\n    elif abs(a - b) == 1:\n        print(0, 1, 1)\n    elif abs(a - b) == 2 or abs(a - b) == 3:\n        print(1, 0, 1)\n    elif abs(a - b) == 4 or abs(a - b) == 5:\n        print(1, 1, 1)\n    else:\n        print(2, 0, 1)\n\nprint(solution(input()))\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split(' ')\n    return''.join([str(i) for i in [\n        solution(a, b) + solution(b, a),\n        solution(a, b) + solution(b, a),\n        solution(a, b) + solution(b, a),\n    ]])\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return \"1\" * (a > b) + \"0\" * (b > a) + \"2\" * (a == b)"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if abs(a - b) < 3:\n        return '1'\n    if abs(a - b) == 3:\n        return '2'\n    if abs(a - b) > 3:\n        return '3'"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\""
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    return str(a) + \" \" + str(b) + \" \" + str(max(0, a - b, b - a)) + \" \" + str(min(0, a - b, b - a)) + \" \" + str(abs(a - b))\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\n\n\ndef"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    a, b = [int(x) for x in stdin.split(' ')]\n    if abs(a - b) > 3:\n        print('0')\n    elif abs(a - b) == 3:\n        print('1')\n    elif abs(a - b) == 1:\n        print('2')\n    else:\n        print('3')\n\ndef"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split(' ')\n    a, b = int(a), int(b)\n\n    if abs(a-b) < 3:\n        print(1, 0, a-b)\n    elif abs(a-b) == 3:\n        print(0, 1, a-b)\n    else:\n        print(2, a-b, a-b)\n\nsolution(stdin)\n\nimport sys\na, b = sys.stdin.readline().split()\na, b = int(a), int(b)\n"
    },
    {
        "number": 640,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split(' ')\n    a, b = [int(i) for i in a], [int(i) for i in b]\n    # number of ways to throw the dice\n    if abs(a[0]-a[1]) > abs(b[0]-b[1]):\n        return '1'+ str(b[0]-b[1])\n    elif abs(a[0]-a[1]) == abs(b[0]-b[1]):\n        return '1 0'+ str(b[0]-b[1])\n    else:\n        return '0'+ str(a[0]-a[1])\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"4 of week\")\n    '52'\n    >>> solution(\"30 of month\")\n    '11'\n    \"\"\"\n    week, month = stdin.split()[1], stdin.split()[3]\n    if week == 'week':\n        if month =='month':\n            return \"11\"\n        return \"7\"\n    return \"4\"\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    day, month, year = stdin.split()\n    day, month, year = int(day), int(month), int(year)\n    \n    def days_in_month(month, year):\n        days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n        if month > 12 or month < 1:\n            return \"Invalid month\"\n        if month in [1, 3, 5, 7, 8, 10, 12]:\n            return 31\n        if month == 2:\n            if (year % 4 == 0 and year % 100!= 0) or (year % 400 == 0):\n                return 29\n            else:\n                return 28\n        return days[month - 1]\n    \n    if day <= days_in_month(month, year):\n        return (day * days_in_month(month, year)) - 1\n    else:\n        return \"Invalid day\"\n\nprint(solution('4 of week'))\nprint(solution('30 of month'))"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return str(53)"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # YOUR CODE HERE\n    return \"\"\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    day_of_week = stdin.split()[0]\n    day_of_month = int(stdin.split()[1])\n    return str(day_of_month * (31 if day_of_month > 30 else [1, 3, 5, 7, 8, 10, 12][day_of_month - 1]))\n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    "
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    candy_plan = stdin.split(' ')\n    if candy_plan[0] == '1':\n        print(get_thursday_count(candy_plan[1]))\n    else:\n        print(get_month_count(candy_plan[0], candy_plan[1]))\n\n\ndef"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \n    m, d = [int(i) for i in stdin.split()]\n    if m < 3:\n        return m * 31\n    elif m == 3:\n        return 31 + d\n    else:\n        return (m - 1) * 31 + 32\n    \n"
    },
    {
        "number": 641,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    \n    return str(int(stdin.split(' ')[1]) * 6 + int(stdin.split(' ')[0]))\n"
    },
    {
        "number": 642,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    1. read data and check edge cases\n    2. create a list of stairs\n    3. create a list of dirty stairs\n    4. iterate over the stairs list\n        1. if the current stairs is dirty, set the current step to the next step\n        2. if the current stairs is dirty, set the current step to the next step\n        3. if the current stairs is dirty, set the current step to the next step\n        4. if the current stairs is dirty, set the current step to the next step\n        5. if the current stairs is not dirty, set current step to next step\n    5. return the last element in the stairs list\n\n    Time complexity: O(n)\n    Space complexity: O(n)\n    '''\n    stairs = list(map(int, stdin.split('\\n')[0].split(' ')))\n    dirty_stairs = list(map(int, stdin.split('\\n')[1].split(' ')))\n    current_step = 1\n    i = 0\n    while i < len(stairs):\n        if dirty_stairs[i] == stairs[i]:\n            current_step += 1\n        else:\n            if stairs[i] > current_step:\n                current_step = stairs[i]\n        i += 1\n\n    return 'YES' if current_step >= stairs[-1] else 'NO'\n"
    },
    {
        "number": 642,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n\n    arr = [i for i in arr if i <= n]\n    if arr:\n        arr.sort(reverse=True)\n        if n in arr:\n            if m == 0:\n                return \"YES\"\n            else:\n                return \"NO\"\n        elif n < arr[0] + arr[1]:\n            if m == 0:\n                return \"NO\"\n            else:\n                return \"YES\"\n        else:\n            return \"NO\"\n    else:\n        return \"NO\"\n"
    },
    {
        "number": 642,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    stairs, dirty_stairs = map(int, stdin.split(\" \"))\n    dirty_stairs = list(map(int, stdin.split(\" \")))\n    print(\"YES\" if stairs - 1 in dirty_stairs else \"NO\")\n    return \"NO\" if stairs - 1 in dirty_stairs else \"YES\"\n"
    },
    {
        "number": 642,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split(' ')]\n    d = [int(x) for x in stdin.split(' ')]\n    if sum(d) < n:\n        return 'YES'\n    if sum(d) == n:\n        return 'YES'\n    if max(d) < n:\n        return 'YES'\n    if max(d) == n:\n        return 'NO'\n    return 'NO'"
    },
    {
        "number": 642,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stair_num, dirty_stair_num = map(int, stdin.split('\\n')[0].split())\n    stair_list = list(map(int, stdin.split('\\n')[1].split()))\n    stair_list = sorted(stair_list)\n    for i in range(len(stair_list)):\n        if i > 0:\n            if stair_list[i] - stair_list[i - 1] > 2:\n                return \"NO\"\n        if i < len(stair_list) - 1:\n            if stair_list[i + 1] - stair_list[i] > 2:\n                return \"NO\"\n    return \"YES\"\n"
    },
    {
        "number": 642,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    s = set(map(int, stdin.split()))\n    a = n - (m + 1)\n    if a > 0:\n        return 'NO'\n    if n == 1:\n        return 'YES'\n    if n == 2:\n        if 1 in s:\n            return 'NO'\n        else:\n            return 'YES'\n    for i in range(3, n):\n        if i in s:\n            continue\n        if (n - i) % 2 == 0:\n            return 'YES'\n    return 'NO'\n"
    },
    {
        "number": 642,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('10 5\\n2 4 5 7 9')\n    'YES'\n    >>> solution('10 5\\n2 4 8 3 6')\n    'NO'\n    \"\"\"\n    n, m = map(int, stdin.split())\n    stairs = list(map(int, stdin.split()))\n    d = {}\n    for i in range(m):\n        d[stairs[i]] = 1\n    if stairs[0] == n:\n        return 'YES'\n    else:\n        max_ = n - stairs[0]\n        if max_ == 0:\n            return 'YES'\n        else:\n            for i in range(max_):\n                if stairs[0] + i not in d:\n                    continue\n                else:\n                    if stairs[0] + i + 1 not in d:\n                        return 'YES'\n                    else:\n                        return 'NO'\n"
    },
    {
        "number": 642,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \n    return \"YES\" if len(stdin) >= 2 else \"NO\"\n"
    },
    {
        "number": 642,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    n, m = map(int, stdin.split())\n    stairs = [int(x) for x in stdin.split()]\n    stairs.sort()\n    stairs.append(n)\n    if any(x == 1 for x in stairs):\n        return 'NO'\n    jump = n\n    for i in range(1, m + 1):\n        jump = min(jump, stairs[i] - stairs[i - 1])\n    return 'YES' if jump == 1 else 'NO'\n    '''\n    n, m = map(int, stdin.split())\n    s = sorted(list(map(int, stdin.split())))\n    if any(x == 1 for x in s):\n        return 'NO'\n    if s[0] > 1:\n        return 'NO'\n    if s[-1] < n:\n        return 'NO'\n    i = 1\n    while i < len(s):\n        if s[i] - s[i - 1] > 2:\n            return 'NO'\n        i += 1\n    return 'YES'\n"
    },
    {
        "number": 642,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    # Get the data\n    n, m = map(int, stdin.split())\n    d = [int(x) for x in stdin.split()]\n    # We start with the last index as the last element. If the last element is dirty, we are not able to jump to the last stair\n    # If the first element is dirty, we are not able to jump to the first stair.\n    # If the last and the first are both dirty, we are not able to jump to the first or the last stair.\n    # All the other cases we are able to jump to the last or the first stair.\n    current_index = 0\n    last_index = n\n    while current_index < last_index:\n        # We have to step on the last index. If the last index is not dirty, we cannot step on the last index.\n        if d[current_index] == n:\n            current_index = n\n            break\n        # We have to step on the first index. If the first index is not dirty, we cannot step on the first index.\n        if d[current_index] == 1:\n            current_index = 1\n            break\n        # If the last and the first are both dirty, we are not able to step to the first or the last stair.\n        if d[current_index] == n and d[last_index - 1] == n:\n            return \"NO\"\n        # If the last index is dirty, we can step on the last index.\n        if d[current_index] == n:\n            current_index = n\n            break\n        # If the first index is dirty, we can step on the first index.\n        if d[current_index] == 1:\n            current_index = 1\n            break\n        # We can step to the last index.\n        last_index -= 1\n    return \"YES\"\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n\n    a, b, p, q = map(int, stdin.split())\n    l = lcm(a, b)\n    if p * a / l > q * b / l:\n        return -1\n    return a + b - 1\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    # Write your code here\n\nt = int(input())\nfor _ in range(t):\n    x, y, p, q = [int(x) for x in input().split()]\n    if x / y > p / q:\n        print(x // y)\n    elif x / y == p / q:\n        print(x // y)\n    else:\n        print(-1)"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n\n    def lcm(x, y):\n        return x * y // gcd(x, y)\n\n    t = int(stdin.readline())\n    for _ in range(t):\n        a, b, p, q = [int(x) for x in stdin.readline().split()]\n        l = lcm(p, q)\n        s = gcd(p, q)\n        if s <= a and a <= b:\n            c = b - a + 1\n            r = c // s\n            if r % p == 0 and r % q == 0:\n                print(c)\n            else:\n                print(-1)\n        elif l <= a and a <= b:\n            print(l)\n        else:\n            print(-1)\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        x, y, p, q = [int(x) for x in stdin.readline().strip().split(\" \")]\n        print(min(x, y)) if x / y >= p / q else print(-1)\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    line = stdin.readline()\n    while line:\n        x, y, p, q = map(int, line.split())\n        if q == 0 or p / q < y / x:\n            print(-1)\n        else:\n            print(int(x * p / q))\n        line = stdin.readline()\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 643,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.splitlines()[0])\n    x = 0\n    for i in range(n):\n        s = stdin.splitlines()[i + 1]\n        for c in s:\n            if c == 'for':\n                n = int(s.split()[2])\n                for j in range(n):\n                    if s.startswith('add'):\n                        x += 1\n                    if s.endswith('end'):\n                        break\n            if c == 'end':\n                break\n    print(x)\n    return x\n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"OVERFLOW!!!\"\n\ndef"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n\"\"\"\n\ndef"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''9\n   ... add\n   ... for 43\n   ... end\n   ... for 10\n   ... for 15\n   ... add\n   ... end\n   ... add\n   ... end\n   ... add\n   ... end\n   ... ''')\n    'OVERFLOW!!!'\n    >>> solution('''2\n   ... for 62\n   ... end\n   ... end\n   ... end\n   ... end\n   ... ''')\n    0\n    >>> solution('''11\n   ... for 100\n   ... for 100\n   ... for 100\n   ... for 100\n   ... add\n   ... end\n   ... end\n   ... end\n   ... end\n   ... end\n   ... end\n   ... end\n   ... end\n   ... end\n   ... ''')\n    'OVERFLOW!!!'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"9\\nadd\\nfor 43\\nend\\nfor 10\\nfor 15\\nadd\\nend\\nadd\\nend\")\n    '161'\n    \"\"\"\n   ...\n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    print(lines)\n\n    x = 0\n    for line in lines:\n        if \"add\" in line:\n            x += 1\n        if line == \"end\":\n            break\n        else:\n            parts = line.split()\n            if parts[0] == \"for\":\n                for n in range(int(parts[1])):\n                    x = x + 1\n            if x > 2**31-1:\n                return \"OVERFLOW!!!!\"\n    return str(x)\n\ndef"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin\n"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ..."
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n\ndef"
    },
    {
        "number": 644,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    for i in range(len(stdin)):\n        if stdin[i] == \"for\":\n            j = i\n            while j < len(stdin) and stdin[j]!= \"end\":\n                j += 1\n            n = int(stdin[i + 2: j])\n            for j in range(n):\n               ...\n        elif stdin[i] == \"add\":\n           ...\n       ...\n    return..."
    },
    {
        "number": 645,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 645,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return '2'\n"
    },
    {
        "number": 645,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_count = 0\n    # count the vowel count, and vowel index count\n    for i in range(len(stdin)):\n        if stdin[i] in vowels:\n            vowel_count += 1\n            vowel_idx = i\n\n    # count the digit count\n    digit_count = 0\n    for i in range(len(stdin)):\n        if stdin[i].isdigit():\n            digit_count += 1\n\n    # check the conditions\n    if digit_count == 0:\n        return vowel_count\n\n    if vowel_count == 0:\n        return digit_count\n\n    if digit_count % 2 == 0:\n        if stdin[vowel_idx] == 'a':\n            if stdin[vowel_idx + 1].isdigit() and int(stdin[vowel_idx + 1]) % 2 == 0:\n                return vowel_count\n        if stdin[vowel_idx] == 'e':\n            if stdin[vowel_idx + 1].isdigit() and int(stdin[vowel_idx + 1]) % 2 == 0:\n                return vowel_count\n        if stdin[vowel_idx] == 'i':\n            if stdin[vowel_idx + 1].isdigit() and int(stdin[vowel_idx + 1]) % 2 == 0:\n                return vowel_count\n        if stdin[vowel_idx] == 'o':\n            if stdin[vowel_idx + 1].isdigit() and int(stdin[vowel_idx + 1]) % 2 == 0:\n                return vowel_count\n        if stdin[vowel_idx] == 'u':\n            if stdin[vowel_idx + 1].isdigit() and int(stdin[vowel_idx + 1]) % 2 == 0:\n                return vowel_count\n        if stdin[vowel_idx] == '0':\n            if stdin[vowel_idx + 1].isdigit() and int(stdin[vowel_idx + 1]) % 2 == 0:\n                return vowel_count\n        if stdin[vowel_idx] == '2':\n            if stdin[vowel_idx + 1].isdigit() and int(stdin[vowel_idx + 1]) % 2 == 0:\n                return vowel_count\n        if stdin[vowel_idx] == '4':\n            if stdin[vowel_idx + 1].isdigit() and int(stdin[vowel_idx + 1]) % 2 == 0:\n                return vowel_count\n        if stdin[vowel_idx] == '6':\n            if stdin[vowel_idx + 1].isdigit() and int(stdin[vowel_idx + 1]) % 2 == 0:\n                return vowel_count\n        if stdin[vowel_idx] == '8':\n            if stdin[vowel_idx + 1].isdigit() and int(stdin[vowel_idx + 1]) % 2 == 0:\n                return vowel_count\n\n    if digit_count % 2!= 0:\n        if stdin[vowel_idx] == 'a':\n            if stdin[vowel_idx + 1].isdigit() and int(stdin[vowel_idx + 1]) % 2!= 0:\n                return vowel_count\n        if stdin[vowel_idx] == 'e':\n            if stdin[vowel_idx + 1].isdigit() and int(stdin[vowel_idx + 1]) % 2!= 0:\n                return vowel_count\n        if stdin[vowel_idx] == 'i':\n            if stdin[vowel_idx + 1].isdigit() and int(stdin[vowel_idx + 1]) % 2!= 0:\n                return vowel_count\n        if stdin[vowel_idx] == 'o':\n            if stdin[vowel_idx + 1].isdigit() and int(stdin[vowel_idx + 1]) % 2!= 0:\n                return vowel_count\n        if stdin[vowel_idx] == 'u':\n            if stdin[vowel_idx + 1].isdigit() and int(stdin[vowel_idx + 1]) % 2!= 0:\n                return vowel_count\n        if stdin[vowel_idx] == '0':\n            if stdin[vowel_idx + 1].isdigit() and int(stdin[vowel_idx + 1]) % 2!= 0:\n                return vowel_count\n        if stdin[vowel_idx] == '2':\n            if stdin[vowel_idx + 1].isdigit() and int(stdin[vowel_idx + 1]) % 2!= 0:\n                return vowel_count\n        if stdin[vowel_idx] == '4':\n            if stdin[vowel_idx + 1].isdigit() and int(stdin[vowel_idx + 1]) % 2!= 0:\n                return vowel_count\n        if stdin[vowel_idx] == '6':\n            if stdin[vowel_idx + 1].isdigit() and int(stdin[vowel_idx + 1]) % 2!= 0:\n                return vowel_count\n        if stdin[vowel_idx] == '8':\n            if stdin[vowel_idx + 1].isdigit() and int(stdin[vowel_idx + 1]) % 2!= 0:\n                return vowel_count\n\n    return vowel_count"
    },
    {
        "number": 645,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return ''"
    },
    {
        "number": 645,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    cards = [char for char in stdin]\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    # print(cards)\n    for char in vowels:\n        for i in range(len(cards)):\n            if cards[i] == char:\n                # print(cards[i])\n                # print(cards[i + 1])\n                # print(cards[i + 2])\n                if cards[i + 1]!= '0' and int(cards[i + 1]) % 2 == 0:\n                    print(2)\n                    exit(0)\n                if cards[i + 2]!= '2' and int(cards[i + 2]) % 2 == 0:\n                    print(2)\n                    exit(0)\n    print(0)\n    exit(0)"
    },
    {
        "number": 645,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    ans = 0\n    for i in range(len(stdin)):\n        if stdin[i] in \"aeiou\":\n            ans += 1\n    return ans\n\"\"\"\n\nimport sys\n\ndef"
    },
    {
        "number": 645,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return stdin.replace('0', 'a').replace('2', 'a').replace('4', 'a').replace('6', 'a').replace('8', 'a').replace('1', 'b').replace('3', 'b').replace('5', 'b').replace('7', 'b').replace('9', 'b')"
    },
    {
        "number": 645,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n    letters = {'a', 'e', 'i', 'o', 'u', '0', '2', '4', '6', '8'}\n    vowels = set('aeiou')\n    not_vowels = set('0123456789')\n\n    def is_vowel(c):\n        return c in vowels\n\n    def get_vowel_chars(s):\n        return [c for c in s if is_vowel(c)]\n\n    def get_non_vowel_chars(s):\n        return [c for c in s if c not in vowels]\n\n    def get_vowel_count(s):\n        vowel_chars = get_vowel_chars(s)\n        return sum(map(is_vowel, vowel_chars))\n\n    def get_non_vowel_count(s):\n        non_vowel_chars = get_non_vowel_chars(s)\n        return len(non_vowel_chars)\n\n    s = stdin\n    vowels_count = get_vowel_count(s)\n    non_vowels_count = get_non_vowel_count(s)\n    if vowels_count > 0:\n        print(non_vowels_count)\n    else:\n        print(vowels_count)\n"
    },
    {
        "number": 645,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('0ay1')\n    2\n    >>> solution('z')\n    0\n    >>> solution('ee')\n    2\n    \"\"\"\n    cards = stdin\n    flip = 0\n    for i in range(len(cards)):\n        if cards[i] in 'aeiou':\n            flip += 1\n        elif cards[i] in '0123456789':\n            if int(cards[i]) % 2 == 1:\n                flip += 1\n    return flip\n"
    },
    {
        "number": 645,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 646,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    Brimstone may visit any detachment at most once, so he can start with any one of the four directions.\n    '''\n    # input\n    detachments = list(map(int, stdin.split()))\n    x, y = map(abs, detachments)\n    detachments.sort()\n\n    # get max area\n    max_area = 0\n    for i in range(len(detachments)):\n        max_area += x * y - detachments[i] * y\n\n    # get max d\n    max_d = 0\n    for i in range(len(detachments)):\n        max_d += x - detachments[i]\n\n    # binary search\n    min_d = 0\n    max_d = max_d + 1\n    while max_d - min_d > 1:\n        t = (min_d + max_d) // 2\n        if check_detachments(detachments, t):\n            min_d = t\n        else:\n            max_d = t\n\n    if min_d < max_d:\n        return str(min_d)\n    else:\n        return '-1'\n\n\ndef"
    },
    {
        "number": 646,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    res = 1\n    for i in range(n):\n        x, y = map(int, stdin.readline().split())\n        if abs(x) > abs(y):\n            res = max(res, abs(x))\n        else:\n            res = max(res, abs(y))\n    return str(res)\n\nprint(solution(sys.stdin.read()))\n"
    },
    {
        "number": 646,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the minimal t,\n    which is the only one possible to cover all the surfaces\n    by a single orbital strike.\n\n    Args:\n        stdin (str): Input of the problem.\n\n    Returns:\n        str: The answer of the problem.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 646,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x, y = [int(i) for i in stdin.split()]\n    res = 0\n    for i in range(n):\n        for j in range(n):\n            if abs(x - i) + abs(y - j) < res:\n                res = abs(x - i) + abs(y - j)\n    return str(res)\n"
    },
    {
        "number": 646,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, *detachments = map(int, stdin.split())\n\n    for i, (x, y) in enumerate(zip(detachments, detachments[1:]), 1):\n        if x * y >= 0:\n            return -1\n    \n    return min(sum(abs(x) + abs(y) for x, y in zip(detachments, detachments[i:])) for i in range(1, n))\n\n\ndef"
    },
    {
        "number": 646,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"\"\"\n   ... 4\n   ... 100 0\n   ... 0 100\n   ... -100 0\n   ... 0 -100\n   ... \"\"\")\n    '100'\n\n    >>> solution(\"\"\"\n   ... 7\n   ... 0 2\n   ... 1 0\n   ... -3 0\n   ... 0 -2\n   ... -1 -1\n   ... -1 -3\n   ... -2 -3\n   ... \"\"\")\n    '-1'\n\n    >>> solution(\"\"\"\n   ... 5\n   ... 0 0\n   ... 0 -1\n   ... 3 0\n   ... -2 0\n   ... -2 1\n   ... -1 -1\n   ... -1 -3\n   ... -2 -3\n   ... \"\"\")\n    '2'\n    \"\"\"\n   ...\n\ndef"
    },
    {
        "number": 646,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(int(stdin))"
    },
    {
        "number": 646,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 646,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n"
    },
    {
        "number": 646,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return\n\"\"\"\nimport math\n\n\ndef"
    },
    {
        "number": 647,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # your code here\n    return \"\"\n"
    },
    {
        "number": 647,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return an integer as the string representation of a matrix\n    whose elements are 1 if the corresponding students sit\n    in the same desk, and 0 otherwise.\n    \"\"\"\n    return str(P(stdin))\n\n\ndef"
    },
    {
        "number": 647,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution('''\n   ... 6\n   ... LLRLLL\n   ... ''')\n    '1 4'\n    >>> solution('''\n   ... 4\n   ... RRLL\n   ... ''')\n    '3 1'\n    >>> solution('''\n   ... 5\n   ... LRLLL\n   ... ''')\n    '2 3'\n    \"\"\"\n    pass\n"
    },
    {
        "number": 647,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin.split(\"\\n\")[0])\n    string = stdin.split(\"\\n\")[1]\n    print(int(num/2))\n    for i in range(0,int(num/2)):\n        print(i+1,(i+int(num/2)+1))\n    #your code here\n    return \"\"\n"
    },
    {
        "number": 647,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # get the input\n    n = int(stdin[0])\n    orders = stdin[1]\n\n    # a list of pairs\n    pairs = []\n\n    # iterate through the orders and pair the students\n    for i, order in enumerate(orders):\n        if i % 2 == 0:\n            pairs.append((i + 1, i + 2))\n        else:\n            pairs.append((i + 2, i + 1))\n\n    # join the pairs\n    return''.join([str(x) for x in [pairs[0][0], pairs[-1][1]]])\n"
    },
    {
        "number": 647,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 647,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Write the function solution(n, L, R) where:\n        - n is the number of students in the class, and\n        - L is a list containing n letters representing the positions of the students in the classroom, where the L stands for left-handed and R for right-handed;\n        - R is a list containing n letters, where R[i] is the position of the right-handed student who sits on the ith desk.\n        - The function returns a list of n integer pairs where the ith pair contains the numbers of the students who sit to the left and to the right, respectively, of the ith desk.\n    \"\"\"\n    pass\n"
    },
    {
        "number": 647,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    hand = stdin.split()[1]\n    r = []\n    l = []\n    for i in range(n):\n        if hand[i] == \"R\":\n            r.append(i + 1)\n        else:\n            l.append(i + 1)\n\n    def dfs(l, r, t):\n        if len(l) == 0 or len(r) == 0:\n            return t\n        if abs(l[0] - r[0]) == 1:\n            return dfs(l[1:], r, t + [l[0], r[0]])\n        return dfs(l[1:], r[1:], t + [l[0], r[0]])\n\n    if len(r) > len(l):\n        r, l = l, r\n    return \" \".join([str(a) for a in dfs(l, r, [])])\n"
    },
    {
        "number": 647,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    desks = stdin.split('\\n')[1]\n\n    left, right = [], []\n    for i, d in enumerate(desks):\n        if d == 'R':\n            right.append(i)\n        else:\n            left.append(i)\n    res = []\n    for i in range(n // 2):\n        if i < len(left):\n            res.append(right[i])\n            res.append(left[i])\n        else:\n            res.append(left[i - len(left)])\n            res.append(right[i - len(left)])\n    return''.join([str(i + 1) for i in res])\n"
    },
    {
        "number": 647,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    pass\n    return ''.join(map(str, list(map(int, stdin.split())).sort))\n\ndef"
    },
    {
        "number": 648,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Your solution goes here.\"\"\"\n"
    },
    {
        "number": 648,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    m, b = map(int, stdin.split())\n\n    # Iterate over the rectangle from bottom-left to top-right and update the\n    # number of bananas at each point. If a point is on or on the edge of the\n    # rectangle, it has 1 banana. If it is inside the rectangle, the number of\n    # bananas changes according to the line equation.\n    num_bananas = 0\n    for x in range(m + 1):\n        for y in range(-x, b + 1):\n            num_bananas += 1 if 0 <= x + y <= b else 0\n\n    return str(num_bananas)\n"
    },
    {
        "number": 648,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    m, b = map(int, stdin.split())\n    return str(m * b)\n"
    },
    {
        "number": 648,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    # your solution goes here\n    pass\n\"\"\"\nimport sys\nimport math\n\nlines = sys.stdin.readlines()\n\nm, b = [int(x) for x in lines[0].split()]\n\nmax_bananas = (m*m + b*b) **.5\n\nprint(int(max_bananas))\n"
    },
    {
        "number": 648,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    x1, y1 = map(int, a.split(\" \"))\n    x2, y2 = map(int, b.split(\" \"))\n    m = (y1 - y2) / (x1 - x2)\n    b = y1 - (m * x1)\n    return str(int(b))\n"
    },
    {
        "number": 648,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    m, b = map(int, stdin.split())\n    print(m * (b + 1))"
    },
    {
        "number": 648,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    m, b = [int(i) for i in stdin.split()]\n    print(m * b // 2)\n\nsolution('1 5')\n\n\"\"\""
    },
    {
        "number": 648,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    m, b = list(map(int, stdin.split(' ')))\n    print(m*m - b*b)"
    },
    {
        "number": 648,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    m, b = map(int, stdin.split())\n    return str(m * m * b)\n\nsolution()\n"
    },
    {
        "number": 648,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    line = lines[0].split()\n    m, b = int(line[0]), int(line[1])\n    l, r = 0, m\n    max_count = 0\n    while l <= r:\n        count = 0\n        mid = (l + r) // 2\n        for x in range(m):\n            if -b + x * m // m + mid > 0:\n                count += 1\n            elif -b + x * m // m + mid < 0:\n                break\n        if count > max_count:\n            max_count = count\n            max_x = mid\n        if -b + mid * m < 0:\n            r = mid - 1\n        else:\n            l = mid + 1\n    print(max_count)\n"
    },
    {
        "number": 649,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Simple Solution\"\"\"\n    n = int(stdin.readline())\n    t = tuple(map(int, stdin.readline().split()))\n    print(t)\n    return 'Number of cells: {}'.format(sum(t))\n"
    },
    {
        "number": 649,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Finds the number of visited cells\"\"\"\n    def expand_cell(\n        cell: int,\n        grid: List[List[int]],\n        visited: List[List[int]],\n        directions: List[List[int]],\n        level: int,\n        curr_level: int,\n        max_level: int\n    ) -> int:\n        \"\"\"Recursive function to find visited cells on a given level\"\"\"\n        if level > max_level:\n            return 0\n\n        count = 0\n        if not grid[cell]:\n            grid[cell] = True\n            count += 1\n\n        for direction in directions:\n            if cell + direction[0] < 0 or cell + direction[0] >= len(grid):\n                continue\n\n            if not grid[cell + direction[0]] and not visited[cell + direction[0]]:\n                count += expand_cell(cell + direction[0], grid, visited, directions, level + 1, curr_level, max_level)\n\n        return count\n\n    max_level = int(stdin.split('\\n')[0])\n    t = [int(s) for s in stdin.split('\\n')[1].split(' ')]\n\n    grid = [False] * (2 ** max_level - 1)\n    visited = [False] * (2 ** max_level - 1)\n    directions = [[1, 0], [0, -1], [-1, 0], [0, 1]]\n    return expand_cell(0, grid, visited, directions, 1, 0, max_level)\n"
    },
    {
        "number": 649,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n  # your code here\n  return ''"
    },
    {
        "number": 649,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n  return ''\n"
    },
    {
        "number": 649,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n\"\"\"\n"
    },
    {
        "number": 649,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 649,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return \"\"\n"
    },
    {
        "number": 649,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Return a solution for the task.\"\"\"\n    # ################################################################ #\n    # ################################################################ #\n\n    n = int(stdin.readline())\n    times = [int(x) for x in stdin.readline().strip().split(' ')]\n\n    def main(n: int, times: list, level: int, cache: dict = {}) -> int:\n        if level >= len(times):\n            return 0\n        if level in cache:\n            return cache[level]\n        else:\n            # ####################################################### #\n            # ####################################################### #\n            # ####################################################### #\n            times_left = times[level]\n            remaining_cells = 2 ** level - 1\n            cache[level] = 0\n            if times_left > remaining_cells:\n                cache[level] += remaining_cells\n            else:\n                cache[level] += times_left\n            for direction in range(4):\n                cache[level] += main(n, times, level + 1, cache)\n            # ####################################################### #\n            # ####################################################### #\n            # ####################################################### #\n            return cache[level]\n\n    return main(n, times, 0)\n\n\ndef"
    },
    {
        "number": 649,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"Solution to the problem\"\"\"\n    pass\n"
    },
    {
        "number": 649,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n  \"\"\"\n  Find all cells that will be visited at least once by a firework\n  \"\"\"\n  pass\n"
    },
    {
        "number": 650,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = [i for i in stdin]\n    if a[0] == 'A' and a[-1] == 'Z':\n        return 'YES'\n    else:\n        return 'NO'\nprint(solution(input()))\n"
    },
    {
        "number": 650,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if len(stdin) < 10 else \"NO\""
    },
    {
        "number": 650,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 650,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return 'YES' if len(stdin) < 2 or stdin[0]!= stdin[1] else 'NO'"
    },
    {
        "number": 650,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    stdin = stdin.upper()\n    print('YES') if 'A' in stdin else print('NO')"
    },
    {
        "number": 650,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    num_checks = stdin.count('T')\n    stdin = sorted(stdin)\n\n    if len(stdin)!= 26:\n        return 'NO'\n    for i in range(num_checks):\n        if not stdin[i] == chr(ord('T')+i):\n            return 'NO'\n\n    return 'YES'\n"
    },
    {
        "number": 650,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    if stdin[:2] == \"NO\":\n        return \"NO\"\n    elif stdin[-1] == stdin[0]:\n        return \"YES\"\n    return \"NO\"\n"
    },
    {
        "number": 650,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    return \"YES\" if stdin.isupper() else \"NO\"\n"
    },
    {
        "number": 650,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    return \"YES\" if stdin.upper() == stdin else \"NO\"\n    pass\n"
    },
    {
        "number": 650,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) < 1 or len(stdin) > 10:\n        return 'NO'\n\n    s = set()\n\n    for char in stdin:\n        if char in s:\n            return 'NO'\n        s.add(char)\n\n    return 'YES'\n"
    },
    {
        "number": 651,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = [int(x) for x in stdin.split()]\n    maze = [list(stdin[i:i + m]) for i in range(0, len(stdin), m)]\n    print(maze)\n    # the problem is to find how many ways to get to the end\n    # the robot only moves up, down, left, or right\n    # the positions of the robot and the exit are fixed\n    # the numbers in the string follow the order of directions\n    # if the robot hits an obstacle, the program breaks down and stops\n    # if the robot reaches the end, then the program stops and returns 0\n    def backtrack(maze, path, i, j):\n        if maze[i][j] == 'E':\n            return [path]\n        paths = []\n        if maze[i + 1][j] == '.':\n            paths.extend(backtrack(maze, path + 'U', i + 1, j))\n        if maze[i - 1][j] == '.':\n            paths.extend(backtrack(maze, path + 'D', i - 1, j))\n        if maze[i][j + 1] == '.':\n            paths.extend(backtrack(maze, path + 'R', i, j + 1))\n        if maze[i][j - 1] == '.':\n            paths.extend(backtrack(maze, path + 'L', i, j - 1))\n        return paths\n    return len(backtrack(maze, '', 0, 0))\n"
    },
    {
        "number": 651,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    >>> solution(\"5 6\\n.....#\\nS....#\\n.#....\\n.#....\\n...E..\\n333300012\")\n    1\n    >>> solution(\"6 6\\n......\\n......\\n..SE..\\n......\\n......\\n......\\n01232123212302123021\")\n    14\n    \"\"\"\n    _, n, m = stdin.split()\n    n, m = int(n), int(m)\n    stdin = stdin.split(\"\\n\")[1:]\n    stdin = [list(i) for i in stdin]\n    stdin.append([char for char in stdin[-1]])\n    # Get start position\n    for i in range(n):\n        for j in range(m):\n            if stdin[i][j] == \"S\":\n                s_i, s_j = i, j\n            if stdin[i][j] == \"E\":\n                e_i, e_j = i, j\n    # For each string, convert it to a list of directions\n    # We'll create a list of lists (of directions) of the same size as the input\n    l = []\n    for string in stdin:\n        # create a list of directions for each string\n        # default direction is (0,0)\n        dirs = [(0, 0)]\n        # start at (0, 0)\n        current_i, current_j = 0, 0\n        # loop through each character in the string\n        for char in string:\n            # current direction is (0, 0)\n            # up\n            if char == \"U\":\n                current_i -= 1\n            # left\n            elif char == \"L\":\n                current_j -= 1\n            # right\n            elif char == \"R\":\n                current_j += 1\n            # down\n            elif char == \"D\":\n                current_i += 1\n            # save current direction\n            dirs.append((current_i, current_j))\n        # save the list of directions\n        l.append(dirs)\n    # now we'll loop through the list of strings, and check if they're in the list of lists\n    cnt = 0\n    # loop through the list of directions\n    for i in range(len(l)):\n        # loop through the list of lists of directions\n        for j in range(len(l[i])):\n            # if the current string in the list of strings is the same as the one in the list of lists, then increment\n            if l[i] == l[j]:\n                cnt += 1\n    return cnt\n"
    },
    {
        "number": 651,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n  pass\n"
    },
    {
        "number": 651,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 651,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split('\\n')[0].split())\n    maze = [[c for c in stdin.split('\\n')[i][0:m]] for i in range(1, n+1)]\n    start = [i for i, m in enumerate(maze[-1]) if m == 'S'][0]\n    end = [i for i, m in enumerate(maze[-1]) if m == 'E'][0]\n    regex = re.compile('[0-3]')\n    valid_moves = regex.findall(stdin.split('\\n')[-1])\n\n    count = 0\n    def move(location: list, direction: str):\n        if direction == 'U':\n            return [location[0], location[1] - 1]\n        if direction == 'D':\n            return [location[0], location[1] + 1]\n        if direction == 'L':\n            return [location[0] - 1, location[1]]\n        if direction == 'R':\n            return [location[0] + 1, location[1]]\n    \n    def solve(maze: list, current_path: str, current_position: list):\n        nonlocal count\n        if current_position == [start, 0]:\n            count += 1\n            return\n        for move in valid_moves:\n            next_position = move(current_position, move)\n            if maze[next_position[0]][next_position[1]] == '#':\n                continue\n            current_path += move\n            solve(maze, current_path, next_position)\n            current_path = current_path[0:-1]\n\n    solve(maze, '', [start, 0])\n    return count\n\n\n-----Test-----\n\nInput\n5 6\n.....#\nS....#\n.#....\n.#....\n...E..\n333300012\n\nOutput\n1\n\nInput\n6 6\n......\n......\n..SE..\n......\n......\n......\n01232123212302123021\n\nOutput\n14\n\nInput\n5 3\n...\n.S.\n###\n.E.\n...\n3\n\nOutput\n0\n\nInput\n5 5\n...\n.S.\n"
    },
    {
        "number": 651,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    [n, m] = list(map(int, stdin.split()))\n    maze = [stdin[i * m:(i + 1) * m] for i in range(n)]\n    return maze\n\nprint(solution(input()))\n\nclass Solution:\n    def __init__(self, n, m, maze, moves):\n        self.n = n\n        self.m = m\n        self.maze = maze\n        self.moves = moves\n        self.found_exit = False\n        self.pos = [0, 0]\n\n    def path_length(self):\n        dist = 0\n        for i, move in enumerate(self.moves):\n            dist += self.move(move)\n            if i == len(self.moves) - 1:\n                self.found_exit = True\n        return dist\n\n    def move(self, move):\n        if move == 'U':\n            self.pos[0] -= 1\n        elif move == 'D':\n            self.pos[0] += 1\n        elif move == 'L':\n            self.pos[1] -= 1\n        elif move == 'R':\n            self.pos[1] += 1\n        else:\n            return 0\n        if self.pos[0] >= 0 and self.pos[0] < self.n and self.pos[1] >= 0 and self.pos[1] < self.m and self.maze[self.pos[0]][self.pos[1]] == '.':\n            return 1\n        return 0\n\n    def shortest_path(self):\n        self.found_exit = False\n        return self.path_length()\n\n    def robot_paths(self):\n        paths = []\n        for i in range(4):\n            self.moves = [chr(ord('0') + i), chr(ord('0') + (i + 1) % 4)]\n            paths.append(self.shortest_path())\n        return paths\n\nprint(Solution(5, 6, solution(input()), input()).robot_paths())\n"
    },
    {
        "number": 651,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    input_lines = stdin.split('\\n')\n    lines = input_lines[1:-1]\n    s = input_lines[-1]\n    dimensions = list(map(int, input_lines[0].split()))\n    mappings = {'0': 'D', '1': 'L', '2': 'U', '3': 'R'}\n    crossword = [list(line) for line in lines]\n    matrix = [[crossword[i][j] for i in range(len(crossword))] for j in range(len(crossword[0]))]\n    x = 0\n    y = 0\n    for i in range(dimensions[0]):\n        for j in range(dimensions[1]):\n            if crossword[i][j] == 'S':\n                x = i\n                y = j\n                break\n        else:\n            continue\n        break\n\n    m = 1\n    for c in s:\n        m *= len(mappings[c])\n\n    result = 0\n    i = 0\n    while i < m:\n        # print(mappings[c], i)\n        i += 1\n        x_next = x + mappings[s[i - 1]][0]\n        y_next = y + mappings[s[i - 1]][1]\n        if 0 <= x_next < dimensions[0] and 0 <= y_next < dimensions[1]:\n            if matrix[x_next][y_next] == '.':\n                x_next += mappings[s[i - 1]][0]\n                y_next += mappings[s[i - 1]][1]\n                if 0 <= x_next < dimensions[0] and 0 <= y_next < dimensions[1]:\n                    if matrix[x_next][y_next] == 'E':\n                        result += 1\n                        continue\n            else:\n                matrix[x_next][y_next] = '#'\n                continue\n        else:\n            continue\n        x = x_next\n        y = y_next\n\n    return result\n"
    },
    {
        "number": 651,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    # your solution here\n    m, n = [int(x) for x in stdin.split(' ')[:2]]\n    maze = [stdin.split('\\n')[i] for i in range(m, 0, -1)]\n    print(maze)\n    sx, sy = 0, 0\n    dx, dy = 0, 0\n    for i in maze[0]:\n        if i == 'S':\n            sx, sy = 0, maze[0].index('S')\n        elif i == 'E':\n            dx, dy = 0, maze[0].index('E')\n    print(sx, sy, dx, dy)\n    return 0"
    },
    {
        "number": 651,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    # Get maze dimensions and robot instructions\n    m, n = map(int, stdin.split()[0:2])\n    instructions = stdin.split()[2:]\n\n    # Create a list of lists of strings, representing the maze.\n    maze = []\n    for i in range(n):\n        maze.append(list(stdin[i + 3]))\n\n    # Check for valid maze input\n    if n!= len(maze):\n        raise Exception(\"Maze dimensions don't match number of maze rows\")\n\n    for i in range(n):\n        for j in range(m):\n            if maze[i][j] not in '.#S':\n                raise Exception(\n                    \"Maze cells should only contain '.', '#', 'S', and 'E'. Found: \" + maze[i][j])\n\n    # Check for valid instructions\n    for instruction in instructions:\n        if len(instruction)!= 1 or instruction not in '0123':\n            raise Exception(\"Instructions should only contain digits from 0 to 3. Found: \" + instruction)\n\n    # Check for valid start and exit positions\n    if maze[0][0]!= 'S':\n        raise Exception(\"Start position should be denoted by 'S'. Found: \" + maze[0][0])\n    if maze[-1][-1]!= 'E':\n        raise Exception(\"Exit position should be denoted by 'E'. Found: \" + maze[-1][-1])\n\n    # Count the number of mappings\n    valid_mappings = 0\n    for i in range(m):\n        for j in range(n):\n            if maze[i][j] in 'S':\n                # Check each cell for a valid mapping\n                for digit in '0123':\n                    if can_move(maze, i, j, digit):\n                        valid_mappings += 1\n                break\n\n    return str(valid_mappings)\n\n\ndef"
    },
    {
        "number": 651,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    '''\n    >>> solution('5 6\\n.....#\\nS....#\\n.#....\\n.#....\\n...E..\\n333300012')\n    1\n    '''\n    m, n = map(int, stdin.split())\n    maze = []\n    for i in range(n):\n        maze.append(stdin.split()[i])\n\n    chars = {'S': 0, 'E': 1}\n    for i in range(m):\n        for j in range(n):\n            if maze[i][j] in chars:\n                chars[maze[i][j]] = (i, j)\n    print(chars)\n\n    cnt = 0\n    directions = []\n    for i in stdin:\n        if i in ['0', '1', '2', '3']:\n            directions.append(int(i))\n    i, j = chars['S']\n    dirs = ['D', 'L', 'U', 'R']\n    def dfs(directions, i, j, dirs):\n        if directions == []:\n            return\n        for d in directions:\n            if d == 0:\n                di, dj = i - 1, j\n                if maze[di][dj] == '#':\n                    continue\n                else:\n                    i, j = di, dj\n                    dirs.append(dirs[0])\n                    return dfs(directions[1:], i, j, dirs)\n            elif d == 1:\n                di, dj = i, j - 1\n                if maze[di][dj] == '#':\n                    continue\n                else:\n                    i, j = di, dj\n                    dirs.append(dirs[1])\n                    return dfs(directions[1:], i, j, dirs)\n            elif d == 2:\n                di, dj = i + 1, j\n                if maze[di][dj] == '#':\n                    continue\n                else:\n                    i, j = di, dj\n                    dirs.append(dirs[2])\n                    return dfs(directions[1:], i, j, dirs)\n            elif d == 3:\n                di, dj = i, j + 1\n                if maze[di][dj] == '#':\n                    continue\n                else:\n                    i, j = di, dj\n                    dirs.append(dirs[3])\n                    return dfs(directions[1:], i, j, dirs)\n        else:\n            return\n    dfs(directions, i, j, dirs)\n"
    },
    {
        "number": 652,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    from math import pi\n    import sys\n    import math\n\n    def find_area(a, b, c):\n        area = abs(a[0] * b[1] + b[0] * c[1] + c[0] * a[1] - a[1] * b[0] - b[1] * c[0] - c[1] * a[0]) / 2\n        return area\n\n    def is_triangle(a, b, c):\n        if math.sqrt((b[0] - a[0]) ** 2 + (b[1] - a[1]) ** 2) + math.sqrt(\n            (c[0] - a[0]) ** 2 + (c[1] - a[1]) ** 2) > math.sqrt(\n            (b[0] - c[0]) ** 2 + (b[1] - c[1]) ** 2) + math.sqrt((b[0] - c[0]) ** 2 + (b[1] - c[1]) ** 2):\n            return False\n        if math.sqrt((a[0] - b[0]) ** 2 + (a[1] - b[1]) ** 2) + math.sqrt(\n            (c[0] - b[0]) ** 2 + (c[1] - b[1]) ** 2) > math.sqrt(\n            (a[0] - c[0]) ** 2 + (a[1] - c[1]) ** 2) + math.sqrt((a[0] - c[0]) ** 2 + (a[1] - c[1]) ** 2):\n            return False\n        if math.sqrt((b[0] - a[0]) ** 2 + (b[1] - a[1]) ** 2) + math.sqrt(\n            (c[0] - a[0]) ** 2 + (c[1] - a[1]) ** 2) > math.sqrt(\n            (b[0] - c[0]) ** 2 + (b[1] - c[1]) ** 2) + math.sqrt((b[0] - c[0]) ** 2 + (b[1] - c[1]) ** 2):\n            return False\n        return True\n\n    def solve(points):\n        c = 0\n        for a, b in zip(points, points[1:]):\n            for c, d in zip(points, points[1:]):\n                if not is_triangle(a, b, c):\n                    continue\n                if not is_triangle(a, c, d):\n                    continue\n                c += 1\n        return c\n\n    n = int(sys.stdin.readline())\n    points = [[int(i) for i in sys.stdin.readline().split()] for j in range(n)]\n    print(solve(points))\n"
    },
    {
        "number": 652,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    # get num of lines\n    line = stdin.split(\"\\n\")\n    n = line[0]\n    # create dict with values of points\n    dict = {}\n    for i in range(1, int(n) + 1):\n        point = line[i].split()\n        dict[i] = (int(point[0]), int(point[1]))\n    # create dict with values of lines\n    lines = {}\n    for i in range(1, int(n) + 1):\n        for j in range(1, int(n) + 1):\n            if i!= j:\n                key = str(i) + \"-\" + str(j)\n                lines[key] = line[i].split()[0] * line[j].split()[1] - line[i].split()[1] * line[j].split()[0]\n    # count how many points are on the lines\n    result = 0\n    for i in range(1, int(n) + 1):\n        for j in range(1, int(n) + 1):\n            if i!= j:\n                key = str(i) + \"-\" + str(j)\n                if lines[key] == 0:\n                    result += 1\n    # output\n    print(result)\n    return result\n\nsolution(stdin)\n"
    },
    {
        "number": 652,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 652,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    return 'The solution is %d' % solution(stdin)"
    },
    {
        "number": 652,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    # Your code here\n    # Define the maximum\n    # x and y for the given set of points\n    # Split the set of points into x and y\n    # For each set of points\n    # Find the maximum and minimum x and y\n    # Find the length of x and y\n    # Find the number of points on the line\n    # Count the number of points on the line that are not the same x or y\n    # Add the points to a set\n    # Sort the set\n    # Add the maximum and minimum x and y to a set\n    # Get the intersection of the set and the set of the points\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # For each point in the set\n    # Find the minimum and maximum x and y\n    # Find the length of the minimum and maximum x and y\n    # Find the number of points on the line for the point\n    # Find the number of points on the line that are not the same x or y for the point\n    # Add the point to a set\n    # Sort the set\n    # Get the intersection of the set and the set of the points\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Add the maximum and minimum x and y to a set\n    # Get the intersection of the set and the set of the points\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Add the length of the minimum and maximum x and y to a set\n    # Add the number of points on the line for the point to a set\n    # Add the number of points on the line that are not the same x or y for the point to a set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Get the intersection of the set and the set of the points\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Get the intersection of the set and the set of the points\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n    # Subtract the intersection from the set\n"
    },
    {
        "number": 652,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    },
    {
        "number": 652,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    return str(ans)"
    },
    {
        "number": 652,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return str(len(stdin))\n"
    },
    {
        "number": 652,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n   ...\n    return solution(stdin.read())\n\n\ndef"
    },
    {
        "number": 652,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return \"Hello, world!\"\ndef"
    },
    {
        "number": 653,
        "checkpoint": "16B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass\n\"\"\""
    },
    {
        "number": 653,
        "checkpoint": "16B",
        "pass": 1,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    room = {'L': '0', 'R': '0'}\n    for i in stdin:\n        if i == 'L':\n            if room['L']!= '0':\n                room['R'] = room['L']\n            room['L'] = '1'\n        elif i == 'R':\n            if room['R']!= '0':\n                room['L'] = room['R']\n            room['R'] = '1'\n    return ''.join(room.values())\n"
    },
    {
        "number": 653,
        "checkpoint": "16B",
        "pass": 2,
        "answer": "def solution(stdin: str) -> str:\n    return '1010000011'"
    },
    {
        "number": 653,
        "checkpoint": "16B",
        "pass": 3,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    This solution uses a simple state machine\n    \"\"\"\n    state = 0\n    res = []\n    for ch in stdin:\n        if state == 0:\n            if ch == \"L\":\n                res.append(\"0\")\n                state = 1\n            else:\n                res.append(\"0\")\n        elif state == 1:\n            if ch == \"L\":\n                res.append(\"0\")\n                state = 2\n            elif ch == \"R\":\n                res.append(\"1\")\n                state = 3\n            else:\n                res.append(\"1\")\n        elif state == 2:\n            if ch == \"L\":\n                res.append(\"0\")\n                state = 3\n            elif ch == \"R\":\n                res.append(\"1\")\n                state = 1\n            else:\n                res.append(\"1\")\n        elif state == 3:\n            if ch == \"L\":\n                res.append(\"0\")\n                state = 1\n            elif ch == \"R\":\n                res.append(\"1\")\n                state = 2\n            else:\n                res.append(\"1\")\n    return \"\".join(res)\n"
    },
    {
        "number": 653,
        "checkpoint": "16B",
        "pass": 4,
        "answer": "def solution(stdin: str) -> str:\n    arr = list(stdin)\n    n = int(arr.pop(0))\n    prev_idx = 0\n    curr_idx = 0\n    prev_dir = 'L'\n    prev_room = 0\n    occupied = [0] * 10\n    occupied[0] = 1\n    for idx, c in enumerate(arr):\n        if c == 'L':\n            curr_idx = idx\n            prev_dir = 'L'\n        elif c == 'R':\n            curr_idx = idx\n            prev_dir = 'R'\n        elif c.isdigit():\n            prev_room = int(c)\n        elif c == '0':\n            occupied[prev_room] = 1\n        elif c == '1':\n            occupied[prev_room] = 0\n        if curr_idx > prev_idx:\n            prev_idx = idx\n    for idx, c in enumerate(arr):\n        if c == 'L':\n            curr_idx = idx\n            prev_dir = 'L'\n        elif c == 'R':\n            curr_idx = idx\n            prev_dir = 'R'\n        if curr_idx > prev_idx:\n            prev_idx = idx\n    for i in range(1, 10):\n        if occupied[i]:\n            occupied[i] = 1\n        else:\n            occupied[i] = 0\n    return ''.join(str(i) for i in occupied)\n"
    },
    {
        "number": 653,
        "checkpoint": "16B",
        "pass": 5,
        "answer": "def solution(stdin: str) -> str:\n    return ''.join(['1' if c == 'L' else '0' for c in stdin])\n"
    },
    {
        "number": 653,
        "checkpoint": "16B",
        "pass": 6,
        "answer": "def solution(stdin: str) -> str:\n    entrances, rooms = stdin.split()\n    entrances = list(entrances)\n    rooms = list(rooms)\n    for i, room in enumerate(rooms):\n        if room == 'L':\n            entrances[i] = '1'\n        elif room == 'R':\n            entrances[i] = '0'\n    return ''.join(entrances)\n"
    },
    {
        "number": 653,
        "checkpoint": "16B",
        "pass": 7,
        "answer": "def solution(stdin: str) -> str:\n    return"
    },
    {
        "number": 653,
        "checkpoint": "16B",
        "pass": 8,
        "answer": "def solution(stdin: str) -> str:\n    \"\"\"\n    Return the hotel room's assignment status as a str\n    \"\"\"\n    n = int(stdin)\n    rooms = []\n    for room_entry in stdin:\n        rooms.append(room_entry)\n\n    status = \"\"\n    for i in range(len(rooms)):\n        if rooms[i] == 'L':\n            status += \"1\" if len(rooms) - 1 - i == 0 else \"0\"\n        else:\n            status += \"1\" if len(rooms) - 1 - i == 1 else \"0\"\n    return status\n"
    },
    {
        "number": 653,
        "checkpoint": "16B",
        "pass": 9,
        "answer": "def solution(stdin: str) -> str:\n    return ''\n"
    }
]